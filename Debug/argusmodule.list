
argusmodule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ac0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08013d60  08013d60  00014d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014198  08014198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080141a0  080141a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080141a4  080141a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  080141a8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000113c  240002cc  08014474  000162cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001408  08014474  00016408  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000162cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028e35  00000000  00000000  000162fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005ada  00000000  00000000  0003f12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f08  00000000  00000000  00044c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017b6  00000000  00000000  00046b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000a1f6  00000000  00000000  000482ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f771  00000000  00000000  000524c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ca4b  00000000  00000000  00081c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ee680  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008f54  00000000  00000000  001ee6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001f7618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002cc 	.word	0x240002cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013d48 	.word	0x08013d48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d0 	.word	0x240002d0
 80002dc:	08013d48 	.word	0x08013d48

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000688:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800068c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d013      	beq.n	80006c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000698:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800069c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80006a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00b      	beq.n	80006c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006a8:	e000      	b.n	80006ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80006aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0f9      	beq.n	80006aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006b6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
	int i=0;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	e009      	b.n	80006f8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	60ba      	str	r2, [r7, #8]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffc7 	bl	8000680 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	dbf1      	blt.n	80006e4 <_write+0x16>
	}
	return len;
 8000700:	687b      	ldr	r3, [r7, #4]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800070e:	f000 fbf9 	bl	8000f04 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f001 f921 	bl	8001958 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f81b 	bl	8000750 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800071a:	f000 f89d 	bl	8000858 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 faf1 	bl	8000d04 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000722:	f000 f8b7 	bl	8000894 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000726:	f000 f8f5 	bl	8000914 <MX_I2C2_Init>
  MX_I2C4_Init();
 800072a:	f000 f933 	bl	8000994 <MX_I2C4_Init>
  MX_SDMMC1_SD_Init();
 800072e:	f000 f971 	bl	8000a14 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000732:	f000 f991 	bl	8000a58 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000736:	f000 f9e5 	bl	8000b04 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 800073a:	f000 fa39 	bl	8000bb0 <MX_USART2_UART_Init>
  MX_USART3_Init();
 800073e:	f000 fa83 	bl	8000c48 <MX_USART3_Init>
  MX_FATFS_Init();
 8000742:	f00c fced 	bl	800d120 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000746:	f010 f9d5 	bl	8010af4 <MX_USB_DEVICE_Init>
//  SDIO_Get_SDCard_Info();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074a:	bf00      	nop
 800074c:	e7fd      	b.n	800074a <main+0x40>
	...

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b09c      	sub	sp, #112	@ 0x70
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075a:	224c      	movs	r2, #76	@ 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f011 fcd0 	bl	8012104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f011 fcca 	bl	8012104 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000770:	2002      	movs	r0, #2
 8000772:	f003 f91b 	bl	80039ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <SystemClock_Config+0x100>)
 800077c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077e:	4a34      	ldr	r2, [pc, #208]	@ (8000850 <SystemClock_Config+0x100>)
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <SystemClock_Config+0x100>)
 8000788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <SystemClock_Config+0x104>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000798:	4a2e      	ldr	r2, [pc, #184]	@ (8000854 <SystemClock_Config+0x104>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000854 <SystemClock_Config+0x104>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ac:	bf00      	nop
 80007ae:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <SystemClock_Config+0x104>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ba:	d1f8      	bne.n	80007ae <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80007bc:	2323      	movs	r3, #35	@ 0x23
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007ce:	2301      	movs	r3, #1
 80007d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80007de:	230c      	movs	r3, #12
 80007e0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007e6:	2303      	movs	r3, #3
 80007e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ee:	230c      	movs	r3, #12
 80007f0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007f2:	2302      	movs	r3, #2
 80007f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 f91e 	bl	8003a40 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800080a:	f000 fba7 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	233f      	movs	r3, #63	@ 0x3f
 8000810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2303      	movs	r3, #3
 8000814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000822:	2340      	movs	r3, #64	@ 0x40
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800082a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800082c:	2340      	movs	r3, #64	@ 0x40
 800082e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2101      	movs	r1, #1
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fd5d 	bl	80042f4 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000840:	f000 fb8c 	bl	8000f5c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000844:	f003 ff0c 	bl	8004660 <HAL_RCC_EnableCSS>
}
 8000848:	bf00      	nop
 800084a:	3770      	adds	r7, #112	@ 0x70
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58000400 	.word	0x58000400
 8000854:	58024800 	.word	0x58024800

08000858 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0b0      	sub	sp, #192	@ 0xc0
 800085c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	22c0      	movs	r2, #192	@ 0xc0
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f011 fc4d 	bl	8012104 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800086a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800086e:	f04f 0300 	mov.w	r3, #0
 8000872:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000876:	2300      	movs	r3, #0
 8000878:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4618      	mov	r0, r3
 800087e:	f004 f8f1 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000888:	f000 fb68 	bl	8000f5c <Error_Handler>
  }
}
 800088c:	bf00      	nop
 800088e:	37c0      	adds	r7, #192	@ 0xc0
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_I2C1_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	@ (800090c <MX_I2C1_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000910 <MX_I2C1_Init+0x7c>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ce:	480e      	ldr	r0, [pc, #56]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008d0:	f001 fc6e 	bl	80021b0 <HAL_I2C_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008da:	f000 fb3f 	bl	8000f5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4809      	ldr	r0, [pc, #36]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008e2:	f001 fd01 	bl	80022e8 <HAL_I2CEx_ConfigAnalogFilter>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 fb36 	bl	8000f5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008f4:	f001 fd43 	bl	800237e <HAL_I2CEx_ConfigDigitalFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fb2d 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	240002e8 	.word	0x240002e8
 800090c:	40005400 	.word	0x40005400
 8000910:	00909fce 	.word	0x00909fce

08000914 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000918:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_I2C2_Init+0x74>)
 800091a:	4a1c      	ldr	r2, [pc, #112]	@ (800098c <MX_I2C2_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <MX_I2C2_Init+0x74>)
 8000920:	4a1b      	ldr	r2, [pc, #108]	@ (8000990 <MX_I2C2_Init+0x7c>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092a:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <MX_I2C2_Init+0x74>)
 800092c:	2201      	movs	r2, #1
 800092e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_I2C2_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000936:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_I2C2_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <MX_I2C2_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_I2C2_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_I2C2_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800094e:	480e      	ldr	r0, [pc, #56]	@ (8000988 <MX_I2C2_Init+0x74>)
 8000950:	f001 fc2e 	bl	80021b0 <HAL_I2C_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800095a:	f000 faff 	bl	8000f5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095e:	2100      	movs	r1, #0
 8000960:	4809      	ldr	r0, [pc, #36]	@ (8000988 <MX_I2C2_Init+0x74>)
 8000962:	f001 fcc1 	bl	80022e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800096c:	f000 faf6 	bl	8000f5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000970:	2100      	movs	r1, #0
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_I2C2_Init+0x74>)
 8000974:	f001 fd03 	bl	800237e <HAL_I2CEx_ConfigDigitalFilter>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800097e:	f000 faed 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2400033c 	.word	0x2400033c
 800098c:	40005800 	.word	0x40005800
 8000990:	00909fce 	.word	0x00909fce

08000994 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_I2C4_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a0c <MX_I2C4_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909FCE;
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <MX_I2C4_Init+0x7c>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009a4:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009ce:	480e      	ldr	r0, [pc, #56]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009d0:	f001 fbee 	bl	80021b0 <HAL_I2C_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009da:	f000 fabf 	bl	8000f5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009e2:	f001 fc81 	bl	80022e8 <HAL_I2CEx_ConfigAnalogFilter>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80009ec:	f000 fab6 	bl	8000f5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_I2C4_Init+0x74>)
 80009f4:	f001 fcc3 	bl	800237e <HAL_I2CEx_ConfigDigitalFilter>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 faad 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	24000390 	.word	0x24000390
 8000a0c:	58001c00 	.word	0x58001c00
 8000a10:	00909fce 	.word	0x00909fce

08000a14 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <MX_SDMMC1_SD_Init+0x3c>)
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a54 <MX_SDMMC1_SD_Init+0x40>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_SDMMC1_SD_Init+0x3c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <MX_SDMMC1_SD_Init+0x3c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_SDMMC1_SD_Init+0x3c>)
 8000a2c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a30:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a32:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <MX_SDMMC1_SD_Init+0x3c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <MX_SDMMC1_SD_Init+0x3c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  HAL_SD_Init(&hsd1);
 8000a3e:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <MX_SDMMC1_SD_Init+0x3c>)
 8000a40:	f006 fd0e 	bl	8007460 <HAL_SD_Init>
  HAL_SD_InitCard(&hsd1);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <MX_SDMMC1_SD_Init+0x3c>)
 8000a46:	f006 fd8f 	bl	8007568 <HAL_SD_InitCard>
  //printf("%d \n",ret);
  /* USER CODE END SDMMC1_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	240003e4 	.word	0x240003e4
 8000a54:	52007000 	.word	0x52007000

08000a58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a5c:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a5e:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <MX_SPI1_Init+0xa8>)
 8000a60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a62:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a64:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6a:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a70:	4b22      	ldr	r3, [pc, #136]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a72:	2203      	movs	r2, #3
 8000a74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a84:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aae:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_SPI1_Init+0xa4>)
 8000ae8:	f008 f86c 	bl	8008bc4 <HAL_SPI_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000af2:	f000 fa33 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	24000460 	.word	0x24000460
 8000b00:	40013000 	.word	0x40013000

08000b04 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b08:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b0a:	4a28      	ldr	r2, [pc, #160]	@ (8000bac <MX_SPI4_Init+0xa8>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b10:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b14:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b16:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b1e:	2203      	movs	r2, #3
 8000b20:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b30:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b34:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_SPI4_Init+0xa4>)
 8000b94:	f008 f816 	bl	8008bc4 <HAL_SPI_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000b9e:	f000 f9dd 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	240004e8 	.word	0x240004e8
 8000bac:	40013400 	.word	0x40013400

08000bb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000bb6:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be6:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bec:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf8:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000bfa:	f008 f922 	bl	8008e42 <HAL_UART_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c04:	f000 f9aa 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000c0c:	f009 f92b 	bl	8009e66 <HAL_UARTEx_SetTxFifoThreshold>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c16:	f000 f9a1 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4808      	ldr	r0, [pc, #32]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000c1e:	f009 f960 	bl	8009ee2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c28:	f000 f998 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <MX_USART2_UART_Init+0x90>)
 8000c2e:	f009 f8e1 	bl	8009df4 <HAL_UARTEx_DisableFifoMode>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c38:	f000 f990 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	24000570 	.word	0x24000570
 8000c44:	40004400 	.word	0x40004400

08000c48 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8000d00 <MX_USART3_Init+0xb8>)
 8000c50:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8000c52:	4b2a      	ldr	r3, [pc, #168]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c5a:	4b28      	ldr	r3, [pc, #160]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c60:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c66:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000c72:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000c78:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c90:	481a      	ldr	r0, [pc, #104]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000c92:	f009 f9b3 	bl	8009ffc <HAL_USART_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8000c9c:	f000 f95e 	bl	8000f5c <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4816      	ldr	r0, [pc, #88]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000ca4:	f00a f858 	bl	800ad58 <HAL_USARTEx_SetTxFifoThreshold>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000cae:	f000 f955 	bl	8000f5c <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4811      	ldr	r0, [pc, #68]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000cb6:	f00a f88d 	bl	800add4 <HAL_USARTEx_SetRxFifoThreshold>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8000cc0:	f000 f94c 	bl	8000f5c <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000cc8:	f009 ffd0 	bl	800ac6c <HAL_USARTEx_ConfigNSS>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8000cd2:	f000 f943 	bl	8000f5c <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8000cd6:	4809      	ldr	r0, [pc, #36]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000cd8:	f00a f805 	bl	800ace6 <HAL_USARTEx_DisableFifoMode>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8000ce2:	f000 f93b 	bl	8000f5c <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART3_Init+0xb4>)
 8000ce8:	f009 ff6b 	bl	800abc2 <HAL_USARTEx_EnableSlaveMode>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8000cf2:	f000 f933 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24000604 	.word	0x24000604
 8000d00:	40004800 	.word	0x40004800

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	@ 0x30
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	4b74      	ldr	r3, [pc, #464]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	4a72      	ldr	r2, [pc, #456]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2a:	4b70      	ldr	r3, [pc, #448]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d38:	4b6c      	ldr	r3, [pc, #432]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	4a6b      	ldr	r2, [pc, #428]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d48:	4b68      	ldr	r3, [pc, #416]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d56:	4b65      	ldr	r3, [pc, #404]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	4a63      	ldr	r2, [pc, #396]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d66:	4b61      	ldr	r3, [pc, #388]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b5d      	ldr	r3, [pc, #372]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d84:	4b59      	ldr	r3, [pc, #356]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b56      	ldr	r3, [pc, #344]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	4a54      	ldr	r2, [pc, #336]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da2:	4b52      	ldr	r3, [pc, #328]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db0:	4b4e      	ldr	r3, [pc, #312]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	4a4d      	ldr	r2, [pc, #308]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc0:	4b4a      	ldr	r3, [pc, #296]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|RED_Pin|WHITE_Pin|GREEN_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f642 2108 	movw	r1, #10760	@ 0x2a08
 8000dd4:	4846      	ldr	r0, [pc, #280]	@ (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000dd6:	f001 f9d1 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5607_ON_GPIO_Port, MS5607_ON_Pin, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de0:	4844      	ldr	r0, [pc, #272]	@ (8000ef4 <MX_GPIO_Init+0x1f0>)
 8000de2:	f001 f9cb 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADXL375_ON_Pin|BNO055_ON_Pin, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	f248 0108 	movw	r1, #32776	@ 0x8008
 8000dec:	4842      	ldr	r0, [pc, #264]	@ (8000ef8 <MX_GPIO_Init+0x1f4>)
 8000dee:	f001 f9c5 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2110      	movs	r1, #16
 8000df6:	483f      	ldr	r0, [pc, #252]	@ (8000ef4 <MX_GPIO_Init+0x1f0>)
 8000df8:	f001 f9c0 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_Pin|HEARTBEAT_Pin|BNO086_RST_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f248 0122 	movw	r1, #32802	@ 0x8022
 8000e02:	483e      	ldr	r0, [pc, #248]	@ (8000efc <MX_GPIO_Init+0x1f8>)
 8000e04:	f001 f9ba 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MPL311_ON_Pin|BNO086_ON_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f244 0102 	movw	r1, #16386	@ 0x4002
 8000e0e:	4838      	ldr	r0, [pc, #224]	@ (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000e10:	f001 f9b4 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO055_RST_Pin|GPS_RST_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2118      	movs	r1, #24
 8000e18:	4839      	ldr	r0, [pc, #228]	@ (8000f00 <MX_GPIO_Init+0x1fc>)
 8000e1a:	f001 f9af 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS_Pin RED_Pin WHITE_Pin GREEN_Pin
                           MPL311_ON_Pin BNO086_ON_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|RED_Pin|WHITE_Pin|GREEN_Pin
 8000e1e:	f646 230a 	movw	r3, #27146	@ 0x6a0a
 8000e22:	61fb      	str	r3, [r7, #28]
                          |MPL311_ON_Pin|BNO086_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	482e      	ldr	r0, [pc, #184]	@ (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000e38:	f000 ffd8 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : MS5607_ON_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = MS5607_ON_Pin|SPI1_CS_Pin;
 8000e3c:	f242 0310 	movw	r3, #8208	@ 0x2010
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4827      	ldr	r0, [pc, #156]	@ (8000ef4 <MX_GPIO_Init+0x1f0>)
 8000e56:	f000 ffc9 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e62:	2302      	movs	r3, #2
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4822      	ldr	r0, [pc, #136]	@ (8000ef8 <MX_GPIO_Init+0x1f4>)
 8000e6e:	f000 ffbd 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_ON_Pin BNO055_ON_Pin */
  GPIO_InitStruct.Pin = ADXL375_ON_Pin|BNO055_ON_Pin;
 8000e72:	f248 0308 	movw	r3, #32776	@ 0x8008
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481b      	ldr	r0, [pc, #108]	@ (8000ef8 <MX_GPIO_Init+0x1f4>)
 8000e8c:	f000 ffae 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_Pin HEARTBEAT_Pin BNO086_RST_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|HEARTBEAT_Pin|BNO086_RST_Pin;
 8000e90:	f248 0322 	movw	r3, #32802	@ 0x8022
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4814      	ldr	r0, [pc, #80]	@ (8000efc <MX_GPIO_Init+0x1f8>)
 8000eaa:	f000 ff9f 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <MX_GPIO_Init+0x1f4>)
 8000ec4:	f000 ff92 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO055_RST_Pin GPS_RST_Pin */
  GPIO_InitStruct.Pin = BNO055_RST_Pin|GPS_RST_Pin;
 8000ec8:	2318      	movs	r3, #24
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4808      	ldr	r0, [pc, #32]	@ (8000f00 <MX_GPIO_Init+0x1fc>)
 8000ee0:	f000 ff84 	bl	8001dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee4:	bf00      	nop
 8000ee6:	3730      	adds	r7, #48	@ 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58021000 	.word	0x58021000
 8000ef4:	58020800 	.word	0x58020800
 8000ef8:	58020000 	.word	0x58020000
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58020c00 	.word	0x58020c00

08000f04 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f16:	f000 fef1 	bl	8001cfc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f26:	231f      	movs	r3, #31
 8000f28:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f2a:	2387      	movs	r3, #135	@ 0x87
 8000f2c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f32:	2300      	movs	r3, #0
 8000f34:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f46:	463b      	mov	r3, r7
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 ff0f 	bl	8001d6c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f4e:	2004      	movs	r0, #4
 8000f50:	f000 feec 	bl	8001d2c <HAL_MPU_Enable>

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <Error_Handler+0x8>

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_MspInit+0x30>)
 8000f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f74:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <HAL_MspInit+0x30>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_MspInit+0x30>)
 8000f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	58024400 	.word	0x58024400

08000f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0be      	sub	sp, #248	@ 0xf8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	22c0      	movs	r2, #192	@ 0xc0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f011 f8a1 	bl	8012104 <memset>
  if(hi2c->Instance==I2C1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a73      	ldr	r2, [pc, #460]	@ (8001194 <HAL_I2C_MspInit+0x1f8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d146      	bne.n	800105a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fcc:	f04f 0208 	mov.w	r2, #8
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fd3e 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000fee:	f7ff ffb5 	bl	8000f5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b69      	ldr	r3, [pc, #420]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	4a67      	ldr	r2, [pc, #412]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001002:	4b65      	ldr	r3, [pc, #404]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001010:	23c0      	movs	r3, #192	@ 0xc0
 8001012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001016:	2312      	movs	r3, #18
 8001018:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001028:	2304      	movs	r3, #4
 800102a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001032:	4619      	mov	r1, r3
 8001034:	4859      	ldr	r0, [pc, #356]	@ (800119c <HAL_I2C_MspInit+0x200>)
 8001036:	f000 fed9 	bl	8001dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103a:	4b57      	ldr	r3, [pc, #348]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 800103c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001040:	4a55      	ldr	r2, [pc, #340]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 8001042:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001046:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800104a:	4b53      	ldr	r3, [pc, #332]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 800104c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001058:	e098      	b.n	800118c <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a50      	ldr	r2, [pc, #320]	@ (80011a0 <HAL_I2C_MspInit+0x204>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d147      	bne.n	80010f4 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001064:	f04f 0208 	mov.w	r2, #8
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fcf2 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001086:	f7ff ff69 	bl	8000f5c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	4a41      	ldr	r2, [pc, #260]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	2312      	movs	r3, #18
 80010b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010c2:	2304      	movs	r3, #4
 80010c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4833      	ldr	r0, [pc, #204]	@ (800119c <HAL_I2C_MspInit+0x200>)
 80010d0:	f000 fe8c 	bl	8001dec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010d4:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 80010d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010da:	4a2f      	ldr	r2, [pc, #188]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 80010dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 80010e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
}
 80010f2:	e04b      	b.n	800118c <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C4)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a2a      	ldr	r2, [pc, #168]	@ (80011a4 <HAL_I2C_MspInit+0x208>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d146      	bne.n	800118c <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80010fe:	f04f 0210 	mov.w	r2, #16
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f003 fca5 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8001120:	f7ff ff1c 	bl	8000f5c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001124:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112a:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001142:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114a:	2312      	movs	r3, #18
 800114c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800115c:	2304      	movs	r3, #4
 800115e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001166:	4619      	mov	r1, r3
 8001168:	480f      	ldr	r0, [pc, #60]	@ (80011a8 <HAL_I2C_MspInit+0x20c>)
 800116a:	f000 fe3f 	bl	8001dec <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 8001170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001174:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 8001176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800117a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_I2C_MspInit+0x1fc>)
 8001180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
}
 800118c:	bf00      	nop
 800118e:	37f8      	adds	r7, #248	@ 0xf8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40005400 	.word	0x40005400
 8001198:	58024400 	.word	0x58024400
 800119c:	58020400 	.word	0x58020400
 80011a0:	40005800 	.word	0x40005800
 80011a4:	58001c00 	.word	0x58001c00
 80011a8:	58020c00 	.word	0x58020c00

080011ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0bc      	sub	sp, #240	@ 0xf0
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	22c0      	movs	r2, #192	@ 0xc0
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f010 ff99 	bl	8012104 <memset>
  if(hsd->Instance==SDMMC1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a38      	ldr	r2, [pc, #224]	@ (80012b8 <HAL_SD_MspInit+0x10c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d169      	bne.n	80012b0 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80011dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fc37 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80011fc:	f7ff feae 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001200:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <HAL_SD_MspInit+0x110>)
 8001202:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001206:	4a2d      	ldr	r2, [pc, #180]	@ (80012bc <HAL_SD_MspInit+0x110>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800120c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001210:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <HAL_SD_MspInit+0x110>)
 8001212:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b27      	ldr	r3, [pc, #156]	@ (80012bc <HAL_SD_MspInit+0x110>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001224:	4a25      	ldr	r2, [pc, #148]	@ (80012bc <HAL_SD_MspInit+0x110>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800122e:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <HAL_SD_MspInit+0x110>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <HAL_SD_MspInit+0x110>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001242:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <HAL_SD_MspInit+0x110>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124c:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <HAL_SD_MspInit+0x110>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800125a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800125e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001274:	230c      	movs	r3, #12
 8001276:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800127e:	4619      	mov	r1, r3
 8001280:	480f      	ldr	r0, [pc, #60]	@ (80012c0 <HAL_SD_MspInit+0x114>)
 8001282:	f000 fdb3 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001286:	2304      	movs	r3, #4
 8001288:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800129e:	230c      	movs	r3, #12
 80012a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	@ (80012c4 <HAL_SD_MspInit+0x118>)
 80012ac:	f000 fd9e 	bl	8001dec <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80012b0:	bf00      	nop
 80012b2:	37f0      	adds	r7, #240	@ 0xf0
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	52007000 	.word	0x52007000
 80012bc:	58024400 	.word	0x58024400
 80012c0:	58020800 	.word	0x58020800
 80012c4:	58020c00 	.word	0x58020c00

080012c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0bc      	sub	sp, #240	@ 0xf0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	22c0      	movs	r2, #192	@ 0xc0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f010 ff0b 	bl	8012104 <memset>
  if(hspi->Instance==SPI1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001424 <HAL_SPI_MspInit+0x15c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d146      	bne.n	8001386 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001304:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001308:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	4618      	mov	r0, r3
 8001310:	f003 fba8 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800131a:	f7ff fe1f 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800131e:	4b42      	ldr	r3, [pc, #264]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 8001320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001324:	4a40      	ldr	r2, [pc, #256]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 8001326:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800132a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800132e:	4b3e      	ldr	r3, [pc, #248]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 8001330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001334:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b3a      	ldr	r3, [pc, #232]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001342:	4a39      	ldr	r2, [pc, #228]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134c:	4b36      	ldr	r3, [pc, #216]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800135a:	23e0      	movs	r3, #224	@ 0xe0
 800135c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001372:	2305      	movs	r3, #5
 8001374:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800137c:	4619      	mov	r1, r3
 800137e:	482b      	ldr	r0, [pc, #172]	@ (800142c <HAL_SPI_MspInit+0x164>)
 8001380:	f000 fd34 	bl	8001dec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001384:	e049      	b.n	800141a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI4)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a29      	ldr	r2, [pc, #164]	@ (8001430 <HAL_SPI_MspInit+0x168>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d144      	bne.n	800141a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001390:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800139c:	2300      	movs	r3, #0
 800139e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fb5d 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 80013b0:	f7ff fdd4 	bl	8000f5c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80013b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 80013b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 80013bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 80013c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d8:	4a13      	ldr	r2, [pc, #76]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 80013da:	f043 0310 	orr.w	r3, r3, #16
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <HAL_SPI_MspInit+0x160>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80013f0:	2364      	movs	r3, #100	@ 0x64
 80013f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001408:	2305      	movs	r3, #5
 800140a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001412:	4619      	mov	r1, r3
 8001414:	4807      	ldr	r0, [pc, #28]	@ (8001434 <HAL_SPI_MspInit+0x16c>)
 8001416:	f000 fce9 	bl	8001dec <HAL_GPIO_Init>
}
 800141a:	bf00      	nop
 800141c:	37f0      	adds	r7, #240	@ 0xf0
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40013000 	.word	0x40013000
 8001428:	58024400 	.word	0x58024400
 800142c:	58020000 	.word	0x58020000
 8001430:	40013400 	.word	0x40013400
 8001434:	58021000 	.word	0x58021000

08001438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0ba      	sub	sp, #232	@ 0xe8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	22c0      	movs	r2, #192	@ 0xc0
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f010 fe53 	bl	8012104 <memset>
  if(huart->Instance==USART2)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a26      	ldr	r2, [pc, #152]	@ (80014fc <HAL_UART_MspInit+0xc4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d145      	bne.n	80014f4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001468:	f04f 0202 	mov.w	r2, #2
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4618      	mov	r0, r3
 8001480:	f003 faf0 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800148a:	f7ff fd67 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <HAL_UART_MspInit+0xc8>)
 8001490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001494:	4a1a      	ldr	r2, [pc, #104]	@ (8001500 <HAL_UART_MspInit+0xc8>)
 8001496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800149a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <HAL_UART_MspInit+0xc8>)
 80014a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <HAL_UART_MspInit+0xc8>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b2:	4a13      	ldr	r2, [pc, #76]	@ (8001500 <HAL_UART_MspInit+0xc8>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <HAL_UART_MspInit+0xc8>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014ca:	2360      	movs	r3, #96	@ 0x60
 80014cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e2:	2307      	movs	r3, #7
 80014e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <HAL_UART_MspInit+0xcc>)
 80014f0:	f000 fc7c 	bl	8001dec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014f4:	bf00      	nop
 80014f6:	37e8      	adds	r7, #232	@ 0xe8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40004400 	.word	0x40004400
 8001500:	58024400 	.word	0x58024400
 8001504:	58020c00 	.word	0x58020c00

08001508 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0bc      	sub	sp, #240	@ 0xf0
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	22c0      	movs	r2, #192	@ 0xc0
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f010 fdeb 	bl	8012104 <memset>
  if(husart->Instance==USART3)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a39      	ldr	r2, [pc, #228]	@ (8001618 <HAL_USART_MspInit+0x110>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d16b      	bne.n	8001610 <HAL_USART_MspInit+0x108>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001538:	f04f 0202 	mov.w	r2, #2
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fa88 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 800155a:	f7ff fcff 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800155e:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <HAL_USART_MspInit+0x114>)
 8001560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001564:	4a2d      	ldr	r2, [pc, #180]	@ (800161c <HAL_USART_MspInit+0x114>)
 8001566:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800156a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800156e:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <HAL_USART_MspInit+0x114>)
 8001570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	4b27      	ldr	r3, [pc, #156]	@ (800161c <HAL_USART_MspInit+0x114>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001582:	4a26      	ldr	r2, [pc, #152]	@ (800161c <HAL_USART_MspInit+0x114>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800158c:	4b23      	ldr	r3, [pc, #140]	@ (800161c <HAL_USART_MspInit+0x114>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_USART_MspInit+0x114>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a0:	4a1e      	ldr	r2, [pc, #120]	@ (800161c <HAL_USART_MspInit+0x114>)
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <HAL_USART_MspInit+0x114>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d2:	2307      	movs	r3, #7
 80015d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015dc:	4619      	mov	r1, r3
 80015de:	4810      	ldr	r0, [pc, #64]	@ (8001620 <HAL_USART_MspInit+0x118>)
 80015e0:	f000 fc04 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80015e4:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 80015e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015fe:	2307      	movs	r3, #7
 8001600:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001604:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	@ (8001624 <HAL_USART_MspInit+0x11c>)
 800160c:	f000 fbee 	bl	8001dec <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001610:	bf00      	nop
 8001612:	37f0      	adds	r7, #240	@ 0xf0
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40004800 	.word	0x40004800
 800161c:	58024400 	.word	0x58024400
 8001620:	58020400 	.word	0x58020400
 8001624:	58020c00 	.word	0x58020c00

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800162c:	f003 f9fe 	bl	8004a2c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x8>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 f9db 	bl	8001a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <OTG_FS_IRQHandler+0x10>)
 8001692:	f001 f801 	bl	8002698 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	24000b60 	.word	0x24000b60

080016a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_kill>:

int _kill(int pid, int sig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ba:	f010 fd75 	bl	80121a8 <__errno>
 80016be:	4603      	mov	r3, r0
 80016c0:	2216      	movs	r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
  return -1;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_exit>:

void _exit (int status)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ffe7 	bl	80016b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e2:	bf00      	nop
 80016e4:	e7fd      	b.n	80016e2 <_exit+0x12>

080016e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e00a      	b.n	800170e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f8:	f3af 8000 	nop.w
 80016fc:	4601      	mov	r1, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	b2ca      	uxtb	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	dbf0      	blt.n	80016f8 <_read+0x12>
  }

  return len;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001748:	605a      	str	r2, [r3, #4]
  return 0;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_isatty>:

int _isatty(int file)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f010 fcf6 	bl	80121a8 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	24080000 	.word	0x24080000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	24000664 	.word	0x24000664
 80017f0:	24001408 	.word	0x24001408

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017f8:	4b37      	ldr	r3, [pc, #220]	@ (80018d8 <SystemInit+0xe4>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fe:	4a36      	ldr	r2, [pc, #216]	@ (80018d8 <SystemInit+0xe4>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001808:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <SystemInit+0xe8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	2b06      	cmp	r3, #6
 8001812:	d807      	bhi.n	8001824 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001814:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <SystemInit+0xe8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 030f 	bic.w	r3, r3, #15
 800181c:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <SystemInit+0xe8>)
 800181e:	f043 0307 	orr.w	r3, r3, #7
 8001822:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001824:	4b2e      	ldr	r3, [pc, #184]	@ (80018e0 <SystemInit+0xec>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a2d      	ldr	r2, [pc, #180]	@ (80018e0 <SystemInit+0xec>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001830:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <SystemInit+0xec>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <SystemInit+0xec>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4929      	ldr	r1, [pc, #164]	@ (80018e0 <SystemInit+0xec>)
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <SystemInit+0xf0>)
 800183e:	4013      	ands	r3, r2
 8001840:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001842:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <SystemInit+0xe8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800184e:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <SystemInit+0xe8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 030f 	bic.w	r3, r3, #15
 8001856:	4a21      	ldr	r2, [pc, #132]	@ (80018dc <SystemInit+0xe8>)
 8001858:	f043 0307 	orr.w	r3, r3, #7
 800185c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <SystemInit+0xec>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001864:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <SystemInit+0xec>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800186a:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <SystemInit+0xec>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <SystemInit+0xec>)
 8001872:	4a1d      	ldr	r2, [pc, #116]	@ (80018e8 <SystemInit+0xf4>)
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001876:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <SystemInit+0xec>)
 8001878:	4a1c      	ldr	r2, [pc, #112]	@ (80018ec <SystemInit+0xf8>)
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <SystemInit+0xec>)
 800187e:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <SystemInit+0xfc>)
 8001880:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001882:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <SystemInit+0xec>)
 8001884:	2200      	movs	r2, #0
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001888:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <SystemInit+0xec>)
 800188a:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <SystemInit+0xfc>)
 800188c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <SystemInit+0xec>)
 8001890:	2200      	movs	r2, #0
 8001892:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <SystemInit+0xec>)
 8001896:	4a16      	ldr	r2, [pc, #88]	@ (80018f0 <SystemInit+0xfc>)
 8001898:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <SystemInit+0xec>)
 800189c:	2200      	movs	r2, #0
 800189e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <SystemInit+0xec>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0e      	ldr	r2, [pc, #56]	@ (80018e0 <SystemInit+0xec>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <SystemInit+0xec>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <SystemInit+0x100>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <SystemInit+0x104>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018be:	d202      	bcs.n	80018c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <SystemInit+0x108>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <SystemInit+0x10c>)
 80018c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00
 80018dc:	52002000 	.word	0x52002000
 80018e0:	58024400 	.word	0x58024400
 80018e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80018e8:	02020200 	.word	0x02020200
 80018ec:	01ff0000 	.word	0x01ff0000
 80018f0:	01010280 	.word	0x01010280
 80018f4:	5c001000 	.word	0x5c001000
 80018f8:	ffff0000 	.word	0xffff0000
 80018fc:	51008108 	.word	0x51008108
 8001900:	52004000 	.word	0x52004000

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800193c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001908:	f7ff ff74 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190e:	490d      	ldr	r1, [pc, #52]	@ (8001944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001910:	4a0d      	ldr	r2, [pc, #52]	@ (8001948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001924:	4c0a      	ldr	r4, [pc, #40]	@ (8001950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001932:	f010 fc3f 	bl	80121b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7fe fee8 	bl	800070a <main>
  bx  lr
 800193a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800193c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001940:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001944:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8001948:	080141a8 	.word	0x080141a8
  ldr r2, =_sbss
 800194c:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8001950:	24001408 	.word	0x24001408

08001954 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC3_IRQHandler>
	...

08001958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195e:	2003      	movs	r0, #3
 8001960:	f000 f98c 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001964:	f002 fe8c 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 8001968:	4602      	mov	r2, r0
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_Init+0x68>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	4913      	ldr	r1, [pc, #76]	@ (80019c4 <HAL_Init+0x6c>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_Init+0x68>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	4a0e      	ldr	r2, [pc, #56]	@ (80019c4 <HAL_Init+0x6c>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	4a0b      	ldr	r2, [pc, #44]	@ (80019c8 <HAL_Init+0x70>)
 800199a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800199c:	4a0b      	ldr	r2, [pc, #44]	@ (80019cc <HAL_Init+0x74>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a2:	200f      	movs	r0, #15
 80019a4:	f000 f814 	bl	80019d0 <HAL_InitTick>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e002      	b.n	80019b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019b2:	f7ff fad9 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	58024400 	.word	0x58024400
 80019c4:	08013da4 	.word	0x08013da4
 80019c8:	24000004 	.word	0x24000004
 80019cc:	24000000 	.word	0x24000000

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019d8:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_InitTick+0x60>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e021      	b.n	8001a28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <HAL_InitTick+0x64>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_InitTick+0x60>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f971 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00e      	b.n	8001a28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b0f      	cmp	r3, #15
 8001a0e:	d80a      	bhi.n	8001a26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a10:	2200      	movs	r2, #0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f000 f93b 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a1c:	4a06      	ldr	r2, [pc, #24]	@ (8001a38 <HAL_InitTick+0x68>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2400000c 	.word	0x2400000c
 8001a34:	24000000 	.word	0x24000000
 8001a38:	24000008 	.word	0x24000008

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	2400000c 	.word	0x2400000c
 8001a60:	24000668 	.word	0x24000668

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	24000668 	.word	0x24000668

08001a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff ffee 	bl	8001a64 <HAL_GetTick>
 8001a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d005      	beq.n	8001aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_Delay+0x44>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa2:	bf00      	nop
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d8f7      	bhi.n	8001aa4 <HAL_Delay+0x28>
  {
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2400000c 	.word	0x2400000c

08001ac4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ac8:	4b03      	ldr	r3, [pc, #12]	@ (8001ad8 <HAL_GetREVID+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0c1b      	lsrs	r3, r3, #16
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	5c001000 	.word	0x5c001000

08001adc <__NVIC_SetPriorityGrouping>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x40>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x40>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00
 8001b20:	05fa0000 	.word	0x05fa0000

08001b24 <__NVIC_GetPriorityGrouping>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_EnableIRQ>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0b      	blt.n	8001b6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4907      	ldr	r1, [pc, #28]	@ (8001b78 <__NVIC_EnableIRQ+0x38>)
 8001b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	fa00 f202 	lsl.w	r2, r0, r2
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	@ (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	@ (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	@ 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	@ 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff29 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca0:	f7ff ff40 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff90 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5f 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff33 	bl	8001b40 <__NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffa4 	bl	8001c38 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d00:	f3bf 8f5f 	dmb	sy
}
 8001d04:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d06:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <HAL_MPU_Disable+0x28>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	4a06      	ldr	r2, [pc, #24]	@ (8001d24 <HAL_MPU_Disable+0x28>)
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d10:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d12:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_MPU_Disable+0x2c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00
 8001d28:	e000ed90 	.word	0xe000ed90

08001d2c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d34:	4a0b      	ldr	r2, [pc, #44]	@ (8001d64 <HAL_MPU_Enable+0x38>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_MPU_Enable+0x3c>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	4a09      	ldr	r2, [pc, #36]	@ (8001d68 <HAL_MPU_Enable+0x3c>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d48:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d4a:	f3bf 8f4f 	dsb	sy
}
 8001d4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d50:	f3bf 8f6f 	isb	sy
}
 8001d54:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed90 	.word	0xe000ed90
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	785a      	ldrb	r2, [r3, #1]
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d7a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d88:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7b1b      	ldrb	r3, [r3, #12]
 8001d94:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7adb      	ldrb	r3, [r3, #11]
 8001d9a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7a9b      	ldrb	r3, [r3, #10]
 8001da2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001da4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7b5b      	ldrb	r3, [r3, #13]
 8001daa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7b9b      	ldrb	r3, [r3, #14]
 8001db2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001db4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7bdb      	ldrb	r3, [r3, #15]
 8001dba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7a5b      	ldrb	r3, [r3, #9]
 8001dc2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7a1b      	ldrb	r3, [r3, #8]
 8001dca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dcc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dd4:	4a04      	ldr	r2, [pc, #16]	@ (8001de8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dd6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dd8:	6113      	str	r3, [r2, #16]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed90 	.word	0xe000ed90

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dfa:	4b89      	ldr	r3, [pc, #548]	@ (8002020 <HAL_GPIO_Init+0x234>)
 8001dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dfe:	e194      	b.n	800212a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2101      	movs	r1, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8186 	beq.w	8002124 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d005      	beq.n	8001e30 <HAL_GPIO_Init+0x44>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d130      	bne.n	8001e92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e66:	2201      	movs	r2, #1
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	f003 0201 	and.w	r2, r3, #1
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d017      	beq.n	8001ece <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d123      	bne.n	8001f22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	69b9      	ldr	r1, [r7, #24]
 8001f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0203 	and.w	r2, r3, #3
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80e0 	beq.w	8002124 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f64:	4b2f      	ldr	r3, [pc, #188]	@ (8002024 <HAL_GPIO_Init+0x238>)
 8001f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8002024 <HAL_GPIO_Init+0x238>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f74:	4b2b      	ldr	r3, [pc, #172]	@ (8002024 <HAL_GPIO_Init+0x238>)
 8001f76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f82:	4a29      	ldr	r2, [pc, #164]	@ (8002028 <HAL_GPIO_Init+0x23c>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a20      	ldr	r2, [pc, #128]	@ (800202c <HAL_GPIO_Init+0x240>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d052      	beq.n	8002054 <HAL_GPIO_Init+0x268>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8002030 <HAL_GPIO_Init+0x244>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d031      	beq.n	800201a <HAL_GPIO_Init+0x22e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002034 <HAL_GPIO_Init+0x248>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d02b      	beq.n	8002016 <HAL_GPIO_Init+0x22a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002038 <HAL_GPIO_Init+0x24c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d025      	beq.n	8002012 <HAL_GPIO_Init+0x226>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800203c <HAL_GPIO_Init+0x250>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01f      	beq.n	800200e <HAL_GPIO_Init+0x222>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002040 <HAL_GPIO_Init+0x254>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d019      	beq.n	800200a <HAL_GPIO_Init+0x21e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8002044 <HAL_GPIO_Init+0x258>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x21a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	@ (8002048 <HAL_GPIO_Init+0x25c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x216>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a18      	ldr	r2, [pc, #96]	@ (800204c <HAL_GPIO_Init+0x260>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x212>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a17      	ldr	r2, [pc, #92]	@ (8002050 <HAL_GPIO_Init+0x264>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x20e>
 8001ff6:	2309      	movs	r3, #9
 8001ff8:	e02d      	b.n	8002056 <HAL_GPIO_Init+0x26a>
 8001ffa:	230a      	movs	r3, #10
 8001ffc:	e02b      	b.n	8002056 <HAL_GPIO_Init+0x26a>
 8001ffe:	2308      	movs	r3, #8
 8002000:	e029      	b.n	8002056 <HAL_GPIO_Init+0x26a>
 8002002:	2307      	movs	r3, #7
 8002004:	e027      	b.n	8002056 <HAL_GPIO_Init+0x26a>
 8002006:	2306      	movs	r3, #6
 8002008:	e025      	b.n	8002056 <HAL_GPIO_Init+0x26a>
 800200a:	2305      	movs	r3, #5
 800200c:	e023      	b.n	8002056 <HAL_GPIO_Init+0x26a>
 800200e:	2304      	movs	r3, #4
 8002010:	e021      	b.n	8002056 <HAL_GPIO_Init+0x26a>
 8002012:	2303      	movs	r3, #3
 8002014:	e01f      	b.n	8002056 <HAL_GPIO_Init+0x26a>
 8002016:	2302      	movs	r3, #2
 8002018:	e01d      	b.n	8002056 <HAL_GPIO_Init+0x26a>
 800201a:	2301      	movs	r3, #1
 800201c:	e01b      	b.n	8002056 <HAL_GPIO_Init+0x26a>
 800201e:	bf00      	nop
 8002020:	58000080 	.word	0x58000080
 8002024:	58024400 	.word	0x58024400
 8002028:	58000400 	.word	0x58000400
 800202c:	58020000 	.word	0x58020000
 8002030:	58020400 	.word	0x58020400
 8002034:	58020800 	.word	0x58020800
 8002038:	58020c00 	.word	0x58020c00
 800203c:	58021000 	.word	0x58021000
 8002040:	58021400 	.word	0x58021400
 8002044:	58021800 	.word	0x58021800
 8002048:	58021c00 	.word	0x58021c00
 800204c:	58022000 	.word	0x58022000
 8002050:	58022400 	.word	0x58022400
 8002054:	2300      	movs	r3, #0
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	f002 0203 	and.w	r2, r2, #3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4093      	lsls	r3, r2
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002066:	4938      	ldr	r1, [pc, #224]	@ (8002148 <HAL_GPIO_Init+0x35c>)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800209a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	3301      	adds	r3, #1
 8002128:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	f47f ae63 	bne.w	8001e00 <HAL_GPIO_Init+0x14>
  }
}
 800213a:	bf00      	nop
 800213c:	bf00      	nop
 800213e:	3724      	adds	r7, #36	@ 0x24
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	58000400 	.word	0x58000400

0800214c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e001      	b.n	800216e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002198:	e003      	b.n	80021a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	041a      	lsls	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	619a      	str	r2, [r3, #24]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e08b      	b.n	80022da <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe fee0 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	@ 0x24
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002200:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002210:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	e006      	b.n	8002238 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002236:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d108      	bne.n	8002252 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	e007      	b.n	8002262 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002260:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <HAL_I2C_Init+0x134>)
 800226e:	430b      	orrs	r3, r1
 8002270:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002280:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69d9      	ldr	r1, [r3, #28]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2220      	movs	r2, #32
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	02008000 	.word	0x02008000

080022e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d138      	bne.n	8002370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002308:	2302      	movs	r3, #2
 800230a:	e032      	b.n	8002372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	@ 0x24
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800233a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	d139      	bne.n	8002408 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800239e:	2302      	movs	r3, #2
 80023a0:	e033      	b.n	800240a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2224      	movs	r2, #36	@ 0x24
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0201 	bic.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af02      	add	r7, sp, #8
 800241c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0fe      	b.n	8002626 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d106      	bne.n	8002442 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f00e fd39 	bl	8010eb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2203      	movs	r2, #3
 8002446:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f009 fc37 	bl	800bcc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7c1a      	ldrb	r2, [r3, #16]
 800245c:	f88d 2000 	strb.w	r2, [sp]
 8002460:	3304      	adds	r3, #4
 8002462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002464:	f009 fb08 	bl	800ba78 <USB_CoreInit>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0d5      	b.n	8002626 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f009 fc2f 	bl	800bce4 <USB_SetCurrentMode>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0c6      	b.n	8002626 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e04a      	b.n	8002534 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3315      	adds	r3, #21
 80024ae:	2201      	movs	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	3314      	adds	r3, #20
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	b298      	uxth	r0, r3
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	332e      	adds	r3, #46	@ 0x2e
 80024da:	4602      	mov	r2, r0
 80024dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	3318      	adds	r3, #24
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	331c      	adds	r3, #28
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	3320      	adds	r3, #32
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	3324      	adds	r3, #36	@ 0x24
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	3301      	adds	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	791b      	ldrb	r3, [r3, #4]
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	429a      	cmp	r2, r3
 800253c:	d3af      	bcc.n	800249e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e044      	b.n	80025ce <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	3301      	adds	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	791b      	ldrb	r3, [r3, #4]
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d3b5      	bcc.n	8002544 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7c1a      	ldrb	r2, [r3, #16]
 80025e0:	f88d 2000 	strb.w	r2, [sp]
 80025e4:	3304      	adds	r3, #4
 80025e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e8:	f009 fbc8 	bl	800bd7c <USB_DevInit>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e013      	b.n	8002626 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7b1b      	ldrb	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d102      	bne.n	800261a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f001 f999 	bl	800394c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f00a fc07 	bl	800ce32 <USB_DevDisconnect>

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_PCD_Start+0x1c>
 8002646:	2302      	movs	r3, #2
 8002648:	e022      	b.n	8002690 <HAL_PCD_Start+0x62>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002662:	2b01      	cmp	r3, #1
 8002664:	d105      	bne.n	8002672 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f009 fb12 	bl	800bca0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f00a fbb5 	bl	800cdf0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b08d      	sub	sp, #52	@ 0x34
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f00a fc73 	bl	800cf9a <USB_GetMode>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 84b9 	bne.w	800302e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f00a fbd7 	bl	800ce74 <USB_ReadInterrupts>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 84af 	beq.w	800302c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f00a fbc4 	bl	800ce74 <USB_ReadInterrupts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d107      	bne.n	8002706 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f002 0202 	and.w	r2, r2, #2
 8002704:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f00a fbb2 	bl	800ce74 <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b10      	cmp	r3, #16
 8002718:	d161      	bne.n	80027de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0210 	bic.w	r2, r2, #16
 8002728:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	3304      	adds	r3, #4
 8002748:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	0c5b      	lsrs	r3, r3, #17
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	2b02      	cmp	r3, #2
 8002754:	d124      	bne.n	80027a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d035      	beq.n	80027ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800276c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	6a38      	ldr	r0, [r7, #32]
 8002776:	f00a f9e9 	bl	800cb4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002786:	441a      	add	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002798:	441a      	add	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	615a      	str	r2, [r3, #20]
 800279e:	e016      	b.n	80027ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	0c5b      	lsrs	r3, r3, #17
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	2b06      	cmp	r3, #6
 80027aa:	d110      	bne.n	80027ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027b2:	2208      	movs	r2, #8
 80027b4:	4619      	mov	r1, r3
 80027b6:	6a38      	ldr	r0, [r7, #32]
 80027b8:	f00a f9c8 	bl	800cb4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027c8:	441a      	add	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699a      	ldr	r2, [r3, #24]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0210 	orr.w	r2, r2, #16
 80027dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f00a fb46 	bl	800ce74 <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027f2:	f040 80a7 	bne.w	8002944 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f00a fb4b 	bl	800ce9a <USB_ReadDevAllOutEpInterrupt>
 8002804:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002806:	e099      	b.n	800293c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 808e 	beq.w	8002930 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f00a fb6f 	bl	800cf02 <USB_ReadDevOutEPInterrupt>
 8002824:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00c      	beq.n	800284a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800283c:	461a      	mov	r2, r3
 800283e:	2301      	movs	r3, #1
 8002840:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002842:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fefb 	bl	8003640 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00c      	beq.n	800286e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002860:	461a      	mov	r2, r3
 8002862:	2308      	movs	r3, #8
 8002864:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002866:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 ffd1 	bl	8003810 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002884:	461a      	mov	r2, r3
 8002886:	2310      	movs	r3, #16
 8002888:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d030      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289c:	2b80      	cmp	r3, #128	@ 0x80
 800289e:	d109      	bne.n	80028b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	3304      	adds	r3, #4
 80028c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	78db      	ldrb	r3, [r3, #3]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d108      	bne.n	80028e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2200      	movs	r2, #0
 80028d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f00e fc0e 	bl	8011100 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f0:	461a      	mov	r2, r3
 80028f2:	2302      	movs	r3, #2
 80028f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800290c:	461a      	mov	r2, r3
 800290e:	2320      	movs	r3, #32
 8002910:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002928:	461a      	mov	r2, r3
 800292a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800292e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	3301      	adds	r3, #1
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	f47f af62 	bne.w	8002808 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f00a fa93 	bl	800ce74 <USB_ReadInterrupts>
 800294e:	4603      	mov	r3, r0
 8002950:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002954:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002958:	f040 80db 	bne.w	8002b12 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f00a fab4 	bl	800cece <USB_ReadDevAllInEpInterrupt>
 8002966:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800296c:	e0cd      	b.n	8002b0a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80c2 	beq.w	8002afe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f00a fada 	bl	800cf3e <USB_ReadDevInEPInterrupt>
 800298a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d057      	beq.n	8002a46 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	2201      	movs	r2, #1
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69f9      	ldr	r1, [r7, #28]
 80029b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80029b6:	4013      	ands	r3, r2
 80029b8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029c6:	461a      	mov	r2, r3
 80029c8:	2301      	movs	r3, #1
 80029ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	799b      	ldrb	r3, [r3, #6]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d132      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3320      	adds	r3, #32
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4403      	add	r3, r0
 80029f4:	331c      	adds	r3, #28
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4419      	add	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4403      	add	r3, r0
 8002a08:	3320      	adds	r3, #32
 8002a0a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d113      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x3a2>
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3324      	adds	r3, #36	@ 0x24
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d108      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a32:	461a      	mov	r2, r3
 8002a34:	2101      	movs	r1, #1
 8002a36:	f00a fae3 	bl	800d000 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f00e fad8 	bl	8010ff6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2308      	movs	r3, #8
 8002a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a94:	461a      	mov	r2, r3
 8002a96:	2340      	movs	r3, #64	@ 0x40
 8002a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d023      	beq.n	8002aec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002aa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aa6:	6a38      	ldr	r0, [r7, #32]
 8002aa8:	f009 fac6 	bl	800c038 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	78db      	ldrb	r3, [r3, #3]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d108      	bne.n	8002ada <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2200      	movs	r2, #0
 8002acc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f00e fb25 	bl	8011124 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2302      	movs	r3, #2
 8002aea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002af6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fd15 	bl	8003528 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	3301      	adds	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f af2e 	bne.w	800296e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f00a f9ac 	bl	800ce74 <USB_ReadInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b26:	d122      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d108      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b4e:	2100      	movs	r1, #0
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 ff1f 	bl	8003994 <HAL_PCDEx_LPM_Callback>
 8002b56:	e002      	b.n	8002b5e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f00e fac3 	bl	80110e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f00a f97e 	bl	800ce74 <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b82:	d112      	bne.n	8002baa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d102      	bne.n	8002b9a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f00e fa7f 	bl	8011098 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f00a f960 	bl	800ce74 <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bbe:	d121      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002bce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d111      	bne.n	8002bfe <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	f003 020f 	and.w	r2, r3, #15
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fecc 	bl	8003994 <HAL_PCDEx_LPM_Callback>
 8002bfc:	e002      	b.n	8002c04 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f00e fa4a 	bl	8011098 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f00a f933 	bl	800ce74 <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c18:	f040 80b7 	bne.w	8002d8a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2110      	movs	r1, #16
 8002c36:	4618      	mov	r0, r3
 8002c38:	f009 f9fe 	bl	800c038 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c40:	e046      	b.n	8002cd0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c54:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c66:	0151      	lsls	r1, r2, #5
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	440a      	add	r2, r1
 8002c6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c82:	461a      	mov	r2, r3
 8002c84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c88:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c9a:	0151      	lsls	r1, r2, #5
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	440a      	add	r2, r1
 8002ca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ca4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ca8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cba:	0151      	lsls	r1, r2, #5
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	440a      	add	r2, r1
 8002cc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cc8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ccc:	3301      	adds	r3, #1
 8002cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	791b      	ldrb	r3, [r3, #4]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d3b2      	bcc.n	8002c42 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cea:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7bdb      	ldrb	r3, [r3, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d016      	beq.n	8002d26 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d08:	f043 030b 	orr.w	r3, r3, #11
 8002d0c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d1e:	f043 030b 	orr.w	r3, r3, #11
 8002d22:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d24:	e015      	b.n	8002d52 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d34:	4619      	mov	r1, r3
 8002d36:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d4c:	f043 030b 	orr.w	r3, r3, #11
 8002d50:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d60:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d64:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d74:	461a      	mov	r2, r3
 8002d76:	f00a f943 	bl	800d000 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f00a f870 	bl	800ce74 <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d9e:	d123      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f00a f907 	bl	800cfb8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f009 f9bb 	bl	800c12a <USB_GetDevSpeed>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681c      	ldr	r4, [r3, #0]
 8002dc0:	f001 fdd8 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f008 fec5 	bl	800bb5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f00e f937 	bl	8011046 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f00a f841 	bl	800ce74 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d10a      	bne.n	8002e12 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f00e f914 	bl	801102a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f002 0208 	and.w	r2, r2, #8
 8002e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f00a f82c 	bl	800ce74 <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e22:	2b80      	cmp	r3, #128	@ 0x80
 8002e24:	d123      	bne.n	8002e6e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e32:	2301      	movs	r3, #1
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e36:	e014      	b.n	8002e62 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	4619      	mov	r1, r3
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fb08 	bl	800346c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	3301      	adds	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	791b      	ldrb	r3, [r3, #4]
 8002e66:	461a      	mov	r2, r3
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d3e4      	bcc.n	8002e38 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f009 fffe 	bl	800ce74 <USB_ReadInterrupts>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e82:	d13c      	bne.n	8002efe <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e84:	2301      	movs	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e88:	e02b      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d115      	bne.n	8002edc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002eb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	da12      	bge.n	8002edc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3317      	adds	r3, #23
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fac8 	bl	800346c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	3301      	adds	r3, #1
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	791b      	ldrb	r3, [r3, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d3cd      	bcc.n	8002e8a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f009 ffb6 	bl	800ce74 <USB_ReadInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f12:	d156      	bne.n	8002fc2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f14:	2301      	movs	r3, #1
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f18:	e045      	b.n	8002fa6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d12e      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da2b      	bge.n	8002fa0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d121      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f9c:	6053      	str	r3, [r2, #4]
            break;
 8002f9e:	e008      	b.n	8002fb2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	791b      	ldrb	r3, [r3, #4]
 8002faa:	461a      	mov	r2, r3
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d3b3      	bcc.n	8002f1a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f009 ff54 	bl	800ce74 <USB_ReadInterrupts>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd6:	d10a      	bne.n	8002fee <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f00e f8b5 	bl	8011148 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f009 ff3e 	bl	800ce74 <USB_ReadInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d115      	bne.n	800302e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f00e f8a5 	bl	8011164 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	e000      	b.n	800302e <HAL_PCD_IRQHandler+0x996>
      return;
 800302c:	bf00      	nop
    }
  }
}
 800302e:	3734      	adds	r7, #52	@ 0x34
 8003030:	46bd      	mov	sp, r7
 8003032:	bd90      	pop	{r4, r7, pc}

08003034 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_PCD_SetAddress+0x1a>
 800304a:	2302      	movs	r3, #2
 800304c:	e012      	b.n	8003074 <HAL_PCD_SetAddress+0x40>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f009 fe9d 	bl	800cda4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	70fb      	strb	r3, [r7, #3]
 800308e:	460b      	mov	r3, r1
 8003090:	803b      	strh	r3, [r7, #0]
 8003092:	4613      	mov	r3, r2
 8003094:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800309a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	da0f      	bge.n	80030c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	f003 020f 	and.w	r2, r3, #15
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3310      	adds	r3, #16
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	705a      	strb	r2, [r3, #1]
 80030c0:	e00f      	b.n	80030e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 020f 	and.w	r2, r3, #15
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030ee:	883a      	ldrh	r2, [r7, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	78ba      	ldrb	r2, [r7, #2]
 80030f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800310c:	78bb      	ldrb	r3, [r7, #2]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d102      	bne.n	8003118 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_PCD_EP_Open+0xaa>
 8003122:	2302      	movs	r3, #2
 8003124:	e00e      	b.n	8003144 <HAL_PCD_EP_Open+0xc8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68f9      	ldr	r1, [r7, #12]
 8003134:	4618      	mov	r0, r3
 8003136:	f009 f81d 	bl	800c174 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003142:	7afb      	ldrb	r3, [r7, #11]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	da0f      	bge.n	8003180 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	3310      	adds	r3, #16
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	705a      	strb	r2, [r3, #1]
 800317e:	e00f      	b.n	80031a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_PCD_EP_Close+0x6e>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e00e      	b.n	80031d8 <HAL_PCD_EP_Close+0x8c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68f9      	ldr	r1, [r7, #12]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f009 f85b 	bl	800c284 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	460b      	mov	r3, r1
 80031ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	f003 020f 	and.w	r2, r3, #15
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	3304      	adds	r3, #4
 8003208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2200      	movs	r2, #0
 8003220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003222:	7afb      	ldrb	r3, [r7, #11]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	b2da      	uxtb	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	799b      	ldrb	r3, [r3, #6]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d102      	bne.n	800323c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	799b      	ldrb	r3, [r3, #6]
 8003244:	461a      	mov	r2, r3
 8003246:	6979      	ldr	r1, [r7, #20]
 8003248:	f009 f8f8 	bl	800c43c <USB_EPStartXfer>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 020f 	and.w	r2, r3, #15
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003278:	681b      	ldr	r3, [r3, #0]
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	460b      	mov	r3, r1
 8003294:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003296:	7afb      	ldrb	r3, [r7, #11]
 8003298:	f003 020f 	and.w	r2, r3, #15
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	3310      	adds	r3, #16
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	3304      	adds	r3, #4
 80032ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2201      	movs	r2, #1
 80032c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c6:	7afb      	ldrb	r3, [r7, #11]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	799b      	ldrb	r3, [r3, #6]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	799b      	ldrb	r3, [r3, #6]
 80032e8:	461a      	mov	r2, r3
 80032ea:	6979      	ldr	r1, [r7, #20]
 80032ec:	f009 f8a6 	bl	800c43c <USB_EPStartXfer>

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	7912      	ldrb	r2, [r2, #4]
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e04f      	b.n	80033b8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331c:	2b00      	cmp	r3, #0
 800331e:	da0f      	bge.n	8003340 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	3310      	adds	r3, #16
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	705a      	strb	r2, [r3, #1]
 800333e:	e00d      	b.n	800335c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_PCD_EP_SetStall+0x82>
 8003378:	2302      	movs	r3, #2
 800337a:	e01d      	b.n	80033b8 <HAL_PCD_EP_SetStall+0xbe>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68f9      	ldr	r1, [r7, #12]
 800338a:	4618      	mov	r0, r3
 800338c:	f009 fc36 	bl	800cbfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7999      	ldrb	r1, [r3, #6]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033a8:	461a      	mov	r2, r3
 80033aa:	f009 fe29 	bl	800d000 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	7912      	ldrb	r2, [r2, #4]
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e042      	b.n	8003464 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da0f      	bge.n	8003406 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	3310      	adds	r3, #16
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	3304      	adds	r3, #4
 80033fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	705a      	strb	r2, [r3, #1]
 8003404:	e00f      	b.n	8003426 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 020f 	and.w	r2, r3, #15
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4413      	add	r3, r2
 800341c:	3304      	adds	r3, #4
 800341e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_PCD_EP_ClrStall+0x86>
 8003442:	2302      	movs	r3, #2
 8003444:	e00e      	b.n	8003464 <HAL_PCD_EP_ClrStall+0xa4>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	4618      	mov	r0, r3
 8003456:	f009 fc3f 	bl	800ccd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800347c:	2b00      	cmp	r3, #0
 800347e:	da0c      	bge.n	800349a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 020f 	and.w	r2, r3, #15
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	3310      	adds	r3, #16
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	4413      	add	r3, r2
 8003494:	3304      	adds	r3, #4
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e00c      	b.n	80034b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f009 fa5e 	bl	800c97c <USB_EPStopXfer>
 80034c0:	4603      	mov	r3, r0
 80034c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034c4:	7afb      	ldrb	r3, [r7, #11]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_PCD_EP_Flush+0x1a>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e01b      	b.n	8003520 <HAL_PCD_EP_Flush+0x52>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80034f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da09      	bge.n	800350c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f008 fd97 	bl	800c038 <USB_FlushTxFifo>
 800350a:	e004      	b.n	8003516 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f008 fdc3 	bl	800c09c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	@ 0x28
 800352c:	af02      	add	r7, sp, #8
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	3310      	adds	r3, #16
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	429a      	cmp	r2, r3
 800355a:	d901      	bls.n	8003560 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e06b      	b.n	8003638 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	429a      	cmp	r2, r3
 8003574:	d902      	bls.n	800357c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3303      	adds	r3, #3
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003584:	e02a      	b.n	80035dc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	429a      	cmp	r2, r3
 800359a:	d902      	bls.n	80035a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3303      	adds	r3, #3
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68d9      	ldr	r1, [r3, #12]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4603      	mov	r3, r0
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f009 fa86 	bl	800cad0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	441a      	add	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	441a      	add	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d809      	bhi.n	8003606 <PCD_WriteEmptyTxFifo+0xde>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d203      	bcs.n	8003606 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1bf      	bne.n	8003586 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	429a      	cmp	r2, r3
 8003610:	d811      	bhi.n	8003636 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	2201      	movs	r2, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	43db      	mvns	r3, r3
 800362c:	6939      	ldr	r1, [r7, #16]
 800362e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003632:	4013      	ands	r3, r2
 8003634:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	333c      	adds	r3, #60	@ 0x3c
 8003658:	3304      	adds	r3, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	799b      	ldrb	r3, [r3, #6]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d17b      	bne.n	800376e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4a61      	ldr	r2, [pc, #388]	@ (8003808 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	f240 80b9 	bls.w	80037fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80b3 	beq.w	80037fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a2:	461a      	mov	r2, r3
 80036a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a8:	6093      	str	r3, [r2, #8]
 80036aa:	e0a7      	b.n	80037fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c2:	461a      	mov	r2, r3
 80036c4:	2320      	movs	r3, #32
 80036c6:	6093      	str	r3, [r2, #8]
 80036c8:	e098      	b.n	80037fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f040 8093 	bne.w	80037fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003808 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d90f      	bls.n	80036fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f4:	461a      	mov	r2, r3
 80036f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036fa:	6093      	str	r3, [r2, #8]
 80036fc:	e07e      	b.n	80037fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4413      	add	r3, r2
 8003710:	3304      	adds	r3, #4
 8003712:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1a      	ldr	r2, [r3, #32]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	0159      	lsls	r1, r3, #5
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	440b      	add	r3, r1
 8003720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372a:	1ad2      	subs	r2, r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d114      	bne.n	8003760 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003748:	461a      	mov	r2, r3
 800374a:	2101      	movs	r1, #1
 800374c:	f009 fc58 	bl	800d000 <USB_EP0_OutStart>
 8003750:	e006      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	441a      	add	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f00d fc2a 	bl	8010fc0 <HAL_PCD_DataOutStageCallback>
 800376c:	e046      	b.n	80037fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	4a26      	ldr	r2, [pc, #152]	@ (800380c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d124      	bne.n	80037c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378c:	461a      	mov	r2, r3
 800378e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003792:	6093      	str	r3, [r2, #8]
 8003794:	e032      	b.n	80037fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ac:	461a      	mov	r2, r3
 80037ae:	2320      	movs	r3, #32
 80037b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	4619      	mov	r1, r3
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f00d fc01 	bl	8010fc0 <HAL_PCD_DataOutStageCallback>
 80037be:	e01d      	b.n	80037fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d114      	bne.n	80037f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037e8:	461a      	mov	r2, r3
 80037ea:	2100      	movs	r1, #0
 80037ec:	f009 fc08 	bl	800d000 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	4619      	mov	r1, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f00d fbe2 	bl	8010fc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	4f54300a 	.word	0x4f54300a
 800380c:	4f54310a 	.word	0x4f54310a

08003810 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	333c      	adds	r3, #60	@ 0x3c
 8003828:	3304      	adds	r3, #4
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4a15      	ldr	r2, [pc, #84]	@ (8003898 <PCD_EP_OutSetupPacket_int+0x88>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d90e      	bls.n	8003864 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385c:	461a      	mov	r2, r3
 800385e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003862:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f00d fb99 	bl	8010f9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <PCD_EP_OutSetupPacket_int+0x88>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d90c      	bls.n	800388c <PCD_EP_OutSetupPacket_int+0x7c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	799b      	ldrb	r3, [r3, #6]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d108      	bne.n	800388c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003884:	461a      	mov	r2, r3
 8003886:	2101      	movs	r1, #1
 8003888:	f009 fbba 	bl	800d000 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	4f54300a 	.word	0x4f54300a

0800389c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
 80038a8:	4613      	mov	r3, r2
 80038aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d107      	bne.n	80038ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038ba:	883b      	ldrh	r3, [r7, #0]
 80038bc:	0419      	lsls	r1, r3, #16
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038c8:	e028      	b.n	800391c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	4413      	add	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e00d      	b.n	80038fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	3340      	adds	r3, #64	@ 0x40
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	4413      	add	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	3301      	adds	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	7bfa      	ldrb	r2, [r7, #15]
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	3b01      	subs	r3, #1
 8003900:	429a      	cmp	r2, r3
 8003902:	d3ec      	bcc.n	80038de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003904:	883b      	ldrh	r3, [r7, #0]
 8003906:	0418      	lsls	r0, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	3b01      	subs	r3, #1
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	4302      	orrs	r2, r0
 8003914:	3340      	adds	r3, #64	@ 0x40
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800397a:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <HAL_PCDEx_ActivateLPM+0x44>)
 800397c:	4313      	orrs	r3, r2
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	10000003 	.word	0x10000003

08003994 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039b4:	4b19      	ldr	r3, [pc, #100]	@ (8003a1c <HAL_PWREx_ConfigSupply+0x70>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d00a      	beq.n	80039d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039c0:	4b16      	ldr	r3, [pc, #88]	@ (8003a1c <HAL_PWREx_ConfigSupply+0x70>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d001      	beq.n	80039d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e01f      	b.n	8003a12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e01d      	b.n	8003a12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039d6:	4b11      	ldr	r3, [pc, #68]	@ (8003a1c <HAL_PWREx_ConfigSupply+0x70>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f023 0207 	bic.w	r2, r3, #7
 80039de:	490f      	ldr	r1, [pc, #60]	@ (8003a1c <HAL_PWREx_ConfigSupply+0x70>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039e6:	f7fe f83d 	bl	8001a64 <HAL_GetTick>
 80039ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039ec:	e009      	b.n	8003a02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039ee:	f7fe f839 	bl	8001a64 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039fc:	d901      	bls.n	8003a02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e007      	b.n	8003a12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a02:	4b06      	ldr	r3, [pc, #24]	@ (8003a1c <HAL_PWREx_ConfigSupply+0x70>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a0e:	d1ee      	bne.n	80039ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	58024800 	.word	0x58024800

08003a20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003a24:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4a04      	ldr	r2, [pc, #16]	@ (8003a3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a2e:	60d3      	str	r3, [r2, #12]
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	58024800 	.word	0x58024800

08003a40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	@ 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f000 bc48 	b.w	80042e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8088 	beq.w	8003b72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a62:	4b99      	ldr	r3, [pc, #612]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a6c:	4b96      	ldr	r3, [pc, #600]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d007      	beq.n	8003a88 <HAL_RCC_OscConfig+0x48>
 8003a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7a:	2b18      	cmp	r3, #24
 8003a7c:	d111      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x62>
 8003a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d10c      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d06d      	beq.n	8003b70 <HAL_RCC_OscConfig+0x130>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d169      	bne.n	8003b70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f000 bc21 	b.w	80042e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aaa:	d106      	bne.n	8003aba <HAL_RCC_OscConfig+0x7a>
 8003aac:	4b86      	ldr	r3, [pc, #536]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a85      	ldr	r2, [pc, #532]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	e02e      	b.n	8003b18 <HAL_RCC_OscConfig+0xd8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x9c>
 8003ac2:	4b81      	ldr	r3, [pc, #516]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a80      	ldr	r2, [pc, #512]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b7e      	ldr	r3, [pc, #504]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7d      	ldr	r2, [pc, #500]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003ad4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e01d      	b.n	8003b18 <HAL_RCC_OscConfig+0xd8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0xc0>
 8003ae6:	4b78      	ldr	r3, [pc, #480]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a77      	ldr	r2, [pc, #476]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b75      	ldr	r3, [pc, #468]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a74      	ldr	r2, [pc, #464]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e00b      	b.n	8003b18 <HAL_RCC_OscConfig+0xd8>
 8003b00:	4b71      	ldr	r3, [pc, #452]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a70      	ldr	r2, [pc, #448]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b6e      	ldr	r3, [pc, #440]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6d      	ldr	r2, [pc, #436]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd ffa0 	bl	8001a64 <HAL_GetTick>
 8003b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fd ff9c 	bl	8001a64 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	@ 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e3d4      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b3a:	4b63      	ldr	r3, [pc, #396]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0xe8>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fd ff8c 	bl	8001a64 <HAL_GetTick>
 8003b4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fd ff88 	bl	8001a64 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	@ 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e3c0      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b62:	4b59      	ldr	r3, [pc, #356]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x110>
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80ca 	beq.w	8003d14 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b80:	4b51      	ldr	r3, [pc, #324]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x166>
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	2b18      	cmp	r3, #24
 8003b9a:	d156      	bne.n	8003c4a <HAL_RCC_OscConfig+0x20a>
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d151      	bne.n	8003c4a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba6:	4b48      	ldr	r3, [pc, #288]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_RCC_OscConfig+0x17e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e392      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bbe:	4b42      	ldr	r3, [pc, #264]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 0219 	bic.w	r2, r3, #25
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	493f      	ldr	r1, [pc, #252]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd ff48 	bl	8001a64 <HAL_GetTick>
 8003bd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fd ff44 	bl	8001a64 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e37c      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bea:	4b37      	ldr	r3, [pc, #220]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	f7fd ff65 	bl	8001ac4 <HAL_GetREVID>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d817      	bhi.n	8003c34 <HAL_RCC_OscConfig+0x1f4>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b40      	cmp	r3, #64	@ 0x40
 8003c0a:	d108      	bne.n	8003c1e <HAL_RCC_OscConfig+0x1de>
 8003c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c14:	4a2c      	ldr	r2, [pc, #176]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c1a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c1c:	e07a      	b.n	8003d14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	031b      	lsls	r3, r3, #12
 8003c2c:	4926      	ldr	r1, [pc, #152]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c32:	e06f      	b.n	8003d14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b24      	ldr	r3, [pc, #144]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	4921      	ldr	r1, [pc, #132]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c48:	e064      	b.n	8003d14 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d047      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c52:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 0219 	bic.w	r2, r3, #25
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	491a      	ldr	r1, [pc, #104]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fd fefe 	bl	8001a64 <HAL_GetTick>
 8003c68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7fd fefa 	bl	8001a64 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e332      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c7e:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	f7fd ff1b 	bl	8001ac4 <HAL_GetREVID>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d819      	bhi.n	8003ccc <HAL_RCC_OscConfig+0x28c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b40      	cmp	r3, #64	@ 0x40
 8003c9e:	d108      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x272>
 8003ca0:	4b09      	ldr	r3, [pc, #36]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ca8:	4a07      	ldr	r2, [pc, #28]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cae:	6053      	str	r3, [r2, #4]
 8003cb0:	e030      	b.n	8003d14 <HAL_RCC_OscConfig+0x2d4>
 8003cb2:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	031b      	lsls	r3, r3, #12
 8003cc0:	4901      	ldr	r1, [pc, #4]	@ (8003cc8 <HAL_RCC_OscConfig+0x288>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	604b      	str	r3, [r1, #4]
 8003cc6:	e025      	b.n	8003d14 <HAL_RCC_OscConfig+0x2d4>
 8003cc8:	58024400 	.word	0x58024400
 8003ccc:	4b9a      	ldr	r3, [pc, #616]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	061b      	lsls	r3, r3, #24
 8003cda:	4997      	ldr	r1, [pc, #604]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
 8003ce0:	e018      	b.n	8003d14 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce2:	4b95      	ldr	r3, [pc, #596]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a94      	ldr	r2, [pc, #592]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fd feb9 	bl	8001a64 <HAL_GetTick>
 8003cf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf6:	f7fd feb5 	bl	8001a64 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e2ed      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d08:	4b8b      	ldr	r3, [pc, #556]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f0      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80a9 	beq.w	8003e74 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	4b85      	ldr	r3, [pc, #532]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d2c:	4b82      	ldr	r3, [pc, #520]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d007      	beq.n	8003d48 <HAL_RCC_OscConfig+0x308>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b18      	cmp	r3, #24
 8003d3c:	d13a      	bne.n	8003db4 <HAL_RCC_OscConfig+0x374>
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d135      	bne.n	8003db4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d48:	4b7b      	ldr	r3, [pc, #492]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_OscConfig+0x320>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	2b80      	cmp	r3, #128	@ 0x80
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e2c1      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d60:	f7fd feb0 	bl	8001ac4 <HAL_GetREVID>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d817      	bhi.n	8003d9e <HAL_RCC_OscConfig+0x35e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d108      	bne.n	8003d88 <HAL_RCC_OscConfig+0x348>
 8003d76:	4b70      	ldr	r3, [pc, #448]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d84:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d86:	e075      	b.n	8003e74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d88:	4b6b      	ldr	r3, [pc, #428]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	069b      	lsls	r3, r3, #26
 8003d96:	4968      	ldr	r1, [pc, #416]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d9c:	e06a      	b.n	8003e74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d9e:	4b66      	ldr	r3, [pc, #408]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	061b      	lsls	r3, r3, #24
 8003dac:	4962      	ldr	r1, [pc, #392]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003db2:	e05f      	b.n	8003e74 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d042      	beq.n	8003e42 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003dbc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fe4c 	bl	8001a64 <HAL_GetTick>
 8003dcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dd0:	f7fd fe48 	bl	8001a64 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e280      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003de2:	4b55      	ldr	r3, [pc, #340]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dee:	f7fd fe69 	bl	8001ac4 <HAL_GetREVID>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d817      	bhi.n	8003e2c <HAL_RCC_OscConfig+0x3ec>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d108      	bne.n	8003e16 <HAL_RCC_OscConfig+0x3d6>
 8003e04:	4b4c      	ldr	r3, [pc, #304]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e12:	6053      	str	r3, [r2, #4]
 8003e14:	e02e      	b.n	8003e74 <HAL_RCC_OscConfig+0x434>
 8003e16:	4b48      	ldr	r3, [pc, #288]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	069b      	lsls	r3, r3, #26
 8003e24:	4944      	ldr	r1, [pc, #272]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
 8003e2a:	e023      	b.n	8003e74 <HAL_RCC_OscConfig+0x434>
 8003e2c:	4b42      	ldr	r3, [pc, #264]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	493f      	ldr	r1, [pc, #252]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
 8003e40:	e018      	b.n	8003e74 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e42:	4b3d      	ldr	r3, [pc, #244]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a3c      	ldr	r2, [pc, #240]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fe09 	bl	8001a64 <HAL_GetTick>
 8003e52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e56:	f7fd fe05 	bl	8001a64 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e23d      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e68:	4b33      	ldr	r3, [pc, #204]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d036      	beq.n	8003eee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d019      	beq.n	8003ebc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e88:	4b2b      	ldr	r3, [pc, #172]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fd fde6 	bl	8001a64 <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9c:	f7fd fde2 	bl	8001a64 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e21a      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eae:	4b22      	ldr	r3, [pc, #136]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x45c>
 8003eba:	e018      	b.n	8003eee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd fdcc 	bl	8001a64 <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed0:	f7fd fdc8 	bl	8001a64 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e200      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ee2:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d039      	beq.n	8003f6e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01c      	beq.n	8003f3c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f02:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a0c      	ldr	r2, [pc, #48]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003f08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f0e:	f7fd fda9 	bl	8001a64 <HAL_GetTick>
 8003f12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f16:	f7fd fda5 	bl	8001a64 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e1dd      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f28:	4b03      	ldr	r3, [pc, #12]	@ (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x4d6>
 8003f34:	e01b      	b.n	8003f6e <HAL_RCC_OscConfig+0x52e>
 8003f36:	bf00      	nop
 8003f38:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f3c:	4b9b      	ldr	r3, [pc, #620]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a9a      	ldr	r2, [pc, #616]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003f42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f48:	f7fd fd8c 	bl	8001a64 <HAL_GetTick>
 8003f4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f50:	f7fd fd88 	bl	8001a64 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e1c0      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f62:	4b92      	ldr	r3, [pc, #584]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8081 	beq.w	800407e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f7c:	4b8c      	ldr	r3, [pc, #560]	@ (80041b0 <HAL_RCC_OscConfig+0x770>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a8b      	ldr	r2, [pc, #556]	@ (80041b0 <HAL_RCC_OscConfig+0x770>)
 8003f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f88:	f7fd fd6c 	bl	8001a64 <HAL_GetTick>
 8003f8c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f90:	f7fd fd68 	bl	8001a64 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	@ 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e1a0      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fa2:	4b83      	ldr	r3, [pc, #524]	@ (80041b0 <HAL_RCC_OscConfig+0x770>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x584>
 8003fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	4a7c      	ldr	r2, [pc, #496]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc2:	e02d      	b.n	8004020 <HAL_RCC_OscConfig+0x5e0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x5a6>
 8003fcc:	4b77      	ldr	r3, [pc, #476]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd0:	4a76      	ldr	r2, [pc, #472]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd8:	4b74      	ldr	r3, [pc, #464]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fdc:	4a73      	ldr	r2, [pc, #460]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003fde:	f023 0304 	bic.w	r3, r3, #4
 8003fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe4:	e01c      	b.n	8004020 <HAL_RCC_OscConfig+0x5e0>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x5c8>
 8003fee:	4b6f      	ldr	r3, [pc, #444]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	4a6e      	ldr	r2, [pc, #440]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffa:	4b6c      	ldr	r3, [pc, #432]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	4a6b      	ldr	r2, [pc, #428]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6713      	str	r3, [r2, #112]	@ 0x70
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0x5e0>
 8004008:	4b68      	ldr	r3, [pc, #416]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	4a67      	ldr	r2, [pc, #412]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6713      	str	r3, [r2, #112]	@ 0x70
 8004014:	4b65      	ldr	r3, [pc, #404]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a64      	ldr	r2, [pc, #400]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 800401a:	f023 0304 	bic.w	r3, r3, #4
 800401e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d015      	beq.n	8004054 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fd fd1c 	bl	8001a64 <HAL_GetTick>
 800402c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fd fd18 	bl	8001a64 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e14e      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004046:	4b59      	ldr	r3, [pc, #356]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ee      	beq.n	8004030 <HAL_RCC_OscConfig+0x5f0>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fd fd06 	bl	8001a64 <HAL_GetTick>
 8004058:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fd fd02 	bl	8001a64 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e138      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004072:	4b4e      	ldr	r3, [pc, #312]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1ee      	bne.n	800405c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 812d 	beq.w	80042e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004088:	4b48      	ldr	r3, [pc, #288]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004090:	2b18      	cmp	r3, #24
 8004092:	f000 80bd 	beq.w	8004210 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	2b02      	cmp	r3, #2
 800409c:	f040 809e 	bne.w	80041dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a0:	4b42      	ldr	r3, [pc, #264]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a41      	ldr	r2, [pc, #260]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 80040a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd fcda 	bl	8001a64 <HAL_GetTick>
 80040b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fd fcd6 	bl	8001a64 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e10e      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040c6:	4b39      	ldr	r3, [pc, #228]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d2:	4b36      	ldr	r3, [pc, #216]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 80040d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040d6:	4b37      	ldr	r3, [pc, #220]	@ (80041b4 <HAL_RCC_OscConfig+0x774>)
 80040d8:	4013      	ands	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040e2:	0112      	lsls	r2, r2, #4
 80040e4:	430a      	orrs	r2, r1
 80040e6:	4931      	ldr	r1, [pc, #196]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f0:	3b01      	subs	r3, #1
 80040f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fa:	3b01      	subs	r3, #1
 80040fc:	025b      	lsls	r3, r3, #9
 80040fe:	b29b      	uxth	r3, r3
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004106:	3b01      	subs	r3, #1
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004114:	3b01      	subs	r3, #1
 8004116:	061b      	lsls	r3, r3, #24
 8004118:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800411c:	4923      	ldr	r1, [pc, #140]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004122:	4b22      	ldr	r3, [pc, #136]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004126:	4a21      	ldr	r2, [pc, #132]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800412e:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004132:	4b21      	ldr	r3, [pc, #132]	@ (80041b8 <HAL_RCC_OscConfig+0x778>)
 8004134:	4013      	ands	r3, r2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800413a:	00d2      	lsls	r2, r2, #3
 800413c:	491b      	ldr	r1, [pc, #108]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 800413e:	4313      	orrs	r3, r2
 8004140:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004142:	4b1a      	ldr	r3, [pc, #104]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	f023 020c 	bic.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	4917      	ldr	r1, [pc, #92]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004150:	4313      	orrs	r3, r2
 8004152:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004154:	4b15      	ldr	r3, [pc, #84]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	f023 0202 	bic.w	r2, r3, #2
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004160:	4912      	ldr	r1, [pc, #72]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004166:	4b11      	ldr	r3, [pc, #68]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	4a10      	ldr	r2, [pc, #64]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004170:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004172:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	4a0d      	ldr	r2, [pc, #52]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800417c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800417e:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	4a0a      	ldr	r2, [pc, #40]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004188:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800418a:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	4a07      	ldr	r2, [pc, #28]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004196:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a04      	ldr	r2, [pc, #16]	@ (80041ac <HAL_RCC_OscConfig+0x76c>)
 800419c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fd fc5f 	bl	8001a64 <HAL_GetTick>
 80041a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041a8:	e011      	b.n	80041ce <HAL_RCC_OscConfig+0x78e>
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
 80041b0:	58024800 	.word	0x58024800
 80041b4:	fffffc0c 	.word	0xfffffc0c
 80041b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fd fc52 	bl	8001a64 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e08a      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ce:	4b47      	ldr	r3, [pc, #284]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x77c>
 80041da:	e082      	b.n	80042e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041dc:	4b43      	ldr	r3, [pc, #268]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a42      	ldr	r2, [pc, #264]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 80041e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd fc3c 	bl	8001a64 <HAL_GetTick>
 80041ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fd fc38 	bl	8001a64 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e070      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004202:	4b3a      	ldr	r3, [pc, #232]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x7b0>
 800420e:	e068      	b.n	80042e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004210:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 8004212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004214:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004216:	4b35      	ldr	r3, [pc, #212]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	2b01      	cmp	r3, #1
 8004222:	d031      	beq.n	8004288 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f003 0203 	and.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d12a      	bne.n	8004288 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d122      	bne.n	8004288 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800424e:	429a      	cmp	r2, r3
 8004250:	d11a      	bne.n	8004288 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	0a5b      	lsrs	r3, r3, #9
 8004256:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800425e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d111      	bne.n	8004288 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d108      	bne.n	8004288 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	0e1b      	lsrs	r3, r3, #24
 800427a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004282:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e02b      	b.n	80042e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800428c:	4b17      	ldr	r3, [pc, #92]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 800428e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004290:	08db      	lsrs	r3, r3, #3
 8004292:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004296:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d01f      	beq.n	80042e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042a2:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 80042a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a6:	4a11      	ldr	r2, [pc, #68]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042ae:	f7fd fbd9 	bl	8001a64 <HAL_GetTick>
 80042b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042b4:	bf00      	nop
 80042b6:	f7fd fbd5 	bl	8001a64 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	4293      	cmp	r3, r2
 80042c0:	d0f9      	beq.n	80042b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042c2:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 80042c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042c6:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <HAL_RCC_OscConfig+0x8b0>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042ce:	00d2      	lsls	r2, r2, #3
 80042d0:	4906      	ldr	r1, [pc, #24]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80042d6:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	4a04      	ldr	r2, [pc, #16]	@ (80042ec <HAL_RCC_OscConfig+0x8ac>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3730      	adds	r7, #48	@ 0x30
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	58024400 	.word	0x58024400
 80042f0:	ffff0007 	.word	0xffff0007

080042f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e19c      	b.n	8004642 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b8a      	ldr	r3, [pc, #552]	@ (8004534 <HAL_RCC_ClockConfig+0x240>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d910      	bls.n	8004338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b87      	ldr	r3, [pc, #540]	@ (8004534 <HAL_RCC_ClockConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 020f 	bic.w	r2, r3, #15
 800431e:	4985      	ldr	r1, [pc, #532]	@ (8004534 <HAL_RCC_ClockConfig+0x240>)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b83      	ldr	r3, [pc, #524]	@ (8004534 <HAL_RCC_ClockConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e184      	b.n	8004642 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	4b7b      	ldr	r3, [pc, #492]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004350:	429a      	cmp	r2, r3
 8004352:	d908      	bls.n	8004366 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004354:	4b78      	ldr	r3, [pc, #480]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	4975      	ldr	r1, [pc, #468]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004362:	4313      	orrs	r3, r2
 8004364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d010      	beq.n	8004394 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	4b70      	ldr	r3, [pc, #448]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800437e:	429a      	cmp	r2, r3
 8004380:	d908      	bls.n	8004394 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004382:	4b6d      	ldr	r3, [pc, #436]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	496a      	ldr	r1, [pc, #424]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004390:	4313      	orrs	r3, r2
 8004392:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d010      	beq.n	80043c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	4b64      	ldr	r3, [pc, #400]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d908      	bls.n	80043c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043b0:	4b61      	ldr	r3, [pc, #388]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	495e      	ldr	r1, [pc, #376]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d010      	beq.n	80043f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	4b59      	ldr	r3, [pc, #356]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043da:	429a      	cmp	r2, r3
 80043dc:	d908      	bls.n	80043f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043de:	4b56      	ldr	r3, [pc, #344]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	4953      	ldr	r1, [pc, #332]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d010      	beq.n	800441e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	4b4d      	ldr	r3, [pc, #308]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	429a      	cmp	r2, r3
 800440a:	d908      	bls.n	800441e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800440c:	4b4a      	ldr	r3, [pc, #296]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f023 020f 	bic.w	r2, r3, #15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4947      	ldr	r1, [pc, #284]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 800441a:	4313      	orrs	r3, r2
 800441c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d055      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800442a:	4b43      	ldr	r3, [pc, #268]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	4940      	ldr	r1, [pc, #256]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004438:	4313      	orrs	r3, r2
 800443a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d107      	bne.n	8004454 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004444:	4b3c      	ldr	r3, [pc, #240]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d121      	bne.n	8004494 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0f6      	b.n	8004642 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d107      	bne.n	800446c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800445c:	4b36      	ldr	r3, [pc, #216]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d115      	bne.n	8004494 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0ea      	b.n	8004642 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d107      	bne.n	8004484 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004474:	4b30      	ldr	r3, [pc, #192]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d109      	bne.n	8004494 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0de      	b.n	8004642 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004484:	4b2c      	ldr	r3, [pc, #176]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0d6      	b.n	8004642 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004494:	4b28      	ldr	r3, [pc, #160]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f023 0207 	bic.w	r2, r3, #7
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4925      	ldr	r1, [pc, #148]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a6:	f7fd fadd 	bl	8001a64 <HAL_GetTick>
 80044aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ae:	f7fd fad9 	bl	8001a64 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e0be      	b.n	8004642 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d1eb      	bne.n	80044ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d010      	beq.n	8004504 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	4b14      	ldr	r3, [pc, #80]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d208      	bcs.n	8004504 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f2:	4b11      	ldr	r3, [pc, #68]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f023 020f 	bic.w	r2, r3, #15
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	490e      	ldr	r1, [pc, #56]	@ (8004538 <HAL_RCC_ClockConfig+0x244>)
 8004500:	4313      	orrs	r3, r2
 8004502:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004504:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <HAL_RCC_ClockConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d214      	bcs.n	800453c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b08      	ldr	r3, [pc, #32]	@ (8004534 <HAL_RCC_ClockConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 020f 	bic.w	r2, r3, #15
 800451a:	4906      	ldr	r1, [pc, #24]	@ (8004534 <HAL_RCC_ClockConfig+0x240>)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <HAL_RCC_ClockConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e086      	b.n	8004642 <HAL_RCC_ClockConfig+0x34e>
 8004534:	52002000 	.word	0x52002000
 8004538:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	4b3f      	ldr	r3, [pc, #252]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004554:	429a      	cmp	r2, r3
 8004556:	d208      	bcs.n	800456a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004558:	4b3c      	ldr	r3, [pc, #240]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	4939      	ldr	r1, [pc, #228]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 8004566:	4313      	orrs	r3, r2
 8004568:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d010      	beq.n	8004598 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	4b34      	ldr	r3, [pc, #208]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004582:	429a      	cmp	r2, r3
 8004584:	d208      	bcs.n	8004598 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004586:	4b31      	ldr	r3, [pc, #196]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	492e      	ldr	r1, [pc, #184]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 8004594:	4313      	orrs	r3, r2
 8004596:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	4b28      	ldr	r3, [pc, #160]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d208      	bcs.n	80045c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045b4:	4b25      	ldr	r3, [pc, #148]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	4922      	ldr	r1, [pc, #136]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	4b1d      	ldr	r3, [pc, #116]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045de:	429a      	cmp	r2, r3
 80045e0:	d208      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80045e2:	4b1a      	ldr	r3, [pc, #104]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4917      	ldr	r1, [pc, #92]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045f4:	f000 f844 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 80045f8:	4602      	mov	r2, r0
 80045fa:	4b14      	ldr	r3, [pc, #80]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	0a1b      	lsrs	r3, r3, #8
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	4912      	ldr	r1, [pc, #72]	@ (8004650 <HAL_RCC_ClockConfig+0x35c>)
 8004606:	5ccb      	ldrb	r3, [r1, r3]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
 8004610:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004612:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <HAL_RCC_ClockConfig+0x358>)
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	4a0d      	ldr	r2, [pc, #52]	@ (8004650 <HAL_RCC_ClockConfig+0x35c>)
 800461c:	5cd3      	ldrb	r3, [r2, r3]
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
 8004628:	4a0a      	ldr	r2, [pc, #40]	@ (8004654 <HAL_RCC_ClockConfig+0x360>)
 800462a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800462c:	4a0a      	ldr	r2, [pc, #40]	@ (8004658 <HAL_RCC_ClockConfig+0x364>)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004632:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <HAL_RCC_ClockConfig+0x368>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd f9ca 	bl	80019d0 <HAL_InitTick>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004640:	7bfb      	ldrb	r3, [r7, #15]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	58024400 	.word	0x58024400
 8004650:	08013da4 	.word	0x08013da4
 8004654:	24000004 	.word	0x24000004
 8004658:	24000000 	.word	0x24000000
 800465c:	24000008 	.word	0x24000008

08004660 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8004664:	4b05      	ldr	r3, [pc, #20]	@ (800467c <HAL_RCC_EnableCSS+0x1c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a04      	ldr	r2, [pc, #16]	@ (800467c <HAL_RCC_EnableCSS+0x1c>)
 800466a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800466e:	6013      	str	r3, [r2, #0]
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	58024400 	.word	0x58024400

08004680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	@ 0x24
 8004684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004686:	4bb3      	ldr	r3, [pc, #716]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800468e:	2b18      	cmp	r3, #24
 8004690:	f200 8155 	bhi.w	800493e <HAL_RCC_GetSysClockFreq+0x2be>
 8004694:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	08004701 	.word	0x08004701
 80046a0:	0800493f 	.word	0x0800493f
 80046a4:	0800493f 	.word	0x0800493f
 80046a8:	0800493f 	.word	0x0800493f
 80046ac:	0800493f 	.word	0x0800493f
 80046b0:	0800493f 	.word	0x0800493f
 80046b4:	0800493f 	.word	0x0800493f
 80046b8:	0800493f 	.word	0x0800493f
 80046bc:	08004727 	.word	0x08004727
 80046c0:	0800493f 	.word	0x0800493f
 80046c4:	0800493f 	.word	0x0800493f
 80046c8:	0800493f 	.word	0x0800493f
 80046cc:	0800493f 	.word	0x0800493f
 80046d0:	0800493f 	.word	0x0800493f
 80046d4:	0800493f 	.word	0x0800493f
 80046d8:	0800493f 	.word	0x0800493f
 80046dc:	0800472d 	.word	0x0800472d
 80046e0:	0800493f 	.word	0x0800493f
 80046e4:	0800493f 	.word	0x0800493f
 80046e8:	0800493f 	.word	0x0800493f
 80046ec:	0800493f 	.word	0x0800493f
 80046f0:	0800493f 	.word	0x0800493f
 80046f4:	0800493f 	.word	0x0800493f
 80046f8:	0800493f 	.word	0x0800493f
 80046fc:	08004733 	.word	0x08004733
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004700:	4b94      	ldr	r3, [pc, #592]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800470c:	4b91      	ldr	r3, [pc, #580]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	4a90      	ldr	r2, [pc, #576]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
 800471c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800471e:	e111      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004720:	4b8d      	ldr	r3, [pc, #564]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004722:	61bb      	str	r3, [r7, #24]
      break;
 8004724:	e10e      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004726:	4b8d      	ldr	r3, [pc, #564]	@ (800495c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004728:	61bb      	str	r3, [r7, #24]
      break;
 800472a:	e10b      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800472c:	4b8c      	ldr	r3, [pc, #560]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800472e:	61bb      	str	r3, [r7, #24]
      break;
 8004730:	e108      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004732:	4b88      	ldr	r3, [pc, #544]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800473c:	4b85      	ldr	r3, [pc, #532]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004746:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004748:	4b82      	ldr	r3, [pc, #520]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004752:	4b80      	ldr	r3, [pc, #512]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	08db      	lsrs	r3, r3, #3
 8004758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80e1 	beq.w	8004938 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b02      	cmp	r3, #2
 800477a:	f000 8083 	beq.w	8004884 <HAL_RCC_GetSysClockFreq+0x204>
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b02      	cmp	r3, #2
 8004782:	f200 80a1 	bhi.w	80048c8 <HAL_RCC_GetSysClockFreq+0x248>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x114>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d056      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004792:	e099      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004794:	4b6f      	ldr	r3, [pc, #444]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02d      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	08db      	lsrs	r3, r3, #3
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ca:	4b62      	ldr	r3, [pc, #392]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047da:	ed97 6a02 	vldr	s12, [r7, #8]
 80047de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80047fa:	e087      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004968 <HAL_RCC_GetSysClockFreq+0x2e8>
 800480a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480e:	4b51      	ldr	r3, [pc, #324]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004822:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004964 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800483e:	e065      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800496c <HAL_RCC_GetSysClockFreq+0x2ec>
 800484e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004852:	4b40      	ldr	r3, [pc, #256]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004862:	ed97 6a02 	vldr	s12, [r7, #8]
 8004866:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800486a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004882:	e043      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004970 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b2f      	ldr	r3, [pc, #188]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048c6:	e021      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800496c <HAL_RCC_GetSysClockFreq+0x2ec>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b1e      	ldr	r3, [pc, #120]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800490a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800490c:	4b11      	ldr	r3, [pc, #68]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004910:	0a5b      	lsrs	r3, r3, #9
 8004912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004916:	3301      	adds	r3, #1
 8004918:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	ee07 3a90 	vmov	s15, r3
 8004920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004924:	edd7 6a07 	vldr	s13, [r7, #28]
 8004928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800492c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004930:	ee17 3a90 	vmov	r3, s15
 8004934:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004936:	e005      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	61bb      	str	r3, [r7, #24]
      break;
 800493c:	e002      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800493e:	4b07      	ldr	r3, [pc, #28]	@ (800495c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004940:	61bb      	str	r3, [r7, #24]
      break;
 8004942:	bf00      	nop
  }

  return sysclockfreq;
 8004944:	69bb      	ldr	r3, [r7, #24]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3724      	adds	r7, #36	@ 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	58024400 	.word	0x58024400
 8004958:	03d09000 	.word	0x03d09000
 800495c:	003d0900 	.word	0x003d0900
 8004960:	017d7840 	.word	0x017d7840
 8004964:	46000000 	.word	0x46000000
 8004968:	4c742400 	.word	0x4c742400
 800496c:	4a742400 	.word	0x4a742400
 8004970:	4bbebc20 	.word	0x4bbebc20

08004974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800497a:	f7ff fe81 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 800497e:	4602      	mov	r2, r0
 8004980:	4b10      	ldr	r3, [pc, #64]	@ (80049c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	490f      	ldr	r1, [pc, #60]	@ (80049c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800498c:	5ccb      	ldrb	r3, [r1, r3]
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004998:	4b0a      	ldr	r3, [pc, #40]	@ (80049c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	4a09      	ldr	r2, [pc, #36]	@ (80049c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80049a2:	5cd3      	ldrb	r3, [r2, r3]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	4a07      	ldr	r2, [pc, #28]	@ (80049cc <HAL_RCC_GetHCLKFreq+0x58>)
 80049b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049b2:	4a07      	ldr	r2, [pc, #28]	@ (80049d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049b8:	4b04      	ldr	r3, [pc, #16]	@ (80049cc <HAL_RCC_GetHCLKFreq+0x58>)
 80049ba:	681b      	ldr	r3, [r3, #0]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	58024400 	.word	0x58024400
 80049c8:	08013da4 	.word	0x08013da4
 80049cc:	24000004 	.word	0x24000004
 80049d0:	24000000 	.word	0x24000000

080049d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049d8:	f7ff ffcc 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4904      	ldr	r1, [pc, #16]	@ (80049fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	58024400 	.word	0x58024400
 80049fc:	08013da4 	.word	0x08013da4

08004a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a04:	f7ff ffb6 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4904      	ldr	r1, [pc, #16]	@ (8004a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	58024400 	.word	0x58024400
 8004a28:	08013da4 	.word	0x08013da4

08004a2c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004a30:	4b07      	ldr	r3, [pc, #28]	@ (8004a50 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3c:	d105      	bne.n	8004a4a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004a3e:	f000 f809 	bl	8004a54 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004a42:	4b03      	ldr	r3, [pc, #12]	@ (8004a50 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004a44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a48:	669a      	str	r2, [r3, #104]	@ 0x68
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	58024400 	.word	0x58024400

08004a54 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b0ca      	sub	sp, #296	@ 0x128
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a76:	2300      	movs	r3, #0
 8004a78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004a88:	2500      	movs	r5, #0
 8004a8a:	ea54 0305 	orrs.w	r3, r4, r5
 8004a8e:	d049      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a9a:	d02f      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004aa0:	d828      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004aa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aa6:	d01a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004aa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aac:	d822      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ab6:	d007      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ab8:	e01c      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aba:	4bb8      	ldr	r3, [pc, #736]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	4ab7      	ldr	r2, [pc, #732]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ac6:	e01a      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004acc:	3308      	adds	r3, #8
 8004ace:	2102      	movs	r1, #2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f002 fb61 	bl	8007198 <RCCEx_PLL2_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004adc:	e00f      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae2:	3328      	adds	r3, #40	@ 0x28
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f002 fc08 	bl	80072fc <RCCEx_PLL3_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004af2:	e004      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004afa:	e000      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b06:	4ba5      	ldr	r3, [pc, #660]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b14:	4aa1      	ldr	r2, [pc, #644]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b16:	430b      	orrs	r3, r1
 8004b18:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b1a:	e003      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004b30:	f04f 0900 	mov.w	r9, #0
 8004b34:	ea58 0309 	orrs.w	r3, r8, r9
 8004b38:	d047      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d82a      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004b44:	a201      	add	r2, pc, #4	@ (adr r2, 8004b4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004b61 	.word	0x08004b61
 8004b50:	08004b6f 	.word	0x08004b6f
 8004b54:	08004b85 	.word	0x08004b85
 8004b58:	08004ba3 	.word	0x08004ba3
 8004b5c:	08004ba3 	.word	0x08004ba3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b60:	4b8e      	ldr	r3, [pc, #568]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	4a8d      	ldr	r2, [pc, #564]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b6c:	e01a      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b72:	3308      	adds	r3, #8
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f002 fb0e 	bl	8007198 <RCCEx_PLL2_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b82:	e00f      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b88:	3328      	adds	r3, #40	@ 0x28
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f002 fbb5 	bl	80072fc <RCCEx_PLL3_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b98:	e004      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bac:	4b7b      	ldr	r3, [pc, #492]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb0:	f023 0107 	bic.w	r1, r3, #7
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bba:	4a78      	ldr	r2, [pc, #480]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bc0:	e003      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004bd6:	f04f 0b00 	mov.w	fp, #0
 8004bda:	ea5a 030b 	orrs.w	r3, sl, fp
 8004bde:	d04c      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bea:	d030      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf0:	d829      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bf4:	d02d      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004bf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bf8:	d825      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bfa:	2b80      	cmp	r3, #128	@ 0x80
 8004bfc:	d018      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004bfe:	2b80      	cmp	r3, #128	@ 0x80
 8004c00:	d821      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004c06:	2b40      	cmp	r3, #64	@ 0x40
 8004c08:	d007      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004c0a:	e01c      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c0c:	4b63      	ldr	r3, [pc, #396]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c10:	4a62      	ldr	r2, [pc, #392]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c18:	e01c      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	3308      	adds	r3, #8
 8004c20:	2100      	movs	r1, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f002 fab8 	bl	8007198 <RCCEx_PLL2_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c2e:	e011      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c34:	3328      	adds	r3, #40	@ 0x28
 8004c36:	2100      	movs	r1, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f002 fb5f 	bl	80072fc <RCCEx_PLL3_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c44:	e006      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c4c:	e002      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c60:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6a:	4a4c      	ldr	r2, [pc, #304]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c70:	e003      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004c86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004c90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004c94:	460b      	mov	r3, r1
 8004c96:	4313      	orrs	r3, r2
 8004c98:	d053      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ca2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ca6:	d035      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ca8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cac:	d82e      	bhi.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004cae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004cb2:	d031      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004cb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004cb8:	d828      	bhi.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cbe:	d01a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004cc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cc4:	d822      	bhi.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004cca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cce:	d007      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004cd0:	e01c      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd2:	4b32      	ldr	r3, [pc, #200]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd6:	4a31      	ldr	r2, [pc, #196]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cde:	e01c      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f002 fa55 	bl	8007198 <RCCEx_PLL2_Config>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cf4:	e011      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfa:	3328      	adds	r3, #40	@ 0x28
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f002 fafc 	bl	80072fc <RCCEx_PLL3_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d0a:	e006      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d12:	e002      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d22:	4b1e      	ldr	r3, [pc, #120]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d26:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d32:	4a1a      	ldr	r2, [pc, #104]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d38:	e003      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004d4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004d52:	2300      	movs	r3, #0
 8004d54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d056      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d6e:	d038      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d74:	d831      	bhi.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d7a:	d034      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d80:	d82b      	bhi.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d86:	d01d      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d8c:	d825      	bhi.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d006      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004d92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d98:	e01f      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da0:	4ba2      	ldr	r3, [pc, #648]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	4aa1      	ldr	r2, [pc, #644]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dac:	e01c      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db2:	3308      	adds	r3, #8
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f002 f9ee 	bl	8007198 <RCCEx_PLL2_Config>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004dc2:	e011      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc8:	3328      	adds	r3, #40	@ 0x28
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f002 fa95 	bl	80072fc <RCCEx_PLL3_Config>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dd8:	e006      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004de0:	e002      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004de2:	bf00      	nop
 8004de4:	e000      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004df0:	4b8e      	ldr	r3, [pc, #568]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e00:	4a8a      	ldr	r2, [pc, #552]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e02:	430b      	orrs	r3, r1
 8004e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e06:	e003      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e20:	2300      	movs	r3, #0
 8004e22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	d03a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e36:	2b30      	cmp	r3, #48	@ 0x30
 8004e38:	d01f      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004e3a:	2b30      	cmp	r3, #48	@ 0x30
 8004e3c:	d819      	bhi.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d00c      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d815      	bhi.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d019      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004e4a:	2b10      	cmp	r3, #16
 8004e4c:	d111      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4e:	4b77      	ldr	r3, [pc, #476]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	4a76      	ldr	r2, [pc, #472]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e5a:	e011      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e60:	3308      	adds	r3, #8
 8004e62:	2102      	movs	r1, #2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f002 f997 	bl	8007198 <RCCEx_PLL2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e70:	e006      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e78:	e002      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e7a:	bf00      	nop
 8004e7c:	e000      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e88:	4b68      	ldr	r3, [pc, #416]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e96:	4a65      	ldr	r2, [pc, #404]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004eb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	d051      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ecc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ed0:	d035      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ed2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ed6:	d82e      	bhi.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ed8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004edc:	d031      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ede:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ee2:	d828      	bhi.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee8:	d01a      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eee:	d822      	bhi.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef8:	d007      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004efa:	e01c      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004efc:	4b4b      	ldr	r3, [pc, #300]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	4a4a      	ldr	r2, [pc, #296]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f08:	e01c      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	3308      	adds	r3, #8
 8004f10:	2100      	movs	r1, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f002 f940 	bl	8007198 <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f1e:	e011      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f24:	3328      	adds	r3, #40	@ 0x28
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f002 f9e7 	bl	80072fc <RCCEx_PLL3_Config>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f34:	e006      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f3c:	e002      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f3e:	bf00      	nop
 8004f40:	e000      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f4c:	4b37      	ldr	r3, [pc, #220]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f50:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5a:	4a34      	ldr	r2, [pc, #208]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f60:	e003      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004f84:	460b      	mov	r3, r1
 8004f86:	4313      	orrs	r3, r2
 8004f88:	d056      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f94:	d033      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004f96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f9a:	d82c      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fa0:	d02f      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004fa2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fa6:	d826      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fa8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fac:	d02b      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004fae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fb2:	d820      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fb8:	d012      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004fba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fbe:	d81a      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d022      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc8:	d115      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fce:	3308      	adds	r3, #8
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f002 f8e0 	bl	8007198 <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fde:	e015      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe4:	3328      	adds	r3, #40	@ 0x28
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 f987 	bl	80072fc <RCCEx_PLL3_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ff4:	e00a      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ffc:	e006      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ffe:	bf00      	nop
 8005000:	e004      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800500a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10d      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005014:	4b05      	ldr	r3, [pc, #20]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005018:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800501c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005022:	4a02      	ldr	r2, [pc, #8]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005024:	430b      	orrs	r3, r1
 8005026:	6513      	str	r3, [r2, #80]	@ 0x50
 8005028:	e006      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800502a:	bf00      	nop
 800502c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005034:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005048:	2300      	movs	r3, #0
 800504a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800504e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005052:	460b      	mov	r3, r1
 8005054:	4313      	orrs	r3, r2
 8005056:	d055      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005064:	d033      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005066:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800506a:	d82c      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005070:	d02f      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005076:	d826      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005078:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800507c:	d02b      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800507e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005082:	d820      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005088:	d012      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800508a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800508e:	d81a      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d022      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005098:	d115      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509e:	3308      	adds	r3, #8
 80050a0:	2101      	movs	r1, #1
 80050a2:	4618      	mov	r0, r3
 80050a4:	f002 f878 	bl	8007198 <RCCEx_PLL2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050ae:	e015      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b4:	3328      	adds	r3, #40	@ 0x28
 80050b6:	2101      	movs	r1, #1
 80050b8:	4618      	mov	r0, r3
 80050ba:	f002 f91f 	bl	80072fc <RCCEx_PLL3_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050c4:	e00a      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050cc:	e006      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050ce:	bf00      	nop
 80050d0:	e004      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050e4:	4ba3      	ldr	r3, [pc, #652]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80050ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050f4:	4a9f      	ldr	r2, [pc, #636]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050f6:	430b      	orrs	r3, r1
 80050f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050fa:	e003      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005114:	2300      	movs	r3, #0
 8005116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800511a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800511e:	460b      	mov	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	d037      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800512e:	d00e      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005134:	d816      	bhi.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d018      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800513a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800513e:	d111      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005140:	4b8c      	ldr	r3, [pc, #560]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	4a8b      	ldr	r2, [pc, #556]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800514a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800514c:	e00f      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005152:	3308      	adds	r3, #8
 8005154:	2101      	movs	r1, #1
 8005156:	4618      	mov	r0, r3
 8005158:	f002 f81e 	bl	8007198 <RCCEx_PLL2_Config>
 800515c:	4603      	mov	r3, r0
 800515e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005162:	e004      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800516a:	e000      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800516c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800516e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005176:	4b7f      	ldr	r3, [pc, #508]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005184:	4a7b      	ldr	r2, [pc, #492]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005186:	430b      	orrs	r3, r1
 8005188:	6513      	str	r3, [r2, #80]	@ 0x50
 800518a:	e003      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80051a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80051aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4313      	orrs	r3, r2
 80051b2:	d039      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d81c      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80051be:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	08005201 	.word	0x08005201
 80051c8:	080051d5 	.word	0x080051d5
 80051cc:	080051e3 	.word	0x080051e3
 80051d0:	08005201 	.word	0x08005201
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d4:	4b67      	ldr	r3, [pc, #412]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	4a66      	ldr	r2, [pc, #408]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051e0:	e00f      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e6:	3308      	adds	r3, #8
 80051e8:	2102      	movs	r1, #2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 ffd4 	bl	8007198 <RCCEx_PLL2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051f6:	e004      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051fe:	e000      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800520a:	4b5a      	ldr	r3, [pc, #360]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800520c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800520e:	f023 0103 	bic.w	r1, r3, #3
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005218:	4a56      	ldr	r2, [pc, #344]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800521a:	430b      	orrs	r3, r1
 800521c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800521e:	e003      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005234:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005238:	2300      	movs	r3, #0
 800523a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800523e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005242:	460b      	mov	r3, r1
 8005244:	4313      	orrs	r3, r2
 8005246:	f000 809f 	beq.w	8005388 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800524a:	4b4b      	ldr	r3, [pc, #300]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a4a      	ldr	r2, [pc, #296]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005254:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005256:	f7fc fc05 	bl	8001a64 <HAL_GetTick>
 800525a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800525e:	e00b      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005260:	f7fc fc00 	bl	8001a64 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b64      	cmp	r3, #100	@ 0x64
 800526e:	d903      	bls.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005276:	e005      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005278:	4b3f      	ldr	r3, [pc, #252]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0ed      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005288:	2b00      	cmp	r3, #0
 800528a:	d179      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800528c:	4b39      	ldr	r3, [pc, #228]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800528e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005294:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005298:	4053      	eors	r3, r2
 800529a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d015      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052a2:	4b34      	ldr	r3, [pc, #208]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052ae:	4b31      	ldr	r3, [pc, #196]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b2:	4a30      	ldr	r2, [pc, #192]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052be:	4a2d      	ldr	r2, [pc, #180]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052da:	d118      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fc fbc2 	bl	8001a64 <HAL_GetTick>
 80052e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052e4:	e00d      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7fc fbbd 	bl	8001a64 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80052f0:	1ad2      	subs	r2, r2, r3
 80052f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d903      	bls.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005300:	e005      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005302:	4b1c      	ldr	r3, [pc, #112]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0eb      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800530e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005312:	2b00      	cmp	r3, #0
 8005314:	d129      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800531e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005326:	d10e      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005328:	4b12      	ldr	r3, [pc, #72]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005334:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005338:	091a      	lsrs	r2, r3, #4
 800533a:	4b10      	ldr	r3, [pc, #64]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800533c:	4013      	ands	r3, r2
 800533e:	4a0d      	ldr	r2, [pc, #52]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005340:	430b      	orrs	r3, r1
 8005342:	6113      	str	r3, [r2, #16]
 8005344:	e005      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005346:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	4a0a      	ldr	r2, [pc, #40]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800534c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005350:	6113      	str	r3, [r2, #16]
 8005352:	4b08      	ldr	r3, [pc, #32]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005354:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800535e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005362:	4a04      	ldr	r2, [pc, #16]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005364:	430b      	orrs	r3, r1
 8005366:	6713      	str	r3, [r2, #112]	@ 0x70
 8005368:	e00e      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800536a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800536e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005372:	e009      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005374:	58024400 	.word	0x58024400
 8005378:	58024800 	.word	0x58024800
 800537c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	f002 0301 	and.w	r3, r2, #1
 8005394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005398:	2300      	movs	r3, #0
 800539a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800539e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f000 8089 	beq.w	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053b0:	2b28      	cmp	r3, #40	@ 0x28
 80053b2:	d86b      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80053b4:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ba:	bf00      	nop
 80053bc:	08005495 	.word	0x08005495
 80053c0:	0800548d 	.word	0x0800548d
 80053c4:	0800548d 	.word	0x0800548d
 80053c8:	0800548d 	.word	0x0800548d
 80053cc:	0800548d 	.word	0x0800548d
 80053d0:	0800548d 	.word	0x0800548d
 80053d4:	0800548d 	.word	0x0800548d
 80053d8:	0800548d 	.word	0x0800548d
 80053dc:	08005461 	.word	0x08005461
 80053e0:	0800548d 	.word	0x0800548d
 80053e4:	0800548d 	.word	0x0800548d
 80053e8:	0800548d 	.word	0x0800548d
 80053ec:	0800548d 	.word	0x0800548d
 80053f0:	0800548d 	.word	0x0800548d
 80053f4:	0800548d 	.word	0x0800548d
 80053f8:	0800548d 	.word	0x0800548d
 80053fc:	08005477 	.word	0x08005477
 8005400:	0800548d 	.word	0x0800548d
 8005404:	0800548d 	.word	0x0800548d
 8005408:	0800548d 	.word	0x0800548d
 800540c:	0800548d 	.word	0x0800548d
 8005410:	0800548d 	.word	0x0800548d
 8005414:	0800548d 	.word	0x0800548d
 8005418:	0800548d 	.word	0x0800548d
 800541c:	08005495 	.word	0x08005495
 8005420:	0800548d 	.word	0x0800548d
 8005424:	0800548d 	.word	0x0800548d
 8005428:	0800548d 	.word	0x0800548d
 800542c:	0800548d 	.word	0x0800548d
 8005430:	0800548d 	.word	0x0800548d
 8005434:	0800548d 	.word	0x0800548d
 8005438:	0800548d 	.word	0x0800548d
 800543c:	08005495 	.word	0x08005495
 8005440:	0800548d 	.word	0x0800548d
 8005444:	0800548d 	.word	0x0800548d
 8005448:	0800548d 	.word	0x0800548d
 800544c:	0800548d 	.word	0x0800548d
 8005450:	0800548d 	.word	0x0800548d
 8005454:	0800548d 	.word	0x0800548d
 8005458:	0800548d 	.word	0x0800548d
 800545c:	08005495 	.word	0x08005495
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005464:	3308      	adds	r3, #8
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fe95 	bl	8007198 <RCCEx_PLL2_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005474:	e00f      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547a:	3328      	adds	r3, #40	@ 0x28
 800547c:	2101      	movs	r1, #1
 800547e:	4618      	mov	r0, r3
 8005480:	f001 ff3c 	bl	80072fc <RCCEx_PLL3_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800548a:	e004      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005492:	e000      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800549e:	4bbf      	ldr	r3, [pc, #764]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054ac:	4abb      	ldr	r2, [pc, #748]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054ae:	430b      	orrs	r3, r1
 80054b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80054b2:	e003      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f002 0302 	and.w	r3, r2, #2
 80054c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054cc:	2300      	movs	r3, #0
 80054ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80054d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80054d6:	460b      	mov	r3, r1
 80054d8:	4313      	orrs	r3, r2
 80054da:	d041      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80054dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	d824      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80054e6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005539 	.word	0x08005539
 80054f0:	08005505 	.word	0x08005505
 80054f4:	0800551b 	.word	0x0800551b
 80054f8:	08005539 	.word	0x08005539
 80054fc:	08005539 	.word	0x08005539
 8005500:	08005539 	.word	0x08005539
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005508:	3308      	adds	r3, #8
 800550a:	2101      	movs	r1, #1
 800550c:	4618      	mov	r0, r3
 800550e:	f001 fe43 	bl	8007198 <RCCEx_PLL2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005518:	e00f      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	3328      	adds	r3, #40	@ 0x28
 8005520:	2101      	movs	r1, #1
 8005522:	4618      	mov	r0, r3
 8005524:	f001 feea 	bl	80072fc <RCCEx_PLL3_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800552e:	e004      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005536:	e000      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005542:	4b96      	ldr	r3, [pc, #600]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005546:	f023 0107 	bic.w	r1, r3, #7
 800554a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005550:	4a92      	ldr	r2, [pc, #584]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005552:	430b      	orrs	r3, r1
 8005554:	6553      	str	r3, [r2, #84]	@ 0x54
 8005556:	e003      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f002 0304 	and.w	r3, r2, #4
 800556c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005570:	2300      	movs	r3, #0
 8005572:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005576:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800557a:	460b      	mov	r3, r1
 800557c:	4313      	orrs	r3, r2
 800557e:	d044      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005588:	2b05      	cmp	r3, #5
 800558a:	d825      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800558c:	a201      	add	r2, pc, #4	@ (adr r2, 8005594 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055e1 	.word	0x080055e1
 8005598:	080055ad 	.word	0x080055ad
 800559c:	080055c3 	.word	0x080055c3
 80055a0:	080055e1 	.word	0x080055e1
 80055a4:	080055e1 	.word	0x080055e1
 80055a8:	080055e1 	.word	0x080055e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b0:	3308      	adds	r3, #8
 80055b2:	2101      	movs	r1, #1
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 fdef 	bl	8007198 <RCCEx_PLL2_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055c0:	e00f      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c6:	3328      	adds	r3, #40	@ 0x28
 80055c8:	2101      	movs	r1, #1
 80055ca:	4618      	mov	r0, r3
 80055cc:	f001 fe96 	bl	80072fc <RCCEx_PLL3_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055d6:	e004      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055de:	e000      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80055e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10b      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055ea:	4b6c      	ldr	r3, [pc, #432]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ee:	f023 0107 	bic.w	r1, r3, #7
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055fa:	4a68      	ldr	r2, [pc, #416]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055fc:	430b      	orrs	r3, r1
 80055fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005600:	e003      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f002 0320 	and.w	r3, r2, #32
 8005616:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800561a:	2300      	movs	r3, #0
 800561c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005624:	460b      	mov	r3, r1
 8005626:	4313      	orrs	r3, r2
 8005628:	d055      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005636:	d033      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800563c:	d82c      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800563e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005642:	d02f      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005648:	d826      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800564a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800564e:	d02b      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005650:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005654:	d820      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800565a:	d012      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800565c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005660:	d81a      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d022      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800566a:	d115      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	3308      	adds	r3, #8
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fd8f 	bl	8007198 <RCCEx_PLL2_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005680:	e015      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005686:	3328      	adds	r3, #40	@ 0x28
 8005688:	2102      	movs	r1, #2
 800568a:	4618      	mov	r0, r3
 800568c:	f001 fe36 	bl	80072fc <RCCEx_PLL3_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005696:	e00a      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800569e:	e006      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056a0:	bf00      	nop
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056a4:	bf00      	nop
 80056a6:	e002      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056b6:	4b39      	ldr	r3, [pc, #228]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c6:	4a35      	ldr	r2, [pc, #212]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80056cc:	e003      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80056e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056e6:	2300      	movs	r3, #0
 80056e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80056ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4313      	orrs	r3, r2
 80056f4:	d058      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005702:	d033      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005704:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005708:	d82c      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800570a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800570e:	d02f      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005714:	d826      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005716:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800571a:	d02b      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800571c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005720:	d820      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005726:	d012      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800572c:	d81a      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d022      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005736:	d115      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573c:	3308      	adds	r3, #8
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f001 fd29 	bl	8007198 <RCCEx_PLL2_Config>
 8005746:	4603      	mov	r3, r0
 8005748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800574c:	e015      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005752:	3328      	adds	r3, #40	@ 0x28
 8005754:	2102      	movs	r1, #2
 8005756:	4618      	mov	r0, r3
 8005758:	f001 fdd0 	bl	80072fc <RCCEx_PLL3_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005762:	e00a      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800576a:	e006      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800576c:	bf00      	nop
 800576e:	e004      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005770:	bf00      	nop
 8005772:	e002      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005774:	bf00      	nop
 8005776:	e000      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10e      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005782:	4b06      	ldr	r3, [pc, #24]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005786:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005792:	4a02      	ldr	r2, [pc, #8]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005794:	430b      	orrs	r3, r1
 8005796:	6593      	str	r3, [r2, #88]	@ 0x58
 8005798:	e006      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800579a:	bf00      	nop
 800579c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80057a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80057b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80057c2:	460b      	mov	r3, r1
 80057c4:	4313      	orrs	r3, r2
 80057c6:	d055      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057d4:	d033      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80057d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057da:	d82c      	bhi.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e0:	d02f      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80057e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e6:	d826      	bhi.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057ec:	d02b      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80057ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057f2:	d820      	bhi.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057f8:	d012      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80057fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057fe:	d81a      	bhi.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005800:	2b00      	cmp	r3, #0
 8005802:	d022      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005808:	d115      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800580a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580e:	3308      	adds	r3, #8
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f001 fcc0 	bl	8007198 <RCCEx_PLL2_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800581e:	e015      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005824:	3328      	adds	r3, #40	@ 0x28
 8005826:	2102      	movs	r1, #2
 8005828:	4618      	mov	r0, r3
 800582a:	f001 fd67 	bl	80072fc <RCCEx_PLL3_Config>
 800582e:	4603      	mov	r3, r0
 8005830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005834:	e00a      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800583c:	e006      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800583e:	bf00      	nop
 8005840:	e004      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005842:	bf00      	nop
 8005844:	e002      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800584a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005854:	4ba1      	ldr	r3, [pc, #644]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800585c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005860:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005864:	4a9d      	ldr	r2, [pc, #628]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005866:	430b      	orrs	r3, r1
 8005868:	6593      	str	r3, [r2, #88]	@ 0x58
 800586a:	e003      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f002 0308 	and.w	r3, r2, #8
 8005880:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005884:	2300      	movs	r3, #0
 8005886:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800588a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800588e:	460b      	mov	r3, r1
 8005890:	4313      	orrs	r3, r2
 8005892:	d01e      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800589c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a0:	d10c      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a6:	3328      	adds	r3, #40	@ 0x28
 80058a8:	2102      	movs	r1, #2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f001 fd26 	bl	80072fc <RCCEx_PLL3_Config>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80058bc:	4b87      	ldr	r3, [pc, #540]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058cc:	4a83      	ldr	r2, [pc, #524]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ce:	430b      	orrs	r3, r1
 80058d0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f002 0310 	and.w	r3, r2, #16
 80058de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058e2:	2300      	movs	r3, #0
 80058e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80058ec:	460b      	mov	r3, r1
 80058ee:	4313      	orrs	r3, r2
 80058f0:	d01e      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80058f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058fe:	d10c      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005904:	3328      	adds	r3, #40	@ 0x28
 8005906:	2102      	movs	r1, #2
 8005908:	4618      	mov	r0, r3
 800590a:	f001 fcf7 	bl	80072fc <RCCEx_PLL3_Config>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800591a:	4b70      	ldr	r3, [pc, #448]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800591c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005926:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800592a:	4a6c      	ldr	r2, [pc, #432]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800592c:	430b      	orrs	r3, r1
 800592e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800593c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005940:	2300      	movs	r3, #0
 8005942:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005946:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800594a:	460b      	mov	r3, r1
 800594c:	4313      	orrs	r3, r2
 800594e:	d03e      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005954:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800595c:	d022      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800595e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005962:	d81b      	bhi.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800596c:	d00b      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800596e:	e015      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005974:	3308      	adds	r3, #8
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f001 fc0d 	bl	8007198 <RCCEx_PLL2_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005984:	e00f      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598a:	3328      	adds	r3, #40	@ 0x28
 800598c:	2102      	movs	r1, #2
 800598e:	4618      	mov	r0, r3
 8005990:	f001 fcb4 	bl	80072fc <RCCEx_PLL3_Config>
 8005994:	4603      	mov	r3, r0
 8005996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800599a:	e004      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059a2:	e000      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80059a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059ae:	4b4b      	ldr	r3, [pc, #300]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059be:	4a47      	ldr	r2, [pc, #284]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059c4:	e003      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059dc:	2300      	movs	r3, #0
 80059de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80059e4:	460b      	mov	r3, r1
 80059e6:	4313      	orrs	r3, r2
 80059e8:	d03b      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059f6:	d01f      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80059f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059fc:	d818      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80059fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a02:	d003      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a08:	d007      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005a0a:	e011      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0c:	4b33      	ldr	r3, [pc, #204]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	4a32      	ldr	r2, [pc, #200]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a18:	e00f      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1e:	3328      	adds	r3, #40	@ 0x28
 8005a20:	2101      	movs	r1, #1
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 fc6a 	bl	80072fc <RCCEx_PLL3_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a2e:	e004      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a36:	e000      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a42:	4b26      	ldr	r3, [pc, #152]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a52:	4a22      	ldr	r2, [pc, #136]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a54:	430b      	orrs	r3, r1
 8005a56:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a58:	e003      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a70:	2300      	movs	r3, #0
 8005a72:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d034      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a8c:	d007      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005a8e:	e011      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a90:	4b12      	ldr	r3, [pc, #72]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a94:	4a11      	ldr	r2, [pc, #68]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a9c:	e00e      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 fb76 	bl	8007198 <RCCEx_PLL2_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ab2:	e003      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10d      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ac8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad2:	4a02      	ldr	r2, [pc, #8]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ad8:	e006      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005ada:	bf00      	nop
 8005adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005af4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005af6:	2300      	movs	r3, #0
 8005af8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005afa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005afe:	460b      	mov	r3, r1
 8005b00:	4313      	orrs	r3, r2
 8005b02:	d00c      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b08:	3328      	adds	r3, #40	@ 0x28
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 fbf5 	bl	80072fc <RCCEx_PLL3_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005b2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b34:	460b      	mov	r3, r1
 8005b36:	4313      	orrs	r3, r2
 8005b38:	d038      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b46:	d018      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b4c:	d811      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b52:	d014      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b58:	d80b      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d011      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b62:	d106      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b64:	4bc3      	ldr	r3, [pc, #780]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b68:	4ac2      	ldr	r2, [pc, #776]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b70:	e008      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b78:	e004      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b7a:	bf00      	nop
 8005b7c:	e002      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b7e:	bf00      	nop
 8005b80:	e000      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b8c:	4bb9      	ldr	r3, [pc, #740]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9c:	4ab5      	ldr	r2, [pc, #724]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ba2:	e003      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bba:	2300      	movs	r3, #0
 8005bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bbe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bc8:	4baa      	ldr	r3, [pc, #680]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bcc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd6:	4aa7      	ldr	r2, [pc, #668]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005be8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bea:	2300      	movs	r3, #0
 8005bec:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	d00a      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005bf8:	4b9e      	ldr	r3, [pc, #632]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c08:	4a9a      	ldr	r2, [pc, #616]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c24:	460b      	mov	r3, r1
 8005c26:	4313      	orrs	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c2a:	4b92      	ldr	r3, [pc, #584]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c38:	4a8e      	ldr	r2, [pc, #568]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005c4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c54:	460b      	mov	r3, r1
 8005c56:	4313      	orrs	r3, r2
 8005c58:	d00e      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c5a:	4b86      	ldr	r3, [pc, #536]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	4a85      	ldr	r2, [pc, #532]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c64:	6113      	str	r3, [r2, #16]
 8005c66:	4b83      	ldr	r3, [pc, #524]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c68:	6919      	ldr	r1, [r3, #16]
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c72:	4a80      	ldr	r2, [pc, #512]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c74:	430b      	orrs	r3, r1
 8005c76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005c84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c86:	2300      	movs	r3, #0
 8005c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d009      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c94:	4b77      	ldr	r3, [pc, #476]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca2:	4a74      	ldr	r2, [pc, #464]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	d00a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd4:	4a67      	ldr	r2, [pc, #412]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cd6:	430b      	orrs	r3, r1
 8005cd8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	d011      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 fa4a 	bl	8007198 <RCCEx_PLL2_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	2100      	movs	r1, #0
 8005d24:	6239      	str	r1, [r7, #32]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d30:	460b      	mov	r3, r1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	d011      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 fa2a 	bl	8007198 <RCCEx_PLL2_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	2100      	movs	r1, #0
 8005d64:	61b9      	str	r1, [r7, #24]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	61fb      	str	r3, [r7, #28]
 8005d6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d70:	460b      	mov	r3, r1
 8005d72:	4313      	orrs	r3, r2
 8005d74:	d011      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	2102      	movs	r1, #2
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 fa0a 	bl	8007198 <RCCEx_PLL2_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	2100      	movs	r1, #0
 8005da4:	6139      	str	r1, [r7, #16]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005db0:	460b      	mov	r3, r1
 8005db2:	4313      	orrs	r3, r2
 8005db4:	d011      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dba:	3328      	adds	r3, #40	@ 0x28
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 fa9c 	bl	80072fc <RCCEx_PLL3_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	2100      	movs	r1, #0
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005df0:	460b      	mov	r3, r1
 8005df2:	4313      	orrs	r3, r2
 8005df4:	d011      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfa:	3328      	adds	r3, #40	@ 0x28
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 fa7c 	bl	80072fc <RCCEx_PLL3_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	2100      	movs	r1, #0
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e30:	460b      	mov	r3, r1
 8005e32:	4313      	orrs	r3, r2
 8005e34:	d011      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3a:	3328      	adds	r3, #40	@ 0x28
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 fa5c 	bl	80072fc <RCCEx_PLL3_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005e5a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e000      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e74:	58024400 	.word	0x58024400

08005e78 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b090      	sub	sp, #64	@ 0x40
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e86:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	f040 8094 	bne.w	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005e90:	4b9e      	ldr	r3, [pc, #632]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	f200 8087 	bhi.w	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005ebd 	.word	0x08005ebd
 8005eac:	08005ee5 	.word	0x08005ee5
 8005eb0:	08005f0d 	.word	0x08005f0d
 8005eb4:	08005fa9 	.word	0x08005fa9
 8005eb8:	08005f35 	.word	0x08005f35
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ebc:	4b93      	ldr	r3, [pc, #588]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ec4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ec8:	d108      	bne.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 f810 	bl	8006ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ed8:	f000 bd45 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee0:	f000 bd41 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ee4:	4b89      	ldr	r3, [pc, #548]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ef0:	d108      	bne.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ef2:	f107 0318 	add.w	r3, r7, #24
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fd54 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f00:	f000 bd31 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f08:	f000 bd2d 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f0c:	4b7f      	ldr	r3, [pc, #508]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f18:	d108      	bne.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fe94 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f28:	f000 bd1d 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f30:	f000 bd19 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f34:	4b75      	ldr	r3, [pc, #468]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f3c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f3e:	4b73      	ldr	r3, [pc, #460]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d10c      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f50:	4b6e      	ldr	r3, [pc, #440]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	08db      	lsrs	r3, r3, #3
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	4a6d      	ldr	r2, [pc, #436]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f62:	e01f      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f64:	4b69      	ldr	r3, [pc, #420]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f70:	d106      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f78:	d102      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f7a:	4b66      	ldr	r3, [pc, #408]	@ (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f7e:	e011      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f80:	4b62      	ldr	r3, [pc, #392]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f8c:	d106      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f94:	d102      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f96:	4b60      	ldr	r3, [pc, #384]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f9a:	e003      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005fa0:	f000 bce1 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005fa4:	f000 bcdf 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fa8:	4b5c      	ldr	r3, [pc, #368]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fac:	f000 bcdb 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fb4:	f000 bcd7 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fbc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	f040 80ad 	bne.w	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005fc6:	4b51      	ldr	r3, [pc, #324]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005fce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd6:	d056      	beq.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fde:	f200 8090 	bhi.w	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fe6:	f000 8088 	beq.w	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fee:	f200 8088 	bhi.w	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	2b80      	cmp	r3, #128	@ 0x80
 8005ff6:	d032      	beq.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	2b80      	cmp	r3, #128	@ 0x80
 8005ffc:	f200 8081 	bhi.w	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006008:	2b40      	cmp	r3, #64	@ 0x40
 800600a:	d014      	beq.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800600c:	e079      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800600e:	4b3f      	ldr	r3, [pc, #252]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006016:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800601a:	d108      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800601c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006020:	4618      	mov	r0, r3
 8006022:	f000 ff67 	bl	8006ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800602a:	f000 bc9c 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006032:	f000 bc98 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006036:	4b35      	ldr	r3, [pc, #212]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800603e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006042:	d108      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006044:	f107 0318 	add.w	r3, r7, #24
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fcab 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006052:	f000 bc88 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800605a:	f000 bc84 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800605e:	4b2b      	ldr	r3, [pc, #172]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800606a:	d108      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800606c:	f107 030c 	add.w	r3, r7, #12
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fdeb 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800607a:	f000 bc74 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006082:	f000 bc70 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006086:	4b21      	ldr	r3, [pc, #132]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800608e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006090:	4b1e      	ldr	r3, [pc, #120]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b04      	cmp	r3, #4
 800609a:	d10c      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800609c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d109      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060a2:	4b1a      	ldr	r3, [pc, #104]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	08db      	lsrs	r3, r3, #3
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	4a18      	ldr	r2, [pc, #96]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80060ae:	fa22 f303 	lsr.w	r3, r2, r3
 80060b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060b4:	e01f      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060b6:	4b15      	ldr	r3, [pc, #84]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060c2:	d106      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80060c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ca:	d102      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060cc:	4b11      	ldr	r3, [pc, #68]	@ (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80060ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060d0:	e011      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060d2:	4b0e      	ldr	r3, [pc, #56]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060de:	d106      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80060e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060e6:	d102      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80060ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060ec:	e003      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80060f2:	f000 bc38 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80060f6:	f000 bc36 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80060fa:	4b08      	ldr	r3, [pc, #32]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80060fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060fe:	f000 bc32 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006106:	f000 bc2e 	b.w	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800610a:	bf00      	nop
 800610c:	58024400 	.word	0x58024400
 8006110:	03d09000 	.word	0x03d09000
 8006114:	003d0900 	.word	0x003d0900
 8006118:	017d7840 	.word	0x017d7840
 800611c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006124:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006128:	430b      	orrs	r3, r1
 800612a:	f040 809c 	bne.w	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800612e:	4b9e      	ldr	r3, [pc, #632]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006132:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006136:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800613e:	d054      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006146:	f200 808b 	bhi.w	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006150:	f000 8083 	beq.w	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800615a:	f200 8081 	bhi.w	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006160:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006164:	d02f      	beq.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800616c:	d878      	bhi.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800617a:	d012      	beq.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800617c:	e070      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800617e:	4b8a      	ldr	r3, [pc, #552]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800618a:	d107      	bne.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800618c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006190:	4618      	mov	r0, r3
 8006192:	f000 feaf 	bl	8006ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800619a:	e3e4      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a0:	e3e1      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061a2:	4b81      	ldr	r3, [pc, #516]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ae:	d107      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061b0:	f107 0318 	add.w	r3, r7, #24
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fbf5 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061be:	e3d2      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c4:	e3cf      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061c6:	4b78      	ldr	r3, [pc, #480]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061d2:	d107      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061d4:	f107 030c 	add.w	r3, r7, #12
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fd37 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061e2:	e3c0      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e8:	e3bd      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80061ea:	4b6f      	ldr	r3, [pc, #444]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80061ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80061f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061f4:	4b6c      	ldr	r3, [pc, #432]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d10c      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006206:	4b68      	ldr	r3, [pc, #416]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	08db      	lsrs	r3, r3, #3
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	4a66      	ldr	r2, [pc, #408]	@ (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006212:	fa22 f303 	lsr.w	r3, r2, r3
 8006216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006218:	e01e      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800621a:	4b63      	ldr	r3, [pc, #396]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006226:	d106      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800622e:	d102      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006230:	4b5f      	ldr	r3, [pc, #380]	@ (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006234:	e010      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006236:	4b5c      	ldr	r3, [pc, #368]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006242:	d106      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800624a:	d102      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800624c:	4b59      	ldr	r3, [pc, #356]	@ (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006250:	e002      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006256:	e386      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006258:	e385      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800625a:	4b57      	ldr	r3, [pc, #348]	@ (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800625c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800625e:	e382      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006264:	e37f      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800626e:	430b      	orrs	r3, r1
 8006270:	f040 80a7 	bne.w	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006274:	4b4c      	ldr	r3, [pc, #304]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006278:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800627c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006284:	d055      	beq.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800628c:	f200 8096 	bhi.w	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006292:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006296:	f000 8084 	beq.w	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062a0:	f200 808c 	bhi.w	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062aa:	d030      	beq.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80062ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062b2:	f200 8083 	bhi.w	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d004      	beq.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062c2:	d012      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80062c4:	e07a      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062c6:	4b38      	ldr	r3, [pc, #224]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062d2:	d107      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fe0b 	bl	8006ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062e2:	e340      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062e8:	e33d      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062ea:	4b2f      	ldr	r3, [pc, #188]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062f6:	d107      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f8:	f107 0318 	add.w	r3, r7, #24
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fb51 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006306:	e32e      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800630c:	e32b      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800630e:	4b26      	ldr	r3, [pc, #152]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800631a:	d107      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800631c:	f107 030c 	add.w	r3, r7, #12
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fc93 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800632a:	e31c      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006330:	e319      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006332:	4b1d      	ldr	r3, [pc, #116]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006336:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800633a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800633c:	4b1a      	ldr	r3, [pc, #104]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b04      	cmp	r3, #4
 8006346:	d10c      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800634e:	4b16      	ldr	r3, [pc, #88]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	08db      	lsrs	r3, r3, #3
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	4a14      	ldr	r2, [pc, #80]	@ (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800635a:	fa22 f303 	lsr.w	r3, r2, r3
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006360:	e01e      	b.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006362:	4b11      	ldr	r3, [pc, #68]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800636e:	d106      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006376:	d102      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006378:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800637a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800637c:	e010      	b.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800637e:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800638a:	d106      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800638c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006392:	d102      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006394:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006398:	e002      	b.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800639e:	e2e2      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063a0:	e2e1      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063a2:	4b05      	ldr	r3, [pc, #20]	@ (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80063a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063a6:	e2de      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063a8:	58024400 	.word	0x58024400
 80063ac:	03d09000 	.word	0x03d09000
 80063b0:	003d0900 	.word	0x003d0900
 80063b4:	017d7840 	.word	0x017d7840
 80063b8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c0:	e2d1      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80063c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80063ca:	430b      	orrs	r3, r1
 80063cc:	f040 809c 	bne.w	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80063d0:	4b93      	ldr	r3, [pc, #588]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80063d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80063da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e0:	d054      	beq.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80063e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e8:	f200 808b 	bhi.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80063ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063f2:	f000 8083 	beq.w	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063fc:	f200 8081 	bhi.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006406:	d02f      	beq.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800640e:	d878      	bhi.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800641c:	d012      	beq.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800641e:	e070      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006420:	4b7f      	ldr	r3, [pc, #508]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800642c:	d107      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800642e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fd5e 	bl	8006ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800643c:	e293      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006442:	e290      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006444:	4b76      	ldr	r3, [pc, #472]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800644c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006450:	d107      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006452:	f107 0318 	add.w	r3, r7, #24
 8006456:	4618      	mov	r0, r3
 8006458:	f000 faa4 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006460:	e281      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006466:	e27e      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006468:	4b6d      	ldr	r3, [pc, #436]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006474:	d107      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006476:	f107 030c 	add.w	r3, r7, #12
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fbe6 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006484:	e26f      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800648a:	e26c      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800648c:	4b64      	ldr	r3, [pc, #400]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800648e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006490:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006496:	4b62      	ldr	r3, [pc, #392]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d10c      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80064a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d109      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064a8:	4b5d      	ldr	r3, [pc, #372]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	08db      	lsrs	r3, r3, #3
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	4a5c      	ldr	r2, [pc, #368]	@ (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
 80064b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ba:	e01e      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064bc:	4b58      	ldr	r3, [pc, #352]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064c8:	d106      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80064ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064d0:	d102      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064d2:	4b55      	ldr	r3, [pc, #340]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80064d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064d6:	e010      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064d8:	4b51      	ldr	r3, [pc, #324]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064e4:	d106      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80064e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064ec:	d102      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80064ee:	4b4f      	ldr	r3, [pc, #316]	@ (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f2:	e002      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80064f8:	e235      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80064fa:	e234      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80064fc:	4b4c      	ldr	r3, [pc, #304]	@ (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006500:	e231      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006506:	e22e      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006510:	430b      	orrs	r3, r1
 8006512:	f040 808f 	bne.w	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006516:	4b42      	ldr	r3, [pc, #264]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800651a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800651e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006522:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006526:	d06b      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800652e:	d874      	bhi.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006532:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006536:	d056      	beq.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800653e:	d86c      	bhi.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006542:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006546:	d03b      	beq.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800654e:	d864      	bhi.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006556:	d021      	beq.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800655e:	d85c      	bhi.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800656c:	d004      	beq.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800656e:	e054      	b.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006570:	f7fe fa30 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8006574:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006576:	e1f6      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006578:	4b29      	ldr	r3, [pc, #164]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006580:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006584:	d107      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006586:	f107 0318 	add.w	r3, r7, #24
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fa0a 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006594:	e1e7      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800659a:	e1e4      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800659c:	4b20      	ldr	r3, [pc, #128]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065a8:	d107      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065aa:	f107 030c 	add.w	r3, r7, #12
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fb4c 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065b8:	e1d5      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065be:	e1d2      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c0:	4b17      	ldr	r3, [pc, #92]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d109      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065cc:	4b14      	ldr	r3, [pc, #80]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	08db      	lsrs	r3, r3, #3
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	4a13      	ldr	r2, [pc, #76]	@ (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80065d8:	fa22 f303 	lsr.w	r3, r2, r3
 80065dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065de:	e1c2      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e4:	e1bf      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80065e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065f2:	d102      	bne.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80065f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80065f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065f8:	e1b5      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065fe:	e1b2      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006600:	4b07      	ldr	r3, [pc, #28]	@ (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006608:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800660c:	d102      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800660e:	4b07      	ldr	r3, [pc, #28]	@ (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006612:	e1a8      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006618:	e1a5      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661e:	e1a2      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006620:	58024400 	.word	0x58024400
 8006624:	03d09000 	.word	0x03d09000
 8006628:	003d0900 	.word	0x003d0900
 800662c:	017d7840 	.word	0x017d7840
 8006630:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006638:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800663c:	430b      	orrs	r3, r1
 800663e:	d173      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006640:	4b9c      	ldr	r3, [pc, #624]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006648:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006650:	d02f      	beq.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006658:	d863      	bhi.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006666:	d012      	beq.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006668:	e05b      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800666a:	4b92      	ldr	r3, [pc, #584]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006672:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006676:	d107      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006678:	f107 0318 	add.w	r3, r7, #24
 800667c:	4618      	mov	r0, r3
 800667e:	f000 f991 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006686:	e16e      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800668c:	e16b      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800668e:	4b89      	ldr	r3, [pc, #548]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800669a:	d107      	bne.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800669c:	f107 030c 	add.w	r3, r7, #12
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fad3 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066aa:	e15c      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066b0:	e159      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066b2:	4b80      	ldr	r3, [pc, #512]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066bc:	4b7d      	ldr	r3, [pc, #500]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d10c      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80066c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d109      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066ce:	4b79      	ldr	r3, [pc, #484]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	08db      	lsrs	r3, r3, #3
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	4a77      	ldr	r2, [pc, #476]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80066da:	fa22 f303 	lsr.w	r3, r2, r3
 80066de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e0:	e01e      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066e2:	4b74      	ldr	r3, [pc, #464]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ee:	d106      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80066f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066f6:	d102      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066f8:	4b70      	ldr	r3, [pc, #448]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80066fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066fc:	e010      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066fe:	4b6d      	ldr	r3, [pc, #436]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800670a:	d106      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800670c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006712:	d102      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006714:	4b6a      	ldr	r3, [pc, #424]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006718:	e002      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800671e:	e122      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006720:	e121      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006726:	e11e      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006730:	430b      	orrs	r3, r1
 8006732:	d133      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006734:	4b5f      	ldr	r3, [pc, #380]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800673c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800673e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674a:	d012      	beq.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800674c:	e023      	b.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800674e:	4b59      	ldr	r3, [pc, #356]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006756:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800675a:	d107      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800675c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fbc7 	bl	8006ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800676a:	e0fc      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006770:	e0f9      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006772:	4b50      	ldr	r3, [pc, #320]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800677a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800677e:	d107      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006780:	f107 0318 	add.w	r3, r7, #24
 8006784:	4618      	mov	r0, r3
 8006786:	f000 f90d 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800678e:	e0ea      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006794:	e0e7      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800679a:	e0e4      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800679c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80067a4:	430b      	orrs	r3, r1
 80067a6:	f040 808d 	bne.w	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80067aa:	4b42      	ldr	r3, [pc, #264]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80067b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067ba:	d06b      	beq.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80067bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067c2:	d874      	bhi.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80067c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ca:	d056      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80067cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d2:	d86c      	bhi.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80067d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067da:	d03b      	beq.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80067dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067e2:	d864      	bhi.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ea:	d021      	beq.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80067ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067f2:	d85c      	bhi.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80067f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006800:	d004      	beq.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006802:	e054      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006804:	f000 f8b8 	bl	8006978 <HAL_RCCEx_GetD3PCLK1Freq>
 8006808:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800680a:	e0ac      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800680c:	4b29      	ldr	r3, [pc, #164]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006814:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006818:	d107      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800681a:	f107 0318 	add.w	r3, r7, #24
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f8c0 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006828:	e09d      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800682e:	e09a      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006830:	4b20      	ldr	r3, [pc, #128]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800683c:	d107      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800683e:	f107 030c 	add.w	r3, r7, #12
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fa02 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800684c:	e08b      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006852:	e088      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006854:	4b17      	ldr	r3, [pc, #92]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b04      	cmp	r3, #4
 800685e:	d109      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006860:	4b14      	ldr	r3, [pc, #80]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	08db      	lsrs	r3, r3, #3
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	4a13      	ldr	r2, [pc, #76]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
 8006870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006872:	e078      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006878:	e075      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800687a:	4b0e      	ldr	r3, [pc, #56]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006886:	d102      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006888:	4b0c      	ldr	r3, [pc, #48]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800688a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800688c:	e06b      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006892:	e068      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006894:	4b07      	ldr	r3, [pc, #28]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800689c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068a0:	d102      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80068a2:	4b07      	ldr	r3, [pc, #28]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80068a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a6:	e05e      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ac:	e05b      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068b2:	e058      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068b4:	58024400 	.word	0x58024400
 80068b8:	03d09000 	.word	0x03d09000
 80068bc:	003d0900 	.word	0x003d0900
 80068c0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80068c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80068cc:	430b      	orrs	r3, r1
 80068ce:	d148      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80068d0:	4b27      	ldr	r3, [pc, #156]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80068d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80068da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e0:	d02a      	beq.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80068e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e8:	d838      	bhi.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80068ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80068f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068f6:	d00d      	beq.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80068f8:	e030      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006906:	d102      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006908:	4b1a      	ldr	r3, [pc, #104]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800690c:	e02b      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006912:	e028      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006914:	4b16      	ldr	r3, [pc, #88]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800691c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006920:	d107      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fae4 	bl	8006ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800692c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006930:	e019      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006936:	e016      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006938:	4b0d      	ldr	r3, [pc, #52]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006944:	d107      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006946:	f107 0318 	add.w	r3, r7, #24
 800694a:	4618      	mov	r0, r3
 800694c:	f000 f82a 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006954:	e007      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800695a:	e004      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006960:	e001      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006968:	4618      	mov	r0, r3
 800696a:	3740      	adds	r7, #64	@ 0x40
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	58024400 	.word	0x58024400
 8006974:	017d7840 	.word	0x017d7840

08006978 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800697c:	f7fd fffa 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 8006980:	4602      	mov	r2, r0
 8006982:	4b06      	ldr	r3, [pc, #24]	@ (800699c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	091b      	lsrs	r3, r3, #4
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	4904      	ldr	r1, [pc, #16]	@ (80069a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800698e:	5ccb      	ldrb	r3, [r1, r3]
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006998:	4618      	mov	r0, r3
 800699a:	bd80      	pop	{r7, pc}
 800699c:	58024400 	.word	0x58024400
 80069a0:	08013da4 	.word	0x08013da4

080069a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b089      	sub	sp, #36	@ 0x24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069ac:	4ba1      	ldr	r3, [pc, #644]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80069b6:	4b9f      	ldr	r3, [pc, #636]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ba:	0b1b      	lsrs	r3, r3, #12
 80069bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069c2:	4b9c      	ldr	r3, [pc, #624]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	091b      	lsrs	r3, r3, #4
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80069ce:	4b99      	ldr	r3, [pc, #612]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	fb02 f303 	mul.w	r3, r2, r3
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 8111 	beq.w	8006c14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	f000 8083 	beq.w	8006b00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	f200 80a1 	bhi.w	8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d056      	beq.n	8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a0e:	e099      	b.n	8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a10:	4b88      	ldr	r3, [pc, #544]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d02d      	beq.n	8006a78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a1c:	4b85      	ldr	r3, [pc, #532]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	08db      	lsrs	r3, r3, #3
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	4a84      	ldr	r2, [pc, #528]	@ (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	ee07 3a90 	vmov	s15, r3
 8006a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a46:	4b7b      	ldr	r3, [pc, #492]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a76:	e087      	b.n	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aba:	e065      	b.n	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ace:	4b59      	ldr	r3, [pc, #356]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006afe:	e043      	b.n	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b12:	4b48      	ldr	r3, [pc, #288]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b42:	e021      	b.n	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b37      	ldr	r3, [pc, #220]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006b88:	4b2a      	ldr	r3, [pc, #168]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8c:	0a5b      	lsrs	r3, r3, #9
 8006b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bae:	ee17 2a90 	vmov	r2, s15
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bba:	0c1b      	lsrs	r3, r3, #16
 8006bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bc0:	ee07 3a90 	vmov	s15, r3
 8006bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bdc:	ee17 2a90 	vmov	r2, s15
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006be4:	4b13      	ldr	r3, [pc, #76]	@ (8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be8:	0e1b      	lsrs	r3, r3, #24
 8006bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0a:	ee17 2a90 	vmov	r2, s15
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c12:	e008      	b.n	8006c26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	609a      	str	r2, [r3, #8]
}
 8006c26:	bf00      	nop
 8006c28:	3724      	adds	r7, #36	@ 0x24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	58024400 	.word	0x58024400
 8006c38:	03d09000 	.word	0x03d09000
 8006c3c:	46000000 	.word	0x46000000
 8006c40:	4c742400 	.word	0x4c742400
 8006c44:	4a742400 	.word	0x4a742400
 8006c48:	4bbebc20 	.word	0x4bbebc20

08006c4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b089      	sub	sp, #36	@ 0x24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c54:	4ba1      	ldr	r3, [pc, #644]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006c5e:	4b9f      	ldr	r3, [pc, #636]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c62:	0d1b      	lsrs	r3, r3, #20
 8006c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c6a:	4b9c      	ldr	r3, [pc, #624]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	0a1b      	lsrs	r3, r3, #8
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006c76:	4b99      	ldr	r3, [pc, #612]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c7a:	08db      	lsrs	r3, r3, #3
 8006c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	fb02 f303 	mul.w	r3, r2, r3
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8111 	beq.w	8006ebc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	f000 8083 	beq.w	8006da8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	f200 80a1 	bhi.w	8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d056      	beq.n	8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006cb6:	e099      	b.n	8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cb8:	4b88      	ldr	r3, [pc, #544]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d02d      	beq.n	8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cc4:	4b85      	ldr	r3, [pc, #532]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	08db      	lsrs	r3, r3, #3
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	4a84      	ldr	r2, [pc, #528]	@ (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	ee07 3a90 	vmov	s15, r3
 8006cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cee:	4b7b      	ldr	r3, [pc, #492]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d1e:	e087      	b.n	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d32:	4b6a      	ldr	r3, [pc, #424]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d62:	e065      	b.n	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d76:	4b59      	ldr	r3, [pc, #356]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006da6:	e043      	b.n	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dba:	4b48      	ldr	r3, [pc, #288]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dea:	e021      	b.n	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b37      	ldr	r3, [pc, #220]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e30:	4b2a      	ldr	r3, [pc, #168]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	0a5b      	lsrs	r3, r3, #9
 8006e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e56:	ee17 2a90 	vmov	r2, s15
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e62:	0c1b      	lsrs	r3, r3, #16
 8006e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e68:	ee07 3a90 	vmov	s15, r3
 8006e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e84:	ee17 2a90 	vmov	r2, s15
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006e8c:	4b13      	ldr	r3, [pc, #76]	@ (8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e90:	0e1b      	lsrs	r3, r3, #24
 8006e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eb2:	ee17 2a90 	vmov	r2, s15
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006eba:	e008      	b.n	8006ece <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	609a      	str	r2, [r3, #8]
}
 8006ece:	bf00      	nop
 8006ed0:	3724      	adds	r7, #36	@ 0x24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	58024400 	.word	0x58024400
 8006ee0:	03d09000 	.word	0x03d09000
 8006ee4:	46000000 	.word	0x46000000
 8006ee8:	4c742400 	.word	0x4c742400
 8006eec:	4a742400 	.word	0x4a742400
 8006ef0:	4bbebc20 	.word	0x4bbebc20

08006ef4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b089      	sub	sp, #36	@ 0x24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006efc:	4ba0      	ldr	r3, [pc, #640]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006f06:	4b9e      	ldr	r3, [pc, #632]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f12:	4b9b      	ldr	r3, [pc, #620]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f1c:	4b98      	ldr	r3, [pc, #608]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f20:	08db      	lsrs	r3, r3, #3
 8006f22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	fb02 f303 	mul.w	r3, r2, r3
 8006f2c:	ee07 3a90 	vmov	s15, r3
 8006f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 8111 	beq.w	8007162 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	f000 8083 	beq.w	800704e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	f200 80a1 	bhi.w	8007092 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d056      	beq.n	800700a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006f5c:	e099      	b.n	8007092 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f5e:	4b88      	ldr	r3, [pc, #544]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d02d      	beq.n	8006fc6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f6a:	4b85      	ldr	r3, [pc, #532]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	08db      	lsrs	r3, r3, #3
 8006f70:	f003 0303 	and.w	r3, r3, #3
 8006f74:	4a83      	ldr	r2, [pc, #524]	@ (8007184 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006f76:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	ee07 3a90 	vmov	s15, r3
 8006f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f94:	4b7a      	ldr	r3, [pc, #488]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fa8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fc4:	e087      	b.n	80070d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	ee07 3a90 	vmov	s15, r3
 8006fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800718c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd8:	4b69      	ldr	r3, [pc, #420]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe0:	ee07 3a90 	vmov	s15, r3
 8006fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007008:	e065      	b.n	80070d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	ee07 3a90 	vmov	s15, r3
 8007010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007014:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007190 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701c:	4b58      	ldr	r3, [pc, #352]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800701e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007024:	ee07 3a90 	vmov	s15, r3
 8007028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007030:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007048:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800704c:	e043      	b.n	80070d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007058:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800705c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007060:	4b47      	ldr	r3, [pc, #284]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007068:	ee07 3a90 	vmov	s15, r3
 800706c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007070:	ed97 6a03 	vldr	s12, [r7, #12]
 8007074:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007090:	e021      	b.n	80070d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800718c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80070a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a4:	4b36      	ldr	r3, [pc, #216]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80070d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070da:	0a5b      	lsrs	r3, r3, #9
 80070dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070fc:	ee17 2a90 	vmov	r2, s15
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007104:	4b1e      	ldr	r3, [pc, #120]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007108:	0c1b      	lsrs	r3, r3, #16
 800710a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800711a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800711e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800712a:	ee17 2a90 	vmov	r2, s15
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007132:	4b13      	ldr	r3, [pc, #76]	@ (8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007136:	0e1b      	lsrs	r3, r3, #24
 8007138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007144:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800714c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007158:	ee17 2a90 	vmov	r2, s15
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007160:	e008      	b.n	8007174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	609a      	str	r2, [r3, #8]
}
 8007174:	bf00      	nop
 8007176:	3724      	adds	r7, #36	@ 0x24
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	58024400 	.word	0x58024400
 8007184:	03d09000 	.word	0x03d09000
 8007188:	46000000 	.word	0x46000000
 800718c:	4c742400 	.word	0x4c742400
 8007190:	4a742400 	.word	0x4a742400
 8007194:	4bbebc20 	.word	0x4bbebc20

08007198 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071a6:	4b53      	ldr	r3, [pc, #332]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80071a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d101      	bne.n	80071b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e099      	b.n	80072ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80071b6:	4b4f      	ldr	r3, [pc, #316]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a4e      	ldr	r2, [pc, #312]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80071bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071c2:	f7fa fc4f 	bl	8001a64 <HAL_GetTick>
 80071c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071c8:	e008      	b.n	80071dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071ca:	f7fa fc4b 	bl	8001a64 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d901      	bls.n	80071dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e086      	b.n	80072ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071dc:	4b45      	ldr	r3, [pc, #276]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1f0      	bne.n	80071ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80071e8:	4b42      	ldr	r3, [pc, #264]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80071ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	031b      	lsls	r3, r3, #12
 80071f6:	493f      	ldr	r1, [pc, #252]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	3b01      	subs	r3, #1
 8007202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	3b01      	subs	r3, #1
 800720c:	025b      	lsls	r3, r3, #9
 800720e:	b29b      	uxth	r3, r3
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	3b01      	subs	r3, #1
 8007218:	041b      	lsls	r3, r3, #16
 800721a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	3b01      	subs	r3, #1
 8007226:	061b      	lsls	r3, r3, #24
 8007228:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800722c:	4931      	ldr	r1, [pc, #196]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 800722e:	4313      	orrs	r3, r2
 8007230:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007232:	4b30      	ldr	r3, [pc, #192]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 8007234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007236:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	492d      	ldr	r1, [pc, #180]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 8007240:	4313      	orrs	r3, r2
 8007242:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007244:	4b2b      	ldr	r3, [pc, #172]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 8007246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007248:	f023 0220 	bic.w	r2, r3, #32
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	4928      	ldr	r1, [pc, #160]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 8007252:	4313      	orrs	r3, r2
 8007254:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007256:	4b27      	ldr	r3, [pc, #156]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 8007258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725a:	4a26      	ldr	r2, [pc, #152]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 800725c:	f023 0310 	bic.w	r3, r3, #16
 8007260:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007262:	4b24      	ldr	r3, [pc, #144]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 8007264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007266:	4b24      	ldr	r3, [pc, #144]	@ (80072f8 <RCCEx_PLL2_Config+0x160>)
 8007268:	4013      	ands	r3, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	69d2      	ldr	r2, [r2, #28]
 800726e:	00d2      	lsls	r2, r2, #3
 8007270:	4920      	ldr	r1, [pc, #128]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 8007272:	4313      	orrs	r3, r2
 8007274:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007276:	4b1f      	ldr	r3, [pc, #124]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	4a1e      	ldr	r2, [pc, #120]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 800727c:	f043 0310 	orr.w	r3, r3, #16
 8007280:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007288:	4b1a      	ldr	r3, [pc, #104]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	4a19      	ldr	r2, [pc, #100]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 800728e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007292:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007294:	e00f      	b.n	80072b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d106      	bne.n	80072aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800729c:	4b15      	ldr	r3, [pc, #84]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	4a14      	ldr	r2, [pc, #80]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80072a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072a8:	e005      	b.n	80072b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80072aa:	4b12      	ldr	r3, [pc, #72]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ae:	4a11      	ldr	r2, [pc, #68]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80072b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80072b6:	4b0f      	ldr	r3, [pc, #60]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a0e      	ldr	r2, [pc, #56]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80072bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c2:	f7fa fbcf 	bl	8001a64 <HAL_GetTick>
 80072c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072c8:	e008      	b.n	80072dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072ca:	f7fa fbcb 	bl	8001a64 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e006      	b.n	80072ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072dc:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <RCCEx_PLL2_Config+0x15c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f0      	beq.n	80072ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	58024400 	.word	0x58024400
 80072f8:	ffff0007 	.word	0xffff0007

080072fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800730a:	4b53      	ldr	r3, [pc, #332]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 800730c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	2b03      	cmp	r3, #3
 8007314:	d101      	bne.n	800731a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e099      	b.n	800744e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800731a:	4b4f      	ldr	r3, [pc, #316]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a4e      	ldr	r2, [pc, #312]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 8007320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007326:	f7fa fb9d 	bl	8001a64 <HAL_GetTick>
 800732a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800732c:	e008      	b.n	8007340 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800732e:	f7fa fb99 	bl	8001a64 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e086      	b.n	800744e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007340:	4b45      	ldr	r3, [pc, #276]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f0      	bne.n	800732e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800734c:	4b42      	ldr	r3, [pc, #264]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 800734e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007350:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	051b      	lsls	r3, r3, #20
 800735a:	493f      	ldr	r1, [pc, #252]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 800735c:	4313      	orrs	r3, r2
 800735e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	3b01      	subs	r3, #1
 8007366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	3b01      	subs	r3, #1
 8007370:	025b      	lsls	r3, r3, #9
 8007372:	b29b      	uxth	r3, r3
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	3b01      	subs	r3, #1
 800737c:	041b      	lsls	r3, r3, #16
 800737e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	3b01      	subs	r3, #1
 800738a:	061b      	lsls	r3, r3, #24
 800738c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007390:	4931      	ldr	r1, [pc, #196]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 8007392:	4313      	orrs	r3, r2
 8007394:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007396:	4b30      	ldr	r3, [pc, #192]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 8007398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	492d      	ldr	r1, [pc, #180]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80073a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	4928      	ldr	r1, [pc, #160]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80073ba:	4b27      	ldr	r3, [pc, #156]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073be:	4a26      	ldr	r2, [pc, #152]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073c6:	4b24      	ldr	r3, [pc, #144]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073ca:	4b24      	ldr	r3, [pc, #144]	@ (800745c <RCCEx_PLL3_Config+0x160>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	69d2      	ldr	r2, [r2, #28]
 80073d2:	00d2      	lsls	r2, r2, #3
 80073d4:	4920      	ldr	r1, [pc, #128]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80073da:	4b1f      	ldr	r3, [pc, #124]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	4a1e      	ldr	r2, [pc, #120]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d106      	bne.n	80073fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80073ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f0:	4a19      	ldr	r2, [pc, #100]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 80073f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80073f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073f8:	e00f      	b.n	800741a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d106      	bne.n	800740e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007400:	4b15      	ldr	r3, [pc, #84]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 8007402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007404:	4a14      	ldr	r2, [pc, #80]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 8007406:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800740a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800740c:	e005      	b.n	800741a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800740e:	4b12      	ldr	r3, [pc, #72]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 8007410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007412:	4a11      	ldr	r2, [pc, #68]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 8007414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007418:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800741a:	4b0f      	ldr	r3, [pc, #60]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a0e      	ldr	r2, [pc, #56]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 8007420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007426:	f7fa fb1d 	bl	8001a64 <HAL_GetTick>
 800742a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800742c:	e008      	b.n	8007440 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800742e:	f7fa fb19 	bl	8001a64 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d901      	bls.n	8007440 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e006      	b.n	800744e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007440:	4b05      	ldr	r3, [pc, #20]	@ (8007458 <RCCEx_PLL3_Config+0x15c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0f0      	beq.n	800742e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	58024400 	.word	0x58024400
 800745c:	ffff0007 	.word	0xffff0007

08007460 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	@ 0x28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e075      	b.n	800755e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d105      	bne.n	800748a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7f9 fe91 	bl	80011ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2204      	movs	r2, #4
 800748e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f868 	bl	8007568 <HAL_SD_InitCard>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e05d      	b.n	800755e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80074a2:	f107 0308 	add.w	r3, r7, #8
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fdb5 	bl	8008018 <HAL_SD_GetCardStatus>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e052      	b.n	800755e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80074b8:	7e3b      	ldrb	r3, [r7, #24]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80074be:	7e7b      	ldrb	r3, [r7, #25]
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d10a      	bne.n	80074e2 <HAL_SD_Init+0x82>
 80074cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <HAL_SD_Init+0x78>
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d004      	beq.n	80074e2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074de:	659a      	str	r2, [r3, #88]	@ 0x58
 80074e0:	e00b      	b.n	80074fa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d104      	bne.n	80074f4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80074f2:	e002      	b.n	80074fa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fe73 	bl	80081ec <HAL_SD_ConfigWideBusOperation>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e026      	b.n	800755e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007510:	f7fa faa8 	bl	8001a64 <HAL_GetTick>
 8007514:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007516:	e011      	b.n	800753c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007518:	f7fa faa4 	bl	8001a64 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d109      	bne.n	800753c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800752e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e010      	b.n	800755e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 ff67 	bl	8008410 <HAL_SD_GetCardState>
 8007542:	4603      	mov	r3, r0
 8007544:	2b04      	cmp	r3, #4
 8007546:	d1e7      	bne.n	8007518 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3728      	adds	r7, #40	@ 0x28
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007568:	b590      	push	{r4, r7, lr}
 800756a:	b08d      	sub	sp, #52	@ 0x34
 800756c:	af02      	add	r7, sp, #8
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007574:	2300      	movs	r3, #0
 8007576:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800757c:	2300      	movs	r3, #0
 800757e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007580:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007584:	f04f 0100 	mov.w	r1, #0
 8007588:	f7fe fc76 	bl	8005e78 <HAL_RCCEx_GetPeriphCLKFreq>
 800758c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	d109      	bne.n	80075a8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80075a2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e070      	b.n	800768a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80075a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075aa:	0a1b      	lsrs	r3, r3, #8
 80075ac:	4a39      	ldr	r2, [pc, #228]	@ (8007694 <HAL_SD_InitCard+0x12c>)
 80075ae:	fba2 2303 	umull	r2, r3, r2, r3
 80075b2:	091b      	lsrs	r3, r3, #4
 80075b4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681c      	ldr	r4, [r3, #0]
 80075ba:	466a      	mov	r2, sp
 80075bc:	f107 0318 	add.w	r3, r7, #24
 80075c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80075c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80075c8:	f107 030c 	add.w	r3, r7, #12
 80075cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075ce:	4620      	mov	r0, r4
 80075d0:	f003 fc88 	bl	800aee4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f003 fccb 	bl	800af74 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d005      	beq.n	80075f0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d007      	beq.n	8007606 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80075f6:	4a28      	ldr	r2, [pc, #160]	@ (8007698 <HAL_SD_InitCard+0x130>)
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fe:	3301      	adds	r3, #1
 8007600:	4618      	mov	r0, r3
 8007602:	f7fa fa3b 	bl	8001a7c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fff0 	bl	80085ec <SD_PowerON>
 800760c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e02e      	b.n	800768a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 ff0f 	bl	8008450 <SD_InitCard>
 8007632:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00b      	beq.n	8007652 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e01b      	b.n	800768a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800765a:	4618      	mov	r0, r3
 800765c:	f003 fd20 	bl	800b0a0 <SDMMC_CmdBlockLength>
 8007660:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00f      	beq.n	8007688 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a0b      	ldr	r2, [pc, #44]	@ (800769c <HAL_SD_InitCard+0x134>)
 800766e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	372c      	adds	r7, #44	@ 0x2c
 800768e:	46bd      	mov	sp, r7
 8007690:	bd90      	pop	{r4, r7, pc}
 8007692:	bf00      	nop
 8007694:	014f8b59 	.word	0x014f8b59
 8007698:	00012110 	.word	0x00012110
 800769c:	1fe00fff 	.word	0x1fe00fff

080076a0 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b092      	sub	sp, #72	@ 0x48
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80076ae:	f7fa f9d9 	bl	8001a64 <HAL_GetTick>
 80076b2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d107      	bne.n	80076d2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e167      	b.n	80079a2 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b01      	cmp	r3, #1
 80076dc:	f040 815a 	bne.w	8007994 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80076e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	441a      	add	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d907      	bls.n	8007704 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076f8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e14e      	b.n	80079a2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2203      	movs	r2, #3
 8007708:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2200      	movs	r2, #0
 8007712:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007718:	2b01      	cmp	r3, #1
 800771a:	d002      	beq.n	8007722 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	025b      	lsls	r3, r3, #9
 8007720:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	025b      	lsls	r3, r3, #9
 800772c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800772e:	2390      	movs	r3, #144	@ 0x90
 8007730:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007732:	2302      	movs	r3, #2
 8007734:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007736:	2300      	movs	r3, #0
 8007738:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800773a:	2300      	movs	r3, #0
 800773c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f107 0214 	add.w	r2, r7, #20
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f003 fc7d 	bl	800b048 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800775c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d90a      	bls.n	800777a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2202      	movs	r2, #2
 8007768:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007770:	4618      	mov	r0, r3
 8007772:	f003 fcdb 	bl	800b12c <SDMMC_CmdReadMultiBlock>
 8007776:	6478      	str	r0, [r7, #68]	@ 0x44
 8007778:	e009      	b.n	800778e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007786:	4618      	mov	r0, r3
 8007788:	f003 fcad 	bl	800b0e6 <SDMMC_CmdReadSingleBlock>
 800778c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800778e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007790:	2b00      	cmp	r3, #0
 8007792:	d012      	beq.n	80077ba <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a84      	ldr	r2, [pc, #528]	@ (80079ac <HAL_SD_ReadBlocks+0x30c>)
 800779a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077a2:	431a      	orrs	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e0f3      	b.n	80079a2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80077be:	e058      	b.n	8007872 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d033      	beq.n	8007836 <HAL_SD_ReadBlocks+0x196>
 80077ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077d0:	2b1f      	cmp	r3, #31
 80077d2:	d930      	bls.n	8007836 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 80077d4:	2300      	movs	r3, #0
 80077d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80077d8:	e027      	b.n	800782a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4618      	mov	r0, r3
 80077e0:	f003 fbaa 	bl	800af38 <SDMMC_ReadFIFO>
 80077e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80077e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80077ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f0:	3301      	adds	r3, #1
 80077f2:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80077f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f6:	0a1b      	lsrs	r3, r3, #8
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80077fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007800:	3301      	adds	r3, #1
 8007802:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007806:	0c1b      	lsrs	r3, r3, #16
 8007808:	b2da      	uxtb	r2, r3
 800780a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800780e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007810:	3301      	adds	r3, #1
 8007812:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007816:	0e1b      	lsrs	r3, r3, #24
 8007818:	b2da      	uxtb	r2, r3
 800781a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800781e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007820:	3301      	adds	r3, #1
 8007822:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8007824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007826:	3301      	adds	r3, #1
 8007828:	643b      	str	r3, [r7, #64]	@ 0x40
 800782a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800782c:	2b07      	cmp	r3, #7
 800782e:	d9d4      	bls.n	80077da <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007832:	3b20      	subs	r3, #32
 8007834:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007836:	f7fa f915 	bl	8001a64 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007842:	429a      	cmp	r2, r3
 8007844:	d902      	bls.n	800784c <HAL_SD_ReadBlocks+0x1ac>
 8007846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007848:	2b00      	cmp	r3, #0
 800784a:	d112      	bne.n	8007872 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a56      	ldr	r2, [pc, #344]	@ (80079ac <HAL_SD_ReadBlocks+0x30c>)
 8007852:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007858:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e097      	b.n	80079a2 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007878:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800787c:	2b00      	cmp	r3, #0
 800787e:	d09f      	beq.n	80077c0 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800788e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800789a:	2b00      	cmp	r3, #0
 800789c:	d022      	beq.n	80078e4 <HAL_SD_ReadBlocks+0x244>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d91f      	bls.n	80078e4 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d01b      	beq.n	80078e4 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f003 fca5 	bl	800b200 <SDMMC_CmdStopTransfer>
 80078b6:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80078b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d012      	beq.n	80078e4 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a3a      	ldr	r2, [pc, #232]	@ (80079ac <HAL_SD_ReadBlocks+0x30c>)
 80078c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078cc:	431a      	orrs	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e05e      	b.n	80079a2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d012      	beq.n	8007918 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a2d      	ldr	r2, [pc, #180]	@ (80079ac <HAL_SD_ReadBlocks+0x30c>)
 80078f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078fe:	f043 0208 	orr.w	r2, r3, #8
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e044      	b.n	80079a2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d012      	beq.n	800794c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a20      	ldr	r2, [pc, #128]	@ (80079ac <HAL_SD_ReadBlocks+0x30c>)
 800792c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007932:	f043 0202 	orr.w	r2, r3, #2
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e02a      	b.n	80079a2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d012      	beq.n	8007980 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a13      	ldr	r2, [pc, #76]	@ (80079ac <HAL_SD_ReadBlocks+0x30c>)
 8007960:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007966:	f043 0220 	orr.w	r2, r3, #32
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e010      	b.n	80079a2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a0a      	ldr	r2, [pc, #40]	@ (80079b0 <HAL_SD_ReadBlocks+0x310>)
 8007986:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	e006      	b.n	80079a2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007998:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
  }
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3748      	adds	r7, #72	@ 0x48
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	1fe00fff 	.word	0x1fe00fff
 80079b0:	18000f3a 	.word	0x18000f3a

080079b4 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b092      	sub	sp, #72	@ 0x48
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80079c2:	f7fa f84f 	bl	8001a64 <HAL_GetTick>
 80079c6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d107      	bne.n	80079e6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e16b      	b.n	8007cbe <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	f040 815e 	bne.w	8007cb0 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	441a      	add	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d907      	bls.n	8007a18 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e152      	b.n	8007cbe <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2200      	movs	r2, #0
 8007a26:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d002      	beq.n	8007a36 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	025b      	lsls	r3, r3, #9
 8007a34:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a36:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	025b      	lsls	r3, r3, #9
 8007a40:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a42:	2390      	movs	r3, #144	@ 0x90
 8007a44:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a46:	2300      	movs	r3, #0
 8007a48:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f107 0218 	add.w	r2, r7, #24
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f003 faf3 	bl	800b048 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a70:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d90a      	bls.n	8007a8e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a84:	4618      	mov	r0, r3
 8007a86:	f003 fb97 	bl	800b1b8 <SDMMC_CmdWriteMultiBlock>
 8007a8a:	6478      	str	r0, [r7, #68]	@ 0x44
 8007a8c:	e009      	b.n	8007aa2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2210      	movs	r2, #16
 8007a92:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f003 fb69 	bl	800b172 <SDMMC_CmdWriteSingleBlock>
 8007aa0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d012      	beq.n	8007ace <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a86      	ldr	r2, [pc, #536]	@ (8007cc8 <HAL_SD_WriteBlocks+0x314>)
 8007aae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e0f7      	b.n	8007cbe <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007ad2:	e05c      	b.n	8007b8e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d037      	beq.n	8007b52 <HAL_SD_WriteBlocks+0x19e>
 8007ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae4:	2b1f      	cmp	r3, #31
 8007ae6:	d934      	bls.n	8007b52 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aec:	e02b      	b.n	8007b46 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8007aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af6:	3301      	adds	r3, #1
 8007af8:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	021a      	lsls	r2, r3, #8
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b08:	3301      	adds	r3, #1
 8007b0a:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	041a      	lsls	r2, r3, #16
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	061a      	lsls	r2, r3, #24
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f107 0214 	add.w	r2, r7, #20
 8007b38:	4611      	mov	r1, r2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f003 fa09 	bl	800af52 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8007b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b42:	3301      	adds	r3, #1
 8007b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b48:	2b07      	cmp	r3, #7
 8007b4a:	d9d0      	bls.n	8007aee <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b4e:	3b20      	subs	r3, #32
 8007b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007b52:	f7f9 ff87 	bl	8001a64 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d902      	bls.n	8007b68 <HAL_SD_WriteBlocks+0x1b4>
 8007b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d112      	bne.n	8007b8e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a56      	ldr	r2, [pc, #344]	@ (8007cc8 <HAL_SD_WriteBlocks+0x314>)
 8007b6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b76:	431a      	orrs	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e097      	b.n	8007cbe <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b94:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d09b      	beq.n	8007ad4 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007baa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d022      	beq.n	8007c00 <HAL_SD_WriteBlocks+0x24c>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d91f      	bls.n	8007c00 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d01b      	beq.n	8007c00 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f003 fb17 	bl	800b200 <SDMMC_CmdStopTransfer>
 8007bd2:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d012      	beq.n	8007c00 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a3a      	ldr	r2, [pc, #232]	@ (8007cc8 <HAL_SD_WriteBlocks+0x314>)
 8007be0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be8:	431a      	orrs	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e05e      	b.n	8007cbe <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d012      	beq.n	8007c34 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a2d      	ldr	r2, [pc, #180]	@ (8007cc8 <HAL_SD_WriteBlocks+0x314>)
 8007c14:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c1a:	f043 0208 	orr.w	r2, r3, #8
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e044      	b.n	8007cbe <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d012      	beq.n	8007c68 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a20      	ldr	r2, [pc, #128]	@ (8007cc8 <HAL_SD_WriteBlocks+0x314>)
 8007c48:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4e:	f043 0202 	orr.w	r2, r3, #2
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e02a      	b.n	8007cbe <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c6e:	f003 0310 	and.w	r3, r3, #16
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d012      	beq.n	8007c9c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a13      	ldr	r2, [pc, #76]	@ (8007cc8 <HAL_SD_WriteBlocks+0x314>)
 8007c7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c82:	f043 0210 	orr.w	r2, r3, #16
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e010      	b.n	8007cbe <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ccc <HAL_SD_WriteBlocks+0x318>)
 8007ca2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	e006      	b.n	8007cbe <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cb4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
  }
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3748      	adds	r7, #72	@ 0x48
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	1fe00fff 	.word	0x1fe00fff
 8007ccc:	18000f3a 	.word	0x18000f3a

08007cd0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cde:	0f9b      	lsrs	r3, r3, #30
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cea:	0e9b      	lsrs	r3, r3, #26
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 030f 	and.w	r3, r3, #15
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cfc:	0e1b      	lsrs	r3, r3, #24
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d0e:	0c1b      	lsrs	r3, r3, #16
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d30:	0d1b      	lsrs	r3, r3, #20
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d3c:	0c1b      	lsrs	r3, r3, #16
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 030f 	and.w	r3, r3, #15
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d4e:	0bdb      	lsrs	r3, r3, #15
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d60:	0b9b      	lsrs	r3, r3, #14
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d72:	0b5b      	lsrs	r3, r3, #13
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d84:	0b1b      	lsrs	r3, r3, #12
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2200      	movs	r2, #0
 8007d96:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d163      	bne.n	8007e68 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007da4:	009a      	lsls	r2, r3, #2
 8007da6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007daa:	4013      	ands	r3, r2
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8007db0:	0f92      	lsrs	r2, r2, #30
 8007db2:	431a      	orrs	r2, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dbc:	0edb      	lsrs	r3, r3, #27
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dce:	0e1b      	lsrs	r3, r3, #24
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007de0:	0d5b      	lsrs	r3, r3, #21
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007df2:	0c9b      	lsrs	r3, r3, #18
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e04:	0bdb      	lsrs	r3, r3, #15
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	7e1b      	ldrb	r3, [r3, #24]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	3302      	adds	r3, #2
 8007e28:	2201      	movs	r2, #1
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007e32:	fb03 f202 	mul.w	r2, r3, r2
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	7a1b      	ldrb	r3, [r3, #8]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	2201      	movs	r2, #1
 8007e46:	409a      	lsls	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007e54:	0a52      	lsrs	r2, r2, #9
 8007e56:	fb03 f202 	mul.w	r2, r3, r2
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e64:	655a      	str	r2, [r3, #84]	@ 0x54
 8007e66:	e031      	b.n	8007ecc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d11d      	bne.n	8007eac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e7e:	0c1b      	lsrs	r3, r3, #16
 8007e80:	431a      	orrs	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	029a      	lsls	r2, r3, #10
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	655a      	str	r2, [r3, #84]	@ 0x54
 8007eaa:	e00f      	b.n	8007ecc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a58      	ldr	r2, [pc, #352]	@ (8008014 <HAL_SD_GetCardCSD+0x344>)
 8007eb2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e09d      	b.n	8008008 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ed0:	0b9b      	lsrs	r3, r3, #14
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ee2:	09db      	lsrs	r3, r3, #7
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f04:	0fdb      	lsrs	r3, r3, #31
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f10:	0f5b      	lsrs	r3, r3, #29
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 0303 	and.w	r3, r3, #3
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f22:	0e9b      	lsrs	r3, r3, #26
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f34:	0d9b      	lsrs	r3, r3, #22
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f46:	0d5b      	lsrs	r3, r3, #21
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f76:	0bdb      	lsrs	r3, r3, #15
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f8a:	0b9b      	lsrs	r3, r3, #14
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f9e:	0b5b      	lsrs	r3, r3, #13
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fb2:	0b1b      	lsrs	r3, r3, #12
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fc6:	0a9b      	lsrs	r3, r3, #10
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	1fe00fff 	.word	0x1fe00fff

08008018 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b094      	sub	sp, #80	@ 0x50
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b03      	cmp	r3, #3
 8008032:	d101      	bne.n	8008038 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e0a7      	b.n	8008188 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008038:	f107 0308 	add.w	r3, r7, #8
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fb62 	bl	8008708 <SD_SendSDStatus>
 8008044:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008048:	2b00      	cmp	r3, #0
 800804a:	d011      	beq.n	8008070 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a4f      	ldr	r2, [pc, #316]	@ (8008190 <HAL_SD_GetCardStatus+0x178>)
 8008052:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800806e:	e070      	b.n	8008152 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	099b      	lsrs	r3, r3, #6
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	095b      	lsrs	r3, r3, #5
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	b2da      	uxtb	r2, r3
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	0a1b      	lsrs	r3, r3, #8
 8008094:	b29b      	uxth	r3, r3
 8008096:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800809a:	b29a      	uxth	r2, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	0e1b      	lsrs	r3, r3, #24
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	4313      	orrs	r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	061a      	lsls	r2, r3, #24
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80080b6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	0a1b      	lsrs	r3, r3, #8
 80080bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80080c0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	0e1b      	lsrs	r3, r3, #24
 80080c6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	0a1b      	lsrs	r3, r3, #8
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	0d1b      	lsrs	r3, r3, #20
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	0c1b      	lsrs	r3, r3, #16
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	b29b      	uxth	r3, r3
 8008102:	4313      	orrs	r3, r2
 8008104:	b29a      	uxth	r2, r3
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	0a9b      	lsrs	r3, r3, #10
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008114:	b2da      	uxtb	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	0a1b      	lsrs	r3, r3, #8
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	b2da      	uxtb	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	091b      	lsrs	r3, r3, #4
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 030f 	and.w	r3, r3, #15
 8008134:	b2da      	uxtb	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	0e1b      	lsrs	r3, r3, #24
 800814c:	b2da      	uxtb	r2, r3
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800815a:	4618      	mov	r0, r3
 800815c:	f002 ffa0 	bl	800b0a0 <SDMMC_CmdBlockLength>
 8008160:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00d      	beq.n	8008184 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a08      	ldr	r2, [pc, #32]	@ (8008190 <HAL_SD_GetCardStatus+0x178>)
 800816e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008174:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008184:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008188:	4618      	mov	r0, r3
 800818a:	3750      	adds	r7, #80	@ 0x50
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	1fe00fff 	.word	0x1fe00fff

08008194 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80081ec:	b590      	push	{r4, r7, lr}
 80081ee:	b08d      	sub	sp, #52	@ 0x34
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2203      	movs	r2, #3
 8008200:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008208:	2b03      	cmp	r3, #3
 800820a:	d02e      	beq.n	800826a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008212:	d106      	bne.n	8008222 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008218:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008220:	e029      	b.n	8008276 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008228:	d10a      	bne.n	8008240 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fb64 	bl	80088f8 <SD_WideBus_Enable>
 8008230:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	431a      	orrs	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	635a      	str	r2, [r3, #52]	@ 0x34
 800823e:	e01a      	b.n	8008276 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10a      	bne.n	800825c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fba1 	bl	800898e <SD_WideBus_Disable>
 800824c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	431a      	orrs	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	635a      	str	r2, [r3, #52]	@ 0x34
 800825a:	e00c      	b.n	8008276 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008260:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	635a      	str	r2, [r3, #52]	@ 0x34
 8008268:	e005      	b.n	8008276 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800826e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800827a:	2b00      	cmp	r3, #0
 800827c:	d007      	beq.n	800828e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a5f      	ldr	r2, [pc, #380]	@ (8008400 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008284:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800828c:	e096      	b.n	80083bc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800828e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008292:	f04f 0100 	mov.w	r1, #0
 8008296:	f7fd fdef 	bl	8005e78 <HAL_RCCEx_GetPeriphCLKFreq>
 800829a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 8083 	beq.w	80083aa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4950      	ldr	r1, [pc, #320]	@ (8008404 <HAL_SD_ConfigWideBusOperation+0x218>)
 80082c2:	fba1 1303 	umull	r1, r3, r1, r3
 80082c6:	0e1b      	lsrs	r3, r3, #24
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d303      	bcc.n	80082d4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	e05a      	b.n	800838a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082dc:	d103      	bne.n	80082e6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	61bb      	str	r3, [r7, #24]
 80082e4:	e051      	b.n	800838a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ee:	d126      	bne.n	800833e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10e      	bne.n	8008316 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4a43      	ldr	r2, [pc, #268]	@ (8008408 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d906      	bls.n	800830e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	4a40      	ldr	r2, [pc, #256]	@ (8008404 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008304:	fba2 2303 	umull	r2, r3, r2, r3
 8008308:	0e5b      	lsrs	r3, r3, #25
 800830a:	61bb      	str	r3, [r7, #24]
 800830c:	e03d      	b.n	800838a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	61bb      	str	r3, [r7, #24]
 8008314:	e039      	b.n	800838a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008322:	4a39      	ldr	r2, [pc, #228]	@ (8008408 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d906      	bls.n	8008336 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4a36      	ldr	r2, [pc, #216]	@ (8008404 <HAL_SD_ConfigWideBusOperation+0x218>)
 800832c:	fba2 2303 	umull	r2, r3, r2, r3
 8008330:	0e5b      	lsrs	r3, r3, #25
 8008332:	61bb      	str	r3, [r7, #24]
 8008334:	e029      	b.n	800838a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	61bb      	str	r3, [r7, #24]
 800833c:	e025      	b.n	800838a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10e      	bne.n	8008364 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	4a30      	ldr	r2, [pc, #192]	@ (800840c <HAL_SD_ConfigWideBusOperation+0x220>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d906      	bls.n	800835c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4a2c      	ldr	r2, [pc, #176]	@ (8008404 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008352:	fba2 2303 	umull	r2, r3, r2, r3
 8008356:	0e1b      	lsrs	r3, r3, #24
 8008358:	61bb      	str	r3, [r7, #24]
 800835a:	e016      	b.n	800838a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	61bb      	str	r3, [r7, #24]
 8008362:	e012      	b.n	800838a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	69fa      	ldr	r2, [r7, #28]
 800836c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008370:	4a26      	ldr	r2, [pc, #152]	@ (800840c <HAL_SD_ConfigWideBusOperation+0x220>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d906      	bls.n	8008384 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	4a22      	ldr	r2, [pc, #136]	@ (8008404 <HAL_SD_ConfigWideBusOperation+0x218>)
 800837a:	fba2 2303 	umull	r2, r3, r2, r3
 800837e:	0e1b      	lsrs	r3, r3, #24
 8008380:	61bb      	str	r3, [r7, #24]
 8008382:	e002      	b.n	800838a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681c      	ldr	r4, [r3, #0]
 800838e:	466a      	mov	r2, sp
 8008390:	f107 0314 	add.w	r3, r7, #20
 8008394:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008398:	e882 0003 	stmia.w	r2, {r0, r1}
 800839c:	f107 0308 	add.w	r3, r7, #8
 80083a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083a2:	4620      	mov	r0, r4
 80083a4:	f002 fd9e 	bl	800aee4 <SDMMC_Init>
 80083a8:	e008      	b.n	80083bc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80083c4:	4618      	mov	r0, r3
 80083c6:	f002 fe6b 	bl	800b0a0 <SDMMC_CmdBlockLength>
 80083ca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00c      	beq.n	80083ec <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a0a      	ldr	r2, [pc, #40]	@ (8008400 <HAL_SD_ConfigWideBusOperation+0x214>)
 80083d8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80083f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	372c      	adds	r7, #44	@ 0x2c
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd90      	pop	{r4, r7, pc}
 8008400:	1fe00fff 	.word	0x1fe00fff
 8008404:	55e63b89 	.word	0x55e63b89
 8008408:	02faf080 	.word	0x02faf080
 800840c:	017d7840 	.word	0x017d7840

08008410 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800841c:	f107 030c 	add.w	r3, r7, #12
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa40 	bl	80088a8 <SD_SendStatus>
 8008428:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	0a5b      	lsrs	r3, r3, #9
 8008440:	f003 030f 	and.w	r3, r3, #15
 8008444:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008446:	693b      	ldr	r3, [r7, #16]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b090      	sub	sp, #64	@ 0x40
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008458:	2300      	movs	r3, #0
 800845a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800845c:	f7f9 fb02 	bl	8001a64 <HAL_GetTick>
 8008460:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4618      	mov	r0, r3
 8008468:	f002 fd95 	bl	800af96 <SDMMC_GetPowerState>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008472:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008476:	e0b5      	b.n	80085e4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847c:	2b03      	cmp	r3, #3
 800847e:	d02e      	beq.n	80084de <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f002 ffe0 	bl	800b44a <SDMMC_CmdSendCID>
 800848a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <SD_InitCard+0x46>
    {
      return errorstate;
 8008492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008494:	e0a6      	b.n	80085e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f002 fdc0 	bl	800b022 <SDMMC_GetResponse>
 80084a2:	4602      	mov	r2, r0
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2104      	movs	r1, #4
 80084ae:	4618      	mov	r0, r3
 80084b0:	f002 fdb7 	bl	800b022 <SDMMC_GetResponse>
 80084b4:	4602      	mov	r2, r0
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2108      	movs	r1, #8
 80084c0:	4618      	mov	r0, r3
 80084c2:	f002 fdae 	bl	800b022 <SDMMC_GetResponse>
 80084c6:	4602      	mov	r2, r0
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	210c      	movs	r1, #12
 80084d2:	4618      	mov	r0, r3
 80084d4:	f002 fda5 	bl	800b022 <SDMMC_GetResponse>
 80084d8:	4602      	mov	r2, r0
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d01d      	beq.n	8008522 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80084e6:	e019      	b.n	800851c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f107 020a 	add.w	r2, r7, #10
 80084f0:	4611      	mov	r1, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f002 ffe8 	bl	800b4c8 <SDMMC_CmdSetRelAdd>
 80084f8:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008502:	e06f      	b.n	80085e4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008504:	f7f9 faae 	bl	8001a64 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008512:	4293      	cmp	r3, r2
 8008514:	d902      	bls.n	800851c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008516:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800851a:	e063      	b.n	80085e4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800851c:	897b      	ldrh	r3, [r7, #10]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0e2      	beq.n	80084e8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008526:	2b03      	cmp	r3, #3
 8008528:	d036      	beq.n	8008598 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800852a:	897b      	ldrh	r3, [r7, #10]
 800852c:	461a      	mov	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800853a:	041b      	lsls	r3, r3, #16
 800853c:	4619      	mov	r1, r3
 800853e:	4610      	mov	r0, r2
 8008540:	f002 ffa2 	bl	800b488 <SDMMC_CmdSendCSD>
 8008544:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <SD_InitCard+0x100>
    {
      return errorstate;
 800854c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854e:	e049      	b.n	80085e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2100      	movs	r1, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f002 fd63 	bl	800b022 <SDMMC_GetResponse>
 800855c:	4602      	mov	r2, r0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2104      	movs	r1, #4
 8008568:	4618      	mov	r0, r3
 800856a:	f002 fd5a 	bl	800b022 <SDMMC_GetResponse>
 800856e:	4602      	mov	r2, r0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2108      	movs	r1, #8
 800857a:	4618      	mov	r0, r3
 800857c:	f002 fd51 	bl	800b022 <SDMMC_GetResponse>
 8008580:	4602      	mov	r2, r0
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	210c      	movs	r1, #12
 800858c:	4618      	mov	r0, r3
 800858e:	f002 fd48 	bl	800b022 <SDMMC_GetResponse>
 8008592:	4602      	mov	r2, r0
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2104      	movs	r1, #4
 800859e:	4618      	mov	r0, r3
 80085a0:	f002 fd3f 	bl	800b022 <SDMMC_GetResponse>
 80085a4:	4603      	mov	r3, r0
 80085a6:	0d1a      	lsrs	r2, r3, #20
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80085ac:	f107 030c 	add.w	r3, r7, #12
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff fb8c 	bl	8007cd0 <HAL_SD_GetCardCSD>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80085c2:	e00f      	b.n	80085e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f002 fe51 	bl	800b278 <SDMMC_CmdSelDesel>
 80085d6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80085d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <SD_InitCard+0x192>
  {
    return errorstate;
 80085de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e0:	e000      	b.n	80085e4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3740      	adds	r7, #64	@ 0x40
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f002 fe5a 	bl	800b2be <SDMMC_CmdGoIdleState>
 800860a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	e072      	b.n	80086fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4618      	mov	r0, r3
 800861c:	f002 fe6d 	bl	800b2fa <SDMMC_CmdOperCond>
 8008620:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008628:	d10d      	bne.n	8008646 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4618      	mov	r0, r3
 8008636:	f002 fe42 	bl	800b2be <SDMMC_CmdGoIdleState>
 800863a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d004      	beq.n	800864c <SD_PowerON+0x60>
    {
      return errorstate;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	e05a      	b.n	80086fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008650:	2b01      	cmp	r3, #1
 8008652:	d137      	bne.n	80086c4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2100      	movs	r1, #0
 800865a:	4618      	mov	r0, r3
 800865c:	f002 fe6d 	bl	800b33a <SDMMC_CmdAppCommand>
 8008660:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d02d      	beq.n	80086c4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008668:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800866c:	e046      	b.n	80086fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2100      	movs	r1, #0
 8008674:	4618      	mov	r0, r3
 8008676:	f002 fe60 	bl	800b33a <SDMMC_CmdAppCommand>
 800867a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <SD_PowerON+0x9a>
    {
      return errorstate;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	e03a      	b.n	80086fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	491e      	ldr	r1, [pc, #120]	@ (8008704 <SD_PowerON+0x118>)
 800868c:	4618      	mov	r0, r3
 800868e:	f002 fe77 	bl	800b380 <SDMMC_CmdAppOperCommand>
 8008692:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d002      	beq.n	80086a0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800869a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800869e:	e02d      	b.n	80086fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2100      	movs	r1, #0
 80086a6:	4618      	mov	r0, r3
 80086a8:	f002 fcbb 	bl	800b022 <SDMMC_GetResponse>
 80086ac:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	0fdb      	lsrs	r3, r3, #31
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d101      	bne.n	80086ba <SD_PowerON+0xce>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e000      	b.n	80086bc <SD_PowerON+0xd0>
 80086ba:	2300      	movs	r3, #0
 80086bc:	613b      	str	r3, [r7, #16]

    count++;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	3301      	adds	r3, #1
 80086c2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d802      	bhi.n	80086d4 <SD_PowerON+0xe8>
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0cc      	beq.n	800866e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80086da:	4293      	cmp	r3, r2
 80086dc:	d902      	bls.n	80086e4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80086de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80086e2:	e00b      	b.n	80086fc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	c1100000 	.word	0xc1100000

08008708 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08c      	sub	sp, #48	@ 0x30
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008712:	f7f9 f9a7 	bl	8001a64 <HAL_GetTick>
 8008716:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2100      	movs	r1, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f002 fc7d 	bl	800b022 <SDMMC_GetResponse>
 8008728:	4603      	mov	r3, r0
 800872a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800872e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008732:	d102      	bne.n	800873a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008734:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008738:	e0b0      	b.n	800889c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2140      	movs	r1, #64	@ 0x40
 8008740:	4618      	mov	r0, r3
 8008742:	f002 fcad 	bl	800b0a0 <SDMMC_CmdBlockLength>
 8008746:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	e0a0      	b.n	800889c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008762:	041b      	lsls	r3, r3, #16
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f002 fde7 	bl	800b33a <SDMMC_CmdAppCommand>
 800876c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d005      	beq.n	8008780 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	e08d      	b.n	800889c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008780:	f04f 33ff 	mov.w	r3, #4294967295
 8008784:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008786:	2340      	movs	r3, #64	@ 0x40
 8008788:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800878a:	2360      	movs	r3, #96	@ 0x60
 800878c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800878e:	2302      	movs	r3, #2
 8008790:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008792:	2300      	movs	r3, #0
 8008794:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008796:	2301      	movs	r3, #1
 8008798:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f107 0208 	add.w	r2, r7, #8
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f002 fc4f 	bl	800b048 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f002 fecf 	bl	800b552 <SDMMC_CmdStatusRegister>
 80087b4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d02b      	beq.n	8008814 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	e069      	b.n	800889c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d013      	beq.n	80087fe <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80087d6:	2300      	movs	r3, #0
 80087d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087da:	e00d      	b.n	80087f8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f002 fba9 	bl	800af38 <SDMMC_ReadFIFO>
 80087e6:	4602      	mov	r2, r0
 80087e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ea:	601a      	str	r2, [r3, #0]
        pData++;
 80087ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ee:	3304      	adds	r3, #4
 80087f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80087f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f4:	3301      	adds	r3, #1
 80087f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fa:	2b07      	cmp	r3, #7
 80087fc:	d9ee      	bls.n	80087dc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80087fe:	f7f9 f931 	bl	8001a64 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880c:	d102      	bne.n	8008814 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800880e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008812:	e043      	b.n	800889c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800881a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0d2      	beq.n	80087c8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008828:	f003 0308 	and.w	r3, r3, #8
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008830:	2308      	movs	r3, #8
 8008832:	e033      	b.n	800889c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008842:	2302      	movs	r3, #2
 8008844:	e02a      	b.n	800889c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800884c:	f003 0320 	and.w	r3, r3, #32
 8008850:	2b00      	cmp	r3, #0
 8008852:	d017      	beq.n	8008884 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008854:	2320      	movs	r3, #32
 8008856:	e021      	b.n	800889c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f002 fb6b 	bl	800af38 <SDMMC_ReadFIFO>
 8008862:	4602      	mov	r2, r0
 8008864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008866:	601a      	str	r2, [r3, #0]
    pData++;
 8008868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886a:	3304      	adds	r3, #4
 800886c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800886e:	f7f9 f8f9 	bl	8001a64 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887c:	d102      	bne.n	8008884 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800887e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008882:	e00b      	b.n	800889c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800888a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e2      	bne.n	8008858 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a03      	ldr	r2, [pc, #12]	@ (80088a4 <SD_SendSDStatus+0x19c>)
 8008898:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3730      	adds	r7, #48	@ 0x30
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	18000f3a 	.word	0x18000f3a

080088a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d102      	bne.n	80088be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80088b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80088bc:	e018      	b.n	80088f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c6:	041b      	lsls	r3, r3, #16
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f002 fe1e 	bl	800b50c <SDMMC_CmdSendStatus>
 80088d0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	e009      	b.n	80088f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2100      	movs	r1, #0
 80088e2:	4618      	mov	r0, r3
 80088e4:	f002 fb9d 	bl	800b022 <SDMMC_GetResponse>
 80088e8:	4602      	mov	r2, r0
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008900:	2300      	movs	r3, #0
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	2300      	movs	r3, #0
 8008906:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2100      	movs	r1, #0
 800890e:	4618      	mov	r0, r3
 8008910:	f002 fb87 	bl	800b022 <SDMMC_GetResponse>
 8008914:	4603      	mov	r3, r0
 8008916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800891a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800891e:	d102      	bne.n	8008926 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008920:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008924:	e02f      	b.n	8008986 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008926:	f107 030c 	add.w	r3, r7, #12
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f879 	bl	8008a24 <SD_FindSCR>
 8008932:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	e023      	b.n	8008986 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01c      	beq.n	8008982 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008950:	041b      	lsls	r3, r3, #16
 8008952:	4619      	mov	r1, r3
 8008954:	4610      	mov	r0, r2
 8008956:	f002 fcf0 	bl	800b33a <SDMMC_CmdAppCommand>
 800895a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	e00f      	b.n	8008986 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2102      	movs	r1, #2
 800896c:	4618      	mov	r0, r3
 800896e:	f002 fd27 	bl	800b3c0 <SDMMC_CmdBusWidth>
 8008972:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	e003      	b.n	8008986 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800897e:	2300      	movs	r3, #0
 8008980:	e001      	b.n	8008986 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008982:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	2300      	movs	r3, #0
 800899c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2100      	movs	r1, #0
 80089a4:	4618      	mov	r0, r3
 80089a6:	f002 fb3c 	bl	800b022 <SDMMC_GetResponse>
 80089aa:	4603      	mov	r3, r0
 80089ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089b4:	d102      	bne.n	80089bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80089b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80089ba:	e02f      	b.n	8008a1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80089bc:	f107 030c 	add.w	r3, r7, #12
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f82e 	bl	8008a24 <SD_FindSCR>
 80089c8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	e023      	b.n	8008a1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d01c      	beq.n	8008a18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e6:	041b      	lsls	r3, r3, #16
 80089e8:	4619      	mov	r1, r3
 80089ea:	4610      	mov	r0, r2
 80089ec:	f002 fca5 	bl	800b33a <SDMMC_CmdAppCommand>
 80089f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	e00f      	b.n	8008a1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2100      	movs	r1, #0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f002 fcdc 	bl	800b3c0 <SDMMC_CmdBusWidth>
 8008a08:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	e003      	b.n	8008a1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008a14:	2300      	movs	r3, #0
 8008a16:	e001      	b.n	8008a1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a18:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08e      	sub	sp, #56	@ 0x38
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008a2e:	f7f9 f819 	bl	8001a64 <HAL_GetTick>
 8008a32:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60bb      	str	r3, [r7, #8]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2108      	movs	r1, #8
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f002 fb28 	bl	800b0a0 <SDMMC_CmdBlockLength>
 8008a50:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5a:	e0ad      	b.n	8008bb8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a64:	041b      	lsls	r3, r3, #16
 8008a66:	4619      	mov	r1, r3
 8008a68:	4610      	mov	r0, r2
 8008a6a:	f002 fc66 	bl	800b33a <SDMMC_CmdAppCommand>
 8008a6e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a78:	e09e      	b.n	8008bb8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008a80:	2308      	movs	r3, #8
 8008a82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008a84:	2330      	movs	r3, #48	@ 0x30
 8008a86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a88:	2302      	movs	r3, #2
 8008a8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a90:	2301      	movs	r3, #1
 8008a92:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f107 0210 	add.w	r2, r7, #16
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f002 fad2 	bl	800b048 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f002 fcac 	bl	800b406 <SDMMC_CmdSendSCR>
 8008aae:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d027      	beq.n	8008b06 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab8:	e07e      	b.n	8008bb8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d113      	bne.n	8008af0 <SD_FindSCR+0xcc>
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d110      	bne.n	8008af0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f002 fa30 	bl	800af38 <SDMMC_ReadFIFO>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f002 fa29 	bl	800af38 <SDMMC_ReadFIFO>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	60fb      	str	r3, [r7, #12]
      index++;
 8008aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aec:	3301      	adds	r3, #1
 8008aee:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008af0:	f7f8 ffb8 	bl	8001a64 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d102      	bne.n	8008b06 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008b00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008b04:	e058      	b.n	8008bb8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b0c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008b10:	4013      	ands	r3, r2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0d1      	beq.n	8008aba <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2208      	movs	r2, #8
 8008b2a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	e043      	b.n	8008bb8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2202      	movs	r2, #2
 8008b44:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b46:	2302      	movs	r3, #2
 8008b48:	e036      	b.n	8008bb8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b50:	f003 0320 	and.w	r3, r3, #32
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008b60:	2320      	movs	r3, #32
 8008b62:	e029      	b.n	8008bb8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a15      	ldr	r2, [pc, #84]	@ (8008bc0 <SD_FindSCR+0x19c>)
 8008b6a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	061a      	lsls	r2, r3, #24
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	0a1b      	lsrs	r3, r3, #8
 8008b7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008b82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	0e1b      	lsrs	r3, r3, #24
 8008b88:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8c:	601a      	str	r2, [r3, #0]
    scr++;
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	3304      	adds	r3, #4
 8008b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	061a      	lsls	r2, r3, #24
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	021b      	lsls	r3, r3, #8
 8008b9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ba0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	0a1b      	lsrs	r3, r3, #8
 8008ba6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008baa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	0e1b      	lsrs	r3, r3, #24
 8008bb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3738      	adds	r7, #56	@ 0x38
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	18000f3a 	.word	0x18000f3a

08008bc4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e10f      	b.n	8008df6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a87      	ldr	r2, [pc, #540]	@ (8008e00 <HAL_SPI_Init+0x23c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00f      	beq.n	8008c06 <HAL_SPI_Init+0x42>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a86      	ldr	r2, [pc, #536]	@ (8008e04 <HAL_SPI_Init+0x240>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d00a      	beq.n	8008c06 <HAL_SPI_Init+0x42>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a84      	ldr	r2, [pc, #528]	@ (8008e08 <HAL_SPI_Init+0x244>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d005      	beq.n	8008c06 <HAL_SPI_Init+0x42>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	2b0f      	cmp	r3, #15
 8008c00:	d901      	bls.n	8008c06 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e0f7      	b.n	8008df6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f900 	bl	8008e0c <SPI_GetPacketSize>
 8008c0c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a7b      	ldr	r2, [pc, #492]	@ (8008e00 <HAL_SPI_Init+0x23c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00c      	beq.n	8008c32 <HAL_SPI_Init+0x6e>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a79      	ldr	r2, [pc, #484]	@ (8008e04 <HAL_SPI_Init+0x240>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d007      	beq.n	8008c32 <HAL_SPI_Init+0x6e>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a78      	ldr	r2, [pc, #480]	@ (8008e08 <HAL_SPI_Init+0x244>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d002      	beq.n	8008c32 <HAL_SPI_Init+0x6e>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b08      	cmp	r3, #8
 8008c30:	d811      	bhi.n	8008c56 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008c36:	4a72      	ldr	r2, [pc, #456]	@ (8008e00 <HAL_SPI_Init+0x23c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d009      	beq.n	8008c50 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a70      	ldr	r2, [pc, #448]	@ (8008e04 <HAL_SPI_Init+0x240>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d004      	beq.n	8008c50 <HAL_SPI_Init+0x8c>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a6f      	ldr	r2, [pc, #444]	@ (8008e08 <HAL_SPI_Init+0x244>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d104      	bne.n	8008c5a <HAL_SPI_Init+0x96>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b10      	cmp	r3, #16
 8008c54:	d901      	bls.n	8008c5a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e0cd      	b.n	8008df6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d106      	bne.n	8008c74 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7f8 fb2a 	bl	80012c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 0201 	bic.w	r2, r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008c96:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ca0:	d119      	bne.n	8008cd6 <HAL_SPI_Init+0x112>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008caa:	d103      	bne.n	8008cb4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d008      	beq.n	8008cc6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10c      	bne.n	8008cd6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008cc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cc4:	d107      	bne.n	8008cd6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008cd4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00f      	beq.n	8008d02 <HAL_SPI_Init+0x13e>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	2b06      	cmp	r3, #6
 8008ce8:	d90b      	bls.n	8008d02 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	e007      	b.n	8008d12 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	69da      	ldr	r2, [r3, #28]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d24:	ea42 0103 	orr.w	r1, r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68da      	ldr	r2, [r3, #12]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	431a      	orrs	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	431a      	orrs	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d66:	431a      	orrs	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d72:	ea42 0103 	orr.w	r1, r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d113      	bne.n	8008db2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d9c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008db0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0201 	bic.w	r2, r2, #1
 8008dc0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	40013000 	.word	0x40013000
 8008e04:	40003800 	.word	0x40003800
 8008e08:	40003c00 	.word	0x40003c00

08008e0c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e18:	095b      	lsrs	r3, r3, #5
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	3307      	adds	r3, #7
 8008e2a:	08db      	lsrs	r3, r3, #3
 8008e2c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	fb02 f303 	mul.w	r3, r2, r3
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b082      	sub	sp, #8
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e042      	b.n	8008eda <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d106      	bne.n	8008e6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7f8 fae6 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2224      	movs	r2, #36	@ 0x24
 8008e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0201 	bic.w	r2, r2, #1
 8008e82:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fd91 	bl	80099b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f826 	bl	8008ee4 <UART_SetConfig>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d101      	bne.n	8008ea2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e01b      	b.n	8008eda <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008eb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ec0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f042 0201 	orr.w	r2, r2, #1
 8008ed0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fe10 	bl	8009af8 <UART_CheckIdleState>
 8008ed8:	4603      	mov	r3, r0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ee8:	b092      	sub	sp, #72	@ 0x48
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	431a      	orrs	r2, r3
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	431a      	orrs	r2, r3
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4bbe      	ldr	r3, [pc, #760]	@ (800920c <UART_SetConfig+0x328>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	6812      	ldr	r2, [r2, #0]
 8008f1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f1c:	430b      	orrs	r3, r1
 8008f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4ab3      	ldr	r2, [pc, #716]	@ (8009210 <UART_SetConfig+0x32c>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d004      	beq.n	8008f50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689a      	ldr	r2, [r3, #8]
 8008f56:	4baf      	ldr	r3, [pc, #700]	@ (8009214 <UART_SetConfig+0x330>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	6812      	ldr	r2, [r2, #0]
 8008f5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f60:	430b      	orrs	r3, r1
 8008f62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6a:	f023 010f 	bic.w	r1, r3, #15
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4aa6      	ldr	r2, [pc, #664]	@ (8009218 <UART_SetConfig+0x334>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d177      	bne.n	8009074 <UART_SetConfig+0x190>
 8008f84:	4ba5      	ldr	r3, [pc, #660]	@ (800921c <UART_SetConfig+0x338>)
 8008f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f8c:	2b28      	cmp	r3, #40	@ 0x28
 8008f8e:	d86d      	bhi.n	800906c <UART_SetConfig+0x188>
 8008f90:	a201      	add	r2, pc, #4	@ (adr r2, 8008f98 <UART_SetConfig+0xb4>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	0800903d 	.word	0x0800903d
 8008f9c:	0800906d 	.word	0x0800906d
 8008fa0:	0800906d 	.word	0x0800906d
 8008fa4:	0800906d 	.word	0x0800906d
 8008fa8:	0800906d 	.word	0x0800906d
 8008fac:	0800906d 	.word	0x0800906d
 8008fb0:	0800906d 	.word	0x0800906d
 8008fb4:	0800906d 	.word	0x0800906d
 8008fb8:	08009045 	.word	0x08009045
 8008fbc:	0800906d 	.word	0x0800906d
 8008fc0:	0800906d 	.word	0x0800906d
 8008fc4:	0800906d 	.word	0x0800906d
 8008fc8:	0800906d 	.word	0x0800906d
 8008fcc:	0800906d 	.word	0x0800906d
 8008fd0:	0800906d 	.word	0x0800906d
 8008fd4:	0800906d 	.word	0x0800906d
 8008fd8:	0800904d 	.word	0x0800904d
 8008fdc:	0800906d 	.word	0x0800906d
 8008fe0:	0800906d 	.word	0x0800906d
 8008fe4:	0800906d 	.word	0x0800906d
 8008fe8:	0800906d 	.word	0x0800906d
 8008fec:	0800906d 	.word	0x0800906d
 8008ff0:	0800906d 	.word	0x0800906d
 8008ff4:	0800906d 	.word	0x0800906d
 8008ff8:	08009055 	.word	0x08009055
 8008ffc:	0800906d 	.word	0x0800906d
 8009000:	0800906d 	.word	0x0800906d
 8009004:	0800906d 	.word	0x0800906d
 8009008:	0800906d 	.word	0x0800906d
 800900c:	0800906d 	.word	0x0800906d
 8009010:	0800906d 	.word	0x0800906d
 8009014:	0800906d 	.word	0x0800906d
 8009018:	0800905d 	.word	0x0800905d
 800901c:	0800906d 	.word	0x0800906d
 8009020:	0800906d 	.word	0x0800906d
 8009024:	0800906d 	.word	0x0800906d
 8009028:	0800906d 	.word	0x0800906d
 800902c:	0800906d 	.word	0x0800906d
 8009030:	0800906d 	.word	0x0800906d
 8009034:	0800906d 	.word	0x0800906d
 8009038:	08009065 	.word	0x08009065
 800903c:	2301      	movs	r3, #1
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009042:	e222      	b.n	800948a <UART_SetConfig+0x5a6>
 8009044:	2304      	movs	r3, #4
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904a:	e21e      	b.n	800948a <UART_SetConfig+0x5a6>
 800904c:	2308      	movs	r3, #8
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009052:	e21a      	b.n	800948a <UART_SetConfig+0x5a6>
 8009054:	2310      	movs	r3, #16
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905a:	e216      	b.n	800948a <UART_SetConfig+0x5a6>
 800905c:	2320      	movs	r3, #32
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e212      	b.n	800948a <UART_SetConfig+0x5a6>
 8009064:	2340      	movs	r3, #64	@ 0x40
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e20e      	b.n	800948a <UART_SetConfig+0x5a6>
 800906c:	2380      	movs	r3, #128	@ 0x80
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e20a      	b.n	800948a <UART_SetConfig+0x5a6>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a69      	ldr	r2, [pc, #420]	@ (8009220 <UART_SetConfig+0x33c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d130      	bne.n	80090e0 <UART_SetConfig+0x1fc>
 800907e:	4b67      	ldr	r3, [pc, #412]	@ (800921c <UART_SetConfig+0x338>)
 8009080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	2b05      	cmp	r3, #5
 8009088:	d826      	bhi.n	80090d8 <UART_SetConfig+0x1f4>
 800908a:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <UART_SetConfig+0x1ac>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	080090a9 	.word	0x080090a9
 8009094:	080090b1 	.word	0x080090b1
 8009098:	080090b9 	.word	0x080090b9
 800909c:	080090c1 	.word	0x080090c1
 80090a0:	080090c9 	.word	0x080090c9
 80090a4:	080090d1 	.word	0x080090d1
 80090a8:	2300      	movs	r3, #0
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ae:	e1ec      	b.n	800948a <UART_SetConfig+0x5a6>
 80090b0:	2304      	movs	r3, #4
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b6:	e1e8      	b.n	800948a <UART_SetConfig+0x5a6>
 80090b8:	2308      	movs	r3, #8
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090be:	e1e4      	b.n	800948a <UART_SetConfig+0x5a6>
 80090c0:	2310      	movs	r3, #16
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e1e0      	b.n	800948a <UART_SetConfig+0x5a6>
 80090c8:	2320      	movs	r3, #32
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e1dc      	b.n	800948a <UART_SetConfig+0x5a6>
 80090d0:	2340      	movs	r3, #64	@ 0x40
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e1d8      	b.n	800948a <UART_SetConfig+0x5a6>
 80090d8:	2380      	movs	r3, #128	@ 0x80
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e1d4      	b.n	800948a <UART_SetConfig+0x5a6>
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a4f      	ldr	r2, [pc, #316]	@ (8009224 <UART_SetConfig+0x340>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d130      	bne.n	800914c <UART_SetConfig+0x268>
 80090ea:	4b4c      	ldr	r3, [pc, #304]	@ (800921c <UART_SetConfig+0x338>)
 80090ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	2b05      	cmp	r3, #5
 80090f4:	d826      	bhi.n	8009144 <UART_SetConfig+0x260>
 80090f6:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <UART_SetConfig+0x218>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	08009115 	.word	0x08009115
 8009100:	0800911d 	.word	0x0800911d
 8009104:	08009125 	.word	0x08009125
 8009108:	0800912d 	.word	0x0800912d
 800910c:	08009135 	.word	0x08009135
 8009110:	0800913d 	.word	0x0800913d
 8009114:	2300      	movs	r3, #0
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911a:	e1b6      	b.n	800948a <UART_SetConfig+0x5a6>
 800911c:	2304      	movs	r3, #4
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009122:	e1b2      	b.n	800948a <UART_SetConfig+0x5a6>
 8009124:	2308      	movs	r3, #8
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912a:	e1ae      	b.n	800948a <UART_SetConfig+0x5a6>
 800912c:	2310      	movs	r3, #16
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e1aa      	b.n	800948a <UART_SetConfig+0x5a6>
 8009134:	2320      	movs	r3, #32
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e1a6      	b.n	800948a <UART_SetConfig+0x5a6>
 800913c:	2340      	movs	r3, #64	@ 0x40
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e1a2      	b.n	800948a <UART_SetConfig+0x5a6>
 8009144:	2380      	movs	r3, #128	@ 0x80
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e19e      	b.n	800948a <UART_SetConfig+0x5a6>
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a35      	ldr	r2, [pc, #212]	@ (8009228 <UART_SetConfig+0x344>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d130      	bne.n	80091b8 <UART_SetConfig+0x2d4>
 8009156:	4b31      	ldr	r3, [pc, #196]	@ (800921c <UART_SetConfig+0x338>)
 8009158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	2b05      	cmp	r3, #5
 8009160:	d826      	bhi.n	80091b0 <UART_SetConfig+0x2cc>
 8009162:	a201      	add	r2, pc, #4	@ (adr r2, 8009168 <UART_SetConfig+0x284>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	08009181 	.word	0x08009181
 800916c:	08009189 	.word	0x08009189
 8009170:	08009191 	.word	0x08009191
 8009174:	08009199 	.word	0x08009199
 8009178:	080091a1 	.word	0x080091a1
 800917c:	080091a9 	.word	0x080091a9
 8009180:	2300      	movs	r3, #0
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009186:	e180      	b.n	800948a <UART_SetConfig+0x5a6>
 8009188:	2304      	movs	r3, #4
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918e:	e17c      	b.n	800948a <UART_SetConfig+0x5a6>
 8009190:	2308      	movs	r3, #8
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009196:	e178      	b.n	800948a <UART_SetConfig+0x5a6>
 8009198:	2310      	movs	r3, #16
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919e:	e174      	b.n	800948a <UART_SetConfig+0x5a6>
 80091a0:	2320      	movs	r3, #32
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e170      	b.n	800948a <UART_SetConfig+0x5a6>
 80091a8:	2340      	movs	r3, #64	@ 0x40
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e16c      	b.n	800948a <UART_SetConfig+0x5a6>
 80091b0:	2380      	movs	r3, #128	@ 0x80
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e168      	b.n	800948a <UART_SetConfig+0x5a6>
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a1b      	ldr	r2, [pc, #108]	@ (800922c <UART_SetConfig+0x348>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d142      	bne.n	8009248 <UART_SetConfig+0x364>
 80091c2:	4b16      	ldr	r3, [pc, #88]	@ (800921c <UART_SetConfig+0x338>)
 80091c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c6:	f003 0307 	and.w	r3, r3, #7
 80091ca:	2b05      	cmp	r3, #5
 80091cc:	d838      	bhi.n	8009240 <UART_SetConfig+0x35c>
 80091ce:	a201      	add	r2, pc, #4	@ (adr r2, 80091d4 <UART_SetConfig+0x2f0>)
 80091d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d4:	080091ed 	.word	0x080091ed
 80091d8:	080091f5 	.word	0x080091f5
 80091dc:	080091fd 	.word	0x080091fd
 80091e0:	08009205 	.word	0x08009205
 80091e4:	08009231 	.word	0x08009231
 80091e8:	08009239 	.word	0x08009239
 80091ec:	2300      	movs	r3, #0
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f2:	e14a      	b.n	800948a <UART_SetConfig+0x5a6>
 80091f4:	2304      	movs	r3, #4
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fa:	e146      	b.n	800948a <UART_SetConfig+0x5a6>
 80091fc:	2308      	movs	r3, #8
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009202:	e142      	b.n	800948a <UART_SetConfig+0x5a6>
 8009204:	2310      	movs	r3, #16
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e13e      	b.n	800948a <UART_SetConfig+0x5a6>
 800920c:	cfff69f3 	.word	0xcfff69f3
 8009210:	58000c00 	.word	0x58000c00
 8009214:	11fff4ff 	.word	0x11fff4ff
 8009218:	40011000 	.word	0x40011000
 800921c:	58024400 	.word	0x58024400
 8009220:	40004400 	.word	0x40004400
 8009224:	40004800 	.word	0x40004800
 8009228:	40004c00 	.word	0x40004c00
 800922c:	40005000 	.word	0x40005000
 8009230:	2320      	movs	r3, #32
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009236:	e128      	b.n	800948a <UART_SetConfig+0x5a6>
 8009238:	2340      	movs	r3, #64	@ 0x40
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923e:	e124      	b.n	800948a <UART_SetConfig+0x5a6>
 8009240:	2380      	movs	r3, #128	@ 0x80
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009246:	e120      	b.n	800948a <UART_SetConfig+0x5a6>
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4acb      	ldr	r2, [pc, #812]	@ (800957c <UART_SetConfig+0x698>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d176      	bne.n	8009340 <UART_SetConfig+0x45c>
 8009252:	4bcb      	ldr	r3, [pc, #812]	@ (8009580 <UART_SetConfig+0x69c>)
 8009254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800925a:	2b28      	cmp	r3, #40	@ 0x28
 800925c:	d86c      	bhi.n	8009338 <UART_SetConfig+0x454>
 800925e:	a201      	add	r2, pc, #4	@ (adr r2, 8009264 <UART_SetConfig+0x380>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	08009309 	.word	0x08009309
 8009268:	08009339 	.word	0x08009339
 800926c:	08009339 	.word	0x08009339
 8009270:	08009339 	.word	0x08009339
 8009274:	08009339 	.word	0x08009339
 8009278:	08009339 	.word	0x08009339
 800927c:	08009339 	.word	0x08009339
 8009280:	08009339 	.word	0x08009339
 8009284:	08009311 	.word	0x08009311
 8009288:	08009339 	.word	0x08009339
 800928c:	08009339 	.word	0x08009339
 8009290:	08009339 	.word	0x08009339
 8009294:	08009339 	.word	0x08009339
 8009298:	08009339 	.word	0x08009339
 800929c:	08009339 	.word	0x08009339
 80092a0:	08009339 	.word	0x08009339
 80092a4:	08009319 	.word	0x08009319
 80092a8:	08009339 	.word	0x08009339
 80092ac:	08009339 	.word	0x08009339
 80092b0:	08009339 	.word	0x08009339
 80092b4:	08009339 	.word	0x08009339
 80092b8:	08009339 	.word	0x08009339
 80092bc:	08009339 	.word	0x08009339
 80092c0:	08009339 	.word	0x08009339
 80092c4:	08009321 	.word	0x08009321
 80092c8:	08009339 	.word	0x08009339
 80092cc:	08009339 	.word	0x08009339
 80092d0:	08009339 	.word	0x08009339
 80092d4:	08009339 	.word	0x08009339
 80092d8:	08009339 	.word	0x08009339
 80092dc:	08009339 	.word	0x08009339
 80092e0:	08009339 	.word	0x08009339
 80092e4:	08009329 	.word	0x08009329
 80092e8:	08009339 	.word	0x08009339
 80092ec:	08009339 	.word	0x08009339
 80092f0:	08009339 	.word	0x08009339
 80092f4:	08009339 	.word	0x08009339
 80092f8:	08009339 	.word	0x08009339
 80092fc:	08009339 	.word	0x08009339
 8009300:	08009339 	.word	0x08009339
 8009304:	08009331 	.word	0x08009331
 8009308:	2301      	movs	r3, #1
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930e:	e0bc      	b.n	800948a <UART_SetConfig+0x5a6>
 8009310:	2304      	movs	r3, #4
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009316:	e0b8      	b.n	800948a <UART_SetConfig+0x5a6>
 8009318:	2308      	movs	r3, #8
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931e:	e0b4      	b.n	800948a <UART_SetConfig+0x5a6>
 8009320:	2310      	movs	r3, #16
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009326:	e0b0      	b.n	800948a <UART_SetConfig+0x5a6>
 8009328:	2320      	movs	r3, #32
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932e:	e0ac      	b.n	800948a <UART_SetConfig+0x5a6>
 8009330:	2340      	movs	r3, #64	@ 0x40
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009336:	e0a8      	b.n	800948a <UART_SetConfig+0x5a6>
 8009338:	2380      	movs	r3, #128	@ 0x80
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933e:	e0a4      	b.n	800948a <UART_SetConfig+0x5a6>
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a8f      	ldr	r2, [pc, #572]	@ (8009584 <UART_SetConfig+0x6a0>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d130      	bne.n	80093ac <UART_SetConfig+0x4c8>
 800934a:	4b8d      	ldr	r3, [pc, #564]	@ (8009580 <UART_SetConfig+0x69c>)
 800934c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800934e:	f003 0307 	and.w	r3, r3, #7
 8009352:	2b05      	cmp	r3, #5
 8009354:	d826      	bhi.n	80093a4 <UART_SetConfig+0x4c0>
 8009356:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <UART_SetConfig+0x478>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	08009375 	.word	0x08009375
 8009360:	0800937d 	.word	0x0800937d
 8009364:	08009385 	.word	0x08009385
 8009368:	0800938d 	.word	0x0800938d
 800936c:	08009395 	.word	0x08009395
 8009370:	0800939d 	.word	0x0800939d
 8009374:	2300      	movs	r3, #0
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937a:	e086      	b.n	800948a <UART_SetConfig+0x5a6>
 800937c:	2304      	movs	r3, #4
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009382:	e082      	b.n	800948a <UART_SetConfig+0x5a6>
 8009384:	2308      	movs	r3, #8
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938a:	e07e      	b.n	800948a <UART_SetConfig+0x5a6>
 800938c:	2310      	movs	r3, #16
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009392:	e07a      	b.n	800948a <UART_SetConfig+0x5a6>
 8009394:	2320      	movs	r3, #32
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939a:	e076      	b.n	800948a <UART_SetConfig+0x5a6>
 800939c:	2340      	movs	r3, #64	@ 0x40
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a2:	e072      	b.n	800948a <UART_SetConfig+0x5a6>
 80093a4:	2380      	movs	r3, #128	@ 0x80
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e06e      	b.n	800948a <UART_SetConfig+0x5a6>
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a75      	ldr	r2, [pc, #468]	@ (8009588 <UART_SetConfig+0x6a4>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d130      	bne.n	8009418 <UART_SetConfig+0x534>
 80093b6:	4b72      	ldr	r3, [pc, #456]	@ (8009580 <UART_SetConfig+0x69c>)
 80093b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	2b05      	cmp	r3, #5
 80093c0:	d826      	bhi.n	8009410 <UART_SetConfig+0x52c>
 80093c2:	a201      	add	r2, pc, #4	@ (adr r2, 80093c8 <UART_SetConfig+0x4e4>)
 80093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c8:	080093e1 	.word	0x080093e1
 80093cc:	080093e9 	.word	0x080093e9
 80093d0:	080093f1 	.word	0x080093f1
 80093d4:	080093f9 	.word	0x080093f9
 80093d8:	08009401 	.word	0x08009401
 80093dc:	08009409 	.word	0x08009409
 80093e0:	2300      	movs	r3, #0
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e050      	b.n	800948a <UART_SetConfig+0x5a6>
 80093e8:	2304      	movs	r3, #4
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e04c      	b.n	800948a <UART_SetConfig+0x5a6>
 80093f0:	2308      	movs	r3, #8
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e048      	b.n	800948a <UART_SetConfig+0x5a6>
 80093f8:	2310      	movs	r3, #16
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e044      	b.n	800948a <UART_SetConfig+0x5a6>
 8009400:	2320      	movs	r3, #32
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e040      	b.n	800948a <UART_SetConfig+0x5a6>
 8009408:	2340      	movs	r3, #64	@ 0x40
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e03c      	b.n	800948a <UART_SetConfig+0x5a6>
 8009410:	2380      	movs	r3, #128	@ 0x80
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e038      	b.n	800948a <UART_SetConfig+0x5a6>
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a5b      	ldr	r2, [pc, #364]	@ (800958c <UART_SetConfig+0x6a8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d130      	bne.n	8009484 <UART_SetConfig+0x5a0>
 8009422:	4b57      	ldr	r3, [pc, #348]	@ (8009580 <UART_SetConfig+0x69c>)
 8009424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	2b05      	cmp	r3, #5
 800942c:	d826      	bhi.n	800947c <UART_SetConfig+0x598>
 800942e:	a201      	add	r2, pc, #4	@ (adr r2, 8009434 <UART_SetConfig+0x550>)
 8009430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009434:	0800944d 	.word	0x0800944d
 8009438:	08009455 	.word	0x08009455
 800943c:	0800945d 	.word	0x0800945d
 8009440:	08009465 	.word	0x08009465
 8009444:	0800946d 	.word	0x0800946d
 8009448:	08009475 	.word	0x08009475
 800944c:	2302      	movs	r3, #2
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009452:	e01a      	b.n	800948a <UART_SetConfig+0x5a6>
 8009454:	2304      	movs	r3, #4
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e016      	b.n	800948a <UART_SetConfig+0x5a6>
 800945c:	2308      	movs	r3, #8
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e012      	b.n	800948a <UART_SetConfig+0x5a6>
 8009464:	2310      	movs	r3, #16
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e00e      	b.n	800948a <UART_SetConfig+0x5a6>
 800946c:	2320      	movs	r3, #32
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e00a      	b.n	800948a <UART_SetConfig+0x5a6>
 8009474:	2340      	movs	r3, #64	@ 0x40
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e006      	b.n	800948a <UART_SetConfig+0x5a6>
 800947c:	2380      	movs	r3, #128	@ 0x80
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e002      	b.n	800948a <UART_SetConfig+0x5a6>
 8009484:	2380      	movs	r3, #128	@ 0x80
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a3f      	ldr	r2, [pc, #252]	@ (800958c <UART_SetConfig+0x6a8>)
 8009490:	4293      	cmp	r3, r2
 8009492:	f040 80f8 	bne.w	8009686 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009496:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800949a:	2b20      	cmp	r3, #32
 800949c:	dc46      	bgt.n	800952c <UART_SetConfig+0x648>
 800949e:	2b02      	cmp	r3, #2
 80094a0:	f2c0 8082 	blt.w	80095a8 <UART_SetConfig+0x6c4>
 80094a4:	3b02      	subs	r3, #2
 80094a6:	2b1e      	cmp	r3, #30
 80094a8:	d87e      	bhi.n	80095a8 <UART_SetConfig+0x6c4>
 80094aa:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <UART_SetConfig+0x5cc>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	08009533 	.word	0x08009533
 80094b4:	080095a9 	.word	0x080095a9
 80094b8:	0800953b 	.word	0x0800953b
 80094bc:	080095a9 	.word	0x080095a9
 80094c0:	080095a9 	.word	0x080095a9
 80094c4:	080095a9 	.word	0x080095a9
 80094c8:	0800954b 	.word	0x0800954b
 80094cc:	080095a9 	.word	0x080095a9
 80094d0:	080095a9 	.word	0x080095a9
 80094d4:	080095a9 	.word	0x080095a9
 80094d8:	080095a9 	.word	0x080095a9
 80094dc:	080095a9 	.word	0x080095a9
 80094e0:	080095a9 	.word	0x080095a9
 80094e4:	080095a9 	.word	0x080095a9
 80094e8:	0800955b 	.word	0x0800955b
 80094ec:	080095a9 	.word	0x080095a9
 80094f0:	080095a9 	.word	0x080095a9
 80094f4:	080095a9 	.word	0x080095a9
 80094f8:	080095a9 	.word	0x080095a9
 80094fc:	080095a9 	.word	0x080095a9
 8009500:	080095a9 	.word	0x080095a9
 8009504:	080095a9 	.word	0x080095a9
 8009508:	080095a9 	.word	0x080095a9
 800950c:	080095a9 	.word	0x080095a9
 8009510:	080095a9 	.word	0x080095a9
 8009514:	080095a9 	.word	0x080095a9
 8009518:	080095a9 	.word	0x080095a9
 800951c:	080095a9 	.word	0x080095a9
 8009520:	080095a9 	.word	0x080095a9
 8009524:	080095a9 	.word	0x080095a9
 8009528:	0800959b 	.word	0x0800959b
 800952c:	2b40      	cmp	r3, #64	@ 0x40
 800952e:	d037      	beq.n	80095a0 <UART_SetConfig+0x6bc>
 8009530:	e03a      	b.n	80095a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009532:	f7fd fa21 	bl	8006978 <HAL_RCCEx_GetD3PCLK1Freq>
 8009536:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009538:	e03c      	b.n	80095b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800953a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800953e:	4618      	mov	r0, r3
 8009540:	f7fd fa30 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009548:	e034      	b.n	80095b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800954a:	f107 0318 	add.w	r3, r7, #24
 800954e:	4618      	mov	r0, r3
 8009550:	f7fd fb7c 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009558:	e02c      	b.n	80095b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800955a:	4b09      	ldr	r3, [pc, #36]	@ (8009580 <UART_SetConfig+0x69c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d016      	beq.n	8009594 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009566:	4b06      	ldr	r3, [pc, #24]	@ (8009580 <UART_SetConfig+0x69c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	08db      	lsrs	r3, r3, #3
 800956c:	f003 0303 	and.w	r3, r3, #3
 8009570:	4a07      	ldr	r2, [pc, #28]	@ (8009590 <UART_SetConfig+0x6ac>)
 8009572:	fa22 f303 	lsr.w	r3, r2, r3
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009578:	e01c      	b.n	80095b4 <UART_SetConfig+0x6d0>
 800957a:	bf00      	nop
 800957c:	40011400 	.word	0x40011400
 8009580:	58024400 	.word	0x58024400
 8009584:	40007800 	.word	0x40007800
 8009588:	40007c00 	.word	0x40007c00
 800958c:	58000c00 	.word	0x58000c00
 8009590:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009594:	4b9d      	ldr	r3, [pc, #628]	@ (800980c <UART_SetConfig+0x928>)
 8009596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009598:	e00c      	b.n	80095b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800959a:	4b9d      	ldr	r3, [pc, #628]	@ (8009810 <UART_SetConfig+0x92c>)
 800959c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800959e:	e009      	b.n	80095b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a6:	e005      	b.n	80095b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 81de 	beq.w	8009978 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c0:	4a94      	ldr	r2, [pc, #592]	@ (8009814 <UART_SetConfig+0x930>)
 80095c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095c6:	461a      	mov	r2, r3
 80095c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80095ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	005b      	lsls	r3, r3, #1
 80095d8:	4413      	add	r3, r2
 80095da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095dc:	429a      	cmp	r2, r3
 80095de:	d305      	bcc.n	80095ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d903      	bls.n	80095f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095f2:	e1c1      	b.n	8009978 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f6:	2200      	movs	r2, #0
 80095f8:	60bb      	str	r3, [r7, #8]
 80095fa:	60fa      	str	r2, [r7, #12]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009600:	4a84      	ldr	r2, [pc, #528]	@ (8009814 <UART_SetConfig+0x930>)
 8009602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009606:	b29b      	uxth	r3, r3
 8009608:	2200      	movs	r2, #0
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	607a      	str	r2, [r7, #4]
 800960e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009616:	f7f6 febb 	bl	8000390 <__aeabi_uldivmod>
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	4610      	mov	r0, r2
 8009620:	4619      	mov	r1, r3
 8009622:	f04f 0200 	mov.w	r2, #0
 8009626:	f04f 0300 	mov.w	r3, #0
 800962a:	020b      	lsls	r3, r1, #8
 800962c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009630:	0202      	lsls	r2, r0, #8
 8009632:	6979      	ldr	r1, [r7, #20]
 8009634:	6849      	ldr	r1, [r1, #4]
 8009636:	0849      	lsrs	r1, r1, #1
 8009638:	2000      	movs	r0, #0
 800963a:	460c      	mov	r4, r1
 800963c:	4605      	mov	r5, r0
 800963e:	eb12 0804 	adds.w	r8, r2, r4
 8009642:	eb43 0905 	adc.w	r9, r3, r5
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	469a      	mov	sl, r3
 800964e:	4693      	mov	fp, r2
 8009650:	4652      	mov	r2, sl
 8009652:	465b      	mov	r3, fp
 8009654:	4640      	mov	r0, r8
 8009656:	4649      	mov	r1, r9
 8009658:	f7f6 fe9a 	bl	8000390 <__aeabi_uldivmod>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4613      	mov	r3, r2
 8009662:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800966a:	d308      	bcc.n	800967e <UART_SetConfig+0x79a>
 800966c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009672:	d204      	bcs.n	800967e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800967a:	60da      	str	r2, [r3, #12]
 800967c:	e17c      	b.n	8009978 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009684:	e178      	b.n	8009978 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800968e:	f040 80c5 	bne.w	800981c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009692:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009696:	2b20      	cmp	r3, #32
 8009698:	dc48      	bgt.n	800972c <UART_SetConfig+0x848>
 800969a:	2b00      	cmp	r3, #0
 800969c:	db7b      	blt.n	8009796 <UART_SetConfig+0x8b2>
 800969e:	2b20      	cmp	r3, #32
 80096a0:	d879      	bhi.n	8009796 <UART_SetConfig+0x8b2>
 80096a2:	a201      	add	r2, pc, #4	@ (adr r2, 80096a8 <UART_SetConfig+0x7c4>)
 80096a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a8:	08009733 	.word	0x08009733
 80096ac:	0800973b 	.word	0x0800973b
 80096b0:	08009797 	.word	0x08009797
 80096b4:	08009797 	.word	0x08009797
 80096b8:	08009743 	.word	0x08009743
 80096bc:	08009797 	.word	0x08009797
 80096c0:	08009797 	.word	0x08009797
 80096c4:	08009797 	.word	0x08009797
 80096c8:	08009753 	.word	0x08009753
 80096cc:	08009797 	.word	0x08009797
 80096d0:	08009797 	.word	0x08009797
 80096d4:	08009797 	.word	0x08009797
 80096d8:	08009797 	.word	0x08009797
 80096dc:	08009797 	.word	0x08009797
 80096e0:	08009797 	.word	0x08009797
 80096e4:	08009797 	.word	0x08009797
 80096e8:	08009763 	.word	0x08009763
 80096ec:	08009797 	.word	0x08009797
 80096f0:	08009797 	.word	0x08009797
 80096f4:	08009797 	.word	0x08009797
 80096f8:	08009797 	.word	0x08009797
 80096fc:	08009797 	.word	0x08009797
 8009700:	08009797 	.word	0x08009797
 8009704:	08009797 	.word	0x08009797
 8009708:	08009797 	.word	0x08009797
 800970c:	08009797 	.word	0x08009797
 8009710:	08009797 	.word	0x08009797
 8009714:	08009797 	.word	0x08009797
 8009718:	08009797 	.word	0x08009797
 800971c:	08009797 	.word	0x08009797
 8009720:	08009797 	.word	0x08009797
 8009724:	08009797 	.word	0x08009797
 8009728:	08009789 	.word	0x08009789
 800972c:	2b40      	cmp	r3, #64	@ 0x40
 800972e:	d02e      	beq.n	800978e <UART_SetConfig+0x8aa>
 8009730:	e031      	b.n	8009796 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009732:	f7fb f94f 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8009736:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009738:	e033      	b.n	80097a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800973a:	f7fb f961 	bl	8004a00 <HAL_RCC_GetPCLK2Freq>
 800973e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009740:	e02f      	b.n	80097a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009746:	4618      	mov	r0, r3
 8009748:	f7fd f92c 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800974c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009750:	e027      	b.n	80097a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009752:	f107 0318 	add.w	r3, r7, #24
 8009756:	4618      	mov	r0, r3
 8009758:	f7fd fa78 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009760:	e01f      	b.n	80097a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009762:	4b2d      	ldr	r3, [pc, #180]	@ (8009818 <UART_SetConfig+0x934>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b00      	cmp	r3, #0
 800976c:	d009      	beq.n	8009782 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800976e:	4b2a      	ldr	r3, [pc, #168]	@ (8009818 <UART_SetConfig+0x934>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	08db      	lsrs	r3, r3, #3
 8009774:	f003 0303 	and.w	r3, r3, #3
 8009778:	4a24      	ldr	r2, [pc, #144]	@ (800980c <UART_SetConfig+0x928>)
 800977a:	fa22 f303 	lsr.w	r3, r2, r3
 800977e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009780:	e00f      	b.n	80097a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009782:	4b22      	ldr	r3, [pc, #136]	@ (800980c <UART_SetConfig+0x928>)
 8009784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009786:	e00c      	b.n	80097a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009788:	4b21      	ldr	r3, [pc, #132]	@ (8009810 <UART_SetConfig+0x92c>)
 800978a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800978c:	e009      	b.n	80097a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800978e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009794:	e005      	b.n	80097a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 80e7 	beq.w	8009978 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ae:	4a19      	ldr	r2, [pc, #100]	@ (8009814 <UART_SetConfig+0x930>)
 80097b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097b4:	461a      	mov	r2, r3
 80097b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097bc:	005a      	lsls	r2, r3, #1
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	085b      	lsrs	r3, r3, #1
 80097c4:	441a      	add	r2, r3
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d2:	2b0f      	cmp	r3, #15
 80097d4:	d916      	bls.n	8009804 <UART_SetConfig+0x920>
 80097d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097dc:	d212      	bcs.n	8009804 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	f023 030f 	bic.w	r3, r3, #15
 80097e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ea:	085b      	lsrs	r3, r3, #1
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	f003 0307 	and.w	r3, r3, #7
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097f6:	4313      	orrs	r3, r2
 80097f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009800:	60da      	str	r2, [r3, #12]
 8009802:	e0b9      	b.n	8009978 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800980a:	e0b5      	b.n	8009978 <UART_SetConfig+0xa94>
 800980c:	03d09000 	.word	0x03d09000
 8009810:	003d0900 	.word	0x003d0900
 8009814:	08013db4 	.word	0x08013db4
 8009818:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800981c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009820:	2b20      	cmp	r3, #32
 8009822:	dc49      	bgt.n	80098b8 <UART_SetConfig+0x9d4>
 8009824:	2b00      	cmp	r3, #0
 8009826:	db7c      	blt.n	8009922 <UART_SetConfig+0xa3e>
 8009828:	2b20      	cmp	r3, #32
 800982a:	d87a      	bhi.n	8009922 <UART_SetConfig+0xa3e>
 800982c:	a201      	add	r2, pc, #4	@ (adr r2, 8009834 <UART_SetConfig+0x950>)
 800982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009832:	bf00      	nop
 8009834:	080098bf 	.word	0x080098bf
 8009838:	080098c7 	.word	0x080098c7
 800983c:	08009923 	.word	0x08009923
 8009840:	08009923 	.word	0x08009923
 8009844:	080098cf 	.word	0x080098cf
 8009848:	08009923 	.word	0x08009923
 800984c:	08009923 	.word	0x08009923
 8009850:	08009923 	.word	0x08009923
 8009854:	080098df 	.word	0x080098df
 8009858:	08009923 	.word	0x08009923
 800985c:	08009923 	.word	0x08009923
 8009860:	08009923 	.word	0x08009923
 8009864:	08009923 	.word	0x08009923
 8009868:	08009923 	.word	0x08009923
 800986c:	08009923 	.word	0x08009923
 8009870:	08009923 	.word	0x08009923
 8009874:	080098ef 	.word	0x080098ef
 8009878:	08009923 	.word	0x08009923
 800987c:	08009923 	.word	0x08009923
 8009880:	08009923 	.word	0x08009923
 8009884:	08009923 	.word	0x08009923
 8009888:	08009923 	.word	0x08009923
 800988c:	08009923 	.word	0x08009923
 8009890:	08009923 	.word	0x08009923
 8009894:	08009923 	.word	0x08009923
 8009898:	08009923 	.word	0x08009923
 800989c:	08009923 	.word	0x08009923
 80098a0:	08009923 	.word	0x08009923
 80098a4:	08009923 	.word	0x08009923
 80098a8:	08009923 	.word	0x08009923
 80098ac:	08009923 	.word	0x08009923
 80098b0:	08009923 	.word	0x08009923
 80098b4:	08009915 	.word	0x08009915
 80098b8:	2b40      	cmp	r3, #64	@ 0x40
 80098ba:	d02e      	beq.n	800991a <UART_SetConfig+0xa36>
 80098bc:	e031      	b.n	8009922 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098be:	f7fb f889 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 80098c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098c4:	e033      	b.n	800992e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098c6:	f7fb f89b 	bl	8004a00 <HAL_RCC_GetPCLK2Freq>
 80098ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098cc:	e02f      	b.n	800992e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fd f866 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098dc:	e027      	b.n	800992e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098de:	f107 0318 	add.w	r3, r7, #24
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fd f9b2 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ec:	e01f      	b.n	800992e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098ee:	4b2d      	ldr	r3, [pc, #180]	@ (80099a4 <UART_SetConfig+0xac0>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098fa:	4b2a      	ldr	r3, [pc, #168]	@ (80099a4 <UART_SetConfig+0xac0>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	08db      	lsrs	r3, r3, #3
 8009900:	f003 0303 	and.w	r3, r3, #3
 8009904:	4a28      	ldr	r2, [pc, #160]	@ (80099a8 <UART_SetConfig+0xac4>)
 8009906:	fa22 f303 	lsr.w	r3, r2, r3
 800990a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800990c:	e00f      	b.n	800992e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800990e:	4b26      	ldr	r3, [pc, #152]	@ (80099a8 <UART_SetConfig+0xac4>)
 8009910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009912:	e00c      	b.n	800992e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009914:	4b25      	ldr	r3, [pc, #148]	@ (80099ac <UART_SetConfig+0xac8>)
 8009916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009918:	e009      	b.n	800992e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800991a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009920:	e005      	b.n	800992e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009922:	2300      	movs	r3, #0
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800992c:	bf00      	nop
    }

    if (pclk != 0U)
 800992e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d021      	beq.n	8009978 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009938:	4a1d      	ldr	r2, [pc, #116]	@ (80099b0 <UART_SetConfig+0xacc>)
 800993a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800993e:	461a      	mov	r2, r3
 8009940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009942:	fbb3 f2f2 	udiv	r2, r3, r2
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	441a      	add	r2, r3
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	fbb2 f3f3 	udiv	r3, r2, r3
 8009956:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995a:	2b0f      	cmp	r3, #15
 800995c:	d909      	bls.n	8009972 <UART_SetConfig+0xa8e>
 800995e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009964:	d205      	bcs.n	8009972 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009968:	b29a      	uxth	r2, r3
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	60da      	str	r2, [r3, #12]
 8009970:	e002      	b.n	8009978 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2201      	movs	r2, #1
 800997c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	2201      	movs	r2, #1
 8009984:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	2200      	movs	r2, #0
 800998c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2200      	movs	r2, #0
 8009992:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009994:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009998:	4618      	mov	r0, r3
 800999a:	3748      	adds	r7, #72	@ 0x48
 800999c:	46bd      	mov	sp, r7
 800999e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099a2:	bf00      	nop
 80099a4:	58024400 	.word	0x58024400
 80099a8:	03d09000 	.word	0x03d09000
 80099ac:	003d0900 	.word	0x003d0900
 80099b0:	08013db4 	.word	0x08013db4

080099b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00a      	beq.n	80099de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00a      	beq.n	8009a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a04:	f003 0302 	and.w	r3, r3, #2
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00a      	beq.n	8009a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a26:	f003 0304 	and.w	r3, r3, #4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00a      	beq.n	8009a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a48:	f003 0310 	and.w	r3, r3, #16
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00a      	beq.n	8009a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6a:	f003 0320 	and.w	r3, r3, #32
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01a      	beq.n	8009aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ab2:	d10a      	bne.n	8009aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	605a      	str	r2, [r3, #4]
  }
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b098      	sub	sp, #96	@ 0x60
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b08:	f7f7 ffac 	bl	8001a64 <HAL_GetTick>
 8009b0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 0308 	and.w	r3, r3, #8
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d12f      	bne.n	8009b7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b24:	2200      	movs	r2, #0
 8009b26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f88e 	bl	8009c4c <UART_WaitOnFlagUntilTimeout>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d022      	beq.n	8009b7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	e853 3f00 	ldrex	r3, [r3]
 8009b42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	461a      	mov	r2, r3
 8009b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b5c:	e841 2300 	strex	r3, r2, [r1]
 8009b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e6      	bne.n	8009b36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e063      	b.n	8009c44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0304 	and.w	r3, r3, #4
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d149      	bne.n	8009c1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b92:	2200      	movs	r2, #0
 8009b94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f857 	bl	8009c4c <UART_WaitOnFlagUntilTimeout>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d03c      	beq.n	8009c1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bac:	e853 3f00 	ldrex	r3, [r3]
 8009bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e6      	bne.n	8009ba4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3308      	adds	r3, #8
 8009bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f023 0301 	bic.w	r3, r3, #1
 8009bec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bf6:	61fa      	str	r2, [r7, #28]
 8009bf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	69b9      	ldr	r1, [r7, #24]
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	617b      	str	r3, [r7, #20]
   return(result);
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e5      	bne.n	8009bd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e012      	b.n	8009c44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2220      	movs	r2, #32
 8009c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2220      	movs	r2, #32
 8009c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3758      	adds	r7, #88	@ 0x58
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c5c:	e04f      	b.n	8009cfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c64:	d04b      	beq.n	8009cfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c66:	f7f7 fefd 	bl	8001a64 <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d302      	bcc.n	8009c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e04e      	b.n	8009d1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0304 	and.w	r3, r3, #4
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d037      	beq.n	8009cfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b80      	cmp	r3, #128	@ 0x80
 8009c92:	d034      	beq.n	8009cfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b40      	cmp	r3, #64	@ 0x40
 8009c98:	d031      	beq.n	8009cfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	f003 0308 	and.w	r3, r3, #8
 8009ca4:	2b08      	cmp	r3, #8
 8009ca6:	d110      	bne.n	8009cca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2208      	movs	r2, #8
 8009cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 f839 	bl	8009d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2208      	movs	r2, #8
 8009cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e029      	b.n	8009d1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cd8:	d111      	bne.n	8009cfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f81f 	bl	8009d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e00f      	b.n	8009d1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	69da      	ldr	r2, [r3, #28]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4013      	ands	r3, r2
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	bf0c      	ite	eq
 8009d0e:	2301      	moveq	r3, #1
 8009d10:	2300      	movne	r3, #0
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	461a      	mov	r2, r3
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d0a0      	beq.n	8009c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b095      	sub	sp, #84	@ 0x54
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d56:	e841 2300 	strex	r3, r2, [r1]
 8009d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e6      	bne.n	8009d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3308      	adds	r3, #8
 8009d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	e853 3f00 	ldrex	r3, [r3]
 8009d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d72:	69fa      	ldr	r2, [r7, #28]
 8009d74:	4b1e      	ldr	r3, [pc, #120]	@ (8009df0 <UART_EndRxTransfer+0xc8>)
 8009d76:	4013      	ands	r3, r2
 8009d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3308      	adds	r3, #8
 8009d80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d8a:	e841 2300 	strex	r3, r2, [r1]
 8009d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1e5      	bne.n	8009d62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d118      	bne.n	8009dd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	e853 3f00 	ldrex	r3, [r3]
 8009daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	f023 0310 	bic.w	r3, r3, #16
 8009db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	461a      	mov	r2, r3
 8009dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dbc:	61bb      	str	r3, [r7, #24]
 8009dbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc0:	6979      	ldr	r1, [r7, #20]
 8009dc2:	69ba      	ldr	r2, [r7, #24]
 8009dc4:	e841 2300 	strex	r3, r2, [r1]
 8009dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e6      	bne.n	8009d9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2220      	movs	r2, #32
 8009dd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009de4:	bf00      	nop
 8009de6:	3754      	adds	r7, #84	@ 0x54
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	effffffe 	.word	0xeffffffe

08009df4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d101      	bne.n	8009e0a <HAL_UARTEx_DisableFifoMode+0x16>
 8009e06:	2302      	movs	r3, #2
 8009e08:	e027      	b.n	8009e5a <HAL_UARTEx_DisableFifoMode+0x66>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2224      	movs	r2, #36	@ 0x24
 8009e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f022 0201 	bic.w	r2, r2, #1
 8009e30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d101      	bne.n	8009e7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	e02d      	b.n	8009eda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2224      	movs	r2, #36	@ 0x24
 8009e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f022 0201 	bic.w	r2, r2, #1
 8009ea4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f850 	bl	8009f60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2220      	movs	r2, #32
 8009ecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e02d      	b.n	8009f56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2224      	movs	r2, #36	@ 0x24
 8009f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 0201 	bic.w	r2, r2, #1
 8009f20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f812 	bl	8009f60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d108      	bne.n	8009f82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f80:	e031      	b.n	8009fe6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f82:	2310      	movs	r3, #16
 8009f84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f86:	2310      	movs	r3, #16
 8009f88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	0e5b      	lsrs	r3, r3, #25
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f003 0307 	and.w	r3, r3, #7
 8009f98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	0f5b      	lsrs	r3, r3, #29
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	f003 0307 	and.w	r3, r3, #7
 8009fa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
 8009fac:	7b3a      	ldrb	r2, [r7, #12]
 8009fae:	4911      	ldr	r1, [pc, #68]	@ (8009ff4 <UARTEx_SetNbDataToProcess+0x94>)
 8009fb0:	5c8a      	ldrb	r2, [r1, r2]
 8009fb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fb6:	7b3a      	ldrb	r2, [r7, #12]
 8009fb8:	490f      	ldr	r1, [pc, #60]	@ (8009ff8 <UARTEx_SetNbDataToProcess+0x98>)
 8009fba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	7b7a      	ldrb	r2, [r7, #13]
 8009fcc:	4909      	ldr	r1, [pc, #36]	@ (8009ff4 <UARTEx_SetNbDataToProcess+0x94>)
 8009fce:	5c8a      	ldrb	r2, [r1, r2]
 8009fd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009fd4:	7b7a      	ldrb	r2, [r7, #13]
 8009fd6:	4908      	ldr	r1, [pc, #32]	@ (8009ff8 <UARTEx_SetNbDataToProcess+0x98>)
 8009fd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fda:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009fe6:	bf00      	nop
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	08013dcc 	.word	0x08013dcc
 8009ff8:	08013dd4 	.word	0x08013dd4

08009ffc <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d101      	bne.n	800a00e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e03c      	b.n	800a088 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	d106      	bne.n	800a028 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7f7 fa70 	bl	8001508 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2202      	movs	r2, #2
 800a02c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f022 0201 	bic.w	r2, r2, #1
 800a03e:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f85b 	bl	800a0fc <USART_SetConfig>
 800a046:	4603      	mov	r3, r0
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d101      	bne.n	800a050 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e01b      	b.n	800a088 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a05e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689a      	ldr	r2, [r3, #8]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a06e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f042 0201 	orr.w	r2, r2, #1
 800a07e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fd5b 	bl	800ab3c <USART_CheckIdleState>
 800a086:	4603      	mov	r3, r0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	603b      	str	r3, [r7, #0]
 800a09c:	4613      	mov	r3, r2
 800a09e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800a0a0:	e018      	b.n	800a0d4 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a8:	d014      	beq.n	800a0d4 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0aa:	f7f7 fcdb 	bl	8001a64 <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	69ba      	ldr	r2, [r7, #24]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d302      	bcc.n	800a0c0 <USART_WaitOnFlagUntilTimeout+0x30>
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d109      	bne.n	800a0d4 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e00f      	b.n	800a0f4 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	69da      	ldr	r2, [r3, #28]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	4013      	ands	r3, r2
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	bf0c      	ite	eq
 800a0e4:	2301      	moveq	r3, #1
 800a0e6:	2300      	movne	r3, #0
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d0d7      	beq.n	800a0a2 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08e      	sub	sp, #56	@ 0x38
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800a10a:	2300      	movs	r3, #0
 800a10c:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	431a      	orrs	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	4bc9      	ldr	r3, [pc, #804]	@ (800a450 <USART_SetConfig+0x354>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	6812      	ldr	r2, [r2, #0]
 800a132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a134:	430b      	orrs	r3, r1
 800a136:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800a138:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a13c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a144:	4313      	orrs	r3, r2
 800a146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	699a      	ldr	r2, [r3, #24]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	4313      	orrs	r3, r2
 800a152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a154:	4313      	orrs	r3, r2
 800a156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a15e:	4313      	orrs	r3, r2
 800a160:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	4bba      	ldr	r3, [pc, #744]	@ (800a454 <USART_SetConfig+0x358>)
 800a16a:	4013      	ands	r3, r2
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	6812      	ldr	r2, [r2, #0]
 800a170:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a172:	430b      	orrs	r3, r1
 800a174:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a17c:	f023 010f 	bic.w	r1, r3, #15
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	430a      	orrs	r2, r1
 800a18a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4ab1      	ldr	r2, [pc, #708]	@ (800a458 <USART_SetConfig+0x35c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d176      	bne.n	800a284 <USART_SetConfig+0x188>
 800a196:	4bb1      	ldr	r3, [pc, #708]	@ (800a45c <USART_SetConfig+0x360>)
 800a198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a19a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a19e:	2b28      	cmp	r3, #40	@ 0x28
 800a1a0:	d86c      	bhi.n	800a27c <USART_SetConfig+0x180>
 800a1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a8 <USART_SetConfig+0xac>)
 800a1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a8:	0800a24d 	.word	0x0800a24d
 800a1ac:	0800a27d 	.word	0x0800a27d
 800a1b0:	0800a27d 	.word	0x0800a27d
 800a1b4:	0800a27d 	.word	0x0800a27d
 800a1b8:	0800a27d 	.word	0x0800a27d
 800a1bc:	0800a27d 	.word	0x0800a27d
 800a1c0:	0800a27d 	.word	0x0800a27d
 800a1c4:	0800a27d 	.word	0x0800a27d
 800a1c8:	0800a255 	.word	0x0800a255
 800a1cc:	0800a27d 	.word	0x0800a27d
 800a1d0:	0800a27d 	.word	0x0800a27d
 800a1d4:	0800a27d 	.word	0x0800a27d
 800a1d8:	0800a27d 	.word	0x0800a27d
 800a1dc:	0800a27d 	.word	0x0800a27d
 800a1e0:	0800a27d 	.word	0x0800a27d
 800a1e4:	0800a27d 	.word	0x0800a27d
 800a1e8:	0800a25d 	.word	0x0800a25d
 800a1ec:	0800a27d 	.word	0x0800a27d
 800a1f0:	0800a27d 	.word	0x0800a27d
 800a1f4:	0800a27d 	.word	0x0800a27d
 800a1f8:	0800a27d 	.word	0x0800a27d
 800a1fc:	0800a27d 	.word	0x0800a27d
 800a200:	0800a27d 	.word	0x0800a27d
 800a204:	0800a27d 	.word	0x0800a27d
 800a208:	0800a265 	.word	0x0800a265
 800a20c:	0800a27d 	.word	0x0800a27d
 800a210:	0800a27d 	.word	0x0800a27d
 800a214:	0800a27d 	.word	0x0800a27d
 800a218:	0800a27d 	.word	0x0800a27d
 800a21c:	0800a27d 	.word	0x0800a27d
 800a220:	0800a27d 	.word	0x0800a27d
 800a224:	0800a27d 	.word	0x0800a27d
 800a228:	0800a26d 	.word	0x0800a26d
 800a22c:	0800a27d 	.word	0x0800a27d
 800a230:	0800a27d 	.word	0x0800a27d
 800a234:	0800a27d 	.word	0x0800a27d
 800a238:	0800a27d 	.word	0x0800a27d
 800a23c:	0800a27d 	.word	0x0800a27d
 800a240:	0800a27d 	.word	0x0800a27d
 800a244:	0800a27d 	.word	0x0800a27d
 800a248:	0800a275 	.word	0x0800a275
 800a24c:	2301      	movs	r3, #1
 800a24e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a252:	e112      	b.n	800a47a <USART_SetConfig+0x37e>
 800a254:	2302      	movs	r3, #2
 800a256:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a25a:	e10e      	b.n	800a47a <USART_SetConfig+0x37e>
 800a25c:	2304      	movs	r3, #4
 800a25e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a262:	e10a      	b.n	800a47a <USART_SetConfig+0x37e>
 800a264:	2308      	movs	r3, #8
 800a266:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a26a:	e106      	b.n	800a47a <USART_SetConfig+0x37e>
 800a26c:	2310      	movs	r3, #16
 800a26e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a272:	e102      	b.n	800a47a <USART_SetConfig+0x37e>
 800a274:	2320      	movs	r3, #32
 800a276:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a27a:	e0fe      	b.n	800a47a <USART_SetConfig+0x37e>
 800a27c:	2340      	movs	r3, #64	@ 0x40
 800a27e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a282:	e0fa      	b.n	800a47a <USART_SetConfig+0x37e>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a75      	ldr	r2, [pc, #468]	@ (800a460 <USART_SetConfig+0x364>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d130      	bne.n	800a2f0 <USART_SetConfig+0x1f4>
 800a28e:	4b73      	ldr	r3, [pc, #460]	@ (800a45c <USART_SetConfig+0x360>)
 800a290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	2b05      	cmp	r3, #5
 800a298:	d826      	bhi.n	800a2e8 <USART_SetConfig+0x1ec>
 800a29a:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <USART_SetConfig+0x1a4>)
 800a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a0:	0800a2b9 	.word	0x0800a2b9
 800a2a4:	0800a2c1 	.word	0x0800a2c1
 800a2a8:	0800a2c9 	.word	0x0800a2c9
 800a2ac:	0800a2d1 	.word	0x0800a2d1
 800a2b0:	0800a2d9 	.word	0x0800a2d9
 800a2b4:	0800a2e1 	.word	0x0800a2e1
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a2be:	e0dc      	b.n	800a47a <USART_SetConfig+0x37e>
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a2c6:	e0d8      	b.n	800a47a <USART_SetConfig+0x37e>
 800a2c8:	2304      	movs	r3, #4
 800a2ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a2ce:	e0d4      	b.n	800a47a <USART_SetConfig+0x37e>
 800a2d0:	2308      	movs	r3, #8
 800a2d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a2d6:	e0d0      	b.n	800a47a <USART_SetConfig+0x37e>
 800a2d8:	2310      	movs	r3, #16
 800a2da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a2de:	e0cc      	b.n	800a47a <USART_SetConfig+0x37e>
 800a2e0:	2320      	movs	r3, #32
 800a2e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a2e6:	e0c8      	b.n	800a47a <USART_SetConfig+0x37e>
 800a2e8:	2340      	movs	r3, #64	@ 0x40
 800a2ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a2ee:	e0c4      	b.n	800a47a <USART_SetConfig+0x37e>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a5b      	ldr	r2, [pc, #364]	@ (800a464 <USART_SetConfig+0x368>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d130      	bne.n	800a35c <USART_SetConfig+0x260>
 800a2fa:	4b58      	ldr	r3, [pc, #352]	@ (800a45c <USART_SetConfig+0x360>)
 800a2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2fe:	f003 0307 	and.w	r3, r3, #7
 800a302:	2b05      	cmp	r3, #5
 800a304:	d826      	bhi.n	800a354 <USART_SetConfig+0x258>
 800a306:	a201      	add	r2, pc, #4	@ (adr r2, 800a30c <USART_SetConfig+0x210>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a325 	.word	0x0800a325
 800a310:	0800a32d 	.word	0x0800a32d
 800a314:	0800a335 	.word	0x0800a335
 800a318:	0800a33d 	.word	0x0800a33d
 800a31c:	0800a345 	.word	0x0800a345
 800a320:	0800a34d 	.word	0x0800a34d
 800a324:	2300      	movs	r3, #0
 800a326:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a32a:	e0a6      	b.n	800a47a <USART_SetConfig+0x37e>
 800a32c:	2302      	movs	r3, #2
 800a32e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a332:	e0a2      	b.n	800a47a <USART_SetConfig+0x37e>
 800a334:	2304      	movs	r3, #4
 800a336:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a33a:	e09e      	b.n	800a47a <USART_SetConfig+0x37e>
 800a33c:	2308      	movs	r3, #8
 800a33e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a342:	e09a      	b.n	800a47a <USART_SetConfig+0x37e>
 800a344:	2310      	movs	r3, #16
 800a346:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a34a:	e096      	b.n	800a47a <USART_SetConfig+0x37e>
 800a34c:	2320      	movs	r3, #32
 800a34e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a352:	e092      	b.n	800a47a <USART_SetConfig+0x37e>
 800a354:	2340      	movs	r3, #64	@ 0x40
 800a356:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a35a:	e08e      	b.n	800a47a <USART_SetConfig+0x37e>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a41      	ldr	r2, [pc, #260]	@ (800a468 <USART_SetConfig+0x36c>)
 800a362:	4293      	cmp	r3, r2
 800a364:	f040 8086 	bne.w	800a474 <USART_SetConfig+0x378>
 800a368:	4b3c      	ldr	r3, [pc, #240]	@ (800a45c <USART_SetConfig+0x360>)
 800a36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a36c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a370:	2b28      	cmp	r3, #40	@ 0x28
 800a372:	d87b      	bhi.n	800a46c <USART_SetConfig+0x370>
 800a374:	a201      	add	r2, pc, #4	@ (adr r2, 800a37c <USART_SetConfig+0x280>)
 800a376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37a:	bf00      	nop
 800a37c:	0800a421 	.word	0x0800a421
 800a380:	0800a46d 	.word	0x0800a46d
 800a384:	0800a46d 	.word	0x0800a46d
 800a388:	0800a46d 	.word	0x0800a46d
 800a38c:	0800a46d 	.word	0x0800a46d
 800a390:	0800a46d 	.word	0x0800a46d
 800a394:	0800a46d 	.word	0x0800a46d
 800a398:	0800a46d 	.word	0x0800a46d
 800a39c:	0800a429 	.word	0x0800a429
 800a3a0:	0800a46d 	.word	0x0800a46d
 800a3a4:	0800a46d 	.word	0x0800a46d
 800a3a8:	0800a46d 	.word	0x0800a46d
 800a3ac:	0800a46d 	.word	0x0800a46d
 800a3b0:	0800a46d 	.word	0x0800a46d
 800a3b4:	0800a46d 	.word	0x0800a46d
 800a3b8:	0800a46d 	.word	0x0800a46d
 800a3bc:	0800a431 	.word	0x0800a431
 800a3c0:	0800a46d 	.word	0x0800a46d
 800a3c4:	0800a46d 	.word	0x0800a46d
 800a3c8:	0800a46d 	.word	0x0800a46d
 800a3cc:	0800a46d 	.word	0x0800a46d
 800a3d0:	0800a46d 	.word	0x0800a46d
 800a3d4:	0800a46d 	.word	0x0800a46d
 800a3d8:	0800a46d 	.word	0x0800a46d
 800a3dc:	0800a439 	.word	0x0800a439
 800a3e0:	0800a46d 	.word	0x0800a46d
 800a3e4:	0800a46d 	.word	0x0800a46d
 800a3e8:	0800a46d 	.word	0x0800a46d
 800a3ec:	0800a46d 	.word	0x0800a46d
 800a3f0:	0800a46d 	.word	0x0800a46d
 800a3f4:	0800a46d 	.word	0x0800a46d
 800a3f8:	0800a46d 	.word	0x0800a46d
 800a3fc:	0800a441 	.word	0x0800a441
 800a400:	0800a46d 	.word	0x0800a46d
 800a404:	0800a46d 	.word	0x0800a46d
 800a408:	0800a46d 	.word	0x0800a46d
 800a40c:	0800a46d 	.word	0x0800a46d
 800a410:	0800a46d 	.word	0x0800a46d
 800a414:	0800a46d 	.word	0x0800a46d
 800a418:	0800a46d 	.word	0x0800a46d
 800a41c:	0800a449 	.word	0x0800a449
 800a420:	2301      	movs	r3, #1
 800a422:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a426:	e028      	b.n	800a47a <USART_SetConfig+0x37e>
 800a428:	2302      	movs	r3, #2
 800a42a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a42e:	e024      	b.n	800a47a <USART_SetConfig+0x37e>
 800a430:	2304      	movs	r3, #4
 800a432:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a436:	e020      	b.n	800a47a <USART_SetConfig+0x37e>
 800a438:	2308      	movs	r3, #8
 800a43a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a43e:	e01c      	b.n	800a47a <USART_SetConfig+0x37e>
 800a440:	2310      	movs	r3, #16
 800a442:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a446:	e018      	b.n	800a47a <USART_SetConfig+0x37e>
 800a448:	2320      	movs	r3, #32
 800a44a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a44e:	e014      	b.n	800a47a <USART_SetConfig+0x37e>
 800a450:	cfff69f3 	.word	0xcfff69f3
 800a454:	ffffc0f6 	.word	0xffffc0f6
 800a458:	40011000 	.word	0x40011000
 800a45c:	58024400 	.word	0x58024400
 800a460:	40004400 	.word	0x40004400
 800a464:	40004800 	.word	0x40004800
 800a468:	40011400 	.word	0x40011400
 800a46c:	2340      	movs	r3, #64	@ 0x40
 800a46e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a472:	e002      	b.n	800a47a <USART_SetConfig+0x37e>
 800a474:	2340      	movs	r3, #64	@ 0x40
 800a476:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800a47a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a47e:	2b20      	cmp	r3, #32
 800a480:	f200 8329 	bhi.w	800aad6 <USART_SetConfig+0x9da>
 800a484:	a201      	add	r2, pc, #4	@ (adr r2, 800a48c <USART_SetConfig+0x390>)
 800a486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48a:	bf00      	nop
 800a48c:	0800a511 	.word	0x0800a511
 800a490:	0800a5c7 	.word	0x0800a5c7
 800a494:	0800a67d 	.word	0x0800a67d
 800a498:	0800aad7 	.word	0x0800aad7
 800a49c:	0800a737 	.word	0x0800a737
 800a4a0:	0800aad7 	.word	0x0800aad7
 800a4a4:	0800aad7 	.word	0x0800aad7
 800a4a8:	0800aad7 	.word	0x0800aad7
 800a4ac:	0800a7f1 	.word	0x0800a7f1
 800a4b0:	0800aad7 	.word	0x0800aad7
 800a4b4:	0800aad7 	.word	0x0800aad7
 800a4b8:	0800aad7 	.word	0x0800aad7
 800a4bc:	0800aad7 	.word	0x0800aad7
 800a4c0:	0800aad7 	.word	0x0800aad7
 800a4c4:	0800aad7 	.word	0x0800aad7
 800a4c8:	0800aad7 	.word	0x0800aad7
 800a4cc:	0800a969 	.word	0x0800a969
 800a4d0:	0800aad7 	.word	0x0800aad7
 800a4d4:	0800aad7 	.word	0x0800aad7
 800a4d8:	0800aad7 	.word	0x0800aad7
 800a4dc:	0800aad7 	.word	0x0800aad7
 800a4e0:	0800aad7 	.word	0x0800aad7
 800a4e4:	0800aad7 	.word	0x0800aad7
 800a4e8:	0800aad7 	.word	0x0800aad7
 800a4ec:	0800aad7 	.word	0x0800aad7
 800a4f0:	0800aad7 	.word	0x0800aad7
 800a4f4:	0800aad7 	.word	0x0800aad7
 800a4f8:	0800aad7 	.word	0x0800aad7
 800a4fc:	0800aad7 	.word	0x0800aad7
 800a500:	0800aad7 	.word	0x0800aad7
 800a504:	0800aad7 	.word	0x0800aad7
 800a508:	0800aad7 	.word	0x0800aad7
 800a50c:	0800aa25 	.word	0x0800aa25
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800a510:	f7fa fa60 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 800a514:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d044      	beq.n	800a5a8 <USART_SetConfig+0x4ac>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a522:	2b01      	cmp	r3, #1
 800a524:	d03e      	beq.n	800a5a4 <USART_SetConfig+0x4a8>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d038      	beq.n	800a5a0 <USART_SetConfig+0x4a4>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a532:	2b03      	cmp	r3, #3
 800a534:	d032      	beq.n	800a59c <USART_SetConfig+0x4a0>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53a:	2b04      	cmp	r3, #4
 800a53c:	d02c      	beq.n	800a598 <USART_SetConfig+0x49c>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a542:	2b05      	cmp	r3, #5
 800a544:	d026      	beq.n	800a594 <USART_SetConfig+0x498>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54a:	2b06      	cmp	r3, #6
 800a54c:	d020      	beq.n	800a590 <USART_SetConfig+0x494>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a552:	2b07      	cmp	r3, #7
 800a554:	d01a      	beq.n	800a58c <USART_SetConfig+0x490>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55a:	2b08      	cmp	r3, #8
 800a55c:	d014      	beq.n	800a588 <USART_SetConfig+0x48c>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a562:	2b09      	cmp	r3, #9
 800a564:	d00e      	beq.n	800a584 <USART_SetConfig+0x488>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a56a:	2b0a      	cmp	r3, #10
 800a56c:	d008      	beq.n	800a580 <USART_SetConfig+0x484>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a572:	2b0b      	cmp	r3, #11
 800a574:	d102      	bne.n	800a57c <USART_SetConfig+0x480>
 800a576:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a57a:	e016      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a57c:	2301      	movs	r3, #1
 800a57e:	e014      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a580:	2380      	movs	r3, #128	@ 0x80
 800a582:	e012      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a584:	2340      	movs	r3, #64	@ 0x40
 800a586:	e010      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a588:	2320      	movs	r3, #32
 800a58a:	e00e      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a58c:	2310      	movs	r3, #16
 800a58e:	e00c      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a590:	230c      	movs	r3, #12
 800a592:	e00a      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a594:	230a      	movs	r3, #10
 800a596:	e008      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a598:	2308      	movs	r3, #8
 800a59a:	e006      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a59c:	2306      	movs	r3, #6
 800a59e:	e004      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a5a0:	2304      	movs	r3, #4
 800a5a2:	e002      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e000      	b.n	800a5aa <USART_SetConfig+0x4ae>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b0:	005a      	lsls	r2, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	085b      	lsrs	r3, r3, #1
 800a5b8:	441a      	add	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a5c4:	e28b      	b.n	800aade <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5c6:	f7fa fa1b 	bl	8004a00 <HAL_RCC_GetPCLK2Freq>
 800a5ca:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d044      	beq.n	800a65e <USART_SetConfig+0x562>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d03e      	beq.n	800a65a <USART_SetConfig+0x55e>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d038      	beq.n	800a656 <USART_SetConfig+0x55a>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d032      	beq.n	800a652 <USART_SetConfig+0x556>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	d02c      	beq.n	800a64e <USART_SetConfig+0x552>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f8:	2b05      	cmp	r3, #5
 800a5fa:	d026      	beq.n	800a64a <USART_SetConfig+0x54e>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a600:	2b06      	cmp	r3, #6
 800a602:	d020      	beq.n	800a646 <USART_SetConfig+0x54a>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a608:	2b07      	cmp	r3, #7
 800a60a:	d01a      	beq.n	800a642 <USART_SetConfig+0x546>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a610:	2b08      	cmp	r3, #8
 800a612:	d014      	beq.n	800a63e <USART_SetConfig+0x542>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a618:	2b09      	cmp	r3, #9
 800a61a:	d00e      	beq.n	800a63a <USART_SetConfig+0x53e>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a620:	2b0a      	cmp	r3, #10
 800a622:	d008      	beq.n	800a636 <USART_SetConfig+0x53a>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a628:	2b0b      	cmp	r3, #11
 800a62a:	d102      	bne.n	800a632 <USART_SetConfig+0x536>
 800a62c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a630:	e016      	b.n	800a660 <USART_SetConfig+0x564>
 800a632:	2301      	movs	r3, #1
 800a634:	e014      	b.n	800a660 <USART_SetConfig+0x564>
 800a636:	2380      	movs	r3, #128	@ 0x80
 800a638:	e012      	b.n	800a660 <USART_SetConfig+0x564>
 800a63a:	2340      	movs	r3, #64	@ 0x40
 800a63c:	e010      	b.n	800a660 <USART_SetConfig+0x564>
 800a63e:	2320      	movs	r3, #32
 800a640:	e00e      	b.n	800a660 <USART_SetConfig+0x564>
 800a642:	2310      	movs	r3, #16
 800a644:	e00c      	b.n	800a660 <USART_SetConfig+0x564>
 800a646:	230c      	movs	r3, #12
 800a648:	e00a      	b.n	800a660 <USART_SetConfig+0x564>
 800a64a:	230a      	movs	r3, #10
 800a64c:	e008      	b.n	800a660 <USART_SetConfig+0x564>
 800a64e:	2308      	movs	r3, #8
 800a650:	e006      	b.n	800a660 <USART_SetConfig+0x564>
 800a652:	2306      	movs	r3, #6
 800a654:	e004      	b.n	800a660 <USART_SetConfig+0x564>
 800a656:	2304      	movs	r3, #4
 800a658:	e002      	b.n	800a660 <USART_SetConfig+0x564>
 800a65a:	2302      	movs	r3, #2
 800a65c:	e000      	b.n	800a660 <USART_SetConfig+0x564>
 800a65e:	2301      	movs	r3, #1
 800a660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a662:	fbb2 f3f3 	udiv	r3, r2, r3
 800a666:	005a      	lsls	r2, r3, #1
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	085b      	lsrs	r3, r3, #1
 800a66e:	441a      	add	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	fbb2 f3f3 	udiv	r3, r2, r3
 800a678:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a67a:	e230      	b.n	800aade <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a67c:	f107 0318 	add.w	r3, r7, #24
 800a680:	4618      	mov	r0, r3
 800a682:	f7fc f98f 	bl	80069a4 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800a686:	69fa      	ldr	r2, [r7, #28]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d044      	beq.n	800a71a <USART_SetConfig+0x61e>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a694:	2b01      	cmp	r3, #1
 800a696:	d03e      	beq.n	800a716 <USART_SetConfig+0x61a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d038      	beq.n	800a712 <USART_SetConfig+0x616>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d032      	beq.n	800a70e <USART_SetConfig+0x612>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ac:	2b04      	cmp	r3, #4
 800a6ae:	d02c      	beq.n	800a70a <USART_SetConfig+0x60e>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b4:	2b05      	cmp	r3, #5
 800a6b6:	d026      	beq.n	800a706 <USART_SetConfig+0x60a>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6bc:	2b06      	cmp	r3, #6
 800a6be:	d020      	beq.n	800a702 <USART_SetConfig+0x606>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c4:	2b07      	cmp	r3, #7
 800a6c6:	d01a      	beq.n	800a6fe <USART_SetConfig+0x602>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d014      	beq.n	800a6fa <USART_SetConfig+0x5fe>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d4:	2b09      	cmp	r3, #9
 800a6d6:	d00e      	beq.n	800a6f6 <USART_SetConfig+0x5fa>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6dc:	2b0a      	cmp	r3, #10
 800a6de:	d008      	beq.n	800a6f2 <USART_SetConfig+0x5f6>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e4:	2b0b      	cmp	r3, #11
 800a6e6:	d102      	bne.n	800a6ee <USART_SetConfig+0x5f2>
 800a6e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6ec:	e016      	b.n	800a71c <USART_SetConfig+0x620>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e014      	b.n	800a71c <USART_SetConfig+0x620>
 800a6f2:	2380      	movs	r3, #128	@ 0x80
 800a6f4:	e012      	b.n	800a71c <USART_SetConfig+0x620>
 800a6f6:	2340      	movs	r3, #64	@ 0x40
 800a6f8:	e010      	b.n	800a71c <USART_SetConfig+0x620>
 800a6fa:	2320      	movs	r3, #32
 800a6fc:	e00e      	b.n	800a71c <USART_SetConfig+0x620>
 800a6fe:	2310      	movs	r3, #16
 800a700:	e00c      	b.n	800a71c <USART_SetConfig+0x620>
 800a702:	230c      	movs	r3, #12
 800a704:	e00a      	b.n	800a71c <USART_SetConfig+0x620>
 800a706:	230a      	movs	r3, #10
 800a708:	e008      	b.n	800a71c <USART_SetConfig+0x620>
 800a70a:	2308      	movs	r3, #8
 800a70c:	e006      	b.n	800a71c <USART_SetConfig+0x620>
 800a70e:	2306      	movs	r3, #6
 800a710:	e004      	b.n	800a71c <USART_SetConfig+0x620>
 800a712:	2304      	movs	r3, #4
 800a714:	e002      	b.n	800a71c <USART_SetConfig+0x620>
 800a716:	2302      	movs	r3, #2
 800a718:	e000      	b.n	800a71c <USART_SetConfig+0x620>
 800a71a:	2301      	movs	r3, #1
 800a71c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a720:	005a      	lsls	r2, r3, #1
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	085b      	lsrs	r3, r3, #1
 800a728:	441a      	add	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a732:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800a734:	e1d3      	b.n	800aade <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a736:	f107 030c 	add.w	r3, r7, #12
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fc fa86 	bl	8006c4c <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a746:	2b00      	cmp	r3, #0
 800a748:	d044      	beq.n	800a7d4 <USART_SetConfig+0x6d8>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d03e      	beq.n	800a7d0 <USART_SetConfig+0x6d4>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a756:	2b02      	cmp	r3, #2
 800a758:	d038      	beq.n	800a7cc <USART_SetConfig+0x6d0>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d032      	beq.n	800a7c8 <USART_SetConfig+0x6cc>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a766:	2b04      	cmp	r3, #4
 800a768:	d02c      	beq.n	800a7c4 <USART_SetConfig+0x6c8>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d026      	beq.n	800a7c0 <USART_SetConfig+0x6c4>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a776:	2b06      	cmp	r3, #6
 800a778:	d020      	beq.n	800a7bc <USART_SetConfig+0x6c0>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77e:	2b07      	cmp	r3, #7
 800a780:	d01a      	beq.n	800a7b8 <USART_SetConfig+0x6bc>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a786:	2b08      	cmp	r3, #8
 800a788:	d014      	beq.n	800a7b4 <USART_SetConfig+0x6b8>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78e:	2b09      	cmp	r3, #9
 800a790:	d00e      	beq.n	800a7b0 <USART_SetConfig+0x6b4>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a796:	2b0a      	cmp	r3, #10
 800a798:	d008      	beq.n	800a7ac <USART_SetConfig+0x6b0>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a79e:	2b0b      	cmp	r3, #11
 800a7a0:	d102      	bne.n	800a7a8 <USART_SetConfig+0x6ac>
 800a7a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a7a6:	e016      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e014      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7ac:	2380      	movs	r3, #128	@ 0x80
 800a7ae:	e012      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7b0:	2340      	movs	r3, #64	@ 0x40
 800a7b2:	e010      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7b4:	2320      	movs	r3, #32
 800a7b6:	e00e      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	e00c      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7bc:	230c      	movs	r3, #12
 800a7be:	e00a      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7c0:	230a      	movs	r3, #10
 800a7c2:	e008      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	e006      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7c8:	2306      	movs	r3, #6
 800a7ca:	e004      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	e002      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e000      	b.n	800a7d6 <USART_SetConfig+0x6da>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7da:	005a      	lsls	r2, r3, #1
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	085b      	lsrs	r3, r3, #1
 800a7e2:	441a      	add	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ec:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800a7ee:	e176      	b.n	800aade <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7f0:	4b89      	ldr	r3, [pc, #548]	@ (800aa18 <USART_SetConfig+0x91c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0320 	and.w	r3, r3, #32
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d05d      	beq.n	800a8b8 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800a7fc:	4b86      	ldr	r3, [pc, #536]	@ (800aa18 <USART_SetConfig+0x91c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	08db      	lsrs	r3, r3, #3
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	4a85      	ldr	r2, [pc, #532]	@ (800aa1c <USART_SetConfig+0x920>)
 800a808:	40da      	lsrs	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d044      	beq.n	800a89c <USART_SetConfig+0x7a0>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a816:	2b01      	cmp	r3, #1
 800a818:	d03e      	beq.n	800a898 <USART_SetConfig+0x79c>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d038      	beq.n	800a894 <USART_SetConfig+0x798>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a826:	2b03      	cmp	r3, #3
 800a828:	d032      	beq.n	800a890 <USART_SetConfig+0x794>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d02c      	beq.n	800a88c <USART_SetConfig+0x790>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a836:	2b05      	cmp	r3, #5
 800a838:	d026      	beq.n	800a888 <USART_SetConfig+0x78c>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83e:	2b06      	cmp	r3, #6
 800a840:	d020      	beq.n	800a884 <USART_SetConfig+0x788>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a846:	2b07      	cmp	r3, #7
 800a848:	d01a      	beq.n	800a880 <USART_SetConfig+0x784>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84e:	2b08      	cmp	r3, #8
 800a850:	d014      	beq.n	800a87c <USART_SetConfig+0x780>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a856:	2b09      	cmp	r3, #9
 800a858:	d00e      	beq.n	800a878 <USART_SetConfig+0x77c>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a85e:	2b0a      	cmp	r3, #10
 800a860:	d008      	beq.n	800a874 <USART_SetConfig+0x778>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a866:	2b0b      	cmp	r3, #11
 800a868:	d102      	bne.n	800a870 <USART_SetConfig+0x774>
 800a86a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a86e:	e016      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a870:	2301      	movs	r3, #1
 800a872:	e014      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a874:	2380      	movs	r3, #128	@ 0x80
 800a876:	e012      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a878:	2340      	movs	r3, #64	@ 0x40
 800a87a:	e010      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a87c:	2320      	movs	r3, #32
 800a87e:	e00e      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a880:	2310      	movs	r3, #16
 800a882:	e00c      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a884:	230c      	movs	r3, #12
 800a886:	e00a      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a888:	230a      	movs	r3, #10
 800a88a:	e008      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a88c:	2308      	movs	r3, #8
 800a88e:	e006      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a890:	2306      	movs	r3, #6
 800a892:	e004      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a894:	2304      	movs	r3, #4
 800a896:	e002      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a898:	2302      	movs	r3, #2
 800a89a:	e000      	b.n	800a89e <USART_SetConfig+0x7a2>
 800a89c:	2301      	movs	r3, #1
 800a89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a2:	005a      	lsls	r2, r3, #1
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	085b      	lsrs	r3, r3, #1
 800a8aa:	441a      	add	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800a8b6:	e112      	b.n	800aade <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d044      	beq.n	800a94a <USART_SetConfig+0x84e>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d03e      	beq.n	800a946 <USART_SetConfig+0x84a>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d038      	beq.n	800a942 <USART_SetConfig+0x846>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d032      	beq.n	800a93e <USART_SetConfig+0x842>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	d02c      	beq.n	800a93a <USART_SetConfig+0x83e>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e4:	2b05      	cmp	r3, #5
 800a8e6:	d026      	beq.n	800a936 <USART_SetConfig+0x83a>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ec:	2b06      	cmp	r3, #6
 800a8ee:	d020      	beq.n	800a932 <USART_SetConfig+0x836>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f4:	2b07      	cmp	r3, #7
 800a8f6:	d01a      	beq.n	800a92e <USART_SetConfig+0x832>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8fc:	2b08      	cmp	r3, #8
 800a8fe:	d014      	beq.n	800a92a <USART_SetConfig+0x82e>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a904:	2b09      	cmp	r3, #9
 800a906:	d00e      	beq.n	800a926 <USART_SetConfig+0x82a>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90c:	2b0a      	cmp	r3, #10
 800a90e:	d008      	beq.n	800a922 <USART_SetConfig+0x826>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a914:	2b0b      	cmp	r3, #11
 800a916:	d102      	bne.n	800a91e <USART_SetConfig+0x822>
 800a918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a91c:	e016      	b.n	800a94c <USART_SetConfig+0x850>
 800a91e:	2301      	movs	r3, #1
 800a920:	e014      	b.n	800a94c <USART_SetConfig+0x850>
 800a922:	2380      	movs	r3, #128	@ 0x80
 800a924:	e012      	b.n	800a94c <USART_SetConfig+0x850>
 800a926:	2340      	movs	r3, #64	@ 0x40
 800a928:	e010      	b.n	800a94c <USART_SetConfig+0x850>
 800a92a:	2320      	movs	r3, #32
 800a92c:	e00e      	b.n	800a94c <USART_SetConfig+0x850>
 800a92e:	2310      	movs	r3, #16
 800a930:	e00c      	b.n	800a94c <USART_SetConfig+0x850>
 800a932:	230c      	movs	r3, #12
 800a934:	e00a      	b.n	800a94c <USART_SetConfig+0x850>
 800a936:	230a      	movs	r3, #10
 800a938:	e008      	b.n	800a94c <USART_SetConfig+0x850>
 800a93a:	2308      	movs	r3, #8
 800a93c:	e006      	b.n	800a94c <USART_SetConfig+0x850>
 800a93e:	2306      	movs	r3, #6
 800a940:	e004      	b.n	800a94c <USART_SetConfig+0x850>
 800a942:	2304      	movs	r3, #4
 800a944:	e002      	b.n	800a94c <USART_SetConfig+0x850>
 800a946:	2302      	movs	r3, #2
 800a948:	e000      	b.n	800a94c <USART_SetConfig+0x850>
 800a94a:	2301      	movs	r3, #1
 800a94c:	4a33      	ldr	r2, [pc, #204]	@ (800aa1c <USART_SetConfig+0x920>)
 800a94e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a952:	005a      	lsls	r2, r3, #1
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	085b      	lsrs	r3, r3, #1
 800a95a:	441a      	add	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	fbb2 f3f3 	udiv	r3, r2, r3
 800a964:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a966:	e0ba      	b.n	800aade <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d044      	beq.n	800a9fa <USART_SetConfig+0x8fe>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a974:	2b01      	cmp	r3, #1
 800a976:	d03e      	beq.n	800a9f6 <USART_SetConfig+0x8fa>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d038      	beq.n	800a9f2 <USART_SetConfig+0x8f6>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a984:	2b03      	cmp	r3, #3
 800a986:	d032      	beq.n	800a9ee <USART_SetConfig+0x8f2>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d02c      	beq.n	800a9ea <USART_SetConfig+0x8ee>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a994:	2b05      	cmp	r3, #5
 800a996:	d026      	beq.n	800a9e6 <USART_SetConfig+0x8ea>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99c:	2b06      	cmp	r3, #6
 800a99e:	d020      	beq.n	800a9e2 <USART_SetConfig+0x8e6>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a4:	2b07      	cmp	r3, #7
 800a9a6:	d01a      	beq.n	800a9de <USART_SetConfig+0x8e2>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ac:	2b08      	cmp	r3, #8
 800a9ae:	d014      	beq.n	800a9da <USART_SetConfig+0x8de>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b4:	2b09      	cmp	r3, #9
 800a9b6:	d00e      	beq.n	800a9d6 <USART_SetConfig+0x8da>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9bc:	2b0a      	cmp	r3, #10
 800a9be:	d008      	beq.n	800a9d2 <USART_SetConfig+0x8d6>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c4:	2b0b      	cmp	r3, #11
 800a9c6:	d102      	bne.n	800a9ce <USART_SetConfig+0x8d2>
 800a9c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9cc:	e016      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e014      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9d2:	2380      	movs	r3, #128	@ 0x80
 800a9d4:	e012      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9d6:	2340      	movs	r3, #64	@ 0x40
 800a9d8:	e010      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9da:	2320      	movs	r3, #32
 800a9dc:	e00e      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9de:	2310      	movs	r3, #16
 800a9e0:	e00c      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9e2:	230c      	movs	r3, #12
 800a9e4:	e00a      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9e6:	230a      	movs	r3, #10
 800a9e8:	e008      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9ea:	2308      	movs	r3, #8
 800a9ec:	e006      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9ee:	2306      	movs	r3, #6
 800a9f0:	e004      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9f2:	2304      	movs	r3, #4
 800a9f4:	e002      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e000      	b.n	800a9fc <USART_SetConfig+0x900>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	4a08      	ldr	r2, [pc, #32]	@ (800aa20 <USART_SetConfig+0x924>)
 800a9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa02:	005a      	lsls	r2, r3, #1
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	085b      	lsrs	r3, r3, #1
 800aa0a:	441a      	add	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa14:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800aa16:	e062      	b.n	800aade <USART_SetConfig+0x9e2>
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	03d09000 	.word	0x03d09000
 800aa20:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d044      	beq.n	800aab6 <USART_SetConfig+0x9ba>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d03e      	beq.n	800aab2 <USART_SetConfig+0x9b6>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d038      	beq.n	800aaae <USART_SetConfig+0x9b2>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d032      	beq.n	800aaaa <USART_SetConfig+0x9ae>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa48:	2b04      	cmp	r3, #4
 800aa4a:	d02c      	beq.n	800aaa6 <USART_SetConfig+0x9aa>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa50:	2b05      	cmp	r3, #5
 800aa52:	d026      	beq.n	800aaa2 <USART_SetConfig+0x9a6>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa58:	2b06      	cmp	r3, #6
 800aa5a:	d020      	beq.n	800aa9e <USART_SetConfig+0x9a2>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa60:	2b07      	cmp	r3, #7
 800aa62:	d01a      	beq.n	800aa9a <USART_SetConfig+0x99e>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa68:	2b08      	cmp	r3, #8
 800aa6a:	d014      	beq.n	800aa96 <USART_SetConfig+0x99a>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa70:	2b09      	cmp	r3, #9
 800aa72:	d00e      	beq.n	800aa92 <USART_SetConfig+0x996>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa78:	2b0a      	cmp	r3, #10
 800aa7a:	d008      	beq.n	800aa8e <USART_SetConfig+0x992>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa80:	2b0b      	cmp	r3, #11
 800aa82:	d102      	bne.n	800aa8a <USART_SetConfig+0x98e>
 800aa84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa88:	e016      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e014      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aa8e:	2380      	movs	r3, #128	@ 0x80
 800aa90:	e012      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aa92:	2340      	movs	r3, #64	@ 0x40
 800aa94:	e010      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aa96:	2320      	movs	r3, #32
 800aa98:	e00e      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aa9a:	2310      	movs	r3, #16
 800aa9c:	e00c      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aa9e:	230c      	movs	r3, #12
 800aaa0:	e00a      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aaa2:	230a      	movs	r3, #10
 800aaa4:	e008      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aaa6:	2308      	movs	r3, #8
 800aaa8:	e006      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aaaa:	2306      	movs	r3, #6
 800aaac:	e004      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aaae:	2304      	movs	r3, #4
 800aab0:	e002      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aab2:	2302      	movs	r3, #2
 800aab4:	e000      	b.n	800aab8 <USART_SetConfig+0x9bc>
 800aab6:	2301      	movs	r3, #1
 800aab8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800aabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac0:	005a      	lsls	r2, r3, #1
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	085b      	lsrs	r3, r3, #1
 800aac8:	441a      	add	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800aad4:	e003      	b.n	800aade <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800aadc:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	2b0f      	cmp	r3, #15
 800aae2:	d916      	bls.n	800ab12 <USART_SetConfig+0xa16>
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaea:	d212      	bcs.n	800ab12 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	f023 030f 	bic.w	r3, r3, #15
 800aaf4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf8:	085b      	lsrs	r3, r3, #1
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	f003 0307 	and.w	r3, r3, #7
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab04:	4313      	orrs	r3, r2
 800ab06:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ab0e:	60da      	str	r2, [r3, #12]
 800ab10:	e002      	b.n	800ab18 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800ab30:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3738      	adds	r7, #56	@ 0x38
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af02      	add	r7, sp, #8
 800ab42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab4a:	f7f6 ff8b 	bl	8001a64 <HAL_GetTick>
 800ab4e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0308 	and.w	r3, r3, #8
 800ab5a:	2b08      	cmp	r3, #8
 800ab5c:	d10e      	bne.n	800ab7c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800ab5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff fa8f 	bl	800a090 <USART_WaitOnFlagUntilTimeout>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d001      	beq.n	800ab7c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e01e      	b.n	800abba <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 0304 	and.w	r3, r3, #4
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	d10e      	bne.n	800aba8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800ab8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff fa79 	bl	800a090 <USART_WaitOnFlagUntilTimeout>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e008      	b.n	800abba <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b085      	sub	sp, #20
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d101      	bne.n	800abd8 <HAL_USARTEx_EnableSlaveMode+0x16>
 800abd4:	2302      	movs	r3, #2
 800abd6:	e043      	b.n	800ac60 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f022 0201 	bic.w	r2, r2, #1
 800abfe:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689a      	ldr	r2, [r3, #8]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac1e:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0201 	orr.w	r2, r2, #1
 800ac2e:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f042 0201 	orr.w	r2, r2, #1
 800ac54:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d101      	bne.n	800ac84 <HAL_USARTEx_ConfigNSS+0x18>
 800ac80:	2302      	movs	r3, #2
 800ac82:	e02a      	b.n	800acda <HAL_USARTEx_ConfigNSS+0x6e>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f022 0201 	bic.w	r2, r2, #1
 800acaa:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f023 0108 	bic.w	r1, r3, #8
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	430a      	orrs	r2, r1
 800acbe:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b085      	sub	sp, #20
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d101      	bne.n	800acfc <HAL_USARTEx_DisableFifoMode+0x16>
 800acf8:	2302      	movs	r3, #2
 800acfa:	e027      	b.n	800ad4c <HAL_USARTEx_DisableFifoMode+0x66>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f022 0201 	bic.w	r2, r2, #1
 800ad22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad2a:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d101      	bne.n	800ad70 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	e02d      	b.n	800adcc <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2202      	movs	r2, #2
 800ad7c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f022 0201 	bic.w	r2, r2, #1
 800ad96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	430a      	orrs	r2, r1
 800adaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f84f 	bl	800ae50 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d101      	bne.n	800adec <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800ade8:	2302      	movs	r3, #2
 800adea:	e02d      	b.n	800ae48 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f022 0201 	bic.w	r2, r2, #1
 800ae12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f811 	bl	800ae50 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae6c:	e02f      	b.n	800aece <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae6e:	2310      	movs	r3, #16
 800ae70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae72:	2310      	movs	r3, #16
 800ae74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800ae7c:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	f003 0307 	and.w	r3, r3, #7
 800ae84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800ae8c:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	f003 0307 	and.w	r3, r3, #7
 800ae94:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae96:	7bbb      	ldrb	r3, [r7, #14]
 800ae98:	7b3a      	ldrb	r2, [r7, #12]
 800ae9a:	4910      	ldr	r1, [pc, #64]	@ (800aedc <USARTEx_SetNbDataToProcess+0x8c>)
 800ae9c:	5c8a      	ldrb	r2, [r1, r2]
 800ae9e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800aea2:	7b3a      	ldrb	r2, [r7, #12]
 800aea4:	490e      	ldr	r1, [pc, #56]	@ (800aee0 <USARTEx_SetNbDataToProcess+0x90>)
 800aea6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aea8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	7b7a      	ldrb	r2, [r7, #13]
 800aeb6:	4909      	ldr	r1, [pc, #36]	@ (800aedc <USARTEx_SetNbDataToProcess+0x8c>)
 800aeb8:	5c8a      	ldrb	r2, [r1, r2]
 800aeba:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800aebe:	7b7a      	ldrb	r2, [r7, #13]
 800aec0:	4907      	ldr	r1, [pc, #28]	@ (800aee0 <USARTEx_SetNbDataToProcess+0x90>)
 800aec2:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aec4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800aece:	bf00      	nop
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	08013ddc 	.word	0x08013ddc
 800aee0:	08013de4 	.word	0x08013de4

0800aee4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aee4:	b084      	sub	sp, #16
 800aee6:	b480      	push	{r7}
 800aee8:	b085      	sub	sp, #20
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	f107 001c 	add.w	r0, r7, #28
 800aef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800aefa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800aefc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800aefe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800af00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800af02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800af04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800af06:	431a      	orrs	r2, r3
             Init.ClockDiv
 800af08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800af0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	4313      	orrs	r3, r2
 800af10:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	4b07      	ldr	r3, [pc, #28]	@ (800af34 <SDMMC_Init+0x50>)
 800af18:	4013      	ands	r3, r2
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	431a      	orrs	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	b004      	add	sp, #16
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	ffc02c00 	.word	0xffc02c00

0800af38 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800af46:	4618      	mov	r0, r3
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f043 0203 	orr.w	r2, r3, #3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800af96:	b480      	push	{r7}
 800af98:	b083      	sub	sp, #12
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f003 0303 	and.w	r3, r3, #3
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
	...

0800afb4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800afd2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800afd8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800afde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68da      	ldr	r2, [r3, #12]
 800afea:	4b06      	ldr	r3, [pc, #24]	@ (800b004 <SDMMC_SendCommand+0x50>)
 800afec:	4013      	ands	r3, r2
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	431a      	orrs	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	fffee0c0 	.word	0xfffee0c0

0800b008 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	b2db      	uxtb	r3, r3
}
 800b016:	4618      	mov	r0, r3
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b022:	b480      	push	{r7}
 800b024:	b085      	sub	sp, #20
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3314      	adds	r3, #20
 800b030:	461a      	mov	r2, r3
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	4413      	add	r3, r2
 800b036:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b06e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b074:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b07a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	4313      	orrs	r3, r2
 800b080:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b086:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	431a      	orrs	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b092:	2300      	movs	r3, #0

}
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b0ae:	2310      	movs	r3, #16
 800b0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0c2:	f107 0308 	add.w	r3, r7, #8
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff ff73 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b0ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0d2:	2110      	movs	r1, #16
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fa5f 	bl	800b598 <SDMMC_GetCmdResp1>
 800b0da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0dc:	69fb      	ldr	r3, [r7, #28]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3720      	adds	r7, #32
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b088      	sub	sp, #32
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b0f4:	2311      	movs	r3, #17
 800b0f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0fe:	2300      	movs	r3, #0
 800b100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b102:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b106:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b108:	f107 0308 	add.w	r3, r7, #8
 800b10c:	4619      	mov	r1, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7ff ff50 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b114:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b118:	2111      	movs	r1, #17
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fa3c 	bl	800b598 <SDMMC_GetCmdResp1>
 800b120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b122:	69fb      	ldr	r3, [r7, #28]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3720      	adds	r7, #32
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b088      	sub	sp, #32
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b13a:	2312      	movs	r3, #18
 800b13c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b13e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b144:	2300      	movs	r3, #0
 800b146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b14c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b14e:	f107 0308 	add.w	r3, r7, #8
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff ff2d 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b15a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b15e:	2112      	movs	r1, #18
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fa19 	bl	800b598 <SDMMC_GetCmdResp1>
 800b166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b168:	69fb      	ldr	r3, [r7, #28]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3720      	adds	r7, #32
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b088      	sub	sp, #32
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b180:	2318      	movs	r3, #24
 800b182:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b18a:	2300      	movs	r3, #0
 800b18c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b18e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b192:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b194:	f107 0308 	add.w	r3, r7, #8
 800b198:	4619      	mov	r1, r3
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7ff ff0a 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b1a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1a4:	2118      	movs	r1, #24
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f9f6 	bl	800b598 <SDMMC_GetCmdResp1>
 800b1ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1ae:	69fb      	ldr	r3, [r7, #28]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3720      	adds	r7, #32
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b088      	sub	sp, #32
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b1c6:	2319      	movs	r3, #25
 800b1c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b1ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b1d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1da:	f107 0308 	add.w	r3, r7, #8
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff fee7 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b1e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1ea:	2119      	movs	r1, #25
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f9d3 	bl	800b598 <SDMMC_GetCmdResp1>
 800b1f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1f4:	69fb      	ldr	r3, [r7, #28]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3720      	adds	r7, #32
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
	...

0800b200 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b088      	sub	sp, #32
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b20c:	230c      	movs	r3, #12
 800b20e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b216:	2300      	movs	r3, #0
 800b218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b21a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b21e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b238:	f107 0308 	add.w	r3, r7, #8
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7ff feb8 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b244:	4a0b      	ldr	r2, [pc, #44]	@ (800b274 <SDMMC_CmdStopTransfer+0x74>)
 800b246:	210c      	movs	r1, #12
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f9a5 	bl	800b598 <SDMMC_GetCmdResp1>
 800b24e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b262:	d101      	bne.n	800b268 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b264:	2300      	movs	r3, #0
 800b266:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b268:	69fb      	ldr	r3, [r7, #28]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3720      	adds	r7, #32
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	05f5e100 	.word	0x05f5e100

0800b278 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b088      	sub	sp, #32
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b286:	2307      	movs	r3, #7
 800b288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b28a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b28e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b290:	2300      	movs	r3, #0
 800b292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b298:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b29a:	f107 0308 	add.w	r3, r7, #8
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7ff fe87 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b2a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2aa:	2107      	movs	r1, #7
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f973 	bl	800b598 <SDMMC_GetCmdResp1>
 800b2b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3720      	adds	r7, #32
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b088      	sub	sp, #32
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2dc:	f107 0308 	add.w	r3, r7, #8
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7ff fe66 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fb97 	bl	800ba1c <SDMMC_GetCmdError>
 800b2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2f0:	69fb      	ldr	r3, [r7, #28]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3720      	adds	r7, #32
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b088      	sub	sp, #32
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b302:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b308:	2308      	movs	r3, #8
 800b30a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b30c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b312:	2300      	movs	r3, #0
 800b314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b31a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b31c:	f107 0308 	add.w	r3, r7, #8
 800b320:	4619      	mov	r1, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff fe46 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fb29 	bl	800b980 <SDMMC_GetCmdResp7>
 800b32e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b330:	69fb      	ldr	r3, [r7, #28]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3720      	adds	r7, #32
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b088      	sub	sp, #32
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b348:	2337      	movs	r3, #55	@ 0x37
 800b34a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b34c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b350:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b352:	2300      	movs	r3, #0
 800b354:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b35a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b35c:	f107 0308 	add.w	r3, r7, #8
 800b360:	4619      	mov	r1, r3
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7ff fe26 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b36c:	2137      	movs	r1, #55	@ 0x37
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f912 	bl	800b598 <SDMMC_GetCmdResp1>
 800b374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b376:	69fb      	ldr	r3, [r7, #28]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3720      	adds	r7, #32
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b088      	sub	sp, #32
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b38e:	2329      	movs	r3, #41	@ 0x29
 800b390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b392:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b398:	2300      	movs	r3, #0
 800b39a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b39c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3a2:	f107 0308 	add.w	r3, r7, #8
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7ff fe03 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa2e 	bl	800b810 <SDMMC_GetCmdResp3>
 800b3b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3b6:	69fb      	ldr	r3, [r7, #28]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3720      	adds	r7, #32
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b088      	sub	sp, #32
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b3ce:	2306      	movs	r3, #6
 800b3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3e2:	f107 0308 	add.w	r3, r7, #8
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff fde3 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b3ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3f2:	2106      	movs	r1, #6
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 f8cf 	bl	800b598 <SDMMC_GetCmdResp1>
 800b3fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3fc:	69fb      	ldr	r3, [r7, #28]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3720      	adds	r7, #32
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b088      	sub	sp, #32
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b40e:	2300      	movs	r3, #0
 800b410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b412:	2333      	movs	r3, #51	@ 0x33
 800b414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b416:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b41a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b424:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b426:	f107 0308 	add.w	r3, r7, #8
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7ff fdc1 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b432:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b436:	2133      	movs	r1, #51	@ 0x33
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f8ad 	bl	800b598 <SDMMC_GetCmdResp1>
 800b43e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b440:	69fb      	ldr	r3, [r7, #28]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3720      	adds	r7, #32
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b088      	sub	sp, #32
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b456:	2302      	movs	r3, #2
 800b458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b45a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b45e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b460:	2300      	movs	r3, #0
 800b462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b468:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b46a:	f107 0308 	add.w	r3, r7, #8
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff fd9f 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f980 	bl	800b77c <SDMMC_GetCmdResp2>
 800b47c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b47e:	69fb      	ldr	r3, [r7, #28]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3720      	adds	r7, #32
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b496:	2309      	movs	r3, #9
 800b498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b49a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b49e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4aa:	f107 0308 	add.w	r3, r7, #8
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff fd7f 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f960 	bl	800b77c <SDMMC_GetCmdResp2>
 800b4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4be:	69fb      	ldr	r3, [r7, #28]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3720      	adds	r7, #32
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ea:	f107 0308 	add.w	r3, r7, #8
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7ff fd5f 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	2103      	movs	r1, #3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f9c8 	bl	800b890 <SDMMC_GetCmdResp6>
 800b500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b502:	69fb      	ldr	r3, [r7, #28]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3720      	adds	r7, #32
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b088      	sub	sp, #32
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b51a:	230d      	movs	r3, #13
 800b51c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b51e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b524:	2300      	movs	r3, #0
 800b526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b52c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b52e:	f107 0308 	add.w	r3, r7, #8
 800b532:	4619      	mov	r1, r3
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7ff fd3d 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b53a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b53e:	210d      	movs	r1, #13
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f829 	bl	800b598 <SDMMC_GetCmdResp1>
 800b546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b548:	69fb      	ldr	r3, [r7, #28]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3720      	adds	r7, #32
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b088      	sub	sp, #32
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b55e:	230d      	movs	r3, #13
 800b560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b562:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b568:	2300      	movs	r3, #0
 800b56a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b56c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b570:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b572:	f107 0308 	add.w	r3, r7, #8
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7ff fd1b 	bl	800afb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b57e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b582:	210d      	movs	r1, #13
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f807 	bl	800b598 <SDMMC_GetCmdResp1>
 800b58a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b58c:	69fb      	ldr	r3, [r7, #28]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3720      	adds	r7, #32
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b5a6:	4b70      	ldr	r3, [pc, #448]	@ (800b768 <SDMMC_GetCmdResp1+0x1d0>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a70      	ldr	r2, [pc, #448]	@ (800b76c <SDMMC_GetCmdResp1+0x1d4>)
 800b5ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b0:	0a5a      	lsrs	r2, r3, #9
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	fb02 f303 	mul.w	r3, r2, r3
 800b5b8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	1e5a      	subs	r2, r3, #1
 800b5be:	61fa      	str	r2, [r7, #28]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b5c8:	e0c9      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ce:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b5d0:	69ba      	ldr	r2, [r7, #24]
 800b5d2:	4b67      	ldr	r3, [pc, #412]	@ (800b770 <SDMMC_GetCmdResp1+0x1d8>)
 800b5d4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d0ef      	beq.n	800b5ba <SDMMC_GetCmdResp1+0x22>
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1ea      	bne.n	800b5ba <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5e8:	f003 0304 	and.w	r3, r3, #4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d004      	beq.n	800b5fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2204      	movs	r2, #4
 800b5f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5f6:	2304      	movs	r3, #4
 800b5f8:	e0b1      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	2b00      	cmp	r3, #0
 800b604:	d004      	beq.n	800b610 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2201      	movs	r2, #1
 800b60a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e0a6      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	4a58      	ldr	r2, [pc, #352]	@ (800b774 <SDMMC_GetCmdResp1+0x1dc>)
 800b614:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f7ff fcf6 	bl	800b008 <SDMMC_GetCommandResponse>
 800b61c:	4603      	mov	r3, r0
 800b61e:	461a      	mov	r2, r3
 800b620:	7afb      	ldrb	r3, [r7, #11]
 800b622:	4293      	cmp	r3, r2
 800b624:	d001      	beq.n	800b62a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b626:	2301      	movs	r3, #1
 800b628:	e099      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b62a:	2100      	movs	r1, #0
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7ff fcf8 	bl	800b022 <SDMMC_GetResponse>
 800b632:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b634:	697a      	ldr	r2, [r7, #20]
 800b636:	4b50      	ldr	r3, [pc, #320]	@ (800b778 <SDMMC_GetCmdResp1+0x1e0>)
 800b638:	4013      	ands	r3, r2
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b63e:	2300      	movs	r3, #0
 800b640:	e08d      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	da02      	bge.n	800b64e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b648:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b64c:	e087      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d001      	beq.n	800b65c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b658:	2340      	movs	r3, #64	@ 0x40
 800b65a:	e080      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b666:	2380      	movs	r3, #128	@ 0x80
 800b668:	e079      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b674:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b678:	e071      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b684:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b688:	e069      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b694:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b698:	e061      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b6a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b6a8:	e059      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b6b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6b8:	e051      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d002      	beq.n	800b6ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b6c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b6c8:	e049      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b6d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b6d8:	e041      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b6e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6e8:	e039      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b6f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b6f8:	e031      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b704:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b708:	e029      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b714:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b718:	e021      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b720:	2b00      	cmp	r3, #0
 800b722:	d002      	beq.n	800b72a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b724:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b728:	e019      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b734:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b738:	e011      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b744:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b748:	e009      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f003 0308 	and.w	r3, r3, #8
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b754:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b758:	e001      	b.n	800b75e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b75a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3720      	adds	r7, #32
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	24000000 	.word	0x24000000
 800b76c:	10624dd3 	.word	0x10624dd3
 800b770:	00200045 	.word	0x00200045
 800b774:	002000c5 	.word	0x002000c5
 800b778:	fdffe008 	.word	0xfdffe008

0800b77c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b784:	4b1f      	ldr	r3, [pc, #124]	@ (800b804 <SDMMC_GetCmdResp2+0x88>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a1f      	ldr	r2, [pc, #124]	@ (800b808 <SDMMC_GetCmdResp2+0x8c>)
 800b78a:	fba2 2303 	umull	r2, r3, r2, r3
 800b78e:	0a5b      	lsrs	r3, r3, #9
 800b790:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b794:	fb02 f303 	mul.w	r3, r2, r3
 800b798:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	1e5a      	subs	r2, r3, #1
 800b79e:	60fa      	str	r2, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d102      	bne.n	800b7aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b7a8:	e026      	b.n	800b7f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d0ef      	beq.n	800b79a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1ea      	bne.n	800b79a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7c8:	f003 0304 	and.w	r3, r3, #4
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d004      	beq.n	800b7da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2204      	movs	r2, #4
 800b7d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7d6:	2304      	movs	r3, #4
 800b7d8:	e00e      	b.n	800b7f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d004      	beq.n	800b7f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e003      	b.n	800b7f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a06      	ldr	r2, [pc, #24]	@ (800b80c <SDMMC_GetCmdResp2+0x90>)
 800b7f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	24000000 	.word	0x24000000
 800b808:	10624dd3 	.word	0x10624dd3
 800b80c:	002000c5 	.word	0x002000c5

0800b810 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b818:	4b1a      	ldr	r3, [pc, #104]	@ (800b884 <SDMMC_GetCmdResp3+0x74>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a1a      	ldr	r2, [pc, #104]	@ (800b888 <SDMMC_GetCmdResp3+0x78>)
 800b81e:	fba2 2303 	umull	r2, r3, r2, r3
 800b822:	0a5b      	lsrs	r3, r3, #9
 800b824:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b828:	fb02 f303 	mul.w	r3, r2, r3
 800b82c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	1e5a      	subs	r2, r3, #1
 800b832:	60fa      	str	r2, [r7, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d102      	bne.n	800b83e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b838:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b83c:	e01b      	b.n	800b876 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b842:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d0ef      	beq.n	800b82e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1ea      	bne.n	800b82e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d004      	beq.n	800b86e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2204      	movs	r2, #4
 800b868:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b86a:	2304      	movs	r3, #4
 800b86c:	e003      	b.n	800b876 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a06      	ldr	r2, [pc, #24]	@ (800b88c <SDMMC_GetCmdResp3+0x7c>)
 800b872:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	24000000 	.word	0x24000000
 800b888:	10624dd3 	.word	0x10624dd3
 800b88c:	002000c5 	.word	0x002000c5

0800b890 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	460b      	mov	r3, r1
 800b89a:	607a      	str	r2, [r7, #4]
 800b89c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b89e:	4b35      	ldr	r3, [pc, #212]	@ (800b974 <SDMMC_GetCmdResp6+0xe4>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a35      	ldr	r2, [pc, #212]	@ (800b978 <SDMMC_GetCmdResp6+0xe8>)
 800b8a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a8:	0a5b      	lsrs	r3, r3, #9
 800b8aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8ae:	fb02 f303 	mul.w	r3, r2, r3
 800b8b2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	1e5a      	subs	r2, r3, #1
 800b8b8:	61fa      	str	r2, [r7, #28]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d102      	bne.n	800b8c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b8c2:	e052      	b.n	800b96a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8c8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d0ef      	beq.n	800b8b4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1ea      	bne.n	800b8b4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8e2:	f003 0304 	and.w	r3, r3, #4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d004      	beq.n	800b8f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2204      	movs	r2, #4
 800b8ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8f0:	2304      	movs	r3, #4
 800b8f2:	e03a      	b.n	800b96a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8f8:	f003 0301 	and.w	r3, r3, #1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d004      	beq.n	800b90a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2201      	movs	r2, #1
 800b904:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b906:	2301      	movs	r3, #1
 800b908:	e02f      	b.n	800b96a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f7ff fb7c 	bl	800b008 <SDMMC_GetCommandResponse>
 800b910:	4603      	mov	r3, r0
 800b912:	461a      	mov	r2, r3
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	4293      	cmp	r3, r2
 800b918:	d001      	beq.n	800b91e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e025      	b.n	800b96a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	4a16      	ldr	r2, [pc, #88]	@ (800b97c <SDMMC_GetCmdResp6+0xec>)
 800b922:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b924:	2100      	movs	r1, #0
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f7ff fb7b 	bl	800b022 <SDMMC_GetResponse>
 800b92c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b934:	2b00      	cmp	r3, #0
 800b936:	d106      	bne.n	800b946 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	0c1b      	lsrs	r3, r3, #16
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b942:	2300      	movs	r3, #0
 800b944:	e011      	b.n	800b96a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b954:	e009      	b.n	800b96a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b964:	e001      	b.n	800b96a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b966:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3720      	adds	r7, #32
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	24000000 	.word	0x24000000
 800b978:	10624dd3 	.word	0x10624dd3
 800b97c:	002000c5 	.word	0x002000c5

0800b980 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b988:	4b22      	ldr	r3, [pc, #136]	@ (800ba14 <SDMMC_GetCmdResp7+0x94>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a22      	ldr	r2, [pc, #136]	@ (800ba18 <SDMMC_GetCmdResp7+0x98>)
 800b98e:	fba2 2303 	umull	r2, r3, r2, r3
 800b992:	0a5b      	lsrs	r3, r3, #9
 800b994:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b998:	fb02 f303 	mul.w	r3, r2, r3
 800b99c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	1e5a      	subs	r2, r3, #1
 800b9a2:	60fa      	str	r2, [r7, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d102      	bne.n	800b9ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b9ac:	e02c      	b.n	800ba08 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0ef      	beq.n	800b99e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1ea      	bne.n	800b99e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9cc:	f003 0304 	and.w	r3, r3, #4
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d004      	beq.n	800b9de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2204      	movs	r2, #4
 800b9d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9da:	2304      	movs	r3, #4
 800b9dc:	e014      	b.n	800ba08 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d004      	beq.n	800b9f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e009      	b.n	800ba08 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2240      	movs	r2, #64	@ 0x40
 800ba04:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba06:	2300      	movs	r3, #0

}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	24000000 	.word	0x24000000
 800ba18:	10624dd3 	.word	0x10624dd3

0800ba1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba24:	4b11      	ldr	r3, [pc, #68]	@ (800ba6c <SDMMC_GetCmdError+0x50>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a11      	ldr	r2, [pc, #68]	@ (800ba70 <SDMMC_GetCmdError+0x54>)
 800ba2a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2e:	0a5b      	lsrs	r3, r3, #9
 800ba30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba34:	fb02 f303 	mul.w	r3, r2, r3
 800ba38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	1e5a      	subs	r2, r3, #1
 800ba3e:	60fa      	str	r2, [r7, #12]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d102      	bne.n	800ba4a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba48:	e009      	b.n	800ba5e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d0f1      	beq.n	800ba3a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a06      	ldr	r2, [pc, #24]	@ (800ba74 <SDMMC_GetCmdError+0x58>)
 800ba5a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	24000000 	.word	0x24000000
 800ba70:	10624dd3 	.word	0x10624dd3
 800ba74:	002000c5 	.word	0x002000c5

0800ba78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba78:	b084      	sub	sp, #16
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	f107 001c 	add.w	r0, r7, #28
 800ba86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d121      	bne.n	800bad6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68da      	ldr	r2, [r3, #12]
 800baa2:	4b2c      	ldr	r3, [pc, #176]	@ (800bb54 <USB_CoreInit+0xdc>)
 800baa4:	4013      	ands	r3, r2
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bab6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800baba:	2b01      	cmp	r3, #1
 800babc:	d105      	bne.n	800baca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f001 faf6 	bl	800d0bc <USB_CoreReset>
 800bad0:	4603      	mov	r3, r0
 800bad2:	73fb      	strb	r3, [r7, #15]
 800bad4:	e01b      	b.n	800bb0e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f001 faea 	bl	800d0bc <USB_CoreReset>
 800bae8:	4603      	mov	r3, r0
 800baea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800baec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d106      	bne.n	800bb02 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baf8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	639a      	str	r2, [r3, #56]	@ 0x38
 800bb00:	e005      	b.n	800bb0e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bb0e:	7fbb      	ldrb	r3, [r7, #30]
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d116      	bne.n	800bb42 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb22:	4b0d      	ldr	r3, [pc, #52]	@ (800bb58 <USB_CoreInit+0xe0>)
 800bb24:	4313      	orrs	r3, r2
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f043 0206 	orr.w	r2, r3, #6
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	f043 0220 	orr.w	r2, r3, #32
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb4e:	b004      	add	sp, #16
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	ffbdffbf 	.word	0xffbdffbf
 800bb58:	03ee0000 	.word	0x03ee0000

0800bb5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	4613      	mov	r3, r2
 800bb68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bb6a:	79fb      	ldrb	r3, [r7, #7]
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d165      	bne.n	800bc3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	4a41      	ldr	r2, [pc, #260]	@ (800bc78 <USB_SetTurnaroundTime+0x11c>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d906      	bls.n	800bb86 <USB_SetTurnaroundTime+0x2a>
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	4a40      	ldr	r2, [pc, #256]	@ (800bc7c <USB_SetTurnaroundTime+0x120>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d202      	bcs.n	800bb86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bb80:	230f      	movs	r3, #15
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	e062      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	4a3c      	ldr	r2, [pc, #240]	@ (800bc7c <USB_SetTurnaroundTime+0x120>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d306      	bcc.n	800bb9c <USB_SetTurnaroundTime+0x40>
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	4a3b      	ldr	r2, [pc, #236]	@ (800bc80 <USB_SetTurnaroundTime+0x124>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d202      	bcs.n	800bb9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bb96:	230e      	movs	r3, #14
 800bb98:	617b      	str	r3, [r7, #20]
 800bb9a:	e057      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	4a38      	ldr	r2, [pc, #224]	@ (800bc80 <USB_SetTurnaroundTime+0x124>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d306      	bcc.n	800bbb2 <USB_SetTurnaroundTime+0x56>
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	4a37      	ldr	r2, [pc, #220]	@ (800bc84 <USB_SetTurnaroundTime+0x128>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d202      	bcs.n	800bbb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bbac:	230d      	movs	r3, #13
 800bbae:	617b      	str	r3, [r7, #20]
 800bbb0:	e04c      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	4a33      	ldr	r2, [pc, #204]	@ (800bc84 <USB_SetTurnaroundTime+0x128>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d306      	bcc.n	800bbc8 <USB_SetTurnaroundTime+0x6c>
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	4a32      	ldr	r2, [pc, #200]	@ (800bc88 <USB_SetTurnaroundTime+0x12c>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d802      	bhi.n	800bbc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bbc2:	230c      	movs	r3, #12
 800bbc4:	617b      	str	r3, [r7, #20]
 800bbc6:	e041      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	4a2f      	ldr	r2, [pc, #188]	@ (800bc88 <USB_SetTurnaroundTime+0x12c>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d906      	bls.n	800bbde <USB_SetTurnaroundTime+0x82>
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	4a2e      	ldr	r2, [pc, #184]	@ (800bc8c <USB_SetTurnaroundTime+0x130>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d802      	bhi.n	800bbde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bbd8:	230b      	movs	r3, #11
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	e036      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	4a2a      	ldr	r2, [pc, #168]	@ (800bc8c <USB_SetTurnaroundTime+0x130>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d906      	bls.n	800bbf4 <USB_SetTurnaroundTime+0x98>
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	4a29      	ldr	r2, [pc, #164]	@ (800bc90 <USB_SetTurnaroundTime+0x134>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d802      	bhi.n	800bbf4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bbee:	230a      	movs	r3, #10
 800bbf0:	617b      	str	r3, [r7, #20]
 800bbf2:	e02b      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	4a26      	ldr	r2, [pc, #152]	@ (800bc90 <USB_SetTurnaroundTime+0x134>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d906      	bls.n	800bc0a <USB_SetTurnaroundTime+0xae>
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	4a25      	ldr	r2, [pc, #148]	@ (800bc94 <USB_SetTurnaroundTime+0x138>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d202      	bcs.n	800bc0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bc04:	2309      	movs	r3, #9
 800bc06:	617b      	str	r3, [r7, #20]
 800bc08:	e020      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	4a21      	ldr	r2, [pc, #132]	@ (800bc94 <USB_SetTurnaroundTime+0x138>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d306      	bcc.n	800bc20 <USB_SetTurnaroundTime+0xc4>
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	4a20      	ldr	r2, [pc, #128]	@ (800bc98 <USB_SetTurnaroundTime+0x13c>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d802      	bhi.n	800bc20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bc1a:	2308      	movs	r3, #8
 800bc1c:	617b      	str	r3, [r7, #20]
 800bc1e:	e015      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	4a1d      	ldr	r2, [pc, #116]	@ (800bc98 <USB_SetTurnaroundTime+0x13c>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d906      	bls.n	800bc36 <USB_SetTurnaroundTime+0xda>
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	4a1c      	ldr	r2, [pc, #112]	@ (800bc9c <USB_SetTurnaroundTime+0x140>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d202      	bcs.n	800bc36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bc30:	2307      	movs	r3, #7
 800bc32:	617b      	str	r3, [r7, #20]
 800bc34:	e00a      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bc36:	2306      	movs	r3, #6
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	e007      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bc42:	2309      	movs	r3, #9
 800bc44:	617b      	str	r3, [r7, #20]
 800bc46:	e001      	b.n	800bc4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bc48:	2309      	movs	r3, #9
 800bc4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	68da      	ldr	r2, [r3, #12]
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	029b      	lsls	r3, r3, #10
 800bc60:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800bc64:	431a      	orrs	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	371c      	adds	r7, #28
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	00d8acbf 	.word	0x00d8acbf
 800bc7c:	00e4e1c0 	.word	0x00e4e1c0
 800bc80:	00f42400 	.word	0x00f42400
 800bc84:	01067380 	.word	0x01067380
 800bc88:	011a499f 	.word	0x011a499f
 800bc8c:	01312cff 	.word	0x01312cff
 800bc90:	014ca43f 	.word	0x014ca43f
 800bc94:	016e3600 	.word	0x016e3600
 800bc98:	01a6ab1f 	.word	0x01a6ab1f
 800bc9c:	01e84800 	.word	0x01e84800

0800bca0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	f043 0201 	orr.w	r2, r3, #1
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	370c      	adds	r7, #12
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr

0800bcc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcc2:	b480      	push	{r7}
 800bcc4:	b083      	sub	sp, #12
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	f023 0201 	bic.w	r2, r3, #1
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bd00:	78fb      	ldrb	r3, [r7, #3]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d115      	bne.n	800bd32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd12:	200a      	movs	r0, #10
 800bd14:	f7f5 feb2 	bl	8001a7c <HAL_Delay>
      ms += 10U;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	330a      	adds	r3, #10
 800bd1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f001 f93b 	bl	800cf9a <USB_GetMode>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d01e      	beq.n	800bd68 <USB_SetCurrentMode+0x84>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2bc7      	cmp	r3, #199	@ 0xc7
 800bd2e:	d9f0      	bls.n	800bd12 <USB_SetCurrentMode+0x2e>
 800bd30:	e01a      	b.n	800bd68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bd32:	78fb      	ldrb	r3, [r7, #3]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d115      	bne.n	800bd64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd44:	200a      	movs	r0, #10
 800bd46:	f7f5 fe99 	bl	8001a7c <HAL_Delay>
      ms += 10U;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	330a      	adds	r3, #10
 800bd4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f001 f922 	bl	800cf9a <USB_GetMode>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d005      	beq.n	800bd68 <USB_SetCurrentMode+0x84>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2bc7      	cmp	r3, #199	@ 0xc7
 800bd60:	d9f0      	bls.n	800bd44 <USB_SetCurrentMode+0x60>
 800bd62:	e001      	b.n	800bd68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e005      	b.n	800bd74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2bc8      	cmp	r3, #200	@ 0xc8
 800bd6c:	d101      	bne.n	800bd72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e000      	b.n	800bd74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b086      	sub	sp, #24
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bd8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bd96:	2300      	movs	r3, #0
 800bd98:	613b      	str	r3, [r7, #16]
 800bd9a:	e009      	b.n	800bdb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	3340      	adds	r3, #64	@ 0x40
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	2200      	movs	r2, #0
 800bda8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	3301      	adds	r3, #1
 800bdae:	613b      	str	r3, [r7, #16]
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	2b0e      	cmp	r3, #14
 800bdb4:	d9f2      	bls.n	800bd9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bdb6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d11c      	bne.n	800bdf8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdcc:	f043 0302 	orr.w	r3, r3, #2
 800bdd0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdd6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	601a      	str	r2, [r3, #0]
 800bdf6:	e005      	b.n	800be04 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdfc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be0a:	461a      	mov	r2, r3
 800be0c:	2300      	movs	r3, #0
 800be0e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be10:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800be14:	2b01      	cmp	r3, #1
 800be16:	d10d      	bne.n	800be34 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800be18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d104      	bne.n	800be2a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800be20:	2100      	movs	r1, #0
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f968 	bl	800c0f8 <USB_SetDevSpeed>
 800be28:	e008      	b.n	800be3c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800be2a:	2101      	movs	r1, #1
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f963 	bl	800c0f8 <USB_SetDevSpeed>
 800be32:	e003      	b.n	800be3c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800be34:	2103      	movs	r1, #3
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f95e 	bl	800c0f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be3c:	2110      	movs	r1, #16
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f8fa 	bl	800c038 <USB_FlushTxFifo>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f924 	bl	800c09c <USB_FlushRxFifo>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d001      	beq.n	800be5e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be64:	461a      	mov	r2, r3
 800be66:	2300      	movs	r3, #0
 800be68:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be70:	461a      	mov	r2, r3
 800be72:	2300      	movs	r3, #0
 800be74:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be7c:	461a      	mov	r2, r3
 800be7e:	2300      	movs	r3, #0
 800be80:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be82:	2300      	movs	r3, #0
 800be84:	613b      	str	r3, [r7, #16]
 800be86:	e043      	b.n	800bf10 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be9e:	d118      	bne.n	800bed2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10a      	bne.n	800bebc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	015a      	lsls	r2, r3, #5
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	4413      	add	r3, r2
 800beae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beb2:	461a      	mov	r2, r3
 800beb4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800beb8:	6013      	str	r3, [r2, #0]
 800beba:	e013      	b.n	800bee4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	015a      	lsls	r2, r3, #5
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bec8:	461a      	mov	r2, r3
 800beca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bece:	6013      	str	r3, [r2, #0]
 800bed0:	e008      	b.n	800bee4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	015a      	lsls	r2, r3, #5
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	4413      	add	r3, r2
 800beda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bede:	461a      	mov	r2, r3
 800bee0:	2300      	movs	r3, #0
 800bee2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	015a      	lsls	r2, r3, #5
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	4413      	add	r3, r2
 800beec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bef0:	461a      	mov	r2, r3
 800bef2:	2300      	movs	r3, #0
 800bef4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	015a      	lsls	r2, r3, #5
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	4413      	add	r3, r2
 800befe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf02:	461a      	mov	r2, r3
 800bf04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bf08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	613b      	str	r3, [r7, #16]
 800bf10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bf14:	461a      	mov	r2, r3
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d3b5      	bcc.n	800be88 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	613b      	str	r3, [r7, #16]
 800bf20:	e043      	b.n	800bfaa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	015a      	lsls	r2, r3, #5
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	4413      	add	r3, r2
 800bf2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf38:	d118      	bne.n	800bf6c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10a      	bne.n	800bf56 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	015a      	lsls	r2, r3, #5
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	4413      	add	r3, r2
 800bf48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	e013      	b.n	800bf7e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	015a      	lsls	r2, r3, #5
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf62:	461a      	mov	r2, r3
 800bf64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bf68:	6013      	str	r3, [r2, #0]
 800bf6a:	e008      	b.n	800bf7e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	015a      	lsls	r2, r3, #5
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	4413      	add	r3, r2
 800bf74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf78:	461a      	mov	r2, r3
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	015a      	lsls	r2, r3, #5
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	4413      	add	r3, r2
 800bf86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bfa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	613b      	str	r3, [r7, #16]
 800bfaa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bfae:	461a      	mov	r2, r3
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d3b5      	bcc.n	800bf22 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bfc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfc8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bfd6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bfd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d105      	bne.n	800bfec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	f043 0210 	orr.w	r2, r3, #16
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	699a      	ldr	r2, [r3, #24]
 800bff0:	4b0f      	ldr	r3, [pc, #60]	@ (800c030 <USB_DevInit+0x2b4>)
 800bff2:	4313      	orrs	r3, r2
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bff8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d005      	beq.n	800c00c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	f043 0208 	orr.w	r2, r3, #8
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c00c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c010:	2b01      	cmp	r3, #1
 800c012:	d105      	bne.n	800c020 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	699a      	ldr	r2, [r3, #24]
 800c018:	4b06      	ldr	r3, [pc, #24]	@ (800c034 <USB_DevInit+0x2b8>)
 800c01a:	4313      	orrs	r3, r2
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c020:	7dfb      	ldrb	r3, [r7, #23]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c02c:	b004      	add	sp, #16
 800c02e:	4770      	bx	lr
 800c030:	803c3800 	.word	0x803c3800
 800c034:	40000004 	.word	0x40000004

0800c038 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c042:	2300      	movs	r3, #0
 800c044:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	3301      	adds	r3, #1
 800c04a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c052:	d901      	bls.n	800c058 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c054:	2303      	movs	r3, #3
 800c056:	e01b      	b.n	800c090 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	daf2      	bge.n	800c046 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c060:	2300      	movs	r3, #0
 800c062:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	019b      	lsls	r3, r3, #6
 800c068:	f043 0220 	orr.w	r2, r3, #32
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	3301      	adds	r3, #1
 800c074:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c07c:	d901      	bls.n	800c082 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c07e:	2303      	movs	r3, #3
 800c080:	e006      	b.n	800c090 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	f003 0320 	and.w	r3, r3, #32
 800c08a:	2b20      	cmp	r3, #32
 800c08c:	d0f0      	beq.n	800c070 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c0b4:	d901      	bls.n	800c0ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e018      	b.n	800c0ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	daf2      	bge.n	800c0a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2210      	movs	r2, #16
 800c0ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c0d8:	d901      	bls.n	800c0de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e006      	b.n	800c0ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	f003 0310 	and.w	r3, r3, #16
 800c0e6:	2b10      	cmp	r3, #16
 800c0e8:	d0f0      	beq.n	800c0cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	68f9      	ldr	r1, [r7, #12]
 800c114:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c118:	4313      	orrs	r3, r2
 800c11a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b087      	sub	sp, #28
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	f003 0306 	and.w	r3, r3, #6
 800c142:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d102      	bne.n	800c150 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c14a:	2300      	movs	r3, #0
 800c14c:	75fb      	strb	r3, [r7, #23]
 800c14e:	e00a      	b.n	800c166 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b02      	cmp	r3, #2
 800c154:	d002      	beq.n	800c15c <USB_GetDevSpeed+0x32>
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b06      	cmp	r3, #6
 800c15a:	d102      	bne.n	800c162 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c15c:	2302      	movs	r3, #2
 800c15e:	75fb      	strb	r3, [r7, #23]
 800c160:	e001      	b.n	800c166 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c162:	230f      	movs	r3, #15
 800c164:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c166:	7dfb      	ldrb	r3, [r7, #23]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	371c      	adds	r7, #28
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	785b      	ldrb	r3, [r3, #1]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d139      	bne.n	800c204 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c196:	69da      	ldr	r2, [r3, #28]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	f003 030f 	and.w	r3, r3, #15
 800c1a0:	2101      	movs	r1, #1
 800c1a2:	fa01 f303 	lsl.w	r3, r1, r3
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	68f9      	ldr	r1, [r7, #12]
 800c1aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d153      	bne.n	800c270 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	015a      	lsls	r2, r3, #5
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	791b      	ldrb	r3, [r3, #4]
 800c1e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c1e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	059b      	lsls	r3, r3, #22
 800c1ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c1ec:	431a      	orrs	r2, r3
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	0159      	lsls	r1, r3, #5
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	440b      	add	r3, r1
 800c1f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	4b20      	ldr	r3, [pc, #128]	@ (800c280 <USB_ActivateEndpoint+0x10c>)
 800c1fe:	4313      	orrs	r3, r2
 800c200:	600b      	str	r3, [r1, #0]
 800c202:	e035      	b.n	800c270 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c20a:	69da      	ldr	r2, [r3, #28]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	f003 030f 	and.w	r3, r3, #15
 800c214:	2101      	movs	r1, #1
 800c216:	fa01 f303 	lsl.w	r3, r1, r3
 800c21a:	041b      	lsls	r3, r3, #16
 800c21c:	68f9      	ldr	r1, [r7, #12]
 800c21e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c222:	4313      	orrs	r3, r2
 800c224:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d119      	bne.n	800c270 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	4413      	add	r3, r2
 800c244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	791b      	ldrb	r3, [r3, #4]
 800c256:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c258:	430b      	orrs	r3, r1
 800c25a:	431a      	orrs	r2, r3
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	0159      	lsls	r1, r3, #5
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	440b      	add	r3, r1
 800c264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c268:	4619      	mov	r1, r3
 800c26a:	4b05      	ldr	r3, [pc, #20]	@ (800c280 <USB_ActivateEndpoint+0x10c>)
 800c26c:	4313      	orrs	r3, r2
 800c26e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3714      	adds	r7, #20
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	10008000 	.word	0x10008000

0800c284 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	785b      	ldrb	r3, [r3, #1]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d161      	bne.n	800c364 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	015a      	lsls	r2, r3, #5
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2b6:	d11f      	bne.n	800c2f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	015a      	lsls	r2, r3, #5
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	4413      	add	r3, r2
 800c2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	0151      	lsls	r1, r2, #5
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	440a      	add	r2, r1
 800c2ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c2d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	015a      	lsls	r2, r3, #5
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	0151      	lsls	r1, r2, #5
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	440a      	add	r2, r1
 800c2ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c2f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	f003 030f 	and.w	r3, r3, #15
 800c308:	2101      	movs	r1, #1
 800c30a:	fa01 f303 	lsl.w	r3, r1, r3
 800c30e:	b29b      	uxth	r3, r3
 800c310:	43db      	mvns	r3, r3
 800c312:	68f9      	ldr	r1, [r7, #12]
 800c314:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c318:	4013      	ands	r3, r2
 800c31a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c322:	69da      	ldr	r2, [r3, #28]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	f003 030f 	and.w	r3, r3, #15
 800c32c:	2101      	movs	r1, #1
 800c32e:	fa01 f303 	lsl.w	r3, r1, r3
 800c332:	b29b      	uxth	r3, r3
 800c334:	43db      	mvns	r3, r3
 800c336:	68f9      	ldr	r1, [r7, #12]
 800c338:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c33c:	4013      	ands	r3, r2
 800c33e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	015a      	lsls	r2, r3, #5
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	4413      	add	r3, r2
 800c348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	0159      	lsls	r1, r3, #5
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	440b      	add	r3, r1
 800c356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c35a:	4619      	mov	r1, r3
 800c35c:	4b35      	ldr	r3, [pc, #212]	@ (800c434 <USB_DeactivateEndpoint+0x1b0>)
 800c35e:	4013      	ands	r3, r2
 800c360:	600b      	str	r3, [r1, #0]
 800c362:	e060      	b.n	800c426 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	015a      	lsls	r2, r3, #5
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	4413      	add	r3, r2
 800c36c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c376:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c37a:	d11f      	bne.n	800c3bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	015a      	lsls	r2, r3, #5
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	4413      	add	r3, r2
 800c384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	0151      	lsls	r1, r2, #5
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	440a      	add	r2, r1
 800c392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c396:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c39a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	015a      	lsls	r2, r3, #5
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	0151      	lsls	r1, r2, #5
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	440a      	add	r2, r1
 800c3b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c3ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	f003 030f 	and.w	r3, r3, #15
 800c3cc:	2101      	movs	r1, #1
 800c3ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c3d2:	041b      	lsls	r3, r3, #16
 800c3d4:	43db      	mvns	r3, r3
 800c3d6:	68f9      	ldr	r1, [r7, #12]
 800c3d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c3dc:	4013      	ands	r3, r2
 800c3de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3e6:	69da      	ldr	r2, [r3, #28]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	f003 030f 	and.w	r3, r3, #15
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c3f6:	041b      	lsls	r3, r3, #16
 800c3f8:	43db      	mvns	r3, r3
 800c3fa:	68f9      	ldr	r1, [r7, #12]
 800c3fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c400:	4013      	ands	r3, r2
 800c402:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	0159      	lsls	r1, r3, #5
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	440b      	add	r3, r1
 800c41a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c41e:	4619      	mov	r1, r3
 800c420:	4b05      	ldr	r3, [pc, #20]	@ (800c438 <USB_DeactivateEndpoint+0x1b4>)
 800c422:	4013      	ands	r3, r2
 800c424:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	ec337800 	.word	0xec337800
 800c438:	eff37800 	.word	0xeff37800

0800c43c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b08a      	sub	sp, #40	@ 0x28
 800c440:	af02      	add	r7, sp, #8
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	4613      	mov	r3, r2
 800c448:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	785b      	ldrb	r3, [r3, #1]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	f040 8181 	bne.w	800c760 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d132      	bne.n	800c4cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	015a      	lsls	r2, r3, #5
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	4413      	add	r3, r2
 800c46e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c472:	691a      	ldr	r2, [r3, #16]
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	0159      	lsls	r1, r3, #5
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	440b      	add	r3, r1
 800c47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c480:	4619      	mov	r1, r3
 800c482:	4ba5      	ldr	r3, [pc, #660]	@ (800c718 <USB_EPStartXfer+0x2dc>)
 800c484:	4013      	ands	r3, r2
 800c486:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	015a      	lsls	r2, r3, #5
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	4413      	add	r3, r2
 800c490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	69ba      	ldr	r2, [r7, #24]
 800c498:	0151      	lsls	r1, r2, #5
 800c49a:	69fa      	ldr	r2, [r7, #28]
 800c49c:	440a      	add	r2, r1
 800c49e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c4a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c4a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	015a      	lsls	r2, r3, #5
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4b4:	691a      	ldr	r2, [r3, #16]
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	0159      	lsls	r1, r3, #5
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	440b      	add	r3, r1
 800c4be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4b95      	ldr	r3, [pc, #596]	@ (800c71c <USB_EPStartXfer+0x2e0>)
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	610b      	str	r3, [r1, #16]
 800c4ca:	e092      	b.n	800c5f2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	015a      	lsls	r2, r3, #5
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4d8:	691a      	ldr	r2, [r3, #16]
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	0159      	lsls	r1, r3, #5
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	440b      	add	r3, r1
 800c4e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	4b8c      	ldr	r3, [pc, #560]	@ (800c71c <USB_EPStartXfer+0x2e0>)
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	015a      	lsls	r2, r3, #5
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4fa:	691a      	ldr	r2, [r3, #16]
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	0159      	lsls	r1, r3, #5
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	440b      	add	r3, r1
 800c504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c508:	4619      	mov	r1, r3
 800c50a:	4b83      	ldr	r3, [pc, #524]	@ (800c718 <USB_EPStartXfer+0x2dc>)
 800c50c:	4013      	ands	r3, r2
 800c50e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d11a      	bne.n	800c54c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	691a      	ldr	r2, [r3, #16]
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d903      	bls.n	800c52a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	689a      	ldr	r2, [r3, #8]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	015a      	lsls	r2, r3, #5
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	4413      	add	r3, r2
 800c532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	69ba      	ldr	r2, [r7, #24]
 800c53a:	0151      	lsls	r1, r2, #5
 800c53c:	69fa      	ldr	r2, [r7, #28]
 800c53e:	440a      	add	r2, r1
 800c540:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c544:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c548:	6113      	str	r3, [r2, #16]
 800c54a:	e01b      	b.n	800c584 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	015a      	lsls	r2, r3, #5
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	4413      	add	r3, r2
 800c554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c558:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	6919      	ldr	r1, [r3, #16]
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	440b      	add	r3, r1
 800c564:	1e59      	subs	r1, r3, #1
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c56e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c570:	4b6b      	ldr	r3, [pc, #428]	@ (800c720 <USB_EPStartXfer+0x2e4>)
 800c572:	400b      	ands	r3, r1
 800c574:	69b9      	ldr	r1, [r7, #24]
 800c576:	0148      	lsls	r0, r1, #5
 800c578:	69f9      	ldr	r1, [r7, #28]
 800c57a:	4401      	add	r1, r0
 800c57c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c580:	4313      	orrs	r3, r2
 800c582:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	015a      	lsls	r2, r3, #5
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	4413      	add	r3, r2
 800c58c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c590:	691a      	ldr	r2, [r3, #16]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c59a:	69b9      	ldr	r1, [r7, #24]
 800c59c:	0148      	lsls	r0, r1, #5
 800c59e:	69f9      	ldr	r1, [r7, #28]
 800c5a0:	4401      	add	r1, r0
 800c5a2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	791b      	ldrb	r3, [r3, #4]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d11f      	bne.n	800c5f2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	015a      	lsls	r2, r3, #5
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	0151      	lsls	r1, r2, #5
 800c5c4:	69fa      	ldr	r2, [r7, #28]
 800c5c6:	440a      	add	r2, r1
 800c5c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5cc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c5d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	015a      	lsls	r2, r3, #5
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	4413      	add	r3, r2
 800c5da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5de:	691b      	ldr	r3, [r3, #16]
 800c5e0:	69ba      	ldr	r2, [r7, #24]
 800c5e2:	0151      	lsls	r1, r2, #5
 800c5e4:	69fa      	ldr	r2, [r7, #28]
 800c5e6:	440a      	add	r2, r1
 800c5e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c5f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c5f2:	79fb      	ldrb	r3, [r7, #7]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d14b      	bne.n	800c690 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	69db      	ldr	r3, [r3, #28]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d009      	beq.n	800c614 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	015a      	lsls	r2, r3, #5
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	4413      	add	r3, r2
 800c608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c60c:	461a      	mov	r2, r3
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	791b      	ldrb	r3, [r3, #4]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d128      	bne.n	800c66e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d110      	bne.n	800c64e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	015a      	lsls	r2, r3, #5
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	4413      	add	r3, r2
 800c634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	69ba      	ldr	r2, [r7, #24]
 800c63c:	0151      	lsls	r1, r2, #5
 800c63e:	69fa      	ldr	r2, [r7, #28]
 800c640:	440a      	add	r2, r1
 800c642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c646:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	e00f      	b.n	800c66e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	015a      	lsls	r2, r3, #5
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	4413      	add	r3, r2
 800c656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	69ba      	ldr	r2, [r7, #24]
 800c65e:	0151      	lsls	r1, r2, #5
 800c660:	69fa      	ldr	r2, [r7, #28]
 800c662:	440a      	add	r2, r1
 800c664:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c66c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	015a      	lsls	r2, r3, #5
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	4413      	add	r3, r2
 800c676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	69ba      	ldr	r2, [r7, #24]
 800c67e:	0151      	lsls	r1, r2, #5
 800c680:	69fa      	ldr	r2, [r7, #28]
 800c682:	440a      	add	r2, r1
 800c684:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c688:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c68c:	6013      	str	r3, [r2, #0]
 800c68e:	e16a      	b.n	800c966 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	015a      	lsls	r2, r3, #5
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	4413      	add	r3, r2
 800c698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	69ba      	ldr	r2, [r7, #24]
 800c6a0:	0151      	lsls	r1, r2, #5
 800c6a2:	69fa      	ldr	r2, [r7, #28]
 800c6a4:	440a      	add	r2, r1
 800c6a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c6ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	791b      	ldrb	r3, [r3, #4]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d015      	beq.n	800c6e4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 8152 	beq.w	800c966 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	f003 030f 	and.w	r3, r3, #15
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d8:	69f9      	ldr	r1, [r7, #28]
 800c6da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	634b      	str	r3, [r1, #52]	@ 0x34
 800c6e2:	e140      	b.n	800c966 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d117      	bne.n	800c724 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	015a      	lsls	r2, r3, #5
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	69ba      	ldr	r2, [r7, #24]
 800c704:	0151      	lsls	r1, r2, #5
 800c706:	69fa      	ldr	r2, [r7, #28]
 800c708:	440a      	add	r2, r1
 800c70a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c70e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	e016      	b.n	800c744 <USB_EPStartXfer+0x308>
 800c716:	bf00      	nop
 800c718:	e007ffff 	.word	0xe007ffff
 800c71c:	fff80000 	.word	0xfff80000
 800c720:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	015a      	lsls	r2, r3, #5
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	4413      	add	r3, r2
 800c72c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	69ba      	ldr	r2, [r7, #24]
 800c734:	0151      	lsls	r1, r2, #5
 800c736:	69fa      	ldr	r2, [r7, #28]
 800c738:	440a      	add	r2, r1
 800c73a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c73e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c742:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	68d9      	ldr	r1, [r3, #12]
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	781a      	ldrb	r2, [r3, #0]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	691b      	ldr	r3, [r3, #16]
 800c750:	b298      	uxth	r0, r3
 800c752:	79fb      	ldrb	r3, [r7, #7]
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	4603      	mov	r3, r0
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f000 f9b9 	bl	800cad0 <USB_WritePacket>
 800c75e:	e102      	b.n	800c966 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	015a      	lsls	r2, r3, #5
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	4413      	add	r3, r2
 800c768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c76c:	691a      	ldr	r2, [r3, #16]
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	0159      	lsls	r1, r3, #5
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	440b      	add	r3, r1
 800c776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c77a:	4619      	mov	r1, r3
 800c77c:	4b7c      	ldr	r3, [pc, #496]	@ (800c970 <USB_EPStartXfer+0x534>)
 800c77e:	4013      	ands	r3, r2
 800c780:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	015a      	lsls	r2, r3, #5
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	4413      	add	r3, r2
 800c78a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c78e:	691a      	ldr	r2, [r3, #16]
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	0159      	lsls	r1, r3, #5
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	440b      	add	r3, r1
 800c798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c79c:	4619      	mov	r1, r3
 800c79e:	4b75      	ldr	r3, [pc, #468]	@ (800c974 <USB_EPStartXfer+0x538>)
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d12f      	bne.n	800c80a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	689a      	ldr	r2, [r3, #8]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	689a      	ldr	r2, [r3, #8]
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	015a      	lsls	r2, r3, #5
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7ce:	691a      	ldr	r2, [r3, #16]
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	6a1b      	ldr	r3, [r3, #32]
 800c7d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7d8:	69b9      	ldr	r1, [r7, #24]
 800c7da:	0148      	lsls	r0, r1, #5
 800c7dc:	69f9      	ldr	r1, [r7, #28]
 800c7de:	4401      	add	r1, r0
 800c7e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	015a      	lsls	r2, r3, #5
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	69ba      	ldr	r2, [r7, #24]
 800c7f8:	0151      	lsls	r1, r2, #5
 800c7fa:	69fa      	ldr	r2, [r7, #28]
 800c7fc:	440a      	add	r2, r1
 800c7fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c802:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c806:	6113      	str	r3, [r2, #16]
 800c808:	e05f      	b.n	800c8ca <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d123      	bne.n	800c85a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c81e:	691a      	ldr	r2, [r3, #16]
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c828:	69b9      	ldr	r1, [r7, #24]
 800c82a:	0148      	lsls	r0, r1, #5
 800c82c:	69f9      	ldr	r1, [r7, #28]
 800c82e:	4401      	add	r1, r0
 800c830:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c834:	4313      	orrs	r3, r2
 800c836:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	015a      	lsls	r2, r3, #5
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	69ba      	ldr	r2, [r7, #24]
 800c848:	0151      	lsls	r1, r2, #5
 800c84a:	69fa      	ldr	r2, [r7, #28]
 800c84c:	440a      	add	r2, r1
 800c84e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c852:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c856:	6113      	str	r3, [r2, #16]
 800c858:	e037      	b.n	800c8ca <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	691a      	ldr	r2, [r3, #16]
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	4413      	add	r3, r2
 800c864:	1e5a      	subs	r2, r3, #1
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c86e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	8afa      	ldrh	r2, [r7, #22]
 800c876:	fb03 f202 	mul.w	r2, r3, r2
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c88a:	691a      	ldr	r2, [r3, #16]
 800c88c:	8afb      	ldrh	r3, [r7, #22]
 800c88e:	04d9      	lsls	r1, r3, #19
 800c890:	4b39      	ldr	r3, [pc, #228]	@ (800c978 <USB_EPStartXfer+0x53c>)
 800c892:	400b      	ands	r3, r1
 800c894:	69b9      	ldr	r1, [r7, #24]
 800c896:	0148      	lsls	r0, r1, #5
 800c898:	69f9      	ldr	r1, [r7, #28]
 800c89a:	4401      	add	r1, r0
 800c89c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	015a      	lsls	r2, r3, #5
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8b0:	691a      	ldr	r2, [r3, #16]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	6a1b      	ldr	r3, [r3, #32]
 800c8b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8ba:	69b9      	ldr	r1, [r7, #24]
 800c8bc:	0148      	lsls	r0, r1, #5
 800c8be:	69f9      	ldr	r1, [r7, #28]
 800c8c0:	4401      	add	r1, r0
 800c8c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c8ca:	79fb      	ldrb	r3, [r7, #7]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d10d      	bne.n	800c8ec <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d009      	beq.n	800c8ec <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	68d9      	ldr	r1, [r3, #12]
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	015a      	lsls	r2, r3, #5
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8e8:	460a      	mov	r2, r1
 800c8ea:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	791b      	ldrb	r3, [r3, #4]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d128      	bne.n	800c946 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c900:	2b00      	cmp	r3, #0
 800c902:	d110      	bne.n	800c926 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	015a      	lsls	r2, r3, #5
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	4413      	add	r3, r2
 800c90c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	69ba      	ldr	r2, [r7, #24]
 800c914:	0151      	lsls	r1, r2, #5
 800c916:	69fa      	ldr	r2, [r7, #28]
 800c918:	440a      	add	r2, r1
 800c91a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c91e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c922:	6013      	str	r3, [r2, #0]
 800c924:	e00f      	b.n	800c946 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	015a      	lsls	r2, r3, #5
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	4413      	add	r3, r2
 800c92e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	69ba      	ldr	r2, [r7, #24]
 800c936:	0151      	lsls	r1, r2, #5
 800c938:	69fa      	ldr	r2, [r7, #28]
 800c93a:	440a      	add	r2, r1
 800c93c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c944:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	015a      	lsls	r2, r3, #5
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	4413      	add	r3, r2
 800c94e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	69ba      	ldr	r2, [r7, #24]
 800c956:	0151      	lsls	r1, r2, #5
 800c958:	69fa      	ldr	r2, [r7, #28]
 800c95a:	440a      	add	r2, r1
 800c95c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c960:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c964:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3720      	adds	r7, #32
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	fff80000 	.word	0xfff80000
 800c974:	e007ffff 	.word	0xe007ffff
 800c978:	1ff80000 	.word	0x1ff80000

0800c97c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b087      	sub	sp, #28
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	785b      	ldrb	r3, [r3, #1]
 800c996:	2b01      	cmp	r3, #1
 800c998:	d14a      	bne.n	800ca30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	015a      	lsls	r2, r3, #5
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c9ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c9b2:	f040 8086 	bne.w	800cac2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	015a      	lsls	r2, r3, #5
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	683a      	ldr	r2, [r7, #0]
 800c9c8:	7812      	ldrb	r2, [r2, #0]
 800c9ca:	0151      	lsls	r1, r2, #5
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	440a      	add	r2, r1
 800c9d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c9d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	015a      	lsls	r2, r3, #5
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	683a      	ldr	r2, [r7, #0]
 800c9ec:	7812      	ldrb	r2, [r2, #0]
 800c9ee:	0151      	lsls	r1, r2, #5
 800c9f0:	693a      	ldr	r2, [r7, #16]
 800c9f2:	440a      	add	r2, r1
 800c9f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c9fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	3301      	adds	r3, #1
 800ca02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d902      	bls.n	800ca14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	75fb      	strb	r3, [r7, #23]
          break;
 800ca12:	e056      	b.n	800cac2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	015a      	lsls	r2, r3, #5
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca2c:	d0e7      	beq.n	800c9fe <USB_EPStopXfer+0x82>
 800ca2e:	e048      	b.n	800cac2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	015a      	lsls	r2, r3, #5
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	4413      	add	r3, r2
 800ca3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca48:	d13b      	bne.n	800cac2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	015a      	lsls	r2, r3, #5
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	4413      	add	r3, r2
 800ca54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	7812      	ldrb	r2, [r2, #0]
 800ca5e:	0151      	lsls	r1, r2, #5
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	440a      	add	r2, r1
 800ca64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ca6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	015a      	lsls	r2, r3, #5
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	4413      	add	r3, r2
 800ca78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	7812      	ldrb	r2, [r2, #0]
 800ca82:	0151      	lsls	r1, r2, #5
 800ca84:	693a      	ldr	r2, [r7, #16]
 800ca86:	440a      	add	r2, r1
 800ca88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ca90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	3301      	adds	r3, #1
 800ca96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d902      	bls.n	800caa8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	75fb      	strb	r3, [r7, #23]
          break;
 800caa6:	e00c      	b.n	800cac2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	015a      	lsls	r2, r3, #5
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	4413      	add	r3, r2
 800cab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cabc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cac0:	d0e7      	beq.n	800ca92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	371c      	adds	r7, #28
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b089      	sub	sp, #36	@ 0x24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	4611      	mov	r1, r2
 800cadc:	461a      	mov	r2, r3
 800cade:	460b      	mov	r3, r1
 800cae0:	71fb      	strb	r3, [r7, #7]
 800cae2:	4613      	mov	r3, r2
 800cae4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800caee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d123      	bne.n	800cb3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800caf6:	88bb      	ldrh	r3, [r7, #4]
 800caf8:	3303      	adds	r3, #3
 800cafa:	089b      	lsrs	r3, r3, #2
 800cafc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cafe:	2300      	movs	r3, #0
 800cb00:	61bb      	str	r3, [r7, #24]
 800cb02:	e018      	b.n	800cb36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cb04:	79fb      	ldrb	r3, [r7, #7]
 800cb06:	031a      	lsls	r2, r3, #12
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb10:	461a      	mov	r2, r3
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	3301      	adds	r3, #1
 800cb22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	3301      	adds	r3, #1
 800cb28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	3301      	adds	r3, #1
 800cb34:	61bb      	str	r3, [r7, #24]
 800cb36:	69ba      	ldr	r2, [r7, #24]
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d3e2      	bcc.n	800cb04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3724      	adds	r7, #36	@ 0x24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b08b      	sub	sp, #44	@ 0x2c
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	4613      	mov	r3, r2
 800cb58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cb62:	88fb      	ldrh	r3, [r7, #6]
 800cb64:	089b      	lsrs	r3, r3, #2
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cb6a:	88fb      	ldrh	r3, [r7, #6]
 800cb6c:	f003 0303 	and.w	r3, r3, #3
 800cb70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb72:	2300      	movs	r3, #0
 800cb74:	623b      	str	r3, [r7, #32]
 800cb76:	e014      	b.n	800cba2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb82:	601a      	str	r2, [r3, #0]
    pDest++;
 800cb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb86:	3301      	adds	r3, #1
 800cb88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb92:	3301      	adds	r3, #1
 800cb94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb98:	3301      	adds	r3, #1
 800cb9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	623b      	str	r3, [r7, #32]
 800cba2:	6a3a      	ldr	r2, [r7, #32]
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d3e6      	bcc.n	800cb78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cbaa:	8bfb      	ldrh	r3, [r7, #30]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d01e      	beq.n	800cbee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbba:	461a      	mov	r2, r3
 800cbbc:	f107 0310 	add.w	r3, r7, #16
 800cbc0:	6812      	ldr	r2, [r2, #0]
 800cbc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cbc4:	693a      	ldr	r2, [r7, #16]
 800cbc6:	6a3b      	ldr	r3, [r7, #32]
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	00db      	lsls	r3, r3, #3
 800cbcc:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd4:	701a      	strb	r2, [r3, #0]
      i++;
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	623b      	str	r3, [r7, #32]
      pDest++;
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbde:	3301      	adds	r3, #1
 800cbe0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800cbe2:	8bfb      	ldrh	r3, [r7, #30]
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cbe8:	8bfb      	ldrh	r3, [r7, #30]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1ea      	bne.n	800cbc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	372c      	adds	r7, #44	@ 0x2c
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	785b      	ldrb	r3, [r3, #1]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d12c      	bne.n	800cc72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	015a      	lsls	r2, r3, #5
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	4413      	add	r3, r2
 800cc20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	db12      	blt.n	800cc50 <USB_EPSetStall+0x54>
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00f      	beq.n	800cc50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	015a      	lsls	r2, r3, #5
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	4413      	add	r3, r2
 800cc38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	0151      	lsls	r1, r2, #5
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	440a      	add	r2, r1
 800cc46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cc4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	015a      	lsls	r2, r3, #5
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	4413      	add	r3, r2
 800cc58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	0151      	lsls	r1, r2, #5
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	440a      	add	r2, r1
 800cc66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	e02b      	b.n	800ccca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	015a      	lsls	r2, r3, #5
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	4413      	add	r3, r2
 800cc7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	db12      	blt.n	800ccaa <USB_EPSetStall+0xae>
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00f      	beq.n	800ccaa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	015a      	lsls	r2, r3, #5
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	4413      	add	r3, r2
 800cc92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	0151      	lsls	r1, r2, #5
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	440a      	add	r2, r1
 800cca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cca4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cca8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	015a      	lsls	r2, r3, #5
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	0151      	lsls	r1, r2, #5
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	440a      	add	r2, r1
 800ccc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ccc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ccc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3714      	adds	r7, #20
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	785b      	ldrb	r3, [r3, #1]
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d128      	bne.n	800cd46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	015a      	lsls	r2, r3, #5
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68ba      	ldr	r2, [r7, #8]
 800cd04:	0151      	lsls	r1, r2, #5
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	440a      	add	r2, r1
 800cd0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	791b      	ldrb	r3, [r3, #4]
 800cd18:	2b03      	cmp	r3, #3
 800cd1a:	d003      	beq.n	800cd24 <USB_EPClearStall+0x4c>
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	791b      	ldrb	r3, [r3, #4]
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d138      	bne.n	800cd96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	015a      	lsls	r2, r3, #5
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	0151      	lsls	r1, r2, #5
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	440a      	add	r2, r1
 800cd3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	e027      	b.n	800cd96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	015a      	lsls	r2, r3, #5
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	0151      	lsls	r1, r2, #5
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	440a      	add	r2, r1
 800cd5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	791b      	ldrb	r3, [r3, #4]
 800cd6a:	2b03      	cmp	r3, #3
 800cd6c:	d003      	beq.n	800cd76 <USB_EPClearStall+0x9e>
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	791b      	ldrb	r3, [r3, #4]
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d10f      	bne.n	800cd96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	015a      	lsls	r2, r3, #5
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	0151      	lsls	r1, r2, #5
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	440a      	add	r2, r1
 800cd8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3714      	adds	r7, #20
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	460b      	mov	r3, r1
 800cdae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cdc2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cdc6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	011b      	lsls	r3, r3, #4
 800cdd4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800cdd8:	68f9      	ldr	r1, [r7, #12]
 800cdda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cdde:	4313      	orrs	r3, r2
 800cde0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce0a:	f023 0303 	bic.w	r3, r3, #3
 800ce0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce1e:	f023 0302 	bic.w	r3, r3, #2
 800ce22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce32:	b480      	push	{r7}
 800ce34:	b085      	sub	sp, #20
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce4c:	f023 0303 	bic.w	r3, r3, #3
 800ce50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce60:	f043 0302 	orr.w	r3, r3, #2
 800ce64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	699b      	ldr	r3, [r3, #24]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	4013      	ands	r3, r2
 800ce8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3714      	adds	r7, #20
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b085      	sub	sp, #20
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceb6:	69db      	ldr	r3, [r3, #28]
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	4013      	ands	r3, r2
 800cebc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	0c1b      	lsrs	r3, r3, #16
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3714      	adds	r7, #20
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr

0800cece <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cece:	b480      	push	{r7}
 800ced0:	b085      	sub	sp, #20
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceea:	69db      	ldr	r3, [r3, #28]
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	4013      	ands	r3, r2
 800cef0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	b29b      	uxth	r3, r3
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b085      	sub	sp, #20
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cf12:	78fb      	ldrb	r3, [r7, #3]
 800cf14:	015a      	lsls	r2, r3, #5
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	4413      	add	r3, r2
 800cf1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf1e:	689b      	ldr	r3, [r3, #8]
 800cf20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	4013      	ands	r3, r2
 800cf2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf30:	68bb      	ldr	r3, [r7, #8]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3714      	adds	r7, #20
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf3e:	b480      	push	{r7}
 800cf40:	b087      	sub	sp, #28
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	460b      	mov	r3, r1
 800cf48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cf62:	78fb      	ldrb	r3, [r7, #3]
 800cf64:	f003 030f 	and.w	r3, r3, #15
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf6e:	01db      	lsls	r3, r3, #7
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	693a      	ldr	r2, [r7, #16]
 800cf74:	4313      	orrs	r3, r2
 800cf76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cf78:	78fb      	ldrb	r3, [r7, #3]
 800cf7a:	015a      	lsls	r2, r3, #5
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	4413      	add	r3, r2
 800cf80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	4013      	ands	r3, r2
 800cf8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf8c:	68bb      	ldr	r3, [r7, #8]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	371c      	adds	r7, #28
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b083      	sub	sp, #12
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	695b      	ldr	r3, [r3, #20]
 800cfa6:	f003 0301 	and.w	r3, r3, #1
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	370c      	adds	r7, #12
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
	...

0800cfb8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4b09      	ldr	r3, [pc, #36]	@ (800cffc <USB_ActivateSetup+0x44>)
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	68fa      	ldr	r2, [r7, #12]
 800cfe4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cfe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cfec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	fffff800 	.word	0xfffff800

0800d000 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d000:	b480      	push	{r7}
 800d002:	b087      	sub	sp, #28
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	460b      	mov	r3, r1
 800d00a:	607a      	str	r2, [r7, #4]
 800d00c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	333c      	adds	r3, #60	@ 0x3c
 800d016:	3304      	adds	r3, #4
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	4a26      	ldr	r2, [pc, #152]	@ (800d0b8 <USB_EP0_OutStart+0xb8>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d90a      	bls.n	800d03a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d034:	d101      	bne.n	800d03a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d036:	2300      	movs	r3, #0
 800d038:	e037      	b.n	800d0aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d040:	461a      	mov	r2, r3
 800d042:	2300      	movs	r3, #0
 800d044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	697a      	ldr	r2, [r7, #20]
 800d050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	697a      	ldr	r2, [r7, #20]
 800d064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d068:	f043 0318 	orr.w	r3, r3, #24
 800d06c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d07c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d080:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d082:	7afb      	ldrb	r3, [r7, #11]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d10f      	bne.n	800d0a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d08e:	461a      	mov	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	697a      	ldr	r2, [r7, #20]
 800d09e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d0a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	371c      	adds	r7, #28
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	4f54300a 	.word	0x4f54300a

0800d0bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d0d4:	d901      	bls.n	800d0da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	e01b      	b.n	800d112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	691b      	ldr	r3, [r3, #16]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	daf2      	bge.n	800d0c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	f043 0201 	orr.w	r2, r3, #1
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d0fe:	d901      	bls.n	800d104 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d100:	2303      	movs	r3, #3
 800d102:	e006      	b.n	800d112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	f003 0301 	and.w	r3, r3, #1
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d0f0      	beq.n	800d0f2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3714      	adds	r7, #20
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr
	...

0800d120 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d124:	4904      	ldr	r1, [pc, #16]	@ (800d138 <MX_FATFS_Init+0x18>)
 800d126:	4805      	ldr	r0, [pc, #20]	@ (800d13c <MX_FATFS_Init+0x1c>)
 800d128:	f003 fcd4 	bl	8010ad4 <FATFS_LinkDriver>
 800d12c:	4603      	mov	r3, r0
 800d12e:	461a      	mov	r2, r3
 800d130:	4b03      	ldr	r3, [pc, #12]	@ (800d140 <MX_FATFS_Init+0x20>)
 800d132:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d134:	bf00      	nop
 800d136:	bd80      	pop	{r7, pc}
 800d138:	24000670 	.word	0x24000670
 800d13c:	08013dec 	.word	0x08013dec
 800d140:	2400066c 	.word	0x2400066c

0800d144 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d14e:	f000 f879 	bl	800d244 <BSP_SD_IsDetected>
 800d152:	4603      	mov	r3, r0
 800d154:	2b01      	cmp	r3, #1
 800d156:	d001      	beq.n	800d15c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d158:	2302      	movs	r3, #2
 800d15a:	e012      	b.n	800d182 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d15c:	480b      	ldr	r0, [pc, #44]	@ (800d18c <BSP_SD_Init+0x48>)
 800d15e:	f7fa f97f 	bl	8007460 <HAL_SD_Init>
 800d162:	4603      	mov	r3, r0
 800d164:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d166:	79fb      	ldrb	r3, [r7, #7]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d109      	bne.n	800d180 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d16c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d170:	4806      	ldr	r0, [pc, #24]	@ (800d18c <BSP_SD_Init+0x48>)
 800d172:	f7fb f83b 	bl	80081ec <HAL_SD_ConfigWideBusOperation>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d180:	79fb      	ldrb	r3, [r7, #7]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	240003e4 	.word	0x240003e4

0800d190 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b088      	sub	sp, #32
 800d194:	af02      	add	r7, sp, #8
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
 800d19c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	68f9      	ldr	r1, [r7, #12]
 800d1ac:	4806      	ldr	r0, [pc, #24]	@ (800d1c8 <BSP_SD_ReadBlocks+0x38>)
 800d1ae:	f7fa fa77 	bl	80076a0 <HAL_SD_ReadBlocks>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d001      	beq.n	800d1bc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3718      	adds	r7, #24
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	240003e4 	.word	0x240003e4

0800d1cc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b088      	sub	sp, #32
 800d1d0:	af02      	add	r7, sp, #8
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	607a      	str	r2, [r7, #4]
 800d1d8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	68f9      	ldr	r1, [r7, #12]
 800d1e8:	4806      	ldr	r0, [pc, #24]	@ (800d204 <BSP_SD_WriteBlocks+0x38>)
 800d1ea:	f7fa fbe3 	bl	80079b4 <HAL_SD_WriteBlocks>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	240003e4 	.word	0x240003e4

0800d208 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d20c:	4805      	ldr	r0, [pc, #20]	@ (800d224 <BSP_SD_GetCardState+0x1c>)
 800d20e:	f7fb f8ff 	bl	8008410 <HAL_SD_GetCardState>
 800d212:	4603      	mov	r3, r0
 800d214:	2b04      	cmp	r3, #4
 800d216:	bf14      	ite	ne
 800d218:	2301      	movne	r3, #1
 800d21a:	2300      	moveq	r3, #0
 800d21c:	b2db      	uxtb	r3, r3
}
 800d21e:	4618      	mov	r0, r3
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	240003e4 	.word	0x240003e4

0800d228 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d230:	6879      	ldr	r1, [r7, #4]
 800d232:	4803      	ldr	r0, [pc, #12]	@ (800d240 <BSP_SD_GetCardInfo+0x18>)
 800d234:	f7fa ffae 	bl	8008194 <HAL_SD_GetCardInfo>
}
 800d238:	bf00      	nop
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	240003e4 	.word	0x240003e4

0800d244 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d24a:	2301      	movs	r3, #1
 800d24c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d24e:	f000 f80b 	bl	800d268 <BSP_PlatformIsDetected>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d258:	2300      	movs	r3, #0
 800d25a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d25c:	79fb      	ldrb	r3, [r7, #7]
 800d25e:	b2db      	uxtb	r3, r3
}
 800d260:	4618      	mov	r0, r3
 800d262:	3708      	adds	r7, #8
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d26e:	2301      	movs	r3, #1
 800d270:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d272:	2102      	movs	r1, #2
 800d274:	4806      	ldr	r0, [pc, #24]	@ (800d290 <BSP_PlatformIsDetected+0x28>)
 800d276:	f7f4 ff69 	bl	800214c <HAL_GPIO_ReadPin>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d001      	beq.n	800d284 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d280:	2300      	movs	r3, #0
 800d282:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d284:	79fb      	ldrb	r3, [r7, #7]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	58020000 	.word	0x58020000

0800d294 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	4603      	mov	r3, r0
 800d29c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d29e:	4b0b      	ldr	r3, [pc, #44]	@ (800d2cc <SD_CheckStatus+0x38>)
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d2a4:	f7ff ffb0 	bl	800d208 <BSP_SD_GetCardState>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d107      	bne.n	800d2be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d2ae:	4b07      	ldr	r3, [pc, #28]	@ (800d2cc <SD_CheckStatus+0x38>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	f023 0301 	bic.w	r3, r3, #1
 800d2b8:	b2da      	uxtb	r2, r3
 800d2ba:	4b04      	ldr	r3, [pc, #16]	@ (800d2cc <SD_CheckStatus+0x38>)
 800d2bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d2be:	4b03      	ldr	r3, [pc, #12]	@ (800d2cc <SD_CheckStatus+0x38>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	b2db      	uxtb	r3, r3
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	2400000d 	.word	0x2400000d

0800d2d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d2da:	4b0b      	ldr	r3, [pc, #44]	@ (800d308 <SD_initialize+0x38>)
 800d2dc:	2201      	movs	r2, #1
 800d2de:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d2e0:	f7ff ff30 	bl	800d144 <BSP_SD_Init>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d107      	bne.n	800d2fa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d2ea:	79fb      	ldrb	r3, [r7, #7]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7ff ffd1 	bl	800d294 <SD_CheckStatus>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	4b04      	ldr	r3, [pc, #16]	@ (800d308 <SD_initialize+0x38>)
 800d2f8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d2fa:	4b03      	ldr	r3, [pc, #12]	@ (800d308 <SD_initialize+0x38>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	b2db      	uxtb	r3, r3
}
 800d300:	4618      	mov	r0, r3
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	2400000d 	.word	0x2400000d

0800d30c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d316:	79fb      	ldrb	r3, [r7, #7]
 800d318:	4618      	mov	r0, r3
 800d31a:	f7ff ffbb 	bl	800d294 <SD_CheckStatus>
 800d31e:	4603      	mov	r3, r0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60b9      	str	r1, [r7, #8]
 800d330:	607a      	str	r2, [r7, #4]
 800d332:	603b      	str	r3, [r7, #0]
 800d334:	4603      	mov	r3, r0
 800d336:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d33c:	f04f 33ff 	mov.w	r3, #4294967295
 800d340:	683a      	ldr	r2, [r7, #0]
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	68b8      	ldr	r0, [r7, #8]
 800d346:	f7ff ff23 	bl	800d190 <BSP_SD_ReadBlocks>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d107      	bne.n	800d360 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d350:	bf00      	nop
 800d352:	f7ff ff59 	bl	800d208 <BSP_SD_GetCardState>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1fa      	bne.n	800d352 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d360:	7dfb      	ldrb	r3, [r7, #23]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3718      	adds	r7, #24
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b086      	sub	sp, #24
 800d36e:	af00      	add	r7, sp, #0
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
 800d374:	603b      	str	r3, [r7, #0]
 800d376:	4603      	mov	r3, r0
 800d378:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d37e:	f04f 33ff 	mov.w	r3, #4294967295
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	6879      	ldr	r1, [r7, #4]
 800d386:	68b8      	ldr	r0, [r7, #8]
 800d388:	f7ff ff20 	bl	800d1cc <BSP_SD_WriteBlocks>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d107      	bne.n	800d3a2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d392:	bf00      	nop
 800d394:	f7ff ff38 	bl	800d208 <BSP_SD_GetCardState>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1fa      	bne.n	800d394 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d3a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3718      	adds	r7, #24
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08c      	sub	sp, #48	@ 0x30
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	603a      	str	r2, [r7, #0]
 800d3b6:	71fb      	strb	r3, [r7, #7]
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d3c2:	4b25      	ldr	r3, [pc, #148]	@ (800d458 <SD_ioctl+0xac>)
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d001      	beq.n	800d3d4 <SD_ioctl+0x28>
 800d3d0:	2303      	movs	r3, #3
 800d3d2:	e03c      	b.n	800d44e <SD_ioctl+0xa2>

  switch (cmd)
 800d3d4:	79bb      	ldrb	r3, [r7, #6]
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	d834      	bhi.n	800d444 <SD_ioctl+0x98>
 800d3da:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e0 <SD_ioctl+0x34>)
 800d3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e0:	0800d3f1 	.word	0x0800d3f1
 800d3e4:	0800d3f9 	.word	0x0800d3f9
 800d3e8:	0800d411 	.word	0x0800d411
 800d3ec:	0800d42b 	.word	0x0800d42b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d3f6:	e028      	b.n	800d44a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d3f8:	f107 0308 	add.w	r3, r7, #8
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff ff13 	bl	800d228 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d402:	6a3a      	ldr	r2, [r7, #32]
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d40e:	e01c      	b.n	800d44a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d410:	f107 0308 	add.w	r3, r7, #8
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff ff07 	bl	800d228 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d422:	2300      	movs	r3, #0
 800d424:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d428:	e00f      	b.n	800d44a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d42a:	f107 0308 	add.w	r3, r7, #8
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff fefa 	bl	800d228 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d436:	0a5a      	lsrs	r2, r3, #9
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d442:	e002      	b.n	800d44a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d444:	2304      	movs	r3, #4
 800d446:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d44a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3730      	adds	r7, #48	@ 0x30
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	2400000d 	.word	0x2400000d

0800d45c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d468:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800d46c:	f004 f836 	bl	80114dc <USBD_static_malloc>
 800d470:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d109      	bne.n	800d48c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	32b0      	adds	r2, #176	@ 0xb0
 800d482:	2100      	movs	r1, #0
 800d484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d488:	2302      	movs	r3, #2
 800d48a:	e06e      	b.n	800d56a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	32b0      	adds	r2, #176	@ 0xb0
 800d496:	68f9      	ldr	r1, [r7, #12]
 800d498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	32b0      	adds	r2, #176	@ 0xb0
 800d4a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	7c1b      	ldrb	r3, [r3, #16]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d12b      	bne.n	800d510 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d4b8:	4b2e      	ldr	r3, [pc, #184]	@ (800d574 <USBD_MSC_Init+0x118>)
 800d4ba:	7819      	ldrb	r1, [r3, #0]
 800d4bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4c0:	2202      	movs	r2, #2
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f003 fec7 	bl	8011256 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d4c8:	4b2a      	ldr	r3, [pc, #168]	@ (800d574 <USBD_MSC_Init+0x118>)
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	f003 020f 	and.w	r2, r3, #15
 800d4d0:	6879      	ldr	r1, [r7, #4]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	4413      	add	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	440b      	add	r3, r1
 800d4dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d4e4:	4b24      	ldr	r3, [pc, #144]	@ (800d578 <USBD_MSC_Init+0x11c>)
 800d4e6:	7819      	ldrb	r1, [r3, #0]
 800d4e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4ec:	2202      	movs	r2, #2
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f003 feb1 	bl	8011256 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d4f4:	4b20      	ldr	r3, [pc, #128]	@ (800d578 <USBD_MSC_Init+0x11c>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	f003 020f 	and.w	r2, r3, #15
 800d4fc:	6879      	ldr	r1, [r7, #4]
 800d4fe:	4613      	mov	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	440b      	add	r3, r1
 800d508:	3324      	adds	r3, #36	@ 0x24
 800d50a:	2201      	movs	r2, #1
 800d50c:	801a      	strh	r2, [r3, #0]
 800d50e:	e028      	b.n	800d562 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d510:	4b18      	ldr	r3, [pc, #96]	@ (800d574 <USBD_MSC_Init+0x118>)
 800d512:	7819      	ldrb	r1, [r3, #0]
 800d514:	2340      	movs	r3, #64	@ 0x40
 800d516:	2202      	movs	r2, #2
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f003 fe9c 	bl	8011256 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d51e:	4b15      	ldr	r3, [pc, #84]	@ (800d574 <USBD_MSC_Init+0x118>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	f003 020f 	and.w	r2, r3, #15
 800d526:	6879      	ldr	r1, [r7, #4]
 800d528:	4613      	mov	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	440b      	add	r3, r1
 800d532:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d536:	2201      	movs	r2, #1
 800d538:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d53a:	4b0f      	ldr	r3, [pc, #60]	@ (800d578 <USBD_MSC_Init+0x11c>)
 800d53c:	7819      	ldrb	r1, [r3, #0]
 800d53e:	2340      	movs	r3, #64	@ 0x40
 800d540:	2202      	movs	r2, #2
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f003 fe87 	bl	8011256 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d548:	4b0b      	ldr	r3, [pc, #44]	@ (800d578 <USBD_MSC_Init+0x11c>)
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	f003 020f 	and.w	r2, r3, #15
 800d550:	6879      	ldr	r1, [r7, #4]
 800d552:	4613      	mov	r3, r2
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	4413      	add	r3, r2
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	440b      	add	r3, r1
 800d55c:	3324      	adds	r3, #36	@ 0x24
 800d55e:	2201      	movs	r2, #1
 800d560:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fa2c 	bl	800d9c0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	24000073 	.word	0x24000073
 800d578:	24000072 	.word	0x24000072

0800d57c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800d588:	4b26      	ldr	r3, [pc, #152]	@ (800d624 <USBD_MSC_DeInit+0xa8>)
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f003 fe87 	bl	80112a2 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800d594:	4b23      	ldr	r3, [pc, #140]	@ (800d624 <USBD_MSC_DeInit+0xa8>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	f003 020f 	and.w	r2, r3, #15
 800d59c:	6879      	ldr	r1, [r7, #4]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	4413      	add	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	440b      	add	r3, r1
 800d5a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800d5b0:	4b1d      	ldr	r3, [pc, #116]	@ (800d628 <USBD_MSC_DeInit+0xac>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f003 fe73 	bl	80112a2 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800d5bc:	4b1a      	ldr	r3, [pc, #104]	@ (800d628 <USBD_MSC_DeInit+0xac>)
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	f003 020f 	and.w	r2, r3, #15
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	4413      	add	r3, r2
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	440b      	add	r3, r1
 800d5d0:	3324      	adds	r3, #36	@ 0x24
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	32b0      	adds	r2, #176	@ 0xb0
 800d5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d018      	beq.n	800d61a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fa67 	bl	800dabc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	32b0      	adds	r2, #176	@ 0xb0
 800d5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f003 ff7b 	bl	80114f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	32b0      	adds	r2, #176	@ 0xb0
 800d60c:	2100      	movs	r1, #0
 800d60e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	24000073 	.word	0x24000073
 800d628:	24000072 	.word	0x24000072

0800d62c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	32b0      	adds	r2, #176	@ 0xb0
 800d640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d644:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d646:	2300      	movs	r3, #0
 800d648:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d64a:	2300      	movs	r3, #0
 800d64c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800d654:	2303      	movs	r3, #3
 800d656:	e0e1      	b.n	800d81c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d660:	2b00      	cmp	r3, #0
 800d662:	d053      	beq.n	800d70c <USBD_MSC_Setup+0xe0>
 800d664:	2b20      	cmp	r3, #32
 800d666:	f040 80d1 	bne.w	800d80c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	785b      	ldrb	r3, [r3, #1]
 800d66e:	2bfe      	cmp	r3, #254	@ 0xfe
 800d670:	d002      	beq.n	800d678 <USBD_MSC_Setup+0x4c>
 800d672:	2bff      	cmp	r3, #255	@ 0xff
 800d674:	d02a      	beq.n	800d6cc <USBD_MSC_Setup+0xa0>
 800d676:	e041      	b.n	800d6fc <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	885b      	ldrh	r3, [r3, #2]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d11e      	bne.n	800d6be <USBD_MSC_Setup+0x92>
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	88db      	ldrh	r3, [r3, #6]
 800d684:	2b01      	cmp	r3, #1
 800d686:	d11a      	bne.n	800d6be <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d68e:	2b00      	cmp	r3, #0
 800d690:	da15      	bge.n	800d6be <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	33b0      	adds	r3, #176	@ 0xb0
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4413      	add	r3, r2
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	699b      	ldr	r3, [r3, #24]
 800d6a4:	4798      	blx	r3
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f003 f95d 	bl	8010974 <USBD_CtlSendData>
 800d6ba:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d6bc:	e025      	b.n	800d70a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800d6be:	6839      	ldr	r1, [r7, #0]
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f003 f8da 	bl	801087a <USBD_CtlError>
            ret = USBD_FAIL;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	75fb      	strb	r3, [r7, #23]
          break;
 800d6ca:	e01e      	b.n	800d70a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	885b      	ldrh	r3, [r3, #2]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10c      	bne.n	800d6ee <USBD_MSC_Setup+0xc2>
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	88db      	ldrh	r3, [r3, #6]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d108      	bne.n	800d6ee <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	db03      	blt.n	800d6ee <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 f9b4 	bl	800da54 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d6ec:	e00d      	b.n	800d70a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800d6ee:	6839      	ldr	r1, [r7, #0]
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f003 f8c2 	bl	801087a <USBD_CtlError>
            ret = USBD_FAIL;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	75fb      	strb	r3, [r7, #23]
          break;
 800d6fa:	e006      	b.n	800d70a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800d6fc:	6839      	ldr	r1, [r7, #0]
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f003 f8bb 	bl	801087a <USBD_CtlError>
          ret = USBD_FAIL;
 800d704:	2303      	movs	r3, #3
 800d706:	75fb      	strb	r3, [r7, #23]
          break;
 800d708:	bf00      	nop
      }
      break;
 800d70a:	e086      	b.n	800d81a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	785b      	ldrb	r3, [r3, #1]
 800d710:	2b0b      	cmp	r3, #11
 800d712:	d872      	bhi.n	800d7fa <USBD_MSC_Setup+0x1ce>
 800d714:	a201      	add	r2, pc, #4	@ (adr r2, 800d71c <USBD_MSC_Setup+0xf0>)
 800d716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d71a:	bf00      	nop
 800d71c:	0800d74d 	.word	0x0800d74d
 800d720:	0800d7c9 	.word	0x0800d7c9
 800d724:	0800d7fb 	.word	0x0800d7fb
 800d728:	0800d7fb 	.word	0x0800d7fb
 800d72c:	0800d7fb 	.word	0x0800d7fb
 800d730:	0800d7fb 	.word	0x0800d7fb
 800d734:	0800d7fb 	.word	0x0800d7fb
 800d738:	0800d7fb 	.word	0x0800d7fb
 800d73c:	0800d7fb 	.word	0x0800d7fb
 800d740:	0800d7fb 	.word	0x0800d7fb
 800d744:	0800d777 	.word	0x0800d777
 800d748:	0800d7a1 	.word	0x0800d7a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d752:	b2db      	uxtb	r3, r3
 800d754:	2b03      	cmp	r3, #3
 800d756:	d107      	bne.n	800d768 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d758:	f107 030e 	add.w	r3, r7, #14
 800d75c:	2202      	movs	r2, #2
 800d75e:	4619      	mov	r1, r3
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f003 f907 	bl	8010974 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d766:	e050      	b.n	800d80a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f003 f885 	bl	801087a <USBD_CtlError>
            ret = USBD_FAIL;
 800d770:	2303      	movs	r3, #3
 800d772:	75fb      	strb	r3, [r7, #23]
          break;
 800d774:	e049      	b.n	800d80a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	2b03      	cmp	r3, #3
 800d780:	d107      	bne.n	800d792 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	3304      	adds	r3, #4
 800d786:	2201      	movs	r2, #1
 800d788:	4619      	mov	r1, r3
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f003 f8f2 	bl	8010974 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d790:	e03b      	b.n	800d80a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800d792:	6839      	ldr	r1, [r7, #0]
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f003 f870 	bl	801087a <USBD_CtlError>
            ret = USBD_FAIL;
 800d79a:	2303      	movs	r3, #3
 800d79c:	75fb      	strb	r3, [r7, #23]
          break;
 800d79e:	e034      	b.n	800d80a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b03      	cmp	r3, #3
 800d7aa:	d106      	bne.n	800d7ba <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	885b      	ldrh	r3, [r3, #2]
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d7b8:	e027      	b.n	800d80a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800d7ba:	6839      	ldr	r1, [r7, #0]
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f003 f85c 	bl	801087a <USBD_CtlError>
            ret = USBD_FAIL;
 800d7c2:	2303      	movs	r3, #3
 800d7c4:	75fb      	strb	r3, [r7, #23]
          break;
 800d7c6:	e020      	b.n	800d80a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	2b03      	cmp	r3, #3
 800d7d2:	d119      	bne.n	800d808 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	885b      	ldrh	r3, [r3, #2]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d115      	bne.n	800d808 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	889b      	ldrh	r3, [r3, #4]
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f003 fd7b 	bl	80112e0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	889b      	ldrh	r3, [r3, #4]
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fb2e 	bl	800de54 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800d7f8:	e006      	b.n	800d808 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800d7fa:	6839      	ldr	r1, [r7, #0]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f003 f83c 	bl	801087a <USBD_CtlError>
          ret = USBD_FAIL;
 800d802:	2303      	movs	r3, #3
 800d804:	75fb      	strb	r3, [r7, #23]
          break;
 800d806:	e000      	b.n	800d80a <USBD_MSC_Setup+0x1de>
          break;
 800d808:	bf00      	nop
      }
      break;
 800d80a:	e006      	b.n	800d81a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f003 f833 	bl	801087a <USBD_CtlError>
      ret = USBD_FAIL;
 800d814:	2303      	movs	r3, #3
 800d816:	75fb      	strb	r3, [r7, #23]
      break;
 800d818:	bf00      	nop
  }

  return (uint8_t)ret;
 800d81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3718      	adds	r7, #24
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	460b      	mov	r3, r1
 800d82e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d830:	78fb      	ldrb	r3, [r7, #3]
 800d832:	4619      	mov	r1, r3
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f959 	bl	800daec <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	460b      	mov	r3, r1
 800d84e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d850:	78fb      	ldrb	r3, [r7, #3]
 800d852:	4619      	mov	r1, r3
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 f983 	bl	800db60 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800d85a:	2300      	movs	r3, #0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800d86c:	2181      	movs	r1, #129	@ 0x81
 800d86e:	4812      	ldr	r0, [pc, #72]	@ (800d8b8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800d870:	f002 f9a4 	bl	800fbbc <USBD_GetEpDesc>
 800d874:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800d876:	2101      	movs	r1, #1
 800d878:	480f      	ldr	r0, [pc, #60]	@ (800d8b8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800d87a:	f002 f99f 	bl	800fbbc <USBD_GetEpDesc>
 800d87e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d006      	beq.n	800d894 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2200      	movs	r2, #0
 800d88a:	711a      	strb	r2, [r3, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	f042 0202 	orr.w	r2, r2, #2
 800d892:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d006      	beq.n	800d8a8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	2200      	movs	r2, #0
 800d89e:	711a      	strb	r2, [r3, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f042 0202 	orr.w	r2, r2, #2
 800d8a6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2220      	movs	r2, #32
 800d8ac:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800d8ae:	4b02      	ldr	r3, [pc, #8]	@ (800d8b8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	24000048 	.word	0x24000048

0800d8bc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800d8c4:	2181      	movs	r1, #129	@ 0x81
 800d8c6:	4812      	ldr	r0, [pc, #72]	@ (800d910 <USBD_MSC_GetFSCfgDesc+0x54>)
 800d8c8:	f002 f978 	bl	800fbbc <USBD_GetEpDesc>
 800d8cc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800d8ce:	2101      	movs	r1, #1
 800d8d0:	480f      	ldr	r0, [pc, #60]	@ (800d910 <USBD_MSC_GetFSCfgDesc+0x54>)
 800d8d2:	f002 f973 	bl	800fbbc <USBD_GetEpDesc>
 800d8d6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d006      	beq.n	800d8ec <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d8e6:	711a      	strb	r2, [r3, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d006      	beq.n	800d900 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d8fa:	711a      	strb	r2, [r3, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2220      	movs	r2, #32
 800d904:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800d906:	4b02      	ldr	r3, [pc, #8]	@ (800d910 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	24000048 	.word	0x24000048

0800d914 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800d91c:	2181      	movs	r1, #129	@ 0x81
 800d91e:	4812      	ldr	r0, [pc, #72]	@ (800d968 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800d920:	f002 f94c 	bl	800fbbc <USBD_GetEpDesc>
 800d924:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800d926:	2101      	movs	r1, #1
 800d928:	480f      	ldr	r0, [pc, #60]	@ (800d968 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800d92a:	f002 f947 	bl	800fbbc <USBD_GetEpDesc>
 800d92e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d006      	beq.n	800d944 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d93e:	711a      	strb	r2, [r3, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d006      	beq.n	800d958 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d952:	711a      	strb	r2, [r3, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2220      	movs	r2, #32
 800d95c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800d95e:	4b02      	ldr	r3, [pc, #8]	@ (800d968 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800d960:	4618      	mov	r0, r3
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	24000048 	.word	0x24000048

0800d96c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	220a      	movs	r2, #10
 800d978:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d97a:	4b03      	ldr	r3, [pc, #12]	@ (800d988 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	24000068 	.word	0x24000068

0800d98c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d101      	bne.n	800d9a0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d99c:	2303      	movs	r3, #3
 800d99e:	e009      	b.n	800d9b4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	33b0      	adds	r3, #176	@ 0xb0
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	32b0      	adds	r2, #176	@ 0xb0
 800d9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9d6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d032      	beq.n	800da44 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	33b0      	adds	r3, #176	@ 0xb0
 800da0c:	009b      	lsls	r3, r3, #2
 800da0e:	4413      	add	r3, r2
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2000      	movs	r0, #0
 800da16:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800da18:	4b0c      	ldr	r3, [pc, #48]	@ (800da4c <MSC_BOT_Init+0x8c>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	4619      	mov	r1, r3
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f003 fc5e 	bl	80112e0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800da24:	4b0a      	ldr	r3, [pc, #40]	@ (800da50 <MSC_BOT_Init+0x90>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f003 fc58 	bl	80112e0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800da30:	4b06      	ldr	r3, [pc, #24]	@ (800da4c <MSC_BOT_Init+0x8c>)
 800da32:	7819      	ldrb	r1, [r3, #0]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800da3a:	231f      	movs	r3, #31
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f003 fd18 	bl	8011472 <USBD_LL_PrepareReceive>
 800da42:	e000      	b.n	800da46 <MSC_BOT_Init+0x86>
    return;
 800da44:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	24000073 	.word	0x24000073
 800da50:	24000072 	.word	0x24000072

0800da54 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	32b0      	adds	r2, #176	@ 0xb0
 800da66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da6a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d01b      	beq.n	800daaa <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2200      	movs	r2, #0
 800da76:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2201      	movs	r2, #1
 800da7c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800da7e:	4b0d      	ldr	r3, [pc, #52]	@ (800dab4 <MSC_BOT_Reset+0x60>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	4619      	mov	r1, r3
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f003 fc69 	bl	801135c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800da8a:	4b0b      	ldr	r3, [pc, #44]	@ (800dab8 <MSC_BOT_Reset+0x64>)
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f003 fc63 	bl	801135c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800da96:	4b08      	ldr	r3, [pc, #32]	@ (800dab8 <MSC_BOT_Reset+0x64>)
 800da98:	7819      	ldrb	r1, [r3, #0]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800daa0:	231f      	movs	r3, #31
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f003 fce5 	bl	8011472 <USBD_LL_PrepareReceive>
 800daa8:	e000      	b.n	800daac <MSC_BOT_Reset+0x58>
    return;
 800daaa:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	24000072 	.word	0x24000072
 800dab8:	24000073 	.word	0x24000073

0800dabc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	32b0      	adds	r2, #176	@ 0xb0
 800dace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d002      	beq.n	800dae0 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	721a      	strb	r2, [r3, #8]
  }
}
 800dae0:	bf00      	nop
 800dae2:	3714      	adds	r7, #20
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	32b0      	adds	r2, #176	@ 0xb0
 800db02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db06:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d020      	beq.n	800db50 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	7a1b      	ldrb	r3, [r3, #8]
 800db12:	2b02      	cmp	r3, #2
 800db14:	d005      	beq.n	800db22 <MSC_BOT_DataIn+0x36>
 800db16:	2b02      	cmp	r3, #2
 800db18:	db1c      	blt.n	800db54 <MSC_BOT_DataIn+0x68>
 800db1a:	3b03      	subs	r3, #3
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d819      	bhi.n	800db54 <MSC_BOT_DataIn+0x68>
 800db20:	e011      	b.n	800db46 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800db2e:	461a      	mov	r2, r3
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f9c9 	bl	800dec8 <SCSI_ProcessCmd>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	da0d      	bge.n	800db58 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800db3c:	2101      	movs	r1, #1
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f90c 	bl	800dd5c <MSC_BOT_SendCSW>
      }
      break;
 800db44:	e008      	b.n	800db58 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800db46:	2100      	movs	r1, #0
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f907 	bl	800dd5c <MSC_BOT_SendCSW>
      break;
 800db4e:	e004      	b.n	800db5a <MSC_BOT_DataIn+0x6e>
    return;
 800db50:	bf00      	nop
 800db52:	e002      	b.n	800db5a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800db54:	bf00      	nop
 800db56:	e000      	b.n	800db5a <MSC_BOT_DataIn+0x6e>
      break;
 800db58:	bf00      	nop
  }
}
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	460b      	mov	r3, r1
 800db6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	32b0      	adds	r2, #176	@ 0xb0
 800db76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db7a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d01c      	beq.n	800dbbc <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	7a1b      	ldrb	r3, [r3, #8]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d002      	beq.n	800db90 <MSC_BOT_DataOut+0x30>
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d004      	beq.n	800db98 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800db8e:	e018      	b.n	800dbc2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 f819 	bl	800dbc8 <MSC_BOT_CBW_Decode>
      break;
 800db96:	e014      	b.n	800dbc2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800dba4:	461a      	mov	r2, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 f98e 	bl	800dec8 <SCSI_ProcessCmd>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	da06      	bge.n	800dbc0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dbb2:	2101      	movs	r1, #1
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 f8d1 	bl	800dd5c <MSC_BOT_SendCSW>
      break;
 800dbba:	e001      	b.n	800dbc0 <MSC_BOT_DataOut+0x60>
    return;
 800dbbc:	bf00      	nop
 800dbbe:	e000      	b.n	800dbc2 <MSC_BOT_DataOut+0x62>
      break;
 800dbc0:	bf00      	nop
  }
}
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	32b0      	adds	r2, #176	@ 0xb0
 800dbda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbde:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d079      	beq.n	800dcda <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800dbfe:	4b3a      	ldr	r3, [pc, #232]	@ (800dce8 <MSC_BOT_CBW_Decode+0x120>)
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	4619      	mov	r1, r3
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f003 fc55 	bl	80114b4 <USBD_LL_GetRxDataSize>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b1f      	cmp	r3, #31
 800dc0e:	d114      	bne.n	800dc3a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800dc16:	4a35      	ldr	r2, [pc, #212]	@ (800dcec <MSC_BOT_CBW_Decode+0x124>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d10e      	bne.n	800dc3a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d809      	bhi.n	800dc3a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d004      	beq.n	800dc3a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800dc36:	2b10      	cmp	r3, #16
 800dc38:	d90e      	bls.n	800dc58 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dc40:	2320      	movs	r3, #32
 800dc42:	2205      	movs	r2, #5
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 fe54 	bl	800e8f2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2202      	movs	r2, #2
 800dc4e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 f8bd 	bl	800ddd0 <MSC_BOT_Abort>
 800dc56:	e043      	b.n	800dce0 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800dc64:	461a      	mov	r2, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f92e 	bl	800dec8 <SCSI_ProcessCmd>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	da0c      	bge.n	800dc8c <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	7a1b      	ldrb	r3, [r3, #8]
 800dc76:	2b05      	cmp	r3, #5
 800dc78:	d104      	bne.n	800dc84 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dc7a:	2101      	movs	r1, #1
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 f86d 	bl	800dd5c <MSC_BOT_SendCSW>
 800dc82:	e02d      	b.n	800dce0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f8a3 	bl	800ddd0 <MSC_BOT_Abort>
 800dc8a:	e029      	b.n	800dce0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	7a1b      	ldrb	r3, [r3, #8]
 800dc90:	2b02      	cmp	r3, #2
 800dc92:	d024      	beq.n	800dcde <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d020      	beq.n	800dcde <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dca0:	2b03      	cmp	r3, #3
 800dca2:	d01c      	beq.n	800dcde <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d009      	beq.n	800dcc0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f103 0110 	add.w	r1, r3, #16
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 f819 	bl	800dcf0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800dcbe:	e00f      	b.n	800dce0 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d104      	bne.n	800dcd2 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800dcc8:	2100      	movs	r1, #0
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 f846 	bl	800dd5c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800dcd0:	e006      	b.n	800dce0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f87c 	bl	800ddd0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800dcd8:	e002      	b.n	800dce0 <MSC_BOT_CBW_Decode+0x118>
    return;
 800dcda:	bf00      	nop
 800dcdc:	e000      	b.n	800dce0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800dcde:	bf00      	nop
    }
  }
}
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	24000073 	.word	0x24000073
 800dcec:	43425355 	.word	0x43425355

0800dcf0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b086      	sub	sp, #24
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	32b0      	adds	r2, #176	@ 0xb0
 800dd06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd0a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d01e      	beq.n	800dd50 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	bf28      	it	cs
 800dd1e:	4613      	movcs	r3, r2
 800dd20:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	1ad2      	subs	r2, r2, r3
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	2200      	movs	r2, #0
 800dd36:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2204      	movs	r2, #4
 800dd3e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800dd40:	4b05      	ldr	r3, [pc, #20]	@ (800dd58 <MSC_BOT_SendData+0x68>)
 800dd42:	7819      	ldrb	r1, [r3, #0]
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f003 fb71 	bl	8011430 <USBD_LL_Transmit>
 800dd4e:	e000      	b.n	800dd52 <MSC_BOT_SendData+0x62>
    return;
 800dd50:	bf00      	nop
}
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	24000072 	.word	0x24000072

0800dd5c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	460b      	mov	r3, r1
 800dd66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	32b0      	adds	r2, #176	@ 0xb0
 800dd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd76:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d01d      	beq.n	800ddba <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	4a10      	ldr	r2, [pc, #64]	@ (800ddc4 <MSC_BOT_SendCSW+0x68>)
 800dd82:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	78fa      	ldrb	r2, [r7, #3]
 800dd8a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2200      	movs	r2, #0
 800dd92:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800dd94:	4b0c      	ldr	r3, [pc, #48]	@ (800ddc8 <MSC_BOT_SendCSW+0x6c>)
 800dd96:	7819      	ldrb	r1, [r3, #0]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800dd9e:	230d      	movs	r3, #13
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f003 fb45 	bl	8011430 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800dda6:	4b09      	ldr	r3, [pc, #36]	@ (800ddcc <MSC_BOT_SendCSW+0x70>)
 800dda8:	7819      	ldrb	r1, [r3, #0]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800ddb0:	231f      	movs	r3, #31
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f003 fb5d 	bl	8011472 <USBD_LL_PrepareReceive>
 800ddb8:	e000      	b.n	800ddbc <MSC_BOT_SendCSW+0x60>
    return;
 800ddba:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	53425355 	.word	0x53425355
 800ddc8:	24000072 	.word	0x24000072
 800ddcc:	24000073 	.word	0x24000073

0800ddd0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	32b0      	adds	r2, #176	@ 0xb0
 800dde2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dde6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d02a      	beq.n	800de44 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d10e      	bne.n	800de16 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d009      	beq.n	800de16 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800de06:	2b00      	cmp	r3, #0
 800de08:	d105      	bne.n	800de16 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800de0a:	4b10      	ldr	r3, [pc, #64]	@ (800de4c <MSC_BOT_Abort+0x7c>)
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	4619      	mov	r1, r3
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f003 fa84 	bl	801131e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800de16:	4b0e      	ldr	r3, [pc, #56]	@ (800de50 <MSC_BOT_Abort+0x80>)
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	4619      	mov	r1, r3
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f003 fa7e 	bl	801131e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	7a5b      	ldrb	r3, [r3, #9]
 800de26:	2b02      	cmp	r3, #2
 800de28:	d10d      	bne.n	800de46 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800de2a:	4b09      	ldr	r3, [pc, #36]	@ (800de50 <MSC_BOT_Abort+0x80>)
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	4619      	mov	r1, r3
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f003 fa74 	bl	801131e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800de36:	4b05      	ldr	r3, [pc, #20]	@ (800de4c <MSC_BOT_Abort+0x7c>)
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	4619      	mov	r1, r3
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f003 fa6e 	bl	801131e <USBD_LL_StallEP>
 800de42:	e000      	b.n	800de46 <MSC_BOT_Abort+0x76>
    return;
 800de44:	bf00      	nop
  }
}
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	24000073 	.word	0x24000073
 800de50:	24000072 	.word	0x24000072

0800de54 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	460b      	mov	r3, r1
 800de5e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	32b0      	adds	r2, #176	@ 0xb0
 800de6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de6e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d01d      	beq.n	800deb2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	7a5b      	ldrb	r3, [r3, #9]
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d10c      	bne.n	800de98 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800de7e:	4b10      	ldr	r3, [pc, #64]	@ (800dec0 <MSC_BOT_CplClrFeature+0x6c>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	4619      	mov	r1, r3
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f003 fa4a 	bl	801131e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800de8a:	4b0e      	ldr	r3, [pc, #56]	@ (800dec4 <MSC_BOT_CplClrFeature+0x70>)
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	4619      	mov	r1, r3
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f003 fa44 	bl	801131e <USBD_LL_StallEP>
 800de96:	e00f      	b.n	800deb8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800de98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	da0a      	bge.n	800deb6 <MSC_BOT_CplClrFeature+0x62>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	7a5b      	ldrb	r3, [r3, #9]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d006      	beq.n	800deb6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dea8:	2101      	movs	r1, #1
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f7ff ff56 	bl	800dd5c <MSC_BOT_SendCSW>
 800deb0:	e002      	b.n	800deb8 <MSC_BOT_CplClrFeature+0x64>
    return;
 800deb2:	bf00      	nop
 800deb4:	e000      	b.n	800deb8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800deb6:	bf00      	nop
  }
}
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	24000072 	.word	0x24000072
 800dec4:	24000073 	.word	0x24000073

0800dec8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	460b      	mov	r3, r1
 800ded2:	607a      	str	r2, [r7, #4]
 800ded4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	32b0      	adds	r2, #176	@ 0xb0
 800dee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dee4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800deec:	f04f 33ff 	mov.w	r3, #4294967295
 800def0:	e168      	b.n	800e1c4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	2baa      	cmp	r3, #170	@ 0xaa
 800def8:	f000 8144 	beq.w	800e184 <SCSI_ProcessCmd+0x2bc>
 800defc:	2baa      	cmp	r3, #170	@ 0xaa
 800defe:	f300 8153 	bgt.w	800e1a8 <SCSI_ProcessCmd+0x2e0>
 800df02:	2ba8      	cmp	r3, #168	@ 0xa8
 800df04:	f000 812c 	beq.w	800e160 <SCSI_ProcessCmd+0x298>
 800df08:	2ba8      	cmp	r3, #168	@ 0xa8
 800df0a:	f300 814d 	bgt.w	800e1a8 <SCSI_ProcessCmd+0x2e0>
 800df0e:	2b5a      	cmp	r3, #90	@ 0x5a
 800df10:	f300 80c0 	bgt.w	800e094 <SCSI_ProcessCmd+0x1cc>
 800df14:	2b00      	cmp	r3, #0
 800df16:	f2c0 8147 	blt.w	800e1a8 <SCSI_ProcessCmd+0x2e0>
 800df1a:	2b5a      	cmp	r3, #90	@ 0x5a
 800df1c:	f200 8144 	bhi.w	800e1a8 <SCSI_ProcessCmd+0x2e0>
 800df20:	a201      	add	r2, pc, #4	@ (adr r2, 800df28 <SCSI_ProcessCmd+0x60>)
 800df22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df26:	bf00      	nop
 800df28:	0800e09b 	.word	0x0800e09b
 800df2c:	0800e1a9 	.word	0x0800e1a9
 800df30:	0800e1a9 	.word	0x0800e1a9
 800df34:	0800e0ad 	.word	0x0800e0ad
 800df38:	0800e1a9 	.word	0x0800e1a9
 800df3c:	0800e1a9 	.word	0x0800e1a9
 800df40:	0800e1a9 	.word	0x0800e1a9
 800df44:	0800e1a9 	.word	0x0800e1a9
 800df48:	0800e1a9 	.word	0x0800e1a9
 800df4c:	0800e1a9 	.word	0x0800e1a9
 800df50:	0800e1a9 	.word	0x0800e1a9
 800df54:	0800e1a9 	.word	0x0800e1a9
 800df58:	0800e1a9 	.word	0x0800e1a9
 800df5c:	0800e1a9 	.word	0x0800e1a9
 800df60:	0800e1a9 	.word	0x0800e1a9
 800df64:	0800e1a9 	.word	0x0800e1a9
 800df68:	0800e1a9 	.word	0x0800e1a9
 800df6c:	0800e1a9 	.word	0x0800e1a9
 800df70:	0800e0bf 	.word	0x0800e0bf
 800df74:	0800e1a9 	.word	0x0800e1a9
 800df78:	0800e1a9 	.word	0x0800e1a9
 800df7c:	0800e1a9 	.word	0x0800e1a9
 800df80:	0800e1a9 	.word	0x0800e1a9
 800df84:	0800e1a9 	.word	0x0800e1a9
 800df88:	0800e1a9 	.word	0x0800e1a9
 800df8c:	0800e1a9 	.word	0x0800e1a9
 800df90:	0800e0f5 	.word	0x0800e0f5
 800df94:	0800e0d1 	.word	0x0800e0d1
 800df98:	0800e1a9 	.word	0x0800e1a9
 800df9c:	0800e1a9 	.word	0x0800e1a9
 800dfa0:	0800e0e3 	.word	0x0800e0e3
 800dfa4:	0800e1a9 	.word	0x0800e1a9
 800dfa8:	0800e1a9 	.word	0x0800e1a9
 800dfac:	0800e1a9 	.word	0x0800e1a9
 800dfb0:	0800e1a9 	.word	0x0800e1a9
 800dfb4:	0800e119 	.word	0x0800e119
 800dfb8:	0800e1a9 	.word	0x0800e1a9
 800dfbc:	0800e12b 	.word	0x0800e12b
 800dfc0:	0800e1a9 	.word	0x0800e1a9
 800dfc4:	0800e1a9 	.word	0x0800e1a9
 800dfc8:	0800e14f 	.word	0x0800e14f
 800dfcc:	0800e1a9 	.word	0x0800e1a9
 800dfd0:	0800e173 	.word	0x0800e173
 800dfd4:	0800e1a9 	.word	0x0800e1a9
 800dfd8:	0800e1a9 	.word	0x0800e1a9
 800dfdc:	0800e1a9 	.word	0x0800e1a9
 800dfe0:	0800e1a9 	.word	0x0800e1a9
 800dfe4:	0800e197 	.word	0x0800e197
 800dfe8:	0800e1a9 	.word	0x0800e1a9
 800dfec:	0800e1a9 	.word	0x0800e1a9
 800dff0:	0800e1a9 	.word	0x0800e1a9
 800dff4:	0800e1a9 	.word	0x0800e1a9
 800dff8:	0800e1a9 	.word	0x0800e1a9
 800dffc:	0800e1a9 	.word	0x0800e1a9
 800e000:	0800e1a9 	.word	0x0800e1a9
 800e004:	0800e1a9 	.word	0x0800e1a9
 800e008:	0800e1a9 	.word	0x0800e1a9
 800e00c:	0800e1a9 	.word	0x0800e1a9
 800e010:	0800e1a9 	.word	0x0800e1a9
 800e014:	0800e1a9 	.word	0x0800e1a9
 800e018:	0800e1a9 	.word	0x0800e1a9
 800e01c:	0800e1a9 	.word	0x0800e1a9
 800e020:	0800e1a9 	.word	0x0800e1a9
 800e024:	0800e1a9 	.word	0x0800e1a9
 800e028:	0800e1a9 	.word	0x0800e1a9
 800e02c:	0800e1a9 	.word	0x0800e1a9
 800e030:	0800e1a9 	.word	0x0800e1a9
 800e034:	0800e1a9 	.word	0x0800e1a9
 800e038:	0800e1a9 	.word	0x0800e1a9
 800e03c:	0800e1a9 	.word	0x0800e1a9
 800e040:	0800e1a9 	.word	0x0800e1a9
 800e044:	0800e1a9 	.word	0x0800e1a9
 800e048:	0800e1a9 	.word	0x0800e1a9
 800e04c:	0800e1a9 	.word	0x0800e1a9
 800e050:	0800e1a9 	.word	0x0800e1a9
 800e054:	0800e1a9 	.word	0x0800e1a9
 800e058:	0800e1a9 	.word	0x0800e1a9
 800e05c:	0800e1a9 	.word	0x0800e1a9
 800e060:	0800e1a9 	.word	0x0800e1a9
 800e064:	0800e1a9 	.word	0x0800e1a9
 800e068:	0800e1a9 	.word	0x0800e1a9
 800e06c:	0800e1a9 	.word	0x0800e1a9
 800e070:	0800e1a9 	.word	0x0800e1a9
 800e074:	0800e1a9 	.word	0x0800e1a9
 800e078:	0800e1a9 	.word	0x0800e1a9
 800e07c:	0800e1a9 	.word	0x0800e1a9
 800e080:	0800e1a9 	.word	0x0800e1a9
 800e084:	0800e1a9 	.word	0x0800e1a9
 800e088:	0800e1a9 	.word	0x0800e1a9
 800e08c:	0800e1a9 	.word	0x0800e1a9
 800e090:	0800e107 	.word	0x0800e107
 800e094:	2b9e      	cmp	r3, #158	@ 0x9e
 800e096:	d051      	beq.n	800e13c <SCSI_ProcessCmd+0x274>
 800e098:	e086      	b.n	800e1a8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e09a:	7afb      	ldrb	r3, [r7, #11]
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	4619      	mov	r1, r3
 800e0a0:	68f8      	ldr	r0, [r7, #12]
 800e0a2:	f000 f893 	bl	800e1cc <SCSI_TestUnitReady>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	75fb      	strb	r3, [r7, #23]
      break;
 800e0aa:	e089      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800e0ac:	7afb      	ldrb	r3, [r7, #11]
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	f000 fb9a 	bl	800e7ec <SCSI_RequestSense>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	75fb      	strb	r3, [r7, #23]
      break;
 800e0bc:	e080      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800e0be:	7afb      	ldrb	r3, [r7, #11]
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f000 f8db 	bl	800e280 <SCSI_Inquiry>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	75fb      	strb	r3, [r7, #23]
      break;
 800e0ce:	e077      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e0d0:	7afb      	ldrb	r3, [r7, #11]
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	68f8      	ldr	r0, [r7, #12]
 800e0d8:	f000 fc56 	bl	800e988 <SCSI_StartStopUnit>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	75fb      	strb	r3, [r7, #23]
      break;
 800e0e0:	e06e      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e0e2:	7afb      	ldrb	r3, [r7, #11]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f000 fca2 	bl	800ea32 <SCSI_AllowPreventRemovable>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	75fb      	strb	r3, [r7, #23]
      break;
 800e0f2:	e065      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e0f4:	7afb      	ldrb	r3, [r7, #11]
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f000 faea 	bl	800e6d4 <SCSI_ModeSense6>
 800e100:	4603      	mov	r3, r0
 800e102:	75fb      	strb	r3, [r7, #23]
      break;
 800e104:	e05c      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e106:	7afb      	ldrb	r3, [r7, #11]
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	4619      	mov	r1, r3
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 fb27 	bl	800e760 <SCSI_ModeSense10>
 800e112:	4603      	mov	r3, r0
 800e114:	75fb      	strb	r3, [r7, #23]
      break;
 800e116:	e053      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e118:	7afb      	ldrb	r3, [r7, #11]
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	4619      	mov	r1, r3
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f000 fa5c 	bl	800e5dc <SCSI_ReadFormatCapacity>
 800e124:	4603      	mov	r3, r0
 800e126:	75fb      	strb	r3, [r7, #23]
      break;
 800e128:	e04a      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e12a:	7afb      	ldrb	r3, [r7, #11]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	4619      	mov	r1, r3
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f000 f921 	bl	800e378 <SCSI_ReadCapacity10>
 800e136:	4603      	mov	r3, r0
 800e138:	75fb      	strb	r3, [r7, #23]
      break;
 800e13a:	e041      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e13c:	7afb      	ldrb	r3, [r7, #11]
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	4619      	mov	r1, r3
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f000 f996 	bl	800e474 <SCSI_ReadCapacity16>
 800e148:	4603      	mov	r3, r0
 800e14a:	75fb      	strb	r3, [r7, #23]
      break;
 800e14c:	e038      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800e14e:	7afb      	ldrb	r3, [r7, #11]
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	4619      	mov	r1, r3
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 fc99 	bl	800ea8c <SCSI_Read10>
 800e15a:	4603      	mov	r3, r0
 800e15c:	75fb      	strb	r3, [r7, #23]
      break;
 800e15e:	e02f      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800e160:	7afb      	ldrb	r3, [r7, #11]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	4619      	mov	r1, r3
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 fd3a 	bl	800ebe0 <SCSI_Read12>
 800e16c:	4603      	mov	r3, r0
 800e16e:	75fb      	strb	r3, [r7, #23]
      break;
 800e170:	e026      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800e172:	7afb      	ldrb	r3, [r7, #11]
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	4619      	mov	r1, r3
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f000 fde5 	bl	800ed48 <SCSI_Write10>
 800e17e:	4603      	mov	r3, r0
 800e180:	75fb      	strb	r3, [r7, #23]
      break;
 800e182:	e01d      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800e184:	7afb      	ldrb	r3, [r7, #11]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	4619      	mov	r1, r3
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f000 feb2 	bl	800eef4 <SCSI_Write12>
 800e190:	4603      	mov	r3, r0
 800e192:	75fb      	strb	r3, [r7, #23]
      break;
 800e194:	e014      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800e196:	7afb      	ldrb	r3, [r7, #11]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	4619      	mov	r1, r3
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f000 ff8f 	bl	800f0c0 <SCSI_Verify10>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	75fb      	strb	r3, [r7, #23]
      break;
 800e1a6:	e00b      	b.n	800e1c0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e1a8:	7af9      	ldrb	r1, [r7, #11]
 800e1aa:	2320      	movs	r3, #32
 800e1ac:	2205      	movs	r2, #5
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f000 fb9f 	bl	800e8f2 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	2202      	movs	r2, #2
 800e1b8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800e1ba:	23ff      	movs	r3, #255	@ 0xff
 800e1bc:	75fb      	strb	r3, [r7, #23]
      break;
 800e1be:	bf00      	nop
  }

  return ret;
 800e1c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3718      	adds	r7, #24
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b086      	sub	sp, #24
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	32b0      	adds	r2, #176	@ 0xb0
 800e1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1e8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d102      	bne.n	800e1f6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800e1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f4:	e03f      	b.n	800e276 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00a      	beq.n	800e216 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800e206:	2320      	movs	r3, #32
 800e208:	2205      	movs	r2, #5
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f000 fb71 	bl	800e8f2 <SCSI_SenseCode>

    return -1;
 800e210:	f04f 33ff 	mov.w	r3, #4294967295
 800e214:	e02f      	b.n	800e276 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d10b      	bne.n	800e238 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e220:	7af9      	ldrb	r1, [r7, #11]
 800e222:	233a      	movs	r3, #58	@ 0x3a
 800e224:	2202      	movs	r2, #2
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f000 fb63 	bl	800e8f2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	2205      	movs	r2, #5
 800e230:	721a      	strb	r2, [r3, #8]
    return -1;
 800e232:	f04f 33ff 	mov.w	r3, #4294967295
 800e236:	e01e      	b.n	800e276 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	33b0      	adds	r3, #176	@ 0xb0
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	4413      	add	r3, r2
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	7afa      	ldrb	r2, [r7, #11]
 800e24c:	4610      	mov	r0, r2
 800e24e:	4798      	blx	r3
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d00b      	beq.n	800e26e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e256:	7af9      	ldrb	r1, [r7, #11]
 800e258:	233a      	movs	r3, #58	@ 0x3a
 800e25a:	2202      	movs	r2, #2
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f000 fb48 	bl	800e8f2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2205      	movs	r2, #5
 800e266:	721a      	strb	r2, [r3, #8]

    return -1;
 800e268:	f04f 33ff 	mov.w	r3, #4294967295
 800e26c:	e003      	b.n	800e276 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	2200      	movs	r2, #0
 800e272:	60da      	str	r2, [r3, #12]

  return 0;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3718      	adds	r7, #24
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
	...

0800e280 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	460b      	mov	r3, r1
 800e28a:	607a      	str	r2, [r7, #4]
 800e28c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	32b0      	adds	r2, #176	@ 0xb0
 800e298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e29c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d102      	bne.n	800e2aa <SCSI_Inquiry+0x2a>
  {
    return -1;
 800e2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a8:	e05e      	b.n	800e368 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10a      	bne.n	800e2ca <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800e2ba:	2320      	movs	r3, #32
 800e2bc:	2205      	movs	r2, #5
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f000 fb17 	bl	800e8f2 <SCSI_SenseCode>
    return -1;
 800e2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c8:	e04e      	b.n	800e368 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	f003 0301 	and.w	r3, r3, #1
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d020      	beq.n	800e31a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	3302      	adds	r3, #2
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d105      	bne.n	800e2ee <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e2e2:	2206      	movs	r2, #6
 800e2e4:	4922      	ldr	r1, [pc, #136]	@ (800e370 <SCSI_Inquiry+0xf0>)
 800e2e6:	69b8      	ldr	r0, [r7, #24]
 800e2e8:	f001 f870 	bl	800f3cc <SCSI_UpdateBotData>
 800e2ec:	e03b      	b.n	800e366 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	3302      	adds	r3, #2
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2b80      	cmp	r3, #128	@ 0x80
 800e2f6:	d105      	bne.n	800e304 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e2f8:	2208      	movs	r2, #8
 800e2fa:	491e      	ldr	r1, [pc, #120]	@ (800e374 <SCSI_Inquiry+0xf4>)
 800e2fc:	69b8      	ldr	r0, [r7, #24]
 800e2fe:	f001 f865 	bl	800f3cc <SCSI_UpdateBotData>
 800e302:	e030      	b.n	800e366 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800e30a:	2324      	movs	r3, #36	@ 0x24
 800e30c:	2205      	movs	r2, #5
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f000 faef 	bl	800e8f2 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e314:	f04f 33ff 	mov.w	r3, #4294967295
 800e318:	e026      	b.n	800e368 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	33b0      	adds	r3, #176	@ 0xb0
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e32a:	69d9      	ldr	r1, [r3, #28]
 800e32c:	7afa      	ldrb	r2, [r7, #11]
 800e32e:	4613      	mov	r3, r2
 800e330:	00db      	lsls	r3, r3, #3
 800e332:	4413      	add	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800e336:	440b      	add	r3, r1
 800e338:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	3304      	adds	r3, #4
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	3305      	adds	r3, #5
 800e342:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	3304      	adds	r3, #4
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	461a      	mov	r2, r3
 800e34c:	8bfb      	ldrh	r3, [r7, #30]
 800e34e:	4293      	cmp	r3, r2
 800e350:	d303      	bcc.n	800e35a <SCSI_Inquiry+0xda>
    {
      len = params[4];
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	3304      	adds	r3, #4
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e35a:	8bfb      	ldrh	r3, [r7, #30]
 800e35c:	461a      	mov	r2, r3
 800e35e:	6979      	ldr	r1, [r7, #20]
 800e360:	69b8      	ldr	r0, [r7, #24]
 800e362:	f001 f833 	bl	800f3cc <SCSI_UpdateBotData>
  }

  return 0;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3720      	adds	r7, #32
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	24000074 	.word	0x24000074
 800e374:	2400007c 	.word	0x2400007c

0800e378 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	460b      	mov	r3, r1
 800e382:	607a      	str	r2, [r7, #4]
 800e384:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	32b0      	adds	r2, #176	@ 0xb0
 800e390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e394:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d102      	bne.n	800e3a2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800e39c:	f04f 33ff 	mov.w	r3, #4294967295
 800e3a0:	e064      	b.n	800e46c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	33b0      	adds	r3, #176	@ 0xb0
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	697a      	ldr	r2, [r7, #20]
 800e3b6:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800e3ba:	697a      	ldr	r2, [r7, #20]
 800e3bc:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800e3c0:	7af8      	ldrb	r0, [r7, #11]
 800e3c2:	4798      	blx	r3
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e3c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d104      	bne.n	800e3da <SCSI_ReadCapacity10+0x62>
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	d108      	bne.n	800e3ec <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e3da:	7af9      	ldrb	r1, [r7, #11]
 800e3dc:	233a      	movs	r3, #58	@ 0x3a
 800e3de:	2202      	movs	r2, #2
 800e3e0:	68f8      	ldr	r0, [r7, #12]
 800e3e2:	f000 fa86 	bl	800e8f2 <SCSI_SenseCode>
    return -1;
 800e3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ea:	e03f      	b.n	800e46c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	0e1b      	lsrs	r3, r3, #24
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e402:	3b01      	subs	r3, #1
 800e404:	0c1b      	lsrs	r3, r3, #16
 800e406:	b2da      	uxtb	r2, r3
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e412:	3b01      	subs	r3, #1
 800e414:	0a1b      	lsrs	r3, r3, #8
 800e416:	b2da      	uxtb	r2, r3
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e422:	b2db      	uxtb	r3, r3
 800e424:	3b01      	subs	r3, #1
 800e426:	b2da      	uxtb	r2, r3
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e432:	161b      	asrs	r3, r3, #24
 800e434:	b2da      	uxtb	r2, r3
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e440:	141b      	asrs	r3, r3, #16
 800e442:	b2da      	uxtb	r2, r3
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e44e:	0a1b      	lsrs	r3, r3, #8
 800e450:	b29b      	uxth	r3, r3
 800e452:	b2da      	uxtb	r2, r3
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	2208      	movs	r2, #8
 800e468:	60da      	str	r2, [r3, #12]

  return 0;
 800e46a:	2300      	movs	r3, #0

}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3718      	adds	r7, #24
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b088      	sub	sp, #32
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	460b      	mov	r3, r1
 800e47e:	607a      	str	r2, [r7, #4]
 800e480:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	32b0      	adds	r2, #176	@ 0xb0
 800e48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e490:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d102      	bne.n	800e49e <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800e498:	f04f 33ff 	mov.w	r3, #4294967295
 800e49c:	e09a      	b.n	800e5d4 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	33b0      	adds	r3, #176	@ 0xb0
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	4413      	add	r3, r2
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	69ba      	ldr	r2, [r7, #24]
 800e4b2:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800e4b6:	69ba      	ldr	r2, [r7, #24]
 800e4b8:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800e4bc:	7af8      	ldrb	r0, [r7, #11]
 800e4be:	4798      	blx	r3
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e4c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d104      	bne.n	800e4d6 <SCSI_ReadCapacity16+0x62>
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	d108      	bne.n	800e4e8 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e4d6:	7af9      	ldrb	r1, [r7, #11]
 800e4d8:	233a      	movs	r3, #58	@ 0x3a
 800e4da:	2202      	movs	r2, #2
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f000 fa08 	bl	800e8f2 <SCSI_SenseCode>
    return -1;
 800e4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e4e6:	e075      	b.n	800e5d4 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	330a      	adds	r3, #10
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	330b      	adds	r3, #11
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e4f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	330c      	adds	r3, #12
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e502:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	320d      	adds	r2, #13
 800e508:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e50a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e50c:	69bb      	ldr	r3, [r7, #24]
 800e50e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e510:	2300      	movs	r3, #0
 800e512:	61fb      	str	r3, [r7, #28]
 800e514:	e008      	b.n	800e528 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800e516:	69ba      	ldr	r2, [r7, #24]
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	4413      	add	r3, r2
 800e51c:	3310      	adds	r3, #16
 800e51e:	2200      	movs	r2, #0
 800e520:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	3301      	adds	r3, #1
 800e526:	61fb      	str	r3, [r7, #28]
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	68db      	ldr	r3, [r3, #12]
 800e52c:	69fa      	ldr	r2, [r7, #28]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d3f1      	bcc.n	800e516 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e532:	69bb      	ldr	r3, [r7, #24]
 800e534:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e538:	3b01      	subs	r3, #1
 800e53a:	0e1b      	lsrs	r3, r3, #24
 800e53c:	b2da      	uxtb	r2, r3
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e548:	3b01      	subs	r3, #1
 800e54a:	0c1b      	lsrs	r3, r3, #16
 800e54c:	b2da      	uxtb	r2, r3
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e558:	3b01      	subs	r3, #1
 800e55a:	0a1b      	lsrs	r3, r3, #8
 800e55c:	b2da      	uxtb	r2, r3
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	3b01      	subs	r3, #1
 800e56c:	b2da      	uxtb	r2, r3
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e578:	161b      	asrs	r3, r3, #24
 800e57a:	b2da      	uxtb	r2, r3
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e586:	141b      	asrs	r3, r3, #16
 800e588:	b2da      	uxtb	r2, r3
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e594:	0a1b      	lsrs	r3, r3, #8
 800e596:	b29b      	uxth	r3, r3
 800e598:	b2da      	uxtb	r2, r3
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e5a4:	b2da      	uxtb	r2, r3
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	330a      	adds	r3, #10
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	330b      	adds	r3, #11
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e5ba:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	330c      	adds	r3, #12
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e5c4:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	320d      	adds	r2, #13
 800e5ca:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e5cc:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	60da      	str	r2, [r3, #12]

  return 0;
 800e5d2:	2300      	movs	r3, #0
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3720      	adds	r7, #32
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b088      	sub	sp, #32
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	607a      	str	r2, [r7, #4]
 800e5e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	32b0      	adds	r2, #176	@ 0xb0
 800e5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5f8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d102      	bne.n	800e606 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800e600:	f04f 33ff 	mov.w	r3, #4294967295
 800e604:	e061      	b.n	800e6ca <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e60c:	68fa      	ldr	r2, [r7, #12]
 800e60e:	33b0      	adds	r3, #176	@ 0xb0
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	4413      	add	r3, r2
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	f107 0214 	add.w	r2, r7, #20
 800e61c:	f107 0110 	add.w	r1, r7, #16
 800e620:	7af8      	ldrb	r0, [r7, #11]
 800e622:	4798      	blx	r3
 800e624:	4603      	mov	r3, r0
 800e626:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e628:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d104      	bne.n	800e63a <SCSI_ReadFormatCapacity+0x5e>
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800e636:	2b02      	cmp	r3, #2
 800e638:	d108      	bne.n	800e64c <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e63a:	7af9      	ldrb	r1, [r7, #11]
 800e63c:	233a      	movs	r3, #58	@ 0x3a
 800e63e:	2202      	movs	r2, #2
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f000 f956 	bl	800e8f2 <SCSI_SenseCode>
    return -1;
 800e646:	f04f 33ff 	mov.w	r3, #4294967295
 800e64a:	e03e      	b.n	800e6ca <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800e64c:	2300      	movs	r3, #0
 800e64e:	83fb      	strh	r3, [r7, #30]
 800e650:	e007      	b.n	800e662 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800e652:	8bfb      	ldrh	r3, [r7, #30]
 800e654:	69ba      	ldr	r2, [r7, #24]
 800e656:	4413      	add	r3, r2
 800e658:	2200      	movs	r2, #0
 800e65a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800e65c:	8bfb      	ldrh	r3, [r7, #30]
 800e65e:	3301      	adds	r3, #1
 800e660:	83fb      	strh	r3, [r7, #30]
 800e662:	8bfb      	ldrh	r3, [r7, #30]
 800e664:	2b0b      	cmp	r3, #11
 800e666:	d9f4      	bls.n	800e652 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	2208      	movs	r2, #8
 800e66c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	3b01      	subs	r3, #1
 800e672:	0e1b      	lsrs	r3, r3, #24
 800e674:	b2da      	uxtb	r2, r3
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	0c1b      	lsrs	r3, r3, #16
 800e680:	b2da      	uxtb	r2, r3
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	3b01      	subs	r3, #1
 800e68a:	0a1b      	lsrs	r3, r3, #8
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	b2db      	uxtb	r3, r3
 800e696:	3b01      	subs	r3, #1
 800e698:	b2da      	uxtb	r2, r3
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	2202      	movs	r2, #2
 800e6a2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e6a4:	8abb      	ldrh	r3, [r7, #20]
 800e6a6:	141b      	asrs	r3, r3, #16
 800e6a8:	b2da      	uxtb	r2, r3
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e6ae:	8abb      	ldrh	r3, [r7, #20]
 800e6b0:	0a1b      	lsrs	r3, r3, #8
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	b2da      	uxtb	r2, r3
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800e6ba:	8abb      	ldrh	r3, [r7, #20]
 800e6bc:	b2da      	uxtb	r2, r3
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800e6c2:	69bb      	ldr	r3, [r7, #24]
 800e6c4:	220c      	movs	r2, #12
 800e6c6:	60da      	str	r2, [r3, #12]

  return 0;
 800e6c8:	2300      	movs	r3, #0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3720      	adds	r7, #32
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
	...

0800e6d4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b086      	sub	sp, #24
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	32b0      	adds	r2, #176	@ 0xb0
 800e6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6f0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800e6f2:	2304      	movs	r3, #4
 800e6f4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d102      	bne.n	800e702 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800e6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e700:	e027      	b.n	800e752 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	33b0      	adds	r3, #176	@ 0xb0
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	4413      	add	r3, r2
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	7afa      	ldrb	r2, [r7, #11]
 800e716:	4610      	mov	r0, r2
 800e718:	4798      	blx	r3
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d006      	beq.n	800e72e <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800e720:	4b0e      	ldr	r3, [pc, #56]	@ (800e75c <SCSI_ModeSense6+0x88>)
 800e722:	789b      	ldrb	r3, [r3, #2]
 800e724:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e728:	b2da      	uxtb	r2, r3
 800e72a:	4b0c      	ldr	r3, [pc, #48]	@ (800e75c <SCSI_ModeSense6+0x88>)
 800e72c:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	3304      	adds	r3, #4
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	461a      	mov	r2, r3
 800e736:	8afb      	ldrh	r3, [r7, #22]
 800e738:	4293      	cmp	r3, r2
 800e73a:	d303      	bcc.n	800e744 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	3304      	adds	r3, #4
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800e744:	8afb      	ldrh	r3, [r7, #22]
 800e746:	461a      	mov	r2, r3
 800e748:	4904      	ldr	r1, [pc, #16]	@ (800e75c <SCSI_ModeSense6+0x88>)
 800e74a:	6938      	ldr	r0, [r7, #16]
 800e74c:	f000 fe3e 	bl	800f3cc <SCSI_UpdateBotData>

  return 0;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	24000084 	.word	0x24000084

0800e760 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b086      	sub	sp, #24
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	460b      	mov	r3, r1
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	32b0      	adds	r2, #176	@ 0xb0
 800e778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e77c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800e77e:	2308      	movs	r3, #8
 800e780:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d102      	bne.n	800e78e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800e788:	f04f 33ff 	mov.w	r3, #4294967295
 800e78c:	e027      	b.n	800e7de <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	33b0      	adds	r3, #176	@ 0xb0
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4413      	add	r3, r2
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	7afa      	ldrb	r2, [r7, #11]
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	4798      	blx	r3
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d006      	beq.n	800e7ba <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800e7ac:	4b0e      	ldr	r3, [pc, #56]	@ (800e7e8 <SCSI_ModeSense10+0x88>)
 800e7ae:	78db      	ldrb	r3, [r3, #3]
 800e7b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e7b4:	b2da      	uxtb	r2, r3
 800e7b6:	4b0c      	ldr	r3, [pc, #48]	@ (800e7e8 <SCSI_ModeSense10+0x88>)
 800e7b8:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3308      	adds	r3, #8
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	8afb      	ldrh	r3, [r7, #22]
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d303      	bcc.n	800e7d0 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	3308      	adds	r3, #8
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800e7d0:	8afb      	ldrh	r3, [r7, #22]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	4904      	ldr	r1, [pc, #16]	@ (800e7e8 <SCSI_ModeSense10+0x88>)
 800e7d6:	6938      	ldr	r0, [r7, #16]
 800e7d8:	f000 fdf8 	bl	800f3cc <SCSI_UpdateBotData>

  return 0;
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3718      	adds	r7, #24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	24000088 	.word	0x24000088

0800e7ec <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b086      	sub	sp, #24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	607a      	str	r2, [r7, #4]
 800e7f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	32b0      	adds	r2, #176	@ 0xb0
 800e804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e808:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d102      	bne.n	800e816 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800e810:	f04f 33ff 	mov.w	r3, #4294967295
 800e814:	e069      	b.n	800e8ea <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10a      	bne.n	800e836 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800e826:	2320      	movs	r3, #32
 800e828:	2205      	movs	r2, #5
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f000 f861 	bl	800e8f2 <SCSI_SenseCode>
    return -1;
 800e830:	f04f 33ff 	mov.w	r3, #4294967295
 800e834:	e059      	b.n	800e8ea <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800e836:	2300      	movs	r3, #0
 800e838:	75fb      	strb	r3, [r7, #23]
 800e83a:	e007      	b.n	800e84c <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800e83c:	7dfb      	ldrb	r3, [r7, #23]
 800e83e:	693a      	ldr	r2, [r7, #16]
 800e840:	4413      	add	r3, r2
 800e842:	2200      	movs	r2, #0
 800e844:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800e846:	7dfb      	ldrb	r3, [r7, #23]
 800e848:	3301      	adds	r3, #1
 800e84a:	75fb      	strb	r3, [r7, #23]
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	2b11      	cmp	r3, #17
 800e850:	d9f4      	bls.n	800e83c <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	2270      	movs	r2, #112	@ 0x70
 800e856:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	220c      	movs	r2, #12
 800e85c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d02e      	beq.n	800e8cc <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800e874:	461a      	mov	r2, r3
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	3248      	adds	r2, #72	@ 0x48
 800e87a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	3348      	adds	r3, #72	@ 0x48
 800e88c:	00db      	lsls	r3, r3, #3
 800e88e:	4413      	add	r3, r2
 800e890:	791a      	ldrb	r2, [r3, #4]
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800e89c:	693a      	ldr	r2, [r7, #16]
 800e89e:	3348      	adds	r3, #72	@ 0x48
 800e8a0:	00db      	lsls	r3, r3, #3
 800e8a2:	4413      	add	r3, r2
 800e8a4:	795a      	ldrb	r2, [r3, #5]
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	b2da      	uxtb	r2, r3
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800e8c0:	2b04      	cmp	r3, #4
 800e8c2:	d103      	bne.n	800e8cc <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	2212      	movs	r2, #18
 800e8d0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	2b12      	cmp	r3, #18
 800e8da:	d805      	bhi.n	800e8e8 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3718      	adds	r7, #24
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800e8f2:	b480      	push	{r7}
 800e8f4:	b085      	sub	sp, #20
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
 800e8fa:	4608      	mov	r0, r1
 800e8fc:	4611      	mov	r1, r2
 800e8fe:	461a      	mov	r2, r3
 800e900:	4603      	mov	r3, r0
 800e902:	70fb      	strb	r3, [r7, #3]
 800e904:	460b      	mov	r3, r1
 800e906:	70bb      	strb	r3, [r7, #2]
 800e908:	4613      	mov	r3, r2
 800e90a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	32b0      	adds	r2, #176	@ 0xb0
 800e916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e91a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d02c      	beq.n	800e97c <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800e928:	461a      	mov	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	3248      	adds	r2, #72	@ 0x48
 800e92e:	78b9      	ldrb	r1, [r7, #2]
 800e930:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	3348      	adds	r3, #72	@ 0x48
 800e93e:	00db      	lsls	r3, r3, #3
 800e940:	4413      	add	r3, r2
 800e942:	787a      	ldrb	r2, [r7, #1]
 800e944:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800e94c:	68fa      	ldr	r2, [r7, #12]
 800e94e:	3348      	adds	r3, #72	@ 0x48
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	4413      	add	r3, r2
 800e954:	2200      	movs	r2, #0
 800e956:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800e95e:	3301      	adds	r3, #1
 800e960:	b2da      	uxtb	r2, r3
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800e96e:	2b04      	cmp	r3, #4
 800e970:	d105      	bne.n	800e97e <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800e97a:	e000      	b.n	800e97e <SCSI_SenseCode+0x8c>
    return;
 800e97c:	bf00      	nop
  }
}
 800e97e:	3714      	adds	r7, #20
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	460b      	mov	r3, r1
 800e992:	607a      	str	r2, [r7, #4]
 800e994:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	32b0      	adds	r2, #176	@ 0xb0
 800e9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9a4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d102      	bne.n	800e9b2 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800e9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b0:	e03b      	b.n	800ea2a <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d10f      	bne.n	800e9dc <SCSI_StartStopUnit+0x54>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	3304      	adds	r3, #4
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	f003 0303 	and.w	r3, r3, #3
 800e9c6:	2b02      	cmp	r3, #2
 800e9c8:	d108      	bne.n	800e9dc <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e9ca:	7af9      	ldrb	r1, [r7, #11]
 800e9cc:	2324      	movs	r3, #36	@ 0x24
 800e9ce:	2205      	movs	r2, #5
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f7ff ff8e 	bl	800e8f2 <SCSI_SenseCode>

    return -1;
 800e9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9da:	e026      	b.n	800ea2a <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	3304      	adds	r3, #4
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	f003 0303 	and.w	r3, r3, #3
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d104      	bne.n	800e9f4 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800e9f2:	e016      	b.n	800ea22 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	f003 0303 	and.w	r3, r3, #3
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d104      	bne.n	800ea0c <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	2202      	movs	r2, #2
 800ea06:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800ea0a:	e00a      	b.n	800ea22 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3304      	adds	r3, #4
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	f003 0303 	and.w	r3, r3, #3
 800ea16:	2b03      	cmp	r3, #3
 800ea18:	d103      	bne.n	800ea22 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2200      	movs	r2, #0
 800ea26:	60da      	str	r2, [r3, #12]

  return 0;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea32:	b480      	push	{r7}
 800ea34:	b087      	sub	sp, #28
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	60f8      	str	r0, [r7, #12]
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	607a      	str	r2, [r7, #4]
 800ea3e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	32b0      	adds	r2, #176	@ 0xb0
 800ea4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea4e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d102      	bne.n	800ea5c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800ea56:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5a:	e011      	b.n	800ea80 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	3304      	adds	r3, #4
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d104      	bne.n	800ea70 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800ea6e:	e003      	b.n	800ea78 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	2201      	movs	r2, #1
 800ea74:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	60da      	str	r2, [r3, #12]

  return 0;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	371c      	adds	r7, #28
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b086      	sub	sp, #24
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	460b      	mov	r3, r1
 800ea96:	607a      	str	r2, [r7, #4]
 800ea98:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	32b0      	adds	r2, #176	@ 0xb0
 800eaa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d102      	bne.n	800eab6 <SCSI_Read10+0x2a>
  {
    return -1;
 800eab0:	f04f 33ff 	mov.w	r3, #4294967295
 800eab4:	e090      	b.n	800ebd8 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	7a1b      	ldrb	r3, [r3, #8]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f040 8082 	bne.w	800ebc4 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800eac6:	b25b      	sxtb	r3, r3
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	db0a      	blt.n	800eae2 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ead2:	2320      	movs	r3, #32
 800ead4:	2205      	movs	r2, #5
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f7ff ff0b 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800eadc:	f04f 33ff 	mov.w	r3, #4294967295
 800eae0:	e07a      	b.n	800ebd8 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800eae8:	2b02      	cmp	r3, #2
 800eaea:	d108      	bne.n	800eafe <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eaec:	7af9      	ldrb	r1, [r7, #11]
 800eaee:	233a      	movs	r3, #58	@ 0x3a
 800eaf0:	2202      	movs	r2, #2
 800eaf2:	68f8      	ldr	r0, [r7, #12]
 800eaf4:	f7ff fefd 	bl	800e8f2 <SCSI_SenseCode>

      return -1;
 800eaf8:	f04f 33ff 	mov.w	r3, #4294967295
 800eafc:	e06c      	b.n	800ebd8 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	33b0      	adds	r3, #176	@ 0xb0
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	4413      	add	r3, r2
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	7afa      	ldrb	r2, [r7, #11]
 800eb12:	4610      	mov	r0, r2
 800eb14:	4798      	blx	r3
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d008      	beq.n	800eb2e <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eb1c:	7af9      	ldrb	r1, [r7, #11]
 800eb1e:	233a      	movs	r3, #58	@ 0x3a
 800eb20:	2202      	movs	r2, #2
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f7ff fee5 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800eb28:	f04f 33ff 	mov.w	r3, #4294967295
 800eb2c:	e054      	b.n	800ebd8 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3302      	adds	r3, #2
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	3303      	adds	r3, #3
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eb3e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	3304      	adds	r3, #4
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800eb48:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	3205      	adds	r2, #5
 800eb4e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800eb50:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	3307      	adds	r3, #7
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	021b      	lsls	r3, r3, #8
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	3208      	adds	r2, #8
 800eb64:	7812      	ldrb	r2, [r2, #0]
 800eb66:	431a      	orrs	r2, r3
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800eb7a:	7af9      	ldrb	r1, [r7, #11]
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f000 fadc 	bl	800f13a <SCSI_CheckAddressRange>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	da02      	bge.n	800eb8e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800eb88:	f04f 33ff 	mov.w	r3, #4294967295
 800eb8c:	e024      	b.n	800ebd8 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800eb9a:	6979      	ldr	r1, [r7, #20]
 800eb9c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800eba0:	fb01 f303 	mul.w	r3, r1, r3
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d00a      	beq.n	800ebbe <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ebae:	2320      	movs	r3, #32
 800ebb0:	2205      	movs	r2, #5
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f7ff fe9d 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800ebb8:	f04f 33ff 	mov.w	r3, #4294967295
 800ebbc:	e00c      	b.n	800ebd8 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebca:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ebcc:	7afb      	ldrb	r3, [r7, #11]
 800ebce:	4619      	mov	r1, r3
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f000 fadf 	bl	800f194 <SCSI_ProcessRead>
 800ebd6:	4603      	mov	r3, r0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3718      	adds	r7, #24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	32b0      	adds	r2, #176	@ 0xb0
 800ebf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebfc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d102      	bne.n	800ec0a <SCSI_Read12+0x2a>
  {
    return -1;
 800ec04:	f04f 33ff 	mov.w	r3, #4294967295
 800ec08:	e09a      	b.n	800ed40 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	7a1b      	ldrb	r3, [r3, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f040 808c 	bne.w	800ed2c <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800ec1a:	b25b      	sxtb	r3, r3
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	db0a      	blt.n	800ec36 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ec26:	2320      	movs	r3, #32
 800ec28:	2205      	movs	r2, #5
 800ec2a:	68f8      	ldr	r0, [r7, #12]
 800ec2c:	f7ff fe61 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800ec30:	f04f 33ff 	mov.w	r3, #4294967295
 800ec34:	e084      	b.n	800ed40 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800ec3c:	2b02      	cmp	r3, #2
 800ec3e:	d108      	bne.n	800ec52 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ec40:	7af9      	ldrb	r1, [r7, #11]
 800ec42:	233a      	movs	r3, #58	@ 0x3a
 800ec44:	2202      	movs	r2, #2
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f7ff fe53 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800ec4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec50:	e076      	b.n	800ed40 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	33b0      	adds	r3, #176	@ 0xb0
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	4413      	add	r3, r2
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	7afa      	ldrb	r2, [r7, #11]
 800ec66:	4610      	mov	r0, r2
 800ec68:	4798      	blx	r3
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d008      	beq.n	800ec82 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ec70:	7af9      	ldrb	r1, [r7, #11]
 800ec72:	233a      	movs	r3, #58	@ 0x3a
 800ec74:	2202      	movs	r2, #2
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f7ff fe3b 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800ec7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec80:	e05e      	b.n	800ed40 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	3302      	adds	r3, #2
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	3303      	adds	r3, #3
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec92:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	3304      	adds	r3, #4
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ec9c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	3205      	adds	r2, #5
 800eca2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800eca4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	3306      	adds	r3, #6
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	3307      	adds	r3, #7
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ecbc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	3308      	adds	r3, #8
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ecc6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	3209      	adds	r2, #9
 800eccc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ecce:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ece2:	7af9      	ldrb	r1, [r7, #11]
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f000 fa28 	bl	800f13a <SCSI_CheckAddressRange>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	da02      	bge.n	800ecf6 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ecf0:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf4:	e024      	b.n	800ed40 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ed02:	6979      	ldr	r1, [r7, #20]
 800ed04:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800ed08:	fb01 f303 	mul.w	r3, r1, r3
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d00a      	beq.n	800ed26 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ed16:	2320      	movs	r3, #32
 800ed18:	2205      	movs	r2, #5
 800ed1a:	68f8      	ldr	r0, [r7, #12]
 800ed1c:	f7ff fde9 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800ed20:	f04f 33ff 	mov.w	r3, #4294967295
 800ed24:	e00c      	b.n	800ed40 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	2202      	movs	r2, #2
 800ed2a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed32:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ed34:	7afb      	ldrb	r3, [r7, #11]
 800ed36:	4619      	mov	r1, r3
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f000 fa2b 	bl	800f194 <SCSI_ProcessRead>
 800ed3e:	4603      	mov	r3, r0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3718      	adds	r7, #24
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	460b      	mov	r3, r1
 800ed52:	607a      	str	r2, [r7, #4]
 800ed54:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	32b0      	adds	r2, #176	@ 0xb0
 800ed60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed64:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d102      	bne.n	800ed72 <SCSI_Write10+0x2a>
  {
    return -1;
 800ed6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed70:	e0ba      	b.n	800eee8 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	7a1b      	ldrb	r3, [r3, #8]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f040 80b0 	bne.w	800eedc <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10a      	bne.n	800ed9c <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ed8c:	2320      	movs	r3, #32
 800ed8e:	2205      	movs	r2, #5
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f7ff fdae 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800ed96:	f04f 33ff 	mov.w	r3, #4294967295
 800ed9a:	e0a5      	b.n	800eee8 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800eda2:	b25b      	sxtb	r3, r3
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	da0a      	bge.n	800edbe <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800edae:	2320      	movs	r3, #32
 800edb0:	2205      	movs	r2, #5
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f7ff fd9d 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800edb8:	f04f 33ff 	mov.w	r3, #4294967295
 800edbc:	e094      	b.n	800eee8 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800edc4:	68fa      	ldr	r2, [r7, #12]
 800edc6:	33b0      	adds	r3, #176	@ 0xb0
 800edc8:	009b      	lsls	r3, r3, #2
 800edca:	4413      	add	r3, r2
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	689b      	ldr	r3, [r3, #8]
 800edd0:	7afa      	ldrb	r2, [r7, #11]
 800edd2:	4610      	mov	r0, r2
 800edd4:	4798      	blx	r3
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d008      	beq.n	800edee <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eddc:	7af9      	ldrb	r1, [r7, #11]
 800edde:	233a      	movs	r3, #58	@ 0x3a
 800ede0:	2202      	movs	r2, #2
 800ede2:	68f8      	ldr	r0, [r7, #12]
 800ede4:	f7ff fd85 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800ede8:	f04f 33ff 	mov.w	r3, #4294967295
 800edec:	e07c      	b.n	800eee8 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	33b0      	adds	r3, #176	@ 0xb0
 800edf8:	009b      	lsls	r3, r3, #2
 800edfa:	4413      	add	r3, r2
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	7afa      	ldrb	r2, [r7, #11]
 800ee02:	4610      	mov	r0, r2
 800ee04:	4798      	blx	r3
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d008      	beq.n	800ee1e <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ee0c:	7af9      	ldrb	r1, [r7, #11]
 800ee0e:	2327      	movs	r3, #39	@ 0x27
 800ee10:	2202      	movs	r2, #2
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f7ff fd6d 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800ee18:	f04f 33ff 	mov.w	r3, #4294967295
 800ee1c:	e064      	b.n	800eee8 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	3302      	adds	r3, #2
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	3303      	adds	r3, #3
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee2e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	3304      	adds	r3, #4
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ee38:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	3205      	adds	r2, #5
 800ee3e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ee40:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	3307      	adds	r3, #7
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	3208      	adds	r2, #8
 800ee54:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ee56:	431a      	orrs	r2, r3
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ee6a:	7af9      	ldrb	r1, [r7, #11]
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f000 f964 	bl	800f13a <SCSI_CheckAddressRange>
 800ee72:	4603      	mov	r3, r0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	da02      	bge.n	800ee7e <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ee78:	f04f 33ff 	mov.w	r3, #4294967295
 800ee7c:	e034      	b.n	800eee8 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ee84:	697a      	ldr	r2, [r7, #20]
 800ee86:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800ee8a:	fb02 f303 	mul.w	r3, r2, r3
 800ee8e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ee96:	693a      	ldr	r2, [r7, #16]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d00a      	beq.n	800eeb2 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800eea2:	2320      	movs	r3, #32
 800eea4:	2205      	movs	r2, #5
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f7ff fd23 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800eeac:	f04f 33ff 	mov.w	r3, #4294967295
 800eeb0:	e01a      	b.n	800eee8 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eeb8:	bf28      	it	cs
 800eeba:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800eebe:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2201      	movs	r2, #1
 800eec4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800eec6:	4b0a      	ldr	r3, [pc, #40]	@ (800eef0 <SCSI_Write10+0x1a8>)
 800eec8:	7819      	ldrb	r1, [r3, #0]
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	f103 0210 	add.w	r2, r3, #16
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f002 facd 	bl	8011472 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800eed8:	2300      	movs	r3, #0
 800eeda:	e005      	b.n	800eee8 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800eedc:	7afb      	ldrb	r3, [r7, #11]
 800eede:	4619      	mov	r1, r3
 800eee0:	68f8      	ldr	r0, [r7, #12]
 800eee2:	f000 f9dd 	bl	800f2a0 <SCSI_ProcessWrite>
 800eee6:	4603      	mov	r3, r0
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3718      	adds	r7, #24
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	24000073 	.word	0x24000073

0800eef4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	460b      	mov	r3, r1
 800eefe:	607a      	str	r2, [r7, #4]
 800ef00:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	32b0      	adds	r2, #176	@ 0xb0
 800ef0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef10:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d102      	bne.n	800ef1e <SCSI_Write12+0x2a>
  {
    return -1;
 800ef18:	f04f 33ff 	mov.w	r3, #4294967295
 800ef1c:	e0ca      	b.n	800f0b4 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	7a1b      	ldrb	r3, [r3, #8]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f040 80c0 	bne.w	800f0a8 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d10a      	bne.n	800ef48 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ef38:	2320      	movs	r3, #32
 800ef3a:	2205      	movs	r2, #5
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f7ff fcd8 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800ef42:	f04f 33ff 	mov.w	r3, #4294967295
 800ef46:	e0b5      	b.n	800f0b4 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800ef4e:	b25b      	sxtb	r3, r3
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	da0a      	bge.n	800ef6a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ef5a:	2320      	movs	r3, #32
 800ef5c:	2205      	movs	r2, #5
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	f7ff fcc7 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800ef64:	f04f 33ff 	mov.w	r3, #4294967295
 800ef68:	e0a4      	b.n	800f0b4 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ef70:	68fa      	ldr	r2, [r7, #12]
 800ef72:	33b0      	adds	r3, #176	@ 0xb0
 800ef74:	009b      	lsls	r3, r3, #2
 800ef76:	4413      	add	r3, r2
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	689b      	ldr	r3, [r3, #8]
 800ef7c:	7afa      	ldrb	r2, [r7, #11]
 800ef7e:	4610      	mov	r0, r2
 800ef80:	4798      	blx	r3
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d00b      	beq.n	800efa0 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef88:	7af9      	ldrb	r1, [r7, #11]
 800ef8a:	233a      	movs	r3, #58	@ 0x3a
 800ef8c:	2202      	movs	r2, #2
 800ef8e:	68f8      	ldr	r0, [r7, #12]
 800ef90:	f7ff fcaf 	bl	800e8f2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	2205      	movs	r2, #5
 800ef98:	721a      	strb	r2, [r3, #8]
      return -1;
 800ef9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef9e:	e089      	b.n	800f0b4 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	33b0      	adds	r3, #176	@ 0xb0
 800efaa:	009b      	lsls	r3, r3, #2
 800efac:	4413      	add	r3, r2
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	7afa      	ldrb	r2, [r7, #11]
 800efb4:	4610      	mov	r0, r2
 800efb6:	4798      	blx	r3
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00b      	beq.n	800efd6 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800efbe:	7af9      	ldrb	r1, [r7, #11]
 800efc0:	2327      	movs	r3, #39	@ 0x27
 800efc2:	2202      	movs	r2, #2
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f7ff fc94 	bl	800e8f2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	2205      	movs	r2, #5
 800efce:	721a      	strb	r2, [r3, #8]
      return -1;
 800efd0:	f04f 33ff 	mov.w	r3, #4294967295
 800efd4:	e06e      	b.n	800f0b4 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	3302      	adds	r3, #2
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	3303      	adds	r3, #3
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800efe6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	3304      	adds	r3, #4
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800eff0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	3205      	adds	r2, #5
 800eff6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800eff8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	3306      	adds	r3, #6
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	3307      	adds	r3, #7
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f010:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	3308      	adds	r3, #8
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f01a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	3209      	adds	r2, #9
 800f020:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f022:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f036:	7af9      	ldrb	r1, [r7, #11]
 800f038:	68f8      	ldr	r0, [r7, #12]
 800f03a:	f000 f87e 	bl	800f13a <SCSI_CheckAddressRange>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	da02      	bge.n	800f04a <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f044:	f04f 33ff 	mov.w	r3, #4294967295
 800f048:	e034      	b.n	800f0b4 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f050:	697a      	ldr	r2, [r7, #20]
 800f052:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800f056:	fb02 f303 	mul.w	r3, r2, r3
 800f05a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f062:	693a      	ldr	r2, [r7, #16]
 800f064:	429a      	cmp	r2, r3
 800f066:	d00a      	beq.n	800f07e <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800f06e:	2320      	movs	r3, #32
 800f070:	2205      	movs	r2, #5
 800f072:	68f8      	ldr	r0, [r7, #12]
 800f074:	f7ff fc3d 	bl	800e8f2 <SCSI_SenseCode>
      return -1;
 800f078:	f04f 33ff 	mov.w	r3, #4294967295
 800f07c:	e01a      	b.n	800f0b4 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f084:	bf28      	it	cs
 800f086:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800f08a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	2201      	movs	r2, #1
 800f090:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f092:	4b0a      	ldr	r3, [pc, #40]	@ (800f0bc <SCSI_Write12+0x1c8>)
 800f094:	7819      	ldrb	r1, [r3, #0]
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	f103 0210 	add.w	r2, r3, #16
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f002 f9e7 	bl	8011472 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	e005      	b.n	800f0b4 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800f0a8:	7afb      	ldrb	r3, [r7, #11]
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f000 f8f7 	bl	800f2a0 <SCSI_ProcessWrite>
 800f0b2:	4603      	mov	r3, r0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3718      	adds	r7, #24
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	24000073 	.word	0x24000073

0800f0c0 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b086      	sub	sp, #24
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	607a      	str	r2, [r7, #4]
 800f0cc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	32b0      	adds	r2, #176	@ 0xb0
 800f0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0dc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d102      	bne.n	800f0ea <SCSI_Verify10+0x2a>
  {
    return -1;
 800f0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e8:	e023      	b.n	800f132 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	f003 0302 	and.w	r3, r3, #2
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d008      	beq.n	800f10a <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f0f8:	7af9      	ldrb	r1, [r7, #11]
 800f0fa:	2324      	movs	r3, #36	@ 0x24
 800f0fc:	2205      	movs	r2, #5
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7ff fbf7 	bl	800e8f2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f104:	f04f 33ff 	mov.w	r3, #4294967295
 800f108:	e013      	b.n	800f132 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f116:	7af9      	ldrb	r1, [r7, #11]
 800f118:	68f8      	ldr	r0, [r7, #12]
 800f11a:	f000 f80e 	bl	800f13a <SCSI_CheckAddressRange>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	da02      	bge.n	800f12a <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800f124:	f04f 33ff 	mov.w	r3, #4294967295
 800f128:	e003      	b.n	800f132 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	2200      	movs	r2, #0
 800f12e:	60da      	str	r2, [r3, #12]

  return 0;
 800f130:	2300      	movs	r3, #0
}
 800f132:	4618      	mov	r0, r3
 800f134:	3718      	adds	r7, #24
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}

0800f13a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f13a:	b580      	push	{r7, lr}
 800f13c:	b086      	sub	sp, #24
 800f13e:	af00      	add	r7, sp, #0
 800f140:	60f8      	str	r0, [r7, #12]
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	603b      	str	r3, [r7, #0]
 800f146:	460b      	mov	r3, r1
 800f148:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	32b0      	adds	r2, #176	@ 0xb0
 800f154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f158:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d102      	bne.n	800f166 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800f160:	f04f 33ff 	mov.w	r3, #4294967295
 800f164:	e011      	b.n	800f18a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	441a      	add	r2, r3
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800f172:	429a      	cmp	r2, r3
 800f174:	d908      	bls.n	800f188 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f176:	7af9      	ldrb	r1, [r7, #11]
 800f178:	2321      	movs	r3, #33	@ 0x21
 800f17a:	2205      	movs	r2, #5
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f7ff fbb8 	bl	800e8f2 <SCSI_SenseCode>
    return -1;
 800f182:	f04f 33ff 	mov.w	r3, #4294967295
 800f186:	e000      	b.n	800f18a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800f188:	2300      	movs	r3, #0
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3718      	adds	r7, #24
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
	...

0800f194 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f194:	b590      	push	{r4, r7, lr}
 800f196:	b085      	sub	sp, #20
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	460b      	mov	r3, r1
 800f19e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	32b0      	adds	r2, #176	@ 0xb0
 800f1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1ae:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d102      	bne.n	800f1bc <SCSI_ProcessRead+0x28>
  {
    return -1;
 800f1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ba:	e06a      	b.n	800f292 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800f1c8:	fb02 f303 	mul.w	r3, r2, r3
 800f1cc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1d4:	bf28      	it	cs
 800f1d6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800f1da:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	33b0      	adds	r3, #176	@ 0xb0
 800f1e6:	009b      	lsls	r3, r3, #2
 800f1e8:	4413      	add	r3, r2
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	691c      	ldr	r4, [r3, #16]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f103 0110 	add.w	r1, r3, #16
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f200:	4618      	mov	r0, r3
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f208:	b29b      	uxth	r3, r3
 800f20a:	78f8      	ldrb	r0, [r7, #3]
 800f20c:	47a0      	blx	r4
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	da08      	bge.n	800f226 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f214:	78f9      	ldrb	r1, [r7, #3]
 800f216:	2311      	movs	r3, #17
 800f218:	2204      	movs	r2, #4
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f7ff fb69 	bl	800e8f2 <SCSI_SenseCode>
    return -1;
 800f220:	f04f 33ff 	mov.w	r3, #4294967295
 800f224:	e035      	b.n	800f292 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800f226:	4b1d      	ldr	r3, [pc, #116]	@ (800f29c <SCSI_ProcessRead+0x108>)
 800f228:	7819      	ldrb	r1, [r3, #0]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f103 0210 	add.w	r2, r3, #16
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f002 f8fc 	bl	8011430 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f244:	4619      	mov	r1, r3
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	fbb3 f3f1 	udiv	r3, r3, r1
 800f24c:	441a      	add	r2, r3
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f260:	4619      	mov	r1, r3
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	fbb3 f3f1 	udiv	r3, r3, r1
 800f268:	1ad2      	subs	r2, r2, r3
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	1ad2      	subs	r2, r2, r3
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f286:	2b00      	cmp	r3, #0
 800f288:	d102      	bne.n	800f290 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2203      	movs	r2, #3
 800f28e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f290:	2300      	movs	r3, #0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3714      	adds	r7, #20
 800f296:	46bd      	mov	sp, r7
 800f298:	bd90      	pop	{r4, r7, pc}
 800f29a:	bf00      	nop
 800f29c:	24000072 	.word	0x24000072

0800f2a0 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f2a0:	b590      	push	{r4, r7, lr}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	32b0      	adds	r2, #176	@ 0xb0
 800f2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ba:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d102      	bne.n	800f2c8 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800f2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c6:	e07a      	b.n	800f3be <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800f2d4:	fb02 f303 	mul.w	r3, r2, r3
 800f2d8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2e0:	bf28      	it	cs
 800f2e2:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800f2e6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	33b0      	adds	r3, #176	@ 0xb0
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	4413      	add	r3, r2
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	695c      	ldr	r4, [r3, #20]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f103 0110 	add.w	r1, r3, #16
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f30c:	4618      	mov	r0, r3
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f314:	b29b      	uxth	r3, r3
 800f316:	78f8      	ldrb	r0, [r7, #3]
 800f318:	47a0      	blx	r4
 800f31a:	4603      	mov	r3, r0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	da08      	bge.n	800f332 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f320:	78f9      	ldrb	r1, [r7, #3]
 800f322:	2303      	movs	r3, #3
 800f324:	2204      	movs	r2, #4
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7ff fae3 	bl	800e8f2 <SCSI_SenseCode>
    return -1;
 800f32c:	f04f 33ff 	mov.w	r3, #4294967295
 800f330:	e045      	b.n	800f3be <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f33e:	4619      	mov	r1, r3
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	fbb3 f3f1 	udiv	r3, r3, r1
 800f346:	441a      	add	r2, r3
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f35a:	4619      	mov	r1, r3
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f362:	1ad2      	subs	r2, r2, r3
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	1ad2      	subs	r2, r2, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f380:	2b00      	cmp	r3, #0
 800f382:	d104      	bne.n	800f38e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f384:	2100      	movs	r1, #0
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f7fe fce8 	bl	800dd5c <MSC_BOT_SendCSW>
 800f38c:	e016      	b.n	800f3bc <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f394:	68fa      	ldr	r2, [r7, #12]
 800f396:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800f39a:	fb02 f303 	mul.w	r3, r2, r3
 800f39e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f3a2:	bf28      	it	cs
 800f3a4:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800f3a8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f3aa:	4b07      	ldr	r3, [pc, #28]	@ (800f3c8 <SCSI_ProcessWrite+0x128>)
 800f3ac:	7819      	ldrb	r1, [r3, #0]
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f103 0210 	add.w	r2, r3, #16
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f002 f85b 	bl	8011472 <USBD_LL_PrepareReceive>
  }

  return 0;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3714      	adds	r7, #20
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd90      	pop	{r4, r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	24000073 	.word	0x24000073

0800f3cc <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b087      	sub	sp, #28
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f3da:	88fb      	ldrh	r3, [r7, #6]
 800f3dc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d102      	bne.n	800f3ea <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800f3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e8:	e013      	b.n	800f412 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800f3ea:	8afa      	ldrh	r2, [r7, #22]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f3f0:	e00b      	b.n	800f40a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800f3f2:	8afb      	ldrh	r3, [r7, #22]
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f3f8:	8afb      	ldrh	r3, [r7, #22]
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	441a      	add	r2, r3
 800f3fe:	8afb      	ldrh	r3, [r7, #22]
 800f400:	7811      	ldrb	r1, [r2, #0]
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	4413      	add	r3, r2
 800f406:	460a      	mov	r2, r1
 800f408:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f40a:	8afb      	ldrh	r3, [r7, #22]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d1f0      	bne.n	800f3f2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	371c      	adds	r7, #28
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr

0800f41e <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b086      	sub	sp, #24
 800f422:	af00      	add	r7, sp, #0
 800f424:	60f8      	str	r0, [r7, #12]
 800f426:	60b9      	str	r1, [r7, #8]
 800f428:	4613      	mov	r3, r2
 800f42a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d101      	bne.n	800f436 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f432:	2303      	movs	r3, #3
 800f434:	e01f      	b.n	800f476 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2200      	movs	r2, #0
 800f43a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2200      	movs	r2, #0
 800f442:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2200      	movs	r2, #0
 800f44a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d003      	beq.n	800f45c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	68ba      	ldr	r2, [r7, #8]
 800f458:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2201      	movs	r2, #1
 800f460:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	79fa      	ldrb	r2, [r7, #7]
 800f468:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f001 fe88 	bl	8011180 <USBD_LL_Init>
 800f470:	4603      	mov	r3, r0
 800f472:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f474:	7dfb      	ldrb	r3, [r7, #23]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f47e:	b580      	push	{r7, lr}
 800f480:	b084      	sub	sp, #16
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
 800f486:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f488:	2300      	movs	r3, #0
 800f48a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d101      	bne.n	800f496 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f492:	2303      	movs	r3, #3
 800f494:	e025      	b.n	800f4e2 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	32ae      	adds	r2, #174	@ 0xae
 800f4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d00f      	beq.n	800f4d2 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	32ae      	adds	r2, #174	@ 0xae
 800f4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c2:	f107 020e 	add.w	r2, r7, #14
 800f4c6:	4610      	mov	r0, r2
 800f4c8:	4798      	blx	r3
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f4d8:	1c5a      	adds	r2, r3, #1
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}

0800f4ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b082      	sub	sp, #8
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f001 fe94 	bl	8011220 <USBD_LL_Start>
 800f4f8:	4603      	mov	r3, r0
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f502:	b480      	push	{r7}
 800f504:	b083      	sub	sp, #12
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f50a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	370c      	adds	r7, #12
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	460b      	mov	r3, r1
 800f522:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f524:	2300      	movs	r3, #0
 800f526:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d009      	beq.n	800f546 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	78fa      	ldrb	r2, [r7, #3]
 800f53c:	4611      	mov	r1, r2
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	4798      	blx	r3
 800f542:	4603      	mov	r3, r0
 800f544:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f546:	7bfb      	ldrb	r3, [r7, #15]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	460b      	mov	r3, r1
 800f55a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f55c:	2300      	movs	r3, #0
 800f55e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	78fa      	ldrb	r2, [r7, #3]
 800f56a:	4611      	mov	r1, r2
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	4798      	blx	r3
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f576:	2303      	movs	r3, #3
 800f578:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3710      	adds	r7, #16
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f594:	6839      	ldr	r1, [r7, #0]
 800f596:	4618      	mov	r0, r3
 800f598:	f001 f935 	bl	8010806 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2201      	movs	r2, #1
 800f5a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f5b8:	f003 031f 	and.w	r3, r3, #31
 800f5bc:	2b02      	cmp	r3, #2
 800f5be:	d01a      	beq.n	800f5f6 <USBD_LL_SetupStage+0x72>
 800f5c0:	2b02      	cmp	r3, #2
 800f5c2:	d822      	bhi.n	800f60a <USBD_LL_SetupStage+0x86>
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d002      	beq.n	800f5ce <USBD_LL_SetupStage+0x4a>
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d00a      	beq.n	800f5e2 <USBD_LL_SetupStage+0x5e>
 800f5cc:	e01d      	b.n	800f60a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 fb62 	bl	800fca0 <USBD_StdDevReq>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	73fb      	strb	r3, [r7, #15]
      break;
 800f5e0:	e020      	b.n	800f624 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fbca 	bl	800fd84 <USBD_StdItfReq>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f5f4:	e016      	b.n	800f624 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 fc2c 	bl	800fe5c <USBD_StdEPReq>
 800f604:	4603      	mov	r3, r0
 800f606:	73fb      	strb	r3, [r7, #15]
      break;
 800f608:	e00c      	b.n	800f624 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f610:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f614:	b2db      	uxtb	r3, r3
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f001 fe80 	bl	801131e <USBD_LL_StallEP>
 800f61e:	4603      	mov	r3, r0
 800f620:	73fb      	strb	r3, [r7, #15]
      break;
 800f622:	bf00      	nop
  }

  return ret;
 800f624:	7bfb      	ldrb	r3, [r7, #15]
}
 800f626:	4618      	mov	r0, r3
 800f628:	3710      	adds	r7, #16
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}

0800f62e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f62e:	b580      	push	{r7, lr}
 800f630:	b086      	sub	sp, #24
 800f632:	af00      	add	r7, sp, #0
 800f634:	60f8      	str	r0, [r7, #12]
 800f636:	460b      	mov	r3, r1
 800f638:	607a      	str	r2, [r7, #4]
 800f63a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f63c:	2300      	movs	r3, #0
 800f63e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f640:	7afb      	ldrb	r3, [r7, #11]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d16e      	bne.n	800f724 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f64c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f654:	2b03      	cmp	r3, #3
 800f656:	f040 8098 	bne.w	800f78a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	689a      	ldr	r2, [r3, #8]
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	68db      	ldr	r3, [r3, #12]
 800f662:	429a      	cmp	r2, r3
 800f664:	d913      	bls.n	800f68e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	689a      	ldr	r2, [r3, #8]
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	1ad2      	subs	r2, r2, r3
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	68da      	ldr	r2, [r3, #12]
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	689b      	ldr	r3, [r3, #8]
 800f67c:	4293      	cmp	r3, r2
 800f67e:	bf28      	it	cs
 800f680:	4613      	movcs	r3, r2
 800f682:	461a      	mov	r2, r3
 800f684:	6879      	ldr	r1, [r7, #4]
 800f686:	68f8      	ldr	r0, [r7, #12]
 800f688:	f001 f9a0 	bl	80109cc <USBD_CtlContinueRx>
 800f68c:	e07d      	b.n	800f78a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f694:	f003 031f 	and.w	r3, r3, #31
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d014      	beq.n	800f6c6 <USBD_LL_DataOutStage+0x98>
 800f69c:	2b02      	cmp	r3, #2
 800f69e:	d81d      	bhi.n	800f6dc <USBD_LL_DataOutStage+0xae>
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d002      	beq.n	800f6aa <USBD_LL_DataOutStage+0x7c>
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	d003      	beq.n	800f6b0 <USBD_LL_DataOutStage+0x82>
 800f6a8:	e018      	b.n	800f6dc <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	75bb      	strb	r3, [r7, #22]
            break;
 800f6ae:	e018      	b.n	800f6e2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f000 fa64 	bl	800fb88 <USBD_CoreFindIF>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	75bb      	strb	r3, [r7, #22]
            break;
 800f6c4:	e00d      	b.n	800f6e2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	68f8      	ldr	r0, [r7, #12]
 800f6d2:	f000 fa66 	bl	800fba2 <USBD_CoreFindEP>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	75bb      	strb	r3, [r7, #22]
            break;
 800f6da:	e002      	b.n	800f6e2 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	75bb      	strb	r3, [r7, #22]
            break;
 800f6e0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f6e2:	7dbb      	ldrb	r3, [r7, #22]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d119      	bne.n	800f71c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	2b03      	cmp	r3, #3
 800f6f2:	d113      	bne.n	800f71c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f6f4:	7dba      	ldrb	r2, [r7, #22]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	32ae      	adds	r2, #174	@ 0xae
 800f6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00b      	beq.n	800f71c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f704:	7dba      	ldrb	r2, [r7, #22]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f70c:	7dba      	ldrb	r2, [r7, #22]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	32ae      	adds	r2, #174	@ 0xae
 800f712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f716:	691b      	ldr	r3, [r3, #16]
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f71c:	68f8      	ldr	r0, [r7, #12]
 800f71e:	f001 f966 	bl	80109ee <USBD_CtlSendStatus>
 800f722:	e032      	b.n	800f78a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f724:	7afb      	ldrb	r3, [r7, #11]
 800f726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	4619      	mov	r1, r3
 800f72e:	68f8      	ldr	r0, [r7, #12]
 800f730:	f000 fa37 	bl	800fba2 <USBD_CoreFindEP>
 800f734:	4603      	mov	r3, r0
 800f736:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f738:	7dbb      	ldrb	r3, [r7, #22]
 800f73a:	2bff      	cmp	r3, #255	@ 0xff
 800f73c:	d025      	beq.n	800f78a <USBD_LL_DataOutStage+0x15c>
 800f73e:	7dbb      	ldrb	r3, [r7, #22]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d122      	bne.n	800f78a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	2b03      	cmp	r3, #3
 800f74e:	d117      	bne.n	800f780 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f750:	7dba      	ldrb	r2, [r7, #22]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	32ae      	adds	r2, #174	@ 0xae
 800f756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f75a:	699b      	ldr	r3, [r3, #24]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00f      	beq.n	800f780 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f760:	7dba      	ldrb	r2, [r7, #22]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f768:	7dba      	ldrb	r2, [r7, #22]
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	32ae      	adds	r2, #174	@ 0xae
 800f76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f772:	699b      	ldr	r3, [r3, #24]
 800f774:	7afa      	ldrb	r2, [r7, #11]
 800f776:	4611      	mov	r1, r2
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	4798      	blx	r3
 800f77c:	4603      	mov	r3, r0
 800f77e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f780:	7dfb      	ldrb	r3, [r7, #23]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d001      	beq.n	800f78a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f786:	7dfb      	ldrb	r3, [r7, #23]
 800f788:	e000      	b.n	800f78c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3718      	adds	r7, #24
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b086      	sub	sp, #24
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	460b      	mov	r3, r1
 800f79e:	607a      	str	r2, [r7, #4]
 800f7a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f7a2:	7afb      	ldrb	r3, [r7, #11]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d16f      	bne.n	800f888 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	3314      	adds	r3, #20
 800f7ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f7b4:	2b02      	cmp	r3, #2
 800f7b6:	d15a      	bne.n	800f86e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	689a      	ldr	r2, [r3, #8]
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d914      	bls.n	800f7ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	689a      	ldr	r2, [r3, #8]
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	1ad2      	subs	r2, r2, r3
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	689b      	ldr	r3, [r3, #8]
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	6879      	ldr	r1, [r7, #4]
 800f7da:	68f8      	ldr	r0, [r7, #12]
 800f7dc:	f001 f8e5 	bl	80109aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f001 fe43 	bl	8011472 <USBD_LL_PrepareReceive>
 800f7ec:	e03f      	b.n	800f86e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	68da      	ldr	r2, [r3, #12]
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d11c      	bne.n	800f834 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	685a      	ldr	r2, [r3, #4]
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f802:	429a      	cmp	r2, r3
 800f804:	d316      	bcc.n	800f834 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	685a      	ldr	r2, [r3, #4]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f810:	429a      	cmp	r2, r3
 800f812:	d20f      	bcs.n	800f834 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f814:	2200      	movs	r2, #0
 800f816:	2100      	movs	r1, #0
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f001 f8c6 	bl	80109aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2200      	movs	r2, #0
 800f822:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f826:	2300      	movs	r3, #0
 800f828:	2200      	movs	r2, #0
 800f82a:	2100      	movs	r1, #0
 800f82c:	68f8      	ldr	r0, [r7, #12]
 800f82e:	f001 fe20 	bl	8011472 <USBD_LL_PrepareReceive>
 800f832:	e01c      	b.n	800f86e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	2b03      	cmp	r3, #3
 800f83e:	d10f      	bne.n	800f860 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d009      	beq.n	800f860 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2200      	movs	r2, #0
 800f850:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f860:	2180      	movs	r1, #128	@ 0x80
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f001 fd5b 	bl	801131e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f868:	68f8      	ldr	r0, [r7, #12]
 800f86a:	f001 f8d3 	bl	8010a14 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d03a      	beq.n	800f8ee <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f878:	68f8      	ldr	r0, [r7, #12]
 800f87a:	f7ff fe42 	bl	800f502 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2200      	movs	r2, #0
 800f882:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f886:	e032      	b.n	800f8ee <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f888:	7afb      	ldrb	r3, [r7, #11]
 800f88a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	4619      	mov	r1, r3
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f000 f985 	bl	800fba2 <USBD_CoreFindEP>
 800f898:	4603      	mov	r3, r0
 800f89a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f89c:	7dfb      	ldrb	r3, [r7, #23]
 800f89e:	2bff      	cmp	r3, #255	@ 0xff
 800f8a0:	d025      	beq.n	800f8ee <USBD_LL_DataInStage+0x15a>
 800f8a2:	7dfb      	ldrb	r3, [r7, #23]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d122      	bne.n	800f8ee <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b03      	cmp	r3, #3
 800f8b2:	d11c      	bne.n	800f8ee <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f8b4:	7dfa      	ldrb	r2, [r7, #23]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	32ae      	adds	r2, #174	@ 0xae
 800f8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8be:	695b      	ldr	r3, [r3, #20]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d014      	beq.n	800f8ee <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f8c4:	7dfa      	ldrb	r2, [r7, #23]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f8cc:	7dfa      	ldrb	r2, [r7, #23]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	32ae      	adds	r2, #174	@ 0xae
 800f8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8d6:	695b      	ldr	r3, [r3, #20]
 800f8d8:	7afa      	ldrb	r2, [r7, #11]
 800f8da:	4611      	mov	r1, r2
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	4798      	blx	r3
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f8e4:	7dbb      	ldrb	r3, [r7, #22]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d001      	beq.n	800f8ee <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f8ea:	7dbb      	ldrb	r3, [r7, #22]
 800f8ec:	e000      	b.n	800f8f0 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3718      	adds	r7, #24
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f900:	2300      	movs	r3, #0
 800f902:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2201      	movs	r2, #1
 800f908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2200      	movs	r2, #0
 800f918:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2200      	movs	r2, #0
 800f91e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2200      	movs	r2, #0
 800f926:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f930:	2b00      	cmp	r3, #0
 800f932:	d014      	beq.n	800f95e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00e      	beq.n	800f95e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	6852      	ldr	r2, [r2, #4]
 800f94c:	b2d2      	uxtb	r2, r2
 800f94e:	4611      	mov	r1, r2
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	4798      	blx	r3
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d001      	beq.n	800f95e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f95a:	2303      	movs	r3, #3
 800f95c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f95e:	2340      	movs	r3, #64	@ 0x40
 800f960:	2200      	movs	r2, #0
 800f962:	2100      	movs	r1, #0
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f001 fc76 	bl	8011256 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2201      	movs	r2, #1
 800f96e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2240      	movs	r2, #64	@ 0x40
 800f976:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f97a:	2340      	movs	r3, #64	@ 0x40
 800f97c:	2200      	movs	r2, #0
 800f97e:	2180      	movs	r1, #128	@ 0x80
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f001 fc68 	bl	8011256 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2201      	movs	r2, #1
 800f98a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2240      	movs	r2, #64	@ 0x40
 800f990:	621a      	str	r2, [r3, #32]

  return ret;
 800f992:	7bfb      	ldrb	r3, [r7, #15]
}
 800f994:	4618      	mov	r0, r3
 800f996:	3710      	adds	r7, #16
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	78fa      	ldrb	r2, [r7, #3]
 800f9ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f9ae:	2300      	movs	r3, #0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	2b04      	cmp	r3, #4
 800f9ce:	d006      	beq.n	800f9de <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9d6:	b2da      	uxtb	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2204      	movs	r2, #4
 800f9e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f9e6:	2300      	movs	r3, #0
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	2b04      	cmp	r3, #4
 800fa06:	d106      	bne.n	800fa16 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800fa0e:	b2da      	uxtb	r2, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr

0800fa24 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	2b03      	cmp	r3, #3
 800fa36:	d110      	bne.n	800fa5a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00b      	beq.n	800fa5a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa48:	69db      	ldr	r3, [r3, #28]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d005      	beq.n	800fa5a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa54:	69db      	ldr	r3, [r3, #28]
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3708      	adds	r7, #8
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	32ae      	adds	r2, #174	@ 0xae
 800fa7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d101      	bne.n	800fa86 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fa82:	2303      	movs	r3, #3
 800fa84:	e01c      	b.n	800fac0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d115      	bne.n	800fabe <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	32ae      	adds	r2, #174	@ 0xae
 800fa9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faa0:	6a1b      	ldr	r3, [r3, #32]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00b      	beq.n	800fabe <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	32ae      	adds	r2, #174	@ 0xae
 800fab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fab4:	6a1b      	ldr	r3, [r3, #32]
 800fab6:	78fa      	ldrb	r2, [r7, #3]
 800fab8:	4611      	mov	r1, r2
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	460b      	mov	r3, r1
 800fad2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	32ae      	adds	r2, #174	@ 0xae
 800fade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d101      	bne.n	800faea <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fae6:	2303      	movs	r3, #3
 800fae8:	e01c      	b.n	800fb24 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	2b03      	cmp	r3, #3
 800faf4:	d115      	bne.n	800fb22 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	32ae      	adds	r2, #174	@ 0xae
 800fb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00b      	beq.n	800fb22 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	32ae      	adds	r2, #174	@ 0xae
 800fb14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb1a:	78fa      	ldrb	r2, [r7, #3]
 800fb1c:	4611      	mov	r1, r2
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fb22:	2300      	movs	r3, #0
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr

0800fb42 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b084      	sub	sp, #16
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2201      	movs	r2, #1
 800fb52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00e      	beq.n	800fb7e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	6852      	ldr	r2, [r2, #4]
 800fb6c:	b2d2      	uxtb	r2, r2
 800fb6e:	4611      	mov	r1, r2
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	4798      	blx	r3
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d001      	beq.n	800fb7e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fb7a:	2303      	movs	r3, #3
 800fb7c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	460b      	mov	r3, r1
 800fb92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fb94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	370c      	adds	r7, #12
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr

0800fba2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fba2:	b480      	push	{r7}
 800fba4:	b083      	sub	sp, #12
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	460b      	mov	r3, r1
 800fbac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fbae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr

0800fbbc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b086      	sub	sp, #24
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	885b      	ldrh	r3, [r3, #2]
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	7812      	ldrb	r2, [r2, #0]
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d91f      	bls.n	800fc22 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800fbe8:	e013      	b.n	800fc12 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800fbea:	f107 030a 	add.w	r3, r7, #10
 800fbee:	4619      	mov	r1, r3
 800fbf0:	6978      	ldr	r0, [r7, #20]
 800fbf2:	f000 f81b 	bl	800fc2c <USBD_GetNextDesc>
 800fbf6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	785b      	ldrb	r3, [r3, #1]
 800fbfc:	2b05      	cmp	r3, #5
 800fbfe:	d108      	bne.n	800fc12 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	789b      	ldrb	r3, [r3, #2]
 800fc08:	78fa      	ldrb	r2, [r7, #3]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d008      	beq.n	800fc20 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	885b      	ldrh	r3, [r3, #2]
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	897b      	ldrh	r3, [r7, #10]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d8e5      	bhi.n	800fbea <USBD_GetEpDesc+0x2e>
 800fc1e:	e000      	b.n	800fc22 <USBD_GetEpDesc+0x66>
          break;
 800fc20:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800fc22:	693b      	ldr	r3, [r7, #16]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3718      	adds	r7, #24
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b085      	sub	sp, #20
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	881b      	ldrh	r3, [r3, #0]
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	7812      	ldrb	r2, [r2, #0]
 800fc42:	4413      	add	r3, r2
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	4413      	add	r3, r2
 800fc54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fc56:	68fb      	ldr	r3, [r7, #12]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3714      	adds	r7, #20
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b087      	sub	sp, #28
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fc82:	8a3b      	ldrh	r3, [r7, #16]
 800fc84:	021b      	lsls	r3, r3, #8
 800fc86:	b21a      	sxth	r2, r3
 800fc88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	b21b      	sxth	r3, r3
 800fc90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fc92:	89fb      	ldrh	r3, [r7, #14]
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	371c      	adds	r7, #28
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr

0800fca0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fcb6:	2b40      	cmp	r3, #64	@ 0x40
 800fcb8:	d005      	beq.n	800fcc6 <USBD_StdDevReq+0x26>
 800fcba:	2b40      	cmp	r3, #64	@ 0x40
 800fcbc:	d857      	bhi.n	800fd6e <USBD_StdDevReq+0xce>
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00f      	beq.n	800fce2 <USBD_StdDevReq+0x42>
 800fcc2:	2b20      	cmp	r3, #32
 800fcc4:	d153      	bne.n	800fd6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	32ae      	adds	r2, #174	@ 0xae
 800fcd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcd4:	689b      	ldr	r3, [r3, #8]
 800fcd6:	6839      	ldr	r1, [r7, #0]
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	4798      	blx	r3
 800fcdc:	4603      	mov	r3, r0
 800fcde:	73fb      	strb	r3, [r7, #15]
      break;
 800fce0:	e04a      	b.n	800fd78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	785b      	ldrb	r3, [r3, #1]
 800fce6:	2b09      	cmp	r3, #9
 800fce8:	d83b      	bhi.n	800fd62 <USBD_StdDevReq+0xc2>
 800fcea:	a201      	add	r2, pc, #4	@ (adr r2, 800fcf0 <USBD_StdDevReq+0x50>)
 800fcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf0:	0800fd45 	.word	0x0800fd45
 800fcf4:	0800fd59 	.word	0x0800fd59
 800fcf8:	0800fd63 	.word	0x0800fd63
 800fcfc:	0800fd4f 	.word	0x0800fd4f
 800fd00:	0800fd63 	.word	0x0800fd63
 800fd04:	0800fd23 	.word	0x0800fd23
 800fd08:	0800fd19 	.word	0x0800fd19
 800fd0c:	0800fd63 	.word	0x0800fd63
 800fd10:	0800fd3b 	.word	0x0800fd3b
 800fd14:	0800fd2d 	.word	0x0800fd2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fd18:	6839      	ldr	r1, [r7, #0]
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f000 fa3c 	bl	8010198 <USBD_GetDescriptor>
          break;
 800fd20:	e024      	b.n	800fd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fd22:	6839      	ldr	r1, [r7, #0]
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f000 fbcb 	bl	80104c0 <USBD_SetAddress>
          break;
 800fd2a:	e01f      	b.n	800fd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fd2c:	6839      	ldr	r1, [r7, #0]
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 fc0a 	bl	8010548 <USBD_SetConfig>
 800fd34:	4603      	mov	r3, r0
 800fd36:	73fb      	strb	r3, [r7, #15]
          break;
 800fd38:	e018      	b.n	800fd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fd3a:	6839      	ldr	r1, [r7, #0]
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f000 fcad 	bl	801069c <USBD_GetConfig>
          break;
 800fd42:	e013      	b.n	800fd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fd44:	6839      	ldr	r1, [r7, #0]
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 fcde 	bl	8010708 <USBD_GetStatus>
          break;
 800fd4c:	e00e      	b.n	800fd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fd4e:	6839      	ldr	r1, [r7, #0]
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 fd0d 	bl	8010770 <USBD_SetFeature>
          break;
 800fd56:	e009      	b.n	800fd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fd58:	6839      	ldr	r1, [r7, #0]
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 fd31 	bl	80107c2 <USBD_ClrFeature>
          break;
 800fd60:	e004      	b.n	800fd6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800fd62:	6839      	ldr	r1, [r7, #0]
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 fd88 	bl	801087a <USBD_CtlError>
          break;
 800fd6a:	bf00      	nop
      }
      break;
 800fd6c:	e004      	b.n	800fd78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 fd82 	bl	801087a <USBD_CtlError>
      break;
 800fd76:	bf00      	nop
  }

  return ret;
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3710      	adds	r7, #16
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop

0800fd84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fd9a:	2b40      	cmp	r3, #64	@ 0x40
 800fd9c:	d005      	beq.n	800fdaa <USBD_StdItfReq+0x26>
 800fd9e:	2b40      	cmp	r3, #64	@ 0x40
 800fda0:	d852      	bhi.n	800fe48 <USBD_StdItfReq+0xc4>
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d001      	beq.n	800fdaa <USBD_StdItfReq+0x26>
 800fda6:	2b20      	cmp	r3, #32
 800fda8:	d14e      	bne.n	800fe48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	2b02      	cmp	r3, #2
 800fdb6:	d840      	bhi.n	800fe3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	889b      	ldrh	r3, [r3, #4]
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d836      	bhi.n	800fe30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	889b      	ldrh	r3, [r3, #4]
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	4619      	mov	r1, r3
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f7ff fedc 	bl	800fb88 <USBD_CoreFindIF>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fdd4:	7bbb      	ldrb	r3, [r7, #14]
 800fdd6:	2bff      	cmp	r3, #255	@ 0xff
 800fdd8:	d01d      	beq.n	800fe16 <USBD_StdItfReq+0x92>
 800fdda:	7bbb      	ldrb	r3, [r7, #14]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d11a      	bne.n	800fe16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800fde0:	7bba      	ldrb	r2, [r7, #14]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	32ae      	adds	r2, #174	@ 0xae
 800fde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d00f      	beq.n	800fe10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fdf0:	7bba      	ldrb	r2, [r7, #14]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fdf8:	7bba      	ldrb	r2, [r7, #14]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	32ae      	adds	r2, #174	@ 0xae
 800fdfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	6839      	ldr	r1, [r7, #0]
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	4798      	blx	r3
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fe0e:	e004      	b.n	800fe1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800fe10:	2303      	movs	r3, #3
 800fe12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fe14:	e001      	b.n	800fe1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800fe16:	2303      	movs	r3, #3
 800fe18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	88db      	ldrh	r3, [r3, #6]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d110      	bne.n	800fe44 <USBD_StdItfReq+0xc0>
 800fe22:	7bfb      	ldrb	r3, [r7, #15]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d10d      	bne.n	800fe44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fde0 	bl	80109ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fe2e:	e009      	b.n	800fe44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800fe30:	6839      	ldr	r1, [r7, #0]
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 fd21 	bl	801087a <USBD_CtlError>
          break;
 800fe38:	e004      	b.n	800fe44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fe3a:	6839      	ldr	r1, [r7, #0]
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fd1c 	bl	801087a <USBD_CtlError>
          break;
 800fe42:	e000      	b.n	800fe46 <USBD_StdItfReq+0xc2>
          break;
 800fe44:	bf00      	nop
      }
      break;
 800fe46:	e004      	b.n	800fe52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800fe48:	6839      	ldr	r1, [r7, #0]
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 fd15 	bl	801087a <USBD_CtlError>
      break;
 800fe50:	bf00      	nop
  }

  return ret;
 800fe52:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3710      	adds	r7, #16
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800fe66:	2300      	movs	r3, #0
 800fe68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	889b      	ldrh	r3, [r3, #4]
 800fe6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fe78:	2b40      	cmp	r3, #64	@ 0x40
 800fe7a:	d007      	beq.n	800fe8c <USBD_StdEPReq+0x30>
 800fe7c:	2b40      	cmp	r3, #64	@ 0x40
 800fe7e:	f200 817f 	bhi.w	8010180 <USBD_StdEPReq+0x324>
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d02a      	beq.n	800fedc <USBD_StdEPReq+0x80>
 800fe86:	2b20      	cmp	r3, #32
 800fe88:	f040 817a 	bne.w	8010180 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800fe8c:	7bbb      	ldrb	r3, [r7, #14]
 800fe8e:	4619      	mov	r1, r3
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f7ff fe86 	bl	800fba2 <USBD_CoreFindEP>
 800fe96:	4603      	mov	r3, r0
 800fe98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fe9a:	7b7b      	ldrb	r3, [r7, #13]
 800fe9c:	2bff      	cmp	r3, #255	@ 0xff
 800fe9e:	f000 8174 	beq.w	801018a <USBD_StdEPReq+0x32e>
 800fea2:	7b7b      	ldrb	r3, [r7, #13]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	f040 8170 	bne.w	801018a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800feaa:	7b7a      	ldrb	r2, [r7, #13]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800feb2:	7b7a      	ldrb	r2, [r7, #13]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	32ae      	adds	r2, #174	@ 0xae
 800feb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800febc:	689b      	ldr	r3, [r3, #8]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	f000 8163 	beq.w	801018a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fec4:	7b7a      	ldrb	r2, [r7, #13]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	32ae      	adds	r2, #174	@ 0xae
 800feca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	6839      	ldr	r1, [r7, #0]
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	4798      	blx	r3
 800fed6:	4603      	mov	r3, r0
 800fed8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800feda:	e156      	b.n	801018a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	785b      	ldrb	r3, [r3, #1]
 800fee0:	2b03      	cmp	r3, #3
 800fee2:	d008      	beq.n	800fef6 <USBD_StdEPReq+0x9a>
 800fee4:	2b03      	cmp	r3, #3
 800fee6:	f300 8145 	bgt.w	8010174 <USBD_StdEPReq+0x318>
 800feea:	2b00      	cmp	r3, #0
 800feec:	f000 809b 	beq.w	8010026 <USBD_StdEPReq+0x1ca>
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d03c      	beq.n	800ff6e <USBD_StdEPReq+0x112>
 800fef4:	e13e      	b.n	8010174 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	d002      	beq.n	800ff08 <USBD_StdEPReq+0xac>
 800ff02:	2b03      	cmp	r3, #3
 800ff04:	d016      	beq.n	800ff34 <USBD_StdEPReq+0xd8>
 800ff06:	e02c      	b.n	800ff62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff08:	7bbb      	ldrb	r3, [r7, #14]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00d      	beq.n	800ff2a <USBD_StdEPReq+0xce>
 800ff0e:	7bbb      	ldrb	r3, [r7, #14]
 800ff10:	2b80      	cmp	r3, #128	@ 0x80
 800ff12:	d00a      	beq.n	800ff2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ff14:	7bbb      	ldrb	r3, [r7, #14]
 800ff16:	4619      	mov	r1, r3
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f001 fa00 	bl	801131e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff1e:	2180      	movs	r1, #128	@ 0x80
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f001 f9fc 	bl	801131e <USBD_LL_StallEP>
 800ff26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ff28:	e020      	b.n	800ff6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ff2a:	6839      	ldr	r1, [r7, #0]
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 fca4 	bl	801087a <USBD_CtlError>
              break;
 800ff32:	e01b      	b.n	800ff6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	885b      	ldrh	r3, [r3, #2]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d10e      	bne.n	800ff5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ff3c:	7bbb      	ldrb	r3, [r7, #14]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d00b      	beq.n	800ff5a <USBD_StdEPReq+0xfe>
 800ff42:	7bbb      	ldrb	r3, [r7, #14]
 800ff44:	2b80      	cmp	r3, #128	@ 0x80
 800ff46:	d008      	beq.n	800ff5a <USBD_StdEPReq+0xfe>
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	88db      	ldrh	r3, [r3, #6]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d104      	bne.n	800ff5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ff50:	7bbb      	ldrb	r3, [r7, #14]
 800ff52:	4619      	mov	r1, r3
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f001 f9e2 	bl	801131e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fd47 	bl	80109ee <USBD_CtlSendStatus>

              break;
 800ff60:	e004      	b.n	800ff6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ff62:	6839      	ldr	r1, [r7, #0]
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 fc88 	bl	801087a <USBD_CtlError>
              break;
 800ff6a:	bf00      	nop
          }
          break;
 800ff6c:	e107      	b.n	801017e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	2b02      	cmp	r3, #2
 800ff78:	d002      	beq.n	800ff80 <USBD_StdEPReq+0x124>
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d016      	beq.n	800ffac <USBD_StdEPReq+0x150>
 800ff7e:	e04b      	b.n	8010018 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff80:	7bbb      	ldrb	r3, [r7, #14]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00d      	beq.n	800ffa2 <USBD_StdEPReq+0x146>
 800ff86:	7bbb      	ldrb	r3, [r7, #14]
 800ff88:	2b80      	cmp	r3, #128	@ 0x80
 800ff8a:	d00a      	beq.n	800ffa2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ff8c:	7bbb      	ldrb	r3, [r7, #14]
 800ff8e:	4619      	mov	r1, r3
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f001 f9c4 	bl	801131e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff96:	2180      	movs	r1, #128	@ 0x80
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f001 f9c0 	bl	801131e <USBD_LL_StallEP>
 800ff9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ffa0:	e040      	b.n	8010024 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ffa2:	6839      	ldr	r1, [r7, #0]
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f000 fc68 	bl	801087a <USBD_CtlError>
              break;
 800ffaa:	e03b      	b.n	8010024 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	885b      	ldrh	r3, [r3, #2]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d136      	bne.n	8010022 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ffb4:	7bbb      	ldrb	r3, [r7, #14]
 800ffb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d004      	beq.n	800ffc8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ffbe:	7bbb      	ldrb	r3, [r7, #14]
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f001 f9ca 	bl	801135c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 fd10 	bl	80109ee <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ffce:	7bbb      	ldrb	r3, [r7, #14]
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7ff fde5 	bl	800fba2 <USBD_CoreFindEP>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ffdc:	7b7b      	ldrb	r3, [r7, #13]
 800ffde:	2bff      	cmp	r3, #255	@ 0xff
 800ffe0:	d01f      	beq.n	8010022 <USBD_StdEPReq+0x1c6>
 800ffe2:	7b7b      	ldrb	r3, [r7, #13]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d11c      	bne.n	8010022 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ffe8:	7b7a      	ldrb	r2, [r7, #13]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fff0:	7b7a      	ldrb	r2, [r7, #13]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	32ae      	adds	r2, #174	@ 0xae
 800fff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d010      	beq.n	8010022 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010000:	7b7a      	ldrb	r2, [r7, #13]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	32ae      	adds	r2, #174	@ 0xae
 8010006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	6839      	ldr	r1, [r7, #0]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	4798      	blx	r3
 8010012:	4603      	mov	r3, r0
 8010014:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010016:	e004      	b.n	8010022 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010018:	6839      	ldr	r1, [r7, #0]
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 fc2d 	bl	801087a <USBD_CtlError>
              break;
 8010020:	e000      	b.n	8010024 <USBD_StdEPReq+0x1c8>
              break;
 8010022:	bf00      	nop
          }
          break;
 8010024:	e0ab      	b.n	801017e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801002c:	b2db      	uxtb	r3, r3
 801002e:	2b02      	cmp	r3, #2
 8010030:	d002      	beq.n	8010038 <USBD_StdEPReq+0x1dc>
 8010032:	2b03      	cmp	r3, #3
 8010034:	d032      	beq.n	801009c <USBD_StdEPReq+0x240>
 8010036:	e097      	b.n	8010168 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010038:	7bbb      	ldrb	r3, [r7, #14]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d007      	beq.n	801004e <USBD_StdEPReq+0x1f2>
 801003e:	7bbb      	ldrb	r3, [r7, #14]
 8010040:	2b80      	cmp	r3, #128	@ 0x80
 8010042:	d004      	beq.n	801004e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010044:	6839      	ldr	r1, [r7, #0]
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 fc17 	bl	801087a <USBD_CtlError>
                break;
 801004c:	e091      	b.n	8010172 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801004e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010052:	2b00      	cmp	r3, #0
 8010054:	da0b      	bge.n	801006e <USBD_StdEPReq+0x212>
 8010056:	7bbb      	ldrb	r3, [r7, #14]
 8010058:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801005c:	4613      	mov	r3, r2
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	4413      	add	r3, r2
 8010062:	009b      	lsls	r3, r3, #2
 8010064:	3310      	adds	r3, #16
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	4413      	add	r3, r2
 801006a:	3304      	adds	r3, #4
 801006c:	e00b      	b.n	8010086 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801006e:	7bbb      	ldrb	r3, [r7, #14]
 8010070:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010074:	4613      	mov	r3, r2
 8010076:	009b      	lsls	r3, r3, #2
 8010078:	4413      	add	r3, r2
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	4413      	add	r3, r2
 8010084:	3304      	adds	r3, #4
 8010086:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	2200      	movs	r2, #0
 801008c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	2202      	movs	r2, #2
 8010092:	4619      	mov	r1, r3
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 fc6d 	bl	8010974 <USBD_CtlSendData>
              break;
 801009a:	e06a      	b.n	8010172 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801009c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	da11      	bge.n	80100c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80100a4:	7bbb      	ldrb	r3, [r7, #14]
 80100a6:	f003 020f 	and.w	r2, r3, #15
 80100aa:	6879      	ldr	r1, [r7, #4]
 80100ac:	4613      	mov	r3, r2
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	4413      	add	r3, r2
 80100b2:	009b      	lsls	r3, r3, #2
 80100b4:	440b      	add	r3, r1
 80100b6:	3324      	adds	r3, #36	@ 0x24
 80100b8:	881b      	ldrh	r3, [r3, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d117      	bne.n	80100ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80100be:	6839      	ldr	r1, [r7, #0]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 fbda 	bl	801087a <USBD_CtlError>
                  break;
 80100c6:	e054      	b.n	8010172 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80100c8:	7bbb      	ldrb	r3, [r7, #14]
 80100ca:	f003 020f 	and.w	r2, r3, #15
 80100ce:	6879      	ldr	r1, [r7, #4]
 80100d0:	4613      	mov	r3, r2
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	4413      	add	r3, r2
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	440b      	add	r3, r1
 80100da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80100de:	881b      	ldrh	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d104      	bne.n	80100ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80100e4:	6839      	ldr	r1, [r7, #0]
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 fbc7 	bl	801087a <USBD_CtlError>
                  break;
 80100ec:	e041      	b.n	8010172 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80100ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	da0b      	bge.n	801010e <USBD_StdEPReq+0x2b2>
 80100f6:	7bbb      	ldrb	r3, [r7, #14]
 80100f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80100fc:	4613      	mov	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	4413      	add	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	3310      	adds	r3, #16
 8010106:	687a      	ldr	r2, [r7, #4]
 8010108:	4413      	add	r3, r2
 801010a:	3304      	adds	r3, #4
 801010c:	e00b      	b.n	8010126 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801010e:	7bbb      	ldrb	r3, [r7, #14]
 8010110:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010114:	4613      	mov	r3, r2
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	4413      	add	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	4413      	add	r3, r2
 8010124:	3304      	adds	r3, #4
 8010126:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010128:	7bbb      	ldrb	r3, [r7, #14]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d002      	beq.n	8010134 <USBD_StdEPReq+0x2d8>
 801012e:	7bbb      	ldrb	r3, [r7, #14]
 8010130:	2b80      	cmp	r3, #128	@ 0x80
 8010132:	d103      	bne.n	801013c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	2200      	movs	r2, #0
 8010138:	601a      	str	r2, [r3, #0]
 801013a:	e00e      	b.n	801015a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801013c:	7bbb      	ldrb	r3, [r7, #14]
 801013e:	4619      	mov	r1, r3
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f001 f92a 	bl	801139a <USBD_LL_IsStallEP>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d003      	beq.n	8010154 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	2201      	movs	r2, #1
 8010150:	601a      	str	r2, [r3, #0]
 8010152:	e002      	b.n	801015a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	2200      	movs	r2, #0
 8010158:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	2202      	movs	r2, #2
 801015e:	4619      	mov	r1, r3
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f000 fc07 	bl	8010974 <USBD_CtlSendData>
              break;
 8010166:	e004      	b.n	8010172 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010168:	6839      	ldr	r1, [r7, #0]
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fb85 	bl	801087a <USBD_CtlError>
              break;
 8010170:	bf00      	nop
          }
          break;
 8010172:	e004      	b.n	801017e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010174:	6839      	ldr	r1, [r7, #0]
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 fb7f 	bl	801087a <USBD_CtlError>
          break;
 801017c:	bf00      	nop
      }
      break;
 801017e:	e005      	b.n	801018c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010180:	6839      	ldr	r1, [r7, #0]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 fb79 	bl	801087a <USBD_CtlError>
      break;
 8010188:	e000      	b.n	801018c <USBD_StdEPReq+0x330>
      break;
 801018a:	bf00      	nop
  }

  return ret;
 801018c:	7bfb      	ldrb	r3, [r7, #15]
}
 801018e:	4618      	mov	r0, r3
 8010190:	3710      	adds	r7, #16
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
	...

08010198 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b084      	sub	sp, #16
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80101a2:	2300      	movs	r3, #0
 80101a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80101a6:	2300      	movs	r3, #0
 80101a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80101aa:	2300      	movs	r3, #0
 80101ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	885b      	ldrh	r3, [r3, #2]
 80101b2:	0a1b      	lsrs	r3, r3, #8
 80101b4:	b29b      	uxth	r3, r3
 80101b6:	3b01      	subs	r3, #1
 80101b8:	2b0e      	cmp	r3, #14
 80101ba:	f200 8152 	bhi.w	8010462 <USBD_GetDescriptor+0x2ca>
 80101be:	a201      	add	r2, pc, #4	@ (adr r2, 80101c4 <USBD_GetDescriptor+0x2c>)
 80101c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101c4:	08010235 	.word	0x08010235
 80101c8:	0801024d 	.word	0x0801024d
 80101cc:	0801028d 	.word	0x0801028d
 80101d0:	08010463 	.word	0x08010463
 80101d4:	08010463 	.word	0x08010463
 80101d8:	08010403 	.word	0x08010403
 80101dc:	0801042f 	.word	0x0801042f
 80101e0:	08010463 	.word	0x08010463
 80101e4:	08010463 	.word	0x08010463
 80101e8:	08010463 	.word	0x08010463
 80101ec:	08010463 	.word	0x08010463
 80101f0:	08010463 	.word	0x08010463
 80101f4:	08010463 	.word	0x08010463
 80101f8:	08010463 	.word	0x08010463
 80101fc:	08010201 	.word	0x08010201
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010206:	69db      	ldr	r3, [r3, #28]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00b      	beq.n	8010224 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010212:	69db      	ldr	r3, [r3, #28]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	7c12      	ldrb	r2, [r2, #16]
 8010218:	f107 0108 	add.w	r1, r7, #8
 801021c:	4610      	mov	r0, r2
 801021e:	4798      	blx	r3
 8010220:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010222:	e126      	b.n	8010472 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010224:	6839      	ldr	r1, [r7, #0]
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 fb27 	bl	801087a <USBD_CtlError>
        err++;
 801022c:	7afb      	ldrb	r3, [r7, #11]
 801022e:	3301      	adds	r3, #1
 8010230:	72fb      	strb	r3, [r7, #11]
      break;
 8010232:	e11e      	b.n	8010472 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	7c12      	ldrb	r2, [r2, #16]
 8010240:	f107 0108 	add.w	r1, r7, #8
 8010244:	4610      	mov	r0, r2
 8010246:	4798      	blx	r3
 8010248:	60f8      	str	r0, [r7, #12]
      break;
 801024a:	e112      	b.n	8010472 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	7c1b      	ldrb	r3, [r3, #16]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d10d      	bne.n	8010270 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801025a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801025c:	f107 0208 	add.w	r2, r7, #8
 8010260:	4610      	mov	r0, r2
 8010262:	4798      	blx	r3
 8010264:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	3301      	adds	r3, #1
 801026a:	2202      	movs	r2, #2
 801026c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801026e:	e100      	b.n	8010472 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010278:	f107 0208 	add.w	r2, r7, #8
 801027c:	4610      	mov	r0, r2
 801027e:	4798      	blx	r3
 8010280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	3301      	adds	r3, #1
 8010286:	2202      	movs	r2, #2
 8010288:	701a      	strb	r2, [r3, #0]
      break;
 801028a:	e0f2      	b.n	8010472 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	885b      	ldrh	r3, [r3, #2]
 8010290:	b2db      	uxtb	r3, r3
 8010292:	2b05      	cmp	r3, #5
 8010294:	f200 80ac 	bhi.w	80103f0 <USBD_GetDescriptor+0x258>
 8010298:	a201      	add	r2, pc, #4	@ (adr r2, 80102a0 <USBD_GetDescriptor+0x108>)
 801029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029e:	bf00      	nop
 80102a0:	080102b9 	.word	0x080102b9
 80102a4:	080102ed 	.word	0x080102ed
 80102a8:	08010321 	.word	0x08010321
 80102ac:	08010355 	.word	0x08010355
 80102b0:	08010389 	.word	0x08010389
 80102b4:	080103bd 	.word	0x080103bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d00b      	beq.n	80102dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	7c12      	ldrb	r2, [r2, #16]
 80102d0:	f107 0108 	add.w	r1, r7, #8
 80102d4:	4610      	mov	r0, r2
 80102d6:	4798      	blx	r3
 80102d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102da:	e091      	b.n	8010400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80102dc:	6839      	ldr	r1, [r7, #0]
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 facb 	bl	801087a <USBD_CtlError>
            err++;
 80102e4:	7afb      	ldrb	r3, [r7, #11]
 80102e6:	3301      	adds	r3, #1
 80102e8:	72fb      	strb	r3, [r7, #11]
          break;
 80102ea:	e089      	b.n	8010400 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d00b      	beq.n	8010310 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	7c12      	ldrb	r2, [r2, #16]
 8010304:	f107 0108 	add.w	r1, r7, #8
 8010308:	4610      	mov	r0, r2
 801030a:	4798      	blx	r3
 801030c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801030e:	e077      	b.n	8010400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010310:	6839      	ldr	r1, [r7, #0]
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f000 fab1 	bl	801087a <USBD_CtlError>
            err++;
 8010318:	7afb      	ldrb	r3, [r7, #11]
 801031a:	3301      	adds	r3, #1
 801031c:	72fb      	strb	r3, [r7, #11]
          break;
 801031e:	e06f      	b.n	8010400 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d00b      	beq.n	8010344 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	7c12      	ldrb	r2, [r2, #16]
 8010338:	f107 0108 	add.w	r1, r7, #8
 801033c:	4610      	mov	r0, r2
 801033e:	4798      	blx	r3
 8010340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010342:	e05d      	b.n	8010400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010344:	6839      	ldr	r1, [r7, #0]
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 fa97 	bl	801087a <USBD_CtlError>
            err++;
 801034c:	7afb      	ldrb	r3, [r7, #11]
 801034e:	3301      	adds	r3, #1
 8010350:	72fb      	strb	r3, [r7, #11]
          break;
 8010352:	e055      	b.n	8010400 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801035a:	691b      	ldr	r3, [r3, #16]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00b      	beq.n	8010378 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010366:	691b      	ldr	r3, [r3, #16]
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	7c12      	ldrb	r2, [r2, #16]
 801036c:	f107 0108 	add.w	r1, r7, #8
 8010370:	4610      	mov	r0, r2
 8010372:	4798      	blx	r3
 8010374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010376:	e043      	b.n	8010400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010378:	6839      	ldr	r1, [r7, #0]
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f000 fa7d 	bl	801087a <USBD_CtlError>
            err++;
 8010380:	7afb      	ldrb	r3, [r7, #11]
 8010382:	3301      	adds	r3, #1
 8010384:	72fb      	strb	r3, [r7, #11]
          break;
 8010386:	e03b      	b.n	8010400 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801038e:	695b      	ldr	r3, [r3, #20]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d00b      	beq.n	80103ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801039a:	695b      	ldr	r3, [r3, #20]
 801039c:	687a      	ldr	r2, [r7, #4]
 801039e:	7c12      	ldrb	r2, [r2, #16]
 80103a0:	f107 0108 	add.w	r1, r7, #8
 80103a4:	4610      	mov	r0, r2
 80103a6:	4798      	blx	r3
 80103a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103aa:	e029      	b.n	8010400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80103ac:	6839      	ldr	r1, [r7, #0]
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 fa63 	bl	801087a <USBD_CtlError>
            err++;
 80103b4:	7afb      	ldrb	r3, [r7, #11]
 80103b6:	3301      	adds	r3, #1
 80103b8:	72fb      	strb	r3, [r7, #11]
          break;
 80103ba:	e021      	b.n	8010400 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80103c2:	699b      	ldr	r3, [r3, #24]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d00b      	beq.n	80103e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80103ce:	699b      	ldr	r3, [r3, #24]
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	7c12      	ldrb	r2, [r2, #16]
 80103d4:	f107 0108 	add.w	r1, r7, #8
 80103d8:	4610      	mov	r0, r2
 80103da:	4798      	blx	r3
 80103dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103de:	e00f      	b.n	8010400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80103e0:	6839      	ldr	r1, [r7, #0]
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 fa49 	bl	801087a <USBD_CtlError>
            err++;
 80103e8:	7afb      	ldrb	r3, [r7, #11]
 80103ea:	3301      	adds	r3, #1
 80103ec:	72fb      	strb	r3, [r7, #11]
          break;
 80103ee:	e007      	b.n	8010400 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80103f0:	6839      	ldr	r1, [r7, #0]
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 fa41 	bl	801087a <USBD_CtlError>
          err++;
 80103f8:	7afb      	ldrb	r3, [r7, #11]
 80103fa:	3301      	adds	r3, #1
 80103fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80103fe:	bf00      	nop
      }
      break;
 8010400:	e037      	b.n	8010472 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	7c1b      	ldrb	r3, [r3, #16]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d109      	bne.n	801041e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010412:	f107 0208 	add.w	r2, r7, #8
 8010416:	4610      	mov	r0, r2
 8010418:	4798      	blx	r3
 801041a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801041c:	e029      	b.n	8010472 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801041e:	6839      	ldr	r1, [r7, #0]
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 fa2a 	bl	801087a <USBD_CtlError>
        err++;
 8010426:	7afb      	ldrb	r3, [r7, #11]
 8010428:	3301      	adds	r3, #1
 801042a:	72fb      	strb	r3, [r7, #11]
      break;
 801042c:	e021      	b.n	8010472 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	7c1b      	ldrb	r3, [r3, #16]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d10d      	bne.n	8010452 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801043c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801043e:	f107 0208 	add.w	r2, r7, #8
 8010442:	4610      	mov	r0, r2
 8010444:	4798      	blx	r3
 8010446:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	3301      	adds	r3, #1
 801044c:	2207      	movs	r2, #7
 801044e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010450:	e00f      	b.n	8010472 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010452:	6839      	ldr	r1, [r7, #0]
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 fa10 	bl	801087a <USBD_CtlError>
        err++;
 801045a:	7afb      	ldrb	r3, [r7, #11]
 801045c:	3301      	adds	r3, #1
 801045e:	72fb      	strb	r3, [r7, #11]
      break;
 8010460:	e007      	b.n	8010472 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010462:	6839      	ldr	r1, [r7, #0]
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 fa08 	bl	801087a <USBD_CtlError>
      err++;
 801046a:	7afb      	ldrb	r3, [r7, #11]
 801046c:	3301      	adds	r3, #1
 801046e:	72fb      	strb	r3, [r7, #11]
      break;
 8010470:	bf00      	nop
  }

  if (err != 0U)
 8010472:	7afb      	ldrb	r3, [r7, #11]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d11e      	bne.n	80104b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	88db      	ldrh	r3, [r3, #6]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d016      	beq.n	80104ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010480:	893b      	ldrh	r3, [r7, #8]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00e      	beq.n	80104a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	88da      	ldrh	r2, [r3, #6]
 801048a:	893b      	ldrh	r3, [r7, #8]
 801048c:	4293      	cmp	r3, r2
 801048e:	bf28      	it	cs
 8010490:	4613      	movcs	r3, r2
 8010492:	b29b      	uxth	r3, r3
 8010494:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010496:	893b      	ldrh	r3, [r7, #8]
 8010498:	461a      	mov	r2, r3
 801049a:	68f9      	ldr	r1, [r7, #12]
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 fa69 	bl	8010974 <USBD_CtlSendData>
 80104a2:	e009      	b.n	80104b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80104a4:	6839      	ldr	r1, [r7, #0]
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 f9e7 	bl	801087a <USBD_CtlError>
 80104ac:	e004      	b.n	80104b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f000 fa9d 	bl	80109ee <USBD_CtlSendStatus>
 80104b4:	e000      	b.n	80104b8 <USBD_GetDescriptor+0x320>
    return;
 80104b6:	bf00      	nop
  }
}
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop

080104c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	889b      	ldrh	r3, [r3, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d131      	bne.n	8010536 <USBD_SetAddress+0x76>
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	88db      	ldrh	r3, [r3, #6]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d12d      	bne.n	8010536 <USBD_SetAddress+0x76>
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	885b      	ldrh	r3, [r3, #2]
 80104de:	2b7f      	cmp	r3, #127	@ 0x7f
 80104e0:	d829      	bhi.n	8010536 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	885b      	ldrh	r3, [r3, #2]
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80104ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	2b03      	cmp	r3, #3
 80104f8:	d104      	bne.n	8010504 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80104fa:	6839      	ldr	r1, [r7, #0]
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f000 f9bc 	bl	801087a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010502:	e01d      	b.n	8010540 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	7bfa      	ldrb	r2, [r7, #15]
 8010508:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801050c:	7bfb      	ldrb	r3, [r7, #15]
 801050e:	4619      	mov	r1, r3
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f000 ff6e 	bl	80113f2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 fa69 	bl	80109ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801051c:	7bfb      	ldrb	r3, [r7, #15]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d004      	beq.n	801052c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2202      	movs	r2, #2
 8010526:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801052a:	e009      	b.n	8010540 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2201      	movs	r2, #1
 8010530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010534:	e004      	b.n	8010540 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010536:	6839      	ldr	r1, [r7, #0]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 f99e 	bl	801087a <USBD_CtlError>
  }
}
 801053e:	bf00      	nop
 8010540:	bf00      	nop
 8010542:	3710      	adds	r7, #16
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010552:	2300      	movs	r3, #0
 8010554:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	885b      	ldrh	r3, [r3, #2]
 801055a:	b2da      	uxtb	r2, r3
 801055c:	4b4e      	ldr	r3, [pc, #312]	@ (8010698 <USBD_SetConfig+0x150>)
 801055e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010560:	4b4d      	ldr	r3, [pc, #308]	@ (8010698 <USBD_SetConfig+0x150>)
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	2b01      	cmp	r3, #1
 8010566:	d905      	bls.n	8010574 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010568:	6839      	ldr	r1, [r7, #0]
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 f985 	bl	801087a <USBD_CtlError>
    return USBD_FAIL;
 8010570:	2303      	movs	r3, #3
 8010572:	e08c      	b.n	801068e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801057a:	b2db      	uxtb	r3, r3
 801057c:	2b02      	cmp	r3, #2
 801057e:	d002      	beq.n	8010586 <USBD_SetConfig+0x3e>
 8010580:	2b03      	cmp	r3, #3
 8010582:	d029      	beq.n	80105d8 <USBD_SetConfig+0x90>
 8010584:	e075      	b.n	8010672 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010586:	4b44      	ldr	r3, [pc, #272]	@ (8010698 <USBD_SetConfig+0x150>)
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d020      	beq.n	80105d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801058e:	4b42      	ldr	r3, [pc, #264]	@ (8010698 <USBD_SetConfig+0x150>)
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	461a      	mov	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010598:	4b3f      	ldr	r3, [pc, #252]	@ (8010698 <USBD_SetConfig+0x150>)
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	4619      	mov	r1, r3
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7fe ffba 	bl	800f518 <USBD_SetClassConfig>
 80105a4:	4603      	mov	r3, r0
 80105a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80105a8:	7bfb      	ldrb	r3, [r7, #15]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d008      	beq.n	80105c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80105ae:	6839      	ldr	r1, [r7, #0]
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f000 f962 	bl	801087a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2202      	movs	r2, #2
 80105ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80105be:	e065      	b.n	801068c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 fa14 	bl	80109ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2203      	movs	r2, #3
 80105ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80105ce:	e05d      	b.n	801068c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f000 fa0c 	bl	80109ee <USBD_CtlSendStatus>
      break;
 80105d6:	e059      	b.n	801068c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80105d8:	4b2f      	ldr	r3, [pc, #188]	@ (8010698 <USBD_SetConfig+0x150>)
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d112      	bne.n	8010606 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2202      	movs	r2, #2
 80105e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80105e8:	4b2b      	ldr	r3, [pc, #172]	@ (8010698 <USBD_SetConfig+0x150>)
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	461a      	mov	r2, r3
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80105f2:	4b29      	ldr	r3, [pc, #164]	@ (8010698 <USBD_SetConfig+0x150>)
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	4619      	mov	r1, r3
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7fe ffa9 	bl	800f550 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f000 f9f5 	bl	80109ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010604:	e042      	b.n	801068c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010606:	4b24      	ldr	r3, [pc, #144]	@ (8010698 <USBD_SetConfig+0x150>)
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	461a      	mov	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	429a      	cmp	r2, r3
 8010612:	d02a      	beq.n	801066a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	b2db      	uxtb	r3, r3
 801061a:	4619      	mov	r1, r3
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f7fe ff97 	bl	800f550 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010622:	4b1d      	ldr	r3, [pc, #116]	@ (8010698 <USBD_SetConfig+0x150>)
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	461a      	mov	r2, r3
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801062c:	4b1a      	ldr	r3, [pc, #104]	@ (8010698 <USBD_SetConfig+0x150>)
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	4619      	mov	r1, r3
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7fe ff70 	bl	800f518 <USBD_SetClassConfig>
 8010638:	4603      	mov	r3, r0
 801063a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801063c:	7bfb      	ldrb	r3, [r7, #15]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d00f      	beq.n	8010662 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010642:	6839      	ldr	r1, [r7, #0]
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f000 f918 	bl	801087a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	b2db      	uxtb	r3, r3
 8010650:	4619      	mov	r1, r3
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7fe ff7c 	bl	800f550 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2202      	movs	r2, #2
 801065c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010660:	e014      	b.n	801068c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f000 f9c3 	bl	80109ee <USBD_CtlSendStatus>
      break;
 8010668:	e010      	b.n	801068c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f000 f9bf 	bl	80109ee <USBD_CtlSendStatus>
      break;
 8010670:	e00c      	b.n	801068c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010672:	6839      	ldr	r1, [r7, #0]
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f000 f900 	bl	801087a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801067a:	4b07      	ldr	r3, [pc, #28]	@ (8010698 <USBD_SetConfig+0x150>)
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7fe ff65 	bl	800f550 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010686:	2303      	movs	r3, #3
 8010688:	73fb      	strb	r3, [r7, #15]
      break;
 801068a:	bf00      	nop
  }

  return ret;
 801068c:	7bfb      	ldrb	r3, [r7, #15]
}
 801068e:	4618      	mov	r0, r3
 8010690:	3710      	adds	r7, #16
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	24000674 	.word	0x24000674

0801069c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	88db      	ldrh	r3, [r3, #6]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d004      	beq.n	80106b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80106ae:	6839      	ldr	r1, [r7, #0]
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f000 f8e2 	bl	801087a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80106b6:	e023      	b.n	8010700 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	2b02      	cmp	r3, #2
 80106c2:	dc02      	bgt.n	80106ca <USBD_GetConfig+0x2e>
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	dc03      	bgt.n	80106d0 <USBD_GetConfig+0x34>
 80106c8:	e015      	b.n	80106f6 <USBD_GetConfig+0x5a>
 80106ca:	2b03      	cmp	r3, #3
 80106cc:	d00b      	beq.n	80106e6 <USBD_GetConfig+0x4a>
 80106ce:	e012      	b.n	80106f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2200      	movs	r2, #0
 80106d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	3308      	adds	r3, #8
 80106da:	2201      	movs	r2, #1
 80106dc:	4619      	mov	r1, r3
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f000 f948 	bl	8010974 <USBD_CtlSendData>
        break;
 80106e4:	e00c      	b.n	8010700 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	3304      	adds	r3, #4
 80106ea:	2201      	movs	r2, #1
 80106ec:	4619      	mov	r1, r3
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 f940 	bl	8010974 <USBD_CtlSendData>
        break;
 80106f4:	e004      	b.n	8010700 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80106f6:	6839      	ldr	r1, [r7, #0]
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 f8be 	bl	801087a <USBD_CtlError>
        break;
 80106fe:	bf00      	nop
}
 8010700:	bf00      	nop
 8010702:	3708      	adds	r7, #8
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010718:	b2db      	uxtb	r3, r3
 801071a:	3b01      	subs	r3, #1
 801071c:	2b02      	cmp	r3, #2
 801071e:	d81e      	bhi.n	801075e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	88db      	ldrh	r3, [r3, #6]
 8010724:	2b02      	cmp	r3, #2
 8010726:	d004      	beq.n	8010732 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010728:	6839      	ldr	r1, [r7, #0]
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 f8a5 	bl	801087a <USBD_CtlError>
        break;
 8010730:	e01a      	b.n	8010768 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2201      	movs	r2, #1
 8010736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801073e:	2b00      	cmp	r3, #0
 8010740:	d005      	beq.n	801074e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	f043 0202 	orr.w	r2, r3, #2
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	330c      	adds	r3, #12
 8010752:	2202      	movs	r2, #2
 8010754:	4619      	mov	r1, r3
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 f90c 	bl	8010974 <USBD_CtlSendData>
      break;
 801075c:	e004      	b.n	8010768 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801075e:	6839      	ldr	r1, [r7, #0]
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f000 f88a 	bl	801087a <USBD_CtlError>
      break;
 8010766:	bf00      	nop
  }
}
 8010768:	bf00      	nop
 801076a:	3708      	adds	r7, #8
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	885b      	ldrh	r3, [r3, #2]
 801077e:	2b01      	cmp	r3, #1
 8010780:	d107      	bne.n	8010792 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2201      	movs	r2, #1
 8010786:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 f92f 	bl	80109ee <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010790:	e013      	b.n	80107ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	885b      	ldrh	r3, [r3, #2]
 8010796:	2b02      	cmp	r3, #2
 8010798:	d10b      	bne.n	80107b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	889b      	ldrh	r3, [r3, #4]
 801079e:	0a1b      	lsrs	r3, r3, #8
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	b2da      	uxtb	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 f91f 	bl	80109ee <USBD_CtlSendStatus>
}
 80107b0:	e003      	b.n	80107ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80107b2:	6839      	ldr	r1, [r7, #0]
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 f860 	bl	801087a <USBD_CtlError>
}
 80107ba:	bf00      	nop
 80107bc:	3708      	adds	r7, #8
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b082      	sub	sp, #8
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
 80107ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	3b01      	subs	r3, #1
 80107d6:	2b02      	cmp	r3, #2
 80107d8:	d80b      	bhi.n	80107f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	885b      	ldrh	r3, [r3, #2]
 80107de:	2b01      	cmp	r3, #1
 80107e0:	d10c      	bne.n	80107fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2200      	movs	r2, #0
 80107e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f000 f8ff 	bl	80109ee <USBD_CtlSendStatus>
      }
      break;
 80107f0:	e004      	b.n	80107fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80107f2:	6839      	ldr	r1, [r7, #0]
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 f840 	bl	801087a <USBD_CtlError>
      break;
 80107fa:	e000      	b.n	80107fe <USBD_ClrFeature+0x3c>
      break;
 80107fc:	bf00      	nop
  }
}
 80107fe:	bf00      	nop
 8010800:	3708      	adds	r7, #8
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}

08010806 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010806:	b580      	push	{r7, lr}
 8010808:	b084      	sub	sp, #16
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]
 801080e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	781a      	ldrb	r2, [r3, #0]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	3301      	adds	r3, #1
 8010820:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	781a      	ldrb	r2, [r3, #0]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	3301      	adds	r3, #1
 801082e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010830:	68f8      	ldr	r0, [r7, #12]
 8010832:	f7ff fa17 	bl	800fc64 <SWAPBYTE>
 8010836:	4603      	mov	r3, r0
 8010838:	461a      	mov	r2, r3
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	3301      	adds	r3, #1
 8010842:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	3301      	adds	r3, #1
 8010848:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	f7ff fa0a 	bl	800fc64 <SWAPBYTE>
 8010850:	4603      	mov	r3, r0
 8010852:	461a      	mov	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	3301      	adds	r3, #1
 801085c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	3301      	adds	r3, #1
 8010862:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010864:	68f8      	ldr	r0, [r7, #12]
 8010866:	f7ff f9fd 	bl	800fc64 <SWAPBYTE>
 801086a:	4603      	mov	r3, r0
 801086c:	461a      	mov	r2, r3
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	80da      	strh	r2, [r3, #6]
}
 8010872:	bf00      	nop
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801087a:	b580      	push	{r7, lr}
 801087c:	b082      	sub	sp, #8
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
 8010882:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010884:	2180      	movs	r1, #128	@ 0x80
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f000 fd49 	bl	801131e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801088c:	2100      	movs	r1, #0
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 fd45 	bl	801131e <USBD_LL_StallEP>
}
 8010894:	bf00      	nop
 8010896:	3708      	adds	r7, #8
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b086      	sub	sp, #24
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80108a8:	2300      	movs	r3, #0
 80108aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d042      	beq.n	8010938 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80108b6:	6938      	ldr	r0, [r7, #16]
 80108b8:	f000 f842 	bl	8010940 <USBD_GetLen>
 80108bc:	4603      	mov	r3, r0
 80108be:	3301      	adds	r3, #1
 80108c0:	005b      	lsls	r3, r3, #1
 80108c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80108c6:	d808      	bhi.n	80108da <USBD_GetString+0x3e>
 80108c8:	6938      	ldr	r0, [r7, #16]
 80108ca:	f000 f839 	bl	8010940 <USBD_GetLen>
 80108ce:	4603      	mov	r3, r0
 80108d0:	3301      	adds	r3, #1
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	005b      	lsls	r3, r3, #1
 80108d6:	b29a      	uxth	r2, r3
 80108d8:	e001      	b.n	80108de <USBD_GetString+0x42>
 80108da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80108e2:	7dfb      	ldrb	r3, [r7, #23]
 80108e4:	68ba      	ldr	r2, [r7, #8]
 80108e6:	4413      	add	r3, r2
 80108e8:	687a      	ldr	r2, [r7, #4]
 80108ea:	7812      	ldrb	r2, [r2, #0]
 80108ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80108ee:	7dfb      	ldrb	r3, [r7, #23]
 80108f0:	3301      	adds	r3, #1
 80108f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80108f4:	7dfb      	ldrb	r3, [r7, #23]
 80108f6:	68ba      	ldr	r2, [r7, #8]
 80108f8:	4413      	add	r3, r2
 80108fa:	2203      	movs	r2, #3
 80108fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80108fe:	7dfb      	ldrb	r3, [r7, #23]
 8010900:	3301      	adds	r3, #1
 8010902:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010904:	e013      	b.n	801092e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8010906:	7dfb      	ldrb	r3, [r7, #23]
 8010908:	68ba      	ldr	r2, [r7, #8]
 801090a:	4413      	add	r3, r2
 801090c:	693a      	ldr	r2, [r7, #16]
 801090e:	7812      	ldrb	r2, [r2, #0]
 8010910:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	3301      	adds	r3, #1
 8010916:	613b      	str	r3, [r7, #16]
    idx++;
 8010918:	7dfb      	ldrb	r3, [r7, #23]
 801091a:	3301      	adds	r3, #1
 801091c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801091e:	7dfb      	ldrb	r3, [r7, #23]
 8010920:	68ba      	ldr	r2, [r7, #8]
 8010922:	4413      	add	r3, r2
 8010924:	2200      	movs	r2, #0
 8010926:	701a      	strb	r2, [r3, #0]
    idx++;
 8010928:	7dfb      	ldrb	r3, [r7, #23]
 801092a:	3301      	adds	r3, #1
 801092c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d1e7      	bne.n	8010906 <USBD_GetString+0x6a>
 8010936:	e000      	b.n	801093a <USBD_GetString+0x9e>
    return;
 8010938:	bf00      	nop
  }
}
 801093a:	3718      	adds	r7, #24
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010940:	b480      	push	{r7}
 8010942:	b085      	sub	sp, #20
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010948:	2300      	movs	r3, #0
 801094a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010950:	e005      	b.n	801095e <USBD_GetLen+0x1e>
  {
    len++;
 8010952:	7bfb      	ldrb	r3, [r7, #15]
 8010954:	3301      	adds	r3, #1
 8010956:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	3301      	adds	r3, #1
 801095c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d1f5      	bne.n	8010952 <USBD_GetLen+0x12>
  }

  return len;
 8010966:	7bfb      	ldrb	r3, [r7, #15]
}
 8010968:	4618      	mov	r0, r3
 801096a:	3714      	adds	r7, #20
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2202      	movs	r2, #2
 8010984:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	2100      	movs	r1, #0
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f000 fd48 	bl	8011430 <USBD_LL_Transmit>

  return USBD_OK;
 80109a0:	2300      	movs	r3, #0
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3710      	adds	r7, #16
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}

080109aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b084      	sub	sp, #16
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	60f8      	str	r0, [r7, #12]
 80109b2:	60b9      	str	r1, [r7, #8]
 80109b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	2100      	movs	r1, #0
 80109bc:	68f8      	ldr	r0, [r7, #12]
 80109be:	f000 fd37 	bl	8011430 <USBD_LL_Transmit>

  return USBD_OK;
 80109c2:	2300      	movs	r3, #0
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3710      	adds	r7, #16
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b084      	sub	sp, #16
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	68ba      	ldr	r2, [r7, #8]
 80109dc:	2100      	movs	r1, #0
 80109de:	68f8      	ldr	r0, [r7, #12]
 80109e0:	f000 fd47 	bl	8011472 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3710      	adds	r7, #16
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}

080109ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b082      	sub	sp, #8
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2204      	movs	r2, #4
 80109fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80109fe:	2300      	movs	r3, #0
 8010a00:	2200      	movs	r2, #0
 8010a02:	2100      	movs	r1, #0
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f000 fd13 	bl	8011430 <USBD_LL_Transmit>

  return USBD_OK;
 8010a0a:	2300      	movs	r3, #0
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3708      	adds	r7, #8
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2205      	movs	r2, #5
 8010a20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010a24:	2300      	movs	r3, #0
 8010a26:	2200      	movs	r2, #0
 8010a28:	2100      	movs	r1, #0
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 fd21 	bl	8011472 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010a30:	2300      	movs	r3, #0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3708      	adds	r7, #8
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
	...

08010a3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b087      	sub	sp, #28
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	4613      	mov	r3, r2
 8010a48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010a52:	4b1f      	ldr	r3, [pc, #124]	@ (8010ad0 <FATFS_LinkDriverEx+0x94>)
 8010a54:	7a5b      	ldrb	r3, [r3, #9]
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d131      	bne.n	8010ac0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8010ad0 <FATFS_LinkDriverEx+0x94>)
 8010a5e:	7a5b      	ldrb	r3, [r3, #9]
 8010a60:	b2db      	uxtb	r3, r3
 8010a62:	461a      	mov	r2, r3
 8010a64:	4b1a      	ldr	r3, [pc, #104]	@ (8010ad0 <FATFS_LinkDriverEx+0x94>)
 8010a66:	2100      	movs	r1, #0
 8010a68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010a6a:	4b19      	ldr	r3, [pc, #100]	@ (8010ad0 <FATFS_LinkDriverEx+0x94>)
 8010a6c:	7a5b      	ldrb	r3, [r3, #9]
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	4a17      	ldr	r2, [pc, #92]	@ (8010ad0 <FATFS_LinkDriverEx+0x94>)
 8010a72:	009b      	lsls	r3, r3, #2
 8010a74:	4413      	add	r3, r2
 8010a76:	68fa      	ldr	r2, [r7, #12]
 8010a78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010a7a:	4b15      	ldr	r3, [pc, #84]	@ (8010ad0 <FATFS_LinkDriverEx+0x94>)
 8010a7c:	7a5b      	ldrb	r3, [r3, #9]
 8010a7e:	b2db      	uxtb	r3, r3
 8010a80:	461a      	mov	r2, r3
 8010a82:	4b13      	ldr	r3, [pc, #76]	@ (8010ad0 <FATFS_LinkDriverEx+0x94>)
 8010a84:	4413      	add	r3, r2
 8010a86:	79fa      	ldrb	r2, [r7, #7]
 8010a88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010a8a:	4b11      	ldr	r3, [pc, #68]	@ (8010ad0 <FATFS_LinkDriverEx+0x94>)
 8010a8c:	7a5b      	ldrb	r3, [r3, #9]
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	1c5a      	adds	r2, r3, #1
 8010a92:	b2d1      	uxtb	r1, r2
 8010a94:	4a0e      	ldr	r2, [pc, #56]	@ (8010ad0 <FATFS_LinkDriverEx+0x94>)
 8010a96:	7251      	strb	r1, [r2, #9]
 8010a98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010a9a:	7dbb      	ldrb	r3, [r7, #22]
 8010a9c:	3330      	adds	r3, #48	@ 0x30
 8010a9e:	b2da      	uxtb	r2, r3
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	223a      	movs	r2, #58	@ 0x3a
 8010aaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	3302      	adds	r3, #2
 8010ab0:	222f      	movs	r2, #47	@ 0x2f
 8010ab2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	3303      	adds	r3, #3
 8010ab8:	2200      	movs	r2, #0
 8010aba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010abc:	2300      	movs	r3, #0
 8010abe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	371c      	adds	r7, #28
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop
 8010ad0:	24000678 	.word	0x24000678

08010ad4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010ade:	2200      	movs	r2, #0
 8010ae0:	6839      	ldr	r1, [r7, #0]
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7ff ffaa 	bl	8010a3c <FATFS_LinkDriverEx>
 8010ae8:	4603      	mov	r3, r0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3708      	adds	r7, #8
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
	...

08010af4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010af8:	2200      	movs	r2, #0
 8010afa:	4913      	ldr	r1, [pc, #76]	@ (8010b48 <MX_USB_DEVICE_Init+0x54>)
 8010afc:	4813      	ldr	r0, [pc, #76]	@ (8010b4c <MX_USB_DEVICE_Init+0x58>)
 8010afe:	f7fe fc8e 	bl	800f41e <USBD_Init>
 8010b02:	4603      	mov	r3, r0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d001      	beq.n	8010b0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010b08:	f7f0 fa28 	bl	8000f5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8010b0c:	4910      	ldr	r1, [pc, #64]	@ (8010b50 <MX_USB_DEVICE_Init+0x5c>)
 8010b0e:	480f      	ldr	r0, [pc, #60]	@ (8010b4c <MX_USB_DEVICE_Init+0x58>)
 8010b10:	f7fe fcb5 	bl	800f47e <USBD_RegisterClass>
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d001      	beq.n	8010b1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010b1a:	f7f0 fa1f 	bl	8000f5c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8010b1e:	490d      	ldr	r1, [pc, #52]	@ (8010b54 <MX_USB_DEVICE_Init+0x60>)
 8010b20:	480a      	ldr	r0, [pc, #40]	@ (8010b4c <MX_USB_DEVICE_Init+0x58>)
 8010b22:	f7fc ff33 	bl	800d98c <USBD_MSC_RegisterStorage>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d001      	beq.n	8010b30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010b2c:	f7f0 fa16 	bl	8000f5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010b30:	4806      	ldr	r0, [pc, #24]	@ (8010b4c <MX_USB_DEVICE_Init+0x58>)
 8010b32:	f7fe fcda 	bl	800f4ea <USBD_Start>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d001      	beq.n	8010b40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010b3c:	f7f0 fa0e 	bl	8000f5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010b40:	f7f2 ff6e 	bl	8003a20 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010b44:	bf00      	nop
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	24000090 	.word	0x24000090
 8010b4c:	24000684 	.word	0x24000684
 8010b50:	24000010 	.word	0x24000010
 8010b54:	240000e4 	.word	0x240000e4

08010b58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	4603      	mov	r3, r0
 8010b60:	6039      	str	r1, [r7, #0]
 8010b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2212      	movs	r2, #18
 8010b68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010b6a:	4b03      	ldr	r3, [pc, #12]	@ (8010b78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr
 8010b78:	240000b0 	.word	0x240000b0

08010b7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	4603      	mov	r3, r0
 8010b84:	6039      	str	r1, [r7, #0]
 8010b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	2204      	movs	r2, #4
 8010b8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010b8e:	4b03      	ldr	r3, [pc, #12]	@ (8010b9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	370c      	adds	r7, #12
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr
 8010b9c:	240000c4 	.word	0x240000c4

08010ba0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	6039      	str	r1, [r7, #0]
 8010baa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010bac:	79fb      	ldrb	r3, [r7, #7]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d105      	bne.n	8010bbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010bb2:	683a      	ldr	r2, [r7, #0]
 8010bb4:	4907      	ldr	r1, [pc, #28]	@ (8010bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010bb6:	4808      	ldr	r0, [pc, #32]	@ (8010bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010bb8:	f7ff fe70 	bl	801089c <USBD_GetString>
 8010bbc:	e004      	b.n	8010bc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010bbe:	683a      	ldr	r2, [r7, #0]
 8010bc0:	4904      	ldr	r1, [pc, #16]	@ (8010bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010bc2:	4805      	ldr	r0, [pc, #20]	@ (8010bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010bc4:	f7ff fe6a 	bl	801089c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010bc8:	4b02      	ldr	r3, [pc, #8]	@ (8010bd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3708      	adds	r7, #8
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	24000960 	.word	0x24000960
 8010bd8:	08013d60 	.word	0x08013d60

08010bdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	4603      	mov	r3, r0
 8010be4:	6039      	str	r1, [r7, #0]
 8010be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	4904      	ldr	r1, [pc, #16]	@ (8010bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010bec:	4804      	ldr	r0, [pc, #16]	@ (8010c00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010bee:	f7ff fe55 	bl	801089c <USBD_GetString>
  return USBD_StrDesc;
 8010bf2:	4b02      	ldr	r3, [pc, #8]	@ (8010bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	24000960 	.word	0x24000960
 8010c00:	08013d74 	.word	0x08013d74

08010c04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	6039      	str	r1, [r7, #0]
 8010c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	221a      	movs	r2, #26
 8010c14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010c16:	f000 f843 	bl	8010ca0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010c1a:	4b02      	ldr	r3, [pc, #8]	@ (8010c24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	240000c8 	.word	0x240000c8

08010c28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	4603      	mov	r3, r0
 8010c30:	6039      	str	r1, [r7, #0]
 8010c32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d105      	bne.n	8010c46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c3a:	683a      	ldr	r2, [r7, #0]
 8010c3c:	4907      	ldr	r1, [pc, #28]	@ (8010c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c3e:	4808      	ldr	r0, [pc, #32]	@ (8010c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c40:	f7ff fe2c 	bl	801089c <USBD_GetString>
 8010c44:	e004      	b.n	8010c50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	4904      	ldr	r1, [pc, #16]	@ (8010c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c4a:	4805      	ldr	r0, [pc, #20]	@ (8010c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c4c:	f7ff fe26 	bl	801089c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c50:	4b02      	ldr	r3, [pc, #8]	@ (8010c5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	24000960 	.word	0x24000960
 8010c60:	08013d88 	.word	0x08013d88

08010c64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	6039      	str	r1, [r7, #0]
 8010c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c70:	79fb      	ldrb	r3, [r7, #7]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d105      	bne.n	8010c82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010c76:	683a      	ldr	r2, [r7, #0]
 8010c78:	4907      	ldr	r1, [pc, #28]	@ (8010c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010c7a:	4808      	ldr	r0, [pc, #32]	@ (8010c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010c7c:	f7ff fe0e 	bl	801089c <USBD_GetString>
 8010c80:	e004      	b.n	8010c8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	4904      	ldr	r1, [pc, #16]	@ (8010c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010c86:	4805      	ldr	r0, [pc, #20]	@ (8010c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010c88:	f7ff fe08 	bl	801089c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c8c:	4b02      	ldr	r3, [pc, #8]	@ (8010c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	24000960 	.word	0x24000960
 8010c9c:	08013d94 	.word	0x08013d94

08010ca0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8010ce4 <Get_SerialNum+0x44>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010cac:	4b0e      	ldr	r3, [pc, #56]	@ (8010ce8 <Get_SerialNum+0x48>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8010cec <Get_SerialNum+0x4c>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d009      	beq.n	8010cda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010cc6:	2208      	movs	r2, #8
 8010cc8:	4909      	ldr	r1, [pc, #36]	@ (8010cf0 <Get_SerialNum+0x50>)
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f000 f814 	bl	8010cf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010cd0:	2204      	movs	r2, #4
 8010cd2:	4908      	ldr	r1, [pc, #32]	@ (8010cf4 <Get_SerialNum+0x54>)
 8010cd4:	68b8      	ldr	r0, [r7, #8]
 8010cd6:	f000 f80f 	bl	8010cf8 <IntToUnicode>
  }
}
 8010cda:	bf00      	nop
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	1ff1e800 	.word	0x1ff1e800
 8010ce8:	1ff1e804 	.word	0x1ff1e804
 8010cec:	1ff1e808 	.word	0x1ff1e808
 8010cf0:	240000ca 	.word	0x240000ca
 8010cf4:	240000da 	.word	0x240000da

08010cf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b087      	sub	sp, #28
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	4613      	mov	r3, r2
 8010d04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d06:	2300      	movs	r3, #0
 8010d08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	75fb      	strb	r3, [r7, #23]
 8010d0e:	e027      	b.n	8010d60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	0f1b      	lsrs	r3, r3, #28
 8010d14:	2b09      	cmp	r3, #9
 8010d16:	d80b      	bhi.n	8010d30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	0f1b      	lsrs	r3, r3, #28
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	7dfb      	ldrb	r3, [r7, #23]
 8010d20:	005b      	lsls	r3, r3, #1
 8010d22:	4619      	mov	r1, r3
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	440b      	add	r3, r1
 8010d28:	3230      	adds	r2, #48	@ 0x30
 8010d2a:	b2d2      	uxtb	r2, r2
 8010d2c:	701a      	strb	r2, [r3, #0]
 8010d2e:	e00a      	b.n	8010d46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	0f1b      	lsrs	r3, r3, #28
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	7dfb      	ldrb	r3, [r7, #23]
 8010d38:	005b      	lsls	r3, r3, #1
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	440b      	add	r3, r1
 8010d40:	3237      	adds	r2, #55	@ 0x37
 8010d42:	b2d2      	uxtb	r2, r2
 8010d44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	011b      	lsls	r3, r3, #4
 8010d4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010d4c:	7dfb      	ldrb	r3, [r7, #23]
 8010d4e:	005b      	lsls	r3, r3, #1
 8010d50:	3301      	adds	r3, #1
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	4413      	add	r3, r2
 8010d56:	2200      	movs	r2, #0
 8010d58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	75fb      	strb	r3, [r7, #23]
 8010d60:	7dfa      	ldrb	r2, [r7, #23]
 8010d62:	79fb      	ldrb	r3, [r7, #7]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d3d3      	bcc.n	8010d10 <IntToUnicode+0x18>
  }
}
 8010d68:	bf00      	nop
 8010d6a:	bf00      	nop
 8010d6c:	371c      	adds	r7, #28
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr

08010d76 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8010d76:	b480      	push	{r7}
 8010d78:	b083      	sub	sp, #12
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8010d80:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	370c      	adds	r7, #12
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
	...

08010d90 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b08e      	sub	sp, #56	@ 0x38
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	4603      	mov	r3, r0
 8010d98:	60b9      	str	r1, [r7, #8]
 8010d9a:	607a      	str	r2, [r7, #4]
 8010d9c:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN 3 */
    HAL_SD_CardInfoTypeDef info;
    int8_t ret = -1;
 8010d9e:	23ff      	movs	r3, #255	@ 0xff
 8010da0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Retrieve the card info
    if (HAL_SD_GetCardInfo(&hsd1, &info) == HAL_OK)
 8010da4:	f107 0310 	add.w	r3, r7, #16
 8010da8:	4619      	mov	r1, r3
 8010daa:	480b      	ldr	r0, [pc, #44]	@ (8010dd8 <STORAGE_GetCapacity_FS+0x48>)
 8010dac:	f7f7 f9f2 	bl	8008194 <HAL_SD_GetCardInfo>
 8010db0:	4603      	mov	r3, r0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d10a      	bne.n	8010dcc <STORAGE_GetCapacity_FS+0x3c>
    {
        // Ensure the correct values are returned
        *block_num = info.LogBlockNbr - 1;
 8010db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010db8:	1e5a      	subs	r2, r3, #1
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	601a      	str	r2, [r3, #0]
        *block_size = info.LogBlockSize;
 8010dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	801a      	strh	r2, [r3, #0]
        ret = USBD_OK;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return ret;
 8010dcc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3738      	adds	r7, #56	@ 0x38
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	240003e4 	.word	0x240003e4

08010ddc <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8010ddc:	b480      	push	{r7}
 8010dde:	b083      	sub	sp, #12
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	4603      	mov	r3, r0
 8010de4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 8010de6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	370c      	adds	r7, #12
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr

08010df4 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8010dfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	370c      	adds	r7, #12
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b088      	sub	sp, #32
 8010e10:	af02      	add	r7, sp, #8
 8010e12:	60b9      	str	r1, [r7, #8]
 8010e14:	607a      	str	r2, [r7, #4]
 8010e16:	461a      	mov	r2, r3
 8010e18:	4603      	mov	r3, r0
 8010e1a:	73fb      	strb	r3, [r7, #15]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 8010e20:	23ff      	movs	r3, #255	@ 0xff
 8010e22:	75fb      	strb	r3, [r7, #23]

	  HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8010e24:	89bb      	ldrh	r3, [r7, #12]
 8010e26:	f04f 32ff 	mov.w	r2, #4294967295
 8010e2a:	9200      	str	r2, [sp, #0]
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	68b9      	ldr	r1, [r7, #8]
 8010e30:	4808      	ldr	r0, [pc, #32]	@ (8010e54 <STORAGE_Read_FS+0x48>)
 8010e32:	f7f6 fc35 	bl	80076a0 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8010e36:	bf00      	nop
 8010e38:	4806      	ldr	r0, [pc, #24]	@ (8010e54 <STORAGE_Read_FS+0x48>)
 8010e3a:	f7f7 fae9 	bl	8008410 <HAL_SD_GetCardState>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b04      	cmp	r3, #4
 8010e42:	d1f9      	bne.n	8010e38 <STORAGE_Read_FS+0x2c>
	  ret = 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8010e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3718      	adds	r7, #24
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	240003e4 	.word	0x240003e4

08010e58 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b088      	sub	sp, #32
 8010e5c:	af02      	add	r7, sp, #8
 8010e5e:	60b9      	str	r1, [r7, #8]
 8010e60:	607a      	str	r2, [r7, #4]
 8010e62:	461a      	mov	r2, r3
 8010e64:	4603      	mov	r3, r0
 8010e66:	73fb      	strb	r3, [r7, #15]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	  int8_t ret = -1;
 8010e6c:	23ff      	movs	r3, #255	@ 0xff
 8010e6e:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8010e70:	89bb      	ldrh	r3, [r7, #12]
 8010e72:	f04f 32ff 	mov.w	r2, #4294967295
 8010e76:	9200      	str	r2, [sp, #0]
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	68b9      	ldr	r1, [r7, #8]
 8010e7c:	4808      	ldr	r0, [pc, #32]	@ (8010ea0 <STORAGE_Write_FS+0x48>)
 8010e7e:	f7f6 fd99 	bl	80079b4 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8010e82:	bf00      	nop
 8010e84:	4806      	ldr	r0, [pc, #24]	@ (8010ea0 <STORAGE_Write_FS+0x48>)
 8010e86:	f7f7 fac3 	bl	8008410 <HAL_SD_GetCardState>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	2b04      	cmp	r3, #4
 8010e8e:	d1f9      	bne.n	8010e84 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 8010e90:	2300      	movs	r3, #0
 8010e92:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8010e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3718      	adds	r7, #24
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	240003e4 	.word	0x240003e4

08010ea4 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8010ea8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b0ba      	sub	sp, #232	@ 0xe8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ebc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	601a      	str	r2, [r3, #0]
 8010ec4:	605a      	str	r2, [r3, #4]
 8010ec6:	609a      	str	r2, [r3, #8]
 8010ec8:	60da      	str	r2, [r3, #12]
 8010eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010ecc:	f107 0310 	add.w	r3, r7, #16
 8010ed0:	22c0      	movs	r2, #192	@ 0xc0
 8010ed2:	2100      	movs	r1, #0
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f001 f915 	bl	8012104 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	4a2c      	ldr	r2, [pc, #176]	@ (8010f90 <HAL_PCD_MspInit+0xdc>)
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d151      	bne.n	8010f88 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010ee4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010ee8:	f04f 0300 	mov.w	r3, #0
 8010eec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010ef0:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8010ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010ef8:	f107 0310 	add.w	r3, r7, #16
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7f3 fdb1 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 8010f02:	4603      	mov	r3, r0
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d001      	beq.n	8010f0c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8010f08:	f7f0 f828 	bl	8000f5c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010f0c:	f7f2 fd88 	bl	8003a20 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f10:	4b20      	ldr	r3, [pc, #128]	@ (8010f94 <HAL_PCD_MspInit+0xe0>)
 8010f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010f16:	4a1f      	ldr	r2, [pc, #124]	@ (8010f94 <HAL_PCD_MspInit+0xe0>)
 8010f18:	f043 0301 	orr.w	r3, r3, #1
 8010f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010f20:	4b1c      	ldr	r3, [pc, #112]	@ (8010f94 <HAL_PCD_MspInit+0xe0>)
 8010f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010f26:	f003 0301 	and.w	r3, r3, #1
 8010f2a:	60fb      	str	r3, [r7, #12]
 8010f2c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010f2e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f36:	2302      	movs	r3, #2
 8010f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010f42:	2300      	movs	r3, #0
 8010f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010f48:	230a      	movs	r3, #10
 8010f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f4e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010f52:	4619      	mov	r1, r3
 8010f54:	4810      	ldr	r0, [pc, #64]	@ (8010f98 <HAL_PCD_MspInit+0xe4>)
 8010f56:	f7f0 ff49 	bl	8001dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8010f94 <HAL_PCD_MspInit+0xe0>)
 8010f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010f60:	4a0c      	ldr	r2, [pc, #48]	@ (8010f94 <HAL_PCD_MspInit+0xe0>)
 8010f62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010f66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8010f94 <HAL_PCD_MspInit+0xe0>)
 8010f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010f74:	60bb      	str	r3, [r7, #8]
 8010f76:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010f78:	2200      	movs	r2, #0
 8010f7a:	2100      	movs	r1, #0
 8010f7c:	2065      	movs	r0, #101	@ 0x65
 8010f7e:	f7f0 fe88 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010f82:	2065      	movs	r0, #101	@ 0x65
 8010f84:	f7f0 fe9f 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010f88:	bf00      	nop
 8010f8a:	37e8      	adds	r7, #232	@ 0xe8
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	40080000 	.word	0x40080000
 8010f94:	58024400 	.word	0x58024400
 8010f98:	58020000 	.word	0x58020000

08010f9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	4610      	mov	r0, r2
 8010fb4:	f7fe fae6 	bl	800f584 <USBD_LL_SetupStage>
}
 8010fb8:	bf00      	nop
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	460b      	mov	r3, r1
 8010fca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010fd2:	78fa      	ldrb	r2, [r7, #3]
 8010fd4:	6879      	ldr	r1, [r7, #4]
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	00db      	lsls	r3, r3, #3
 8010fda:	4413      	add	r3, r2
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	440b      	add	r3, r1
 8010fe0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	78fb      	ldrb	r3, [r7, #3]
 8010fe8:	4619      	mov	r1, r3
 8010fea:	f7fe fb20 	bl	800f62e <USBD_LL_DataOutStage>
}
 8010fee:	bf00      	nop
 8010ff0:	3708      	adds	r7, #8
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}

08010ff6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b082      	sub	sp, #8
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
 8010ffe:	460b      	mov	r3, r1
 8011000:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011008:	78fa      	ldrb	r2, [r7, #3]
 801100a:	6879      	ldr	r1, [r7, #4]
 801100c:	4613      	mov	r3, r2
 801100e:	00db      	lsls	r3, r3, #3
 8011010:	4413      	add	r3, r2
 8011012:	009b      	lsls	r3, r3, #2
 8011014:	440b      	add	r3, r1
 8011016:	3320      	adds	r3, #32
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	78fb      	ldrb	r3, [r7, #3]
 801101c:	4619      	mov	r1, r3
 801101e:	f7fe fbb9 	bl	800f794 <USBD_LL_DataInStage>
}
 8011022:	bf00      	nop
 8011024:	3708      	adds	r7, #8
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}

0801102a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b082      	sub	sp, #8
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011038:	4618      	mov	r0, r3
 801103a:	f7fe fcf3 	bl	800fa24 <USBD_LL_SOF>
}
 801103e:	bf00      	nop
 8011040:	3708      	adds	r7, #8
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}

08011046 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011046:	b580      	push	{r7, lr}
 8011048:	b084      	sub	sp, #16
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801104e:	2301      	movs	r3, #1
 8011050:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	79db      	ldrb	r3, [r3, #7]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d102      	bne.n	8011060 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801105a:	2300      	movs	r3, #0
 801105c:	73fb      	strb	r3, [r7, #15]
 801105e:	e008      	b.n	8011072 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	79db      	ldrb	r3, [r3, #7]
 8011064:	2b02      	cmp	r3, #2
 8011066:	d102      	bne.n	801106e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011068:	2301      	movs	r3, #1
 801106a:	73fb      	strb	r3, [r7, #15]
 801106c:	e001      	b.n	8011072 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801106e:	f7ef ff75 	bl	8000f5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011078:	7bfa      	ldrb	r2, [r7, #15]
 801107a:	4611      	mov	r1, r2
 801107c:	4618      	mov	r0, r3
 801107e:	f7fe fc8d 	bl	800f99c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011088:	4618      	mov	r0, r3
 801108a:	f7fe fc35 	bl	800f8f8 <USBD_LL_Reset>
}
 801108e:	bf00      	nop
 8011090:	3710      	adds	r7, #16
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}
	...

08011098 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fe fc88 	bl	800f9bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	6812      	ldr	r2, [r2, #0]
 80110ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80110be:	f043 0301 	orr.w	r3, r3, #1
 80110c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	7adb      	ldrb	r3, [r3, #11]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d005      	beq.n	80110d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80110cc:	4b04      	ldr	r3, [pc, #16]	@ (80110e0 <HAL_PCD_SuspendCallback+0x48>)
 80110ce:	691b      	ldr	r3, [r3, #16]
 80110d0:	4a03      	ldr	r2, [pc, #12]	@ (80110e0 <HAL_PCD_SuspendCallback+0x48>)
 80110d2:	f043 0306 	orr.w	r3, r3, #6
 80110d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80110d8:	bf00      	nop
 80110da:	3708      	adds	r7, #8
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	e000ed00 	.word	0xe000ed00

080110e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7fe fc7e 	bl	800f9f4 <USBD_LL_Resume>
}
 80110f8:	bf00      	nop
 80110fa:	3708      	adds	r7, #8
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	460b      	mov	r3, r1
 801110a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011112:	78fa      	ldrb	r2, [r7, #3]
 8011114:	4611      	mov	r1, r2
 8011116:	4618      	mov	r0, r3
 8011118:	f7fe fcd6 	bl	800fac8 <USBD_LL_IsoOUTIncomplete>
}
 801111c:	bf00      	nop
 801111e:	3708      	adds	r7, #8
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	460b      	mov	r3, r1
 801112e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011136:	78fa      	ldrb	r2, [r7, #3]
 8011138:	4611      	mov	r1, r2
 801113a:	4618      	mov	r0, r3
 801113c:	f7fe fc92 	bl	800fa64 <USBD_LL_IsoINIncomplete>
}
 8011140:	bf00      	nop
 8011142:	3708      	adds	r7, #8
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe fce8 	bl	800fb2c <USBD_LL_DevConnected>
}
 801115c:	bf00      	nop
 801115e:	3708      	adds	r7, #8
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011172:	4618      	mov	r0, r3
 8011174:	f7fe fce5 	bl	800fb42 <USBD_LL_DevDisconnected>
}
 8011178:	bf00      	nop
 801117a:	3708      	adds	r7, #8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d13e      	bne.n	801120e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011190:	4a21      	ldr	r2, [pc, #132]	@ (8011218 <USBD_LL_Init+0x98>)
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	4a1f      	ldr	r2, [pc, #124]	@ (8011218 <USBD_LL_Init+0x98>)
 801119c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80111a0:	4b1d      	ldr	r3, [pc, #116]	@ (8011218 <USBD_LL_Init+0x98>)
 80111a2:	4a1e      	ldr	r2, [pc, #120]	@ (801121c <USBD_LL_Init+0x9c>)
 80111a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80111a6:	4b1c      	ldr	r3, [pc, #112]	@ (8011218 <USBD_LL_Init+0x98>)
 80111a8:	2209      	movs	r2, #9
 80111aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80111ac:	4b1a      	ldr	r3, [pc, #104]	@ (8011218 <USBD_LL_Init+0x98>)
 80111ae:	2202      	movs	r2, #2
 80111b0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80111b2:	4b19      	ldr	r3, [pc, #100]	@ (8011218 <USBD_LL_Init+0x98>)
 80111b4:	2200      	movs	r2, #0
 80111b6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80111b8:	4b17      	ldr	r3, [pc, #92]	@ (8011218 <USBD_LL_Init+0x98>)
 80111ba:	2202      	movs	r2, #2
 80111bc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80111be:	4b16      	ldr	r3, [pc, #88]	@ (8011218 <USBD_LL_Init+0x98>)
 80111c0:	2200      	movs	r2, #0
 80111c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80111c4:	4b14      	ldr	r3, [pc, #80]	@ (8011218 <USBD_LL_Init+0x98>)
 80111c6:	2200      	movs	r2, #0
 80111c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80111ca:	4b13      	ldr	r3, [pc, #76]	@ (8011218 <USBD_LL_Init+0x98>)
 80111cc:	2200      	movs	r2, #0
 80111ce:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80111d0:	4b11      	ldr	r3, [pc, #68]	@ (8011218 <USBD_LL_Init+0x98>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80111d6:	4b10      	ldr	r3, [pc, #64]	@ (8011218 <USBD_LL_Init+0x98>)
 80111d8:	2200      	movs	r2, #0
 80111da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80111dc:	4b0e      	ldr	r3, [pc, #56]	@ (8011218 <USBD_LL_Init+0x98>)
 80111de:	2200      	movs	r2, #0
 80111e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80111e2:	480d      	ldr	r0, [pc, #52]	@ (8011218 <USBD_LL_Init+0x98>)
 80111e4:	f7f1 f917 	bl	8002416 <HAL_PCD_Init>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d001      	beq.n	80111f2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80111ee:	f7ef feb5 	bl	8000f5c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80111f2:	2180      	movs	r1, #128	@ 0x80
 80111f4:	4808      	ldr	r0, [pc, #32]	@ (8011218 <USBD_LL_Init+0x98>)
 80111f6:	f7f2 fb98 	bl	800392a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80111fa:	2240      	movs	r2, #64	@ 0x40
 80111fc:	2100      	movs	r1, #0
 80111fe:	4806      	ldr	r0, [pc, #24]	@ (8011218 <USBD_LL_Init+0x98>)
 8011200:	f7f2 fb4c 	bl	800389c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011204:	2280      	movs	r2, #128	@ 0x80
 8011206:	2101      	movs	r1, #1
 8011208:	4803      	ldr	r0, [pc, #12]	@ (8011218 <USBD_LL_Init+0x98>)
 801120a:	f7f2 fb47 	bl	800389c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}
 8011218:	24000b60 	.word	0x24000b60
 801121c:	40080000 	.word	0x40080000

08011220 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b084      	sub	sp, #16
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011228:	2300      	movs	r3, #0
 801122a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801122c:	2300      	movs	r3, #0
 801122e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011236:	4618      	mov	r0, r3
 8011238:	f7f1 f9f9 	bl	800262e <HAL_PCD_Start>
 801123c:	4603      	mov	r3, r0
 801123e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011240:	7bfb      	ldrb	r3, [r7, #15]
 8011242:	4618      	mov	r0, r3
 8011244:	f000 f962 	bl	801150c <USBD_Get_USB_Status>
 8011248:	4603      	mov	r3, r0
 801124a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801124c:	7bbb      	ldrb	r3, [r7, #14]
}
 801124e:	4618      	mov	r0, r3
 8011250:	3710      	adds	r7, #16
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}

08011256 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011256:	b580      	push	{r7, lr}
 8011258:	b084      	sub	sp, #16
 801125a:	af00      	add	r7, sp, #0
 801125c:	6078      	str	r0, [r7, #4]
 801125e:	4608      	mov	r0, r1
 8011260:	4611      	mov	r1, r2
 8011262:	461a      	mov	r2, r3
 8011264:	4603      	mov	r3, r0
 8011266:	70fb      	strb	r3, [r7, #3]
 8011268:	460b      	mov	r3, r1
 801126a:	70bb      	strb	r3, [r7, #2]
 801126c:	4613      	mov	r3, r2
 801126e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011274:	2300      	movs	r3, #0
 8011276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801127e:	78bb      	ldrb	r3, [r7, #2]
 8011280:	883a      	ldrh	r2, [r7, #0]
 8011282:	78f9      	ldrb	r1, [r7, #3]
 8011284:	f7f1 fefa 	bl	800307c <HAL_PCD_EP_Open>
 8011288:	4603      	mov	r3, r0
 801128a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801128c:	7bfb      	ldrb	r3, [r7, #15]
 801128e:	4618      	mov	r0, r3
 8011290:	f000 f93c 	bl	801150c <USBD_Get_USB_Status>
 8011294:	4603      	mov	r3, r0
 8011296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011298:	7bbb      	ldrb	r3, [r7, #14]
}
 801129a:	4618      	mov	r0, r3
 801129c:	3710      	adds	r7, #16
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}

080112a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112a2:	b580      	push	{r7, lr}
 80112a4:	b084      	sub	sp, #16
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	6078      	str	r0, [r7, #4]
 80112aa:	460b      	mov	r3, r1
 80112ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112ae:	2300      	movs	r3, #0
 80112b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112b2:	2300      	movs	r3, #0
 80112b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80112bc:	78fa      	ldrb	r2, [r7, #3]
 80112be:	4611      	mov	r1, r2
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7f1 ff43 	bl	800314c <HAL_PCD_EP_Close>
 80112c6:	4603      	mov	r3, r0
 80112c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112ca:	7bfb      	ldrb	r3, [r7, #15]
 80112cc:	4618      	mov	r0, r3
 80112ce:	f000 f91d 	bl	801150c <USBD_Get_USB_Status>
 80112d2:	4603      	mov	r3, r0
 80112d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3710      	adds	r7, #16
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}

080112e0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	460b      	mov	r3, r1
 80112ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112ec:	2300      	movs	r3, #0
 80112ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112f0:	2300      	movs	r3, #0
 80112f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80112fa:	78fa      	ldrb	r2, [r7, #3]
 80112fc:	4611      	mov	r1, r2
 80112fe:	4618      	mov	r0, r3
 8011300:	f7f2 f8e5 	bl	80034ce <HAL_PCD_EP_Flush>
 8011304:	4603      	mov	r3, r0
 8011306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011308:	7bfb      	ldrb	r3, [r7, #15]
 801130a:	4618      	mov	r0, r3
 801130c:	f000 f8fe 	bl	801150c <USBD_Get_USB_Status>
 8011310:	4603      	mov	r3, r0
 8011312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011314:	7bbb      	ldrb	r3, [r7, #14]
}
 8011316:	4618      	mov	r0, r3
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}

0801131e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801131e:	b580      	push	{r7, lr}
 8011320:	b084      	sub	sp, #16
 8011322:	af00      	add	r7, sp, #0
 8011324:	6078      	str	r0, [r7, #4]
 8011326:	460b      	mov	r3, r1
 8011328:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801132a:	2300      	movs	r3, #0
 801132c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801132e:	2300      	movs	r3, #0
 8011330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011338:	78fa      	ldrb	r2, [r7, #3]
 801133a:	4611      	mov	r1, r2
 801133c:	4618      	mov	r0, r3
 801133e:	f7f1 ffdc 	bl	80032fa <HAL_PCD_EP_SetStall>
 8011342:	4603      	mov	r3, r0
 8011344:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011346:	7bfb      	ldrb	r3, [r7, #15]
 8011348:	4618      	mov	r0, r3
 801134a:	f000 f8df 	bl	801150c <USBD_Get_USB_Status>
 801134e:	4603      	mov	r3, r0
 8011350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011352:	7bbb      	ldrb	r3, [r7, #14]
}
 8011354:	4618      	mov	r0, r3
 8011356:	3710      	adds	r7, #16
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	460b      	mov	r3, r1
 8011366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011368:	2300      	movs	r3, #0
 801136a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801136c:	2300      	movs	r3, #0
 801136e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011376:	78fa      	ldrb	r2, [r7, #3]
 8011378:	4611      	mov	r1, r2
 801137a:	4618      	mov	r0, r3
 801137c:	f7f2 f820 	bl	80033c0 <HAL_PCD_EP_ClrStall>
 8011380:	4603      	mov	r3, r0
 8011382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011384:	7bfb      	ldrb	r3, [r7, #15]
 8011386:	4618      	mov	r0, r3
 8011388:	f000 f8c0 	bl	801150c <USBD_Get_USB_Status>
 801138c:	4603      	mov	r3, r0
 801138e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011390:	7bbb      	ldrb	r3, [r7, #14]
}
 8011392:	4618      	mov	r0, r3
 8011394:	3710      	adds	r7, #16
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}

0801139a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801139a:	b480      	push	{r7}
 801139c:	b085      	sub	sp, #20
 801139e:	af00      	add	r7, sp, #0
 80113a0:	6078      	str	r0, [r7, #4]
 80113a2:	460b      	mov	r3, r1
 80113a4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80113ac:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80113ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	da0b      	bge.n	80113ce <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80113b6:	78fb      	ldrb	r3, [r7, #3]
 80113b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80113bc:	68f9      	ldr	r1, [r7, #12]
 80113be:	4613      	mov	r3, r2
 80113c0:	00db      	lsls	r3, r3, #3
 80113c2:	4413      	add	r3, r2
 80113c4:	009b      	lsls	r3, r3, #2
 80113c6:	440b      	add	r3, r1
 80113c8:	3316      	adds	r3, #22
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	e00b      	b.n	80113e6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80113ce:	78fb      	ldrb	r3, [r7, #3]
 80113d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80113d4:	68f9      	ldr	r1, [r7, #12]
 80113d6:	4613      	mov	r3, r2
 80113d8:	00db      	lsls	r3, r3, #3
 80113da:	4413      	add	r3, r2
 80113dc:	009b      	lsls	r3, r3, #2
 80113de:	440b      	add	r3, r1
 80113e0:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80113e4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3714      	adds	r7, #20
 80113ea:	46bd      	mov	sp, r7
 80113ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f0:	4770      	bx	lr

080113f2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80113f2:	b580      	push	{r7, lr}
 80113f4:	b084      	sub	sp, #16
 80113f6:	af00      	add	r7, sp, #0
 80113f8:	6078      	str	r0, [r7, #4]
 80113fa:	460b      	mov	r3, r1
 80113fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113fe:	2300      	movs	r3, #0
 8011400:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011402:	2300      	movs	r3, #0
 8011404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801140c:	78fa      	ldrb	r2, [r7, #3]
 801140e:	4611      	mov	r1, r2
 8011410:	4618      	mov	r0, r3
 8011412:	f7f1 fe0f 	bl	8003034 <HAL_PCD_SetAddress>
 8011416:	4603      	mov	r3, r0
 8011418:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801141a:	7bfb      	ldrb	r3, [r7, #15]
 801141c:	4618      	mov	r0, r3
 801141e:	f000 f875 	bl	801150c <USBD_Get_USB_Status>
 8011422:	4603      	mov	r3, r0
 8011424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011426:	7bbb      	ldrb	r3, [r7, #14]
}
 8011428:	4618      	mov	r0, r3
 801142a:	3710      	adds	r7, #16
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b086      	sub	sp, #24
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	607a      	str	r2, [r7, #4]
 801143a:	603b      	str	r3, [r7, #0]
 801143c:	460b      	mov	r3, r1
 801143e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011440:	2300      	movs	r3, #0
 8011442:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011444:	2300      	movs	r3, #0
 8011446:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801144e:	7af9      	ldrb	r1, [r7, #11]
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	f7f1 ff17 	bl	8003286 <HAL_PCD_EP_Transmit>
 8011458:	4603      	mov	r3, r0
 801145a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801145c:	7dfb      	ldrb	r3, [r7, #23]
 801145e:	4618      	mov	r0, r3
 8011460:	f000 f854 	bl	801150c <USBD_Get_USB_Status>
 8011464:	4603      	mov	r3, r0
 8011466:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011468:	7dbb      	ldrb	r3, [r7, #22]
}
 801146a:	4618      	mov	r0, r3
 801146c:	3718      	adds	r7, #24
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}

08011472 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b086      	sub	sp, #24
 8011476:	af00      	add	r7, sp, #0
 8011478:	60f8      	str	r0, [r7, #12]
 801147a:	607a      	str	r2, [r7, #4]
 801147c:	603b      	str	r3, [r7, #0]
 801147e:	460b      	mov	r3, r1
 8011480:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011482:	2300      	movs	r3, #0
 8011484:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011486:	2300      	movs	r3, #0
 8011488:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011490:	7af9      	ldrb	r1, [r7, #11]
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	f7f1 fea3 	bl	80031e0 <HAL_PCD_EP_Receive>
 801149a:	4603      	mov	r3, r0
 801149c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801149e:	7dfb      	ldrb	r3, [r7, #23]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f000 f833 	bl	801150c <USBD_Get_USB_Status>
 80114a6:	4603      	mov	r3, r0
 80114a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80114aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3718      	adds	r7, #24
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	460b      	mov	r3, r1
 80114be:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80114c6:	78fa      	ldrb	r2, [r7, #3]
 80114c8:	4611      	mov	r1, r2
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7f1 fec3 	bl	8003256 <HAL_PCD_EP_GetRxCount>
 80114d0:	4603      	mov	r3, r0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3708      	adds	r7, #8
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
	...

080114dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80114dc:	b480      	push	{r7}
 80114de:	b083      	sub	sp, #12
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80114e4:	4b03      	ldr	r3, [pc, #12]	@ (80114f4 <USBD_static_malloc+0x18>)
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	370c      	adds	r7, #12
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	24001044 	.word	0x24001044

080114f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b083      	sub	sp, #12
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011500:	bf00      	nop
 8011502:	370c      	adds	r7, #12
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr

0801150c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801150c:	b480      	push	{r7}
 801150e:	b085      	sub	sp, #20
 8011510:	af00      	add	r7, sp, #0
 8011512:	4603      	mov	r3, r0
 8011514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011516:	2300      	movs	r3, #0
 8011518:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801151a:	79fb      	ldrb	r3, [r7, #7]
 801151c:	2b03      	cmp	r3, #3
 801151e:	d817      	bhi.n	8011550 <USBD_Get_USB_Status+0x44>
 8011520:	a201      	add	r2, pc, #4	@ (adr r2, 8011528 <USBD_Get_USB_Status+0x1c>)
 8011522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011526:	bf00      	nop
 8011528:	08011539 	.word	0x08011539
 801152c:	0801153f 	.word	0x0801153f
 8011530:	08011545 	.word	0x08011545
 8011534:	0801154b 	.word	0x0801154b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011538:	2300      	movs	r3, #0
 801153a:	73fb      	strb	r3, [r7, #15]
    break;
 801153c:	e00b      	b.n	8011556 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801153e:	2303      	movs	r3, #3
 8011540:	73fb      	strb	r3, [r7, #15]
    break;
 8011542:	e008      	b.n	8011556 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011544:	2301      	movs	r3, #1
 8011546:	73fb      	strb	r3, [r7, #15]
    break;
 8011548:	e005      	b.n	8011556 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801154a:	2303      	movs	r3, #3
 801154c:	73fb      	strb	r3, [r7, #15]
    break;
 801154e:	e002      	b.n	8011556 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011550:	2303      	movs	r3, #3
 8011552:	73fb      	strb	r3, [r7, #15]
    break;
 8011554:	bf00      	nop
  }
  return usb_status;
 8011556:	7bfb      	ldrb	r3, [r7, #15]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3714      	adds	r7, #20
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <__cvt>:
 8011564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011566:	ed2d 8b02 	vpush	{d8}
 801156a:	eeb0 8b40 	vmov.f64	d8, d0
 801156e:	b085      	sub	sp, #20
 8011570:	4617      	mov	r7, r2
 8011572:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011574:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011576:	ee18 2a90 	vmov	r2, s17
 801157a:	f025 0520 	bic.w	r5, r5, #32
 801157e:	2a00      	cmp	r2, #0
 8011580:	bfb6      	itet	lt
 8011582:	222d      	movlt	r2, #45	@ 0x2d
 8011584:	2200      	movge	r2, #0
 8011586:	eeb1 8b40 	vneglt.f64	d8, d0
 801158a:	2d46      	cmp	r5, #70	@ 0x46
 801158c:	460c      	mov	r4, r1
 801158e:	701a      	strb	r2, [r3, #0]
 8011590:	d004      	beq.n	801159c <__cvt+0x38>
 8011592:	2d45      	cmp	r5, #69	@ 0x45
 8011594:	d100      	bne.n	8011598 <__cvt+0x34>
 8011596:	3401      	adds	r4, #1
 8011598:	2102      	movs	r1, #2
 801159a:	e000      	b.n	801159e <__cvt+0x3a>
 801159c:	2103      	movs	r1, #3
 801159e:	ab03      	add	r3, sp, #12
 80115a0:	9301      	str	r3, [sp, #4]
 80115a2:	ab02      	add	r3, sp, #8
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	4622      	mov	r2, r4
 80115a8:	4633      	mov	r3, r6
 80115aa:	eeb0 0b48 	vmov.f64	d0, d8
 80115ae:	f000 feb3 	bl	8012318 <_dtoa_r>
 80115b2:	2d47      	cmp	r5, #71	@ 0x47
 80115b4:	d114      	bne.n	80115e0 <__cvt+0x7c>
 80115b6:	07fb      	lsls	r3, r7, #31
 80115b8:	d50a      	bpl.n	80115d0 <__cvt+0x6c>
 80115ba:	1902      	adds	r2, r0, r4
 80115bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c4:	bf08      	it	eq
 80115c6:	9203      	streq	r2, [sp, #12]
 80115c8:	2130      	movs	r1, #48	@ 0x30
 80115ca:	9b03      	ldr	r3, [sp, #12]
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d319      	bcc.n	8011604 <__cvt+0xa0>
 80115d0:	9b03      	ldr	r3, [sp, #12]
 80115d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115d4:	1a1b      	subs	r3, r3, r0
 80115d6:	6013      	str	r3, [r2, #0]
 80115d8:	b005      	add	sp, #20
 80115da:	ecbd 8b02 	vpop	{d8}
 80115de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115e0:	2d46      	cmp	r5, #70	@ 0x46
 80115e2:	eb00 0204 	add.w	r2, r0, r4
 80115e6:	d1e9      	bne.n	80115bc <__cvt+0x58>
 80115e8:	7803      	ldrb	r3, [r0, #0]
 80115ea:	2b30      	cmp	r3, #48	@ 0x30
 80115ec:	d107      	bne.n	80115fe <__cvt+0x9a>
 80115ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f6:	bf1c      	itt	ne
 80115f8:	f1c4 0401 	rsbne	r4, r4, #1
 80115fc:	6034      	strne	r4, [r6, #0]
 80115fe:	6833      	ldr	r3, [r6, #0]
 8011600:	441a      	add	r2, r3
 8011602:	e7db      	b.n	80115bc <__cvt+0x58>
 8011604:	1c5c      	adds	r4, r3, #1
 8011606:	9403      	str	r4, [sp, #12]
 8011608:	7019      	strb	r1, [r3, #0]
 801160a:	e7de      	b.n	80115ca <__cvt+0x66>

0801160c <__exponent>:
 801160c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801160e:	2900      	cmp	r1, #0
 8011610:	bfba      	itte	lt
 8011612:	4249      	neglt	r1, r1
 8011614:	232d      	movlt	r3, #45	@ 0x2d
 8011616:	232b      	movge	r3, #43	@ 0x2b
 8011618:	2909      	cmp	r1, #9
 801161a:	7002      	strb	r2, [r0, #0]
 801161c:	7043      	strb	r3, [r0, #1]
 801161e:	dd29      	ble.n	8011674 <__exponent+0x68>
 8011620:	f10d 0307 	add.w	r3, sp, #7
 8011624:	461d      	mov	r5, r3
 8011626:	270a      	movs	r7, #10
 8011628:	461a      	mov	r2, r3
 801162a:	fbb1 f6f7 	udiv	r6, r1, r7
 801162e:	fb07 1416 	mls	r4, r7, r6, r1
 8011632:	3430      	adds	r4, #48	@ 0x30
 8011634:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011638:	460c      	mov	r4, r1
 801163a:	2c63      	cmp	r4, #99	@ 0x63
 801163c:	f103 33ff 	add.w	r3, r3, #4294967295
 8011640:	4631      	mov	r1, r6
 8011642:	dcf1      	bgt.n	8011628 <__exponent+0x1c>
 8011644:	3130      	adds	r1, #48	@ 0x30
 8011646:	1e94      	subs	r4, r2, #2
 8011648:	f803 1c01 	strb.w	r1, [r3, #-1]
 801164c:	1c41      	adds	r1, r0, #1
 801164e:	4623      	mov	r3, r4
 8011650:	42ab      	cmp	r3, r5
 8011652:	d30a      	bcc.n	801166a <__exponent+0x5e>
 8011654:	f10d 0309 	add.w	r3, sp, #9
 8011658:	1a9b      	subs	r3, r3, r2
 801165a:	42ac      	cmp	r4, r5
 801165c:	bf88      	it	hi
 801165e:	2300      	movhi	r3, #0
 8011660:	3302      	adds	r3, #2
 8011662:	4403      	add	r3, r0
 8011664:	1a18      	subs	r0, r3, r0
 8011666:	b003      	add	sp, #12
 8011668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801166a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801166e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011672:	e7ed      	b.n	8011650 <__exponent+0x44>
 8011674:	2330      	movs	r3, #48	@ 0x30
 8011676:	3130      	adds	r1, #48	@ 0x30
 8011678:	7083      	strb	r3, [r0, #2]
 801167a:	70c1      	strb	r1, [r0, #3]
 801167c:	1d03      	adds	r3, r0, #4
 801167e:	e7f1      	b.n	8011664 <__exponent+0x58>

08011680 <_printf_float>:
 8011680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	b08d      	sub	sp, #52	@ 0x34
 8011686:	460c      	mov	r4, r1
 8011688:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801168c:	4616      	mov	r6, r2
 801168e:	461f      	mov	r7, r3
 8011690:	4605      	mov	r5, r0
 8011692:	f000 fd3f 	bl	8012114 <_localeconv_r>
 8011696:	f8d0 b000 	ldr.w	fp, [r0]
 801169a:	4658      	mov	r0, fp
 801169c:	f7ee fe70 	bl	8000380 <strlen>
 80116a0:	2300      	movs	r3, #0
 80116a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80116a4:	f8d8 3000 	ldr.w	r3, [r8]
 80116a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80116ac:	6822      	ldr	r2, [r4, #0]
 80116ae:	9005      	str	r0, [sp, #20]
 80116b0:	3307      	adds	r3, #7
 80116b2:	f023 0307 	bic.w	r3, r3, #7
 80116b6:	f103 0108 	add.w	r1, r3, #8
 80116ba:	f8c8 1000 	str.w	r1, [r8]
 80116be:	ed93 0b00 	vldr	d0, [r3]
 80116c2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011920 <_printf_float+0x2a0>
 80116c6:	eeb0 7bc0 	vabs.f64	d7, d0
 80116ca:	eeb4 7b46 	vcmp.f64	d7, d6
 80116ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80116d6:	dd24      	ble.n	8011722 <_printf_float+0xa2>
 80116d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80116dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e0:	d502      	bpl.n	80116e8 <_printf_float+0x68>
 80116e2:	232d      	movs	r3, #45	@ 0x2d
 80116e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116e8:	498f      	ldr	r1, [pc, #572]	@ (8011928 <_printf_float+0x2a8>)
 80116ea:	4b90      	ldr	r3, [pc, #576]	@ (801192c <_printf_float+0x2ac>)
 80116ec:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80116f0:	bf94      	ite	ls
 80116f2:	4688      	movls	r8, r1
 80116f4:	4698      	movhi	r8, r3
 80116f6:	f022 0204 	bic.w	r2, r2, #4
 80116fa:	2303      	movs	r3, #3
 80116fc:	6123      	str	r3, [r4, #16]
 80116fe:	6022      	str	r2, [r4, #0]
 8011700:	f04f 0a00 	mov.w	sl, #0
 8011704:	9700      	str	r7, [sp, #0]
 8011706:	4633      	mov	r3, r6
 8011708:	aa0b      	add	r2, sp, #44	@ 0x2c
 801170a:	4621      	mov	r1, r4
 801170c:	4628      	mov	r0, r5
 801170e:	f000 f9d1 	bl	8011ab4 <_printf_common>
 8011712:	3001      	adds	r0, #1
 8011714:	f040 8089 	bne.w	801182a <_printf_float+0x1aa>
 8011718:	f04f 30ff 	mov.w	r0, #4294967295
 801171c:	b00d      	add	sp, #52	@ 0x34
 801171e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011722:	eeb4 0b40 	vcmp.f64	d0, d0
 8011726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172a:	d709      	bvc.n	8011740 <_printf_float+0xc0>
 801172c:	ee10 3a90 	vmov	r3, s1
 8011730:	2b00      	cmp	r3, #0
 8011732:	bfbc      	itt	lt
 8011734:	232d      	movlt	r3, #45	@ 0x2d
 8011736:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801173a:	497d      	ldr	r1, [pc, #500]	@ (8011930 <_printf_float+0x2b0>)
 801173c:	4b7d      	ldr	r3, [pc, #500]	@ (8011934 <_printf_float+0x2b4>)
 801173e:	e7d5      	b.n	80116ec <_printf_float+0x6c>
 8011740:	6863      	ldr	r3, [r4, #4]
 8011742:	1c59      	adds	r1, r3, #1
 8011744:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011748:	d139      	bne.n	80117be <_printf_float+0x13e>
 801174a:	2306      	movs	r3, #6
 801174c:	6063      	str	r3, [r4, #4]
 801174e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011752:	2300      	movs	r3, #0
 8011754:	6022      	str	r2, [r4, #0]
 8011756:	9303      	str	r3, [sp, #12]
 8011758:	ab0a      	add	r3, sp, #40	@ 0x28
 801175a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801175e:	ab09      	add	r3, sp, #36	@ 0x24
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	6861      	ldr	r1, [r4, #4]
 8011764:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011768:	4628      	mov	r0, r5
 801176a:	f7ff fefb 	bl	8011564 <__cvt>
 801176e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011772:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011774:	4680      	mov	r8, r0
 8011776:	d129      	bne.n	80117cc <_printf_float+0x14c>
 8011778:	1cc8      	adds	r0, r1, #3
 801177a:	db02      	blt.n	8011782 <_printf_float+0x102>
 801177c:	6863      	ldr	r3, [r4, #4]
 801177e:	4299      	cmp	r1, r3
 8011780:	dd41      	ble.n	8011806 <_printf_float+0x186>
 8011782:	f1a9 0902 	sub.w	r9, r9, #2
 8011786:	fa5f f989 	uxtb.w	r9, r9
 801178a:	3901      	subs	r1, #1
 801178c:	464a      	mov	r2, r9
 801178e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011792:	9109      	str	r1, [sp, #36]	@ 0x24
 8011794:	f7ff ff3a 	bl	801160c <__exponent>
 8011798:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801179a:	1813      	adds	r3, r2, r0
 801179c:	2a01      	cmp	r2, #1
 801179e:	4682      	mov	sl, r0
 80117a0:	6123      	str	r3, [r4, #16]
 80117a2:	dc02      	bgt.n	80117aa <_printf_float+0x12a>
 80117a4:	6822      	ldr	r2, [r4, #0]
 80117a6:	07d2      	lsls	r2, r2, #31
 80117a8:	d501      	bpl.n	80117ae <_printf_float+0x12e>
 80117aa:	3301      	adds	r3, #1
 80117ac:	6123      	str	r3, [r4, #16]
 80117ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d0a6      	beq.n	8011704 <_printf_float+0x84>
 80117b6:	232d      	movs	r3, #45	@ 0x2d
 80117b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117bc:	e7a2      	b.n	8011704 <_printf_float+0x84>
 80117be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80117c2:	d1c4      	bne.n	801174e <_printf_float+0xce>
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1c2      	bne.n	801174e <_printf_float+0xce>
 80117c8:	2301      	movs	r3, #1
 80117ca:	e7bf      	b.n	801174c <_printf_float+0xcc>
 80117cc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80117d0:	d9db      	bls.n	801178a <_printf_float+0x10a>
 80117d2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80117d6:	d118      	bne.n	801180a <_printf_float+0x18a>
 80117d8:	2900      	cmp	r1, #0
 80117da:	6863      	ldr	r3, [r4, #4]
 80117dc:	dd0b      	ble.n	80117f6 <_printf_float+0x176>
 80117de:	6121      	str	r1, [r4, #16]
 80117e0:	b913      	cbnz	r3, 80117e8 <_printf_float+0x168>
 80117e2:	6822      	ldr	r2, [r4, #0]
 80117e4:	07d0      	lsls	r0, r2, #31
 80117e6:	d502      	bpl.n	80117ee <_printf_float+0x16e>
 80117e8:	3301      	adds	r3, #1
 80117ea:	440b      	add	r3, r1
 80117ec:	6123      	str	r3, [r4, #16]
 80117ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80117f0:	f04f 0a00 	mov.w	sl, #0
 80117f4:	e7db      	b.n	80117ae <_printf_float+0x12e>
 80117f6:	b913      	cbnz	r3, 80117fe <_printf_float+0x17e>
 80117f8:	6822      	ldr	r2, [r4, #0]
 80117fa:	07d2      	lsls	r2, r2, #31
 80117fc:	d501      	bpl.n	8011802 <_printf_float+0x182>
 80117fe:	3302      	adds	r3, #2
 8011800:	e7f4      	b.n	80117ec <_printf_float+0x16c>
 8011802:	2301      	movs	r3, #1
 8011804:	e7f2      	b.n	80117ec <_printf_float+0x16c>
 8011806:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801180a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801180c:	4299      	cmp	r1, r3
 801180e:	db05      	blt.n	801181c <_printf_float+0x19c>
 8011810:	6823      	ldr	r3, [r4, #0]
 8011812:	6121      	str	r1, [r4, #16]
 8011814:	07d8      	lsls	r0, r3, #31
 8011816:	d5ea      	bpl.n	80117ee <_printf_float+0x16e>
 8011818:	1c4b      	adds	r3, r1, #1
 801181a:	e7e7      	b.n	80117ec <_printf_float+0x16c>
 801181c:	2900      	cmp	r1, #0
 801181e:	bfd4      	ite	le
 8011820:	f1c1 0202 	rsble	r2, r1, #2
 8011824:	2201      	movgt	r2, #1
 8011826:	4413      	add	r3, r2
 8011828:	e7e0      	b.n	80117ec <_printf_float+0x16c>
 801182a:	6823      	ldr	r3, [r4, #0]
 801182c:	055a      	lsls	r2, r3, #21
 801182e:	d407      	bmi.n	8011840 <_printf_float+0x1c0>
 8011830:	6923      	ldr	r3, [r4, #16]
 8011832:	4642      	mov	r2, r8
 8011834:	4631      	mov	r1, r6
 8011836:	4628      	mov	r0, r5
 8011838:	47b8      	blx	r7
 801183a:	3001      	adds	r0, #1
 801183c:	d12a      	bne.n	8011894 <_printf_float+0x214>
 801183e:	e76b      	b.n	8011718 <_printf_float+0x98>
 8011840:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011844:	f240 80e0 	bls.w	8011a08 <_printf_float+0x388>
 8011848:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801184c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011854:	d133      	bne.n	80118be <_printf_float+0x23e>
 8011856:	4a38      	ldr	r2, [pc, #224]	@ (8011938 <_printf_float+0x2b8>)
 8011858:	2301      	movs	r3, #1
 801185a:	4631      	mov	r1, r6
 801185c:	4628      	mov	r0, r5
 801185e:	47b8      	blx	r7
 8011860:	3001      	adds	r0, #1
 8011862:	f43f af59 	beq.w	8011718 <_printf_float+0x98>
 8011866:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801186a:	4543      	cmp	r3, r8
 801186c:	db02      	blt.n	8011874 <_printf_float+0x1f4>
 801186e:	6823      	ldr	r3, [r4, #0]
 8011870:	07d8      	lsls	r0, r3, #31
 8011872:	d50f      	bpl.n	8011894 <_printf_float+0x214>
 8011874:	9b05      	ldr	r3, [sp, #20]
 8011876:	465a      	mov	r2, fp
 8011878:	4631      	mov	r1, r6
 801187a:	4628      	mov	r0, r5
 801187c:	47b8      	blx	r7
 801187e:	3001      	adds	r0, #1
 8011880:	f43f af4a 	beq.w	8011718 <_printf_float+0x98>
 8011884:	f04f 0900 	mov.w	r9, #0
 8011888:	f108 38ff 	add.w	r8, r8, #4294967295
 801188c:	f104 0a1a 	add.w	sl, r4, #26
 8011890:	45c8      	cmp	r8, r9
 8011892:	dc09      	bgt.n	80118a8 <_printf_float+0x228>
 8011894:	6823      	ldr	r3, [r4, #0]
 8011896:	079b      	lsls	r3, r3, #30
 8011898:	f100 8107 	bmi.w	8011aaa <_printf_float+0x42a>
 801189c:	68e0      	ldr	r0, [r4, #12]
 801189e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80118a0:	4298      	cmp	r0, r3
 80118a2:	bfb8      	it	lt
 80118a4:	4618      	movlt	r0, r3
 80118a6:	e739      	b.n	801171c <_printf_float+0x9c>
 80118a8:	2301      	movs	r3, #1
 80118aa:	4652      	mov	r2, sl
 80118ac:	4631      	mov	r1, r6
 80118ae:	4628      	mov	r0, r5
 80118b0:	47b8      	blx	r7
 80118b2:	3001      	adds	r0, #1
 80118b4:	f43f af30 	beq.w	8011718 <_printf_float+0x98>
 80118b8:	f109 0901 	add.w	r9, r9, #1
 80118bc:	e7e8      	b.n	8011890 <_printf_float+0x210>
 80118be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	dc3b      	bgt.n	801193c <_printf_float+0x2bc>
 80118c4:	4a1c      	ldr	r2, [pc, #112]	@ (8011938 <_printf_float+0x2b8>)
 80118c6:	2301      	movs	r3, #1
 80118c8:	4631      	mov	r1, r6
 80118ca:	4628      	mov	r0, r5
 80118cc:	47b8      	blx	r7
 80118ce:	3001      	adds	r0, #1
 80118d0:	f43f af22 	beq.w	8011718 <_printf_float+0x98>
 80118d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80118d8:	ea59 0303 	orrs.w	r3, r9, r3
 80118dc:	d102      	bne.n	80118e4 <_printf_float+0x264>
 80118de:	6823      	ldr	r3, [r4, #0]
 80118e0:	07d9      	lsls	r1, r3, #31
 80118e2:	d5d7      	bpl.n	8011894 <_printf_float+0x214>
 80118e4:	9b05      	ldr	r3, [sp, #20]
 80118e6:	465a      	mov	r2, fp
 80118e8:	4631      	mov	r1, r6
 80118ea:	4628      	mov	r0, r5
 80118ec:	47b8      	blx	r7
 80118ee:	3001      	adds	r0, #1
 80118f0:	f43f af12 	beq.w	8011718 <_printf_float+0x98>
 80118f4:	f04f 0a00 	mov.w	sl, #0
 80118f8:	f104 0b1a 	add.w	fp, r4, #26
 80118fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118fe:	425b      	negs	r3, r3
 8011900:	4553      	cmp	r3, sl
 8011902:	dc01      	bgt.n	8011908 <_printf_float+0x288>
 8011904:	464b      	mov	r3, r9
 8011906:	e794      	b.n	8011832 <_printf_float+0x1b2>
 8011908:	2301      	movs	r3, #1
 801190a:	465a      	mov	r2, fp
 801190c:	4631      	mov	r1, r6
 801190e:	4628      	mov	r0, r5
 8011910:	47b8      	blx	r7
 8011912:	3001      	adds	r0, #1
 8011914:	f43f af00 	beq.w	8011718 <_printf_float+0x98>
 8011918:	f10a 0a01 	add.w	sl, sl, #1
 801191c:	e7ee      	b.n	80118fc <_printf_float+0x27c>
 801191e:	bf00      	nop
 8011920:	ffffffff 	.word	0xffffffff
 8011924:	7fefffff 	.word	0x7fefffff
 8011928:	08013e24 	.word	0x08013e24
 801192c:	08013e28 	.word	0x08013e28
 8011930:	08013e2c 	.word	0x08013e2c
 8011934:	08013e30 	.word	0x08013e30
 8011938:	08013e34 	.word	0x08013e34
 801193c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801193e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011942:	4553      	cmp	r3, sl
 8011944:	bfa8      	it	ge
 8011946:	4653      	movge	r3, sl
 8011948:	2b00      	cmp	r3, #0
 801194a:	4699      	mov	r9, r3
 801194c:	dc37      	bgt.n	80119be <_printf_float+0x33e>
 801194e:	2300      	movs	r3, #0
 8011950:	9307      	str	r3, [sp, #28]
 8011952:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011956:	f104 021a 	add.w	r2, r4, #26
 801195a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801195c:	9907      	ldr	r1, [sp, #28]
 801195e:	9306      	str	r3, [sp, #24]
 8011960:	eba3 0309 	sub.w	r3, r3, r9
 8011964:	428b      	cmp	r3, r1
 8011966:	dc31      	bgt.n	80119cc <_printf_float+0x34c>
 8011968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801196a:	459a      	cmp	sl, r3
 801196c:	dc3b      	bgt.n	80119e6 <_printf_float+0x366>
 801196e:	6823      	ldr	r3, [r4, #0]
 8011970:	07da      	lsls	r2, r3, #31
 8011972:	d438      	bmi.n	80119e6 <_printf_float+0x366>
 8011974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011976:	ebaa 0903 	sub.w	r9, sl, r3
 801197a:	9b06      	ldr	r3, [sp, #24]
 801197c:	ebaa 0303 	sub.w	r3, sl, r3
 8011980:	4599      	cmp	r9, r3
 8011982:	bfa8      	it	ge
 8011984:	4699      	movge	r9, r3
 8011986:	f1b9 0f00 	cmp.w	r9, #0
 801198a:	dc34      	bgt.n	80119f6 <_printf_float+0x376>
 801198c:	f04f 0800 	mov.w	r8, #0
 8011990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011994:	f104 0b1a 	add.w	fp, r4, #26
 8011998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801199a:	ebaa 0303 	sub.w	r3, sl, r3
 801199e:	eba3 0309 	sub.w	r3, r3, r9
 80119a2:	4543      	cmp	r3, r8
 80119a4:	f77f af76 	ble.w	8011894 <_printf_float+0x214>
 80119a8:	2301      	movs	r3, #1
 80119aa:	465a      	mov	r2, fp
 80119ac:	4631      	mov	r1, r6
 80119ae:	4628      	mov	r0, r5
 80119b0:	47b8      	blx	r7
 80119b2:	3001      	adds	r0, #1
 80119b4:	f43f aeb0 	beq.w	8011718 <_printf_float+0x98>
 80119b8:	f108 0801 	add.w	r8, r8, #1
 80119bc:	e7ec      	b.n	8011998 <_printf_float+0x318>
 80119be:	4642      	mov	r2, r8
 80119c0:	4631      	mov	r1, r6
 80119c2:	4628      	mov	r0, r5
 80119c4:	47b8      	blx	r7
 80119c6:	3001      	adds	r0, #1
 80119c8:	d1c1      	bne.n	801194e <_printf_float+0x2ce>
 80119ca:	e6a5      	b.n	8011718 <_printf_float+0x98>
 80119cc:	2301      	movs	r3, #1
 80119ce:	4631      	mov	r1, r6
 80119d0:	4628      	mov	r0, r5
 80119d2:	9206      	str	r2, [sp, #24]
 80119d4:	47b8      	blx	r7
 80119d6:	3001      	adds	r0, #1
 80119d8:	f43f ae9e 	beq.w	8011718 <_printf_float+0x98>
 80119dc:	9b07      	ldr	r3, [sp, #28]
 80119de:	9a06      	ldr	r2, [sp, #24]
 80119e0:	3301      	adds	r3, #1
 80119e2:	9307      	str	r3, [sp, #28]
 80119e4:	e7b9      	b.n	801195a <_printf_float+0x2da>
 80119e6:	9b05      	ldr	r3, [sp, #20]
 80119e8:	465a      	mov	r2, fp
 80119ea:	4631      	mov	r1, r6
 80119ec:	4628      	mov	r0, r5
 80119ee:	47b8      	blx	r7
 80119f0:	3001      	adds	r0, #1
 80119f2:	d1bf      	bne.n	8011974 <_printf_float+0x2f4>
 80119f4:	e690      	b.n	8011718 <_printf_float+0x98>
 80119f6:	9a06      	ldr	r2, [sp, #24]
 80119f8:	464b      	mov	r3, r9
 80119fa:	4442      	add	r2, r8
 80119fc:	4631      	mov	r1, r6
 80119fe:	4628      	mov	r0, r5
 8011a00:	47b8      	blx	r7
 8011a02:	3001      	adds	r0, #1
 8011a04:	d1c2      	bne.n	801198c <_printf_float+0x30c>
 8011a06:	e687      	b.n	8011718 <_printf_float+0x98>
 8011a08:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011a0c:	f1b9 0f01 	cmp.w	r9, #1
 8011a10:	dc01      	bgt.n	8011a16 <_printf_float+0x396>
 8011a12:	07db      	lsls	r3, r3, #31
 8011a14:	d536      	bpl.n	8011a84 <_printf_float+0x404>
 8011a16:	2301      	movs	r3, #1
 8011a18:	4642      	mov	r2, r8
 8011a1a:	4631      	mov	r1, r6
 8011a1c:	4628      	mov	r0, r5
 8011a1e:	47b8      	blx	r7
 8011a20:	3001      	adds	r0, #1
 8011a22:	f43f ae79 	beq.w	8011718 <_printf_float+0x98>
 8011a26:	9b05      	ldr	r3, [sp, #20]
 8011a28:	465a      	mov	r2, fp
 8011a2a:	4631      	mov	r1, r6
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	47b8      	blx	r7
 8011a30:	3001      	adds	r0, #1
 8011a32:	f43f ae71 	beq.w	8011718 <_printf_float+0x98>
 8011a36:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011a3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a42:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a46:	d018      	beq.n	8011a7a <_printf_float+0x3fa>
 8011a48:	464b      	mov	r3, r9
 8011a4a:	f108 0201 	add.w	r2, r8, #1
 8011a4e:	4631      	mov	r1, r6
 8011a50:	4628      	mov	r0, r5
 8011a52:	47b8      	blx	r7
 8011a54:	3001      	adds	r0, #1
 8011a56:	d10c      	bne.n	8011a72 <_printf_float+0x3f2>
 8011a58:	e65e      	b.n	8011718 <_printf_float+0x98>
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	465a      	mov	r2, fp
 8011a5e:	4631      	mov	r1, r6
 8011a60:	4628      	mov	r0, r5
 8011a62:	47b8      	blx	r7
 8011a64:	3001      	adds	r0, #1
 8011a66:	f43f ae57 	beq.w	8011718 <_printf_float+0x98>
 8011a6a:	f108 0801 	add.w	r8, r8, #1
 8011a6e:	45c8      	cmp	r8, r9
 8011a70:	dbf3      	blt.n	8011a5a <_printf_float+0x3da>
 8011a72:	4653      	mov	r3, sl
 8011a74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011a78:	e6dc      	b.n	8011834 <_printf_float+0x1b4>
 8011a7a:	f04f 0800 	mov.w	r8, #0
 8011a7e:	f104 0b1a 	add.w	fp, r4, #26
 8011a82:	e7f4      	b.n	8011a6e <_printf_float+0x3ee>
 8011a84:	2301      	movs	r3, #1
 8011a86:	4642      	mov	r2, r8
 8011a88:	e7e1      	b.n	8011a4e <_printf_float+0x3ce>
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	464a      	mov	r2, r9
 8011a8e:	4631      	mov	r1, r6
 8011a90:	4628      	mov	r0, r5
 8011a92:	47b8      	blx	r7
 8011a94:	3001      	adds	r0, #1
 8011a96:	f43f ae3f 	beq.w	8011718 <_printf_float+0x98>
 8011a9a:	f108 0801 	add.w	r8, r8, #1
 8011a9e:	68e3      	ldr	r3, [r4, #12]
 8011aa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011aa2:	1a5b      	subs	r3, r3, r1
 8011aa4:	4543      	cmp	r3, r8
 8011aa6:	dcf0      	bgt.n	8011a8a <_printf_float+0x40a>
 8011aa8:	e6f8      	b.n	801189c <_printf_float+0x21c>
 8011aaa:	f04f 0800 	mov.w	r8, #0
 8011aae:	f104 0919 	add.w	r9, r4, #25
 8011ab2:	e7f4      	b.n	8011a9e <_printf_float+0x41e>

08011ab4 <_printf_common>:
 8011ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ab8:	4616      	mov	r6, r2
 8011aba:	4698      	mov	r8, r3
 8011abc:	688a      	ldr	r2, [r1, #8]
 8011abe:	690b      	ldr	r3, [r1, #16]
 8011ac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	bfb8      	it	lt
 8011ac8:	4613      	movlt	r3, r2
 8011aca:	6033      	str	r3, [r6, #0]
 8011acc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011ad0:	4607      	mov	r7, r0
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	b10a      	cbz	r2, 8011ada <_printf_common+0x26>
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	6033      	str	r3, [r6, #0]
 8011ada:	6823      	ldr	r3, [r4, #0]
 8011adc:	0699      	lsls	r1, r3, #26
 8011ade:	bf42      	ittt	mi
 8011ae0:	6833      	ldrmi	r3, [r6, #0]
 8011ae2:	3302      	addmi	r3, #2
 8011ae4:	6033      	strmi	r3, [r6, #0]
 8011ae6:	6825      	ldr	r5, [r4, #0]
 8011ae8:	f015 0506 	ands.w	r5, r5, #6
 8011aec:	d106      	bne.n	8011afc <_printf_common+0x48>
 8011aee:	f104 0a19 	add.w	sl, r4, #25
 8011af2:	68e3      	ldr	r3, [r4, #12]
 8011af4:	6832      	ldr	r2, [r6, #0]
 8011af6:	1a9b      	subs	r3, r3, r2
 8011af8:	42ab      	cmp	r3, r5
 8011afa:	dc26      	bgt.n	8011b4a <_printf_common+0x96>
 8011afc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011b00:	6822      	ldr	r2, [r4, #0]
 8011b02:	3b00      	subs	r3, #0
 8011b04:	bf18      	it	ne
 8011b06:	2301      	movne	r3, #1
 8011b08:	0692      	lsls	r2, r2, #26
 8011b0a:	d42b      	bmi.n	8011b64 <_printf_common+0xb0>
 8011b0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011b10:	4641      	mov	r1, r8
 8011b12:	4638      	mov	r0, r7
 8011b14:	47c8      	blx	r9
 8011b16:	3001      	adds	r0, #1
 8011b18:	d01e      	beq.n	8011b58 <_printf_common+0xa4>
 8011b1a:	6823      	ldr	r3, [r4, #0]
 8011b1c:	6922      	ldr	r2, [r4, #16]
 8011b1e:	f003 0306 	and.w	r3, r3, #6
 8011b22:	2b04      	cmp	r3, #4
 8011b24:	bf02      	ittt	eq
 8011b26:	68e5      	ldreq	r5, [r4, #12]
 8011b28:	6833      	ldreq	r3, [r6, #0]
 8011b2a:	1aed      	subeq	r5, r5, r3
 8011b2c:	68a3      	ldr	r3, [r4, #8]
 8011b2e:	bf0c      	ite	eq
 8011b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b34:	2500      	movne	r5, #0
 8011b36:	4293      	cmp	r3, r2
 8011b38:	bfc4      	itt	gt
 8011b3a:	1a9b      	subgt	r3, r3, r2
 8011b3c:	18ed      	addgt	r5, r5, r3
 8011b3e:	2600      	movs	r6, #0
 8011b40:	341a      	adds	r4, #26
 8011b42:	42b5      	cmp	r5, r6
 8011b44:	d11a      	bne.n	8011b7c <_printf_common+0xc8>
 8011b46:	2000      	movs	r0, #0
 8011b48:	e008      	b.n	8011b5c <_printf_common+0xa8>
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	4652      	mov	r2, sl
 8011b4e:	4641      	mov	r1, r8
 8011b50:	4638      	mov	r0, r7
 8011b52:	47c8      	blx	r9
 8011b54:	3001      	adds	r0, #1
 8011b56:	d103      	bne.n	8011b60 <_printf_common+0xac>
 8011b58:	f04f 30ff 	mov.w	r0, #4294967295
 8011b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b60:	3501      	adds	r5, #1
 8011b62:	e7c6      	b.n	8011af2 <_printf_common+0x3e>
 8011b64:	18e1      	adds	r1, r4, r3
 8011b66:	1c5a      	adds	r2, r3, #1
 8011b68:	2030      	movs	r0, #48	@ 0x30
 8011b6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011b6e:	4422      	add	r2, r4
 8011b70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011b74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011b78:	3302      	adds	r3, #2
 8011b7a:	e7c7      	b.n	8011b0c <_printf_common+0x58>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	4622      	mov	r2, r4
 8011b80:	4641      	mov	r1, r8
 8011b82:	4638      	mov	r0, r7
 8011b84:	47c8      	blx	r9
 8011b86:	3001      	adds	r0, #1
 8011b88:	d0e6      	beq.n	8011b58 <_printf_common+0xa4>
 8011b8a:	3601      	adds	r6, #1
 8011b8c:	e7d9      	b.n	8011b42 <_printf_common+0x8e>
	...

08011b90 <_printf_i>:
 8011b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b94:	7e0f      	ldrb	r7, [r1, #24]
 8011b96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011b98:	2f78      	cmp	r7, #120	@ 0x78
 8011b9a:	4691      	mov	r9, r2
 8011b9c:	4680      	mov	r8, r0
 8011b9e:	460c      	mov	r4, r1
 8011ba0:	469a      	mov	sl, r3
 8011ba2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011ba6:	d807      	bhi.n	8011bb8 <_printf_i+0x28>
 8011ba8:	2f62      	cmp	r7, #98	@ 0x62
 8011baa:	d80a      	bhi.n	8011bc2 <_printf_i+0x32>
 8011bac:	2f00      	cmp	r7, #0
 8011bae:	f000 80d2 	beq.w	8011d56 <_printf_i+0x1c6>
 8011bb2:	2f58      	cmp	r7, #88	@ 0x58
 8011bb4:	f000 80b9 	beq.w	8011d2a <_printf_i+0x19a>
 8011bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011bbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011bc0:	e03a      	b.n	8011c38 <_printf_i+0xa8>
 8011bc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011bc6:	2b15      	cmp	r3, #21
 8011bc8:	d8f6      	bhi.n	8011bb8 <_printf_i+0x28>
 8011bca:	a101      	add	r1, pc, #4	@ (adr r1, 8011bd0 <_printf_i+0x40>)
 8011bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011bd0:	08011c29 	.word	0x08011c29
 8011bd4:	08011c3d 	.word	0x08011c3d
 8011bd8:	08011bb9 	.word	0x08011bb9
 8011bdc:	08011bb9 	.word	0x08011bb9
 8011be0:	08011bb9 	.word	0x08011bb9
 8011be4:	08011bb9 	.word	0x08011bb9
 8011be8:	08011c3d 	.word	0x08011c3d
 8011bec:	08011bb9 	.word	0x08011bb9
 8011bf0:	08011bb9 	.word	0x08011bb9
 8011bf4:	08011bb9 	.word	0x08011bb9
 8011bf8:	08011bb9 	.word	0x08011bb9
 8011bfc:	08011d3d 	.word	0x08011d3d
 8011c00:	08011c67 	.word	0x08011c67
 8011c04:	08011cf7 	.word	0x08011cf7
 8011c08:	08011bb9 	.word	0x08011bb9
 8011c0c:	08011bb9 	.word	0x08011bb9
 8011c10:	08011d5f 	.word	0x08011d5f
 8011c14:	08011bb9 	.word	0x08011bb9
 8011c18:	08011c67 	.word	0x08011c67
 8011c1c:	08011bb9 	.word	0x08011bb9
 8011c20:	08011bb9 	.word	0x08011bb9
 8011c24:	08011cff 	.word	0x08011cff
 8011c28:	6833      	ldr	r3, [r6, #0]
 8011c2a:	1d1a      	adds	r2, r3, #4
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	6032      	str	r2, [r6, #0]
 8011c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011c38:	2301      	movs	r3, #1
 8011c3a:	e09d      	b.n	8011d78 <_printf_i+0x1e8>
 8011c3c:	6833      	ldr	r3, [r6, #0]
 8011c3e:	6820      	ldr	r0, [r4, #0]
 8011c40:	1d19      	adds	r1, r3, #4
 8011c42:	6031      	str	r1, [r6, #0]
 8011c44:	0606      	lsls	r6, r0, #24
 8011c46:	d501      	bpl.n	8011c4c <_printf_i+0xbc>
 8011c48:	681d      	ldr	r5, [r3, #0]
 8011c4a:	e003      	b.n	8011c54 <_printf_i+0xc4>
 8011c4c:	0645      	lsls	r5, r0, #25
 8011c4e:	d5fb      	bpl.n	8011c48 <_printf_i+0xb8>
 8011c50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011c54:	2d00      	cmp	r5, #0
 8011c56:	da03      	bge.n	8011c60 <_printf_i+0xd0>
 8011c58:	232d      	movs	r3, #45	@ 0x2d
 8011c5a:	426d      	negs	r5, r5
 8011c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c60:	4859      	ldr	r0, [pc, #356]	@ (8011dc8 <_printf_i+0x238>)
 8011c62:	230a      	movs	r3, #10
 8011c64:	e011      	b.n	8011c8a <_printf_i+0xfa>
 8011c66:	6821      	ldr	r1, [r4, #0]
 8011c68:	6833      	ldr	r3, [r6, #0]
 8011c6a:	0608      	lsls	r0, r1, #24
 8011c6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011c70:	d402      	bmi.n	8011c78 <_printf_i+0xe8>
 8011c72:	0649      	lsls	r1, r1, #25
 8011c74:	bf48      	it	mi
 8011c76:	b2ad      	uxthmi	r5, r5
 8011c78:	2f6f      	cmp	r7, #111	@ 0x6f
 8011c7a:	4853      	ldr	r0, [pc, #332]	@ (8011dc8 <_printf_i+0x238>)
 8011c7c:	6033      	str	r3, [r6, #0]
 8011c7e:	bf14      	ite	ne
 8011c80:	230a      	movne	r3, #10
 8011c82:	2308      	moveq	r3, #8
 8011c84:	2100      	movs	r1, #0
 8011c86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011c8a:	6866      	ldr	r6, [r4, #4]
 8011c8c:	60a6      	str	r6, [r4, #8]
 8011c8e:	2e00      	cmp	r6, #0
 8011c90:	bfa2      	ittt	ge
 8011c92:	6821      	ldrge	r1, [r4, #0]
 8011c94:	f021 0104 	bicge.w	r1, r1, #4
 8011c98:	6021      	strge	r1, [r4, #0]
 8011c9a:	b90d      	cbnz	r5, 8011ca0 <_printf_i+0x110>
 8011c9c:	2e00      	cmp	r6, #0
 8011c9e:	d04b      	beq.n	8011d38 <_printf_i+0x1a8>
 8011ca0:	4616      	mov	r6, r2
 8011ca2:	fbb5 f1f3 	udiv	r1, r5, r3
 8011ca6:	fb03 5711 	mls	r7, r3, r1, r5
 8011caa:	5dc7      	ldrb	r7, [r0, r7]
 8011cac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011cb0:	462f      	mov	r7, r5
 8011cb2:	42bb      	cmp	r3, r7
 8011cb4:	460d      	mov	r5, r1
 8011cb6:	d9f4      	bls.n	8011ca2 <_printf_i+0x112>
 8011cb8:	2b08      	cmp	r3, #8
 8011cba:	d10b      	bne.n	8011cd4 <_printf_i+0x144>
 8011cbc:	6823      	ldr	r3, [r4, #0]
 8011cbe:	07df      	lsls	r7, r3, #31
 8011cc0:	d508      	bpl.n	8011cd4 <_printf_i+0x144>
 8011cc2:	6923      	ldr	r3, [r4, #16]
 8011cc4:	6861      	ldr	r1, [r4, #4]
 8011cc6:	4299      	cmp	r1, r3
 8011cc8:	bfde      	ittt	le
 8011cca:	2330      	movle	r3, #48	@ 0x30
 8011ccc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011cd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011cd4:	1b92      	subs	r2, r2, r6
 8011cd6:	6122      	str	r2, [r4, #16]
 8011cd8:	f8cd a000 	str.w	sl, [sp]
 8011cdc:	464b      	mov	r3, r9
 8011cde:	aa03      	add	r2, sp, #12
 8011ce0:	4621      	mov	r1, r4
 8011ce2:	4640      	mov	r0, r8
 8011ce4:	f7ff fee6 	bl	8011ab4 <_printf_common>
 8011ce8:	3001      	adds	r0, #1
 8011cea:	d14a      	bne.n	8011d82 <_printf_i+0x1f2>
 8011cec:	f04f 30ff 	mov.w	r0, #4294967295
 8011cf0:	b004      	add	sp, #16
 8011cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cf6:	6823      	ldr	r3, [r4, #0]
 8011cf8:	f043 0320 	orr.w	r3, r3, #32
 8011cfc:	6023      	str	r3, [r4, #0]
 8011cfe:	4833      	ldr	r0, [pc, #204]	@ (8011dcc <_printf_i+0x23c>)
 8011d00:	2778      	movs	r7, #120	@ 0x78
 8011d02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011d06:	6823      	ldr	r3, [r4, #0]
 8011d08:	6831      	ldr	r1, [r6, #0]
 8011d0a:	061f      	lsls	r7, r3, #24
 8011d0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011d10:	d402      	bmi.n	8011d18 <_printf_i+0x188>
 8011d12:	065f      	lsls	r7, r3, #25
 8011d14:	bf48      	it	mi
 8011d16:	b2ad      	uxthmi	r5, r5
 8011d18:	6031      	str	r1, [r6, #0]
 8011d1a:	07d9      	lsls	r1, r3, #31
 8011d1c:	bf44      	itt	mi
 8011d1e:	f043 0320 	orrmi.w	r3, r3, #32
 8011d22:	6023      	strmi	r3, [r4, #0]
 8011d24:	b11d      	cbz	r5, 8011d2e <_printf_i+0x19e>
 8011d26:	2310      	movs	r3, #16
 8011d28:	e7ac      	b.n	8011c84 <_printf_i+0xf4>
 8011d2a:	4827      	ldr	r0, [pc, #156]	@ (8011dc8 <_printf_i+0x238>)
 8011d2c:	e7e9      	b.n	8011d02 <_printf_i+0x172>
 8011d2e:	6823      	ldr	r3, [r4, #0]
 8011d30:	f023 0320 	bic.w	r3, r3, #32
 8011d34:	6023      	str	r3, [r4, #0]
 8011d36:	e7f6      	b.n	8011d26 <_printf_i+0x196>
 8011d38:	4616      	mov	r6, r2
 8011d3a:	e7bd      	b.n	8011cb8 <_printf_i+0x128>
 8011d3c:	6833      	ldr	r3, [r6, #0]
 8011d3e:	6825      	ldr	r5, [r4, #0]
 8011d40:	6961      	ldr	r1, [r4, #20]
 8011d42:	1d18      	adds	r0, r3, #4
 8011d44:	6030      	str	r0, [r6, #0]
 8011d46:	062e      	lsls	r6, r5, #24
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	d501      	bpl.n	8011d50 <_printf_i+0x1c0>
 8011d4c:	6019      	str	r1, [r3, #0]
 8011d4e:	e002      	b.n	8011d56 <_printf_i+0x1c6>
 8011d50:	0668      	lsls	r0, r5, #25
 8011d52:	d5fb      	bpl.n	8011d4c <_printf_i+0x1bc>
 8011d54:	8019      	strh	r1, [r3, #0]
 8011d56:	2300      	movs	r3, #0
 8011d58:	6123      	str	r3, [r4, #16]
 8011d5a:	4616      	mov	r6, r2
 8011d5c:	e7bc      	b.n	8011cd8 <_printf_i+0x148>
 8011d5e:	6833      	ldr	r3, [r6, #0]
 8011d60:	1d1a      	adds	r2, r3, #4
 8011d62:	6032      	str	r2, [r6, #0]
 8011d64:	681e      	ldr	r6, [r3, #0]
 8011d66:	6862      	ldr	r2, [r4, #4]
 8011d68:	2100      	movs	r1, #0
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	f7ee fab8 	bl	80002e0 <memchr>
 8011d70:	b108      	cbz	r0, 8011d76 <_printf_i+0x1e6>
 8011d72:	1b80      	subs	r0, r0, r6
 8011d74:	6060      	str	r0, [r4, #4]
 8011d76:	6863      	ldr	r3, [r4, #4]
 8011d78:	6123      	str	r3, [r4, #16]
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d80:	e7aa      	b.n	8011cd8 <_printf_i+0x148>
 8011d82:	6923      	ldr	r3, [r4, #16]
 8011d84:	4632      	mov	r2, r6
 8011d86:	4649      	mov	r1, r9
 8011d88:	4640      	mov	r0, r8
 8011d8a:	47d0      	blx	sl
 8011d8c:	3001      	adds	r0, #1
 8011d8e:	d0ad      	beq.n	8011cec <_printf_i+0x15c>
 8011d90:	6823      	ldr	r3, [r4, #0]
 8011d92:	079b      	lsls	r3, r3, #30
 8011d94:	d413      	bmi.n	8011dbe <_printf_i+0x22e>
 8011d96:	68e0      	ldr	r0, [r4, #12]
 8011d98:	9b03      	ldr	r3, [sp, #12]
 8011d9a:	4298      	cmp	r0, r3
 8011d9c:	bfb8      	it	lt
 8011d9e:	4618      	movlt	r0, r3
 8011da0:	e7a6      	b.n	8011cf0 <_printf_i+0x160>
 8011da2:	2301      	movs	r3, #1
 8011da4:	4632      	mov	r2, r6
 8011da6:	4649      	mov	r1, r9
 8011da8:	4640      	mov	r0, r8
 8011daa:	47d0      	blx	sl
 8011dac:	3001      	adds	r0, #1
 8011dae:	d09d      	beq.n	8011cec <_printf_i+0x15c>
 8011db0:	3501      	adds	r5, #1
 8011db2:	68e3      	ldr	r3, [r4, #12]
 8011db4:	9903      	ldr	r1, [sp, #12]
 8011db6:	1a5b      	subs	r3, r3, r1
 8011db8:	42ab      	cmp	r3, r5
 8011dba:	dcf2      	bgt.n	8011da2 <_printf_i+0x212>
 8011dbc:	e7eb      	b.n	8011d96 <_printf_i+0x206>
 8011dbe:	2500      	movs	r5, #0
 8011dc0:	f104 0619 	add.w	r6, r4, #25
 8011dc4:	e7f5      	b.n	8011db2 <_printf_i+0x222>
 8011dc6:	bf00      	nop
 8011dc8:	08013e36 	.word	0x08013e36
 8011dcc:	08013e47 	.word	0x08013e47

08011dd0 <std>:
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	b510      	push	{r4, lr}
 8011dd4:	4604      	mov	r4, r0
 8011dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8011dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011dde:	6083      	str	r3, [r0, #8]
 8011de0:	8181      	strh	r1, [r0, #12]
 8011de2:	6643      	str	r3, [r0, #100]	@ 0x64
 8011de4:	81c2      	strh	r2, [r0, #14]
 8011de6:	6183      	str	r3, [r0, #24]
 8011de8:	4619      	mov	r1, r3
 8011dea:	2208      	movs	r2, #8
 8011dec:	305c      	adds	r0, #92	@ 0x5c
 8011dee:	f000 f989 	bl	8012104 <memset>
 8011df2:	4b0d      	ldr	r3, [pc, #52]	@ (8011e28 <std+0x58>)
 8011df4:	6263      	str	r3, [r4, #36]	@ 0x24
 8011df6:	4b0d      	ldr	r3, [pc, #52]	@ (8011e2c <std+0x5c>)
 8011df8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8011e30 <std+0x60>)
 8011dfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8011e34 <std+0x64>)
 8011e00:	6323      	str	r3, [r4, #48]	@ 0x30
 8011e02:	4b0d      	ldr	r3, [pc, #52]	@ (8011e38 <std+0x68>)
 8011e04:	6224      	str	r4, [r4, #32]
 8011e06:	429c      	cmp	r4, r3
 8011e08:	d006      	beq.n	8011e18 <std+0x48>
 8011e0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011e0e:	4294      	cmp	r4, r2
 8011e10:	d002      	beq.n	8011e18 <std+0x48>
 8011e12:	33d0      	adds	r3, #208	@ 0xd0
 8011e14:	429c      	cmp	r4, r3
 8011e16:	d105      	bne.n	8011e24 <std+0x54>
 8011e18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e20:	f000 b9ec 	b.w	80121fc <__retarget_lock_init_recursive>
 8011e24:	bd10      	pop	{r4, pc}
 8011e26:	bf00      	nop
 8011e28:	08011f55 	.word	0x08011f55
 8011e2c:	08011f77 	.word	0x08011f77
 8011e30:	08011faf 	.word	0x08011faf
 8011e34:	08011fd3 	.word	0x08011fd3
 8011e38:	240012bc 	.word	0x240012bc

08011e3c <stdio_exit_handler>:
 8011e3c:	4a02      	ldr	r2, [pc, #8]	@ (8011e48 <stdio_exit_handler+0xc>)
 8011e3e:	4903      	ldr	r1, [pc, #12]	@ (8011e4c <stdio_exit_handler+0x10>)
 8011e40:	4803      	ldr	r0, [pc, #12]	@ (8011e50 <stdio_exit_handler+0x14>)
 8011e42:	f000 b869 	b.w	8011f18 <_fwalk_sglue>
 8011e46:	bf00      	nop
 8011e48:	24000104 	.word	0x24000104
 8011e4c:	08013a55 	.word	0x08013a55
 8011e50:	24000114 	.word	0x24000114

08011e54 <cleanup_stdio>:
 8011e54:	6841      	ldr	r1, [r0, #4]
 8011e56:	4b0c      	ldr	r3, [pc, #48]	@ (8011e88 <cleanup_stdio+0x34>)
 8011e58:	4299      	cmp	r1, r3
 8011e5a:	b510      	push	{r4, lr}
 8011e5c:	4604      	mov	r4, r0
 8011e5e:	d001      	beq.n	8011e64 <cleanup_stdio+0x10>
 8011e60:	f001 fdf8 	bl	8013a54 <_fflush_r>
 8011e64:	68a1      	ldr	r1, [r4, #8]
 8011e66:	4b09      	ldr	r3, [pc, #36]	@ (8011e8c <cleanup_stdio+0x38>)
 8011e68:	4299      	cmp	r1, r3
 8011e6a:	d002      	beq.n	8011e72 <cleanup_stdio+0x1e>
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f001 fdf1 	bl	8013a54 <_fflush_r>
 8011e72:	68e1      	ldr	r1, [r4, #12]
 8011e74:	4b06      	ldr	r3, [pc, #24]	@ (8011e90 <cleanup_stdio+0x3c>)
 8011e76:	4299      	cmp	r1, r3
 8011e78:	d004      	beq.n	8011e84 <cleanup_stdio+0x30>
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e80:	f001 bde8 	b.w	8013a54 <_fflush_r>
 8011e84:	bd10      	pop	{r4, pc}
 8011e86:	bf00      	nop
 8011e88:	240012bc 	.word	0x240012bc
 8011e8c:	24001324 	.word	0x24001324
 8011e90:	2400138c 	.word	0x2400138c

08011e94 <global_stdio_init.part.0>:
 8011e94:	b510      	push	{r4, lr}
 8011e96:	4b0b      	ldr	r3, [pc, #44]	@ (8011ec4 <global_stdio_init.part.0+0x30>)
 8011e98:	4c0b      	ldr	r4, [pc, #44]	@ (8011ec8 <global_stdio_init.part.0+0x34>)
 8011e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8011ecc <global_stdio_init.part.0+0x38>)
 8011e9c:	601a      	str	r2, [r3, #0]
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	2104      	movs	r1, #4
 8011ea4:	f7ff ff94 	bl	8011dd0 <std>
 8011ea8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011eac:	2201      	movs	r2, #1
 8011eae:	2109      	movs	r1, #9
 8011eb0:	f7ff ff8e 	bl	8011dd0 <std>
 8011eb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011eb8:	2202      	movs	r2, #2
 8011eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ebe:	2112      	movs	r1, #18
 8011ec0:	f7ff bf86 	b.w	8011dd0 <std>
 8011ec4:	240013f4 	.word	0x240013f4
 8011ec8:	240012bc 	.word	0x240012bc
 8011ecc:	08011e3d 	.word	0x08011e3d

08011ed0 <__sfp_lock_acquire>:
 8011ed0:	4801      	ldr	r0, [pc, #4]	@ (8011ed8 <__sfp_lock_acquire+0x8>)
 8011ed2:	f000 b994 	b.w	80121fe <__retarget_lock_acquire_recursive>
 8011ed6:	bf00      	nop
 8011ed8:	240013fd 	.word	0x240013fd

08011edc <__sfp_lock_release>:
 8011edc:	4801      	ldr	r0, [pc, #4]	@ (8011ee4 <__sfp_lock_release+0x8>)
 8011ede:	f000 b98f 	b.w	8012200 <__retarget_lock_release_recursive>
 8011ee2:	bf00      	nop
 8011ee4:	240013fd 	.word	0x240013fd

08011ee8 <__sinit>:
 8011ee8:	b510      	push	{r4, lr}
 8011eea:	4604      	mov	r4, r0
 8011eec:	f7ff fff0 	bl	8011ed0 <__sfp_lock_acquire>
 8011ef0:	6a23      	ldr	r3, [r4, #32]
 8011ef2:	b11b      	cbz	r3, 8011efc <__sinit+0x14>
 8011ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ef8:	f7ff bff0 	b.w	8011edc <__sfp_lock_release>
 8011efc:	4b04      	ldr	r3, [pc, #16]	@ (8011f10 <__sinit+0x28>)
 8011efe:	6223      	str	r3, [r4, #32]
 8011f00:	4b04      	ldr	r3, [pc, #16]	@ (8011f14 <__sinit+0x2c>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d1f5      	bne.n	8011ef4 <__sinit+0xc>
 8011f08:	f7ff ffc4 	bl	8011e94 <global_stdio_init.part.0>
 8011f0c:	e7f2      	b.n	8011ef4 <__sinit+0xc>
 8011f0e:	bf00      	nop
 8011f10:	08011e55 	.word	0x08011e55
 8011f14:	240013f4 	.word	0x240013f4

08011f18 <_fwalk_sglue>:
 8011f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f1c:	4607      	mov	r7, r0
 8011f1e:	4688      	mov	r8, r1
 8011f20:	4614      	mov	r4, r2
 8011f22:	2600      	movs	r6, #0
 8011f24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011f28:	f1b9 0901 	subs.w	r9, r9, #1
 8011f2c:	d505      	bpl.n	8011f3a <_fwalk_sglue+0x22>
 8011f2e:	6824      	ldr	r4, [r4, #0]
 8011f30:	2c00      	cmp	r4, #0
 8011f32:	d1f7      	bne.n	8011f24 <_fwalk_sglue+0xc>
 8011f34:	4630      	mov	r0, r6
 8011f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f3a:	89ab      	ldrh	r3, [r5, #12]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d907      	bls.n	8011f50 <_fwalk_sglue+0x38>
 8011f40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f44:	3301      	adds	r3, #1
 8011f46:	d003      	beq.n	8011f50 <_fwalk_sglue+0x38>
 8011f48:	4629      	mov	r1, r5
 8011f4a:	4638      	mov	r0, r7
 8011f4c:	47c0      	blx	r8
 8011f4e:	4306      	orrs	r6, r0
 8011f50:	3568      	adds	r5, #104	@ 0x68
 8011f52:	e7e9      	b.n	8011f28 <_fwalk_sglue+0x10>

08011f54 <__sread>:
 8011f54:	b510      	push	{r4, lr}
 8011f56:	460c      	mov	r4, r1
 8011f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f5c:	f000 f900 	bl	8012160 <_read_r>
 8011f60:	2800      	cmp	r0, #0
 8011f62:	bfab      	itete	ge
 8011f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011f66:	89a3      	ldrhlt	r3, [r4, #12]
 8011f68:	181b      	addge	r3, r3, r0
 8011f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011f6e:	bfac      	ite	ge
 8011f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011f72:	81a3      	strhlt	r3, [r4, #12]
 8011f74:	bd10      	pop	{r4, pc}

08011f76 <__swrite>:
 8011f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f7a:	461f      	mov	r7, r3
 8011f7c:	898b      	ldrh	r3, [r1, #12]
 8011f7e:	05db      	lsls	r3, r3, #23
 8011f80:	4605      	mov	r5, r0
 8011f82:	460c      	mov	r4, r1
 8011f84:	4616      	mov	r6, r2
 8011f86:	d505      	bpl.n	8011f94 <__swrite+0x1e>
 8011f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f8c:	2302      	movs	r3, #2
 8011f8e:	2200      	movs	r2, #0
 8011f90:	f000 f8d4 	bl	801213c <_lseek_r>
 8011f94:	89a3      	ldrh	r3, [r4, #12]
 8011f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011f9e:	81a3      	strh	r3, [r4, #12]
 8011fa0:	4632      	mov	r2, r6
 8011fa2:	463b      	mov	r3, r7
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011faa:	f000 b8eb 	b.w	8012184 <_write_r>

08011fae <__sseek>:
 8011fae:	b510      	push	{r4, lr}
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fb6:	f000 f8c1 	bl	801213c <_lseek_r>
 8011fba:	1c43      	adds	r3, r0, #1
 8011fbc:	89a3      	ldrh	r3, [r4, #12]
 8011fbe:	bf15      	itete	ne
 8011fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011fca:	81a3      	strheq	r3, [r4, #12]
 8011fcc:	bf18      	it	ne
 8011fce:	81a3      	strhne	r3, [r4, #12]
 8011fd0:	bd10      	pop	{r4, pc}

08011fd2 <__sclose>:
 8011fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fd6:	f000 b8a1 	b.w	801211c <_close_r>

08011fda <__swbuf_r>:
 8011fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fdc:	460e      	mov	r6, r1
 8011fde:	4614      	mov	r4, r2
 8011fe0:	4605      	mov	r5, r0
 8011fe2:	b118      	cbz	r0, 8011fec <__swbuf_r+0x12>
 8011fe4:	6a03      	ldr	r3, [r0, #32]
 8011fe6:	b90b      	cbnz	r3, 8011fec <__swbuf_r+0x12>
 8011fe8:	f7ff ff7e 	bl	8011ee8 <__sinit>
 8011fec:	69a3      	ldr	r3, [r4, #24]
 8011fee:	60a3      	str	r3, [r4, #8]
 8011ff0:	89a3      	ldrh	r3, [r4, #12]
 8011ff2:	071a      	lsls	r2, r3, #28
 8011ff4:	d501      	bpl.n	8011ffa <__swbuf_r+0x20>
 8011ff6:	6923      	ldr	r3, [r4, #16]
 8011ff8:	b943      	cbnz	r3, 801200c <__swbuf_r+0x32>
 8011ffa:	4621      	mov	r1, r4
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	f000 f82b 	bl	8012058 <__swsetup_r>
 8012002:	b118      	cbz	r0, 801200c <__swbuf_r+0x32>
 8012004:	f04f 37ff 	mov.w	r7, #4294967295
 8012008:	4638      	mov	r0, r7
 801200a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801200c:	6823      	ldr	r3, [r4, #0]
 801200e:	6922      	ldr	r2, [r4, #16]
 8012010:	1a98      	subs	r0, r3, r2
 8012012:	6963      	ldr	r3, [r4, #20]
 8012014:	b2f6      	uxtb	r6, r6
 8012016:	4283      	cmp	r3, r0
 8012018:	4637      	mov	r7, r6
 801201a:	dc05      	bgt.n	8012028 <__swbuf_r+0x4e>
 801201c:	4621      	mov	r1, r4
 801201e:	4628      	mov	r0, r5
 8012020:	f001 fd18 	bl	8013a54 <_fflush_r>
 8012024:	2800      	cmp	r0, #0
 8012026:	d1ed      	bne.n	8012004 <__swbuf_r+0x2a>
 8012028:	68a3      	ldr	r3, [r4, #8]
 801202a:	3b01      	subs	r3, #1
 801202c:	60a3      	str	r3, [r4, #8]
 801202e:	6823      	ldr	r3, [r4, #0]
 8012030:	1c5a      	adds	r2, r3, #1
 8012032:	6022      	str	r2, [r4, #0]
 8012034:	701e      	strb	r6, [r3, #0]
 8012036:	6962      	ldr	r2, [r4, #20]
 8012038:	1c43      	adds	r3, r0, #1
 801203a:	429a      	cmp	r2, r3
 801203c:	d004      	beq.n	8012048 <__swbuf_r+0x6e>
 801203e:	89a3      	ldrh	r3, [r4, #12]
 8012040:	07db      	lsls	r3, r3, #31
 8012042:	d5e1      	bpl.n	8012008 <__swbuf_r+0x2e>
 8012044:	2e0a      	cmp	r6, #10
 8012046:	d1df      	bne.n	8012008 <__swbuf_r+0x2e>
 8012048:	4621      	mov	r1, r4
 801204a:	4628      	mov	r0, r5
 801204c:	f001 fd02 	bl	8013a54 <_fflush_r>
 8012050:	2800      	cmp	r0, #0
 8012052:	d0d9      	beq.n	8012008 <__swbuf_r+0x2e>
 8012054:	e7d6      	b.n	8012004 <__swbuf_r+0x2a>
	...

08012058 <__swsetup_r>:
 8012058:	b538      	push	{r3, r4, r5, lr}
 801205a:	4b29      	ldr	r3, [pc, #164]	@ (8012100 <__swsetup_r+0xa8>)
 801205c:	4605      	mov	r5, r0
 801205e:	6818      	ldr	r0, [r3, #0]
 8012060:	460c      	mov	r4, r1
 8012062:	b118      	cbz	r0, 801206c <__swsetup_r+0x14>
 8012064:	6a03      	ldr	r3, [r0, #32]
 8012066:	b90b      	cbnz	r3, 801206c <__swsetup_r+0x14>
 8012068:	f7ff ff3e 	bl	8011ee8 <__sinit>
 801206c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012070:	0719      	lsls	r1, r3, #28
 8012072:	d422      	bmi.n	80120ba <__swsetup_r+0x62>
 8012074:	06da      	lsls	r2, r3, #27
 8012076:	d407      	bmi.n	8012088 <__swsetup_r+0x30>
 8012078:	2209      	movs	r2, #9
 801207a:	602a      	str	r2, [r5, #0]
 801207c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012080:	81a3      	strh	r3, [r4, #12]
 8012082:	f04f 30ff 	mov.w	r0, #4294967295
 8012086:	e033      	b.n	80120f0 <__swsetup_r+0x98>
 8012088:	0758      	lsls	r0, r3, #29
 801208a:	d512      	bpl.n	80120b2 <__swsetup_r+0x5a>
 801208c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801208e:	b141      	cbz	r1, 80120a2 <__swsetup_r+0x4a>
 8012090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012094:	4299      	cmp	r1, r3
 8012096:	d002      	beq.n	801209e <__swsetup_r+0x46>
 8012098:	4628      	mov	r0, r5
 801209a:	f000 fe93 	bl	8012dc4 <_free_r>
 801209e:	2300      	movs	r3, #0
 80120a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80120a2:	89a3      	ldrh	r3, [r4, #12]
 80120a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80120a8:	81a3      	strh	r3, [r4, #12]
 80120aa:	2300      	movs	r3, #0
 80120ac:	6063      	str	r3, [r4, #4]
 80120ae:	6923      	ldr	r3, [r4, #16]
 80120b0:	6023      	str	r3, [r4, #0]
 80120b2:	89a3      	ldrh	r3, [r4, #12]
 80120b4:	f043 0308 	orr.w	r3, r3, #8
 80120b8:	81a3      	strh	r3, [r4, #12]
 80120ba:	6923      	ldr	r3, [r4, #16]
 80120bc:	b94b      	cbnz	r3, 80120d2 <__swsetup_r+0x7a>
 80120be:	89a3      	ldrh	r3, [r4, #12]
 80120c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80120c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120c8:	d003      	beq.n	80120d2 <__swsetup_r+0x7a>
 80120ca:	4621      	mov	r1, r4
 80120cc:	4628      	mov	r0, r5
 80120ce:	f001 fd0f 	bl	8013af0 <__smakebuf_r>
 80120d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120d6:	f013 0201 	ands.w	r2, r3, #1
 80120da:	d00a      	beq.n	80120f2 <__swsetup_r+0x9a>
 80120dc:	2200      	movs	r2, #0
 80120de:	60a2      	str	r2, [r4, #8]
 80120e0:	6962      	ldr	r2, [r4, #20]
 80120e2:	4252      	negs	r2, r2
 80120e4:	61a2      	str	r2, [r4, #24]
 80120e6:	6922      	ldr	r2, [r4, #16]
 80120e8:	b942      	cbnz	r2, 80120fc <__swsetup_r+0xa4>
 80120ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80120ee:	d1c5      	bne.n	801207c <__swsetup_r+0x24>
 80120f0:	bd38      	pop	{r3, r4, r5, pc}
 80120f2:	0799      	lsls	r1, r3, #30
 80120f4:	bf58      	it	pl
 80120f6:	6962      	ldrpl	r2, [r4, #20]
 80120f8:	60a2      	str	r2, [r4, #8]
 80120fa:	e7f4      	b.n	80120e6 <__swsetup_r+0x8e>
 80120fc:	2000      	movs	r0, #0
 80120fe:	e7f7      	b.n	80120f0 <__swsetup_r+0x98>
 8012100:	24000110 	.word	0x24000110

08012104 <memset>:
 8012104:	4402      	add	r2, r0
 8012106:	4603      	mov	r3, r0
 8012108:	4293      	cmp	r3, r2
 801210a:	d100      	bne.n	801210e <memset+0xa>
 801210c:	4770      	bx	lr
 801210e:	f803 1b01 	strb.w	r1, [r3], #1
 8012112:	e7f9      	b.n	8012108 <memset+0x4>

08012114 <_localeconv_r>:
 8012114:	4800      	ldr	r0, [pc, #0]	@ (8012118 <_localeconv_r+0x4>)
 8012116:	4770      	bx	lr
 8012118:	24000250 	.word	0x24000250

0801211c <_close_r>:
 801211c:	b538      	push	{r3, r4, r5, lr}
 801211e:	4d06      	ldr	r5, [pc, #24]	@ (8012138 <_close_r+0x1c>)
 8012120:	2300      	movs	r3, #0
 8012122:	4604      	mov	r4, r0
 8012124:	4608      	mov	r0, r1
 8012126:	602b      	str	r3, [r5, #0]
 8012128:	f7ef fafa 	bl	8001720 <_close>
 801212c:	1c43      	adds	r3, r0, #1
 801212e:	d102      	bne.n	8012136 <_close_r+0x1a>
 8012130:	682b      	ldr	r3, [r5, #0]
 8012132:	b103      	cbz	r3, 8012136 <_close_r+0x1a>
 8012134:	6023      	str	r3, [r4, #0]
 8012136:	bd38      	pop	{r3, r4, r5, pc}
 8012138:	240013f8 	.word	0x240013f8

0801213c <_lseek_r>:
 801213c:	b538      	push	{r3, r4, r5, lr}
 801213e:	4d07      	ldr	r5, [pc, #28]	@ (801215c <_lseek_r+0x20>)
 8012140:	4604      	mov	r4, r0
 8012142:	4608      	mov	r0, r1
 8012144:	4611      	mov	r1, r2
 8012146:	2200      	movs	r2, #0
 8012148:	602a      	str	r2, [r5, #0]
 801214a:	461a      	mov	r2, r3
 801214c:	f7ef fb0f 	bl	800176e <_lseek>
 8012150:	1c43      	adds	r3, r0, #1
 8012152:	d102      	bne.n	801215a <_lseek_r+0x1e>
 8012154:	682b      	ldr	r3, [r5, #0]
 8012156:	b103      	cbz	r3, 801215a <_lseek_r+0x1e>
 8012158:	6023      	str	r3, [r4, #0]
 801215a:	bd38      	pop	{r3, r4, r5, pc}
 801215c:	240013f8 	.word	0x240013f8

08012160 <_read_r>:
 8012160:	b538      	push	{r3, r4, r5, lr}
 8012162:	4d07      	ldr	r5, [pc, #28]	@ (8012180 <_read_r+0x20>)
 8012164:	4604      	mov	r4, r0
 8012166:	4608      	mov	r0, r1
 8012168:	4611      	mov	r1, r2
 801216a:	2200      	movs	r2, #0
 801216c:	602a      	str	r2, [r5, #0]
 801216e:	461a      	mov	r2, r3
 8012170:	f7ef fab9 	bl	80016e6 <_read>
 8012174:	1c43      	adds	r3, r0, #1
 8012176:	d102      	bne.n	801217e <_read_r+0x1e>
 8012178:	682b      	ldr	r3, [r5, #0]
 801217a:	b103      	cbz	r3, 801217e <_read_r+0x1e>
 801217c:	6023      	str	r3, [r4, #0]
 801217e:	bd38      	pop	{r3, r4, r5, pc}
 8012180:	240013f8 	.word	0x240013f8

08012184 <_write_r>:
 8012184:	b538      	push	{r3, r4, r5, lr}
 8012186:	4d07      	ldr	r5, [pc, #28]	@ (80121a4 <_write_r+0x20>)
 8012188:	4604      	mov	r4, r0
 801218a:	4608      	mov	r0, r1
 801218c:	4611      	mov	r1, r2
 801218e:	2200      	movs	r2, #0
 8012190:	602a      	str	r2, [r5, #0]
 8012192:	461a      	mov	r2, r3
 8012194:	f7ee fa9b 	bl	80006ce <_write>
 8012198:	1c43      	adds	r3, r0, #1
 801219a:	d102      	bne.n	80121a2 <_write_r+0x1e>
 801219c:	682b      	ldr	r3, [r5, #0]
 801219e:	b103      	cbz	r3, 80121a2 <_write_r+0x1e>
 80121a0:	6023      	str	r3, [r4, #0]
 80121a2:	bd38      	pop	{r3, r4, r5, pc}
 80121a4:	240013f8 	.word	0x240013f8

080121a8 <__errno>:
 80121a8:	4b01      	ldr	r3, [pc, #4]	@ (80121b0 <__errno+0x8>)
 80121aa:	6818      	ldr	r0, [r3, #0]
 80121ac:	4770      	bx	lr
 80121ae:	bf00      	nop
 80121b0:	24000110 	.word	0x24000110

080121b4 <__libc_init_array>:
 80121b4:	b570      	push	{r4, r5, r6, lr}
 80121b6:	4d0d      	ldr	r5, [pc, #52]	@ (80121ec <__libc_init_array+0x38>)
 80121b8:	4c0d      	ldr	r4, [pc, #52]	@ (80121f0 <__libc_init_array+0x3c>)
 80121ba:	1b64      	subs	r4, r4, r5
 80121bc:	10a4      	asrs	r4, r4, #2
 80121be:	2600      	movs	r6, #0
 80121c0:	42a6      	cmp	r6, r4
 80121c2:	d109      	bne.n	80121d8 <__libc_init_array+0x24>
 80121c4:	4d0b      	ldr	r5, [pc, #44]	@ (80121f4 <__libc_init_array+0x40>)
 80121c6:	4c0c      	ldr	r4, [pc, #48]	@ (80121f8 <__libc_init_array+0x44>)
 80121c8:	f001 fdbe 	bl	8013d48 <_init>
 80121cc:	1b64      	subs	r4, r4, r5
 80121ce:	10a4      	asrs	r4, r4, #2
 80121d0:	2600      	movs	r6, #0
 80121d2:	42a6      	cmp	r6, r4
 80121d4:	d105      	bne.n	80121e2 <__libc_init_array+0x2e>
 80121d6:	bd70      	pop	{r4, r5, r6, pc}
 80121d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80121dc:	4798      	blx	r3
 80121de:	3601      	adds	r6, #1
 80121e0:	e7ee      	b.n	80121c0 <__libc_init_array+0xc>
 80121e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80121e6:	4798      	blx	r3
 80121e8:	3601      	adds	r6, #1
 80121ea:	e7f2      	b.n	80121d2 <__libc_init_array+0x1e>
 80121ec:	080141a0 	.word	0x080141a0
 80121f0:	080141a0 	.word	0x080141a0
 80121f4:	080141a0 	.word	0x080141a0
 80121f8:	080141a4 	.word	0x080141a4

080121fc <__retarget_lock_init_recursive>:
 80121fc:	4770      	bx	lr

080121fe <__retarget_lock_acquire_recursive>:
 80121fe:	4770      	bx	lr

08012200 <__retarget_lock_release_recursive>:
 8012200:	4770      	bx	lr

08012202 <quorem>:
 8012202:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012206:	6903      	ldr	r3, [r0, #16]
 8012208:	690c      	ldr	r4, [r1, #16]
 801220a:	42a3      	cmp	r3, r4
 801220c:	4607      	mov	r7, r0
 801220e:	db7e      	blt.n	801230e <quorem+0x10c>
 8012210:	3c01      	subs	r4, #1
 8012212:	f101 0814 	add.w	r8, r1, #20
 8012216:	00a3      	lsls	r3, r4, #2
 8012218:	f100 0514 	add.w	r5, r0, #20
 801221c:	9300      	str	r3, [sp, #0]
 801221e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012222:	9301      	str	r3, [sp, #4]
 8012224:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801222c:	3301      	adds	r3, #1
 801222e:	429a      	cmp	r2, r3
 8012230:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012234:	fbb2 f6f3 	udiv	r6, r2, r3
 8012238:	d32e      	bcc.n	8012298 <quorem+0x96>
 801223a:	f04f 0a00 	mov.w	sl, #0
 801223e:	46c4      	mov	ip, r8
 8012240:	46ae      	mov	lr, r5
 8012242:	46d3      	mov	fp, sl
 8012244:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012248:	b298      	uxth	r0, r3
 801224a:	fb06 a000 	mla	r0, r6, r0, sl
 801224e:	0c02      	lsrs	r2, r0, #16
 8012250:	0c1b      	lsrs	r3, r3, #16
 8012252:	fb06 2303 	mla	r3, r6, r3, r2
 8012256:	f8de 2000 	ldr.w	r2, [lr]
 801225a:	b280      	uxth	r0, r0
 801225c:	b292      	uxth	r2, r2
 801225e:	1a12      	subs	r2, r2, r0
 8012260:	445a      	add	r2, fp
 8012262:	f8de 0000 	ldr.w	r0, [lr]
 8012266:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801226a:	b29b      	uxth	r3, r3
 801226c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012270:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012274:	b292      	uxth	r2, r2
 8012276:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801227a:	45e1      	cmp	r9, ip
 801227c:	f84e 2b04 	str.w	r2, [lr], #4
 8012280:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012284:	d2de      	bcs.n	8012244 <quorem+0x42>
 8012286:	9b00      	ldr	r3, [sp, #0]
 8012288:	58eb      	ldr	r3, [r5, r3]
 801228a:	b92b      	cbnz	r3, 8012298 <quorem+0x96>
 801228c:	9b01      	ldr	r3, [sp, #4]
 801228e:	3b04      	subs	r3, #4
 8012290:	429d      	cmp	r5, r3
 8012292:	461a      	mov	r2, r3
 8012294:	d32f      	bcc.n	80122f6 <quorem+0xf4>
 8012296:	613c      	str	r4, [r7, #16]
 8012298:	4638      	mov	r0, r7
 801229a:	f001 f90d 	bl	80134b8 <__mcmp>
 801229e:	2800      	cmp	r0, #0
 80122a0:	db25      	blt.n	80122ee <quorem+0xec>
 80122a2:	4629      	mov	r1, r5
 80122a4:	2000      	movs	r0, #0
 80122a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80122aa:	f8d1 c000 	ldr.w	ip, [r1]
 80122ae:	fa1f fe82 	uxth.w	lr, r2
 80122b2:	fa1f f38c 	uxth.w	r3, ip
 80122b6:	eba3 030e 	sub.w	r3, r3, lr
 80122ba:	4403      	add	r3, r0
 80122bc:	0c12      	lsrs	r2, r2, #16
 80122be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80122c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122cc:	45c1      	cmp	r9, r8
 80122ce:	f841 3b04 	str.w	r3, [r1], #4
 80122d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80122d6:	d2e6      	bcs.n	80122a6 <quorem+0xa4>
 80122d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80122dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80122e0:	b922      	cbnz	r2, 80122ec <quorem+0xea>
 80122e2:	3b04      	subs	r3, #4
 80122e4:	429d      	cmp	r5, r3
 80122e6:	461a      	mov	r2, r3
 80122e8:	d30b      	bcc.n	8012302 <quorem+0x100>
 80122ea:	613c      	str	r4, [r7, #16]
 80122ec:	3601      	adds	r6, #1
 80122ee:	4630      	mov	r0, r6
 80122f0:	b003      	add	sp, #12
 80122f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f6:	6812      	ldr	r2, [r2, #0]
 80122f8:	3b04      	subs	r3, #4
 80122fa:	2a00      	cmp	r2, #0
 80122fc:	d1cb      	bne.n	8012296 <quorem+0x94>
 80122fe:	3c01      	subs	r4, #1
 8012300:	e7c6      	b.n	8012290 <quorem+0x8e>
 8012302:	6812      	ldr	r2, [r2, #0]
 8012304:	3b04      	subs	r3, #4
 8012306:	2a00      	cmp	r2, #0
 8012308:	d1ef      	bne.n	80122ea <quorem+0xe8>
 801230a:	3c01      	subs	r4, #1
 801230c:	e7ea      	b.n	80122e4 <quorem+0xe2>
 801230e:	2000      	movs	r0, #0
 8012310:	e7ee      	b.n	80122f0 <quorem+0xee>
 8012312:	0000      	movs	r0, r0
 8012314:	0000      	movs	r0, r0
	...

08012318 <_dtoa_r>:
 8012318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801231c:	ed2d 8b02 	vpush	{d8}
 8012320:	69c7      	ldr	r7, [r0, #28]
 8012322:	b091      	sub	sp, #68	@ 0x44
 8012324:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012328:	ec55 4b10 	vmov	r4, r5, d0
 801232c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801232e:	9107      	str	r1, [sp, #28]
 8012330:	4681      	mov	r9, r0
 8012332:	9209      	str	r2, [sp, #36]	@ 0x24
 8012334:	930d      	str	r3, [sp, #52]	@ 0x34
 8012336:	b97f      	cbnz	r7, 8012358 <_dtoa_r+0x40>
 8012338:	2010      	movs	r0, #16
 801233a:	f000 fd8d 	bl	8012e58 <malloc>
 801233e:	4602      	mov	r2, r0
 8012340:	f8c9 001c 	str.w	r0, [r9, #28]
 8012344:	b920      	cbnz	r0, 8012350 <_dtoa_r+0x38>
 8012346:	4ba0      	ldr	r3, [pc, #640]	@ (80125c8 <_dtoa_r+0x2b0>)
 8012348:	21ef      	movs	r1, #239	@ 0xef
 801234a:	48a0      	ldr	r0, [pc, #640]	@ (80125cc <_dtoa_r+0x2b4>)
 801234c:	f001 fc4c 	bl	8013be8 <__assert_func>
 8012350:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012354:	6007      	str	r7, [r0, #0]
 8012356:	60c7      	str	r7, [r0, #12]
 8012358:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801235c:	6819      	ldr	r1, [r3, #0]
 801235e:	b159      	cbz	r1, 8012378 <_dtoa_r+0x60>
 8012360:	685a      	ldr	r2, [r3, #4]
 8012362:	604a      	str	r2, [r1, #4]
 8012364:	2301      	movs	r3, #1
 8012366:	4093      	lsls	r3, r2
 8012368:	608b      	str	r3, [r1, #8]
 801236a:	4648      	mov	r0, r9
 801236c:	f000 fe6a 	bl	8013044 <_Bfree>
 8012370:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012374:	2200      	movs	r2, #0
 8012376:	601a      	str	r2, [r3, #0]
 8012378:	1e2b      	subs	r3, r5, #0
 801237a:	bfbb      	ittet	lt
 801237c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012380:	9303      	strlt	r3, [sp, #12]
 8012382:	2300      	movge	r3, #0
 8012384:	2201      	movlt	r2, #1
 8012386:	bfac      	ite	ge
 8012388:	6033      	strge	r3, [r6, #0]
 801238a:	6032      	strlt	r2, [r6, #0]
 801238c:	4b90      	ldr	r3, [pc, #576]	@ (80125d0 <_dtoa_r+0x2b8>)
 801238e:	9e03      	ldr	r6, [sp, #12]
 8012390:	43b3      	bics	r3, r6
 8012392:	d110      	bne.n	80123b6 <_dtoa_r+0x9e>
 8012394:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012396:	f242 730f 	movw	r3, #9999	@ 0x270f
 801239a:	6013      	str	r3, [r2, #0]
 801239c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80123a0:	4323      	orrs	r3, r4
 80123a2:	f000 84de 	beq.w	8012d62 <_dtoa_r+0xa4a>
 80123a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80123a8:	4f8a      	ldr	r7, [pc, #552]	@ (80125d4 <_dtoa_r+0x2bc>)
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	f000 84e0 	beq.w	8012d70 <_dtoa_r+0xa58>
 80123b0:	1cfb      	adds	r3, r7, #3
 80123b2:	f000 bcdb 	b.w	8012d6c <_dtoa_r+0xa54>
 80123b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80123ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80123be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c2:	d10a      	bne.n	80123da <_dtoa_r+0xc2>
 80123c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80123c6:	2301      	movs	r3, #1
 80123c8:	6013      	str	r3, [r2, #0]
 80123ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80123cc:	b113      	cbz	r3, 80123d4 <_dtoa_r+0xbc>
 80123ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80123d0:	4b81      	ldr	r3, [pc, #516]	@ (80125d8 <_dtoa_r+0x2c0>)
 80123d2:	6013      	str	r3, [r2, #0]
 80123d4:	4f81      	ldr	r7, [pc, #516]	@ (80125dc <_dtoa_r+0x2c4>)
 80123d6:	f000 bccb 	b.w	8012d70 <_dtoa_r+0xa58>
 80123da:	aa0e      	add	r2, sp, #56	@ 0x38
 80123dc:	a90f      	add	r1, sp, #60	@ 0x3c
 80123de:	4648      	mov	r0, r9
 80123e0:	eeb0 0b48 	vmov.f64	d0, d8
 80123e4:	f001 f918 	bl	8013618 <__d2b>
 80123e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80123ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123ee:	9001      	str	r0, [sp, #4]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d045      	beq.n	8012480 <_dtoa_r+0x168>
 80123f4:	eeb0 7b48 	vmov.f64	d7, d8
 80123f8:	ee18 1a90 	vmov	r1, s17
 80123fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012400:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012404:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012408:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801240c:	2500      	movs	r5, #0
 801240e:	ee07 1a90 	vmov	s15, r1
 8012412:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012416:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80125b0 <_dtoa_r+0x298>
 801241a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801241e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80125b8 <_dtoa_r+0x2a0>
 8012422:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012426:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80125c0 <_dtoa_r+0x2a8>
 801242a:	ee07 3a90 	vmov	s15, r3
 801242e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012432:	eeb0 7b46 	vmov.f64	d7, d6
 8012436:	eea4 7b05 	vfma.f64	d7, d4, d5
 801243a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801243e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012446:	ee16 8a90 	vmov	r8, s13
 801244a:	d508      	bpl.n	801245e <_dtoa_r+0x146>
 801244c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012450:	eeb4 6b47 	vcmp.f64	d6, d7
 8012454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012458:	bf18      	it	ne
 801245a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801245e:	f1b8 0f16 	cmp.w	r8, #22
 8012462:	d82b      	bhi.n	80124bc <_dtoa_r+0x1a4>
 8012464:	495e      	ldr	r1, [pc, #376]	@ (80125e0 <_dtoa_r+0x2c8>)
 8012466:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801246a:	ed91 7b00 	vldr	d7, [r1]
 801246e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012476:	d501      	bpl.n	801247c <_dtoa_r+0x164>
 8012478:	f108 38ff 	add.w	r8, r8, #4294967295
 801247c:	2100      	movs	r1, #0
 801247e:	e01e      	b.n	80124be <_dtoa_r+0x1a6>
 8012480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012482:	4413      	add	r3, r2
 8012484:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012488:	2920      	cmp	r1, #32
 801248a:	bfc1      	itttt	gt
 801248c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012490:	408e      	lslgt	r6, r1
 8012492:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012496:	fa24 f101 	lsrgt.w	r1, r4, r1
 801249a:	bfd6      	itet	le
 801249c:	f1c1 0120 	rsble	r1, r1, #32
 80124a0:	4331      	orrgt	r1, r6
 80124a2:	fa04 f101 	lslle.w	r1, r4, r1
 80124a6:	ee07 1a90 	vmov	s15, r1
 80124aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80124ae:	3b01      	subs	r3, #1
 80124b0:	ee17 1a90 	vmov	r1, s15
 80124b4:	2501      	movs	r5, #1
 80124b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80124ba:	e7a8      	b.n	801240e <_dtoa_r+0xf6>
 80124bc:	2101      	movs	r1, #1
 80124be:	1ad2      	subs	r2, r2, r3
 80124c0:	1e53      	subs	r3, r2, #1
 80124c2:	9306      	str	r3, [sp, #24]
 80124c4:	bf45      	ittet	mi
 80124c6:	f1c2 0301 	rsbmi	r3, r2, #1
 80124ca:	9305      	strmi	r3, [sp, #20]
 80124cc:	2300      	movpl	r3, #0
 80124ce:	2300      	movmi	r3, #0
 80124d0:	bf4c      	ite	mi
 80124d2:	9306      	strmi	r3, [sp, #24]
 80124d4:	9305      	strpl	r3, [sp, #20]
 80124d6:	f1b8 0f00 	cmp.w	r8, #0
 80124da:	910c      	str	r1, [sp, #48]	@ 0x30
 80124dc:	db18      	blt.n	8012510 <_dtoa_r+0x1f8>
 80124de:	9b06      	ldr	r3, [sp, #24]
 80124e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80124e4:	4443      	add	r3, r8
 80124e6:	9306      	str	r3, [sp, #24]
 80124e8:	2300      	movs	r3, #0
 80124ea:	9a07      	ldr	r2, [sp, #28]
 80124ec:	2a09      	cmp	r2, #9
 80124ee:	d849      	bhi.n	8012584 <_dtoa_r+0x26c>
 80124f0:	2a05      	cmp	r2, #5
 80124f2:	bfc4      	itt	gt
 80124f4:	3a04      	subgt	r2, #4
 80124f6:	9207      	strgt	r2, [sp, #28]
 80124f8:	9a07      	ldr	r2, [sp, #28]
 80124fa:	f1a2 0202 	sub.w	r2, r2, #2
 80124fe:	bfcc      	ite	gt
 8012500:	2400      	movgt	r4, #0
 8012502:	2401      	movle	r4, #1
 8012504:	2a03      	cmp	r2, #3
 8012506:	d848      	bhi.n	801259a <_dtoa_r+0x282>
 8012508:	e8df f002 	tbb	[pc, r2]
 801250c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012510:	9b05      	ldr	r3, [sp, #20]
 8012512:	2200      	movs	r2, #0
 8012514:	eba3 0308 	sub.w	r3, r3, r8
 8012518:	9305      	str	r3, [sp, #20]
 801251a:	920a      	str	r2, [sp, #40]	@ 0x28
 801251c:	f1c8 0300 	rsb	r3, r8, #0
 8012520:	e7e3      	b.n	80124ea <_dtoa_r+0x1d2>
 8012522:	2200      	movs	r2, #0
 8012524:	9208      	str	r2, [sp, #32]
 8012526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012528:	2a00      	cmp	r2, #0
 801252a:	dc39      	bgt.n	80125a0 <_dtoa_r+0x288>
 801252c:	f04f 0b01 	mov.w	fp, #1
 8012530:	46da      	mov	sl, fp
 8012532:	465a      	mov	r2, fp
 8012534:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012538:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801253c:	2100      	movs	r1, #0
 801253e:	2004      	movs	r0, #4
 8012540:	f100 0614 	add.w	r6, r0, #20
 8012544:	4296      	cmp	r6, r2
 8012546:	d930      	bls.n	80125aa <_dtoa_r+0x292>
 8012548:	6079      	str	r1, [r7, #4]
 801254a:	4648      	mov	r0, r9
 801254c:	9304      	str	r3, [sp, #16]
 801254e:	f000 fd39 	bl	8012fc4 <_Balloc>
 8012552:	9b04      	ldr	r3, [sp, #16]
 8012554:	4607      	mov	r7, r0
 8012556:	2800      	cmp	r0, #0
 8012558:	d146      	bne.n	80125e8 <_dtoa_r+0x2d0>
 801255a:	4b22      	ldr	r3, [pc, #136]	@ (80125e4 <_dtoa_r+0x2cc>)
 801255c:	4602      	mov	r2, r0
 801255e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012562:	e6f2      	b.n	801234a <_dtoa_r+0x32>
 8012564:	2201      	movs	r2, #1
 8012566:	e7dd      	b.n	8012524 <_dtoa_r+0x20c>
 8012568:	2200      	movs	r2, #0
 801256a:	9208      	str	r2, [sp, #32]
 801256c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801256e:	eb08 0b02 	add.w	fp, r8, r2
 8012572:	f10b 0a01 	add.w	sl, fp, #1
 8012576:	4652      	mov	r2, sl
 8012578:	2a01      	cmp	r2, #1
 801257a:	bfb8      	it	lt
 801257c:	2201      	movlt	r2, #1
 801257e:	e7db      	b.n	8012538 <_dtoa_r+0x220>
 8012580:	2201      	movs	r2, #1
 8012582:	e7f2      	b.n	801256a <_dtoa_r+0x252>
 8012584:	2401      	movs	r4, #1
 8012586:	2200      	movs	r2, #0
 8012588:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801258c:	f04f 3bff 	mov.w	fp, #4294967295
 8012590:	2100      	movs	r1, #0
 8012592:	46da      	mov	sl, fp
 8012594:	2212      	movs	r2, #18
 8012596:	9109      	str	r1, [sp, #36]	@ 0x24
 8012598:	e7ce      	b.n	8012538 <_dtoa_r+0x220>
 801259a:	2201      	movs	r2, #1
 801259c:	9208      	str	r2, [sp, #32]
 801259e:	e7f5      	b.n	801258c <_dtoa_r+0x274>
 80125a0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80125a4:	46da      	mov	sl, fp
 80125a6:	465a      	mov	r2, fp
 80125a8:	e7c6      	b.n	8012538 <_dtoa_r+0x220>
 80125aa:	3101      	adds	r1, #1
 80125ac:	0040      	lsls	r0, r0, #1
 80125ae:	e7c7      	b.n	8012540 <_dtoa_r+0x228>
 80125b0:	636f4361 	.word	0x636f4361
 80125b4:	3fd287a7 	.word	0x3fd287a7
 80125b8:	8b60c8b3 	.word	0x8b60c8b3
 80125bc:	3fc68a28 	.word	0x3fc68a28
 80125c0:	509f79fb 	.word	0x509f79fb
 80125c4:	3fd34413 	.word	0x3fd34413
 80125c8:	08013e65 	.word	0x08013e65
 80125cc:	08013e7c 	.word	0x08013e7c
 80125d0:	7ff00000 	.word	0x7ff00000
 80125d4:	08013e61 	.word	0x08013e61
 80125d8:	08013e35 	.word	0x08013e35
 80125dc:	08013e34 	.word	0x08013e34
 80125e0:	08013f78 	.word	0x08013f78
 80125e4:	08013ed4 	.word	0x08013ed4
 80125e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80125ec:	f1ba 0f0e 	cmp.w	sl, #14
 80125f0:	6010      	str	r0, [r2, #0]
 80125f2:	d86f      	bhi.n	80126d4 <_dtoa_r+0x3bc>
 80125f4:	2c00      	cmp	r4, #0
 80125f6:	d06d      	beq.n	80126d4 <_dtoa_r+0x3bc>
 80125f8:	f1b8 0f00 	cmp.w	r8, #0
 80125fc:	f340 80c2 	ble.w	8012784 <_dtoa_r+0x46c>
 8012600:	4aca      	ldr	r2, [pc, #808]	@ (801292c <_dtoa_r+0x614>)
 8012602:	f008 010f 	and.w	r1, r8, #15
 8012606:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801260a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801260e:	ed92 7b00 	vldr	d7, [r2]
 8012612:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012616:	f000 80a9 	beq.w	801276c <_dtoa_r+0x454>
 801261a:	4ac5      	ldr	r2, [pc, #788]	@ (8012930 <_dtoa_r+0x618>)
 801261c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012620:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012624:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012628:	f001 010f 	and.w	r1, r1, #15
 801262c:	2203      	movs	r2, #3
 801262e:	48c0      	ldr	r0, [pc, #768]	@ (8012930 <_dtoa_r+0x618>)
 8012630:	2900      	cmp	r1, #0
 8012632:	f040 809d 	bne.w	8012770 <_dtoa_r+0x458>
 8012636:	ed9d 6b02 	vldr	d6, [sp, #8]
 801263a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801263e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012642:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012644:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012648:	2900      	cmp	r1, #0
 801264a:	f000 80c1 	beq.w	80127d0 <_dtoa_r+0x4b8>
 801264e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012652:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265a:	f140 80b9 	bpl.w	80127d0 <_dtoa_r+0x4b8>
 801265e:	f1ba 0f00 	cmp.w	sl, #0
 8012662:	f000 80b5 	beq.w	80127d0 <_dtoa_r+0x4b8>
 8012666:	f1bb 0f00 	cmp.w	fp, #0
 801266a:	dd31      	ble.n	80126d0 <_dtoa_r+0x3b8>
 801266c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012670:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012674:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012678:	f108 31ff 	add.w	r1, r8, #4294967295
 801267c:	9104      	str	r1, [sp, #16]
 801267e:	3201      	adds	r2, #1
 8012680:	465c      	mov	r4, fp
 8012682:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012686:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801268a:	ee07 2a90 	vmov	s15, r2
 801268e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012692:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012696:	ee15 2a90 	vmov	r2, s11
 801269a:	ec51 0b15 	vmov	r0, r1, d5
 801269e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80126a2:	2c00      	cmp	r4, #0
 80126a4:	f040 8098 	bne.w	80127d8 <_dtoa_r+0x4c0>
 80126a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80126ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80126b0:	ec41 0b17 	vmov	d7, r0, r1
 80126b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80126b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126bc:	f300 8261 	bgt.w	8012b82 <_dtoa_r+0x86a>
 80126c0:	eeb1 7b47 	vneg.f64	d7, d7
 80126c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80126c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126cc:	f100 80f5 	bmi.w	80128ba <_dtoa_r+0x5a2>
 80126d0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80126d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80126d6:	2a00      	cmp	r2, #0
 80126d8:	f2c0 812c 	blt.w	8012934 <_dtoa_r+0x61c>
 80126dc:	f1b8 0f0e 	cmp.w	r8, #14
 80126e0:	f300 8128 	bgt.w	8012934 <_dtoa_r+0x61c>
 80126e4:	4b91      	ldr	r3, [pc, #580]	@ (801292c <_dtoa_r+0x614>)
 80126e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80126ea:	ed93 6b00 	vldr	d6, [r3]
 80126ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	da03      	bge.n	80126fc <_dtoa_r+0x3e4>
 80126f4:	f1ba 0f00 	cmp.w	sl, #0
 80126f8:	f340 80d2 	ble.w	80128a0 <_dtoa_r+0x588>
 80126fc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012700:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012704:	463e      	mov	r6, r7
 8012706:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801270a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801270e:	ee15 3a10 	vmov	r3, s10
 8012712:	3330      	adds	r3, #48	@ 0x30
 8012714:	f806 3b01 	strb.w	r3, [r6], #1
 8012718:	1bf3      	subs	r3, r6, r7
 801271a:	459a      	cmp	sl, r3
 801271c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012720:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012724:	f040 80f8 	bne.w	8012918 <_dtoa_r+0x600>
 8012728:	ee37 7b07 	vadd.f64	d7, d7, d7
 801272c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012734:	f300 80dd 	bgt.w	80128f2 <_dtoa_r+0x5da>
 8012738:	eeb4 7b46 	vcmp.f64	d7, d6
 801273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012740:	d104      	bne.n	801274c <_dtoa_r+0x434>
 8012742:	ee15 3a10 	vmov	r3, s10
 8012746:	07db      	lsls	r3, r3, #31
 8012748:	f100 80d3 	bmi.w	80128f2 <_dtoa_r+0x5da>
 801274c:	9901      	ldr	r1, [sp, #4]
 801274e:	4648      	mov	r0, r9
 8012750:	f000 fc78 	bl	8013044 <_Bfree>
 8012754:	2300      	movs	r3, #0
 8012756:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012758:	7033      	strb	r3, [r6, #0]
 801275a:	f108 0301 	add.w	r3, r8, #1
 801275e:	6013      	str	r3, [r2, #0]
 8012760:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012762:	2b00      	cmp	r3, #0
 8012764:	f000 8304 	beq.w	8012d70 <_dtoa_r+0xa58>
 8012768:	601e      	str	r6, [r3, #0]
 801276a:	e301      	b.n	8012d70 <_dtoa_r+0xa58>
 801276c:	2202      	movs	r2, #2
 801276e:	e75e      	b.n	801262e <_dtoa_r+0x316>
 8012770:	07cc      	lsls	r4, r1, #31
 8012772:	d504      	bpl.n	801277e <_dtoa_r+0x466>
 8012774:	ed90 6b00 	vldr	d6, [r0]
 8012778:	3201      	adds	r2, #1
 801277a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801277e:	1049      	asrs	r1, r1, #1
 8012780:	3008      	adds	r0, #8
 8012782:	e755      	b.n	8012630 <_dtoa_r+0x318>
 8012784:	d022      	beq.n	80127cc <_dtoa_r+0x4b4>
 8012786:	f1c8 0100 	rsb	r1, r8, #0
 801278a:	4a68      	ldr	r2, [pc, #416]	@ (801292c <_dtoa_r+0x614>)
 801278c:	f001 000f 	and.w	r0, r1, #15
 8012790:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012794:	ed92 7b00 	vldr	d7, [r2]
 8012798:	ee28 7b07 	vmul.f64	d7, d8, d7
 801279c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127a0:	4863      	ldr	r0, [pc, #396]	@ (8012930 <_dtoa_r+0x618>)
 80127a2:	1109      	asrs	r1, r1, #4
 80127a4:	2400      	movs	r4, #0
 80127a6:	2202      	movs	r2, #2
 80127a8:	b929      	cbnz	r1, 80127b6 <_dtoa_r+0x49e>
 80127aa:	2c00      	cmp	r4, #0
 80127ac:	f43f af49 	beq.w	8012642 <_dtoa_r+0x32a>
 80127b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127b4:	e745      	b.n	8012642 <_dtoa_r+0x32a>
 80127b6:	07ce      	lsls	r6, r1, #31
 80127b8:	d505      	bpl.n	80127c6 <_dtoa_r+0x4ae>
 80127ba:	ed90 6b00 	vldr	d6, [r0]
 80127be:	3201      	adds	r2, #1
 80127c0:	2401      	movs	r4, #1
 80127c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127c6:	1049      	asrs	r1, r1, #1
 80127c8:	3008      	adds	r0, #8
 80127ca:	e7ed      	b.n	80127a8 <_dtoa_r+0x490>
 80127cc:	2202      	movs	r2, #2
 80127ce:	e738      	b.n	8012642 <_dtoa_r+0x32a>
 80127d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80127d4:	4654      	mov	r4, sl
 80127d6:	e754      	b.n	8012682 <_dtoa_r+0x36a>
 80127d8:	4a54      	ldr	r2, [pc, #336]	@ (801292c <_dtoa_r+0x614>)
 80127da:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80127de:	ed12 4b02 	vldr	d4, [r2, #-8]
 80127e2:	9a08      	ldr	r2, [sp, #32]
 80127e4:	ec41 0b17 	vmov	d7, r0, r1
 80127e8:	443c      	add	r4, r7
 80127ea:	b34a      	cbz	r2, 8012840 <_dtoa_r+0x528>
 80127ec:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80127f0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80127f4:	463e      	mov	r6, r7
 80127f6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80127fa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80127fe:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012802:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012806:	ee14 2a90 	vmov	r2, s9
 801280a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801280e:	3230      	adds	r2, #48	@ 0x30
 8012810:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012814:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801281c:	f806 2b01 	strb.w	r2, [r6], #1
 8012820:	d438      	bmi.n	8012894 <_dtoa_r+0x57c>
 8012822:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012826:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801282e:	d462      	bmi.n	80128f6 <_dtoa_r+0x5de>
 8012830:	42a6      	cmp	r6, r4
 8012832:	f43f af4d 	beq.w	80126d0 <_dtoa_r+0x3b8>
 8012836:	ee27 7b03 	vmul.f64	d7, d7, d3
 801283a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801283e:	e7e0      	b.n	8012802 <_dtoa_r+0x4ea>
 8012840:	4621      	mov	r1, r4
 8012842:	463e      	mov	r6, r7
 8012844:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012848:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801284c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012850:	ee14 2a90 	vmov	r2, s9
 8012854:	3230      	adds	r2, #48	@ 0x30
 8012856:	f806 2b01 	strb.w	r2, [r6], #1
 801285a:	42a6      	cmp	r6, r4
 801285c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012860:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012864:	d119      	bne.n	801289a <_dtoa_r+0x582>
 8012866:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801286a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801286e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012876:	dc3e      	bgt.n	80128f6 <_dtoa_r+0x5de>
 8012878:	ee35 5b47 	vsub.f64	d5, d5, d7
 801287c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012884:	f57f af24 	bpl.w	80126d0 <_dtoa_r+0x3b8>
 8012888:	460e      	mov	r6, r1
 801288a:	3901      	subs	r1, #1
 801288c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012890:	2b30      	cmp	r3, #48	@ 0x30
 8012892:	d0f9      	beq.n	8012888 <_dtoa_r+0x570>
 8012894:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012898:	e758      	b.n	801274c <_dtoa_r+0x434>
 801289a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801289e:	e7d5      	b.n	801284c <_dtoa_r+0x534>
 80128a0:	d10b      	bne.n	80128ba <_dtoa_r+0x5a2>
 80128a2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80128a6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80128aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80128ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b6:	f2c0 8161 	blt.w	8012b7c <_dtoa_r+0x864>
 80128ba:	2400      	movs	r4, #0
 80128bc:	4625      	mov	r5, r4
 80128be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128c0:	43db      	mvns	r3, r3
 80128c2:	9304      	str	r3, [sp, #16]
 80128c4:	463e      	mov	r6, r7
 80128c6:	f04f 0800 	mov.w	r8, #0
 80128ca:	4621      	mov	r1, r4
 80128cc:	4648      	mov	r0, r9
 80128ce:	f000 fbb9 	bl	8013044 <_Bfree>
 80128d2:	2d00      	cmp	r5, #0
 80128d4:	d0de      	beq.n	8012894 <_dtoa_r+0x57c>
 80128d6:	f1b8 0f00 	cmp.w	r8, #0
 80128da:	d005      	beq.n	80128e8 <_dtoa_r+0x5d0>
 80128dc:	45a8      	cmp	r8, r5
 80128de:	d003      	beq.n	80128e8 <_dtoa_r+0x5d0>
 80128e0:	4641      	mov	r1, r8
 80128e2:	4648      	mov	r0, r9
 80128e4:	f000 fbae 	bl	8013044 <_Bfree>
 80128e8:	4629      	mov	r1, r5
 80128ea:	4648      	mov	r0, r9
 80128ec:	f000 fbaa 	bl	8013044 <_Bfree>
 80128f0:	e7d0      	b.n	8012894 <_dtoa_r+0x57c>
 80128f2:	f8cd 8010 	str.w	r8, [sp, #16]
 80128f6:	4633      	mov	r3, r6
 80128f8:	461e      	mov	r6, r3
 80128fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80128fe:	2a39      	cmp	r2, #57	@ 0x39
 8012900:	d106      	bne.n	8012910 <_dtoa_r+0x5f8>
 8012902:	429f      	cmp	r7, r3
 8012904:	d1f8      	bne.n	80128f8 <_dtoa_r+0x5e0>
 8012906:	9a04      	ldr	r2, [sp, #16]
 8012908:	3201      	adds	r2, #1
 801290a:	9204      	str	r2, [sp, #16]
 801290c:	2230      	movs	r2, #48	@ 0x30
 801290e:	703a      	strb	r2, [r7, #0]
 8012910:	781a      	ldrb	r2, [r3, #0]
 8012912:	3201      	adds	r2, #1
 8012914:	701a      	strb	r2, [r3, #0]
 8012916:	e7bd      	b.n	8012894 <_dtoa_r+0x57c>
 8012918:	ee27 7b04 	vmul.f64	d7, d7, d4
 801291c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012924:	f47f aeef 	bne.w	8012706 <_dtoa_r+0x3ee>
 8012928:	e710      	b.n	801274c <_dtoa_r+0x434>
 801292a:	bf00      	nop
 801292c:	08013f78 	.word	0x08013f78
 8012930:	08013f50 	.word	0x08013f50
 8012934:	9908      	ldr	r1, [sp, #32]
 8012936:	2900      	cmp	r1, #0
 8012938:	f000 80e3 	beq.w	8012b02 <_dtoa_r+0x7ea>
 801293c:	9907      	ldr	r1, [sp, #28]
 801293e:	2901      	cmp	r1, #1
 8012940:	f300 80c8 	bgt.w	8012ad4 <_dtoa_r+0x7bc>
 8012944:	2d00      	cmp	r5, #0
 8012946:	f000 80c1 	beq.w	8012acc <_dtoa_r+0x7b4>
 801294a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801294e:	9e05      	ldr	r6, [sp, #20]
 8012950:	461c      	mov	r4, r3
 8012952:	9304      	str	r3, [sp, #16]
 8012954:	9b05      	ldr	r3, [sp, #20]
 8012956:	4413      	add	r3, r2
 8012958:	9305      	str	r3, [sp, #20]
 801295a:	9b06      	ldr	r3, [sp, #24]
 801295c:	2101      	movs	r1, #1
 801295e:	4413      	add	r3, r2
 8012960:	4648      	mov	r0, r9
 8012962:	9306      	str	r3, [sp, #24]
 8012964:	f000 fc22 	bl	80131ac <__i2b>
 8012968:	9b04      	ldr	r3, [sp, #16]
 801296a:	4605      	mov	r5, r0
 801296c:	b166      	cbz	r6, 8012988 <_dtoa_r+0x670>
 801296e:	9a06      	ldr	r2, [sp, #24]
 8012970:	2a00      	cmp	r2, #0
 8012972:	dd09      	ble.n	8012988 <_dtoa_r+0x670>
 8012974:	42b2      	cmp	r2, r6
 8012976:	9905      	ldr	r1, [sp, #20]
 8012978:	bfa8      	it	ge
 801297a:	4632      	movge	r2, r6
 801297c:	1a89      	subs	r1, r1, r2
 801297e:	9105      	str	r1, [sp, #20]
 8012980:	9906      	ldr	r1, [sp, #24]
 8012982:	1ab6      	subs	r6, r6, r2
 8012984:	1a8a      	subs	r2, r1, r2
 8012986:	9206      	str	r2, [sp, #24]
 8012988:	b1fb      	cbz	r3, 80129ca <_dtoa_r+0x6b2>
 801298a:	9a08      	ldr	r2, [sp, #32]
 801298c:	2a00      	cmp	r2, #0
 801298e:	f000 80bc 	beq.w	8012b0a <_dtoa_r+0x7f2>
 8012992:	b19c      	cbz	r4, 80129bc <_dtoa_r+0x6a4>
 8012994:	4629      	mov	r1, r5
 8012996:	4622      	mov	r2, r4
 8012998:	4648      	mov	r0, r9
 801299a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801299c:	f000 fcc6 	bl	801332c <__pow5mult>
 80129a0:	9a01      	ldr	r2, [sp, #4]
 80129a2:	4601      	mov	r1, r0
 80129a4:	4605      	mov	r5, r0
 80129a6:	4648      	mov	r0, r9
 80129a8:	f000 fc16 	bl	80131d8 <__multiply>
 80129ac:	9901      	ldr	r1, [sp, #4]
 80129ae:	9004      	str	r0, [sp, #16]
 80129b0:	4648      	mov	r0, r9
 80129b2:	f000 fb47 	bl	8013044 <_Bfree>
 80129b6:	9a04      	ldr	r2, [sp, #16]
 80129b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129ba:	9201      	str	r2, [sp, #4]
 80129bc:	1b1a      	subs	r2, r3, r4
 80129be:	d004      	beq.n	80129ca <_dtoa_r+0x6b2>
 80129c0:	9901      	ldr	r1, [sp, #4]
 80129c2:	4648      	mov	r0, r9
 80129c4:	f000 fcb2 	bl	801332c <__pow5mult>
 80129c8:	9001      	str	r0, [sp, #4]
 80129ca:	2101      	movs	r1, #1
 80129cc:	4648      	mov	r0, r9
 80129ce:	f000 fbed 	bl	80131ac <__i2b>
 80129d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80129d4:	4604      	mov	r4, r0
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	f000 81d0 	beq.w	8012d7c <_dtoa_r+0xa64>
 80129dc:	461a      	mov	r2, r3
 80129de:	4601      	mov	r1, r0
 80129e0:	4648      	mov	r0, r9
 80129e2:	f000 fca3 	bl	801332c <__pow5mult>
 80129e6:	9b07      	ldr	r3, [sp, #28]
 80129e8:	2b01      	cmp	r3, #1
 80129ea:	4604      	mov	r4, r0
 80129ec:	f300 8095 	bgt.w	8012b1a <_dtoa_r+0x802>
 80129f0:	9b02      	ldr	r3, [sp, #8]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	f040 808b 	bne.w	8012b0e <_dtoa_r+0x7f6>
 80129f8:	9b03      	ldr	r3, [sp, #12]
 80129fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80129fe:	2a00      	cmp	r2, #0
 8012a00:	f040 8087 	bne.w	8012b12 <_dtoa_r+0x7fa>
 8012a04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012a08:	0d12      	lsrs	r2, r2, #20
 8012a0a:	0512      	lsls	r2, r2, #20
 8012a0c:	2a00      	cmp	r2, #0
 8012a0e:	f000 8082 	beq.w	8012b16 <_dtoa_r+0x7fe>
 8012a12:	9b05      	ldr	r3, [sp, #20]
 8012a14:	3301      	adds	r3, #1
 8012a16:	9305      	str	r3, [sp, #20]
 8012a18:	9b06      	ldr	r3, [sp, #24]
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	9306      	str	r3, [sp, #24]
 8012a1e:	2301      	movs	r3, #1
 8012a20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	f000 81af 	beq.w	8012d88 <_dtoa_r+0xa70>
 8012a2a:	6922      	ldr	r2, [r4, #16]
 8012a2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012a30:	6910      	ldr	r0, [r2, #16]
 8012a32:	f000 fb6f 	bl	8013114 <__hi0bits>
 8012a36:	f1c0 0020 	rsb	r0, r0, #32
 8012a3a:	9b06      	ldr	r3, [sp, #24]
 8012a3c:	4418      	add	r0, r3
 8012a3e:	f010 001f 	ands.w	r0, r0, #31
 8012a42:	d076      	beq.n	8012b32 <_dtoa_r+0x81a>
 8012a44:	f1c0 0220 	rsb	r2, r0, #32
 8012a48:	2a04      	cmp	r2, #4
 8012a4a:	dd69      	ble.n	8012b20 <_dtoa_r+0x808>
 8012a4c:	9b05      	ldr	r3, [sp, #20]
 8012a4e:	f1c0 001c 	rsb	r0, r0, #28
 8012a52:	4403      	add	r3, r0
 8012a54:	9305      	str	r3, [sp, #20]
 8012a56:	9b06      	ldr	r3, [sp, #24]
 8012a58:	4406      	add	r6, r0
 8012a5a:	4403      	add	r3, r0
 8012a5c:	9306      	str	r3, [sp, #24]
 8012a5e:	9b05      	ldr	r3, [sp, #20]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	dd05      	ble.n	8012a70 <_dtoa_r+0x758>
 8012a64:	9901      	ldr	r1, [sp, #4]
 8012a66:	461a      	mov	r2, r3
 8012a68:	4648      	mov	r0, r9
 8012a6a:	f000 fcb9 	bl	80133e0 <__lshift>
 8012a6e:	9001      	str	r0, [sp, #4]
 8012a70:	9b06      	ldr	r3, [sp, #24]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	dd05      	ble.n	8012a82 <_dtoa_r+0x76a>
 8012a76:	4621      	mov	r1, r4
 8012a78:	461a      	mov	r2, r3
 8012a7a:	4648      	mov	r0, r9
 8012a7c:	f000 fcb0 	bl	80133e0 <__lshift>
 8012a80:	4604      	mov	r4, r0
 8012a82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d056      	beq.n	8012b36 <_dtoa_r+0x81e>
 8012a88:	9801      	ldr	r0, [sp, #4]
 8012a8a:	4621      	mov	r1, r4
 8012a8c:	f000 fd14 	bl	80134b8 <__mcmp>
 8012a90:	2800      	cmp	r0, #0
 8012a92:	da50      	bge.n	8012b36 <_dtoa_r+0x81e>
 8012a94:	f108 33ff 	add.w	r3, r8, #4294967295
 8012a98:	9304      	str	r3, [sp, #16]
 8012a9a:	9901      	ldr	r1, [sp, #4]
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	220a      	movs	r2, #10
 8012aa0:	4648      	mov	r0, r9
 8012aa2:	f000 faf1 	bl	8013088 <__multadd>
 8012aa6:	9b08      	ldr	r3, [sp, #32]
 8012aa8:	9001      	str	r0, [sp, #4]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	f000 816e 	beq.w	8012d8c <_dtoa_r+0xa74>
 8012ab0:	4629      	mov	r1, r5
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	220a      	movs	r2, #10
 8012ab6:	4648      	mov	r0, r9
 8012ab8:	f000 fae6 	bl	8013088 <__multadd>
 8012abc:	f1bb 0f00 	cmp.w	fp, #0
 8012ac0:	4605      	mov	r5, r0
 8012ac2:	dc64      	bgt.n	8012b8e <_dtoa_r+0x876>
 8012ac4:	9b07      	ldr	r3, [sp, #28]
 8012ac6:	2b02      	cmp	r3, #2
 8012ac8:	dc3e      	bgt.n	8012b48 <_dtoa_r+0x830>
 8012aca:	e060      	b.n	8012b8e <_dtoa_r+0x876>
 8012acc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ace:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012ad2:	e73c      	b.n	801294e <_dtoa_r+0x636>
 8012ad4:	f10a 34ff 	add.w	r4, sl, #4294967295
 8012ad8:	42a3      	cmp	r3, r4
 8012ada:	bfbf      	itttt	lt
 8012adc:	1ae2      	sublt	r2, r4, r3
 8012ade:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012ae0:	189b      	addlt	r3, r3, r2
 8012ae2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012ae4:	bfae      	itee	ge
 8012ae6:	1b1c      	subge	r4, r3, r4
 8012ae8:	4623      	movlt	r3, r4
 8012aea:	2400      	movlt	r4, #0
 8012aec:	f1ba 0f00 	cmp.w	sl, #0
 8012af0:	bfb5      	itete	lt
 8012af2:	9a05      	ldrlt	r2, [sp, #20]
 8012af4:	9e05      	ldrge	r6, [sp, #20]
 8012af6:	eba2 060a 	sublt.w	r6, r2, sl
 8012afa:	4652      	movge	r2, sl
 8012afc:	bfb8      	it	lt
 8012afe:	2200      	movlt	r2, #0
 8012b00:	e727      	b.n	8012952 <_dtoa_r+0x63a>
 8012b02:	9e05      	ldr	r6, [sp, #20]
 8012b04:	9d08      	ldr	r5, [sp, #32]
 8012b06:	461c      	mov	r4, r3
 8012b08:	e730      	b.n	801296c <_dtoa_r+0x654>
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	e758      	b.n	80129c0 <_dtoa_r+0x6a8>
 8012b0e:	2300      	movs	r3, #0
 8012b10:	e786      	b.n	8012a20 <_dtoa_r+0x708>
 8012b12:	9b02      	ldr	r3, [sp, #8]
 8012b14:	e784      	b.n	8012a20 <_dtoa_r+0x708>
 8012b16:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012b18:	e783      	b.n	8012a22 <_dtoa_r+0x70a>
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b1e:	e784      	b.n	8012a2a <_dtoa_r+0x712>
 8012b20:	d09d      	beq.n	8012a5e <_dtoa_r+0x746>
 8012b22:	9b05      	ldr	r3, [sp, #20]
 8012b24:	321c      	adds	r2, #28
 8012b26:	4413      	add	r3, r2
 8012b28:	9305      	str	r3, [sp, #20]
 8012b2a:	9b06      	ldr	r3, [sp, #24]
 8012b2c:	4416      	add	r6, r2
 8012b2e:	4413      	add	r3, r2
 8012b30:	e794      	b.n	8012a5c <_dtoa_r+0x744>
 8012b32:	4602      	mov	r2, r0
 8012b34:	e7f5      	b.n	8012b22 <_dtoa_r+0x80a>
 8012b36:	f1ba 0f00 	cmp.w	sl, #0
 8012b3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8012b3e:	46d3      	mov	fp, sl
 8012b40:	dc21      	bgt.n	8012b86 <_dtoa_r+0x86e>
 8012b42:	9b07      	ldr	r3, [sp, #28]
 8012b44:	2b02      	cmp	r3, #2
 8012b46:	dd1e      	ble.n	8012b86 <_dtoa_r+0x86e>
 8012b48:	f1bb 0f00 	cmp.w	fp, #0
 8012b4c:	f47f aeb7 	bne.w	80128be <_dtoa_r+0x5a6>
 8012b50:	4621      	mov	r1, r4
 8012b52:	465b      	mov	r3, fp
 8012b54:	2205      	movs	r2, #5
 8012b56:	4648      	mov	r0, r9
 8012b58:	f000 fa96 	bl	8013088 <__multadd>
 8012b5c:	4601      	mov	r1, r0
 8012b5e:	4604      	mov	r4, r0
 8012b60:	9801      	ldr	r0, [sp, #4]
 8012b62:	f000 fca9 	bl	80134b8 <__mcmp>
 8012b66:	2800      	cmp	r0, #0
 8012b68:	f77f aea9 	ble.w	80128be <_dtoa_r+0x5a6>
 8012b6c:	463e      	mov	r6, r7
 8012b6e:	2331      	movs	r3, #49	@ 0x31
 8012b70:	f806 3b01 	strb.w	r3, [r6], #1
 8012b74:	9b04      	ldr	r3, [sp, #16]
 8012b76:	3301      	adds	r3, #1
 8012b78:	9304      	str	r3, [sp, #16]
 8012b7a:	e6a4      	b.n	80128c6 <_dtoa_r+0x5ae>
 8012b7c:	f8cd 8010 	str.w	r8, [sp, #16]
 8012b80:	4654      	mov	r4, sl
 8012b82:	4625      	mov	r5, r4
 8012b84:	e7f2      	b.n	8012b6c <_dtoa_r+0x854>
 8012b86:	9b08      	ldr	r3, [sp, #32]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 8103 	beq.w	8012d94 <_dtoa_r+0xa7c>
 8012b8e:	2e00      	cmp	r6, #0
 8012b90:	dd05      	ble.n	8012b9e <_dtoa_r+0x886>
 8012b92:	4629      	mov	r1, r5
 8012b94:	4632      	mov	r2, r6
 8012b96:	4648      	mov	r0, r9
 8012b98:	f000 fc22 	bl	80133e0 <__lshift>
 8012b9c:	4605      	mov	r5, r0
 8012b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d058      	beq.n	8012c56 <_dtoa_r+0x93e>
 8012ba4:	6869      	ldr	r1, [r5, #4]
 8012ba6:	4648      	mov	r0, r9
 8012ba8:	f000 fa0c 	bl	8012fc4 <_Balloc>
 8012bac:	4606      	mov	r6, r0
 8012bae:	b928      	cbnz	r0, 8012bbc <_dtoa_r+0x8a4>
 8012bb0:	4b82      	ldr	r3, [pc, #520]	@ (8012dbc <_dtoa_r+0xaa4>)
 8012bb2:	4602      	mov	r2, r0
 8012bb4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012bb8:	f7ff bbc7 	b.w	801234a <_dtoa_r+0x32>
 8012bbc:	692a      	ldr	r2, [r5, #16]
 8012bbe:	3202      	adds	r2, #2
 8012bc0:	0092      	lsls	r2, r2, #2
 8012bc2:	f105 010c 	add.w	r1, r5, #12
 8012bc6:	300c      	adds	r0, #12
 8012bc8:	f001 f800 	bl	8013bcc <memcpy>
 8012bcc:	2201      	movs	r2, #1
 8012bce:	4631      	mov	r1, r6
 8012bd0:	4648      	mov	r0, r9
 8012bd2:	f000 fc05 	bl	80133e0 <__lshift>
 8012bd6:	1c7b      	adds	r3, r7, #1
 8012bd8:	9305      	str	r3, [sp, #20]
 8012bda:	eb07 030b 	add.w	r3, r7, fp
 8012bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8012be0:	9b02      	ldr	r3, [sp, #8]
 8012be2:	f003 0301 	and.w	r3, r3, #1
 8012be6:	46a8      	mov	r8, r5
 8012be8:	9308      	str	r3, [sp, #32]
 8012bea:	4605      	mov	r5, r0
 8012bec:	9b05      	ldr	r3, [sp, #20]
 8012bee:	9801      	ldr	r0, [sp, #4]
 8012bf0:	4621      	mov	r1, r4
 8012bf2:	f103 3bff 	add.w	fp, r3, #4294967295
 8012bf6:	f7ff fb04 	bl	8012202 <quorem>
 8012bfa:	4641      	mov	r1, r8
 8012bfc:	9002      	str	r0, [sp, #8]
 8012bfe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012c02:	9801      	ldr	r0, [sp, #4]
 8012c04:	f000 fc58 	bl	80134b8 <__mcmp>
 8012c08:	462a      	mov	r2, r5
 8012c0a:	9006      	str	r0, [sp, #24]
 8012c0c:	4621      	mov	r1, r4
 8012c0e:	4648      	mov	r0, r9
 8012c10:	f000 fc6e 	bl	80134f0 <__mdiff>
 8012c14:	68c2      	ldr	r2, [r0, #12]
 8012c16:	4606      	mov	r6, r0
 8012c18:	b9fa      	cbnz	r2, 8012c5a <_dtoa_r+0x942>
 8012c1a:	4601      	mov	r1, r0
 8012c1c:	9801      	ldr	r0, [sp, #4]
 8012c1e:	f000 fc4b 	bl	80134b8 <__mcmp>
 8012c22:	4602      	mov	r2, r0
 8012c24:	4631      	mov	r1, r6
 8012c26:	4648      	mov	r0, r9
 8012c28:	920a      	str	r2, [sp, #40]	@ 0x28
 8012c2a:	f000 fa0b 	bl	8013044 <_Bfree>
 8012c2e:	9b07      	ldr	r3, [sp, #28]
 8012c30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c32:	9e05      	ldr	r6, [sp, #20]
 8012c34:	ea43 0102 	orr.w	r1, r3, r2
 8012c38:	9b08      	ldr	r3, [sp, #32]
 8012c3a:	4319      	orrs	r1, r3
 8012c3c:	d10f      	bne.n	8012c5e <_dtoa_r+0x946>
 8012c3e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012c42:	d028      	beq.n	8012c96 <_dtoa_r+0x97e>
 8012c44:	9b06      	ldr	r3, [sp, #24]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	dd02      	ble.n	8012c50 <_dtoa_r+0x938>
 8012c4a:	9b02      	ldr	r3, [sp, #8]
 8012c4c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012c50:	f88b a000 	strb.w	sl, [fp]
 8012c54:	e639      	b.n	80128ca <_dtoa_r+0x5b2>
 8012c56:	4628      	mov	r0, r5
 8012c58:	e7bd      	b.n	8012bd6 <_dtoa_r+0x8be>
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	e7e2      	b.n	8012c24 <_dtoa_r+0x90c>
 8012c5e:	9b06      	ldr	r3, [sp, #24]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	db04      	blt.n	8012c6e <_dtoa_r+0x956>
 8012c64:	9907      	ldr	r1, [sp, #28]
 8012c66:	430b      	orrs	r3, r1
 8012c68:	9908      	ldr	r1, [sp, #32]
 8012c6a:	430b      	orrs	r3, r1
 8012c6c:	d120      	bne.n	8012cb0 <_dtoa_r+0x998>
 8012c6e:	2a00      	cmp	r2, #0
 8012c70:	ddee      	ble.n	8012c50 <_dtoa_r+0x938>
 8012c72:	9901      	ldr	r1, [sp, #4]
 8012c74:	2201      	movs	r2, #1
 8012c76:	4648      	mov	r0, r9
 8012c78:	f000 fbb2 	bl	80133e0 <__lshift>
 8012c7c:	4621      	mov	r1, r4
 8012c7e:	9001      	str	r0, [sp, #4]
 8012c80:	f000 fc1a 	bl	80134b8 <__mcmp>
 8012c84:	2800      	cmp	r0, #0
 8012c86:	dc03      	bgt.n	8012c90 <_dtoa_r+0x978>
 8012c88:	d1e2      	bne.n	8012c50 <_dtoa_r+0x938>
 8012c8a:	f01a 0f01 	tst.w	sl, #1
 8012c8e:	d0df      	beq.n	8012c50 <_dtoa_r+0x938>
 8012c90:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012c94:	d1d9      	bne.n	8012c4a <_dtoa_r+0x932>
 8012c96:	2339      	movs	r3, #57	@ 0x39
 8012c98:	f88b 3000 	strb.w	r3, [fp]
 8012c9c:	4633      	mov	r3, r6
 8012c9e:	461e      	mov	r6, r3
 8012ca0:	3b01      	subs	r3, #1
 8012ca2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012ca6:	2a39      	cmp	r2, #57	@ 0x39
 8012ca8:	d053      	beq.n	8012d52 <_dtoa_r+0xa3a>
 8012caa:	3201      	adds	r2, #1
 8012cac:	701a      	strb	r2, [r3, #0]
 8012cae:	e60c      	b.n	80128ca <_dtoa_r+0x5b2>
 8012cb0:	2a00      	cmp	r2, #0
 8012cb2:	dd07      	ble.n	8012cc4 <_dtoa_r+0x9ac>
 8012cb4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012cb8:	d0ed      	beq.n	8012c96 <_dtoa_r+0x97e>
 8012cba:	f10a 0301 	add.w	r3, sl, #1
 8012cbe:	f88b 3000 	strb.w	r3, [fp]
 8012cc2:	e602      	b.n	80128ca <_dtoa_r+0x5b2>
 8012cc4:	9b05      	ldr	r3, [sp, #20]
 8012cc6:	9a05      	ldr	r2, [sp, #20]
 8012cc8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cce:	4293      	cmp	r3, r2
 8012cd0:	d029      	beq.n	8012d26 <_dtoa_r+0xa0e>
 8012cd2:	9901      	ldr	r1, [sp, #4]
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	220a      	movs	r2, #10
 8012cd8:	4648      	mov	r0, r9
 8012cda:	f000 f9d5 	bl	8013088 <__multadd>
 8012cde:	45a8      	cmp	r8, r5
 8012ce0:	9001      	str	r0, [sp, #4]
 8012ce2:	f04f 0300 	mov.w	r3, #0
 8012ce6:	f04f 020a 	mov.w	r2, #10
 8012cea:	4641      	mov	r1, r8
 8012cec:	4648      	mov	r0, r9
 8012cee:	d107      	bne.n	8012d00 <_dtoa_r+0x9e8>
 8012cf0:	f000 f9ca 	bl	8013088 <__multadd>
 8012cf4:	4680      	mov	r8, r0
 8012cf6:	4605      	mov	r5, r0
 8012cf8:	9b05      	ldr	r3, [sp, #20]
 8012cfa:	3301      	adds	r3, #1
 8012cfc:	9305      	str	r3, [sp, #20]
 8012cfe:	e775      	b.n	8012bec <_dtoa_r+0x8d4>
 8012d00:	f000 f9c2 	bl	8013088 <__multadd>
 8012d04:	4629      	mov	r1, r5
 8012d06:	4680      	mov	r8, r0
 8012d08:	2300      	movs	r3, #0
 8012d0a:	220a      	movs	r2, #10
 8012d0c:	4648      	mov	r0, r9
 8012d0e:	f000 f9bb 	bl	8013088 <__multadd>
 8012d12:	4605      	mov	r5, r0
 8012d14:	e7f0      	b.n	8012cf8 <_dtoa_r+0x9e0>
 8012d16:	f1bb 0f00 	cmp.w	fp, #0
 8012d1a:	bfcc      	ite	gt
 8012d1c:	465e      	movgt	r6, fp
 8012d1e:	2601      	movle	r6, #1
 8012d20:	443e      	add	r6, r7
 8012d22:	f04f 0800 	mov.w	r8, #0
 8012d26:	9901      	ldr	r1, [sp, #4]
 8012d28:	2201      	movs	r2, #1
 8012d2a:	4648      	mov	r0, r9
 8012d2c:	f000 fb58 	bl	80133e0 <__lshift>
 8012d30:	4621      	mov	r1, r4
 8012d32:	9001      	str	r0, [sp, #4]
 8012d34:	f000 fbc0 	bl	80134b8 <__mcmp>
 8012d38:	2800      	cmp	r0, #0
 8012d3a:	dcaf      	bgt.n	8012c9c <_dtoa_r+0x984>
 8012d3c:	d102      	bne.n	8012d44 <_dtoa_r+0xa2c>
 8012d3e:	f01a 0f01 	tst.w	sl, #1
 8012d42:	d1ab      	bne.n	8012c9c <_dtoa_r+0x984>
 8012d44:	4633      	mov	r3, r6
 8012d46:	461e      	mov	r6, r3
 8012d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d4c:	2a30      	cmp	r2, #48	@ 0x30
 8012d4e:	d0fa      	beq.n	8012d46 <_dtoa_r+0xa2e>
 8012d50:	e5bb      	b.n	80128ca <_dtoa_r+0x5b2>
 8012d52:	429f      	cmp	r7, r3
 8012d54:	d1a3      	bne.n	8012c9e <_dtoa_r+0x986>
 8012d56:	9b04      	ldr	r3, [sp, #16]
 8012d58:	3301      	adds	r3, #1
 8012d5a:	9304      	str	r3, [sp, #16]
 8012d5c:	2331      	movs	r3, #49	@ 0x31
 8012d5e:	703b      	strb	r3, [r7, #0]
 8012d60:	e5b3      	b.n	80128ca <_dtoa_r+0x5b2>
 8012d62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012d64:	4f16      	ldr	r7, [pc, #88]	@ (8012dc0 <_dtoa_r+0xaa8>)
 8012d66:	b11b      	cbz	r3, 8012d70 <_dtoa_r+0xa58>
 8012d68:	f107 0308 	add.w	r3, r7, #8
 8012d6c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012d6e:	6013      	str	r3, [r2, #0]
 8012d70:	4638      	mov	r0, r7
 8012d72:	b011      	add	sp, #68	@ 0x44
 8012d74:	ecbd 8b02 	vpop	{d8}
 8012d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7c:	9b07      	ldr	r3, [sp, #28]
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	f77f ae36 	ble.w	80129f0 <_dtoa_r+0x6d8>
 8012d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d88:	2001      	movs	r0, #1
 8012d8a:	e656      	b.n	8012a3a <_dtoa_r+0x722>
 8012d8c:	f1bb 0f00 	cmp.w	fp, #0
 8012d90:	f77f aed7 	ble.w	8012b42 <_dtoa_r+0x82a>
 8012d94:	463e      	mov	r6, r7
 8012d96:	9801      	ldr	r0, [sp, #4]
 8012d98:	4621      	mov	r1, r4
 8012d9a:	f7ff fa32 	bl	8012202 <quorem>
 8012d9e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012da2:	f806 ab01 	strb.w	sl, [r6], #1
 8012da6:	1bf2      	subs	r2, r6, r7
 8012da8:	4593      	cmp	fp, r2
 8012daa:	ddb4      	ble.n	8012d16 <_dtoa_r+0x9fe>
 8012dac:	9901      	ldr	r1, [sp, #4]
 8012dae:	2300      	movs	r3, #0
 8012db0:	220a      	movs	r2, #10
 8012db2:	4648      	mov	r0, r9
 8012db4:	f000 f968 	bl	8013088 <__multadd>
 8012db8:	9001      	str	r0, [sp, #4]
 8012dba:	e7ec      	b.n	8012d96 <_dtoa_r+0xa7e>
 8012dbc:	08013ed4 	.word	0x08013ed4
 8012dc0:	08013e58 	.word	0x08013e58

08012dc4 <_free_r>:
 8012dc4:	b538      	push	{r3, r4, r5, lr}
 8012dc6:	4605      	mov	r5, r0
 8012dc8:	2900      	cmp	r1, #0
 8012dca:	d041      	beq.n	8012e50 <_free_r+0x8c>
 8012dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dd0:	1f0c      	subs	r4, r1, #4
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	bfb8      	it	lt
 8012dd6:	18e4      	addlt	r4, r4, r3
 8012dd8:	f000 f8e8 	bl	8012fac <__malloc_lock>
 8012ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8012e54 <_free_r+0x90>)
 8012dde:	6813      	ldr	r3, [r2, #0]
 8012de0:	b933      	cbnz	r3, 8012df0 <_free_r+0x2c>
 8012de2:	6063      	str	r3, [r4, #4]
 8012de4:	6014      	str	r4, [r2, #0]
 8012de6:	4628      	mov	r0, r5
 8012de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012dec:	f000 b8e4 	b.w	8012fb8 <__malloc_unlock>
 8012df0:	42a3      	cmp	r3, r4
 8012df2:	d908      	bls.n	8012e06 <_free_r+0x42>
 8012df4:	6820      	ldr	r0, [r4, #0]
 8012df6:	1821      	adds	r1, r4, r0
 8012df8:	428b      	cmp	r3, r1
 8012dfa:	bf01      	itttt	eq
 8012dfc:	6819      	ldreq	r1, [r3, #0]
 8012dfe:	685b      	ldreq	r3, [r3, #4]
 8012e00:	1809      	addeq	r1, r1, r0
 8012e02:	6021      	streq	r1, [r4, #0]
 8012e04:	e7ed      	b.n	8012de2 <_free_r+0x1e>
 8012e06:	461a      	mov	r2, r3
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	b10b      	cbz	r3, 8012e10 <_free_r+0x4c>
 8012e0c:	42a3      	cmp	r3, r4
 8012e0e:	d9fa      	bls.n	8012e06 <_free_r+0x42>
 8012e10:	6811      	ldr	r1, [r2, #0]
 8012e12:	1850      	adds	r0, r2, r1
 8012e14:	42a0      	cmp	r0, r4
 8012e16:	d10b      	bne.n	8012e30 <_free_r+0x6c>
 8012e18:	6820      	ldr	r0, [r4, #0]
 8012e1a:	4401      	add	r1, r0
 8012e1c:	1850      	adds	r0, r2, r1
 8012e1e:	4283      	cmp	r3, r0
 8012e20:	6011      	str	r1, [r2, #0]
 8012e22:	d1e0      	bne.n	8012de6 <_free_r+0x22>
 8012e24:	6818      	ldr	r0, [r3, #0]
 8012e26:	685b      	ldr	r3, [r3, #4]
 8012e28:	6053      	str	r3, [r2, #4]
 8012e2a:	4408      	add	r0, r1
 8012e2c:	6010      	str	r0, [r2, #0]
 8012e2e:	e7da      	b.n	8012de6 <_free_r+0x22>
 8012e30:	d902      	bls.n	8012e38 <_free_r+0x74>
 8012e32:	230c      	movs	r3, #12
 8012e34:	602b      	str	r3, [r5, #0]
 8012e36:	e7d6      	b.n	8012de6 <_free_r+0x22>
 8012e38:	6820      	ldr	r0, [r4, #0]
 8012e3a:	1821      	adds	r1, r4, r0
 8012e3c:	428b      	cmp	r3, r1
 8012e3e:	bf04      	itt	eq
 8012e40:	6819      	ldreq	r1, [r3, #0]
 8012e42:	685b      	ldreq	r3, [r3, #4]
 8012e44:	6063      	str	r3, [r4, #4]
 8012e46:	bf04      	itt	eq
 8012e48:	1809      	addeq	r1, r1, r0
 8012e4a:	6021      	streq	r1, [r4, #0]
 8012e4c:	6054      	str	r4, [r2, #4]
 8012e4e:	e7ca      	b.n	8012de6 <_free_r+0x22>
 8012e50:	bd38      	pop	{r3, r4, r5, pc}
 8012e52:	bf00      	nop
 8012e54:	24001404 	.word	0x24001404

08012e58 <malloc>:
 8012e58:	4b02      	ldr	r3, [pc, #8]	@ (8012e64 <malloc+0xc>)
 8012e5a:	4601      	mov	r1, r0
 8012e5c:	6818      	ldr	r0, [r3, #0]
 8012e5e:	f000 b825 	b.w	8012eac <_malloc_r>
 8012e62:	bf00      	nop
 8012e64:	24000110 	.word	0x24000110

08012e68 <sbrk_aligned>:
 8012e68:	b570      	push	{r4, r5, r6, lr}
 8012e6a:	4e0f      	ldr	r6, [pc, #60]	@ (8012ea8 <sbrk_aligned+0x40>)
 8012e6c:	460c      	mov	r4, r1
 8012e6e:	6831      	ldr	r1, [r6, #0]
 8012e70:	4605      	mov	r5, r0
 8012e72:	b911      	cbnz	r1, 8012e7a <sbrk_aligned+0x12>
 8012e74:	f000 fe9a 	bl	8013bac <_sbrk_r>
 8012e78:	6030      	str	r0, [r6, #0]
 8012e7a:	4621      	mov	r1, r4
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f000 fe95 	bl	8013bac <_sbrk_r>
 8012e82:	1c43      	adds	r3, r0, #1
 8012e84:	d103      	bne.n	8012e8e <sbrk_aligned+0x26>
 8012e86:	f04f 34ff 	mov.w	r4, #4294967295
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	bd70      	pop	{r4, r5, r6, pc}
 8012e8e:	1cc4      	adds	r4, r0, #3
 8012e90:	f024 0403 	bic.w	r4, r4, #3
 8012e94:	42a0      	cmp	r0, r4
 8012e96:	d0f8      	beq.n	8012e8a <sbrk_aligned+0x22>
 8012e98:	1a21      	subs	r1, r4, r0
 8012e9a:	4628      	mov	r0, r5
 8012e9c:	f000 fe86 	bl	8013bac <_sbrk_r>
 8012ea0:	3001      	adds	r0, #1
 8012ea2:	d1f2      	bne.n	8012e8a <sbrk_aligned+0x22>
 8012ea4:	e7ef      	b.n	8012e86 <sbrk_aligned+0x1e>
 8012ea6:	bf00      	nop
 8012ea8:	24001400 	.word	0x24001400

08012eac <_malloc_r>:
 8012eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012eb0:	1ccd      	adds	r5, r1, #3
 8012eb2:	f025 0503 	bic.w	r5, r5, #3
 8012eb6:	3508      	adds	r5, #8
 8012eb8:	2d0c      	cmp	r5, #12
 8012eba:	bf38      	it	cc
 8012ebc:	250c      	movcc	r5, #12
 8012ebe:	2d00      	cmp	r5, #0
 8012ec0:	4606      	mov	r6, r0
 8012ec2:	db01      	blt.n	8012ec8 <_malloc_r+0x1c>
 8012ec4:	42a9      	cmp	r1, r5
 8012ec6:	d904      	bls.n	8012ed2 <_malloc_r+0x26>
 8012ec8:	230c      	movs	r3, #12
 8012eca:	6033      	str	r3, [r6, #0]
 8012ecc:	2000      	movs	r0, #0
 8012ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ed2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012fa8 <_malloc_r+0xfc>
 8012ed6:	f000 f869 	bl	8012fac <__malloc_lock>
 8012eda:	f8d8 3000 	ldr.w	r3, [r8]
 8012ede:	461c      	mov	r4, r3
 8012ee0:	bb44      	cbnz	r4, 8012f34 <_malloc_r+0x88>
 8012ee2:	4629      	mov	r1, r5
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	f7ff ffbf 	bl	8012e68 <sbrk_aligned>
 8012eea:	1c43      	adds	r3, r0, #1
 8012eec:	4604      	mov	r4, r0
 8012eee:	d158      	bne.n	8012fa2 <_malloc_r+0xf6>
 8012ef0:	f8d8 4000 	ldr.w	r4, [r8]
 8012ef4:	4627      	mov	r7, r4
 8012ef6:	2f00      	cmp	r7, #0
 8012ef8:	d143      	bne.n	8012f82 <_malloc_r+0xd6>
 8012efa:	2c00      	cmp	r4, #0
 8012efc:	d04b      	beq.n	8012f96 <_malloc_r+0xea>
 8012efe:	6823      	ldr	r3, [r4, #0]
 8012f00:	4639      	mov	r1, r7
 8012f02:	4630      	mov	r0, r6
 8012f04:	eb04 0903 	add.w	r9, r4, r3
 8012f08:	f000 fe50 	bl	8013bac <_sbrk_r>
 8012f0c:	4581      	cmp	r9, r0
 8012f0e:	d142      	bne.n	8012f96 <_malloc_r+0xea>
 8012f10:	6821      	ldr	r1, [r4, #0]
 8012f12:	1a6d      	subs	r5, r5, r1
 8012f14:	4629      	mov	r1, r5
 8012f16:	4630      	mov	r0, r6
 8012f18:	f7ff ffa6 	bl	8012e68 <sbrk_aligned>
 8012f1c:	3001      	adds	r0, #1
 8012f1e:	d03a      	beq.n	8012f96 <_malloc_r+0xea>
 8012f20:	6823      	ldr	r3, [r4, #0]
 8012f22:	442b      	add	r3, r5
 8012f24:	6023      	str	r3, [r4, #0]
 8012f26:	f8d8 3000 	ldr.w	r3, [r8]
 8012f2a:	685a      	ldr	r2, [r3, #4]
 8012f2c:	bb62      	cbnz	r2, 8012f88 <_malloc_r+0xdc>
 8012f2e:	f8c8 7000 	str.w	r7, [r8]
 8012f32:	e00f      	b.n	8012f54 <_malloc_r+0xa8>
 8012f34:	6822      	ldr	r2, [r4, #0]
 8012f36:	1b52      	subs	r2, r2, r5
 8012f38:	d420      	bmi.n	8012f7c <_malloc_r+0xd0>
 8012f3a:	2a0b      	cmp	r2, #11
 8012f3c:	d917      	bls.n	8012f6e <_malloc_r+0xc2>
 8012f3e:	1961      	adds	r1, r4, r5
 8012f40:	42a3      	cmp	r3, r4
 8012f42:	6025      	str	r5, [r4, #0]
 8012f44:	bf18      	it	ne
 8012f46:	6059      	strne	r1, [r3, #4]
 8012f48:	6863      	ldr	r3, [r4, #4]
 8012f4a:	bf08      	it	eq
 8012f4c:	f8c8 1000 	streq.w	r1, [r8]
 8012f50:	5162      	str	r2, [r4, r5]
 8012f52:	604b      	str	r3, [r1, #4]
 8012f54:	4630      	mov	r0, r6
 8012f56:	f000 f82f 	bl	8012fb8 <__malloc_unlock>
 8012f5a:	f104 000b 	add.w	r0, r4, #11
 8012f5e:	1d23      	adds	r3, r4, #4
 8012f60:	f020 0007 	bic.w	r0, r0, #7
 8012f64:	1ac2      	subs	r2, r0, r3
 8012f66:	bf1c      	itt	ne
 8012f68:	1a1b      	subne	r3, r3, r0
 8012f6a:	50a3      	strne	r3, [r4, r2]
 8012f6c:	e7af      	b.n	8012ece <_malloc_r+0x22>
 8012f6e:	6862      	ldr	r2, [r4, #4]
 8012f70:	42a3      	cmp	r3, r4
 8012f72:	bf0c      	ite	eq
 8012f74:	f8c8 2000 	streq.w	r2, [r8]
 8012f78:	605a      	strne	r2, [r3, #4]
 8012f7a:	e7eb      	b.n	8012f54 <_malloc_r+0xa8>
 8012f7c:	4623      	mov	r3, r4
 8012f7e:	6864      	ldr	r4, [r4, #4]
 8012f80:	e7ae      	b.n	8012ee0 <_malloc_r+0x34>
 8012f82:	463c      	mov	r4, r7
 8012f84:	687f      	ldr	r7, [r7, #4]
 8012f86:	e7b6      	b.n	8012ef6 <_malloc_r+0x4a>
 8012f88:	461a      	mov	r2, r3
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	42a3      	cmp	r3, r4
 8012f8e:	d1fb      	bne.n	8012f88 <_malloc_r+0xdc>
 8012f90:	2300      	movs	r3, #0
 8012f92:	6053      	str	r3, [r2, #4]
 8012f94:	e7de      	b.n	8012f54 <_malloc_r+0xa8>
 8012f96:	230c      	movs	r3, #12
 8012f98:	6033      	str	r3, [r6, #0]
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	f000 f80c 	bl	8012fb8 <__malloc_unlock>
 8012fa0:	e794      	b.n	8012ecc <_malloc_r+0x20>
 8012fa2:	6005      	str	r5, [r0, #0]
 8012fa4:	e7d6      	b.n	8012f54 <_malloc_r+0xa8>
 8012fa6:	bf00      	nop
 8012fa8:	24001404 	.word	0x24001404

08012fac <__malloc_lock>:
 8012fac:	4801      	ldr	r0, [pc, #4]	@ (8012fb4 <__malloc_lock+0x8>)
 8012fae:	f7ff b926 	b.w	80121fe <__retarget_lock_acquire_recursive>
 8012fb2:	bf00      	nop
 8012fb4:	240013fc 	.word	0x240013fc

08012fb8 <__malloc_unlock>:
 8012fb8:	4801      	ldr	r0, [pc, #4]	@ (8012fc0 <__malloc_unlock+0x8>)
 8012fba:	f7ff b921 	b.w	8012200 <__retarget_lock_release_recursive>
 8012fbe:	bf00      	nop
 8012fc0:	240013fc 	.word	0x240013fc

08012fc4 <_Balloc>:
 8012fc4:	b570      	push	{r4, r5, r6, lr}
 8012fc6:	69c6      	ldr	r6, [r0, #28]
 8012fc8:	4604      	mov	r4, r0
 8012fca:	460d      	mov	r5, r1
 8012fcc:	b976      	cbnz	r6, 8012fec <_Balloc+0x28>
 8012fce:	2010      	movs	r0, #16
 8012fd0:	f7ff ff42 	bl	8012e58 <malloc>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	61e0      	str	r0, [r4, #28]
 8012fd8:	b920      	cbnz	r0, 8012fe4 <_Balloc+0x20>
 8012fda:	4b18      	ldr	r3, [pc, #96]	@ (801303c <_Balloc+0x78>)
 8012fdc:	4818      	ldr	r0, [pc, #96]	@ (8013040 <_Balloc+0x7c>)
 8012fde:	216b      	movs	r1, #107	@ 0x6b
 8012fe0:	f000 fe02 	bl	8013be8 <__assert_func>
 8012fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012fe8:	6006      	str	r6, [r0, #0]
 8012fea:	60c6      	str	r6, [r0, #12]
 8012fec:	69e6      	ldr	r6, [r4, #28]
 8012fee:	68f3      	ldr	r3, [r6, #12]
 8012ff0:	b183      	cbz	r3, 8013014 <_Balloc+0x50>
 8012ff2:	69e3      	ldr	r3, [r4, #28]
 8012ff4:	68db      	ldr	r3, [r3, #12]
 8012ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012ffa:	b9b8      	cbnz	r0, 801302c <_Balloc+0x68>
 8012ffc:	2101      	movs	r1, #1
 8012ffe:	fa01 f605 	lsl.w	r6, r1, r5
 8013002:	1d72      	adds	r2, r6, #5
 8013004:	0092      	lsls	r2, r2, #2
 8013006:	4620      	mov	r0, r4
 8013008:	f000 fe0c 	bl	8013c24 <_calloc_r>
 801300c:	b160      	cbz	r0, 8013028 <_Balloc+0x64>
 801300e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013012:	e00e      	b.n	8013032 <_Balloc+0x6e>
 8013014:	2221      	movs	r2, #33	@ 0x21
 8013016:	2104      	movs	r1, #4
 8013018:	4620      	mov	r0, r4
 801301a:	f000 fe03 	bl	8013c24 <_calloc_r>
 801301e:	69e3      	ldr	r3, [r4, #28]
 8013020:	60f0      	str	r0, [r6, #12]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d1e4      	bne.n	8012ff2 <_Balloc+0x2e>
 8013028:	2000      	movs	r0, #0
 801302a:	bd70      	pop	{r4, r5, r6, pc}
 801302c:	6802      	ldr	r2, [r0, #0]
 801302e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013032:	2300      	movs	r3, #0
 8013034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013038:	e7f7      	b.n	801302a <_Balloc+0x66>
 801303a:	bf00      	nop
 801303c:	08013e65 	.word	0x08013e65
 8013040:	08013ee5 	.word	0x08013ee5

08013044 <_Bfree>:
 8013044:	b570      	push	{r4, r5, r6, lr}
 8013046:	69c6      	ldr	r6, [r0, #28]
 8013048:	4605      	mov	r5, r0
 801304a:	460c      	mov	r4, r1
 801304c:	b976      	cbnz	r6, 801306c <_Bfree+0x28>
 801304e:	2010      	movs	r0, #16
 8013050:	f7ff ff02 	bl	8012e58 <malloc>
 8013054:	4602      	mov	r2, r0
 8013056:	61e8      	str	r0, [r5, #28]
 8013058:	b920      	cbnz	r0, 8013064 <_Bfree+0x20>
 801305a:	4b09      	ldr	r3, [pc, #36]	@ (8013080 <_Bfree+0x3c>)
 801305c:	4809      	ldr	r0, [pc, #36]	@ (8013084 <_Bfree+0x40>)
 801305e:	218f      	movs	r1, #143	@ 0x8f
 8013060:	f000 fdc2 	bl	8013be8 <__assert_func>
 8013064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013068:	6006      	str	r6, [r0, #0]
 801306a:	60c6      	str	r6, [r0, #12]
 801306c:	b13c      	cbz	r4, 801307e <_Bfree+0x3a>
 801306e:	69eb      	ldr	r3, [r5, #28]
 8013070:	6862      	ldr	r2, [r4, #4]
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013078:	6021      	str	r1, [r4, #0]
 801307a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801307e:	bd70      	pop	{r4, r5, r6, pc}
 8013080:	08013e65 	.word	0x08013e65
 8013084:	08013ee5 	.word	0x08013ee5

08013088 <__multadd>:
 8013088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801308c:	690d      	ldr	r5, [r1, #16]
 801308e:	4607      	mov	r7, r0
 8013090:	460c      	mov	r4, r1
 8013092:	461e      	mov	r6, r3
 8013094:	f101 0c14 	add.w	ip, r1, #20
 8013098:	2000      	movs	r0, #0
 801309a:	f8dc 3000 	ldr.w	r3, [ip]
 801309e:	b299      	uxth	r1, r3
 80130a0:	fb02 6101 	mla	r1, r2, r1, r6
 80130a4:	0c1e      	lsrs	r6, r3, #16
 80130a6:	0c0b      	lsrs	r3, r1, #16
 80130a8:	fb02 3306 	mla	r3, r2, r6, r3
 80130ac:	b289      	uxth	r1, r1
 80130ae:	3001      	adds	r0, #1
 80130b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80130b4:	4285      	cmp	r5, r0
 80130b6:	f84c 1b04 	str.w	r1, [ip], #4
 80130ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80130be:	dcec      	bgt.n	801309a <__multadd+0x12>
 80130c0:	b30e      	cbz	r6, 8013106 <__multadd+0x7e>
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	42ab      	cmp	r3, r5
 80130c6:	dc19      	bgt.n	80130fc <__multadd+0x74>
 80130c8:	6861      	ldr	r1, [r4, #4]
 80130ca:	4638      	mov	r0, r7
 80130cc:	3101      	adds	r1, #1
 80130ce:	f7ff ff79 	bl	8012fc4 <_Balloc>
 80130d2:	4680      	mov	r8, r0
 80130d4:	b928      	cbnz	r0, 80130e2 <__multadd+0x5a>
 80130d6:	4602      	mov	r2, r0
 80130d8:	4b0c      	ldr	r3, [pc, #48]	@ (801310c <__multadd+0x84>)
 80130da:	480d      	ldr	r0, [pc, #52]	@ (8013110 <__multadd+0x88>)
 80130dc:	21ba      	movs	r1, #186	@ 0xba
 80130de:	f000 fd83 	bl	8013be8 <__assert_func>
 80130e2:	6922      	ldr	r2, [r4, #16]
 80130e4:	3202      	adds	r2, #2
 80130e6:	f104 010c 	add.w	r1, r4, #12
 80130ea:	0092      	lsls	r2, r2, #2
 80130ec:	300c      	adds	r0, #12
 80130ee:	f000 fd6d 	bl	8013bcc <memcpy>
 80130f2:	4621      	mov	r1, r4
 80130f4:	4638      	mov	r0, r7
 80130f6:	f7ff ffa5 	bl	8013044 <_Bfree>
 80130fa:	4644      	mov	r4, r8
 80130fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013100:	3501      	adds	r5, #1
 8013102:	615e      	str	r6, [r3, #20]
 8013104:	6125      	str	r5, [r4, #16]
 8013106:	4620      	mov	r0, r4
 8013108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801310c:	08013ed4 	.word	0x08013ed4
 8013110:	08013ee5 	.word	0x08013ee5

08013114 <__hi0bits>:
 8013114:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013118:	4603      	mov	r3, r0
 801311a:	bf36      	itet	cc
 801311c:	0403      	lslcc	r3, r0, #16
 801311e:	2000      	movcs	r0, #0
 8013120:	2010      	movcc	r0, #16
 8013122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013126:	bf3c      	itt	cc
 8013128:	021b      	lslcc	r3, r3, #8
 801312a:	3008      	addcc	r0, #8
 801312c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013130:	bf3c      	itt	cc
 8013132:	011b      	lslcc	r3, r3, #4
 8013134:	3004      	addcc	r0, #4
 8013136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801313a:	bf3c      	itt	cc
 801313c:	009b      	lslcc	r3, r3, #2
 801313e:	3002      	addcc	r0, #2
 8013140:	2b00      	cmp	r3, #0
 8013142:	db05      	blt.n	8013150 <__hi0bits+0x3c>
 8013144:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013148:	f100 0001 	add.w	r0, r0, #1
 801314c:	bf08      	it	eq
 801314e:	2020      	moveq	r0, #32
 8013150:	4770      	bx	lr

08013152 <__lo0bits>:
 8013152:	6803      	ldr	r3, [r0, #0]
 8013154:	4602      	mov	r2, r0
 8013156:	f013 0007 	ands.w	r0, r3, #7
 801315a:	d00b      	beq.n	8013174 <__lo0bits+0x22>
 801315c:	07d9      	lsls	r1, r3, #31
 801315e:	d421      	bmi.n	80131a4 <__lo0bits+0x52>
 8013160:	0798      	lsls	r0, r3, #30
 8013162:	bf49      	itett	mi
 8013164:	085b      	lsrmi	r3, r3, #1
 8013166:	089b      	lsrpl	r3, r3, #2
 8013168:	2001      	movmi	r0, #1
 801316a:	6013      	strmi	r3, [r2, #0]
 801316c:	bf5c      	itt	pl
 801316e:	6013      	strpl	r3, [r2, #0]
 8013170:	2002      	movpl	r0, #2
 8013172:	4770      	bx	lr
 8013174:	b299      	uxth	r1, r3
 8013176:	b909      	cbnz	r1, 801317c <__lo0bits+0x2a>
 8013178:	0c1b      	lsrs	r3, r3, #16
 801317a:	2010      	movs	r0, #16
 801317c:	b2d9      	uxtb	r1, r3
 801317e:	b909      	cbnz	r1, 8013184 <__lo0bits+0x32>
 8013180:	3008      	adds	r0, #8
 8013182:	0a1b      	lsrs	r3, r3, #8
 8013184:	0719      	lsls	r1, r3, #28
 8013186:	bf04      	itt	eq
 8013188:	091b      	lsreq	r3, r3, #4
 801318a:	3004      	addeq	r0, #4
 801318c:	0799      	lsls	r1, r3, #30
 801318e:	bf04      	itt	eq
 8013190:	089b      	lsreq	r3, r3, #2
 8013192:	3002      	addeq	r0, #2
 8013194:	07d9      	lsls	r1, r3, #31
 8013196:	d403      	bmi.n	80131a0 <__lo0bits+0x4e>
 8013198:	085b      	lsrs	r3, r3, #1
 801319a:	f100 0001 	add.w	r0, r0, #1
 801319e:	d003      	beq.n	80131a8 <__lo0bits+0x56>
 80131a0:	6013      	str	r3, [r2, #0]
 80131a2:	4770      	bx	lr
 80131a4:	2000      	movs	r0, #0
 80131a6:	4770      	bx	lr
 80131a8:	2020      	movs	r0, #32
 80131aa:	4770      	bx	lr

080131ac <__i2b>:
 80131ac:	b510      	push	{r4, lr}
 80131ae:	460c      	mov	r4, r1
 80131b0:	2101      	movs	r1, #1
 80131b2:	f7ff ff07 	bl	8012fc4 <_Balloc>
 80131b6:	4602      	mov	r2, r0
 80131b8:	b928      	cbnz	r0, 80131c6 <__i2b+0x1a>
 80131ba:	4b05      	ldr	r3, [pc, #20]	@ (80131d0 <__i2b+0x24>)
 80131bc:	4805      	ldr	r0, [pc, #20]	@ (80131d4 <__i2b+0x28>)
 80131be:	f240 1145 	movw	r1, #325	@ 0x145
 80131c2:	f000 fd11 	bl	8013be8 <__assert_func>
 80131c6:	2301      	movs	r3, #1
 80131c8:	6144      	str	r4, [r0, #20]
 80131ca:	6103      	str	r3, [r0, #16]
 80131cc:	bd10      	pop	{r4, pc}
 80131ce:	bf00      	nop
 80131d0:	08013ed4 	.word	0x08013ed4
 80131d4:	08013ee5 	.word	0x08013ee5

080131d8 <__multiply>:
 80131d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131dc:	4614      	mov	r4, r2
 80131de:	690a      	ldr	r2, [r1, #16]
 80131e0:	6923      	ldr	r3, [r4, #16]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	bfa8      	it	ge
 80131e6:	4623      	movge	r3, r4
 80131e8:	460f      	mov	r7, r1
 80131ea:	bfa4      	itt	ge
 80131ec:	460c      	movge	r4, r1
 80131ee:	461f      	movge	r7, r3
 80131f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80131f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80131f8:	68a3      	ldr	r3, [r4, #8]
 80131fa:	6861      	ldr	r1, [r4, #4]
 80131fc:	eb0a 0609 	add.w	r6, sl, r9
 8013200:	42b3      	cmp	r3, r6
 8013202:	b085      	sub	sp, #20
 8013204:	bfb8      	it	lt
 8013206:	3101      	addlt	r1, #1
 8013208:	f7ff fedc 	bl	8012fc4 <_Balloc>
 801320c:	b930      	cbnz	r0, 801321c <__multiply+0x44>
 801320e:	4602      	mov	r2, r0
 8013210:	4b44      	ldr	r3, [pc, #272]	@ (8013324 <__multiply+0x14c>)
 8013212:	4845      	ldr	r0, [pc, #276]	@ (8013328 <__multiply+0x150>)
 8013214:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013218:	f000 fce6 	bl	8013be8 <__assert_func>
 801321c:	f100 0514 	add.w	r5, r0, #20
 8013220:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013224:	462b      	mov	r3, r5
 8013226:	2200      	movs	r2, #0
 8013228:	4543      	cmp	r3, r8
 801322a:	d321      	bcc.n	8013270 <__multiply+0x98>
 801322c:	f107 0114 	add.w	r1, r7, #20
 8013230:	f104 0214 	add.w	r2, r4, #20
 8013234:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013238:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801323c:	9302      	str	r3, [sp, #8]
 801323e:	1b13      	subs	r3, r2, r4
 8013240:	3b15      	subs	r3, #21
 8013242:	f023 0303 	bic.w	r3, r3, #3
 8013246:	3304      	adds	r3, #4
 8013248:	f104 0715 	add.w	r7, r4, #21
 801324c:	42ba      	cmp	r2, r7
 801324e:	bf38      	it	cc
 8013250:	2304      	movcc	r3, #4
 8013252:	9301      	str	r3, [sp, #4]
 8013254:	9b02      	ldr	r3, [sp, #8]
 8013256:	9103      	str	r1, [sp, #12]
 8013258:	428b      	cmp	r3, r1
 801325a:	d80c      	bhi.n	8013276 <__multiply+0x9e>
 801325c:	2e00      	cmp	r6, #0
 801325e:	dd03      	ble.n	8013268 <__multiply+0x90>
 8013260:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013264:	2b00      	cmp	r3, #0
 8013266:	d05b      	beq.n	8013320 <__multiply+0x148>
 8013268:	6106      	str	r6, [r0, #16]
 801326a:	b005      	add	sp, #20
 801326c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013270:	f843 2b04 	str.w	r2, [r3], #4
 8013274:	e7d8      	b.n	8013228 <__multiply+0x50>
 8013276:	f8b1 a000 	ldrh.w	sl, [r1]
 801327a:	f1ba 0f00 	cmp.w	sl, #0
 801327e:	d024      	beq.n	80132ca <__multiply+0xf2>
 8013280:	f104 0e14 	add.w	lr, r4, #20
 8013284:	46a9      	mov	r9, r5
 8013286:	f04f 0c00 	mov.w	ip, #0
 801328a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801328e:	f8d9 3000 	ldr.w	r3, [r9]
 8013292:	fa1f fb87 	uxth.w	fp, r7
 8013296:	b29b      	uxth	r3, r3
 8013298:	fb0a 330b 	mla	r3, sl, fp, r3
 801329c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80132a0:	f8d9 7000 	ldr.w	r7, [r9]
 80132a4:	4463      	add	r3, ip
 80132a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80132aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80132ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80132b8:	4572      	cmp	r2, lr
 80132ba:	f849 3b04 	str.w	r3, [r9], #4
 80132be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80132c2:	d8e2      	bhi.n	801328a <__multiply+0xb2>
 80132c4:	9b01      	ldr	r3, [sp, #4]
 80132c6:	f845 c003 	str.w	ip, [r5, r3]
 80132ca:	9b03      	ldr	r3, [sp, #12]
 80132cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80132d0:	3104      	adds	r1, #4
 80132d2:	f1b9 0f00 	cmp.w	r9, #0
 80132d6:	d021      	beq.n	801331c <__multiply+0x144>
 80132d8:	682b      	ldr	r3, [r5, #0]
 80132da:	f104 0c14 	add.w	ip, r4, #20
 80132de:	46ae      	mov	lr, r5
 80132e0:	f04f 0a00 	mov.w	sl, #0
 80132e4:	f8bc b000 	ldrh.w	fp, [ip]
 80132e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80132ec:	fb09 770b 	mla	r7, r9, fp, r7
 80132f0:	4457      	add	r7, sl
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80132f8:	f84e 3b04 	str.w	r3, [lr], #4
 80132fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013300:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013304:	f8be 3000 	ldrh.w	r3, [lr]
 8013308:	fb09 330a 	mla	r3, r9, sl, r3
 801330c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013310:	4562      	cmp	r2, ip
 8013312:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013316:	d8e5      	bhi.n	80132e4 <__multiply+0x10c>
 8013318:	9f01      	ldr	r7, [sp, #4]
 801331a:	51eb      	str	r3, [r5, r7]
 801331c:	3504      	adds	r5, #4
 801331e:	e799      	b.n	8013254 <__multiply+0x7c>
 8013320:	3e01      	subs	r6, #1
 8013322:	e79b      	b.n	801325c <__multiply+0x84>
 8013324:	08013ed4 	.word	0x08013ed4
 8013328:	08013ee5 	.word	0x08013ee5

0801332c <__pow5mult>:
 801332c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013330:	4615      	mov	r5, r2
 8013332:	f012 0203 	ands.w	r2, r2, #3
 8013336:	4607      	mov	r7, r0
 8013338:	460e      	mov	r6, r1
 801333a:	d007      	beq.n	801334c <__pow5mult+0x20>
 801333c:	4c25      	ldr	r4, [pc, #148]	@ (80133d4 <__pow5mult+0xa8>)
 801333e:	3a01      	subs	r2, #1
 8013340:	2300      	movs	r3, #0
 8013342:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013346:	f7ff fe9f 	bl	8013088 <__multadd>
 801334a:	4606      	mov	r6, r0
 801334c:	10ad      	asrs	r5, r5, #2
 801334e:	d03d      	beq.n	80133cc <__pow5mult+0xa0>
 8013350:	69fc      	ldr	r4, [r7, #28]
 8013352:	b97c      	cbnz	r4, 8013374 <__pow5mult+0x48>
 8013354:	2010      	movs	r0, #16
 8013356:	f7ff fd7f 	bl	8012e58 <malloc>
 801335a:	4602      	mov	r2, r0
 801335c:	61f8      	str	r0, [r7, #28]
 801335e:	b928      	cbnz	r0, 801336c <__pow5mult+0x40>
 8013360:	4b1d      	ldr	r3, [pc, #116]	@ (80133d8 <__pow5mult+0xac>)
 8013362:	481e      	ldr	r0, [pc, #120]	@ (80133dc <__pow5mult+0xb0>)
 8013364:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013368:	f000 fc3e 	bl	8013be8 <__assert_func>
 801336c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013370:	6004      	str	r4, [r0, #0]
 8013372:	60c4      	str	r4, [r0, #12]
 8013374:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013378:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801337c:	b94c      	cbnz	r4, 8013392 <__pow5mult+0x66>
 801337e:	f240 2171 	movw	r1, #625	@ 0x271
 8013382:	4638      	mov	r0, r7
 8013384:	f7ff ff12 	bl	80131ac <__i2b>
 8013388:	2300      	movs	r3, #0
 801338a:	f8c8 0008 	str.w	r0, [r8, #8]
 801338e:	4604      	mov	r4, r0
 8013390:	6003      	str	r3, [r0, #0]
 8013392:	f04f 0900 	mov.w	r9, #0
 8013396:	07eb      	lsls	r3, r5, #31
 8013398:	d50a      	bpl.n	80133b0 <__pow5mult+0x84>
 801339a:	4631      	mov	r1, r6
 801339c:	4622      	mov	r2, r4
 801339e:	4638      	mov	r0, r7
 80133a0:	f7ff ff1a 	bl	80131d8 <__multiply>
 80133a4:	4631      	mov	r1, r6
 80133a6:	4680      	mov	r8, r0
 80133a8:	4638      	mov	r0, r7
 80133aa:	f7ff fe4b 	bl	8013044 <_Bfree>
 80133ae:	4646      	mov	r6, r8
 80133b0:	106d      	asrs	r5, r5, #1
 80133b2:	d00b      	beq.n	80133cc <__pow5mult+0xa0>
 80133b4:	6820      	ldr	r0, [r4, #0]
 80133b6:	b938      	cbnz	r0, 80133c8 <__pow5mult+0x9c>
 80133b8:	4622      	mov	r2, r4
 80133ba:	4621      	mov	r1, r4
 80133bc:	4638      	mov	r0, r7
 80133be:	f7ff ff0b 	bl	80131d8 <__multiply>
 80133c2:	6020      	str	r0, [r4, #0]
 80133c4:	f8c0 9000 	str.w	r9, [r0]
 80133c8:	4604      	mov	r4, r0
 80133ca:	e7e4      	b.n	8013396 <__pow5mult+0x6a>
 80133cc:	4630      	mov	r0, r6
 80133ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133d2:	bf00      	nop
 80133d4:	08013f40 	.word	0x08013f40
 80133d8:	08013e65 	.word	0x08013e65
 80133dc:	08013ee5 	.word	0x08013ee5

080133e0 <__lshift>:
 80133e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133e4:	460c      	mov	r4, r1
 80133e6:	6849      	ldr	r1, [r1, #4]
 80133e8:	6923      	ldr	r3, [r4, #16]
 80133ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80133ee:	68a3      	ldr	r3, [r4, #8]
 80133f0:	4607      	mov	r7, r0
 80133f2:	4691      	mov	r9, r2
 80133f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80133f8:	f108 0601 	add.w	r6, r8, #1
 80133fc:	42b3      	cmp	r3, r6
 80133fe:	db0b      	blt.n	8013418 <__lshift+0x38>
 8013400:	4638      	mov	r0, r7
 8013402:	f7ff fddf 	bl	8012fc4 <_Balloc>
 8013406:	4605      	mov	r5, r0
 8013408:	b948      	cbnz	r0, 801341e <__lshift+0x3e>
 801340a:	4602      	mov	r2, r0
 801340c:	4b28      	ldr	r3, [pc, #160]	@ (80134b0 <__lshift+0xd0>)
 801340e:	4829      	ldr	r0, [pc, #164]	@ (80134b4 <__lshift+0xd4>)
 8013410:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013414:	f000 fbe8 	bl	8013be8 <__assert_func>
 8013418:	3101      	adds	r1, #1
 801341a:	005b      	lsls	r3, r3, #1
 801341c:	e7ee      	b.n	80133fc <__lshift+0x1c>
 801341e:	2300      	movs	r3, #0
 8013420:	f100 0114 	add.w	r1, r0, #20
 8013424:	f100 0210 	add.w	r2, r0, #16
 8013428:	4618      	mov	r0, r3
 801342a:	4553      	cmp	r3, sl
 801342c:	db33      	blt.n	8013496 <__lshift+0xb6>
 801342e:	6920      	ldr	r0, [r4, #16]
 8013430:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013434:	f104 0314 	add.w	r3, r4, #20
 8013438:	f019 091f 	ands.w	r9, r9, #31
 801343c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013440:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013444:	d02b      	beq.n	801349e <__lshift+0xbe>
 8013446:	f1c9 0e20 	rsb	lr, r9, #32
 801344a:	468a      	mov	sl, r1
 801344c:	2200      	movs	r2, #0
 801344e:	6818      	ldr	r0, [r3, #0]
 8013450:	fa00 f009 	lsl.w	r0, r0, r9
 8013454:	4310      	orrs	r0, r2
 8013456:	f84a 0b04 	str.w	r0, [sl], #4
 801345a:	f853 2b04 	ldr.w	r2, [r3], #4
 801345e:	459c      	cmp	ip, r3
 8013460:	fa22 f20e 	lsr.w	r2, r2, lr
 8013464:	d8f3      	bhi.n	801344e <__lshift+0x6e>
 8013466:	ebac 0304 	sub.w	r3, ip, r4
 801346a:	3b15      	subs	r3, #21
 801346c:	f023 0303 	bic.w	r3, r3, #3
 8013470:	3304      	adds	r3, #4
 8013472:	f104 0015 	add.w	r0, r4, #21
 8013476:	4584      	cmp	ip, r0
 8013478:	bf38      	it	cc
 801347a:	2304      	movcc	r3, #4
 801347c:	50ca      	str	r2, [r1, r3]
 801347e:	b10a      	cbz	r2, 8013484 <__lshift+0xa4>
 8013480:	f108 0602 	add.w	r6, r8, #2
 8013484:	3e01      	subs	r6, #1
 8013486:	4638      	mov	r0, r7
 8013488:	612e      	str	r6, [r5, #16]
 801348a:	4621      	mov	r1, r4
 801348c:	f7ff fdda 	bl	8013044 <_Bfree>
 8013490:	4628      	mov	r0, r5
 8013492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013496:	f842 0f04 	str.w	r0, [r2, #4]!
 801349a:	3301      	adds	r3, #1
 801349c:	e7c5      	b.n	801342a <__lshift+0x4a>
 801349e:	3904      	subs	r1, #4
 80134a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80134a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80134a8:	459c      	cmp	ip, r3
 80134aa:	d8f9      	bhi.n	80134a0 <__lshift+0xc0>
 80134ac:	e7ea      	b.n	8013484 <__lshift+0xa4>
 80134ae:	bf00      	nop
 80134b0:	08013ed4 	.word	0x08013ed4
 80134b4:	08013ee5 	.word	0x08013ee5

080134b8 <__mcmp>:
 80134b8:	690a      	ldr	r2, [r1, #16]
 80134ba:	4603      	mov	r3, r0
 80134bc:	6900      	ldr	r0, [r0, #16]
 80134be:	1a80      	subs	r0, r0, r2
 80134c0:	b530      	push	{r4, r5, lr}
 80134c2:	d10e      	bne.n	80134e2 <__mcmp+0x2a>
 80134c4:	3314      	adds	r3, #20
 80134c6:	3114      	adds	r1, #20
 80134c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80134cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80134d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80134d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80134d8:	4295      	cmp	r5, r2
 80134da:	d003      	beq.n	80134e4 <__mcmp+0x2c>
 80134dc:	d205      	bcs.n	80134ea <__mcmp+0x32>
 80134de:	f04f 30ff 	mov.w	r0, #4294967295
 80134e2:	bd30      	pop	{r4, r5, pc}
 80134e4:	42a3      	cmp	r3, r4
 80134e6:	d3f3      	bcc.n	80134d0 <__mcmp+0x18>
 80134e8:	e7fb      	b.n	80134e2 <__mcmp+0x2a>
 80134ea:	2001      	movs	r0, #1
 80134ec:	e7f9      	b.n	80134e2 <__mcmp+0x2a>
	...

080134f0 <__mdiff>:
 80134f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f4:	4689      	mov	r9, r1
 80134f6:	4606      	mov	r6, r0
 80134f8:	4611      	mov	r1, r2
 80134fa:	4648      	mov	r0, r9
 80134fc:	4614      	mov	r4, r2
 80134fe:	f7ff ffdb 	bl	80134b8 <__mcmp>
 8013502:	1e05      	subs	r5, r0, #0
 8013504:	d112      	bne.n	801352c <__mdiff+0x3c>
 8013506:	4629      	mov	r1, r5
 8013508:	4630      	mov	r0, r6
 801350a:	f7ff fd5b 	bl	8012fc4 <_Balloc>
 801350e:	4602      	mov	r2, r0
 8013510:	b928      	cbnz	r0, 801351e <__mdiff+0x2e>
 8013512:	4b3f      	ldr	r3, [pc, #252]	@ (8013610 <__mdiff+0x120>)
 8013514:	f240 2137 	movw	r1, #567	@ 0x237
 8013518:	483e      	ldr	r0, [pc, #248]	@ (8013614 <__mdiff+0x124>)
 801351a:	f000 fb65 	bl	8013be8 <__assert_func>
 801351e:	2301      	movs	r3, #1
 8013520:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013524:	4610      	mov	r0, r2
 8013526:	b003      	add	sp, #12
 8013528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801352c:	bfbc      	itt	lt
 801352e:	464b      	movlt	r3, r9
 8013530:	46a1      	movlt	r9, r4
 8013532:	4630      	mov	r0, r6
 8013534:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013538:	bfba      	itte	lt
 801353a:	461c      	movlt	r4, r3
 801353c:	2501      	movlt	r5, #1
 801353e:	2500      	movge	r5, #0
 8013540:	f7ff fd40 	bl	8012fc4 <_Balloc>
 8013544:	4602      	mov	r2, r0
 8013546:	b918      	cbnz	r0, 8013550 <__mdiff+0x60>
 8013548:	4b31      	ldr	r3, [pc, #196]	@ (8013610 <__mdiff+0x120>)
 801354a:	f240 2145 	movw	r1, #581	@ 0x245
 801354e:	e7e3      	b.n	8013518 <__mdiff+0x28>
 8013550:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013554:	6926      	ldr	r6, [r4, #16]
 8013556:	60c5      	str	r5, [r0, #12]
 8013558:	f109 0310 	add.w	r3, r9, #16
 801355c:	f109 0514 	add.w	r5, r9, #20
 8013560:	f104 0e14 	add.w	lr, r4, #20
 8013564:	f100 0b14 	add.w	fp, r0, #20
 8013568:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801356c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013570:	9301      	str	r3, [sp, #4]
 8013572:	46d9      	mov	r9, fp
 8013574:	f04f 0c00 	mov.w	ip, #0
 8013578:	9b01      	ldr	r3, [sp, #4]
 801357a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801357e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013582:	9301      	str	r3, [sp, #4]
 8013584:	fa1f f38a 	uxth.w	r3, sl
 8013588:	4619      	mov	r1, r3
 801358a:	b283      	uxth	r3, r0
 801358c:	1acb      	subs	r3, r1, r3
 801358e:	0c00      	lsrs	r0, r0, #16
 8013590:	4463      	add	r3, ip
 8013592:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013596:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801359a:	b29b      	uxth	r3, r3
 801359c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80135a0:	4576      	cmp	r6, lr
 80135a2:	f849 3b04 	str.w	r3, [r9], #4
 80135a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80135aa:	d8e5      	bhi.n	8013578 <__mdiff+0x88>
 80135ac:	1b33      	subs	r3, r6, r4
 80135ae:	3b15      	subs	r3, #21
 80135b0:	f023 0303 	bic.w	r3, r3, #3
 80135b4:	3415      	adds	r4, #21
 80135b6:	3304      	adds	r3, #4
 80135b8:	42a6      	cmp	r6, r4
 80135ba:	bf38      	it	cc
 80135bc:	2304      	movcc	r3, #4
 80135be:	441d      	add	r5, r3
 80135c0:	445b      	add	r3, fp
 80135c2:	461e      	mov	r6, r3
 80135c4:	462c      	mov	r4, r5
 80135c6:	4544      	cmp	r4, r8
 80135c8:	d30e      	bcc.n	80135e8 <__mdiff+0xf8>
 80135ca:	f108 0103 	add.w	r1, r8, #3
 80135ce:	1b49      	subs	r1, r1, r5
 80135d0:	f021 0103 	bic.w	r1, r1, #3
 80135d4:	3d03      	subs	r5, #3
 80135d6:	45a8      	cmp	r8, r5
 80135d8:	bf38      	it	cc
 80135da:	2100      	movcc	r1, #0
 80135dc:	440b      	add	r3, r1
 80135de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80135e2:	b191      	cbz	r1, 801360a <__mdiff+0x11a>
 80135e4:	6117      	str	r7, [r2, #16]
 80135e6:	e79d      	b.n	8013524 <__mdiff+0x34>
 80135e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80135ec:	46e6      	mov	lr, ip
 80135ee:	0c08      	lsrs	r0, r1, #16
 80135f0:	fa1c fc81 	uxtah	ip, ip, r1
 80135f4:	4471      	add	r1, lr
 80135f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80135fa:	b289      	uxth	r1, r1
 80135fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013600:	f846 1b04 	str.w	r1, [r6], #4
 8013604:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013608:	e7dd      	b.n	80135c6 <__mdiff+0xd6>
 801360a:	3f01      	subs	r7, #1
 801360c:	e7e7      	b.n	80135de <__mdiff+0xee>
 801360e:	bf00      	nop
 8013610:	08013ed4 	.word	0x08013ed4
 8013614:	08013ee5 	.word	0x08013ee5

08013618 <__d2b>:
 8013618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801361c:	460f      	mov	r7, r1
 801361e:	2101      	movs	r1, #1
 8013620:	ec59 8b10 	vmov	r8, r9, d0
 8013624:	4616      	mov	r6, r2
 8013626:	f7ff fccd 	bl	8012fc4 <_Balloc>
 801362a:	4604      	mov	r4, r0
 801362c:	b930      	cbnz	r0, 801363c <__d2b+0x24>
 801362e:	4602      	mov	r2, r0
 8013630:	4b23      	ldr	r3, [pc, #140]	@ (80136c0 <__d2b+0xa8>)
 8013632:	4824      	ldr	r0, [pc, #144]	@ (80136c4 <__d2b+0xac>)
 8013634:	f240 310f 	movw	r1, #783	@ 0x30f
 8013638:	f000 fad6 	bl	8013be8 <__assert_func>
 801363c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013644:	b10d      	cbz	r5, 801364a <__d2b+0x32>
 8013646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801364a:	9301      	str	r3, [sp, #4]
 801364c:	f1b8 0300 	subs.w	r3, r8, #0
 8013650:	d023      	beq.n	801369a <__d2b+0x82>
 8013652:	4668      	mov	r0, sp
 8013654:	9300      	str	r3, [sp, #0]
 8013656:	f7ff fd7c 	bl	8013152 <__lo0bits>
 801365a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801365e:	b1d0      	cbz	r0, 8013696 <__d2b+0x7e>
 8013660:	f1c0 0320 	rsb	r3, r0, #32
 8013664:	fa02 f303 	lsl.w	r3, r2, r3
 8013668:	430b      	orrs	r3, r1
 801366a:	40c2      	lsrs	r2, r0
 801366c:	6163      	str	r3, [r4, #20]
 801366e:	9201      	str	r2, [sp, #4]
 8013670:	9b01      	ldr	r3, [sp, #4]
 8013672:	61a3      	str	r3, [r4, #24]
 8013674:	2b00      	cmp	r3, #0
 8013676:	bf0c      	ite	eq
 8013678:	2201      	moveq	r2, #1
 801367a:	2202      	movne	r2, #2
 801367c:	6122      	str	r2, [r4, #16]
 801367e:	b1a5      	cbz	r5, 80136aa <__d2b+0x92>
 8013680:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013684:	4405      	add	r5, r0
 8013686:	603d      	str	r5, [r7, #0]
 8013688:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801368c:	6030      	str	r0, [r6, #0]
 801368e:	4620      	mov	r0, r4
 8013690:	b003      	add	sp, #12
 8013692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013696:	6161      	str	r1, [r4, #20]
 8013698:	e7ea      	b.n	8013670 <__d2b+0x58>
 801369a:	a801      	add	r0, sp, #4
 801369c:	f7ff fd59 	bl	8013152 <__lo0bits>
 80136a0:	9b01      	ldr	r3, [sp, #4]
 80136a2:	6163      	str	r3, [r4, #20]
 80136a4:	3020      	adds	r0, #32
 80136a6:	2201      	movs	r2, #1
 80136a8:	e7e8      	b.n	801367c <__d2b+0x64>
 80136aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80136ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80136b2:	6038      	str	r0, [r7, #0]
 80136b4:	6918      	ldr	r0, [r3, #16]
 80136b6:	f7ff fd2d 	bl	8013114 <__hi0bits>
 80136ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80136be:	e7e5      	b.n	801368c <__d2b+0x74>
 80136c0:	08013ed4 	.word	0x08013ed4
 80136c4:	08013ee5 	.word	0x08013ee5

080136c8 <__sfputc_r>:
 80136c8:	6893      	ldr	r3, [r2, #8]
 80136ca:	3b01      	subs	r3, #1
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	b410      	push	{r4}
 80136d0:	6093      	str	r3, [r2, #8]
 80136d2:	da08      	bge.n	80136e6 <__sfputc_r+0x1e>
 80136d4:	6994      	ldr	r4, [r2, #24]
 80136d6:	42a3      	cmp	r3, r4
 80136d8:	db01      	blt.n	80136de <__sfputc_r+0x16>
 80136da:	290a      	cmp	r1, #10
 80136dc:	d103      	bne.n	80136e6 <__sfputc_r+0x1e>
 80136de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136e2:	f7fe bc7a 	b.w	8011fda <__swbuf_r>
 80136e6:	6813      	ldr	r3, [r2, #0]
 80136e8:	1c58      	adds	r0, r3, #1
 80136ea:	6010      	str	r0, [r2, #0]
 80136ec:	7019      	strb	r1, [r3, #0]
 80136ee:	4608      	mov	r0, r1
 80136f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136f4:	4770      	bx	lr

080136f6 <__sfputs_r>:
 80136f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136f8:	4606      	mov	r6, r0
 80136fa:	460f      	mov	r7, r1
 80136fc:	4614      	mov	r4, r2
 80136fe:	18d5      	adds	r5, r2, r3
 8013700:	42ac      	cmp	r4, r5
 8013702:	d101      	bne.n	8013708 <__sfputs_r+0x12>
 8013704:	2000      	movs	r0, #0
 8013706:	e007      	b.n	8013718 <__sfputs_r+0x22>
 8013708:	f814 1b01 	ldrb.w	r1, [r4], #1
 801370c:	463a      	mov	r2, r7
 801370e:	4630      	mov	r0, r6
 8013710:	f7ff ffda 	bl	80136c8 <__sfputc_r>
 8013714:	1c43      	adds	r3, r0, #1
 8013716:	d1f3      	bne.n	8013700 <__sfputs_r+0xa>
 8013718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801371c <_vfiprintf_r>:
 801371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013720:	460d      	mov	r5, r1
 8013722:	b09d      	sub	sp, #116	@ 0x74
 8013724:	4614      	mov	r4, r2
 8013726:	4698      	mov	r8, r3
 8013728:	4606      	mov	r6, r0
 801372a:	b118      	cbz	r0, 8013734 <_vfiprintf_r+0x18>
 801372c:	6a03      	ldr	r3, [r0, #32]
 801372e:	b90b      	cbnz	r3, 8013734 <_vfiprintf_r+0x18>
 8013730:	f7fe fbda 	bl	8011ee8 <__sinit>
 8013734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013736:	07d9      	lsls	r1, r3, #31
 8013738:	d405      	bmi.n	8013746 <_vfiprintf_r+0x2a>
 801373a:	89ab      	ldrh	r3, [r5, #12]
 801373c:	059a      	lsls	r2, r3, #22
 801373e:	d402      	bmi.n	8013746 <_vfiprintf_r+0x2a>
 8013740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013742:	f7fe fd5c 	bl	80121fe <__retarget_lock_acquire_recursive>
 8013746:	89ab      	ldrh	r3, [r5, #12]
 8013748:	071b      	lsls	r3, r3, #28
 801374a:	d501      	bpl.n	8013750 <_vfiprintf_r+0x34>
 801374c:	692b      	ldr	r3, [r5, #16]
 801374e:	b99b      	cbnz	r3, 8013778 <_vfiprintf_r+0x5c>
 8013750:	4629      	mov	r1, r5
 8013752:	4630      	mov	r0, r6
 8013754:	f7fe fc80 	bl	8012058 <__swsetup_r>
 8013758:	b170      	cbz	r0, 8013778 <_vfiprintf_r+0x5c>
 801375a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801375c:	07dc      	lsls	r4, r3, #31
 801375e:	d504      	bpl.n	801376a <_vfiprintf_r+0x4e>
 8013760:	f04f 30ff 	mov.w	r0, #4294967295
 8013764:	b01d      	add	sp, #116	@ 0x74
 8013766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801376a:	89ab      	ldrh	r3, [r5, #12]
 801376c:	0598      	lsls	r0, r3, #22
 801376e:	d4f7      	bmi.n	8013760 <_vfiprintf_r+0x44>
 8013770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013772:	f7fe fd45 	bl	8012200 <__retarget_lock_release_recursive>
 8013776:	e7f3      	b.n	8013760 <_vfiprintf_r+0x44>
 8013778:	2300      	movs	r3, #0
 801377a:	9309      	str	r3, [sp, #36]	@ 0x24
 801377c:	2320      	movs	r3, #32
 801377e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013782:	f8cd 800c 	str.w	r8, [sp, #12]
 8013786:	2330      	movs	r3, #48	@ 0x30
 8013788:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013938 <_vfiprintf_r+0x21c>
 801378c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013790:	f04f 0901 	mov.w	r9, #1
 8013794:	4623      	mov	r3, r4
 8013796:	469a      	mov	sl, r3
 8013798:	f813 2b01 	ldrb.w	r2, [r3], #1
 801379c:	b10a      	cbz	r2, 80137a2 <_vfiprintf_r+0x86>
 801379e:	2a25      	cmp	r2, #37	@ 0x25
 80137a0:	d1f9      	bne.n	8013796 <_vfiprintf_r+0x7a>
 80137a2:	ebba 0b04 	subs.w	fp, sl, r4
 80137a6:	d00b      	beq.n	80137c0 <_vfiprintf_r+0xa4>
 80137a8:	465b      	mov	r3, fp
 80137aa:	4622      	mov	r2, r4
 80137ac:	4629      	mov	r1, r5
 80137ae:	4630      	mov	r0, r6
 80137b0:	f7ff ffa1 	bl	80136f6 <__sfputs_r>
 80137b4:	3001      	adds	r0, #1
 80137b6:	f000 80a7 	beq.w	8013908 <_vfiprintf_r+0x1ec>
 80137ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80137bc:	445a      	add	r2, fp
 80137be:	9209      	str	r2, [sp, #36]	@ 0x24
 80137c0:	f89a 3000 	ldrb.w	r3, [sl]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	f000 809f 	beq.w	8013908 <_vfiprintf_r+0x1ec>
 80137ca:	2300      	movs	r3, #0
 80137cc:	f04f 32ff 	mov.w	r2, #4294967295
 80137d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137d4:	f10a 0a01 	add.w	sl, sl, #1
 80137d8:	9304      	str	r3, [sp, #16]
 80137da:	9307      	str	r3, [sp, #28]
 80137dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80137e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80137e2:	4654      	mov	r4, sl
 80137e4:	2205      	movs	r2, #5
 80137e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137ea:	4853      	ldr	r0, [pc, #332]	@ (8013938 <_vfiprintf_r+0x21c>)
 80137ec:	f7ec fd78 	bl	80002e0 <memchr>
 80137f0:	9a04      	ldr	r2, [sp, #16]
 80137f2:	b9d8      	cbnz	r0, 801382c <_vfiprintf_r+0x110>
 80137f4:	06d1      	lsls	r1, r2, #27
 80137f6:	bf44      	itt	mi
 80137f8:	2320      	movmi	r3, #32
 80137fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80137fe:	0713      	lsls	r3, r2, #28
 8013800:	bf44      	itt	mi
 8013802:	232b      	movmi	r3, #43	@ 0x2b
 8013804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013808:	f89a 3000 	ldrb.w	r3, [sl]
 801380c:	2b2a      	cmp	r3, #42	@ 0x2a
 801380e:	d015      	beq.n	801383c <_vfiprintf_r+0x120>
 8013810:	9a07      	ldr	r2, [sp, #28]
 8013812:	4654      	mov	r4, sl
 8013814:	2000      	movs	r0, #0
 8013816:	f04f 0c0a 	mov.w	ip, #10
 801381a:	4621      	mov	r1, r4
 801381c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013820:	3b30      	subs	r3, #48	@ 0x30
 8013822:	2b09      	cmp	r3, #9
 8013824:	d94b      	bls.n	80138be <_vfiprintf_r+0x1a2>
 8013826:	b1b0      	cbz	r0, 8013856 <_vfiprintf_r+0x13a>
 8013828:	9207      	str	r2, [sp, #28]
 801382a:	e014      	b.n	8013856 <_vfiprintf_r+0x13a>
 801382c:	eba0 0308 	sub.w	r3, r0, r8
 8013830:	fa09 f303 	lsl.w	r3, r9, r3
 8013834:	4313      	orrs	r3, r2
 8013836:	9304      	str	r3, [sp, #16]
 8013838:	46a2      	mov	sl, r4
 801383a:	e7d2      	b.n	80137e2 <_vfiprintf_r+0xc6>
 801383c:	9b03      	ldr	r3, [sp, #12]
 801383e:	1d19      	adds	r1, r3, #4
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	9103      	str	r1, [sp, #12]
 8013844:	2b00      	cmp	r3, #0
 8013846:	bfbb      	ittet	lt
 8013848:	425b      	neglt	r3, r3
 801384a:	f042 0202 	orrlt.w	r2, r2, #2
 801384e:	9307      	strge	r3, [sp, #28]
 8013850:	9307      	strlt	r3, [sp, #28]
 8013852:	bfb8      	it	lt
 8013854:	9204      	strlt	r2, [sp, #16]
 8013856:	7823      	ldrb	r3, [r4, #0]
 8013858:	2b2e      	cmp	r3, #46	@ 0x2e
 801385a:	d10a      	bne.n	8013872 <_vfiprintf_r+0x156>
 801385c:	7863      	ldrb	r3, [r4, #1]
 801385e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013860:	d132      	bne.n	80138c8 <_vfiprintf_r+0x1ac>
 8013862:	9b03      	ldr	r3, [sp, #12]
 8013864:	1d1a      	adds	r2, r3, #4
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	9203      	str	r2, [sp, #12]
 801386a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801386e:	3402      	adds	r4, #2
 8013870:	9305      	str	r3, [sp, #20]
 8013872:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013948 <_vfiprintf_r+0x22c>
 8013876:	7821      	ldrb	r1, [r4, #0]
 8013878:	2203      	movs	r2, #3
 801387a:	4650      	mov	r0, sl
 801387c:	f7ec fd30 	bl	80002e0 <memchr>
 8013880:	b138      	cbz	r0, 8013892 <_vfiprintf_r+0x176>
 8013882:	9b04      	ldr	r3, [sp, #16]
 8013884:	eba0 000a 	sub.w	r0, r0, sl
 8013888:	2240      	movs	r2, #64	@ 0x40
 801388a:	4082      	lsls	r2, r0
 801388c:	4313      	orrs	r3, r2
 801388e:	3401      	adds	r4, #1
 8013890:	9304      	str	r3, [sp, #16]
 8013892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013896:	4829      	ldr	r0, [pc, #164]	@ (801393c <_vfiprintf_r+0x220>)
 8013898:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801389c:	2206      	movs	r2, #6
 801389e:	f7ec fd1f 	bl	80002e0 <memchr>
 80138a2:	2800      	cmp	r0, #0
 80138a4:	d03f      	beq.n	8013926 <_vfiprintf_r+0x20a>
 80138a6:	4b26      	ldr	r3, [pc, #152]	@ (8013940 <_vfiprintf_r+0x224>)
 80138a8:	bb1b      	cbnz	r3, 80138f2 <_vfiprintf_r+0x1d6>
 80138aa:	9b03      	ldr	r3, [sp, #12]
 80138ac:	3307      	adds	r3, #7
 80138ae:	f023 0307 	bic.w	r3, r3, #7
 80138b2:	3308      	adds	r3, #8
 80138b4:	9303      	str	r3, [sp, #12]
 80138b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138b8:	443b      	add	r3, r7
 80138ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80138bc:	e76a      	b.n	8013794 <_vfiprintf_r+0x78>
 80138be:	fb0c 3202 	mla	r2, ip, r2, r3
 80138c2:	460c      	mov	r4, r1
 80138c4:	2001      	movs	r0, #1
 80138c6:	e7a8      	b.n	801381a <_vfiprintf_r+0xfe>
 80138c8:	2300      	movs	r3, #0
 80138ca:	3401      	adds	r4, #1
 80138cc:	9305      	str	r3, [sp, #20]
 80138ce:	4619      	mov	r1, r3
 80138d0:	f04f 0c0a 	mov.w	ip, #10
 80138d4:	4620      	mov	r0, r4
 80138d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138da:	3a30      	subs	r2, #48	@ 0x30
 80138dc:	2a09      	cmp	r2, #9
 80138de:	d903      	bls.n	80138e8 <_vfiprintf_r+0x1cc>
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d0c6      	beq.n	8013872 <_vfiprintf_r+0x156>
 80138e4:	9105      	str	r1, [sp, #20]
 80138e6:	e7c4      	b.n	8013872 <_vfiprintf_r+0x156>
 80138e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80138ec:	4604      	mov	r4, r0
 80138ee:	2301      	movs	r3, #1
 80138f0:	e7f0      	b.n	80138d4 <_vfiprintf_r+0x1b8>
 80138f2:	ab03      	add	r3, sp, #12
 80138f4:	9300      	str	r3, [sp, #0]
 80138f6:	462a      	mov	r2, r5
 80138f8:	4b12      	ldr	r3, [pc, #72]	@ (8013944 <_vfiprintf_r+0x228>)
 80138fa:	a904      	add	r1, sp, #16
 80138fc:	4630      	mov	r0, r6
 80138fe:	f7fd febf 	bl	8011680 <_printf_float>
 8013902:	4607      	mov	r7, r0
 8013904:	1c78      	adds	r0, r7, #1
 8013906:	d1d6      	bne.n	80138b6 <_vfiprintf_r+0x19a>
 8013908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801390a:	07d9      	lsls	r1, r3, #31
 801390c:	d405      	bmi.n	801391a <_vfiprintf_r+0x1fe>
 801390e:	89ab      	ldrh	r3, [r5, #12]
 8013910:	059a      	lsls	r2, r3, #22
 8013912:	d402      	bmi.n	801391a <_vfiprintf_r+0x1fe>
 8013914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013916:	f7fe fc73 	bl	8012200 <__retarget_lock_release_recursive>
 801391a:	89ab      	ldrh	r3, [r5, #12]
 801391c:	065b      	lsls	r3, r3, #25
 801391e:	f53f af1f 	bmi.w	8013760 <_vfiprintf_r+0x44>
 8013922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013924:	e71e      	b.n	8013764 <_vfiprintf_r+0x48>
 8013926:	ab03      	add	r3, sp, #12
 8013928:	9300      	str	r3, [sp, #0]
 801392a:	462a      	mov	r2, r5
 801392c:	4b05      	ldr	r3, [pc, #20]	@ (8013944 <_vfiprintf_r+0x228>)
 801392e:	a904      	add	r1, sp, #16
 8013930:	4630      	mov	r0, r6
 8013932:	f7fe f92d 	bl	8011b90 <_printf_i>
 8013936:	e7e4      	b.n	8013902 <_vfiprintf_r+0x1e6>
 8013938:	08014040 	.word	0x08014040
 801393c:	0801404a 	.word	0x0801404a
 8013940:	08011681 	.word	0x08011681
 8013944:	080136f7 	.word	0x080136f7
 8013948:	08014046 	.word	0x08014046

0801394c <__sflush_r>:
 801394c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013954:	0716      	lsls	r6, r2, #28
 8013956:	4605      	mov	r5, r0
 8013958:	460c      	mov	r4, r1
 801395a:	d454      	bmi.n	8013a06 <__sflush_r+0xba>
 801395c:	684b      	ldr	r3, [r1, #4]
 801395e:	2b00      	cmp	r3, #0
 8013960:	dc02      	bgt.n	8013968 <__sflush_r+0x1c>
 8013962:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013964:	2b00      	cmp	r3, #0
 8013966:	dd48      	ble.n	80139fa <__sflush_r+0xae>
 8013968:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801396a:	2e00      	cmp	r6, #0
 801396c:	d045      	beq.n	80139fa <__sflush_r+0xae>
 801396e:	2300      	movs	r3, #0
 8013970:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013974:	682f      	ldr	r7, [r5, #0]
 8013976:	6a21      	ldr	r1, [r4, #32]
 8013978:	602b      	str	r3, [r5, #0]
 801397a:	d030      	beq.n	80139de <__sflush_r+0x92>
 801397c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801397e:	89a3      	ldrh	r3, [r4, #12]
 8013980:	0759      	lsls	r1, r3, #29
 8013982:	d505      	bpl.n	8013990 <__sflush_r+0x44>
 8013984:	6863      	ldr	r3, [r4, #4]
 8013986:	1ad2      	subs	r2, r2, r3
 8013988:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801398a:	b10b      	cbz	r3, 8013990 <__sflush_r+0x44>
 801398c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801398e:	1ad2      	subs	r2, r2, r3
 8013990:	2300      	movs	r3, #0
 8013992:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013994:	6a21      	ldr	r1, [r4, #32]
 8013996:	4628      	mov	r0, r5
 8013998:	47b0      	blx	r6
 801399a:	1c43      	adds	r3, r0, #1
 801399c:	89a3      	ldrh	r3, [r4, #12]
 801399e:	d106      	bne.n	80139ae <__sflush_r+0x62>
 80139a0:	6829      	ldr	r1, [r5, #0]
 80139a2:	291d      	cmp	r1, #29
 80139a4:	d82b      	bhi.n	80139fe <__sflush_r+0xb2>
 80139a6:	4a2a      	ldr	r2, [pc, #168]	@ (8013a50 <__sflush_r+0x104>)
 80139a8:	410a      	asrs	r2, r1
 80139aa:	07d6      	lsls	r6, r2, #31
 80139ac:	d427      	bmi.n	80139fe <__sflush_r+0xb2>
 80139ae:	2200      	movs	r2, #0
 80139b0:	6062      	str	r2, [r4, #4]
 80139b2:	04d9      	lsls	r1, r3, #19
 80139b4:	6922      	ldr	r2, [r4, #16]
 80139b6:	6022      	str	r2, [r4, #0]
 80139b8:	d504      	bpl.n	80139c4 <__sflush_r+0x78>
 80139ba:	1c42      	adds	r2, r0, #1
 80139bc:	d101      	bne.n	80139c2 <__sflush_r+0x76>
 80139be:	682b      	ldr	r3, [r5, #0]
 80139c0:	b903      	cbnz	r3, 80139c4 <__sflush_r+0x78>
 80139c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80139c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80139c6:	602f      	str	r7, [r5, #0]
 80139c8:	b1b9      	cbz	r1, 80139fa <__sflush_r+0xae>
 80139ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80139ce:	4299      	cmp	r1, r3
 80139d0:	d002      	beq.n	80139d8 <__sflush_r+0x8c>
 80139d2:	4628      	mov	r0, r5
 80139d4:	f7ff f9f6 	bl	8012dc4 <_free_r>
 80139d8:	2300      	movs	r3, #0
 80139da:	6363      	str	r3, [r4, #52]	@ 0x34
 80139dc:	e00d      	b.n	80139fa <__sflush_r+0xae>
 80139de:	2301      	movs	r3, #1
 80139e0:	4628      	mov	r0, r5
 80139e2:	47b0      	blx	r6
 80139e4:	4602      	mov	r2, r0
 80139e6:	1c50      	adds	r0, r2, #1
 80139e8:	d1c9      	bne.n	801397e <__sflush_r+0x32>
 80139ea:	682b      	ldr	r3, [r5, #0]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d0c6      	beq.n	801397e <__sflush_r+0x32>
 80139f0:	2b1d      	cmp	r3, #29
 80139f2:	d001      	beq.n	80139f8 <__sflush_r+0xac>
 80139f4:	2b16      	cmp	r3, #22
 80139f6:	d11e      	bne.n	8013a36 <__sflush_r+0xea>
 80139f8:	602f      	str	r7, [r5, #0]
 80139fa:	2000      	movs	r0, #0
 80139fc:	e022      	b.n	8013a44 <__sflush_r+0xf8>
 80139fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a02:	b21b      	sxth	r3, r3
 8013a04:	e01b      	b.n	8013a3e <__sflush_r+0xf2>
 8013a06:	690f      	ldr	r7, [r1, #16]
 8013a08:	2f00      	cmp	r7, #0
 8013a0a:	d0f6      	beq.n	80139fa <__sflush_r+0xae>
 8013a0c:	0793      	lsls	r3, r2, #30
 8013a0e:	680e      	ldr	r6, [r1, #0]
 8013a10:	bf08      	it	eq
 8013a12:	694b      	ldreq	r3, [r1, #20]
 8013a14:	600f      	str	r7, [r1, #0]
 8013a16:	bf18      	it	ne
 8013a18:	2300      	movne	r3, #0
 8013a1a:	eba6 0807 	sub.w	r8, r6, r7
 8013a1e:	608b      	str	r3, [r1, #8]
 8013a20:	f1b8 0f00 	cmp.w	r8, #0
 8013a24:	dde9      	ble.n	80139fa <__sflush_r+0xae>
 8013a26:	6a21      	ldr	r1, [r4, #32]
 8013a28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013a2a:	4643      	mov	r3, r8
 8013a2c:	463a      	mov	r2, r7
 8013a2e:	4628      	mov	r0, r5
 8013a30:	47b0      	blx	r6
 8013a32:	2800      	cmp	r0, #0
 8013a34:	dc08      	bgt.n	8013a48 <__sflush_r+0xfc>
 8013a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a3e:	81a3      	strh	r3, [r4, #12]
 8013a40:	f04f 30ff 	mov.w	r0, #4294967295
 8013a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a48:	4407      	add	r7, r0
 8013a4a:	eba8 0800 	sub.w	r8, r8, r0
 8013a4e:	e7e7      	b.n	8013a20 <__sflush_r+0xd4>
 8013a50:	dfbffffe 	.word	0xdfbffffe

08013a54 <_fflush_r>:
 8013a54:	b538      	push	{r3, r4, r5, lr}
 8013a56:	690b      	ldr	r3, [r1, #16]
 8013a58:	4605      	mov	r5, r0
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	b913      	cbnz	r3, 8013a64 <_fflush_r+0x10>
 8013a5e:	2500      	movs	r5, #0
 8013a60:	4628      	mov	r0, r5
 8013a62:	bd38      	pop	{r3, r4, r5, pc}
 8013a64:	b118      	cbz	r0, 8013a6e <_fflush_r+0x1a>
 8013a66:	6a03      	ldr	r3, [r0, #32]
 8013a68:	b90b      	cbnz	r3, 8013a6e <_fflush_r+0x1a>
 8013a6a:	f7fe fa3d 	bl	8011ee8 <__sinit>
 8013a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d0f3      	beq.n	8013a5e <_fflush_r+0xa>
 8013a76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013a78:	07d0      	lsls	r0, r2, #31
 8013a7a:	d404      	bmi.n	8013a86 <_fflush_r+0x32>
 8013a7c:	0599      	lsls	r1, r3, #22
 8013a7e:	d402      	bmi.n	8013a86 <_fflush_r+0x32>
 8013a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013a82:	f7fe fbbc 	bl	80121fe <__retarget_lock_acquire_recursive>
 8013a86:	4628      	mov	r0, r5
 8013a88:	4621      	mov	r1, r4
 8013a8a:	f7ff ff5f 	bl	801394c <__sflush_r>
 8013a8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013a90:	07da      	lsls	r2, r3, #31
 8013a92:	4605      	mov	r5, r0
 8013a94:	d4e4      	bmi.n	8013a60 <_fflush_r+0xc>
 8013a96:	89a3      	ldrh	r3, [r4, #12]
 8013a98:	059b      	lsls	r3, r3, #22
 8013a9a:	d4e1      	bmi.n	8013a60 <_fflush_r+0xc>
 8013a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013a9e:	f7fe fbaf 	bl	8012200 <__retarget_lock_release_recursive>
 8013aa2:	e7dd      	b.n	8013a60 <_fflush_r+0xc>

08013aa4 <__swhatbuf_r>:
 8013aa4:	b570      	push	{r4, r5, r6, lr}
 8013aa6:	460c      	mov	r4, r1
 8013aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aac:	2900      	cmp	r1, #0
 8013aae:	b096      	sub	sp, #88	@ 0x58
 8013ab0:	4615      	mov	r5, r2
 8013ab2:	461e      	mov	r6, r3
 8013ab4:	da0d      	bge.n	8013ad2 <__swhatbuf_r+0x2e>
 8013ab6:	89a3      	ldrh	r3, [r4, #12]
 8013ab8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013abc:	f04f 0100 	mov.w	r1, #0
 8013ac0:	bf14      	ite	ne
 8013ac2:	2340      	movne	r3, #64	@ 0x40
 8013ac4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013ac8:	2000      	movs	r0, #0
 8013aca:	6031      	str	r1, [r6, #0]
 8013acc:	602b      	str	r3, [r5, #0]
 8013ace:	b016      	add	sp, #88	@ 0x58
 8013ad0:	bd70      	pop	{r4, r5, r6, pc}
 8013ad2:	466a      	mov	r2, sp
 8013ad4:	f000 f848 	bl	8013b68 <_fstat_r>
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	dbec      	blt.n	8013ab6 <__swhatbuf_r+0x12>
 8013adc:	9901      	ldr	r1, [sp, #4]
 8013ade:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013ae2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013ae6:	4259      	negs	r1, r3
 8013ae8:	4159      	adcs	r1, r3
 8013aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013aee:	e7eb      	b.n	8013ac8 <__swhatbuf_r+0x24>

08013af0 <__smakebuf_r>:
 8013af0:	898b      	ldrh	r3, [r1, #12]
 8013af2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013af4:	079d      	lsls	r5, r3, #30
 8013af6:	4606      	mov	r6, r0
 8013af8:	460c      	mov	r4, r1
 8013afa:	d507      	bpl.n	8013b0c <__smakebuf_r+0x1c>
 8013afc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013b00:	6023      	str	r3, [r4, #0]
 8013b02:	6123      	str	r3, [r4, #16]
 8013b04:	2301      	movs	r3, #1
 8013b06:	6163      	str	r3, [r4, #20]
 8013b08:	b003      	add	sp, #12
 8013b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b0c:	ab01      	add	r3, sp, #4
 8013b0e:	466a      	mov	r2, sp
 8013b10:	f7ff ffc8 	bl	8013aa4 <__swhatbuf_r>
 8013b14:	9f00      	ldr	r7, [sp, #0]
 8013b16:	4605      	mov	r5, r0
 8013b18:	4639      	mov	r1, r7
 8013b1a:	4630      	mov	r0, r6
 8013b1c:	f7ff f9c6 	bl	8012eac <_malloc_r>
 8013b20:	b948      	cbnz	r0, 8013b36 <__smakebuf_r+0x46>
 8013b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b26:	059a      	lsls	r2, r3, #22
 8013b28:	d4ee      	bmi.n	8013b08 <__smakebuf_r+0x18>
 8013b2a:	f023 0303 	bic.w	r3, r3, #3
 8013b2e:	f043 0302 	orr.w	r3, r3, #2
 8013b32:	81a3      	strh	r3, [r4, #12]
 8013b34:	e7e2      	b.n	8013afc <__smakebuf_r+0xc>
 8013b36:	89a3      	ldrh	r3, [r4, #12]
 8013b38:	6020      	str	r0, [r4, #0]
 8013b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013b3e:	81a3      	strh	r3, [r4, #12]
 8013b40:	9b01      	ldr	r3, [sp, #4]
 8013b42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013b46:	b15b      	cbz	r3, 8013b60 <__smakebuf_r+0x70>
 8013b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b4c:	4630      	mov	r0, r6
 8013b4e:	f000 f81d 	bl	8013b8c <_isatty_r>
 8013b52:	b128      	cbz	r0, 8013b60 <__smakebuf_r+0x70>
 8013b54:	89a3      	ldrh	r3, [r4, #12]
 8013b56:	f023 0303 	bic.w	r3, r3, #3
 8013b5a:	f043 0301 	orr.w	r3, r3, #1
 8013b5e:	81a3      	strh	r3, [r4, #12]
 8013b60:	89a3      	ldrh	r3, [r4, #12]
 8013b62:	431d      	orrs	r5, r3
 8013b64:	81a5      	strh	r5, [r4, #12]
 8013b66:	e7cf      	b.n	8013b08 <__smakebuf_r+0x18>

08013b68 <_fstat_r>:
 8013b68:	b538      	push	{r3, r4, r5, lr}
 8013b6a:	4d07      	ldr	r5, [pc, #28]	@ (8013b88 <_fstat_r+0x20>)
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	4604      	mov	r4, r0
 8013b70:	4608      	mov	r0, r1
 8013b72:	4611      	mov	r1, r2
 8013b74:	602b      	str	r3, [r5, #0]
 8013b76:	f7ed fddf 	bl	8001738 <_fstat>
 8013b7a:	1c43      	adds	r3, r0, #1
 8013b7c:	d102      	bne.n	8013b84 <_fstat_r+0x1c>
 8013b7e:	682b      	ldr	r3, [r5, #0]
 8013b80:	b103      	cbz	r3, 8013b84 <_fstat_r+0x1c>
 8013b82:	6023      	str	r3, [r4, #0]
 8013b84:	bd38      	pop	{r3, r4, r5, pc}
 8013b86:	bf00      	nop
 8013b88:	240013f8 	.word	0x240013f8

08013b8c <_isatty_r>:
 8013b8c:	b538      	push	{r3, r4, r5, lr}
 8013b8e:	4d06      	ldr	r5, [pc, #24]	@ (8013ba8 <_isatty_r+0x1c>)
 8013b90:	2300      	movs	r3, #0
 8013b92:	4604      	mov	r4, r0
 8013b94:	4608      	mov	r0, r1
 8013b96:	602b      	str	r3, [r5, #0]
 8013b98:	f7ed fdde 	bl	8001758 <_isatty>
 8013b9c:	1c43      	adds	r3, r0, #1
 8013b9e:	d102      	bne.n	8013ba6 <_isatty_r+0x1a>
 8013ba0:	682b      	ldr	r3, [r5, #0]
 8013ba2:	b103      	cbz	r3, 8013ba6 <_isatty_r+0x1a>
 8013ba4:	6023      	str	r3, [r4, #0]
 8013ba6:	bd38      	pop	{r3, r4, r5, pc}
 8013ba8:	240013f8 	.word	0x240013f8

08013bac <_sbrk_r>:
 8013bac:	b538      	push	{r3, r4, r5, lr}
 8013bae:	4d06      	ldr	r5, [pc, #24]	@ (8013bc8 <_sbrk_r+0x1c>)
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	4608      	mov	r0, r1
 8013bb6:	602b      	str	r3, [r5, #0]
 8013bb8:	f7ed fde6 	bl	8001788 <_sbrk>
 8013bbc:	1c43      	adds	r3, r0, #1
 8013bbe:	d102      	bne.n	8013bc6 <_sbrk_r+0x1a>
 8013bc0:	682b      	ldr	r3, [r5, #0]
 8013bc2:	b103      	cbz	r3, 8013bc6 <_sbrk_r+0x1a>
 8013bc4:	6023      	str	r3, [r4, #0]
 8013bc6:	bd38      	pop	{r3, r4, r5, pc}
 8013bc8:	240013f8 	.word	0x240013f8

08013bcc <memcpy>:
 8013bcc:	440a      	add	r2, r1
 8013bce:	4291      	cmp	r1, r2
 8013bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8013bd4:	d100      	bne.n	8013bd8 <memcpy+0xc>
 8013bd6:	4770      	bx	lr
 8013bd8:	b510      	push	{r4, lr}
 8013bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013be2:	4291      	cmp	r1, r2
 8013be4:	d1f9      	bne.n	8013bda <memcpy+0xe>
 8013be6:	bd10      	pop	{r4, pc}

08013be8 <__assert_func>:
 8013be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013bea:	4614      	mov	r4, r2
 8013bec:	461a      	mov	r2, r3
 8013bee:	4b09      	ldr	r3, [pc, #36]	@ (8013c14 <__assert_func+0x2c>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	4605      	mov	r5, r0
 8013bf4:	68d8      	ldr	r0, [r3, #12]
 8013bf6:	b954      	cbnz	r4, 8013c0e <__assert_func+0x26>
 8013bf8:	4b07      	ldr	r3, [pc, #28]	@ (8013c18 <__assert_func+0x30>)
 8013bfa:	461c      	mov	r4, r3
 8013bfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c00:	9100      	str	r1, [sp, #0]
 8013c02:	462b      	mov	r3, r5
 8013c04:	4905      	ldr	r1, [pc, #20]	@ (8013c1c <__assert_func+0x34>)
 8013c06:	f000 f841 	bl	8013c8c <fiprintf>
 8013c0a:	f000 f851 	bl	8013cb0 <abort>
 8013c0e:	4b04      	ldr	r3, [pc, #16]	@ (8013c20 <__assert_func+0x38>)
 8013c10:	e7f4      	b.n	8013bfc <__assert_func+0x14>
 8013c12:	bf00      	nop
 8013c14:	24000110 	.word	0x24000110
 8013c18:	08014096 	.word	0x08014096
 8013c1c:	08014068 	.word	0x08014068
 8013c20:	0801405b 	.word	0x0801405b

08013c24 <_calloc_r>:
 8013c24:	b570      	push	{r4, r5, r6, lr}
 8013c26:	fba1 5402 	umull	r5, r4, r1, r2
 8013c2a:	b93c      	cbnz	r4, 8013c3c <_calloc_r+0x18>
 8013c2c:	4629      	mov	r1, r5
 8013c2e:	f7ff f93d 	bl	8012eac <_malloc_r>
 8013c32:	4606      	mov	r6, r0
 8013c34:	b928      	cbnz	r0, 8013c42 <_calloc_r+0x1e>
 8013c36:	2600      	movs	r6, #0
 8013c38:	4630      	mov	r0, r6
 8013c3a:	bd70      	pop	{r4, r5, r6, pc}
 8013c3c:	220c      	movs	r2, #12
 8013c3e:	6002      	str	r2, [r0, #0]
 8013c40:	e7f9      	b.n	8013c36 <_calloc_r+0x12>
 8013c42:	462a      	mov	r2, r5
 8013c44:	4621      	mov	r1, r4
 8013c46:	f7fe fa5d 	bl	8012104 <memset>
 8013c4a:	e7f5      	b.n	8013c38 <_calloc_r+0x14>

08013c4c <__ascii_mbtowc>:
 8013c4c:	b082      	sub	sp, #8
 8013c4e:	b901      	cbnz	r1, 8013c52 <__ascii_mbtowc+0x6>
 8013c50:	a901      	add	r1, sp, #4
 8013c52:	b142      	cbz	r2, 8013c66 <__ascii_mbtowc+0x1a>
 8013c54:	b14b      	cbz	r3, 8013c6a <__ascii_mbtowc+0x1e>
 8013c56:	7813      	ldrb	r3, [r2, #0]
 8013c58:	600b      	str	r3, [r1, #0]
 8013c5a:	7812      	ldrb	r2, [r2, #0]
 8013c5c:	1e10      	subs	r0, r2, #0
 8013c5e:	bf18      	it	ne
 8013c60:	2001      	movne	r0, #1
 8013c62:	b002      	add	sp, #8
 8013c64:	4770      	bx	lr
 8013c66:	4610      	mov	r0, r2
 8013c68:	e7fb      	b.n	8013c62 <__ascii_mbtowc+0x16>
 8013c6a:	f06f 0001 	mvn.w	r0, #1
 8013c6e:	e7f8      	b.n	8013c62 <__ascii_mbtowc+0x16>

08013c70 <__ascii_wctomb>:
 8013c70:	4603      	mov	r3, r0
 8013c72:	4608      	mov	r0, r1
 8013c74:	b141      	cbz	r1, 8013c88 <__ascii_wctomb+0x18>
 8013c76:	2aff      	cmp	r2, #255	@ 0xff
 8013c78:	d904      	bls.n	8013c84 <__ascii_wctomb+0x14>
 8013c7a:	228a      	movs	r2, #138	@ 0x8a
 8013c7c:	601a      	str	r2, [r3, #0]
 8013c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c82:	4770      	bx	lr
 8013c84:	700a      	strb	r2, [r1, #0]
 8013c86:	2001      	movs	r0, #1
 8013c88:	4770      	bx	lr
	...

08013c8c <fiprintf>:
 8013c8c:	b40e      	push	{r1, r2, r3}
 8013c8e:	b503      	push	{r0, r1, lr}
 8013c90:	4601      	mov	r1, r0
 8013c92:	ab03      	add	r3, sp, #12
 8013c94:	4805      	ldr	r0, [pc, #20]	@ (8013cac <fiprintf+0x20>)
 8013c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c9a:	6800      	ldr	r0, [r0, #0]
 8013c9c:	9301      	str	r3, [sp, #4]
 8013c9e:	f7ff fd3d 	bl	801371c <_vfiprintf_r>
 8013ca2:	b002      	add	sp, #8
 8013ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ca8:	b003      	add	sp, #12
 8013caa:	4770      	bx	lr
 8013cac:	24000110 	.word	0x24000110

08013cb0 <abort>:
 8013cb0:	b508      	push	{r3, lr}
 8013cb2:	2006      	movs	r0, #6
 8013cb4:	f000 f82c 	bl	8013d10 <raise>
 8013cb8:	2001      	movs	r0, #1
 8013cba:	f7ed fd09 	bl	80016d0 <_exit>

08013cbe <_raise_r>:
 8013cbe:	291f      	cmp	r1, #31
 8013cc0:	b538      	push	{r3, r4, r5, lr}
 8013cc2:	4605      	mov	r5, r0
 8013cc4:	460c      	mov	r4, r1
 8013cc6:	d904      	bls.n	8013cd2 <_raise_r+0x14>
 8013cc8:	2316      	movs	r3, #22
 8013cca:	6003      	str	r3, [r0, #0]
 8013ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8013cd0:	bd38      	pop	{r3, r4, r5, pc}
 8013cd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013cd4:	b112      	cbz	r2, 8013cdc <_raise_r+0x1e>
 8013cd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013cda:	b94b      	cbnz	r3, 8013cf0 <_raise_r+0x32>
 8013cdc:	4628      	mov	r0, r5
 8013cde:	f000 f831 	bl	8013d44 <_getpid_r>
 8013ce2:	4622      	mov	r2, r4
 8013ce4:	4601      	mov	r1, r0
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cec:	f000 b818 	b.w	8013d20 <_kill_r>
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d00a      	beq.n	8013d0a <_raise_r+0x4c>
 8013cf4:	1c59      	adds	r1, r3, #1
 8013cf6:	d103      	bne.n	8013d00 <_raise_r+0x42>
 8013cf8:	2316      	movs	r3, #22
 8013cfa:	6003      	str	r3, [r0, #0]
 8013cfc:	2001      	movs	r0, #1
 8013cfe:	e7e7      	b.n	8013cd0 <_raise_r+0x12>
 8013d00:	2100      	movs	r1, #0
 8013d02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013d06:	4620      	mov	r0, r4
 8013d08:	4798      	blx	r3
 8013d0a:	2000      	movs	r0, #0
 8013d0c:	e7e0      	b.n	8013cd0 <_raise_r+0x12>
	...

08013d10 <raise>:
 8013d10:	4b02      	ldr	r3, [pc, #8]	@ (8013d1c <raise+0xc>)
 8013d12:	4601      	mov	r1, r0
 8013d14:	6818      	ldr	r0, [r3, #0]
 8013d16:	f7ff bfd2 	b.w	8013cbe <_raise_r>
 8013d1a:	bf00      	nop
 8013d1c:	24000110 	.word	0x24000110

08013d20 <_kill_r>:
 8013d20:	b538      	push	{r3, r4, r5, lr}
 8013d22:	4d07      	ldr	r5, [pc, #28]	@ (8013d40 <_kill_r+0x20>)
 8013d24:	2300      	movs	r3, #0
 8013d26:	4604      	mov	r4, r0
 8013d28:	4608      	mov	r0, r1
 8013d2a:	4611      	mov	r1, r2
 8013d2c:	602b      	str	r3, [r5, #0]
 8013d2e:	f7ed fcbf 	bl	80016b0 <_kill>
 8013d32:	1c43      	adds	r3, r0, #1
 8013d34:	d102      	bne.n	8013d3c <_kill_r+0x1c>
 8013d36:	682b      	ldr	r3, [r5, #0]
 8013d38:	b103      	cbz	r3, 8013d3c <_kill_r+0x1c>
 8013d3a:	6023      	str	r3, [r4, #0]
 8013d3c:	bd38      	pop	{r3, r4, r5, pc}
 8013d3e:	bf00      	nop
 8013d40:	240013f8 	.word	0x240013f8

08013d44 <_getpid_r>:
 8013d44:	f7ed bcac 	b.w	80016a0 <_getpid>

08013d48 <_init>:
 8013d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d4a:	bf00      	nop
 8013d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d4e:	bc08      	pop	{r3}
 8013d50:	469e      	mov	lr, r3
 8013d52:	4770      	bx	lr

08013d54 <_fini>:
 8013d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d56:	bf00      	nop
 8013d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d5a:	bc08      	pop	{r3}
 8013d5c:	469e      	mov	lr, r3
 8013d5e:	4770      	bx	lr
