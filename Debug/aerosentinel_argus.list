
aerosentinel_argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018a78  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002110  08018d18  08018d18  00019d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ae28  0801ae28  0001be28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ae30  0801ae30  0001be30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ae34  0801ae34  0001be34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002f0  24000000  0801ae38  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001484  240002f0  0801b128  0001c2f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001774  0801b128  0001c774  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c2f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033579  00000000  00000000  0001c31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006984  00000000  00000000  0004f897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002998  00000000  00000000  00056220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002091  00000000  00000000  00058bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004232d  00000000  00000000  0005ac49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003aec2  00000000  00000000  0009cf76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017b081  00000000  00000000  000d7e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00252eb9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c2d8  00000000  00000000  00252efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0025f1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f0 	.word	0x240002f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018d00 	.word	0x08018d00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f4 	.word	0x240002f4
 80002dc:	08018d00 	.word	0x08018d00

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SensorManager_Init>:
    {ADXL375_Init, "ADXL375"},
	{MPL3115A2_Init, "MPL3115A2"}
};


telemetry_init_status SensorManager_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
    printf("Sensors Initialization routine started.\n");
 8000686:	4826      	ldr	r0, [pc, #152]	@ (8000720 <SensorManager_Init+0xa0>)
 8000688:	f016 f940 	bl	801690c <puts>

    size_t num_sensors = sizeof(sensors) / sizeof(sensors[0]);
 800068c:	2304      	movs	r3, #4
 800068e:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	e024      	b.n	80006e8 <SensorManager_Init+0x68>
        int8_t status = sensors[i].init_function();
 800069e:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SensorManager_Init+0xa4>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006a6:	4798      	blx	r3
 80006a8:	4603      	mov	r3, r0
 80006aa:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 80006ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00b      	beq.n	80006cc <SensorManager_Init+0x4c>
            printf("%s initialization failed.\n", sensors[i].sensor_name);
 80006b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <SensorManager_Init+0xa4>)
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <SensorManager_Init+0xa8>)
 80006c2:	f016 f8bb 	bl	801683c <iprintf>
            all_success = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e00a      	b.n	80006e2 <SensorManager_Init+0x62>
        } else {
            printf("[%s] device found! Initialization succeeded.\n", sensors[i].sensor_name);
 80006cc:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <SensorManager_Init+0xa4>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	4413      	add	r3, r2
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4814      	ldr	r0, [pc, #80]	@ (800072c <SensorManager_Init+0xac>)
 80006da:	f016 f8af 	bl	801683c <iprintf>
            any_success = true;
 80006de:	2301      	movs	r3, #1
 80006e0:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3d6      	bcc.n	800069e <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d004      	beq.n	8000700 <SensorManager_Init+0x80>
        printf("All sensors initialized successfully.\n");
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <SensorManager_Init+0xb0>)
 80006f8:	f016 f908 	bl	801690c <puts>
        return TELEMETRY_INIT_SUCCESS;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e00b      	b.n	8000718 <SensorManager_Init+0x98>
    } else if (any_success) {
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <SensorManager_Init+0x90>
        printf("Partial initialization success.\n");
 8000706:	480b      	ldr	r0, [pc, #44]	@ (8000734 <SensorManager_Init+0xb4>)
 8000708:	f016 f900 	bl	801690c <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 800070c:	2301      	movs	r3, #1
 800070e:	e003      	b.n	8000718 <SensorManager_Init+0x98>
    } else {
        printf("All sensors initialization failed.\n");
 8000710:	4809      	ldr	r0, [pc, #36]	@ (8000738 <SensorManager_Init+0xb8>)
 8000712:	f016 f8fb 	bl	801690c <puts>
        return TELEMETRY_INIT_FAILURE;
 8000716:	2302      	movs	r3, #2
    }
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08018d3c 	.word	0x08018d3c
 8000724:	24000000 	.word	0x24000000
 8000728:	08018d64 	.word	0x08018d64
 800072c:	08018d80 	.word	0x08018d80
 8000730:	08018db0 	.word	0x08018db0
 8000734:	08018dd8 	.word	0x08018dd8
 8000738:	08018df8 	.word	0x08018df8

0800073c <SensorManager_UpdateData>:

void SensorManager_UpdateData(TelemetryData *data) {
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b0a8      	sub	sp, #160	@ 0xa0
 8000740:	af00      	add	r7, sp, #0
 8000742:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    // Update data from each sensor
	telemetry.bno055_data = bno_read_fusion_data();
 8000746:	4c1d      	ldr	r4, [pc, #116]	@ (80007bc <SensorManager_UpdateData+0x80>)
 8000748:	463b      	mov	r3, r7
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fe48 	bl	80023e0 <bno_read_fusion_data>
 8000750:	4620      	mov	r0, r4
 8000752:	463b      	mov	r3, r7
 8000754:	2298      	movs	r2, #152	@ 0x98
 8000756:	4619      	mov	r1, r3
 8000758:	f016 fa37 	bl	8016bca <memcpy>
    telemetry.ms5607_data = MS5607_ReadData();
 800075c:	4c17      	ldr	r4, [pc, #92]	@ (80007bc <SensorManager_UpdateData+0x80>)
 800075e:	463b      	mov	r3, r7
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fed9 	bl	8003518 <MS5607_ReadData>
 8000766:	3498      	adds	r4, #152	@ 0x98
 8000768:	463d      	mov	r5, r7
 800076a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000772:	e884 0003 	stmia.w	r4, {r0, r1}
    telemetry.adxl375_data = get_high_g_acceleration();
 8000776:	4c11      	ldr	r4, [pc, #68]	@ (80007bc <SensorManager_UpdateData+0x80>)
 8000778:	f000 f902 	bl	8000980 <get_high_g_acceleration>
 800077c:	eef0 6a40 	vmov.f32	s13, s0
 8000780:	eeb0 7a60 	vmov.f32	s14, s1
 8000784:	eef0 7a41 	vmov.f32	s15, s2
 8000788:	edc4 6a2c 	vstr	s13, [r4, #176]	@ 0xb0
 800078c:	ed84 7a2d 	vstr	s14, [r4, #180]	@ 0xb4
 8000790:	edc4 7a2e 	vstr	s15, [r4, #184]	@ 0xb8
    telemetry.mpl311_data = mpl311_read_data();
 8000794:	4c09      	ldr	r4, [pc, #36]	@ (80007bc <SensorManager_UpdateData+0x80>)
 8000796:	f002 f9e7 	bl	8002b68 <mpl311_read_data>
 800079a:	eef0 6a40 	vmov.f32	s13, s0
 800079e:	eeb0 7a60 	vmov.f32	s14, s1
 80007a2:	eef0 7a41 	vmov.f32	s15, s2
 80007a6:	edc4 6a2f 	vstr	s13, [r4, #188]	@ 0xbc
 80007aa:	ed84 7a30 	vstr	s14, [r4, #192]	@ 0xc0
 80007ae:	edc4 7a31 	vstr	s15, [r4, #196]	@ 0xc4


}
 80007b2:	bf00      	nop
 80007b4:	37a0      	adds	r7, #160	@ 0xa0
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ba:	bf00      	nop
 80007bc:	24000310 	.word	0x24000310

080007c0 <TestTelemetry>:

void TestTelemetry(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 50 ; i++){
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	e014      	b.n	80007f6 <TestTelemetry+0x36>


        //printf("// --------------------------------------------- // \n");

	// Sensor Data Read
	SensorManager_UpdateData(&telemetry);
 80007cc:	480e      	ldr	r0, [pc, #56]	@ (8000808 <TestTelemetry+0x48>)
 80007ce:	f7ff ffb5 	bl	800073c <SensorManager_UpdateData>

	// Sensor Data Print

	bno055_print_fusion_data(&telemetry.bno055_data);
 80007d2:	480d      	ldr	r0, [pc, #52]	@ (8000808 <TestTelemetry+0x48>)
 80007d4:	f001 ff2a 	bl	800262c <bno055_print_fusion_data>
	ms5607_print_barometer_data(&telemetry.ms5607_data);
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <TestTelemetry+0x4c>)
 80007da:	f002 fee1 	bl	80035a0 <ms5607_print_barometer_data>
	adxl375_print_highG_data(&telemetry.adxl375_data);
 80007de:	480c      	ldr	r0, [pc, #48]	@ (8000810 <TestTelemetry+0x50>)
 80007e0:	f000 f918 	bl	8000a14 <adxl375_print_highG_data>
	mpl311_print_altimetry(&telemetry.mpl311_data);
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <TestTelemetry+0x54>)
 80007e6:	f002 f9ed 	bl	8002bc4 <mpl311_print_altimetry>

	//printf("// --------------------------------------------- // \n");

	//DELAY BETWEEN READINGS TO DESIGN CORRECTLY
    HAL_Delay(250);
 80007ea:	20fa      	movs	r0, #250	@ 0xfa
 80007ec:	f004 f900 	bl	80049f0 <HAL_Delay>
	for(int i = 0; i < 50 ; i++){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b31      	cmp	r3, #49	@ 0x31
 80007fa:	dde7      	ble.n	80007cc <TestTelemetry+0xc>
    	}
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	24000310 	.word	0x24000310
 800080c:	240003a8 	.word	0x240003a8
 8000810:	240003c0 	.word	0x240003c0
 8000814:	240003cc 	.word	0x240003cc

08000818 <ADXL375_Init>:

/*
 * INITIALISATION
 */

int8_t ADXL375_Init(){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
    ToggleCSHigh();
 800081e:	f000 f98d 	bl	8000b3c <ToggleCSHigh>

    /* Use the global variable 'hspi1' directly */
    dev.spiHandle = &hspi1;
 8000822:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <ADXL375_Init+0x80>)
 8000824:	4a1d      	ldr	r2, [pc, #116]	@ (800089c <ADXL375_Init+0x84>)
 8000826:	601a      	str	r2, [r3, #0]

    HAL_StatusTypeDef status;

    int8_t errorNum = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	71fb      	strb	r3, [r7, #7]

    /* confirm device address as 0xE5 */
    uint8_t confirmID;
    while(1) {
        status = ReadData(ADXL375_DEVID, &confirmID, 1);
 800082c:	1d7b      	adds	r3, r7, #5
 800082e:	2201      	movs	r2, #1
 8000830:	4619      	mov	r1, r3
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f946 	bl	8000ac4 <ReadData>
 8000838:	4603      	mov	r3, r0
 800083a:	71bb      	strb	r3, [r7, #6]
        if (status == HAL_OK) {
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f4      	bne.n	800082c <ADXL375_Init+0x14>
            if (confirmID == 0xE5)
 8000842:	797b      	ldrb	r3, [r7, #5]
 8000844:	2be5      	cmp	r3, #229	@ 0xe5
 8000846:	d000      	beq.n	800084a <ADXL375_Init+0x32>
        status = ReadData(ADXL375_DEVID, &confirmID, 1);
 8000848:	e7f0      	b.n	800082c <ADXL375_Init+0x14>
                break;
 800084a:	bf00      	nop
        }
    }

    /* set the required data rate */
    status = WriteData(ADXL375_BW_RATE, BW_RATE_DATA_RATE, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	210f      	movs	r1, #15
 8000850:	202c      	movs	r0, #44	@ 0x2c
 8000852:	f000 f90b 	bl	8000a6c <WriteData>
 8000856:	4603      	mov	r3, r0
 8000858:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK) {
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d005      	beq.n	800086c <ADXL375_Init+0x54>
        errorNum++;
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	3301      	adds	r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	71fb      	strb	r3, [r7, #7]
    }

    /* if all well till now, enable measurement mode */
    status = WriteData(ADXL375_POWER_CTL, POWER_CTL_MEASURE_MODE, 1);
 800086c:	2201      	movs	r2, #1
 800086e:	2108      	movs	r1, #8
 8000870:	202d      	movs	r0, #45	@ 0x2d
 8000872:	f000 f8fb 	bl	8000a6c <WriteData>
 8000876:	4603      	mov	r3, r0
 8000878:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK)
 800087a:	79bb      	ldrb	r3, [r7, #6]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d005      	beq.n	800088c <ADXL375_Init+0x74>
        errorNum++;
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	3301      	adds	r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	71fb      	strb	r3, [r7, #7]

    return errorNum;
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	240003dc 	.word	0x240003dc
 800089c:	240007cc 	.word	0x240007cc

080008a0 <ADXL375_ReadAcceleration>:
/*
 * DATA ACQUISITION
 */

HAL_StatusTypeDef ADXL375_ReadAcceleration()
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
    /* Use the global 'dev' instance */
    HAL_StatusTypeDef status = ReadData(ADXL375_DATAX0, dev.rawAccData, 6);
 80008a6:	2206      	movs	r2, #6
 80008a8:	4905      	ldr	r1, [pc, #20]	@ (80008c0 <ADXL375_ReadAcceleration+0x20>)
 80008aa:	2032      	movs	r0, #50	@ 0x32
 80008ac:	f000 f90a 	bl	8000ac4 <ReadData>
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
    return status;
 80008b4:	79fb      	ldrb	r3, [r7, #7]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	240003e0 	.word	0x240003e0

080008c4 <ADXL375_CleanRawValues>:


void ADXL375_CleanRawValues()
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
    int16_t val;

    /* CONVERSION FOR ACC_X */
    val = dev.rawAccData[1];
 80008ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <ADXL375_CleanRawValues+0xb4>)
 80008cc:	795b      	ldrb	r3, [r3, #5]
 80008ce:	80fb      	strh	r3, [r7, #6]
    val = (val << 8) + (dev.rawAccData[0]);
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	4a28      	ldr	r2, [pc, #160]	@ (8000978 <ADXL375_CleanRawValues+0xb4>)
 80008d8:	7912      	ldrb	r2, [r2, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	b29b      	uxth	r3, r3
 80008de:	80fb      	strh	r3, [r7, #6]
    if (val & 0x8000) {
 80008e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e4:	2b00      	cmp	r3, #0
        val = -((~val & 0xFFFF) + 1);
    }
    dev.accData[0] = (float)val * 49.0f;
 80008e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ea:	ee07 3a90 	vmov	s15, r3
 80008ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800097c <ADXL375_CleanRawValues+0xb8>
 80008f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <ADXL375_CleanRawValues+0xb4>)
 80008fc:	edc3 7a03 	vstr	s15, [r3, #12]

    /* CONVERSION FOR ACC_Y */
    val = dev.rawAccData[3];
 8000900:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <ADXL375_CleanRawValues+0xb4>)
 8000902:	79db      	ldrb	r3, [r3, #7]
 8000904:	80fb      	strh	r3, [r7, #6]
    val = (val << 8) + (dev.rawAccData[2]);
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b29b      	uxth	r3, r3
 800090c:	4a1a      	ldr	r2, [pc, #104]	@ (8000978 <ADXL375_CleanRawValues+0xb4>)
 800090e:	7992      	ldrb	r2, [r2, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b29b      	uxth	r3, r3
 8000914:	80fb      	strh	r3, [r7, #6]
    if (val & 0x8000) {
 8000916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800091a:	2b00      	cmp	r3, #0
        val = -((~val & 0xFFFF) + 1);
    }
    dev.accData[1] = (float)val * 49.0f;
 800091c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000928:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800097c <ADXL375_CleanRawValues+0xb8>
 800092c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <ADXL375_CleanRawValues+0xb4>)
 8000932:	edc3 7a04 	vstr	s15, [r3, #16]

    /* CONVERSION FOR ACC_Z */
    val = dev.rawAccData[5];
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <ADXL375_CleanRawValues+0xb4>)
 8000938:	7a5b      	ldrb	r3, [r3, #9]
 800093a:	80fb      	strh	r3, [r7, #6]
    val = (val << 8) + (dev.rawAccData[4]);
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b29b      	uxth	r3, r3
 8000942:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <ADXL375_CleanRawValues+0xb4>)
 8000944:	7a12      	ldrb	r2, [r2, #8]
 8000946:	4413      	add	r3, r2
 8000948:	b29b      	uxth	r3, r3
 800094a:	80fb      	strh	r3, [r7, #6]
    if (val & 0x8000) {
 800094c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000950:	2b00      	cmp	r3, #0
        val = -((~val & 0xFFFF) + 1);
    }
    dev.accData[2] = (float)val * 49.0f;
 8000952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800097c <ADXL375_CleanRawValues+0xb8>
 8000962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000966:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <ADXL375_CleanRawValues+0xb4>)
 8000968:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	240003dc 	.word	0x240003dc
 800097c:	42440000 	.word	0x42440000

08000980 <get_high_g_acceleration>:


HigG_Accemerometer_3_Axis get_high_g_acceleration(){
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
	HigG_Accemerometer_3_Axis data;

	  status = ADXL375_ReadAcceleration();
 8000986:	f7ff ff8b 	bl	80008a0 <ADXL375_ReadAcceleration>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <get_high_g_acceleration+0x88>)
 8000990:	701a      	strb	r2, [r3, #0]
	  if (status == HAL_OK) {
 8000992:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <get_high_g_acceleration+0x88>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d11c      	bne.n	80009d4 <get_high_g_acceleration+0x54>
		  ADXL375_CleanRawValues();
 800099a:	f7ff ff93 	bl	80008c4 <ADXL375_CleanRawValues>
		  data.acc.x = dev.accData[0] / 1000;
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <get_high_g_acceleration+0x8c>)
 80009a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80009a4:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8000a10 <get_high_g_acceleration+0x90>
 80009a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ac:	edc7 7a04 	vstr	s15, [r7, #16]
		  data.acc.y = dev.accData[1] / 1000;
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <get_high_g_acceleration+0x8c>)
 80009b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80009b6:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000a10 <get_high_g_acceleration+0x90>
 80009ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009be:	edc7 7a05 	vstr	s15, [r7, #20]
		  data.acc.z = dev.accData[2] / 1000;
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <get_high_g_acceleration+0x8c>)
 80009c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80009c8:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000a10 <get_high_g_acceleration+0x90>
 80009cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d0:	edc7 7a06 	vstr	s15, [r7, #24]
	  }

	  return data;
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	f107 0210 	add.w	r2, r7, #16
 80009dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80009de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80009e2:	69f9      	ldr	r1, [r7, #28]
 80009e4:	6a3a      	ldr	r2, [r7, #32]
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	ee06 1a90 	vmov	s13, r1
 80009ec:	ee07 2a10 	vmov	s14, r2
 80009f0:	ee07 3a90 	vmov	s15, r3
}
 80009f4:	eeb0 0a66 	vmov.f32	s0, s13
 80009f8:	eef0 0a47 	vmov.f32	s1, s14
 80009fc:	eeb0 1a67 	vmov.f32	s2, s15
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	240003d8 	.word	0x240003d8
 8000a0c:	240003dc 	.word	0x240003dc
 8000a10:	447a0000 	.word	0x447a0000

08000a14 <adxl375_print_highG_data>:




void adxl375_print_highG_data(HigG_Accemerometer_3_Axis *data) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af04      	add	r7, sp, #16
 8000a1a:	6078      	str	r0, [r7, #4]
printf("ADXL375 HIGH-G Accelerometer: \n");
 8000a1c:	4810      	ldr	r0, [pc, #64]	@ (8000a60 <adxl375_print_highG_data+0x4c>)
 8000a1e:	f015 ff75 	bl	801690c <puts>

// Print acceleration (X, Y, Z)
printf("Acceleration -> ");
 8000a22:	4810      	ldr	r0, [pc, #64]	@ (8000a64 <adxl375_print_highG_data+0x50>)
 8000a24:	f015 ff0a 	bl	801683c <iprintf>
printf("X: %.2f g, Y: %.2f g, Z: %.2f g \n", data->acc.x,data->acc.y,data->acc.z);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	edd3 7a00 	vldr	s15, [r3]
 8000a2e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000a42:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a46:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a4a:	ed8d 7b00 	vstr	d7, [sp]
 8000a4e:	ec53 2b15 	vmov	r2, r3, d5
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <adxl375_print_highG_data+0x54>)
 8000a54:	f015 fef2 	bl	801683c <iprintf>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	08018e1c 	.word	0x08018e1c
 8000a64:	08018e3c 	.word	0x08018e3c
 8000a68:	08018e50 	.word	0x08018e50

08000a6c <WriteData>:
/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef WriteData(uint8_t address, uint8_t data, uint16_t len)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	460b      	mov	r3, r1
 8000a78:	71bb      	strb	r3, [r7, #6]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80bb      	strh	r3, [r7, #4]
    ToggleCSLow();
 8000a7e:	f000 f869 	bl	8000b54 <ToggleCSLow>

    /* Use the global 'dev' instance */
    HAL_StatusTypeDef status = HAL_SPI_Transmit(dev.spiHandle, &address, 1, HAL_MAX_DELAY);
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <WriteData+0x54>)
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	1df9      	adds	r1, r7, #7
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f00c f901 	bl	800cc94 <HAL_SPI_Transmit>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d109      	bne.n	8000ab0 <WriteData+0x44>
        status = HAL_SPI_Transmit(dev.spiHandle, &data, 1, HAL_MAX_DELAY);
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <WriteData+0x54>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	1db9      	adds	r1, r7, #6
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f00c f8f4 	bl	800cc94 <HAL_SPI_Transmit>
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]

    ToggleCSHigh();
 8000ab0:	f000 f844 	bl	8000b3c <ToggleCSHigh>

    return status;
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	240003dc 	.word	0x240003dc

08000ac4 <ReadData>:


HAL_StatusTypeDef ReadData(uint8_t address, uint8_t *data, uint16_t len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	80bb      	strh	r3, [r7, #4]
    ToggleCSLow();
 8000ad4:	f000 f83e 	bl	8000b54 <ToggleCSLow>

    uint8_t txBuffer = (address | 0x80);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	73bb      	strb	r3, [r7, #14]

    if (len > 1) {
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d904      	bls.n	8000af2 <ReadData+0x2e>
        txBuffer = (txBuffer | 0xC0);
 8000ae8:	7bbb      	ldrb	r3, [r7, #14]
 8000aea:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	73bb      	strb	r3, [r7, #14]
    }

    /* Use the global 'dev' instance */
    HAL_StatusTypeDef status = HAL_SPI_Transmit(dev.spiHandle, &txBuffer, 1, HAL_MAX_DELAY);
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <ReadData+0x74>)
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	f107 010e 	add.w	r1, r7, #14
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	2201      	movs	r2, #1
 8000b00:	f00c f8c8 	bl	800cc94 <HAL_SPI_Transmit>
 8000b04:	4603      	mov	r3, r0
 8000b06:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(3);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f003 ff71 	bl	80049f0 <HAL_Delay>
    if (status == HAL_OK)
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d109      	bne.n	8000b28 <ReadData+0x64>
        status = HAL_SPI_Receive(dev.spiHandle, data, len, HAL_MAX_DELAY);
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <ReadData+0x74>)
 8000b16:	6818      	ldr	r0, [r3, #0]
 8000b18:	88ba      	ldrh	r2, [r7, #4]
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	f00c faa6 	bl	800d070 <HAL_SPI_Receive>
 8000b24:	4603      	mov	r3, r0
 8000b26:	73fb      	strb	r3, [r7, #15]

    ToggleCSHigh();
 8000b28:	f000 f808 	bl	8000b3c <ToggleCSHigh>

    return status;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	240003dc 	.word	0x240003dc

08000b3c <ToggleCSHigh>:


void ToggleCSHigh()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <ToggleCSHigh+0x14>)
 8000b46:	f004 fad3 	bl	80050f0 <HAL_GPIO_WritePin>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	58020800 	.word	0x58020800

08000b54 <ToggleCSLow>:

void ToggleCSLow()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <ToggleCSLow+0x14>)
 8000b5e:	f004 fac7 	bl	80050f0 <HAL_GPIO_WritePin>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	58020800 	.word	0x58020800

08000b6c <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b74:	23ff      	movs	r3, #255	@ 0xff
 8000b76:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000b80:	2300      	movs	r3, #0
 8000b82:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000b84:	4a58      	ldr	r2, [pc, #352]	@ (8000ce8 <bno055_init+0x17c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000b8a:	4b57      	ldr	r3, [pc, #348]	@ (8000ce8 <bno055_init+0x17c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68dc      	ldr	r4, [r3, #12]
 8000b90:	4b55      	ldr	r3, [pc, #340]	@ (8000ce8 <bno055_init+0x17c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	7a58      	ldrb	r0, [r3, #9]
 8000b96:	f107 020d 	add.w	r2, r7, #13
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2107      	movs	r1, #7
 8000b9e:	47a0      	blx	r4
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ba4:	4b50      	ldr	r3, [pc, #320]	@ (8000ce8 <bno055_init+0x17c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	691c      	ldr	r4, [r3, #16]
 8000baa:	4b4f      	ldr	r3, [pc, #316]	@ (8000ce8 <bno055_init+0x17c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	7a58      	ldrb	r0, [r3, #9]
 8000bb0:	f107 020e 	add.w	r2, r7, #14
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	47a0      	blx	r4
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000bc6:	4b48      	ldr	r3, [pc, #288]	@ (8000ce8 <bno055_init+0x17c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	7bba      	ldrb	r2, [r7, #14]
 8000bcc:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bce:	4b46      	ldr	r3, [pc, #280]	@ (8000ce8 <bno055_init+0x17c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	691c      	ldr	r4, [r3, #16]
 8000bd4:	4b44      	ldr	r3, [pc, #272]	@ (8000ce8 <bno055_init+0x17c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	7a58      	ldrb	r0, [r3, #9]
 8000bda:	f107 020e 	add.w	r2, r7, #14
 8000bde:	2301      	movs	r3, #1
 8000be0:	2101      	movs	r1, #1
 8000be2:	47a0      	blx	r4
 8000be4:	4603      	mov	r3, r0
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	4413      	add	r3, r2
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce8 <bno055_init+0x17c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	7bba      	ldrb	r2, [r7, #14]
 8000bf6:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce8 <bno055_init+0x17c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	691c      	ldr	r4, [r3, #16]
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce8 <bno055_init+0x17c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	7a58      	ldrb	r0, [r3, #9]
 8000c04:	f107 020e 	add.w	r2, r7, #14
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	47a0      	blx	r4
 8000c0e:	4603      	mov	r3, r0
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	4413      	add	r3, r2
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000c1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <bno055_init+0x17c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	7bba      	ldrb	r2, [r7, #14]
 8000c20:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c22:	4b31      	ldr	r3, [pc, #196]	@ (8000ce8 <bno055_init+0x17c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	691c      	ldr	r4, [r3, #16]
 8000c28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <bno055_init+0x17c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	7a58      	ldrb	r0, [r3, #9]
 8000c2e:	f107 020e 	add.w	r2, r7, #14
 8000c32:	2301      	movs	r3, #1
 8000c34:	2103      	movs	r1, #3
 8000c36:	47a0      	blx	r4
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000c44:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <bno055_init+0x17c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	7bba      	ldrb	r2, [r7, #14]
 8000c4a:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c4c:	4b26      	ldr	r3, [pc, #152]	@ (8000ce8 <bno055_init+0x17c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	691c      	ldr	r4, [r3, #16]
 8000c52:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <bno055_init+0x17c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	7a58      	ldrb	r0, [r3, #9]
 8000c58:	f107 020e 	add.w	r2, r7, #14
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	2106      	movs	r1, #6
 8000c60:	47a0      	blx	r4
 8000c62:	4603      	mov	r3, r0
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	4413      	add	r3, r2
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <bno055_init+0x17c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	7bba      	ldrb	r2, [r7, #14]
 8000c74:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <bno055_init+0x17c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	691c      	ldr	r4, [r3, #16]
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <bno055_init+0x17c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	7a58      	ldrb	r0, [r3, #9]
 8000c82:	f107 0208 	add.w	r2, r7, #8
 8000c86:	2302      	movs	r3, #2
 8000c88:	2104      	movs	r1, #4
 8000c8a:	47a0      	blx	r4
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	4413      	add	r3, r2
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000c98:	7a3b      	ldrb	r3, [r7, #8]
 8000c9a:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000c9c:	7a7b      	ldrb	r3, [r7, #9]
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	7a3b      	ldrb	r3, [r7, #8]
 8000ca4:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <bno055_init+0x17c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000caa:	430a      	orrs	r2, r1
 8000cac:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000cae:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <bno055_init+0x17c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	691c      	ldr	r4, [r3, #16]
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <bno055_init+0x17c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	7a58      	ldrb	r0, [r3, #9]
 8000cbc:	f107 020e 	add.w	r2, r7, #14
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	2107      	movs	r1, #7
 8000cc4:	47a0      	blx	r4
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <bno055_init+0x17c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	7bba      	ldrb	r2, [r7, #14]
 8000cd8:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	240003f4 	.word	0x240003f4

08000cec <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000cfc:	23ff      	movs	r3, #255	@ 0xff
 8000cfe:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <bno055_write_register+0x48>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000d08:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000d0c:	e00d      	b.n	8000d2a <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <bno055_write_register+0x48>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68dc      	ldr	r4, [r3, #12]
 8000d14:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <bno055_write_register+0x48>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	7a58      	ldrb	r0, [r3, #9]
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	79f9      	ldrb	r1, [r7, #7]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	47a0      	blx	r4
 8000d22:	4603      	mov	r3, r0
 8000d24:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd90      	pop	{r4, r7, pc}
 8000d32:	bf00      	nop
 8000d34:	240003f4 	.word	0x240003f4

08000d38 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000d42:	23ff      	movs	r3, #255	@ 0xff
 8000d44:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <bno055_write_page_id+0x8c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000d52:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000d56:	e030      	b.n	8000dba <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <bno055_write_page_id+0x8c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	691c      	ldr	r4, [r3, #16]
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <bno055_write_page_id+0x8c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	7a58      	ldrb	r0, [r3, #9]
 8000d64:	f107 020e 	add.w	r2, r7, #14
 8000d68:	2301      	movs	r3, #1
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	47a0      	blx	r4
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d11b      	bne.n	8000db2 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <bno055_write_page_id+0x8c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68dc      	ldr	r4, [r3, #12]
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <bno055_write_page_id+0x8c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	7a58      	ldrb	r0, [r3, #9]
 8000d8a:	f107 020e 	add.w	r2, r7, #14
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2107      	movs	r1, #7
 8000d92:	47a0      	blx	r4
 8000d94:	4603      	mov	r3, r0
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d106      	bne.n	8000db6 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <bno055_write_page_id+0x8c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	711a      	strb	r2, [r3, #4]
 8000db0:	e001      	b.n	8000db6 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000db2:	23ff      	movs	r3, #255	@ 0xff
 8000db4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	240003f4 	.word	0x240003f4

08000dc8 <bno055_read_accel_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_accel_xyz(struct bno055_accel_t *accel)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000dd0:	23ff      	movs	r3, #255	@ 0xff
 8000dd2:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_ACCEL_XYZ_DATA_SIZE] = {
 8000dd4:	4a31      	ldr	r2, [pc, #196]	@ (8000e9c <bno055_read_accel_xyz+0xd4>)
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dde:	6018      	str	r0, [r3, #0]
 8000de0:	3304      	adds	r3, #4
 8000de2:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000de4:	23ff      	movs	r3, #255	@ 0xff
 8000de6:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000de8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <bno055_read_accel_xyz+0xd8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <bno055_read_accel_xyz+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8000df0:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000df4:	e04e      	b.n	8000e94 <bno055_read_accel_xyz+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000df6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <bno055_read_accel_xyz+0xd8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	791b      	ldrb	r3, [r3, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d004      	beq.n	8000e0a <bno055_read_accel_xyz+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff ff99 	bl	8000d38 <bno055_write_page_id>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d004      	beq.n	8000e1c <bno055_read_accel_xyz+0x54>
 8000e12:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <bno055_read_accel_xyz+0xd8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	791b      	ldrb	r3, [r3, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d137      	bne.n	8000e8c <bno055_read_accel_xyz+0xc4>
        {
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <bno055_read_accel_xyz+0xd8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	691c      	ldr	r4, [r3, #16]
 8000e22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <bno055_read_accel_xyz+0xd8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	7a58      	ldrb	r0, [r3, #9]
 8000e28:	f107 0208 	add.w	r2, r7, #8
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	2108      	movs	r1, #8
 8000e30:	47a0      	blx	r4
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_ACCEL_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000e36:	7a3b      	ldrb	r3, [r7, #8]
 8000e38:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_ACCEL_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000e3a:	7a7b      	ldrb	r3, [r7, #9]
 8000e3c:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_ACCEL_DATA_X_MSB_VALUEX);
            accel->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e3e:	7a7b      	ldrb	r3, [r7, #9]
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000e46:	7a3b      	ldrb	r3, [r7, #8]
 8000e48:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
            accel->x =
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8000e52:	7abb      	ldrb	r3, [r7, #10]
 8000e54:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_ACCEL_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000e56:	7afb      	ldrb	r3, [r7, #11]
 8000e58:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_ACCEL_DATA_Y_MSB_VALUEY);
            accel->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e5a:	7afb      	ldrb	r3, [r7, #11]
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8000e62:	7abb      	ldrb	r3, [r7, #10]
 8000e64:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21a      	sxth	r2, r3
            accel->y =
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8000e6e:	7b3b      	ldrb	r3, [r7, #12]
 8000e70:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_ACCEL_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_ACCEL_DATA_Z_MSB_VALUEZ);
            accel->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e76:	7b7b      	ldrb	r3, [r7, #13]
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8000e7e:	7b3b      	ldrb	r3, [r7, #12]
 8000e80:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b21a      	sxth	r2, r3
            accel->z =
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	809a      	strh	r2, [r3, #4]
 8000e8a:	e001      	b.n	8000e90 <bno055_read_accel_xyz+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000e8c:	23ff      	movs	r3, #255	@ 0xff
 8000e8e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd90      	pop	{r4, r7, pc}
 8000e9c:	08018e74 	.word	0x08018e74
 8000ea0:	240003f4 	.word	0x240003f4

08000ea4 <bno055_read_mag_x>:
 *
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_mag_x(s16 *mag_x_s16)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000eac:	23ff      	movs	r3, #255	@ 0xff
 8000eae:	73fb      	strb	r3, [r7, #15]

    /* Array holding the mag x value
     * data_u8[BNO055_SENSOR_DATA_LSB] - x->LSB
     * data_u8[BNO055_SENSOR_DATA_MSB] - x->MSB
     */
    u8 data_u8[BNO055_MAG_DATA_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	81bb      	strh	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000eb4:	23ff      	movs	r3, #255	@ 0xff
 8000eb6:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <bno055_read_mag_x+0x90>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <bno055_read_mag_x+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000ec0:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000ec4:	e032      	b.n	8000f2c <bno055_read_mag_x+0x88>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <bno055_read_mag_x+0x90>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	791b      	ldrb	r3, [r3, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d004      	beq.n	8000eda <bno055_read_mag_x+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff ff31 	bl	8000d38 <bno055_write_page_id>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d004      	beq.n	8000eec <bno055_read_mag_x+0x48>
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <bno055_read_mag_x+0x90>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d11b      	bne.n	8000f24 <bno055_read_mag_x+0x80>
        {
            /*Read the mag x two bytes of data */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <bno055_read_mag_x+0x90>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	691c      	ldr	r4, [r3, #16]
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <bno055_read_mag_x+0x90>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	7a58      	ldrb	r0, [r3, #9]
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	2302      	movs	r3, #2
 8000efe:	210e      	movs	r1, #14
 8000f00:	47a0      	blx	r4
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_MAG_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_LSB_MSB_READ_LENGTH);
            data_u8[BNO055_SENSOR_DATA_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_LSB],
 8000f06:	7b3b      	ldrb	r3, [r7, #12]
 8000f08:	733b      	strb	r3, [r7, #12]
                                                                  BNO055_MAG_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_MSB],
 8000f0a:	7b7b      	ldrb	r3, [r7, #13]
 8000f0c:	737b      	strb	r3, [r7, #13]
                                                                  BNO055_MAG_DATA_X_MSB_VALUEX);
            *mag_x_s16 =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f0e:	7b7b      	ldrb	r3, [r7, #13]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_LSB]));
 8000f16:	7b3b      	ldrb	r3, [r7, #12]
 8000f18:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b21a      	sxth	r2, r3
            *mag_x_s16 =
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	801a      	strh	r2, [r3, #0]
 8000f22:	e001      	b.n	8000f28 <bno055_read_mag_x+0x84>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000f24:	23ff      	movs	r3, #255	@ 0xff
 8000f26:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd90      	pop	{r4, r7, pc}
 8000f34:	240003f4 	.word	0x240003f4

08000f38 <bno055_read_mag_y>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_mag_y(s16 *mag_y_s16)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000f40:	23ff      	movs	r3, #255	@ 0xff
 8000f42:	73fb      	strb	r3, [r7, #15]

    /* Array holding the mag y value
     * data_u8[BNO055_SENSOR_DATA_LSB] - y->LSB
     * data_u8[BNO055_SENSOR_DATA_MSB] - y->MSB
     */
    u8 data_u8[BNO055_MAG_DATA_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000f44:	2300      	movs	r3, #0
 8000f46:	81bb      	strh	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000f48:	23ff      	movs	r3, #255	@ 0xff
 8000f4a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <bno055_read_mag_y+0x90>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <bno055_read_mag_y+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000f54:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000f58:	e032      	b.n	8000fc0 <bno055_read_mag_y+0x88>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <bno055_read_mag_y+0x90>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	791b      	ldrb	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <bno055_read_mag_y+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fee7 	bl	8000d38 <bno055_write_page_id>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <bno055_read_mag_y+0x48>
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <bno055_read_mag_y+0x90>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	791b      	ldrb	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d11b      	bne.n	8000fb8 <bno055_read_mag_y+0x80>
        {
            /*Read the mag y two bytes of data */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <bno055_read_mag_y+0x90>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	691c      	ldr	r4, [r3, #16]
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <bno055_read_mag_y+0x90>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	7a58      	ldrb	r0, [r3, #9]
 8000f8c:	f107 020c 	add.w	r2, r7, #12
 8000f90:	2302      	movs	r3, #2
 8000f92:	2110      	movs	r1, #16
 8000f94:	47a0      	blx	r4
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_MAG_DATA_Y_LSB_VALUEY_REG,
                                                      data_u8,
                                                      BNO055_LSB_MSB_READ_LENGTH);
            data_u8[BNO055_SENSOR_DATA_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_LSB],
 8000f9a:	7b3b      	ldrb	r3, [r7, #12]
 8000f9c:	733b      	strb	r3, [r7, #12]
                                                                  BNO055_MAG_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_MSB],
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	737b      	strb	r3, [r7, #13]
                                                                  BNO055_MAG_DATA_Y_MSB_VALUEY);
            *mag_y_s16 =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000fa2:	7b7b      	ldrb	r3, [r7, #13]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_LSB]));
 8000faa:	7b3b      	ldrb	r3, [r7, #12]
 8000fac:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21a      	sxth	r2, r3
            *mag_y_s16 =
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	801a      	strh	r2, [r3, #0]
 8000fb6:	e001      	b.n	8000fbc <bno055_read_mag_y+0x84>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000fb8:	23ff      	movs	r3, #255	@ 0xff
 8000fba:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	240003f4 	.word	0x240003f4

08000fcc <bno055_read_mag_z>:
 *
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_mag_z(s16 *mag_z_s16)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000fd4:	23ff      	movs	r3, #255	@ 0xff
 8000fd6:	73fb      	strb	r3, [r7, #15]

    /* Array holding the mag z value
     * data_u8[BNO055_SENSOR_DATA_LSB] - z->LSB
     * data_u8[BNO055_SENSOR_DATA_MSB] - z->MSB
     */
    u8 data_u8[BNO055_MAG_DATA_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000fd8:	2300      	movs	r3, #0
 8000fda:	81bb      	strh	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000fdc:	23ff      	movs	r3, #255	@ 0xff
 8000fde:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <bno055_read_mag_z+0x90>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <bno055_read_mag_z+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000fe8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000fec:	e032      	b.n	8001054 <bno055_read_mag_z+0x88>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000fee:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <bno055_read_mag_z+0x90>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <bno055_read_mag_z+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fe9d 	bl	8000d38 <bno055_write_page_id>
 8000ffe:	4603      	mov	r3, r0
 8001000:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <bno055_read_mag_z+0x48>
 800100a:	4b14      	ldr	r3, [pc, #80]	@ (800105c <bno055_read_mag_z+0x90>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	791b      	ldrb	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d11b      	bne.n	800104c <bno055_read_mag_z+0x80>
        {
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <bno055_read_mag_z+0x90>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	691c      	ldr	r4, [r3, #16]
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <bno055_read_mag_z+0x90>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	7a58      	ldrb	r0, [r3, #9]
 8001020:	f107 020c 	add.w	r2, r7, #12
 8001024:	2302      	movs	r3, #2
 8001026:	2112      	movs	r1, #18
 8001028:	47a0      	blx	r4
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_MAG_DATA_Z_LSB_VALUEZ_REG,
                                                      data_u8,
                                                      BNO055_LSB_MSB_READ_LENGTH);

            /*Read the mag z two bytes of data */
            data_u8[BNO055_SENSOR_DATA_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_LSB],
 800102e:	7b3b      	ldrb	r3, [r7, #12]
 8001030:	733b      	strb	r3, [r7, #12]
                                                                  BNO055_MAG_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_MSB],
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	737b      	strb	r3, [r7, #13]
                                                                  BNO055_MAG_DATA_Z_MSB_VALUEZ);
            *mag_z_s16 =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	b25b      	sxtb	r3, r3
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_LSB]));
 800103e:	7b3b      	ldrb	r3, [r7, #12]
 8001040:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
            *mag_z_s16 =
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	801a      	strh	r2, [r3, #0]
 800104a:	e001      	b.n	8001050 <bno055_read_mag_z+0x84>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800104c:	23ff      	movs	r3, #255	@ 0xff
 800104e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001050:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	240003f4 	.word	0x240003f4

08001060 <bno055_read_gyro_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_gyro_xyz(struct bno055_gyro_t *gyro)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001068:	23ff      	movs	r3, #255	@ 0xff
 800106a:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_GYRO_XYZ_DATA_SIZE] = {
 800106c:	4a31      	ldr	r2, [pc, #196]	@ (8001134 <bno055_read_gyro_xyz+0xd4>)
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001076:	6018      	str	r0, [r3, #0]
 8001078:	3304      	adds	r3, #4
 800107a:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 800107c:	23ff      	movs	r3, #255	@ 0xff
 800107e:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001080:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <bno055_read_gyro_xyz+0xd8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <bno055_read_gyro_xyz+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8001088:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800108c:	e04e      	b.n	800112c <bno055_read_gyro_xyz+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 800108e:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <bno055_read_gyro_xyz+0xd8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	791b      	ldrb	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <bno055_read_gyro_xyz+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fe4d 	bl	8000d38 <bno055_write_page_id>
 800109e:	4603      	mov	r3, r0
 80010a0:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80010a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <bno055_read_gyro_xyz+0x54>
 80010aa:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <bno055_read_gyro_xyz+0xd8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	791b      	ldrb	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d137      	bne.n	8001124 <bno055_read_gyro_xyz+0xc4>
        {
            /* Read the six bytes data of gyro xyz*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010b4:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <bno055_read_gyro_xyz+0xd8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691c      	ldr	r4, [r3, #16]
 80010ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <bno055_read_gyro_xyz+0xd8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	7a58      	ldrb	r0, [r3, #9]
 80010c0:	f107 0208 	add.w	r2, r7, #8
 80010c4:	2306      	movs	r3, #6
 80010c6:	2114      	movs	r1, #20
 80010c8:	47a0      	blx	r4
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_GYRO_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_GYRO_XYZ_DATA_SIZE);

            /* Data x*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 80010ce:	7a3b      	ldrb	r3, [r7, #8]
 80010d0:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_GYRO_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 80010d2:	7a7b      	ldrb	r3, [r7, #9]
 80010d4:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_GYRO_DATA_X_MSB_VALUEX);
            gyro->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80010d6:	7a7b      	ldrb	r3, [r7, #9]
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 80010de:	7a3b      	ldrb	r3, [r7, #8]
 80010e0:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
            gyro->x =
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	801a      	strh	r2, [r3, #0]

            /* Data y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 80010ea:	7abb      	ldrb	r3, [r7, #10]
 80010ec:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_GYRO_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_GYRO_DATA_Y_MSB_VALUEY);
            gyro->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 80010fa:	7abb      	ldrb	r3, [r7, #10]
 80010fc:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21a      	sxth	r2, r3
            gyro->y =
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	805a      	strh	r2, [r3, #2]

            /* Data z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8001106:	7b3b      	ldrb	r3, [r7, #12]
 8001108:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_GYRO_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 800110a:	7b7b      	ldrb	r3, [r7, #13]
 800110c:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_GYRO_DATA_Z_MSB_VALUEZ);
            gyro->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800110e:	7b7b      	ldrb	r3, [r7, #13]
 8001110:	b25b      	sxtb	r3, r3
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8001116:	7b3b      	ldrb	r3, [r7, #12]
 8001118:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800111a:	4313      	orrs	r3, r2
 800111c:	b21a      	sxth	r2, r3
            gyro->z =
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	809a      	strh	r2, [r3, #4]
 8001122:	e001      	b.n	8001128 <bno055_read_gyro_xyz+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001124:	23ff      	movs	r3, #255	@ 0xff
 8001126:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001128:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	08018e74 	.word	0x08018e74
 8001138:	240003f4 	.word	0x240003f4

0800113c <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001144:	23ff      	movs	r3, #255	@ 0xff
 8001146:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 8001148:	4a31      	ldr	r2, [pc, #196]	@ (8001210 <bno055_read_euler_hrp+0xd4>)
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001152:	6018      	str	r0, [r3, #0]
 8001154:	3304      	adds	r3, #4
 8001156:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8001158:	23ff      	movs	r3, #255	@ 0xff
 800115a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800115c:	4b2d      	ldr	r3, [pc, #180]	@ (8001214 <bno055_read_euler_hrp+0xd8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <bno055_read_euler_hrp+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8001164:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001168:	e04e      	b.n	8001208 <bno055_read_euler_hrp+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 800116a:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <bno055_read_euler_hrp+0xd8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	791b      	ldrb	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <bno055_read_euler_hrp+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff fddf 	bl	8000d38 <bno055_write_page_id>
 800117a:	4603      	mov	r3, r0
 800117c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800117e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d004      	beq.n	8001190 <bno055_read_euler_hrp+0x54>
 8001186:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <bno055_read_euler_hrp+0xd8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d137      	bne.n	8001200 <bno055_read_euler_hrp+0xc4>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001190:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <bno055_read_euler_hrp+0xd8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	691c      	ldr	r4, [r3, #16]
 8001196:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <bno055_read_euler_hrp+0xd8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	7a58      	ldrb	r0, [r3, #9]
 800119c:	f107 0208 	add.w	r2, r7, #8
 80011a0:	2306      	movs	r3, #6
 80011a2:	211a      	movs	r1, #26
 80011a4:	47a0      	blx	r4
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_H_LSB_VALUEH_REG,
                                                      data_u8,
                                                      BNO055_EULER_HRP_DATA_SIZE);

            /* Data h*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB] = BNO055_GET_BITSLICE(
 80011aa:	7a3b      	ldrb	r3, [r7, #8]
 80011ac:	723b      	strb	r3, [r7, #8]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB],
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
 80011ae:	7a7b      	ldrb	r3, [r7, #9]
 80011b0:	727b      	strb	r3, [r7, #9]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011b2:	7a7b      	ldrb	r3, [r7, #9]
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 80011ba:	7a3b      	ldrb	r3, [r7, #8]
 80011bc:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21a      	sxth	r2, r3
            euler->h =
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	801a      	strh	r2, [r3, #0]

            /* Data r*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] = BNO055_GET_BITSLICE(
 80011c6:	7abb      	ldrb	r3, [r7, #10]
 80011c8:	72bb      	strb	r3, [r7, #10]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB],
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	72fb      	strb	r3, [r7, #11]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 80011d6:	7abb      	ldrb	r3, [r7, #10]
 80011d8:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21a      	sxth	r2, r3
            euler->r =
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	805a      	strh	r2, [r3, #2]

            /* Data p*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] = BNO055_GET_BITSLICE(
 80011e2:	7b3b      	ldrb	r3, [r7, #12]
 80011e4:	733b      	strb	r3, [r7, #12]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB],
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
 80011e6:	7b7b      	ldrb	r3, [r7, #13]
 80011e8:	737b      	strb	r3, [r7, #13]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 80011f2:	7b3b      	ldrb	r3, [r7, #12]
 80011f4:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b21a      	sxth	r2, r3
            euler->p =
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	809a      	strh	r2, [r3, #4]
 80011fe:	e001      	b.n	8001204 <bno055_read_euler_hrp+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001200:	23ff      	movs	r3, #255	@ 0xff
 8001202:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001204:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	08018e74 	.word	0x08018e74
 8001214:	240003f4 	.word	0x240003f4

08001218 <bno055_read_quaternion_wxyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_quaternion_wxyz(struct bno055_quaternion_t *quaternion)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001220:	23ff      	movs	r3, #255	@ 0xff
 8001222:	75fb      	strb	r3, [r7, #23]
     * data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_QUATERNION_WXYZ_DATA_SIZE] = {
 8001224:	4a38      	ldr	r2, [pc, #224]	@ (8001308 <bno055_read_quaternion_wxyz+0xf0>)
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800122e:	e883 0003 	stmia.w	r3, {r0, r1}
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE,
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8001232:	23ff      	movs	r3, #255	@ 0xff
 8001234:	75bb      	strb	r3, [r7, #22]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001236:	4b35      	ldr	r3, [pc, #212]	@ (800130c <bno055_read_quaternion_wxyz+0xf4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <bno055_read_quaternion_wxyz+0x2c>
    {
        return BNO055_E_NULL_PTR;
 800123e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001242:	e05c      	b.n	80012fe <bno055_read_quaternion_wxyz+0xe6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001244:	4b31      	ldr	r3, [pc, #196]	@ (800130c <bno055_read_quaternion_wxyz+0xf4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <bno055_read_quaternion_wxyz+0x40>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff fd72 	bl	8000d38 <bno055_write_page_id>
 8001254:	4603      	mov	r3, r0
 8001256:	75bb      	strb	r3, [r7, #22]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001258:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <bno055_read_quaternion_wxyz+0x52>
 8001260:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <bno055_read_quaternion_wxyz+0xf4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	791b      	ldrb	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d145      	bne.n	80012f6 <bno055_read_quaternion_wxyz+0xde>
        {
            /* Read the eight byte value
             * of quaternion wxyz data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800126a:	4b28      	ldr	r3, [pc, #160]	@ (800130c <bno055_read_quaternion_wxyz+0xf4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691c      	ldr	r4, [r3, #16]
 8001270:	4b26      	ldr	r3, [pc, #152]	@ (800130c <bno055_read_quaternion_wxyz+0xf4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	7a58      	ldrb	r0, [r3, #9]
 8001276:	f107 020c 	add.w	r2, r7, #12
 800127a:	2308      	movs	r3, #8
 800127c:	2120      	movs	r1, #32
 800127e:	47a0      	blx	r4
 8001280:	4603      	mov	r3, r0
 8001282:	75fb      	strb	r3, [r7, #23]
                                                      data_u8,
                                                      BNO055_QUATERNION_WXYZ_DATA_SIZE);

            /* Data W*/
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_LSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_LSB],
 8001284:	7b3b      	ldrb	r3, [r7, #12]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_LSB] =
 8001286:	733b      	strb	r3, [r7, #12]
                                    BNO055_QUATERNION_DATA_W_LSB_VALUEW);
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_MSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_MSB],
 8001288:	7b7b      	ldrb	r3, [r7, #13]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_MSB] =
 800128a:	737b      	strb	r3, [r7, #13]
                                    BNO055_QUATERNION_DATA_W_MSB_VALUEW);
            quaternion->w =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800128c:	7b7b      	ldrb	r3, [r7, #13]
 800128e:	b25b      	sxtb	r3, r3
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_LSB]));
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_W_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001298:	4313      	orrs	r3, r2
 800129a:	b21a      	sxth	r2, r3
            quaternion->w =
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	801a      	strh	r2, [r3, #0]

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_LSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_LSB],
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_LSB] =
 80012a2:	73bb      	strb	r3, [r7, #14]
                                    BNO055_QUATERNION_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_MSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_MSB],
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_MSB] =
 80012a6:	73fb      	strb	r3, [r7, #15]
                                    BNO055_QUATERNION_DATA_X_MSB_VALUEX);
            quaternion->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_LSB]));
 80012b0:	7bbb      	ldrb	r3, [r7, #14]
 80012b2:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21a      	sxth	r2, r3
            quaternion->x =
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	805a      	strh	r2, [r3, #2]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_LSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_LSB],
 80012bc:	7c3b      	ldrb	r3, [r7, #16]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_LSB] =
 80012be:	743b      	strb	r3, [r7, #16]
                                    BNO055_QUATERNION_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB],
 80012c0:	7c7b      	ldrb	r3, [r7, #17]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB] =
 80012c2:	747b      	strb	r3, [r7, #17]
                                    BNO055_QUATERNION_DATA_Y_MSB_VALUEY);
            quaternion->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80012c4:	7c7b      	ldrb	r3, [r7, #17]
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_LSB]));
 80012cc:	7c3b      	ldrb	r3, [r7, #16]
 80012ce:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
            quaternion->y =
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	809a      	strh	r2, [r3, #4]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_LSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_LSB],
 80012d8:	7cbb      	ldrb	r3, [r7, #18]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_LSB] =
 80012da:	74bb      	strb	r3, [r7, #18]
                                    BNO055_QUATERNION_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB] =
                BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB],
 80012dc:	7cfb      	ldrb	r3, [r7, #19]
            data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB] =
 80012de:	74fb      	strb	r3, [r7, #19]
                                    BNO055_QUATERNION_DATA_Z_MSB_VALUEZ);
            quaternion->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80012e0:	7cfb      	ldrb	r3, [r7, #19]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_LSB]));
 80012e8:	7cbb      	ldrb	r3, [r7, #18]
 80012ea:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_QUATERNION_WXYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21a      	sxth	r2, r3
            quaternion->z =
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	80da      	strh	r2, [r3, #6]
 80012f4:	e001      	b.n	80012fa <bno055_read_quaternion_wxyz+0xe2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80012f6:	23ff      	movs	r3, #255	@ 0xff
 80012f8:	75fb      	strb	r3, [r7, #23]
        }
    }

    return com_rslt;
 80012fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	bf00      	nop
 8001308:	08018e7c 	.word	0x08018e7c
 800130c:	240003f4 	.word	0x240003f4

08001310 <bno055_read_gravity_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_gravity_xyz(struct bno055_gravity_t *gravity)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001318:	23ff      	movs	r3, #255	@ 0xff
 800131a:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_GRAVITY_XYZ_DATA_SIZE] = {
 800131c:	4a31      	ldr	r2, [pc, #196]	@ (80013e4 <bno055_read_gravity_xyz+0xd4>)
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001326:	6018      	str	r0, [r3, #0]
 8001328:	3304      	adds	r3, #4
 800132a:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 800132c:	23ff      	movs	r3, #255	@ 0xff
 800132e:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001330:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <bno055_read_gravity_xyz+0xd8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <bno055_read_gravity_xyz+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8001338:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800133c:	e04e      	b.n	80013dc <bno055_read_gravity_xyz+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 800133e:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <bno055_read_gravity_xyz+0xd8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	791b      	ldrb	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d004      	beq.n	8001352 <bno055_read_gravity_xyz+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff fcf5 	bl	8000d38 <bno055_write_page_id>
 800134e:	4603      	mov	r3, r0
 8001350:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <bno055_read_gravity_xyz+0x54>
 800135a:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <bno055_read_gravity_xyz+0xd8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	791b      	ldrb	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d137      	bne.n	80013d4 <bno055_read_gravity_xyz+0xc4>
        {
            /* Read the six byte value
             * of gravity xyz data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <bno055_read_gravity_xyz+0xd8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691c      	ldr	r4, [r3, #16]
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <bno055_read_gravity_xyz+0xd8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	7a58      	ldrb	r0, [r3, #9]
 8001370:	f107 0208 	add.w	r2, r7, #8
 8001374:	2306      	movs	r3, #6
 8001376:	212e      	movs	r1, #46	@ 0x2e
 8001378:	47a0      	blx	r4
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_GRAVITY_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_GRAVITY_XYZ_DATA_SIZE);

            /* Data x*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 800137e:	7a3b      	ldrb	r3, [r7, #8]
 8001380:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_GRAVITY_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8001382:	7a7b      	ldrb	r3, [r7, #9]
 8001384:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_GRAVITY_DATA_X_MSB_VALUEX);
            gravity->x =
                (s16)(((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB]) << BNO055_SHIFT_EIGHT_BITS) |
 8001386:	7a7b      	ldrb	r3, [r7, #9]
 8001388:	b25b      	sxtb	r3, r3
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 800138e:	7a3b      	ldrb	r3, [r7, #8]
 8001390:	b21b      	sxth	r3, r3
                (s16)(((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB]) << BNO055_SHIFT_EIGHT_BITS) |
 8001392:	4313      	orrs	r3, r2
 8001394:	b21a      	sxth	r2, r3
            gravity->x =
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	801a      	strh	r2, [r3, #0]

            /* Data y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 800139a:	7abb      	ldrb	r3, [r7, #10]
 800139c:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_GRAVITY_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_GRAVITY_DATA_Y_MSB_VALUEY);
            gravity->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80013a2:	7afb      	ldrb	r3, [r7, #11]
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 80013aa:	7abb      	ldrb	r3, [r7, #10]
 80013ac:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21a      	sxth	r2, r3
            gravity->y =
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	805a      	strh	r2, [r3, #2]

            /* Data z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 80013b6:	7b3b      	ldrb	r3, [r7, #12]
 80013b8:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_GRAVITY_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 80013ba:	7b7b      	ldrb	r3, [r7, #13]
 80013bc:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_GRAVITY_DATA_Z_MSB_VALUEZ);
            gravity->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80013be:	7b7b      	ldrb	r3, [r7, #13]
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21a      	sxth	r2, r3
            gravity->z =
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	809a      	strh	r2, [r3, #4]
 80013d2:	e001      	b.n	80013d8 <bno055_read_gravity_xyz+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80013d4:	23ff      	movs	r3, #255	@ 0xff
 80013d6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80013d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	08018e74 	.word	0x08018e74
 80013e8:	240003f4 	.word	0x240003f4

080013ec <bno055_read_temp_data>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_temp_data(s8 *temp_s8)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80013f4:	23ff      	movs	r3, #255	@ 0xff
 80013f6:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80013fc:	23ff      	movs	r3, #255	@ 0xff
 80013fe:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001400:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <bno055_read_temp_data+0x7c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <bno055_read_temp_data+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001408:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800140c:	e028      	b.n	8001460 <bno055_read_temp_data+0x74>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <bno055_read_temp_data+0x7c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	791b      	ldrb	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d004      	beq.n	8001422 <bno055_read_temp_data+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fc8d 	bl	8000d38 <bno055_write_page_id>
 800141e:	4603      	mov	r3, r0
 8001420:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001422:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <bno055_read_temp_data+0x48>
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <bno055_read_temp_data+0x7c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	791b      	ldrb	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d111      	bne.n	8001458 <bno055_read_temp_data+0x6c>
        {
            /* Read the raw temperature data */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <bno055_read_temp_data+0x7c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691c      	ldr	r4, [r3, #16]
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <bno055_read_temp_data+0x7c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	7a58      	ldrb	r0, [r3, #9]
 8001440:	f107 020d 	add.w	r2, r7, #13
 8001444:	2301      	movs	r3, #1
 8001446:	2134      	movs	r1, #52	@ 0x34
 8001448:	47a0      	blx	r4
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_TEMP_REG,
                                                      &data_u8,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *temp_s8 = data_u8;
 800144e:	7b7b      	ldrb	r3, [r7, #13]
 8001450:	b25a      	sxtb	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	e001      	b.n	800145c <bno055_read_temp_data+0x70>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001458:	23ff      	movs	r3, #255	@ 0xff
 800145a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800145c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	240003f4 	.word	0x240003f4

0800146c <bno055_convert_float_euler_hpr_deg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_float_euler_hpr_deg(struct bno055_euler_float_t *euler_hpr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001474:	23ff      	movs	r3, #255	@ 0xff
 8001476:	75fb      	strb	r3, [r7, #23]
    struct bno055_euler_t reg_euler = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001478:	2300      	movs	r3, #0
 800147a:	823b      	strh	r3, [r7, #16]
 800147c:	2300      	movs	r3, #0
 800147e:	827b      	strh	r3, [r7, #18]
 8001480:	2300      	movs	r3, #0
 8001482:	82bb      	strh	r3, [r7, #20]
    u8 euler_unit_u8 = BNO055_INIT_VALUE;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]

    /* Read the current Euler unit and set the
     * unit as degree if the unit is in radians */
    com_rslt = bno055_get_euler_unit(&euler_unit_u8);
 8001488:	f107 030f 	add.w	r3, r7, #15
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fbd3 	bl	8001c38 <bno055_get_euler_unit>
 8001492:	4603      	mov	r3, r0
 8001494:	75fb      	strb	r3, [r7, #23]
    if (euler_unit_u8 != BNO055_EULER_UNIT_DEG)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <bno055_convert_float_euler_hpr_deg+0x42>
    {
        com_rslt += bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
 800149c:	2000      	movs	r0, #0
 800149e:	f000 fc0f 	bl	8001cc0 <bno055_set_euler_unit>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	4413      	add	r3, r2
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 80014ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d13f      	bne.n	8001536 <bno055_convert_float_euler_hpr_deg+0xca>
    {
        /* Read Euler raw hrp data*/
        com_rslt += bno055_read_euler_hrp(&reg_euler);
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe3e 	bl	800113c <bno055_read_euler_hrp>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	4413      	add	r3, r2
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 80014cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d12d      	bne.n	8001530 <bno055_convert_float_euler_hpr_deg+0xc4>
        {
            /* Convert raw Euler hrp to degree*/
            euler_hpr->h = (float)(reg_euler.h / BNO055_EULER_DIV_DEG);
 80014d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014e0:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80014e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edc3 7a00 	vstr	s15, [r3]
            euler_hpr->p = (float)(reg_euler.p / BNO055_EULER_DIV_DEG);
 80014f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014fe:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001502:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001506:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	edc3 7a02 	vstr	s15, [r3, #8]
            euler_hpr->r = (float)(reg_euler.r / BNO055_EULER_DIV_DEG);
 8001510:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800151c:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001520:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001524:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edc3 7a01 	vstr	s15, [r3, #4]
 800152e:	e004      	b.n	800153a <bno055_convert_float_euler_hpr_deg+0xce>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001530:	23ff      	movs	r3, #255	@ 0xff
 8001532:	75fb      	strb	r3, [r7, #23]
 8001534:	e001      	b.n	800153a <bno055_convert_float_euler_hpr_deg+0xce>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8001536:	23ff      	movs	r3, #255	@ 0xff
 8001538:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 800153a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <bno055_convert_float_gravity_xyz_msq>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_float_gravity_xyz_msq(struct bno055_gravity_float_t *gravity_xyz)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001550:	23ff      	movs	r3, #255	@ 0xff
 8001552:	73fb      	strb	r3, [r7, #15]
    struct bno055_gravity_t reg_gravity_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001554:	2300      	movs	r3, #0
 8001556:	813b      	strh	r3, [r7, #8]
 8001558:	2300      	movs	r3, #0
 800155a:	817b      	strh	r3, [r7, #10]
 800155c:	2300      	movs	r3, #0
 800155e:	81bb      	strh	r3, [r7, #12]

    /* Read raw gravity of xyz */
    com_rslt = bno055_read_gravity_xyz(&reg_gravity_xyz);
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fed3 	bl	8001310 <bno055_read_gravity_xyz>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
    if (com_rslt == BNO055_SUCCESS)
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d12d      	bne.n	80015d2 <bno055_convert_float_gravity_xyz_msq+0x8a>
    {
        /* Convert raw gravity xyz to meterpersecseq */
        gravity_xyz->x = (float)(reg_gravity_xyz.x / BNO055_GRAVITY_DIV_MSQ);
 8001576:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001582:	ed9f 5b19 	vldr	d5, [pc, #100]	@ 80015e8 <bno055_convert_float_gravity_xyz_msq+0xa0>
 8001586:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800158a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	edc3 7a00 	vstr	s15, [r3]
        gravity_xyz->y = (float)(reg_gravity_xyz.y / BNO055_GRAVITY_DIV_MSQ);
 8001594:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015a0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80015e8 <bno055_convert_float_gravity_xyz_msq+0xa0>
 80015a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	edc3 7a01 	vstr	s15, [r3, #4]
        gravity_xyz->z = (float)(reg_gravity_xyz.z / BNO055_GRAVITY_DIV_MSQ);
 80015b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015be:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 80015e8 <bno055_convert_float_gravity_xyz_msq+0xa0>
 80015c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edc3 7a02 	vstr	s15, [r3, #8]
 80015d0:	e001      	b.n	80015d6 <bno055_convert_float_gravity_xyz_msq+0x8e>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 80015d2:	23ff      	movs	r3, #255	@ 0xff
 80015d4:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	f3af 8000 	nop.w
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40590000 	.word	0x40590000

080015f0 <bno055_convert_float_temp_celsius>:
 *
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_float_temp_celsius(float *temp_f)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80015f8:	23ff      	movs	r3, #255	@ 0xff
 80015fa:	75fb      	strb	r3, [r7, #23]
    s8 reg_temp_s8 = BNO055_INIT_VALUE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
    float data_f = BNO055_INIT_VALUE;
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
    u8 temp_unit_u8 = BNO055_INIT_VALUE;
 8001606:	2300      	movs	r3, #0
 8001608:	73bb      	strb	r3, [r7, #14]

    /* Read the current temperature unit and set the
     * unit as Fahrenheit if the unit is in Celsius */
    com_rslt = bno055_get_temp_unit(&temp_unit_u8);
 800160a:	f107 030e 	add.w	r3, r7, #14
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fbd2 	bl	8001db8 <bno055_get_temp_unit>
 8001614:	4603      	mov	r3, r0
 8001616:	75fb      	strb	r3, [r7, #23]
    if (temp_unit_u8 != BNO055_TEMP_UNIT_CELSIUS)
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <bno055_convert_float_temp_celsius+0x40>
    {
        com_rslt += bno055_set_temp_unit(BNO055_TEMP_UNIT_CELSIUS);
 800161e:	2000      	movs	r0, #0
 8001620:	f000 fc0e 	bl	8001e40 <bno055_set_temp_unit>
 8001624:	4603      	mov	r3, r0
 8001626:	b2da      	uxtb	r2, r3
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	4413      	add	r3, r2
 800162c:	b2db      	uxtb	r3, r3
 800162e:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 8001630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d11f      	bne.n	8001678 <bno055_convert_float_temp_celsius+0x88>
    {
        /* Read the raw temperature data */
        com_rslt += bno055_read_temp_data(&reg_temp_s8);
 8001638:	f107 030f 	add.w	r3, r7, #15
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fed5 	bl	80013ec <bno055_read_temp_data>
 8001642:	4603      	mov	r3, r0
 8001644:	b2da      	uxtb	r2, r3
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	4413      	add	r3, r2
 800164a:	b2db      	uxtb	r3, r3
 800164c:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 800164e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10d      	bne.n	8001672 <bno055_convert_float_temp_celsius+0x82>
        {
            /* Convert raw temperature data to Fahrenheit*/
            data_f = (float)(reg_temp_s8 / BNO055_TEMP_DIV_CELSIUS);
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001662:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001666:	edc7 7a04 	vstr	s15, [r7, #16]
            *temp_f = data_f;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e004      	b.n	800167c <bno055_convert_float_temp_celsius+0x8c>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001672:	23ff      	movs	r3, #255	@ 0xff
 8001674:	75fb      	strb	r3, [r7, #23]
 8001676:	e001      	b.n	800167c <bno055_convert_float_temp_celsius+0x8c>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8001678:	23ff      	movs	r3, #255	@ 0xff
 800167a:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 800167c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <bno055_convert_double_accel_xyz_mg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_accel_xyz_mg(struct bno055_accel_double_t *accel_xyz)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001690:	23ff      	movs	r3, #255	@ 0xff
 8001692:	75fb      	strb	r3, [r7, #23]
    struct bno055_accel_t reg_accel_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001694:	2300      	movs	r3, #0
 8001696:	823b      	strh	r3, [r7, #16]
 8001698:	2300      	movs	r3, #0
 800169a:	827b      	strh	r3, [r7, #18]
 800169c:	2300      	movs	r3, #0
 800169e:	82bb      	strh	r3, [r7, #20]
    u8 accel_unit_u8 = BNO055_INIT_VALUE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]

    /* Read the current accel unit and set the
     * unit as m/s2 if the unit is in mg*/
    com_rslt = bno055_get_accel_unit(&accel_unit_u8);
 80016a4:	f107 030f 	add.w	r3, r7, #15
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f949 	bl	8001940 <bno055_get_accel_unit>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]
    if (accel_unit_u8 != BNO055_ACCEL_UNIT_MG)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d008      	beq.n	80016ca <bno055_convert_double_accel_xyz_mg+0x42>
    {
        com_rslt += bno055_set_accel_unit(BNO055_ACCEL_UNIT_MG);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f000 f983 	bl	80019c4 <bno055_set_accel_unit>
 80016be:	4603      	mov	r3, r0
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	4413      	add	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 80016ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d12d      	bne.n	800172e <bno055_convert_double_accel_xyz_mg+0xa6>
    {
        /* Read the accel raw xyz data*/
        com_rslt += bno055_read_accel_xyz(&reg_accel_xyz);
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fb76 	bl	8000dc8 <bno055_read_accel_xyz>
 80016dc:	4603      	mov	r3, r0
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	4413      	add	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 80016e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d11b      	bne.n	8001728 <bno055_convert_double_accel_xyz_mg+0xa0>
        {
            /* Convert raw xyz to mg*/
            accel_xyz->x = (double)(reg_accel_xyz.x / BNO055_ACCEL_DIV_MG);
 80016f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	ed83 7b00 	vstr	d7, [r3]
            accel_xyz->y = (double)(reg_accel_xyz.y / BNO055_ACCEL_DIV_MG);
 8001702:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	ed83 7b02 	vstr	d7, [r3, #8]
            accel_xyz->z = (double)(reg_accel_xyz.z / BNO055_ACCEL_DIV_MG);
 8001714:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	ed83 7b04 	vstr	d7, [r3, #16]
 8001726:	e004      	b.n	8001732 <bno055_convert_double_accel_xyz_mg+0xaa>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001728:	23ff      	movs	r3, #255	@ 0xff
 800172a:	75fb      	strb	r3, [r7, #23]
 800172c:	e001      	b.n	8001732 <bno055_convert_double_accel_xyz_mg+0xaa>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 800172e:	23ff      	movs	r3, #255	@ 0xff
 8001730:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 8001732:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <bno055_convert_double_mag_x_uT>:
 *
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_mag_x_uT(double *mag_x_d)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b088      	sub	sp, #32
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001746:	23ff      	movs	r3, #255	@ 0xff
 8001748:	77fb      	strb	r3, [r7, #31]
    s16 reg_mag_x_s16 = BNO055_INIT_VALUE;
 800174a:	2300      	movs	r3, #0
 800174c:	81fb      	strh	r3, [r7, #14]
    double data_d = BNO055_INIT_VALUE;
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Read raw mag x data */
    com_rslt = bno055_read_mag_x(&reg_mag_x_s16);
 800175a:	f107 030e 	add.w	r3, r7, #14
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fba0 	bl	8000ea4 <bno055_read_mag_x>
 8001764:	4603      	mov	r3, r0
 8001766:	77fb      	strb	r3, [r7, #31]
    if (com_rslt == BNO055_SUCCESS)
 8001768:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d111      	bne.n	8001794 <bno055_convert_double_mag_x_uT+0x56>
    {
        /* Convert raw mag x to microTesla */
        data_d = (double)(reg_mag_x_s16 / BNO055_MAG_DIV_UT);
 8001770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800177c:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001780:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001784:	ed87 7b04 	vstr	d7, [r7, #16]
        *mag_x_d = data_d;
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800178e:	e9c1 2300 	strd	r2, r3, [r1]
 8001792:	e001      	b.n	8001798 <bno055_convert_double_mag_x_uT+0x5a>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8001794:	23ff      	movs	r3, #255	@ 0xff
 8001796:	77fb      	strb	r3, [r7, #31]
    }

    return com_rslt;
 8001798:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <bno055_convert_double_mag_y_uT>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_mag_y_uT(double *mag_y_d)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80017ac:	23ff      	movs	r3, #255	@ 0xff
 80017ae:	77fb      	strb	r3, [r7, #31]
    s16 reg_mag_y_s16 = BNO055_INIT_VALUE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	81fb      	strh	r3, [r7, #14]
    double data_d = BNO055_INIT_VALUE;
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Read raw mag y data */
    com_rslt = bno055_read_mag_y(&reg_mag_y_s16);
 80017c0:	f107 030e 	add.w	r3, r7, #14
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fbb7 	bl	8000f38 <bno055_read_mag_y>
 80017ca:	4603      	mov	r3, r0
 80017cc:	77fb      	strb	r3, [r7, #31]
    if (com_rslt == BNO055_SUCCESS)
 80017ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d111      	bne.n	80017fa <bno055_convert_double_mag_y_uT+0x56>
    {
        /* Convert raw mag y to microTesla */
        data_d = (double)(reg_mag_y_s16 / BNO055_MAG_DIV_UT);
 80017d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017e2:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80017e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017ea:	ed87 7b04 	vstr	d7, [r7, #16]
        *mag_y_d = data_d;
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017f4:	e9c1 2300 	strd	r2, r3, [r1]
 80017f8:	e001      	b.n	80017fe <bno055_convert_double_mag_y_uT+0x5a>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 80017fa:	23ff      	movs	r3, #255	@ 0xff
 80017fc:	77fb      	strb	r3, [r7, #31]
    }

    return com_rslt;
 80017fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <bno055_convert_double_mag_z_uT>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_mag_z_uT(double *mag_z_d)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b088      	sub	sp, #32
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001812:	23ff      	movs	r3, #255	@ 0xff
 8001814:	77fb      	strb	r3, [r7, #31]
    s16 reg_mag_z_s16 = BNO055_INIT_VALUE;
 8001816:	2300      	movs	r3, #0
 8001818:	81fb      	strh	r3, [r7, #14]
    double data_d = BNO055_INIT_VALUE;
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Read raw mag x */
    com_rslt = bno055_read_mag_z(&reg_mag_z_s16);
 8001826:	f107 030e 	add.w	r3, r7, #14
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fbce 	bl	8000fcc <bno055_read_mag_z>
 8001830:	4603      	mov	r3, r0
 8001832:	77fb      	strb	r3, [r7, #31]
    if (com_rslt == BNO055_SUCCESS)
 8001834:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d111      	bne.n	8001860 <bno055_convert_double_mag_z_uT+0x56>
    {
        /* Convert raw mag x to microTesla */
        data_d = (double)(reg_mag_z_s16 / BNO055_MAG_DIV_UT);
 800183c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001848:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800184c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001850:	ed87 7b04 	vstr	d7, [r7, #16]
        *mag_z_d = data_d;
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800185a:	e9c1 2300 	strd	r2, r3, [r1]
 800185e:	e001      	b.n	8001864 <bno055_convert_double_mag_z_uT+0x5a>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8001860:	23ff      	movs	r3, #255	@ 0xff
 8001862:	77fb      	strb	r3, [r7, #31]
    }

    return com_rslt;
 8001864:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <bno055_convert_double_gyro_xyz_dps>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_gyro_xyz_dps(struct bno055_gyro_double_t *gyro_xyz)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001878:	23ff      	movs	r3, #255	@ 0xff
 800187a:	75fb      	strb	r3, [r7, #23]
    struct bno055_gyro_t reg_gyro_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 800187c:	2300      	movs	r3, #0
 800187e:	823b      	strh	r3, [r7, #16]
 8001880:	2300      	movs	r3, #0
 8001882:	827b      	strh	r3, [r7, #18]
 8001884:	2300      	movs	r3, #0
 8001886:	82bb      	strh	r3, [r7, #20]
    u8 gyro_unit_u8 = BNO055_INIT_VALUE;
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]

    /* Read the current gyro unit and set the
     * unit as dps if the unit is in rps */
    com_rslt = bno055_get_gyro_unit(&gyro_unit_u8);
 800188c:	f107 030f 	add.w	r3, r7, #15
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f911 	bl	8001ab8 <bno055_get_gyro_unit>
 8001896:	4603      	mov	r3, r0
 8001898:	75fb      	strb	r3, [r7, #23]
    if (gyro_unit_u8 != BNO055_GYRO_UNIT_DPS)
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <bno055_convert_double_gyro_xyz_dps+0x42>
    {
        com_rslt += bno055_set_gyro_unit(BNO055_GYRO_UNIT_DPS);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 f94d 	bl	8001b40 <bno055_set_gyro_unit>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	4413      	add	r3, r2
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 80018b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d139      	bne.n	800192e <bno055_convert_double_gyro_xyz_dps+0xbe>
    {
        /* Read gyro raw xyz data */
        com_rslt += bno055_read_gyro_xyz(&reg_gyro_xyz);
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fbce 	bl	8001060 <bno055_read_gyro_xyz>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 80018d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d127      	bne.n	8001928 <bno055_convert_double_gyro_xyz_dps+0xb8>
        {
            /* Convert gyro raw xyz to dps*/
            gyro_xyz->x = (double)(reg_gyro_xyz.x / BNO055_GYRO_DIV_DPS);
 80018d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018e4:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80018e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	ed83 7b00 	vstr	d7, [r3]
            gyro_xyz->y = (double)(reg_gyro_xyz.y / BNO055_GYRO_DIV_DPS);
 80018f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018fe:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001902:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	ed83 7b02 	vstr	d7, [r3, #8]
            gyro_xyz->z = (double)(reg_gyro_xyz.z / BNO055_GYRO_DIV_DPS);
 800190c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001918:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800191c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	ed83 7b04 	vstr	d7, [r3, #16]
 8001926:	e004      	b.n	8001932 <bno055_convert_double_gyro_xyz_dps+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001928:	23ff      	movs	r3, #255	@ 0xff
 800192a:	75fb      	strb	r3, [r7, #23]
 800192c:	e001      	b.n	8001932 <bno055_convert_double_gyro_xyz_dps+0xc2>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 800192e:	23ff      	movs	r3, #255	@ 0xff
 8001930:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 8001932:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <bno055_get_accel_unit>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_accel_unit(u8 *accel_unit_u8)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001948:	23ff      	movs	r3, #255	@ 0xff
 800194a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800194c:	2300      	movs	r3, #0
 800194e:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001950:	23ff      	movs	r3, #255	@ 0xff
 8001952:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001954:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <bno055_get_accel_unit+0x80>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <bno055_get_accel_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 800195c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001960:	e02a      	b.n	80019b8 <bno055_get_accel_unit+0x78>
    }
    else
    {
        /*condition check for page, accel unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001962:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <bno055_get_accel_unit+0x80>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	791b      	ldrb	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <bno055_get_accel_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff f9e3 	bl	8000d38 <bno055_write_page_id>
 8001972:	4603      	mov	r3, r0
 8001974:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d004      	beq.n	8001988 <bno055_get_accel_unit+0x48>
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <bno055_get_accel_unit+0x80>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	791b      	ldrb	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d113      	bne.n	80019b0 <bno055_get_accel_unit+0x70>
        {
            /* Read the accel unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <bno055_get_accel_unit+0x80>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691c      	ldr	r4, [r3, #16]
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <bno055_get_accel_unit+0x80>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	7a58      	ldrb	r0, [r3, #9]
 8001994:	f107 020d 	add.w	r2, r7, #13
 8001998:	2301      	movs	r3, #1
 800199a:	213b      	movs	r1, #59	@ 0x3b
 800199c:	47a0      	blx	r4
 800199e:	4603      	mov	r3, r0
 80019a0:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *accel_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT);
 80019a2:	7b7b      	ldrb	r3, [r7, #13]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	e001      	b.n	80019b4 <bno055_get_accel_unit+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80019b0:	23ff      	movs	r3, #255	@ 0xff
 80019b2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80019b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	240003f4 	.word	0x240003f4

080019c4 <bno055_set_accel_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_unit(u8 accel_unit_u8)
{
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80019ce:	23ff      	movs	r3, #255	@ 0xff
 80019d0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80019d6:	2300      	movs	r3, #0
 80019d8:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80019da:	23ff      	movs	r3, #255	@ 0xff
 80019dc:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80019de:	4b35      	ldr	r3, [pc, #212]	@ (8001ab4 <bno055_set_accel_unit+0xf0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <bno055_set_accel_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 80019e6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80019ea:	e05f      	b.n	8001aac <bno055_set_accel_unit+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 faa1 	bl	8001f38 <bno055_get_operation_mode>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80019fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d143      	bne.n	8001a8a <bno055_set_accel_unit+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001a02:	7b3b      	ldrb	r3, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <bno055_set_accel_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f000 fad7 	bl	8001fbc <bno055_set_operation_mode>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	7bbb      	ldrb	r3, [r7, #14]
 8001a14:	4413      	add	r3, r2
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d130      	bne.n	8001a84 <bno055_set_accel_unit+0xc0>
            {
                /* Write the accel unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001a22:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <bno055_set_accel_unit+0xf0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691c      	ldr	r4, [r3, #16]
 8001a28:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <bno055_set_accel_unit+0xf0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	7a58      	ldrb	r0, [r3, #9]
 8001a2e:	f107 020d 	add.w	r2, r7, #13
 8001a32:	2301      	movs	r3, #1
 8001a34:	213b      	movs	r1, #59	@ 0x3b
 8001a36:	47a0      	blx	r4
 8001a38:	4603      	mov	r3, r0
 8001a3a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_ACCEL_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d124      	bne.n	8001a8e <bno055_set_accel_unit+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT, accel_unit_u8);
 8001a44:	7b7b      	ldrb	r3, [r7, #13]
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	b25a      	sxtb	r2, r3
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <bno055_set_accel_unit+0xf0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68dc      	ldr	r4, [r3, #12]
 8001a66:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <bno055_set_accel_unit+0xf0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	7a58      	ldrb	r0, [r3, #9]
 8001a6c:	f107 020d 	add.w	r2, r7, #13
 8001a70:	2301      	movs	r3, #1
 8001a72:	213b      	movs	r1, #59	@ 0x3b
 8001a74:	47a0      	blx	r4
 8001a76:	4603      	mov	r3, r0
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e004      	b.n	8001a8e <bno055_set_accel_unit+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001a84:	23ff      	movs	r3, #255	@ 0xff
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e001      	b.n	8001a8e <bno055_set_accel_unit+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001a8a:	23ff      	movs	r3, #255	@ 0xff
 8001a8c:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001a8e:	7b3b      	ldrb	r3, [r7, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <bno055_set_accel_unit+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001a94:	7b3b      	ldrb	r3, [r7, #12]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fa90 	bl	8001fbc <bno055_set_operation_mode>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	240003f4 	.word	0x240003f4

08001ab8 <bno055_get_gyro_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_gyro_unit(u8 *gyro_unit_u8)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001ac0:	23ff      	movs	r3, #255	@ 0xff
 8001ac2:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001ac8:	23ff      	movs	r3, #255	@ 0xff
 8001aca:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <bno055_get_gyro_unit+0x84>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <bno055_get_gyro_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001ad4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001ad8:	e02c      	b.n	8001b34 <bno055_get_gyro_unit+0x7c>
    }
    else
    {
        /*condition check for page, gyro unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <bno055_get_gyro_unit+0x84>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <bno055_get_gyro_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff f927 	bl	8000d38 <bno055_write_page_id>
 8001aea:	4603      	mov	r3, r0
 8001aec:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <bno055_get_gyro_unit+0x48>
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <bno055_get_gyro_unit+0x84>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	791b      	ldrb	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d115      	bne.n	8001b2c <bno055_get_gyro_unit+0x74>
        {
            /* Read the gyro unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001b00:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <bno055_get_gyro_unit+0x84>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691c      	ldr	r4, [r3, #16]
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <bno055_get_gyro_unit+0x84>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	7a58      	ldrb	r0, [r3, #9]
 8001b0c:	f107 020d 	add.w	r2, r7, #13
 8001b10:	2301      	movs	r3, #1
 8001b12:	213b      	movs	r1, #59	@ 0x3b
 8001b14:	47a0      	blx	r4
 8001b16:	4603      	mov	r3, r0
 8001b18:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_GYRO_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *gyro_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_GYRO_UNIT);
 8001b1a:	7b7b      	ldrb	r3, [r7, #13]
 8001b1c:	105b      	asrs	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e001      	b.n	8001b30 <bno055_get_gyro_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001b2c:	23ff      	movs	r3, #255	@ 0xff
 8001b2e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}
 8001b3c:	240003f4 	.word	0x240003f4

08001b40 <bno055_set_gyro_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_gyro_unit(u8 gyro_unit_u8)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001b4a:	23ff      	movs	r3, #255	@ 0xff
 8001b4c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001b52:	2300      	movs	r3, #0
 8001b54:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001b56:	23ff      	movs	r3, #255	@ 0xff
 8001b58:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001b5a:	4b36      	ldr	r3, [pc, #216]	@ (8001c34 <bno055_set_gyro_unit+0xf4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <bno055_set_gyro_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001b62:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001b66:	e060      	b.n	8001c2a <bno055_set_gyro_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 f9e3 	bl	8001f38 <bno055_get_operation_mode>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001b76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d144      	bne.n	8001c08 <bno055_set_gyro_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001b7e:	7b3b      	ldrb	r3, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <bno055_set_gyro_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f000 fa19 	bl	8001fbc <bno055_set_operation_mode>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	7bbb      	ldrb	r3, [r7, #14]
 8001b90:	4413      	add	r3, r2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d131      	bne.n	8001c02 <bno055_set_gyro_unit+0xc2>
            {
                /* Write the gyro unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001b9e:	4b25      	ldr	r3, [pc, #148]	@ (8001c34 <bno055_set_gyro_unit+0xf4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691c      	ldr	r4, [r3, #16]
 8001ba4:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <bno055_set_gyro_unit+0xf4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	7a58      	ldrb	r0, [r3, #9]
 8001baa:	f107 020d 	add.w	r2, r7, #13
 8001bae:	2301      	movs	r3, #1
 8001bb0:	213b      	movs	r1, #59	@ 0x3b
 8001bb2:	47a0      	blx	r4
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_GYRO_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d125      	bne.n	8001c0c <bno055_set_gyro_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_GYRO_UNIT, gyro_unit_u8);
 8001bc0:	7b7b      	ldrb	r3, [r7, #13]
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	f023 0302 	bic.w	r3, r3, #2
 8001bc8:	b25a      	sxtb	r2, r3
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <bno055_set_gyro_unit+0xf4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68dc      	ldr	r4, [r3, #12]
 8001be4:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <bno055_set_gyro_unit+0xf4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	7a58      	ldrb	r0, [r3, #9]
 8001bea:	f107 020d 	add.w	r2, r7, #13
 8001bee:	2301      	movs	r3, #1
 8001bf0:	213b      	movs	r1, #59	@ 0x3b
 8001bf2:	47a0      	blx	r4
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e004      	b.n	8001c0c <bno055_set_gyro_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001c02:	23ff      	movs	r3, #255	@ 0xff
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	e001      	b.n	8001c0c <bno055_set_gyro_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001c08:	23ff      	movs	r3, #255	@ 0xff
 8001c0a:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001c0c:	7b3b      	ldrb	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <bno055_set_gyro_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001c12:	7b3b      	ldrb	r3, [r7, #12]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f9d1 	bl	8001fbc <bno055_set_operation_mode>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	4413      	add	r3, r2
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	240003f4 	.word	0x240003f4

08001c38 <bno055_get_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_euler_unit(u8 *euler_unit_u8)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001c40:	23ff      	movs	r3, #255	@ 0xff
 8001c42:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001c48:	23ff      	movs	r3, #255	@ 0xff
 8001c4a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <bno055_get_euler_unit+0x84>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <bno055_get_euler_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001c54:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001c58:	e02c      	b.n	8001cb4 <bno055_get_euler_unit+0x7c>
    }
    else
    {
        /*condition check for page, Euler unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001c5a:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <bno055_get_euler_unit+0x84>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	791b      	ldrb	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <bno055_get_euler_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff f867 	bl	8000d38 <bno055_write_page_id>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d004      	beq.n	8001c80 <bno055_get_euler_unit+0x48>
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <bno055_get_euler_unit+0x84>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	791b      	ldrb	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d115      	bne.n	8001cac <bno055_get_euler_unit+0x74>
        {
            /* Read the Euler unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001c80:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <bno055_get_euler_unit+0x84>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691c      	ldr	r4, [r3, #16]
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <bno055_get_euler_unit+0x84>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	7a58      	ldrb	r0, [r3, #9]
 8001c8c:	f107 020d 	add.w	r2, r7, #13
 8001c90:	2301      	movs	r3, #1
 8001c92:	213b      	movs	r1, #59	@ 0x3b
 8001c94:	47a0      	blx	r4
 8001c96:	4603      	mov	r3, r0
 8001c98:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *euler_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_EULER_UNIT);
 8001c9a:	7b7b      	ldrb	r3, [r7, #13]
 8001c9c:	109b      	asrs	r3, r3, #2
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e001      	b.n	8001cb0 <bno055_get_euler_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001cac:	23ff      	movs	r3, #255	@ 0xff
 8001cae:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}
 8001cbc:	240003f4 	.word	0x240003f4

08001cc0 <bno055_set_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_euler_unit(u8 euler_unit_u8)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001cca:	23ff      	movs	r3, #255	@ 0xff
 8001ccc:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001cd6:	23ff      	movs	r3, #255	@ 0xff
 8001cd8:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001cda:	4b36      	ldr	r3, [pc, #216]	@ (8001db4 <bno055_set_euler_unit+0xf4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <bno055_set_euler_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001ce2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001ce6:	e060      	b.n	8001daa <bno055_set_euler_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f923 	bl	8001f38 <bno055_get_operation_mode>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d144      	bne.n	8001d88 <bno055_set_euler_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001cfe:	7b3b      	ldrb	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <bno055_set_euler_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001d04:	2000      	movs	r0, #0
 8001d06:	f000 f959 	bl	8001fbc <bno055_set_operation_mode>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	4413      	add	r3, r2
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d131      	bne.n	8001d82 <bno055_set_euler_unit+0xc2>
            {
                /* Write the Euler unit*/
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001d1e:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <bno055_set_euler_unit+0xf4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691c      	ldr	r4, [r3, #16]
 8001d24:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <bno055_set_euler_unit+0xf4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	7a58      	ldrb	r0, [r3, #9]
 8001d2a:	f107 020d 	add.w	r2, r7, #13
 8001d2e:	2301      	movs	r3, #1
 8001d30:	213b      	movs	r1, #59	@ 0x3b
 8001d32:	47a0      	blx	r4
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_EULER_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d125      	bne.n	8001d8c <bno055_set_euler_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 8001d40:	7b7b      	ldrb	r3, [r7, #13]
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	b25a      	sxtb	r2, r3
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <bno055_set_euler_unit+0xf4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68dc      	ldr	r4, [r3, #12]
 8001d64:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <bno055_set_euler_unit+0xf4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	7a58      	ldrb	r0, [r3, #9]
 8001d6a:	f107 020d 	add.w	r2, r7, #13
 8001d6e:	2301      	movs	r3, #1
 8001d70:	213b      	movs	r1, #59	@ 0x3b
 8001d72:	47a0      	blx	r4
 8001d74:	4603      	mov	r3, r0
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e004      	b.n	8001d8c <bno055_set_euler_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001d82:	23ff      	movs	r3, #255	@ 0xff
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e001      	b.n	8001d8c <bno055_set_euler_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001d88:	23ff      	movs	r3, #255	@ 0xff
 8001d8a:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001d8c:	7b3b      	ldrb	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <bno055_set_euler_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001d92:	7b3b      	ldrb	r3, [r7, #12]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 f911 	bl	8001fbc <bno055_set_operation_mode>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	4413      	add	r3, r2
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	240003f4 	.word	0x240003f4

08001db8 <bno055_get_temp_unit>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_temp_unit(u8 *temp_unit_u8)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001dc0:	23ff      	movs	r3, #255	@ 0xff
 8001dc2:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001dc8:	23ff      	movs	r3, #255	@ 0xff
 8001dca:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <bno055_get_temp_unit+0x84>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <bno055_get_temp_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001dd4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001dd8:	e02c      	b.n	8001e34 <bno055_get_temp_unit+0x7c>
    }
    else
    {
        /*condition check for page, temperature unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001dda:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <bno055_get_temp_unit+0x84>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	791b      	ldrb	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d004      	beq.n	8001dee <bno055_get_temp_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7fe ffa7 	bl	8000d38 <bno055_write_page_id>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001dee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <bno055_get_temp_unit+0x48>
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <bno055_get_temp_unit+0x84>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	791b      	ldrb	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d115      	bne.n	8001e2c <bno055_get_temp_unit+0x74>
        {
            /* Read the temperature unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <bno055_get_temp_unit+0x84>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691c      	ldr	r4, [r3, #16]
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <bno055_get_temp_unit+0x84>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	7a58      	ldrb	r0, [r3, #9]
 8001e0c:	f107 020d 	add.w	r2, r7, #13
 8001e10:	2301      	movs	r3, #1
 8001e12:	213b      	movs	r1, #59	@ 0x3b
 8001e14:	47a0      	blx	r4
 8001e16:	4603      	mov	r3, r0
 8001e18:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_TEMP_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *temp_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_TEMP_UNIT);
 8001e1a:	7b7b      	ldrb	r3, [r7, #13]
 8001e1c:	111b      	asrs	r3, r3, #4
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e001      	b.n	8001e30 <bno055_get_temp_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001e2c:	23ff      	movs	r3, #255	@ 0xff
 8001e2e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	240003f4 	.word	0x240003f4

08001e40 <bno055_set_temp_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_temp_unit(u8 temp_unit_u8)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001e4a:	23ff      	movs	r3, #255	@ 0xff
 8001e4c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001e52:	2300      	movs	r3, #0
 8001e54:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001e56:	23ff      	movs	r3, #255	@ 0xff
 8001e58:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001e5a:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <bno055_set_temp_unit+0xf4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <bno055_set_temp_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001e62:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001e66:	e060      	b.n	8001f2a <bno055_set_temp_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 f863 	bl	8001f38 <bno055_get_operation_mode>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001e76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d144      	bne.n	8001f08 <bno055_set_temp_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001e7e:	7b3b      	ldrb	r3, [r7, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <bno055_set_temp_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 f899 	bl	8001fbc <bno055_set_operation_mode>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	7bbb      	ldrb	r3, [r7, #14]
 8001e90:	4413      	add	r3, r2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d131      	bne.n	8001f02 <bno055_set_temp_unit+0xc2>
            {
                /* Write the temperature unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001e9e:	4b25      	ldr	r3, [pc, #148]	@ (8001f34 <bno055_set_temp_unit+0xf4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691c      	ldr	r4, [r3, #16]
 8001ea4:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <bno055_set_temp_unit+0xf4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	7a58      	ldrb	r0, [r3, #9]
 8001eaa:	f107 020d 	add.w	r2, r7, #13
 8001eae:	2301      	movs	r3, #1
 8001eb0:	213b      	movs	r1, #59	@ 0x3b
 8001eb2:	47a0      	blx	r4
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_TEMP_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d125      	bne.n	8001f0c <bno055_set_temp_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_TEMP_UNIT, temp_unit_u8);
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	f023 0310 	bic.w	r3, r3, #16
 8001ec8:	b25a      	sxtb	r2, r3
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	b25b      	sxtb	r3, r3
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	b25b      	sxtb	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b25b      	sxtb	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <bno055_set_temp_unit+0xf4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68dc      	ldr	r4, [r3, #12]
 8001ee4:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <bno055_set_temp_unit+0xf4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	7a58      	ldrb	r0, [r3, #9]
 8001eea:	f107 020d 	add.w	r2, r7, #13
 8001eee:	2301      	movs	r3, #1
 8001ef0:	213b      	movs	r1, #59	@ 0x3b
 8001ef2:	47a0      	blx	r4
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	4413      	add	r3, r2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e004      	b.n	8001f0c <bno055_set_temp_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001f02:	23ff      	movs	r3, #255	@ 0xff
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	e001      	b.n	8001f0c <bno055_set_temp_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001f08:	23ff      	movs	r3, #255	@ 0xff
 8001f0a:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001f0c:	7b3b      	ldrb	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <bno055_set_temp_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001f12:	7b3b      	ldrb	r3, [r7, #12]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f851 	bl	8001fbc <bno055_set_operation_mode>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	4413      	add	r3, r2
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd90      	pop	{r4, r7, pc}
 8001f32:	bf00      	nop
 8001f34:	240003f4 	.word	0x240003f4

08001f38 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001f40:	23ff      	movs	r3, #255	@ 0xff
 8001f42:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001f48:	23ff      	movs	r3, #255	@ 0xff
 8001f4a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <bno055_get_operation_mode+0x80>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001f54:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001f58:	e02a      	b.n	8001fb0 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001f5a:	4b17      	ldr	r3, [pc, #92]	@ (8001fb8 <bno055_get_operation_mode+0x80>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	791b      	ldrb	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7fe fee7 	bl	8000d38 <bno055_write_page_id>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <bno055_get_operation_mode+0x48>
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <bno055_get_operation_mode+0x80>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	791b      	ldrb	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d113      	bne.n	8001fa8 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001f80:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb8 <bno055_get_operation_mode+0x80>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691c      	ldr	r4, [r3, #16]
 8001f86:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb8 <bno055_get_operation_mode+0x80>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	7a58      	ldrb	r0, [r3, #9]
 8001f8c:	f107 020d 	add.w	r2, r7, #13
 8001f90:	2301      	movs	r3, #1
 8001f92:	213d      	movs	r1, #61	@ 0x3d
 8001f94:	47a0      	blx	r4
 8001f96:	4603      	mov	r3, r0
 8001f98:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8001f9a:	7b7b      	ldrb	r3, [r7, #13]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e001      	b.n	8001fac <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001fa8:	23ff      	movs	r3, #255	@ 0xff
 8001faa:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	240003f4 	.word	0x240003f4

08001fbc <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001fc6:	23ff      	movs	r3, #255	@ 0xff
 8001fc8:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001fd2:	23ff      	movs	r3, #255	@ 0xff
 8001fd4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001fde:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001fe2:	e0ac      	b.n	800213e <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ffa5 	bl	8001f38 <bno055_get_operation_mode>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 809d 	bne.w	8002136 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001ffc:	7b3b      	ldrb	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d137      	bne.n	8002072 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8002002:	4b51      	ldr	r3, [pc, #324]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691c      	ldr	r4, [r3, #16]
 8002008:	4b4f      	ldr	r3, [pc, #316]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	7a58      	ldrb	r0, [r3, #9]
 800200e:	f107 020d 	add.w	r2, r7, #13
 8002012:	2301      	movs	r3, #1
 8002014:	213d      	movs	r1, #61	@ 0x3d
 8002016:	47a0      	blx	r4
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 800201c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002020:	2b00      	cmp	r3, #0
 8002022:	f040 808a 	bne.w	800213a <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8002026:	7b7b      	ldrb	r3, [r7, #13]
 8002028:	b25b      	sxtb	r3, r3
 800202a:	f023 030f 	bic.w	r3, r3, #15
 800202e:	b25a      	sxtb	r2, r3
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	b25b      	sxtb	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	b25b      	sxtb	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68dc      	ldr	r4, [r3, #12]
 8002048:	4b3f      	ldr	r3, [pc, #252]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	7a58      	ldrb	r0, [r3, #9]
 800204e:	f107 020d 	add.w	r2, r7, #13
 8002052:	2301      	movs	r3, #1
 8002054:	213d      	movs	r1, #61	@ 0x3d
 8002056:	47a0      	blx	r4
 8002058:	4603      	mov	r3, r0
 800205a:	b2da      	uxtb	r2, r3
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	4413      	add	r3, r2
 8002060:	b2db      	uxtb	r3, r3
 8002062:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8002064:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800206e:	4798      	blx	r3
 8002070:	e063      	b.n	800213a <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8002072:	4b35      	ldr	r3, [pc, #212]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691c      	ldr	r4, [r3, #16]
 8002078:	4b33      	ldr	r3, [pc, #204]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	7a58      	ldrb	r0, [r3, #9]
 800207e:	f107 020d 	add.w	r2, r7, #13
 8002082:	2301      	movs	r3, #1
 8002084:	213d      	movs	r1, #61	@ 0x3d
 8002086:	47a0      	blx	r4
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 800208c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d116      	bne.n	80020c2 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8002094:	7b7b      	ldrb	r3, [r7, #13]
 8002096:	f023 030f 	bic.w	r3, r3, #15
 800209a:	b2db      	uxtb	r3, r3
 800209c:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 800209e:	f107 030d 	add.w	r3, r7, #13
 80020a2:	2201      	movs	r2, #1
 80020a4:	4619      	mov	r1, r3
 80020a6:	203d      	movs	r0, #61	@ 0x3d
 80020a8:	f7fe fe20 	bl	8000cec <bno055_write_register>
 80020ac:	4603      	mov	r3, r0
 80020ae:	b2da      	uxtb	r2, r3
                    com_rslt +=
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	4413      	add	r3, r2
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 80020b8:	4b23      	ldr	r3, [pc, #140]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2014      	movs	r0, #20
 80020c0:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d038      	beq.n	800213a <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80020c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691c      	ldr	r4, [r3, #16]
 80020ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	7a58      	ldrb	r0, [r3, #9]
 80020d4:	f107 020d 	add.w	r2, r7, #13
 80020d8:	2301      	movs	r3, #1
 80020da:	213d      	movs	r1, #61	@ 0x3d
 80020dc:	47a0      	blx	r4
 80020de:	4603      	mov	r3, r0
 80020e0:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d127      	bne.n	800213a <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80020ea:	7b7b      	ldrb	r3, [r7, #13]
 80020ec:	b25b      	sxtb	r3, r3
 80020ee:	f023 030f 	bic.w	r3, r3, #15
 80020f2:	b25a      	sxtb	r2, r3
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	b25b      	sxtb	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b25b      	sxtb	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68dc      	ldr	r4, [r3, #12]
 800210c:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	7a58      	ldrb	r0, [r3, #9]
 8002112:	f107 020d 	add.w	r2, r7, #13
 8002116:	2301      	movs	r3, #1
 8002118:	213d      	movs	r1, #61	@ 0x3d
 800211a:	47a0      	blx	r4
 800211c:	4603      	mov	r3, r0
 800211e:	b2da      	uxtb	r2, r3
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	4413      	add	r3, r2
 8002124:	b2db      	uxtb	r3, r3
 8002126:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8002128:	4b07      	ldr	r3, [pc, #28]	@ (8002148 <bno055_set_operation_mode+0x18c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002132:	4798      	blx	r3
 8002134:	e001      	b.n	800213a <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8002136:	23ff      	movs	r3, #255	@ 0xff
 8002138:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	bf00      	nop
 8002148:	240003f4 	.word	0x240003f4

0800214c <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8002156:	23ff      	movs	r3, #255	@ 0xff
 8002158:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800215a:	2300      	movs	r3, #0
 800215c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800215e:	2300      	movs	r3, #0
 8002160:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8002162:	23ff      	movs	r3, #255	@ 0xff
 8002164:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8002166:	4b35      	ldr	r3, [pc, #212]	@ (800223c <bno055_set_power_mode+0xf0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 800216e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8002172:	e05f      	b.n	8002234 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fedd 	bl	8001f38 <bno055_get_operation_mode>
 800217e:	4603      	mov	r3, r0
 8002180:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8002182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d143      	bne.n	8002212 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800218a:	7b3b      	ldrb	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8002190:	2000      	movs	r0, #0
 8002192:	f7ff ff13 	bl	8001fbc <bno055_set_operation_mode>
 8002196:	4603      	mov	r3, r0
 8002198:	b2da      	uxtb	r2, r3
 800219a:	7bbb      	ldrb	r3, [r7, #14]
 800219c:	4413      	add	r3, r2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80021a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d130      	bne.n	800220c <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80021aa:	4b24      	ldr	r3, [pc, #144]	@ (800223c <bno055_set_power_mode+0xf0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691c      	ldr	r4, [r3, #16]
 80021b0:	4b22      	ldr	r3, [pc, #136]	@ (800223c <bno055_set_power_mode+0xf0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	7a58      	ldrb	r0, [r3, #9]
 80021b6:	f107 020d 	add.w	r2, r7, #13
 80021ba:	2301      	movs	r3, #1
 80021bc:	213e      	movs	r1, #62	@ 0x3e
 80021be:	47a0      	blx	r4
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80021c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d124      	bne.n	8002216 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 80021cc:	7b7b      	ldrb	r3, [r7, #13]
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	f023 0303 	bic.w	r3, r3, #3
 80021d4:	b25a      	sxtb	r2, r3
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80021e8:	4b14      	ldr	r3, [pc, #80]	@ (800223c <bno055_set_power_mode+0xf0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68dc      	ldr	r4, [r3, #12]
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <bno055_set_power_mode+0xf0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	7a58      	ldrb	r0, [r3, #9]
 80021f4:	f107 020d 	add.w	r2, r7, #13
 80021f8:	2301      	movs	r3, #1
 80021fa:	213e      	movs	r1, #62	@ 0x3e
 80021fc:	47a0      	blx	r4
 80021fe:	4603      	mov	r3, r0
 8002200:	b2da      	uxtb	r2, r3
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	4413      	add	r3, r2
 8002206:	b2db      	uxtb	r3, r3
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e004      	b.n	8002216 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 800220c:	23ff      	movs	r3, #255	@ 0xff
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e001      	b.n	8002216 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8002212:	23ff      	movs	r3, #255	@ 0xff
 8002214:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8002216:	7b3b      	ldrb	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 800221c:	7b3b      	ldrb	r3, [r7, #12]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fecc 	bl	8001fbc <bno055_set_operation_mode>
 8002224:	4603      	mov	r3, r0
 8002226:	b2da      	uxtb	r2, r3
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4413      	add	r3, r2
 800222c:	b2db      	uxtb	r3, r3
 800222e:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8002230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bd90      	pop	{r4, r7, pc}
 800223c:	240003f4 	.word	0x240003f4

08002240 <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
signed char bno055_platform_read(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char ReadNumbr)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af02      	add	r7, sp, #8
 8002246:	603a      	str	r2, [r7, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
 800224e:	460b      	mov	r3, r1
 8002250:	71bb      	strb	r3, [r7, #6]
 8002252:	4613      	mov	r3, r2
 8002254:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	b29b      	uxth	r3, r3
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	81fb      	strh	r3, [r7, #14]

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 800225e:	1dba      	adds	r2, r7, #6
 8002260:	89f9      	ldrh	r1, [r7, #14]
 8002262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2301      	movs	r3, #1
 800226a:	4809      	ldr	r0, [pc, #36]	@ (8002290 <bno055_platform_read+0x50>)
 800226c:	f002 fff6 	bl	800525c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BNO_I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002270:	797b      	ldrb	r3, [r7, #5]
 8002272:	b29b      	uxth	r3, r3
 8002274:	89f9      	ldrh	r1, [r7, #14]
 8002276:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800227a:	9200      	str	r2, [sp, #0]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4804      	ldr	r0, [pc, #16]	@ (8002290 <bno055_platform_read+0x50>)
 8002280:	f003 f904 	bl	800548c <HAL_I2C_Master_Receive>
    return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	240006fc 	.word	0x240006fc

08002294 <bno055_platform_write>:
  *
  */


signed char bno055_platform_write(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char WriteNumbr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af02      	add	r7, sp, #8
 800229a:	603a      	str	r2, [r7, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	460b      	mov	r3, r1
 80022a4:	71bb      	strb	r3, [r7, #6]
 80022a6:	4613      	mov	r3, r2
 80022a8:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	81fb      	strh	r3, [r7, #14]

    BNO_GTXBuffer[0] = subaddress;
 80022b2:	4a0d      	ldr	r2, [pc, #52]	@ (80022e8 <bno055_platform_write+0x54>)
 80022b4:	79bb      	ldrb	r3, [r7, #6]
 80022b6:	7013      	strb	r3, [r2, #0]
    memcpy(&BNO_GTXBuffer[1], pBuffer, WriteNumbr);
 80022b8:	797b      	ldrb	r3, [r7, #5]
 80022ba:	461a      	mov	r2, r3
 80022bc:	6839      	ldr	r1, [r7, #0]
 80022be:	480b      	ldr	r0, [pc, #44]	@ (80022ec <bno055_platform_write+0x58>)
 80022c0:	f014 fc83 	bl	8016bca <memcpy>

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, BNO_GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 80022c4:	797b      	ldrb	r3, [r7, #5]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	89f9      	ldrh	r1, [r7, #14]
 80022ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <bno055_platform_write+0x54>)
 80022d6:	4806      	ldr	r0, [pc, #24]	@ (80022f0 <bno055_platform_write+0x5c>)
 80022d8:	f002 ffc0 	bl	800525c <HAL_I2C_Master_Transmit>
    return 0;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	24000410 	.word	0x24000410
 80022ec:	24000411 	.word	0x24000411
 80022f0:	240006fc 	.word	0x240006fc

080022f4 <DelayUs>:
  *
  */


void DelayUs(unsigned int Delay)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
//		{
//			;
//		}
//	}

	HAL_Delay(Delay);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f002 fb77 	bl	80049f0 <HAL_Delay>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 0 -> no Error)
  *
  */
int8_t BNO055_Init(){
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 8002312:	4b2a      	ldr	r3, [pc, #168]	@ (80023bc <BNO055_Init+0xb0>)
 8002314:	4a2a      	ldr	r2, [pc, #168]	@ (80023c0 <BNO055_Init+0xb4>)
 8002316:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 8002318:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <BNO055_Init+0xb0>)
 800231a:	4a2a      	ldr	r2, [pc, #168]	@ (80023c4 <BNO055_Init+0xb8>)
 800231c:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = &DelayUs;
 800231e:	4b27      	ldr	r3, [pc, #156]	@ (80023bc <BNO055_Init+0xb0>)
 8002320:	4a29      	ldr	r2, [pc, #164]	@ (80023c8 <BNO055_Init+0xbc>)
 8002322:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 8002324:	4b25      	ldr	r3, [pc, #148]	@ (80023bc <BNO055_Init+0xb0>)
 8002326:	2228      	movs	r2, #40	@ 0x28
 8002328:	725a      	strb	r2, [r3, #9]

	uint8_t value;
	bno055_platform_read(BNO055_I2C_ADDR1, 0x00, &value, 1);
 800232a:	1dfa      	adds	r2, r7, #7
 800232c:	2301      	movs	r3, #1
 800232e:	2100      	movs	r1, #0
 8002330:	2028      	movs	r0, #40	@ 0x28
 8002332:	f7ff ff85 	bl	8002240 <bno055_platform_read>

	comres = bno055_init(&bno055_dev);
 8002336:	4821      	ldr	r0, [pc, #132]	@ (80023bc <BNO055_Init+0xb0>)
 8002338:	f7fe fc18 	bl	8000b6c <bno055_init>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <BNO055_Init+0xc0>)
 8002342:	601a      	str	r2, [r3, #0]
//	{
//		printf("bno055_init failed, comres=%d\r\n", comres);
//	}

	/* set the power mode as NORMAL*/
	power_mode = BNO055_POWER_MODE_NORMAL;
 8002344:	4b22      	ldr	r3, [pc, #136]	@ (80023d0 <BNO055_Init+0xc4>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
	comres += bno055_set_power_mode(power_mode);
 800234a:	4b21      	ldr	r3, [pc, #132]	@ (80023d0 <BNO055_Init+0xc4>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fefc 	bl	800214c <bno055_set_power_mode>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <BNO055_Init+0xc0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4413      	add	r3, r2
 800235e:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <BNO055_Init+0xc0>)
 8002360:	6013      	str	r3, [r2, #0]
		* 0x0A - BNO055_OPERATION_MODE_M4G
		* 0x0B - BNO055_OPERATION_MODE_NDOF_FMC_OFF
		* 0x0C - BNO055_OPERATION_MODE_NDOF
		* based on the user need configure the operation mode*/
	    // Set the operation mode to NDOF
		printf("Trying to set BNO055 operational mode...");
 8002362:	481c      	ldr	r0, [pc, #112]	@ (80023d4 <BNO055_Init+0xc8>)
 8002364:	f014 fa6a 	bl	801683c <iprintf>
		while(op_mode_current != BNO055_OPERATION_MODE_NDOF){
 8002368:	e016      	b.n	8002398 <BNO055_Init+0x8c>
		    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 800236a:	200c      	movs	r0, #12
 800236c:	f7ff fe26 	bl	8001fbc <bno055_set_operation_mode>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <BNO055_Init+0xc0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4413      	add	r3, r2
 800237a:	4a14      	ldr	r2, [pc, #80]	@ (80023cc <BNO055_Init+0xc0>)
 800237c:	6013      	str	r3, [r2, #0]
		    comres += bno055_get_operation_mode(&op_mode_current);
 800237e:	4816      	ldr	r0, [pc, #88]	@ (80023d8 <BNO055_Init+0xcc>)
 8002380:	f7ff fdda 	bl	8001f38 <bno055_get_operation_mode>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <BNO055_Init+0xc0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4413      	add	r3, r2
 800238e:	4a0f      	ldr	r2, [pc, #60]	@ (80023cc <BNO055_Init+0xc0>)
 8002390:	6013      	str	r3, [r2, #0]
		    HAL_Delay(250);
 8002392:	20fa      	movs	r0, #250	@ 0xfa
 8002394:	f002 fb2c 	bl	80049f0 <HAL_Delay>
		while(op_mode_current != BNO055_OPERATION_MODE_NDOF){
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <BNO055_Init+0xcc>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d1e4      	bne.n	800236a <BNO055_Init+0x5e>
		}

		printf("Success! \n");
 80023a0:	480e      	ldr	r0, [pc, #56]	@ (80023dc <BNO055_Init+0xd0>)
 80023a2:	f014 fab3 	bl	801690c <puts>

	    HAL_Delay(1000);
 80023a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023aa:	f002 fb21 	bl	80049f0 <HAL_Delay>
//			printf("BNO Units configuration failed\r\n", comres);
//		}



	return (int8_t)comres;
 80023ae:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <BNO055_Init+0xc0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	b25b      	sxtb	r3, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	240003f8 	.word	0x240003f8
 80023c0:	08002295 	.word	0x08002295
 80023c4:	08002241 	.word	0x08002241
 80023c8:	080022f5 	.word	0x080022f5
 80023cc:	24000020 	.word	0x24000020
 80023d0:	24000625 	.word	0x24000625
 80023d4:	08018e98 	.word	0x08018e98
 80023d8:	24000624 	.word	0x24000624
 80023dc:	08018ec4 	.word	0x08018ec4

080023e0 <bno_read_fusion_data>:

AHRS_9_Axis_Data bno_read_fusion_data(){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0aa      	sub	sp, #168	@ 0xa8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

    int8_t comres = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Initialize the return structure
    AHRS_9_Axis_Data data = {0};
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	2298      	movs	r2, #152	@ 0x98
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f014 fb68 	bl	8016acc <memset>

    // Read Euler angles (Orientation)
    comres += bno055_convert_float_euler_hpr_deg(euler_temp_data);
 80023fc:	4b86      	ldr	r3, [pc, #536]	@ (8002618 <bno_read_fusion_data+0x238>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff f833 	bl	800146c <bno055_convert_float_euler_hpr_deg>
 8002406:	4603      	mov	r3, r0
 8002408:	b2da      	uxtb	r2, r3
 800240a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800240e:	4413      	add	r3, r2
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.orientation[0] = euler_temp_data->p;
 8002416:	4b80      	ldr	r3, [pc, #512]	@ (8002618 <bno_read_fusion_data+0x238>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	60bb      	str	r3, [r7, #8]
    data.orientation[1] = euler_temp_data->r;
 800241e:	4b7e      	ldr	r3, [pc, #504]	@ (8002618 <bno_read_fusion_data+0x238>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
    data.orientation[2] = euler_temp_data->h;
 8002426:	4b7c      	ldr	r3, [pc, #496]	@ (8002618 <bno_read_fusion_data+0x238>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	613b      	str	r3, [r7, #16]

    // Read Quaternion data -> Added scaling factor division for quaternion normalization (-1 ; +1)
    comres += bno055_read_quaternion_wxyz(quaternion_temp_data);
 800242e:	4b7b      	ldr	r3, [pc, #492]	@ (800261c <bno_read_fusion_data+0x23c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fef0 	bl	8001218 <bno055_read_quaternion_wxyz>
 8002438:	4603      	mov	r3, r0
 800243a:	b2da      	uxtb	r2, r3
 800243c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002440:	4413      	add	r3, r2
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.quaternion.w = quaternion_temp_data->w / QUAT_SCALING_FACT;
 8002448:	4b74      	ldr	r3, [pc, #464]	@ (800261c <bno_read_fusion_data+0x23c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002458:	ed9f 5b6b 	vldr	d5, [pc, #428]	@ 8002608 <bno_read_fusion_data+0x228>
 800245c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002460:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    data.quaternion.x = quaternion_temp_data->x / QUAT_SCALING_FACT;
 8002464:	4b6d      	ldr	r3, [pc, #436]	@ (800261c <bno_read_fusion_data+0x23c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002474:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 8002608 <bno_read_fusion_data+0x228>
 8002478:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800247c:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    data.quaternion.y = quaternion_temp_data->y / QUAT_SCALING_FACT;
 8002480:	4b66      	ldr	r3, [pc, #408]	@ (800261c <bno_read_fusion_data+0x23c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002490:	ed9f 5b5d 	vldr	d5, [pc, #372]	@ 8002608 <bno_read_fusion_data+0x228>
 8002494:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002498:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    data.quaternion.z = quaternion_temp_data->z / QUAT_SCALING_FACT;
 800249c:	4b5f      	ldr	r3, [pc, #380]	@ (800261c <bno_read_fusion_data+0x23c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80024ac:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8002608 <bno_read_fusion_data+0x228>
 80024b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024b4:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98

    // Read Linear acceleration
    comres += bno055_convert_double_accel_xyz_mg(accel_temp_data);
 80024b8:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <bno_read_fusion_data+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f8e3 	bl	8001688 <bno055_convert_double_accel_xyz_mg>
 80024c2:	4603      	mov	r3, r0
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80024ca:	4413      	add	r3, r2
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.acceleration[0] = accel_temp_data->x / 1000; // Division by 1000 -> Converts millig to g
 80024d2:	4b53      	ldr	r3, [pc, #332]	@ (8002620 <bno_read_fusion_data+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	ed93 6b00 	vldr	d6, [r3]
 80024da:	ed9f 5b4d 	vldr	d5, [pc, #308]	@ 8002610 <bno_read_fusion_data+0x230>
 80024de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024e2:	ed87 7b08 	vstr	d7, [r7, #32]
    data.acceleration[1] = accel_temp_data->y / 1000; // Division by 1000 -> Converts millig to g
 80024e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002620 <bno_read_fusion_data+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	ed93 6b02 	vldr	d6, [r3, #8]
 80024ee:	ed9f 5b48 	vldr	d5, [pc, #288]	@ 8002610 <bno_read_fusion_data+0x230>
 80024f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024f6:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    data.acceleration[2] = accel_temp_data->z / 1000; // Division by 1000 -> Converts millig to g
 80024fa:	4b49      	ldr	r3, [pc, #292]	@ (8002620 <bno_read_fusion_data+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	ed93 6b04 	vldr	d6, [r3, #16]
 8002502:	ed9f 5b43 	vldr	d5, [pc, #268]	@ 8002610 <bno_read_fusion_data+0x230>
 8002506:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800250a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

    comres += bno055_convert_double_gyro_xyz_dps(gyro_temp_xyz);
 800250e:	4b45      	ldr	r3, [pc, #276]	@ (8002624 <bno_read_fusion_data+0x244>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff f9ac 	bl	8001870 <bno055_convert_double_gyro_xyz_dps>
 8002518:	4603      	mov	r3, r0
 800251a:	b2da      	uxtb	r2, r3
 800251c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002520:	4413      	add	r3, r2
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.gyroscope[0] = gyro_temp_xyz->x;
 8002528:	4b3e      	ldr	r3, [pc, #248]	@ (8002624 <bno_read_fusion_data+0x244>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    data.gyroscope[1] = gyro_temp_xyz->y;
 8002534:	4b3b      	ldr	r3, [pc, #236]	@ (8002624 <bno_read_fusion_data+0x244>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800253c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    data.gyroscope[2] = gyro_temp_xyz->z;
 8002540:	4b38      	ldr	r3, [pc, #224]	@ (8002624 <bno_read_fusion_data+0x244>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002548:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    // Read Gravity data
    comres += bno055_convert_float_gravity_xyz_msq(gravity_temp_data);
 800254c:	4b36      	ldr	r3, [pc, #216]	@ (8002628 <bno_read_fusion_data+0x248>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fff9 	bl	8001548 <bno055_convert_float_gravity_xyz_msq>
 8002556:	4603      	mov	r3, r0
 8002558:	b2da      	uxtb	r2, r3
 800255a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800255e:	4413      	add	r3, r2
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    data.gravity[0] = gravity_temp_data->x;
 8002566:	4b30      	ldr	r3, [pc, #192]	@ (8002628 <bno_read_fusion_data+0x248>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	653b      	str	r3, [r7, #80]	@ 0x50
    data.gravity[1] = gravity_temp_data->y;
 800256e:	4b2e      	ldr	r3, [pc, #184]	@ (8002628 <bno_read_fusion_data+0x248>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	657b      	str	r3, [r7, #84]	@ 0x54
    data.gravity[2] = gravity_temp_data->z;
 8002576:	4b2c      	ldr	r3, [pc, #176]	@ (8002628 <bno_read_fusion_data+0x248>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	65bb      	str	r3, [r7, #88]	@ 0x58

    // Read Magnetometer data
    comres += bno055_convert_double_mag_x_uT(&data.magnetometer[0]);
 800257e:	f107 0308 	add.w	r3, r7, #8
 8002582:	3358      	adds	r3, #88	@ 0x58
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f8da 	bl	800173e <bno055_convert_double_mag_x_uT>
 800258a:	4603      	mov	r3, r0
 800258c:	b2da      	uxtb	r2, r3
 800258e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002592:	4413      	add	r3, r2
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    comres += bno055_convert_double_mag_y_uT(&data.magnetometer[1]);
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	3360      	adds	r3, #96	@ 0x60
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f8ff 	bl	80017a4 <bno055_convert_double_mag_y_uT>
 80025a6:	4603      	mov	r3, r0
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80025ae:	4413      	add	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    comres += bno055_convert_double_mag_z_uT(&data.magnetometer[2]);
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	3368      	adds	r3, #104	@ 0x68
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f924 	bl	800180a <bno055_convert_double_mag_z_uT>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80025ca:	4413      	add	r3, r2
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    comres += bno055_convert_float_temp_celsius(&data.temperature);
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	3370      	adds	r3, #112	@ 0x70
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff f809 	bl	80015f0 <bno055_convert_float_temp_celsius>
 80025de:	4603      	mov	r3, r0
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80025e6:	4413      	add	r3, r2
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    // Check communication results (Optional, for debugging)
    if (comres != 0) {
        //printf("Communication error: %d\n", comres);
    }

    return data;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	2298      	movs	r2, #152	@ 0x98
 80025f8:	4619      	mov	r1, r3
 80025fa:	f014 fae6 	bl	8016bca <memcpy>
}
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	37a8      	adds	r7, #168	@ 0xa8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	00000000 	.word	0x00000000
 800260c:	40d00000 	.word	0x40d00000
 8002610:	00000000 	.word	0x00000000
 8002614:	408f4000 	.word	0x408f4000
 8002618:	24000610 	.word	0x24000610
 800261c:	24000614 	.word	0x24000614
 8002620:	24000618 	.word	0x24000618
 8002624:	2400061c 	.word	0x2400061c
 8002628:	24000620 	.word	0x24000620

0800262c <bno055_print_fusion_data>:
//// Format quaternion (W, X, Y, Z vectors) as a comma-separated string
//sprintf(quaternionStr, "%.6f,%.6f,%.6f,%.6f,%.6f\r\n", q.w, q.x, q.y, q.z, lama);
//HAL_UART_Transmit(&huart1, (uint8_t*)quaternionStr, strlen(quaternionStr), HAL_MAX_DELAY);
//}

void bno055_print_fusion_data(AHRS_9_Axis_Data *data) {
 800262c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002630:	b088      	sub	sp, #32
 8002632:	af06      	add	r7, sp, #24
 8002634:	6078      	str	r0, [r7, #4]
printf("BNO055 AHRS: \n");
 8002636:	4853      	ldr	r0, [pc, #332]	@ (8002784 <bno055_print_fusion_data+0x158>)
 8002638:	f014 f968 	bl	801690c <puts>
// Print orientation (Pitch, Roll, Yaw)
printf("Orientation -> ");
 800263c:	4852      	ldr	r0, [pc, #328]	@ (8002788 <bno055_print_fusion_data+0x15c>)
 800263e:	f014 f8fd 	bl	801683c <iprintf>
printf("Pitch: %.2f deg, Roll: %.2f deg, Yaw: %.2f deg \n", data->orientation[0], data->orientation[1], data->orientation[2]);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	edd3 7a00 	vldr	s15, [r3]
 8002648:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002652:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	edd3 6a02 	vldr	s13, [r3, #8]
 800265c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002660:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002664:	ed8d 7b00 	vstr	d7, [sp]
 8002668:	ec53 2b15 	vmov	r2, r3, d5
 800266c:	4847      	ldr	r0, [pc, #284]	@ (800278c <bno055_print_fusion_data+0x160>)
 800266e:	f014 f8e5 	bl	801683c <iprintf>

//printf("Orientation from Quaternions -> ");
//printf("Pitch: %.2f deg, Roll: %.2f deg, Yaw: %.2f deg \n", data->orientation_q[0], data->orientation_q[1], data->orientation_q[2]);

// Print quaternion (W, X, Y, Z vectors)
printf("Quaternion -> ");
 8002672:	4847      	ldr	r0, [pc, #284]	@ (8002790 <bno055_print_fusion_data+0x164>)
 8002674:	f014 f8e2 	bl	801683c <iprintf>
printf("W: %.2f , X: %.2f , Y: %.2f , Z: %.2f \n", data->quaternion.w, data->quaternion.x, data->quaternion.y, data->quaternion.z);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	e9d3 891e 	ldrd	r8, r9, [r3, #120]	@ 0x78
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	e9d1 0122 	ldrd	r0, r1, [r1, #136]	@ 0x88
 800268a:	687c      	ldr	r4, [r7, #4]
 800268c:	e9d4 4524 	ldrd	r4, r5, [r4, #144]	@ 0x90
 8002690:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002698:	e9cd 2300 	strd	r2, r3, [sp]
 800269c:	4642      	mov	r2, r8
 800269e:	464b      	mov	r3, r9
 80026a0:	483c      	ldr	r0, [pc, #240]	@ (8002794 <bno055_print_fusion_data+0x168>)
 80026a2:	f014 f8cb 	bl	801683c <iprintf>

//Send_Quat_To_IMU_Visualizer(data->quaternion);

// Print acceleration (X, Y, Z)
printf("Acceleration -> ");
 80026a6:	483c      	ldr	r0, [pc, #240]	@ (8002798 <bno055_print_fusion_data+0x16c>)
 80026a8:	f014 f8c8 	bl	801683c <iprintf>
printf("X: %.2f g, Y: %.2f g, Z: %.2f g \n", data->acceleration[0], data->acceleration[1], data->acceleration[2]);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	@ 0x28
 80026be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026c2:	e9cd 2300 	strd	r2, r3, [sp]
 80026c6:	4622      	mov	r2, r4
 80026c8:	462b      	mov	r3, r5
 80026ca:	4834      	ldr	r0, [pc, #208]	@ (800279c <bno055_print_fusion_data+0x170>)
 80026cc:	f014 f8b6 	bl	801683c <iprintf>

// Print gyroscope data (X, Y, Z)
printf("Angular Rate -> ");
 80026d0:	4833      	ldr	r0, [pc, #204]	@ (80027a0 <bno055_print_fusion_data+0x174>)
 80026d2:	f014 f8b3 	bl	801683c <iprintf>
printf("X: %.2f dps, Y: %.2f dps, Z: %.2f dps \n", data->gyroscope[0], data->gyroscope[1], data->gyroscope[2]);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	@ 0x40
 80026e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026ec:	e9cd 2300 	strd	r2, r3, [sp]
 80026f0:	4622      	mov	r2, r4
 80026f2:	462b      	mov	r3, r5
 80026f4:	482b      	ldr	r0, [pc, #172]	@ (80027a4 <bno055_print_fusion_data+0x178>)
 80026f6:	f014 f8a1 	bl	801683c <iprintf>

// Print gravity data (X, Y, Z)
printf("Gravity -> ");
 80026fa:	482b      	ldr	r0, [pc, #172]	@ (80027a8 <bno055_print_fusion_data+0x17c>)
 80026fc:	f014 f89e 	bl	801683c <iprintf>
printf("X: %.2f m/s^2, Y: %.2f m/s^2, Z: %.2f m/s^2\n", data->gravity[0], data->gravity[1], data->gravity[2]);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002706:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002710:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800271a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800271e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002722:	ed8d 7b00 	vstr	d7, [sp]
 8002726:	ec53 2b15 	vmov	r2, r3, d5
 800272a:	4820      	ldr	r0, [pc, #128]	@ (80027ac <bno055_print_fusion_data+0x180>)
 800272c:	f014 f886 	bl	801683c <iprintf>

// Print magnetometer data (X, Y, Z)
printf("Magnetometer -> ");
 8002730:	481f      	ldr	r0, [pc, #124]	@ (80027b0 <bno055_print_fusion_data+0x184>)
 8002732:	f014 f883 	bl	801683c <iprintf>
printf("X: %.2f µT, Y: %.2f µT, Z: %.2f µT \n", data->magnetometer[0], data->magnetometer[1], data->magnetometer[2]);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	e9d1 011a 	ldrd	r0, r1, [r1, #104]	@ 0x68
 8002748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800274c:	e9cd 2300 	strd	r2, r3, [sp]
 8002750:	4622      	mov	r2, r4
 8002752:	462b      	mov	r3, r5
 8002754:	4817      	ldr	r0, [pc, #92]	@ (80027b4 <bno055_print_fusion_data+0x188>)
 8002756:	f014 f871 	bl	801683c <iprintf>

// Print magnetometer data (X, Y, Z)
printf("Temperature -> ");
 800275a:	4817      	ldr	r0, [pc, #92]	@ (80027b8 <bno055_print_fusion_data+0x18c>)
 800275c:	f014 f86e 	bl	801683c <iprintf>
printf("Temperature: %.2f degC \n", data->temperature);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8002766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800276a:	ec53 2b17 	vmov	r2, r3, d7
 800276e:	4813      	ldr	r0, [pc, #76]	@ (80027bc <bno055_print_fusion_data+0x190>)
 8002770:	f014 f864 	bl	801683c <iprintf>

printf("----- \n");
 8002774:	4812      	ldr	r0, [pc, #72]	@ (80027c0 <bno055_print_fusion_data+0x194>)
 8002776:	f014 f8c9 	bl	801690c <puts>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002784:	08018ed0 	.word	0x08018ed0
 8002788:	08018ee0 	.word	0x08018ee0
 800278c:	08018ef0 	.word	0x08018ef0
 8002790:	08018f24 	.word	0x08018f24
 8002794:	08018f34 	.word	0x08018f34
 8002798:	08018f5c 	.word	0x08018f5c
 800279c:	08018f70 	.word	0x08018f70
 80027a0:	08018f94 	.word	0x08018f94
 80027a4:	08018fa8 	.word	0x08018fa8
 80027a8:	08018fd0 	.word	0x08018fd0
 80027ac:	08018fdc 	.word	0x08018fdc
 80027b0:	0801900c 	.word	0x0801900c
 80027b4:	08019020 	.word	0x08019020
 80027b8:	08019048 	.word	0x08019048
 80027bc:	08019058 	.word	0x08019058
 80027c0:	08019074 	.word	0x08019074

080027c4 <MPL3115A2_Init>:
#include <stdio.h>

MPL3115A2 mpl311_dev;
extern I2C_HandleTypeDef hi2c2;

int8_t MPL3115A2_Init() {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af04      	add	r7, sp, #16
  mpl311_dev.hi2c = &hi2c2;
 80027ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002878 <MPL3115A2_Init+0xb4>)
 80027cc:	4a2b      	ldr	r2, [pc, #172]	@ (800287c <MPL3115A2_Init+0xb8>)
 80027ce:	601a      	str	r2, [r3, #0]

  // Read WHOAMI register
  uint8_t whoami = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	71fb      	strb	r3, [r7, #7]
  if (HAL_I2C_Mem_Read(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_WHOAMI,
 80027d4:	4b28      	ldr	r3, [pc, #160]	@ (8002878 <MPL3115A2_Init+0xb4>)
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295
 80027dc:	9302      	str	r3, [sp, #8]
 80027de:	2301      	movs	r3, #1
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	1dfb      	adds	r3, r7, #7
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2301      	movs	r3, #1
 80027e8:	220c      	movs	r2, #12
 80027ea:	21c0      	movs	r1, #192	@ 0xc0
 80027ec:	f003 f858 	bl	80058a0 <HAL_I2C_Mem_Read>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <MPL3115A2_Init+0x38>
                       I2C_MEMADD_SIZE_8BIT, &whoami, 1, HAL_MAX_DELAY) != HAL_OK) {
    return -1; // I2C read error
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	e039      	b.n	8002870 <MPL3115A2_Init+0xac>
  }
  if (whoami != 0xC4) {
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	2bc4      	cmp	r3, #196	@ 0xc4
 8002800:	d002      	beq.n	8002808 <MPL3115A2_Init+0x44>
    return -2; // WHOAMI mismatch error
 8002802:	f06f 0301 	mvn.w	r3, #1
 8002806:	e033      	b.n	8002870 <MPL3115A2_Init+0xac>
  }

  HAL_Delay(10);
 8002808:	200a      	movs	r0, #10
 800280a:	f002 f8f1 	bl	80049f0 <HAL_Delay>
//    }
//    HAL_Delay(10);
//  } while (ctrl_reg1 & MPL3115A2_CTRL_REG1_RST);

  // Set oversampling and altitude mode
  mpl311_dev.currentMode = MPL3115A2_ALTIMETER;
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <MPL3115A2_Init+0xb4>)
 8002810:	2201      	movs	r2, #1
 8002812:	711a      	strb	r2, [r3, #4]
  mpl311_dev.ctrl_reg1.reg = MPL3115A2_CTRL_REG1_OS128 | MPL3115A2_CTRL_REG1_ALT;
 8002814:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <MPL3115A2_Init+0xb4>)
 8002816:	22b8      	movs	r2, #184	@ 0xb8
 8002818:	715a      	strb	r2, [r3, #5]
  if (HAL_I2C_Mem_Write(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1,
 800281a:	4b17      	ldr	r3, [pc, #92]	@ (8002878 <MPL3115A2_Init+0xb4>)
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	9302      	str	r3, [sp, #8]
 8002824:	2301      	movs	r3, #1
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <MPL3115A2_Init+0xbc>)
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2301      	movs	r3, #1
 800282e:	2226      	movs	r2, #38	@ 0x26
 8002830:	21c0      	movs	r1, #192	@ 0xc0
 8002832:	f002 ff21 	bl	8005678 <HAL_I2C_Mem_Write>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <MPL3115A2_Init+0x7e>
                        I2C_MEMADD_SIZE_8BIT, &(mpl311_dev.ctrl_reg1.reg), 1, HAL_MAX_DELAY) != HAL_OK) {
    return -5; // I2C write error
 800283c:	f06f 0304 	mvn.w	r3, #4
 8002840:	e016      	b.n	8002870 <MPL3115A2_Init+0xac>
  }

  // Enable data ready events for pressure/altitude and temperature
  uint8_t pt_data_cfg = MPL3115A2_PT_DATA_CFG_TDEFE | MPL3115A2_PT_DATA_CFG_PDEFE |
 8002842:	2307      	movs	r3, #7
 8002844:	71bb      	strb	r3, [r7, #6]
                        MPL3115A2_PT_DATA_CFG_DREM;
  if (HAL_I2C_Mem_Write(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_PT_DATA_CFG,
 8002846:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <MPL3115A2_Init+0xb4>)
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	9302      	str	r3, [sp, #8]
 8002850:	2301      	movs	r3, #1
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	1dbb      	adds	r3, r7, #6
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2301      	movs	r3, #1
 800285a:	2213      	movs	r2, #19
 800285c:	21c0      	movs	r1, #192	@ 0xc0
 800285e:	f002 ff0b 	bl	8005678 <HAL_I2C_Mem_Write>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <MPL3115A2_Init+0xaa>
                        I2C_MEMADD_SIZE_8BIT, &pt_data_cfg, 1, HAL_MAX_DELAY) != HAL_OK) {
    return -6; // I2C write error
 8002868:	f06f 0305 	mvn.w	r3, #5
 800286c:	e000      	b.n	8002870 <MPL3115A2_Init+0xac>
  }

  return 0; // Initialization successful
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	24000628 	.word	0x24000628
 800287c:	240006a8 	.word	0x240006a8
 8002880:	2400062d 	.word	0x2400062d

08002884 <MPL3115A2_GetPressure>:

float MPL3115A2_GetPressure() {
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  if (mpl311_dev.currentMode != MPL3115A2_BAROMETER)
 8002888:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <MPL3115A2_GetPressure+0x4c>)
 800288a:	791b      	ldrb	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <MPL3115A2_GetPressure+0x12>
    MPL3115A2_SetMode(MPL3115A2_BAROMETER);
 8002890:	2000      	movs	r0, #0
 8002892:	f000 f867 	bl	8002964 <MPL3115A2_SetMode>
  MPL3115A2_StartOneShot(mpl311_dev);
 8002896:	4b0e      	ldr	r3, [pc, #56]	@ (80028d0 <MPL3115A2_GetPressure+0x4c>)
 8002898:	e893 0003 	ldmia.w	r3, {r0, r1}
 800289c:	f000 f8a2 	bl	80029e4 <MPL3115A2_StartOneShot>
  while (!MPL3115A2_ConversionComplete(mpl311_dev))
 80028a0:	e002      	b.n	80028a8 <MPL3115A2_GetPressure+0x24>
    HAL_Delay(10);
 80028a2:	200a      	movs	r0, #10
 80028a4:	f002 f8a4 	bl	80049f0 <HAL_Delay>
  while (!MPL3115A2_ConversionComplete(mpl311_dev))
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <MPL3115A2_GetPressure+0x4c>)
 80028aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ae:	f000 f8cf 	bl	8002a50 <MPL3115A2_ConversionComplete>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f1      	bne.n	80028a2 <MPL3115A2_GetPressure+0x1e>
  return MPL3115A2_GetLastConversionResults(MPL3115A2_PRESSURE);
 80028be:	2000      	movs	r0, #0
 80028c0:	f000 f8ea 	bl	8002a98 <MPL3115A2_GetLastConversionResults>
 80028c4:	eef0 7a40 	vmov.f32	s15, s0
}
 80028c8:	eeb0 0a67 	vmov.f32	s0, s15
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	24000628 	.word	0x24000628

080028d4 <MPL3115A2_GetAltitude>:

float MPL3115A2_GetAltitude() {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  if (mpl311_dev.currentMode != MPL3115A2_ALTIMETER)
 80028d8:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <MPL3115A2_GetAltitude+0x4c>)
 80028da:	791b      	ldrb	r3, [r3, #4]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d002      	beq.n	80028e6 <MPL3115A2_GetAltitude+0x12>
    MPL3115A2_SetMode(MPL3115A2_ALTIMETER);
 80028e0:	2001      	movs	r0, #1
 80028e2:	f000 f83f 	bl	8002964 <MPL3115A2_SetMode>
  MPL3115A2_StartOneShot(mpl311_dev);
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <MPL3115A2_GetAltitude+0x4c>)
 80028e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ec:	f000 f87a 	bl	80029e4 <MPL3115A2_StartOneShot>
  while (!MPL3115A2_ConversionComplete(mpl311_dev))
 80028f0:	e002      	b.n	80028f8 <MPL3115A2_GetAltitude+0x24>
    HAL_Delay(10);
 80028f2:	200a      	movs	r0, #10
 80028f4:	f002 f87c 	bl	80049f0 <HAL_Delay>
  while (!MPL3115A2_ConversionComplete(mpl311_dev))
 80028f8:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <MPL3115A2_GetAltitude+0x4c>)
 80028fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028fe:	f000 f8a7 	bl	8002a50 <MPL3115A2_ConversionComplete>
 8002902:	4603      	mov	r3, r0
 8002904:	f083 0301 	eor.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f1      	bne.n	80028f2 <MPL3115A2_GetAltitude+0x1e>
  return MPL3115A2_GetLastConversionResults(MPL3115A2_ALTITUDE);
 800290e:	2001      	movs	r0, #1
 8002910:	f000 f8c2 	bl	8002a98 <MPL3115A2_GetLastConversionResults>
 8002914:	eef0 7a40 	vmov.f32	s15, s0
}
 8002918:	eeb0 0a67 	vmov.f32	s0, s15
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	24000628 	.word	0x24000628

08002924 <MPL3115A2_GetTemperature>:
void MPL3115A2_SetAltitudeOffset(int8_t offset) {
  uint8_t data = (uint8_t)offset;
  HAL_I2C_Mem_Write(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_OFF_H, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
}

float MPL3115A2_GetTemperature() {
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  MPL3115A2_StartOneShot(mpl311_dev);
 8002928:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <MPL3115A2_GetTemperature+0x3c>)
 800292a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800292e:	f000 f859 	bl	80029e4 <MPL3115A2_StartOneShot>
  while (!MPL3115A2_ConversionComplete(mpl311_dev))
 8002932:	e002      	b.n	800293a <MPL3115A2_GetTemperature+0x16>
    HAL_Delay(10);
 8002934:	200a      	movs	r0, #10
 8002936:	f002 f85b 	bl	80049f0 <HAL_Delay>
  while (!MPL3115A2_ConversionComplete(mpl311_dev))
 800293a:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <MPL3115A2_GetTemperature+0x3c>)
 800293c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002940:	f000 f886 	bl	8002a50 <MPL3115A2_ConversionComplete>
 8002944:	4603      	mov	r3, r0
 8002946:	f083 0301 	eor.w	r3, r3, #1
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f1      	bne.n	8002934 <MPL3115A2_GetTemperature+0x10>
  return MPL3115A2_GetLastConversionResults(MPL3115A2_TEMPERATURE);
 8002950:	2002      	movs	r0, #2
 8002952:	f000 f8a1 	bl	8002a98 <MPL3115A2_GetLastConversionResults>
 8002956:	eef0 7a40 	vmov.f32	s15, s0
}
 800295a:	eeb0 0a67 	vmov.f32	s0, s15
 800295e:	bd80      	pop	{r7, pc}
 8002960:	24000628 	.word	0x24000628

08002964 <MPL3115A2_SetMode>:
  buffer[0] = bar >> 8;
  buffer[1] = bar & 0xFF;
  HAL_I2C_Mem_Write(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_BAR_IN_MSB, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
}

void MPL3115A2_SetMode(mpl3115a2_mode_t mode) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af04      	add	r7, sp, #16
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl_reg1;
  // Read current CTRL_REG1
  if (HAL_I2C_Mem_Read(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &ctrl_reg1, 1, HAL_MAX_DELAY) != HAL_OK) {
 800296e:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <MPL3115A2_SetMode+0x7c>)
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	9302      	str	r3, [sp, #8]
 8002978:	2301      	movs	r3, #1
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	f107 030f 	add.w	r3, r7, #15
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2301      	movs	r3, #1
 8002984:	2226      	movs	r2, #38	@ 0x26
 8002986:	21c0      	movs	r1, #192	@ 0xc0
 8002988:	f002 ff8a 	bl	80058a0 <HAL_I2C_Mem_Read>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d121      	bne.n	80029d6 <MPL3115A2_SetMode+0x72>
    return;
  }
  mpl311_dev.ctrl_reg1.reg = ctrl_reg1;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <MPL3115A2_SetMode+0x7c>)
 8002996:	715a      	strb	r2, [r3, #5]
  mpl311_dev.ctrl_reg1.bit.ALT = mode;
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	b2d9      	uxtb	r1, r3
 80029a0:	4a0f      	ldr	r2, [pc, #60]	@ (80029e0 <MPL3115A2_SetMode+0x7c>)
 80029a2:	7953      	ldrb	r3, [r2, #5]
 80029a4:	f361 13c7 	bfi	r3, r1, #7, #1
 80029a8:	7153      	strb	r3, [r2, #5]
  // Write back CTRL_REG1
  ctrl_reg1 = mpl311_dev.ctrl_reg1.reg;
 80029aa:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <MPL3115A2_SetMode+0x7c>)
 80029ac:	795b      	ldrb	r3, [r3, #5]
 80029ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &ctrl_reg1, 1, HAL_MAX_DELAY);
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <MPL3115A2_SetMode+0x7c>)
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295
 80029b8:	9302      	str	r3, [sp, #8]
 80029ba:	2301      	movs	r3, #1
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	f107 030f 	add.w	r3, r7, #15
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2301      	movs	r3, #1
 80029c6:	2226      	movs	r2, #38	@ 0x26
 80029c8:	21c0      	movs	r1, #192	@ 0xc0
 80029ca:	f002 fe55 	bl	8005678 <HAL_I2C_Mem_Write>
  mpl311_dev.currentMode = mode;
 80029ce:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <MPL3115A2_SetMode+0x7c>)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	7113      	strb	r3, [r2, #4]
 80029d4:	e000      	b.n	80029d8 <MPL3115A2_SetMode+0x74>
    return;
 80029d6:	bf00      	nop
}
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	24000628 	.word	0x24000628

080029e4 <MPL3115A2_StartOneShot>:

void MPL3115A2_StartOneShot() {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af04      	add	r7, sp, #16
  uint8_t ctrl_reg1;
  // Wait for OST bit to clear
  do {
    if (HAL_I2C_Mem_Read(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &ctrl_reg1, 1, HAL_MAX_DELAY) != HAL_OK) {
 80029ea:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <MPL3115A2_StartOneShot+0x68>)
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	9302      	str	r3, [sp, #8]
 80029f4:	2301      	movs	r3, #1
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	1dfb      	adds	r3, r7, #7
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2301      	movs	r3, #1
 80029fe:	2226      	movs	r2, #38	@ 0x26
 8002a00:	21c0      	movs	r1, #192	@ 0xc0
 8002a02:	f002 ff4d 	bl	80058a0 <HAL_I2C_Mem_Read>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11b      	bne.n	8002a44 <MPL3115A2_StartOneShot+0x60>
      return;
    }
    HAL_Delay(10);
 8002a0c:	200a      	movs	r0, #10
 8002a0e:	f001 ffef 	bl	80049f0 <HAL_Delay>
  } while (ctrl_reg1 & MPL3115A2_CTRL_REG1_OST);
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e6      	bne.n	80029ea <MPL3115A2_StartOneShot+0x6>
  // Set OST bit to initiate measurement
  ctrl_reg1 |= MPL3115A2_CTRL_REG1_OST;
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &ctrl_reg1, 1, HAL_MAX_DELAY);
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <MPL3115A2_StartOneShot+0x68>)
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2e:	9302      	str	r3, [sp, #8]
 8002a30:	2301      	movs	r3, #1
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	2226      	movs	r2, #38	@ 0x26
 8002a3c:	21c0      	movs	r1, #192	@ 0xc0
 8002a3e:	f002 fe1b 	bl	8005678 <HAL_I2C_Mem_Write>
 8002a42:	e000      	b.n	8002a46 <MPL3115A2_StartOneShot+0x62>
      return;
 8002a44:	bf00      	nop
}
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	24000628 	.word	0x24000628

08002a50 <MPL3115A2_ConversionComplete>:

bool MPL3115A2_ConversionComplete() {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af04      	add	r7, sp, #16
  uint8_t status;
  if (HAL_I2C_Mem_Read(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002a56:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <MPL3115A2_ConversionComplete+0x44>)
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	9302      	str	r3, [sp, #8]
 8002a60:	2301      	movs	r3, #1
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	21c0      	movs	r1, #192	@ 0xc0
 8002a6e:	f002 ff17 	bl	80058a0 <HAL_I2C_Mem_Read>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MPL3115A2_ConversionComplete+0x2c>
    return false;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e007      	b.n	8002a8c <MPL3115A2_ConversionComplete+0x3c>
  }
  return (status & MPL3115A2_REGISTER_STATUS_PTDR) != 0;
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf14      	ite	ne
 8002a86:	2301      	movne	r3, #1
 8002a88:	2300      	moveq	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	24000628 	.word	0x24000628

08002a98 <MPL3115A2_GetLastConversionResults>:

float MPL3115A2_GetLastConversionResults(mpl3115a2_meas_t value) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	@ 0x28
 8002a9c:	af04      	add	r7, sp, #16
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t buffer[5];
  // Read data starting from MPL3115A2_REGISTER_PRESSURE_MSB
  if (HAL_I2C_Mem_Read(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_REGISTER_PRESSURE_MSB, I2C_MEMADD_SIZE_8BIT, buffer, 5, HAL_MAX_DELAY) != HAL_OK) {
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b54 <MPL3115A2_GetLastConversionResults+0xbc>)
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aaa:	9302      	str	r3, [sp, #8]
 8002aac:	2305      	movs	r3, #5
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	f107 0308 	add.w	r3, r7, #8
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	2201      	movs	r2, #1
 8002aba:	21c0      	movs	r1, #192	@ 0xc0
 8002abc:	f002 fef0 	bl	80058a0 <HAL_I2C_Mem_Read>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <MPL3115A2_GetLastConversionResults+0x34>
    return 0.0;
 8002ac6:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8002b58 <MPL3115A2_GetLastConversionResults+0xc0>
 8002aca:	e03e      	b.n	8002b4a <MPL3115A2_GetLastConversionResults+0xb2>
  }

  switch (value) {
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <MPL3115A2_GetLastConversionResults+0x40>
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d012      	beq.n	8002afc <MPL3115A2_GetLastConversionResults+0x64>
 8002ad6:	e027      	b.n	8002b28 <MPL3115A2_GetLastConversionResults+0x90>
  case MPL3115A2_PRESSURE:
  {
    uint32_t pressure;
    pressure = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8002ad8:	7a3b      	ldrb	r3, [r7, #8]
 8002ada:	041a      	lsls	r2, r3, #16
 8002adc:	7a7b      	ldrb	r3, [r7, #9]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	7aba      	ldrb	r2, [r7, #10]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
    return ((float)pressure) / 6400.0;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002af2:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002b5c <MPL3115A2_GetLastConversionResults+0xc4>
 8002af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002afa:	e026      	b.n	8002b4a <MPL3115A2_GetLastConversionResults+0xb2>
  }
  case MPL3115A2_ALTITUDE:
  {
    int32_t alt;
    // Sign-extend the 20-bit altitude data
    alt = ((int32_t)buffer[0] << 24) | ((int32_t)buffer[1] << 16) | ((int32_t)buffer[2] << 8);
 8002afc:	7a3b      	ldrb	r3, [r7, #8]
 8002afe:	061a      	lsls	r2, r3, #24
 8002b00:	7a7b      	ldrb	r3, [r7, #9]
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	431a      	orrs	r2, r3
 8002b06:	7abb      	ldrb	r3, [r7, #10]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
    alt >>= 8; // Shift back to get correct sign
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	121b      	asrs	r3, r3, #8
 8002b12:	617b      	str	r3, [r7, #20]
    return ((float)alt) / 65536.0;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b1e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002b60 <MPL3115A2_GetLastConversionResults+0xc8>
 8002b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b26:	e010      	b.n	8002b4a <MPL3115A2_GetLastConversionResults+0xb2>
  }
  case MPL3115A2_TEMPERATURE:
  default:
  {
    int16_t t;
    t = ((int16_t)buffer[3] << 8) | buffer[4];
 8002b28:	7afb      	ldrb	r3, [r7, #11]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	7b3b      	ldrb	r3, [r7, #12]
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	4313      	orrs	r3, r2
 8002b34:	81fb      	strh	r3, [r7, #14]
    return ((float)t) / 256.0;
 8002b36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b42:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002b64 <MPL3115A2_GetLastConversionResults+0xcc>
 8002b46:	eec7 7a26 	vdiv.f32	s15, s14, s13
  }
  }
}
 8002b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	24000628 	.word	0x24000628
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	45c80000 	.word	0x45c80000
 8002b60:	47800000 	.word	0x47800000
 8002b64:	43800000 	.word	0x43800000

08002b68 <mpl311_read_data>:

Altimeter_3_Axis mpl311_read_data(){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af00      	add	r7, sp, #0
	Altimeter_3_Axis data;

	data.pressure = MPL3115A2_GetPressure();
 8002b6e:	f7ff fe89 	bl	8002884 <MPL3115A2_GetPressure>
 8002b72:	eef0 7a40 	vmov.f32	s15, s0
 8002b76:	edc7 7a04 	vstr	s15, [r7, #16]

	data.temperature = MPL3115A2_GetTemperature();
 8002b7a:	f7ff fed3 	bl	8002924 <MPL3115A2_GetTemperature>
 8002b7e:	eef0 7a40 	vmov.f32	s15, s0
 8002b82:	edc7 7a05 	vstr	s15, [r7, #20]

	data.altitude = MPL3115A2_GetAltitude();
 8002b86:	f7ff fea5 	bl	80028d4 <MPL3115A2_GetAltitude>
 8002b8a:	eef0 7a40 	vmov.f32	s15, s0
 8002b8e:	edc7 7a06 	vstr	s15, [r7, #24]

	return data;
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	f107 0210 	add.w	r2, r7, #16
 8002b9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ba0:	69f9      	ldr	r1, [r7, #28]
 8002ba2:	6a3a      	ldr	r2, [r7, #32]
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	ee06 1a90 	vmov	s13, r1
 8002baa:	ee07 2a10 	vmov	s14, r2
 8002bae:	ee07 3a90 	vmov	s15, r3
}
 8002bb2:	eeb0 0a66 	vmov.f32	s0, s13
 8002bb6:	eef0 0a47 	vmov.f32	s1, s14
 8002bba:	eeb0 1a67 	vmov.f32	s2, s15
 8002bbe:	3728      	adds	r7, #40	@ 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <mpl311_print_altimetry>:

void mpl311_print_altimetry(Altimeter_3_Axis *data){
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af04      	add	r7, sp, #16
 8002bca:	6078      	str	r0, [r7, #4]
	printf("MPL311 Altimeter: \n");
 8002bcc:	4810      	ldr	r0, [pc, #64]	@ (8002c10 <mpl311_print_altimetry+0x4c>)
 8002bce:	f013 fe9d 	bl	801690c <puts>
	printf("Pressure: %.3f Pa, Temperature: %.3f degC, Altitude: %.3f meters \n", data->pressure, data->temperature, data->altitude);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	edd3 7a00 	vldr	s15, [r3]
 8002bd8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	edd3 7a01 	vldr	s15, [r3, #4]
 8002be2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	edd3 6a02 	vldr	s13, [r3, #8]
 8002bec:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002bf0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002bf4:	ed8d 7b00 	vstr	d7, [sp]
 8002bf8:	ec53 2b15 	vmov	r2, r3, d5
 8002bfc:	4805      	ldr	r0, [pc, #20]	@ (8002c14 <mpl311_print_altimetry+0x50>)
 8002bfe:	f013 fe1d 	bl	801683c <iprintf>
    printf("----- \n");
 8002c02:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <mpl311_print_altimetry+0x54>)
 8002c04:	f013 fe82 	bl	801690c <puts>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	0801907c 	.word	0x0801907c
 8002c14:	08019090 	.word	0x08019090
 8002c18:	080190d4 	.word	0x080190d4

08002c1c <ms5607_delay_func>:
#define STANDARD_TEMP 288.15         // Standard temperature at sea level in K
#define PASCAL_TO_HECTOPASCAL 100 	 //Divide the pressure by this number to get hPa
#define PASCAL_TO_KILOPASCAL 1000	 //Divide the pressure by this number to get kPa

void ms5607_delay_func(uint32_t period)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8002c24:	e008      	b.n	8002c38 <ms5607_delay_func+0x1c>
	{
		for(i = 0; i < 64; i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e002      	b.n	8002c32 <ms5607_delay_func+0x16>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c36:	d9f9      	bls.n	8002c2c <ms5607_delay_func+0x10>
	while(period--)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	1e5a      	subs	r2, r3, #1
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f1      	bne.n	8002c26 <ms5607_delay_func+0xa>
		{
			;
		}
	}
//	HAL_Delay(period/1000);
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0

  enableCSB();
 8002c54:	f000 fbfe 	bl	8003454 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <MS5607_Init+0x54>)
 8002c5a:	221e      	movs	r2, #30
 8002c5c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8002c5e:	230a      	movs	r3, #10
 8002c60:	2201      	movs	r2, #1
 8002c62:	4910      	ldr	r1, [pc, #64]	@ (8002ca4 <MS5607_Init+0x54>)
 8002c64:	4810      	ldr	r0, [pc, #64]	@ (8002ca8 <MS5607_Init+0x58>)
 8002c66:	f00a f815 	bl	800cc94 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8002c6a:	bf00      	nop
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <MS5607_Init+0x58>)
 8002c6e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d0f9      	beq.n	8002c6c <MS5607_Init+0x1c>
//  HAL_Delay(3);
  ms5607_delay_func(3000);
 8002c78:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002c7c:	f7ff ffce 	bl	8002c1c <ms5607_delay_func>
  disableCSB();
 8002c80:	f000 fbf4 	bl	800346c <disableCSB>

  MS5607PromRead(&promData);
 8002c84:	4809      	ldr	r0, [pc, #36]	@ (8002cac <MS5607_Init+0x5c>)
 8002c86:	f000 f813 	bl	8002cb0 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 8002c8a:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <MS5607_Init+0x5c>)
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <MS5607_Init+0x4a>
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <MS5607_Init+0x5c>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	2bff      	cmp	r3, #255	@ 0xff
 8002c98:	d101      	bne.n	8002c9e <MS5607_Init+0x4e>
	 //printf("MS5607 Init fail! \n");
    return MS5607_STATE_FAILED;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <MS5607_Init+0x50>
  } else {
	  //printf("MS5607 Init success! \n");
    return MS5607_STATE_READY;
 8002c9e:	2300      	movs	r3, #0
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	24000630 	.word	0x24000630
 8002ca8:	24000854 	.word	0x24000854
 8002cac:	24000634 	.word	0x24000634

08002cb0 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	75fb      	strb	r3, [r7, #23]
 8002cc0:	e01e      	b.n	8002d00 <MS5607PromRead+0x50>
    SPITransmitData = PROM_READ(address);
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <MS5607PromRead+0x98>)
 8002cd2:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8002cd4:	f000 fbbe 	bl	8003454 <enableCSB>
    HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8002cd8:	230a      	movs	r3, #10
 8002cda:	2201      	movs	r2, #1
 8002cdc:	491a      	ldr	r1, [pc, #104]	@ (8002d48 <MS5607PromRead+0x98>)
 8002cde:	481b      	ldr	r0, [pc, #108]	@ (8002d4c <MS5607PromRead+0x9c>)
 8002ce0:	f009 ffd8 	bl	800cc94 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(&hspi4, structPointer, 2, 10);
 8002ce4:	230a      	movs	r3, #10
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	6939      	ldr	r1, [r7, #16]
 8002cea:	4818      	ldr	r0, [pc, #96]	@ (8002d4c <MS5607PromRead+0x9c>)
 8002cec:	f00a f9c0 	bl	800d070 <HAL_SPI_Receive>
    disableCSB();
 8002cf0:	f000 fbbc 	bl	800346c <disableCSB>
    structPointer++;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	75fb      	strb	r3, [r7, #23]
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b07      	cmp	r3, #7
 8002d04:	d9dd      	bls.n	8002cc2 <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	75fb      	strb	r3, [r7, #23]
 8002d0e:	e012      	b.n	8002d36 <MS5607PromRead+0x86>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	785a      	ldrb	r2, [r3, #1]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3301      	adds	r3, #1
 8002d26:	7afa      	ldrb	r2, [r7, #11]
 8002d28:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	3301      	adds	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	2b07      	cmp	r3, #7
 8002d3a:	d9e9      	bls.n	8002d10 <MS5607PromRead+0x60>
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	24000630 	.word	0x24000630
 8002d4c:	24000854 	.word	0x24000854

08002d50 <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 8002d58:	f000 fb7c 	bl	8003454 <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 8002d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec8 <MS5607UncompensatedRead+0x178>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b59      	ldr	r3, [pc, #356]	@ (8002ecc <MS5607UncompensatedRead+0x17c>)
 8002d68:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4957      	ldr	r1, [pc, #348]	@ (8002ecc <MS5607UncompensatedRead+0x17c>)
 8002d70:	4857      	ldr	r0, [pc, #348]	@ (8002ed0 <MS5607UncompensatedRead+0x180>)
 8002d72:	f009 ff8f 	bl	800cc94 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8002d76:	bf00      	nop
 8002d78:	4b55      	ldr	r3, [pc, #340]	@ (8002ed0 <MS5607UncompensatedRead+0x180>)
 8002d7a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d0f9      	beq.n	8002d78 <MS5607UncompensatedRead+0x28>

  if(Pressure_OSR == 0x00)
 8002d84:	4b50      	ldr	r3, [pc, #320]	@ (8002ec8 <MS5607UncompensatedRead+0x178>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <MS5607UncompensatedRead+0x46>
//    HAL_Delay(1);
  	ms5607_delay_func(1000);
 8002d8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d90:	f7ff ff44 	bl	8002c1c <ms5607_delay_func>
 8002d94:	e01e      	b.n	8002dd4 <MS5607UncompensatedRead+0x84>
  else if(Pressure_OSR == 0x02)
 8002d96:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec8 <MS5607UncompensatedRead+0x178>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d104      	bne.n	8002da8 <MS5607UncompensatedRead+0x58>
//    HAL_Delay(2);
  ms5607_delay_func(2000);
 8002d9e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002da2:	f7ff ff3b 	bl	8002c1c <ms5607_delay_func>
 8002da6:	e015      	b.n	8002dd4 <MS5607UncompensatedRead+0x84>
  else if(Pressure_OSR == 0x04)
 8002da8:	4b47      	ldr	r3, [pc, #284]	@ (8002ec8 <MS5607UncompensatedRead+0x178>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d104      	bne.n	8002dba <MS5607UncompensatedRead+0x6a>
//    HAL_Delay(3);
  ms5607_delay_func(3000);
 8002db0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002db4:	f7ff ff32 	bl	8002c1c <ms5607_delay_func>
 8002db8:	e00c      	b.n	8002dd4 <MS5607UncompensatedRead+0x84>
  else if(Pressure_OSR == 0x06)
 8002dba:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <MS5607UncompensatedRead+0x178>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d104      	bne.n	8002dcc <MS5607UncompensatedRead+0x7c>
//    HAL_Delay(5);
  ms5607_delay_func(5000);
 8002dc2:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002dc6:	f7ff ff29 	bl	8002c1c <ms5607_delay_func>
 8002dca:	e003      	b.n	8002dd4 <MS5607UncompensatedRead+0x84>
  else
//    HAL_Delay(10);
  ms5607_delay_func(10000);
 8002dcc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002dd0:	f7ff ff24 	bl	8002c1c <ms5607_delay_func>

  disableCSB();
 8002dd4:	f000 fb4a 	bl	800346c <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 8002dd8:	f000 fb3c 	bl	8003454 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <MS5607UncompensatedRead+0x17c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8002de2:	230a      	movs	r3, #10
 8002de4:	2201      	movs	r2, #1
 8002de6:	4939      	ldr	r1, [pc, #228]	@ (8002ecc <MS5607UncompensatedRead+0x17c>)
 8002de8:	4839      	ldr	r0, [pc, #228]	@ (8002ed0 <MS5607UncompensatedRead+0x180>)
 8002dea:	f009 ff53 	bl	800cc94 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi4, reply, 3, 10);
 8002dee:	f107 010c 	add.w	r1, r7, #12
 8002df2:	230a      	movs	r3, #10
 8002df4:	2203      	movs	r2, #3
 8002df6:	4836      	ldr	r0, [pc, #216]	@ (8002ed0 <MS5607UncompensatedRead+0x180>)
 8002df8:	f00a f93a 	bl	800d070 <HAL_SPI_Receive>

  disableCSB();
 8002dfc:	f000 fb36 	bl	800346c <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8002e00:	7b3b      	ldrb	r3, [r7, #12]
 8002e02:	041a      	lsls	r2, r3, #16
 8002e04:	7b7b      	ldrb	r3, [r7, #13]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	7bba      	ldrb	r2, [r7, #14]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	601a      	str	r2, [r3, #0]

  enableCSB();
 8002e12:	f000 fb1f 	bl	8003454 <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8002e16:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed4 <MS5607UncompensatedRead+0x184>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ecc <MS5607UncompensatedRead+0x17c>)
 8002e22:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8002e24:	230a      	movs	r3, #10
 8002e26:	2201      	movs	r2, #1
 8002e28:	4928      	ldr	r1, [pc, #160]	@ (8002ecc <MS5607UncompensatedRead+0x17c>)
 8002e2a:	4829      	ldr	r0, [pc, #164]	@ (8002ed0 <MS5607UncompensatedRead+0x180>)
 8002e2c:	f009 ff32 	bl	800cc94 <HAL_SPI_Transmit>

  if(Temperature_OSR == 0x00)
 8002e30:	4b28      	ldr	r3, [pc, #160]	@ (8002ed4 <MS5607UncompensatedRead+0x184>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d104      	bne.n	8002e42 <MS5607UncompensatedRead+0xf2>
//    HAL_Delay(1);
  ms5607_delay_func(1000);
 8002e38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e3c:	f7ff feee 	bl	8002c1c <ms5607_delay_func>
 8002e40:	e01e      	b.n	8002e80 <MS5607UncompensatedRead+0x130>
  else if(Temperature_OSR == 0x02)
 8002e42:	4b24      	ldr	r3, [pc, #144]	@ (8002ed4 <MS5607UncompensatedRead+0x184>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d104      	bne.n	8002e54 <MS5607UncompensatedRead+0x104>
//    HAL_Delay(2);
  ms5607_delay_func(2000);
 8002e4a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e4e:	f7ff fee5 	bl	8002c1c <ms5607_delay_func>
 8002e52:	e015      	b.n	8002e80 <MS5607UncompensatedRead+0x130>
  else if(Temperature_OSR == 0x04)
 8002e54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <MS5607UncompensatedRead+0x184>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d104      	bne.n	8002e66 <MS5607UncompensatedRead+0x116>
//    HAL_Delay(3);
  ms5607_delay_func(3000);
 8002e5c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e60:	f7ff fedc 	bl	8002c1c <ms5607_delay_func>
 8002e64:	e00c      	b.n	8002e80 <MS5607UncompensatedRead+0x130>
  else if(Temperature_OSR == 0x06)
 8002e66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <MS5607UncompensatedRead+0x184>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d104      	bne.n	8002e78 <MS5607UncompensatedRead+0x128>
//    HAL_Delay(5);
  ms5607_delay_func(5000);
 8002e6e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002e72:	f7ff fed3 	bl	8002c1c <ms5607_delay_func>
 8002e76:	e003      	b.n	8002e80 <MS5607UncompensatedRead+0x130>
  else
//    HAL_Delay(10);
  ms5607_delay_func(10000);
 8002e78:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002e7c:	f7ff fece 	bl	8002c1c <ms5607_delay_func>

  disableCSB();
 8002e80:	f000 faf4 	bl	800346c <disableCSB>


  enableCSB();
 8002e84:	f000 fae6 	bl	8003454 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8002e88:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <MS5607UncompensatedRead+0x17c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8002e8e:	230a      	movs	r3, #10
 8002e90:	2201      	movs	r2, #1
 8002e92:	490e      	ldr	r1, [pc, #56]	@ (8002ecc <MS5607UncompensatedRead+0x17c>)
 8002e94:	480e      	ldr	r0, [pc, #56]	@ (8002ed0 <MS5607UncompensatedRead+0x180>)
 8002e96:	f009 fefd 	bl	800cc94 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi4, reply, 3, 10);
 8002e9a:	f107 010c 	add.w	r1, r7, #12
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	480b      	ldr	r0, [pc, #44]	@ (8002ed0 <MS5607UncompensatedRead+0x180>)
 8002ea4:	f00a f8e4 	bl	800d070 <HAL_SPI_Receive>

  disableCSB();
 8002ea8:	f000 fae0 	bl	800346c <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8002eac:	7b3b      	ldrb	r3, [r7, #12]
 8002eae:	041a      	lsls	r2, r3, #16
 8002eb0:	7b7b      	ldrb	r3, [r7, #13]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	7bba      	ldrb	r2, [r7, #14]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	605a      	str	r2, [r3, #4]
}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	24000631 	.word	0x24000631
 8002ecc:	24000630 	.word	0x24000630
 8002ed0:	24000854 	.word	0x24000854
 8002ed4:	24000632 	.word	0x24000632

08002ed8 <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607Readings *value){
 8002ed8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002edc:	b0d7      	sub	sp, #348	@ 0x15c
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8002ee4:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t) (promData.tref << 8));
 8002ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	4bda      	ldr	r3, [pc, #872]	@ (8003258 <MS5607Convert+0x380>)
 8002ef0:	895b      	ldrh	r3, [r3, #10]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t) dT * promData.tempsens) >> 23);
 8002efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002efe:	17da      	asrs	r2, r3, #31
 8002f00:	469a      	mov	sl, r3
 8002f02:	4693      	mov	fp, r2
 8002f04:	4bd4      	ldr	r3, [pc, #848]	@ (8003258 <MS5607Convert+0x380>)
 8002f06:	899b      	ldrh	r3, [r3, #12]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	4691      	mov	r9, r2
 8002f10:	fb08 f20b 	mul.w	r2, r8, fp
 8002f14:	fb0a f309 	mul.w	r3, sl, r9
 8002f18:	4413      	add	r3, r2
 8002f1a:	fbaa 4508 	umull	r4, r5, sl, r8
 8002f1e:	442b      	add	r3, r5
 8002f20:	461d      	mov	r5, r3
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	0de2      	lsrs	r2, r4, #23
 8002f2c:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8002f30:	15eb      	asrs	r3, r5, #23
 8002f32:	4613      	mov	r3, r2
 8002f34:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002f38:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t) promData.off << 17) + (((int64_t) promData.tco * dT) >> 6);
 8002f3c:	4bc6      	ldr	r3, [pc, #792]	@ (8003258 <MS5607Convert+0x380>)
 8002f3e:	889b      	ldrh	r3, [r3, #4]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f48:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f4c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f50:	460b      	mov	r3, r1
 8002f52:	0bdb      	lsrs	r3, r3, #15
 8002f54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002f58:	460b      	mov	r3, r1
 8002f5a:	045b      	lsls	r3, r3, #17
 8002f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f60:	4bbd      	ldr	r3, [pc, #756]	@ (8003258 <MS5607Convert+0x380>)
 8002f62:	891b      	ldrh	r3, [r3, #8]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f6c:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f74:	17da      	asrs	r2, r3, #31
 8002f76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f7a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f7e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002f82:	462b      	mov	r3, r5
 8002f84:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8002f88:	4642      	mov	r2, r8
 8002f8a:	fb02 f203 	mul.w	r2, r2, r3
 8002f8e:	464b      	mov	r3, r9
 8002f90:	4621      	mov	r1, r4
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	4622      	mov	r2, r4
 8002f9a:	4641      	mov	r1, r8
 8002f9c:	fba2 1201 	umull	r1, r2, r2, r1
 8002fa0:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8002fa4:	460a      	mov	r2, r1
 8002fa6:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8002faa:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002fae:	4413      	add	r3, r2
 8002fb0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	098a      	lsrs	r2, r1, #6
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8002fca:	4629      	mov	r1, r5
 8002fcc:	118b      	asrs	r3, r1, #6
 8002fce:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	1889      	adds	r1, r1, r2
 8002fd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fd8:	4629      	mov	r1, r5
 8002fda:	eb43 0101 	adc.w	r1, r3, r1
 8002fde:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8002fe0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002fe4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t) promData.sens << 16) + (((int64_t) promData.tcs * dT) >> 7);
 8002fe8:	4b9b      	ldr	r3, [pc, #620]	@ (8003258 <MS5607Convert+0x380>)
 8002fea:	885b      	ldrh	r3, [r3, #2]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ff8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003004:	460b      	mov	r3, r1
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800300c:	4b92      	ldr	r3, [pc, #584]	@ (8003258 <MS5607Convert+0x380>)
 800300e:	88db      	ldrh	r3, [r3, #6]
 8003010:	b29b      	uxth	r3, r3
 8003012:	2200      	movs	r2, #0
 8003014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003018:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800301c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003020:	17da      	asrs	r2, r3, #31
 8003022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003026:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800302a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800302e:	462b      	mov	r3, r5
 8003030:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003034:	4642      	mov	r2, r8
 8003036:	fb02 f203 	mul.w	r2, r2, r3
 800303a:	464b      	mov	r3, r9
 800303c:	4621      	mov	r1, r4
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	4622      	mov	r2, r4
 8003046:	4641      	mov	r1, r8
 8003048:	fba2 1201 	umull	r1, r2, r2, r1
 800304c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003050:	460a      	mov	r2, r1
 8003052:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003056:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800305a:	4413      	add	r3, r2
 800305c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800306c:	4621      	mov	r1, r4
 800306e:	09ca      	lsrs	r2, r1, #7
 8003070:	4629      	mov	r1, r5
 8003072:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8003076:	4629      	mov	r1, r5
 8003078:	11cb      	asrs	r3, r1, #7
 800307a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800307e:	4621      	mov	r1, r4
 8003080:	1889      	adds	r1, r1, r2
 8003082:	6339      	str	r1, [r7, #48]	@ 0x30
 8003084:	4629      	mov	r1, r5
 8003086:	eb43 0101 	adc.w	r1, r3, r1
 800308a:	6379      	str	r1, [r7, #52]	@ 0x34
 800308c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003090:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000) {
 8003094:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003098:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800309c:	f280 8152 	bge.w	8003344 <MS5607Convert+0x46c>
    int32_t T2 = ((int64_t) dT * (int64_t) dT) >> 31;
 80030a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80030a4:	17da      	asrs	r2, r3, #31
 80030a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030aa:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80030ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80030b2:	17da      	asrs	r2, r3, #31
 80030b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030bc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80030c0:	462b      	mov	r3, r5
 80030c2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80030c6:	4642      	mov	r2, r8
 80030c8:	fb02 f203 	mul.w	r2, r2, r3
 80030cc:	464b      	mov	r3, r9
 80030ce:	4621      	mov	r1, r4
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	4622      	mov	r2, r4
 80030d8:	4641      	mov	r1, r8
 80030da:	fba2 1201 	umull	r1, r2, r2, r1
 80030de:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80030e2:	460a      	mov	r2, r1
 80030e4:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80030e8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80030ec:	4413      	add	r3, r2
 80030ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80030fe:	4621      	mov	r1, r4
 8003100:	0fca      	lsrs	r2, r1, #31
 8003102:	4629      	mov	r1, r5
 8003104:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003108:	4629      	mov	r1, r5
 800310a:	17cb      	asrs	r3, r1, #31
 800310c:	4613      	mov	r3, r2
 800310e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 8003112:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003116:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800311a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t) TEMPM * (int64_t) TEMPM) >> 4;
 800311e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003122:	17da      	asrs	r2, r3, #31
 8003124:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003128:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800312c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003130:	17da      	asrs	r2, r3, #31
 8003132:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003136:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800313a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800313e:	462b      	mov	r3, r5
 8003140:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003144:	4642      	mov	r2, r8
 8003146:	fb02 f203 	mul.w	r2, r2, r3
 800314a:	464b      	mov	r3, r9
 800314c:	4621      	mov	r1, r4
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	4622      	mov	r2, r4
 8003156:	4641      	mov	r1, r8
 8003158:	fba2 1201 	umull	r1, r2, r2, r1
 800315c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003160:	460a      	mov	r2, r1
 8003162:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8003166:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800316a:	4413      	add	r3, r2
 800316c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003170:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8003174:	4622      	mov	r2, r4
 8003176:	462b      	mov	r3, r5
 8003178:	f04f 0000 	mov.w	r0, #0
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	0119      	lsls	r1, r3, #4
 8003182:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003186:	0110      	lsls	r0, r2, #4
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4621      	mov	r1, r4
 800318e:	1a51      	subs	r1, r2, r1
 8003190:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003192:	4629      	mov	r1, r5
 8003194:	eb63 0301 	sbc.w	r3, r3, r1
 8003198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80031a6:	4649      	mov	r1, r9
 80031a8:	008b      	lsls	r3, r1, #2
 80031aa:	4641      	mov	r1, r8
 80031ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b0:	4641      	mov	r1, r8
 80031b2:	008a      	lsls	r2, r1, #2
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	4603      	mov	r3, r0
 80031ba:	4622      	mov	r2, r4
 80031bc:	189b      	adds	r3, r3, r2
 80031be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031c0:	462b      	mov	r3, r5
 80031c2:	460a      	mov	r2, r1
 80031c4:	eb42 0303 	adc.w	r3, r2, r3
 80031c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80031d6:	4621      	mov	r1, r4
 80031d8:	090a      	lsrs	r2, r1, #4
 80031da:	4629      	mov	r1, r5
 80031dc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80031e0:	4629      	mov	r1, r5
 80031e2:	110b      	asrs	r3, r1, #4
 80031e4:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t) TEMPM * (int64_t) TEMPM;
 80031e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80031ec:	17da      	asrs	r2, r3, #31
 80031ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80031f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80031f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80031f6:	17da      	asrs	r2, r3, #31
 80031f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031fc:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003200:	462b      	mov	r3, r5
 8003202:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003206:	4642      	mov	r2, r8
 8003208:	fb02 f203 	mul.w	r2, r2, r3
 800320c:	464b      	mov	r3, r9
 800320e:	4621      	mov	r1, r4
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	4622      	mov	r2, r4
 8003218:	4641      	mov	r1, r8
 800321a:	fba2 1201 	umull	r1, r2, r2, r1
 800321e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003222:	460a      	mov	r2, r1
 8003224:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8003228:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800322c:	4413      	add	r3, r2
 800322e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003232:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003236:	460b      	mov	r3, r1
 8003238:	18db      	adds	r3, r3, r3
 800323a:	623b      	str	r3, [r7, #32]
 800323c:	4613      	mov	r3, r2
 800323e:	eb42 0303 	adc.w	r3, r2, r3
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
 8003244:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003248:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500) {
 800324c:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003250:	4b02      	ldr	r3, [pc, #8]	@ (800325c <MS5607Convert+0x384>)
 8003252:	429a      	cmp	r2, r3
 8003254:	da55      	bge.n	8003302 <MS5607Convert+0x42a>
 8003256:	e003      	b.n	8003260 <MS5607Convert+0x388>
 8003258:	24000634 	.word	0x24000634
 800325c:	fffffa24 	.word	0xfffffa24
      int32_t TEMPP = TEMP + 1500;
 8003260:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003264:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8003268:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 800326c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003270:	fb03 f303 	mul.w	r3, r3, r3
 8003274:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t) 15 * TEMPP2;
 8003278:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800327c:	17da      	asrs	r2, r3, #31
 800327e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003280:	667a      	str	r2, [r7, #100]	@ 0x64
 8003282:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	f04f 0000 	mov.w	r0, #0
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	0119      	lsls	r1, r3, #4
 8003294:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003298:	0110      	lsls	r0, r2, #4
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4621      	mov	r1, r4
 80032a0:	1a51      	subs	r1, r2, r1
 80032a2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032a4:	4629      	mov	r1, r5
 80032a6:	eb63 0301 	sbc.w	r3, r3, r1
 80032aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032ac:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80032b0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80032b4:	4621      	mov	r1, r4
 80032b6:	1851      	adds	r1, r2, r1
 80032b8:	61b9      	str	r1, [r7, #24]
 80032ba:	4629      	mov	r1, r5
 80032bc:	eb43 0101 	adc.w	r1, r3, r1
 80032c0:	61f9      	str	r1, [r7, #28]
 80032c2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80032c6:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t) 8 * TEMPP2;
 80032ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ce:	17da      	asrs	r2, r3, #31
 80032d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80032d2:	657a      	str	r2, [r7, #84]	@ 0x54
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80032e0:	462b      	mov	r3, r5
 80032e2:	00d9      	lsls	r1, r3, #3
 80032e4:	4623      	mov	r3, r4
 80032e6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80032ea:	4623      	mov	r3, r4
 80032ec:	00d8      	lsls	r0, r3, #3
 80032ee:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80032f2:	1814      	adds	r4, r2, r0
 80032f4:	613c      	str	r4, [r7, #16]
 80032f6:	414b      	adcs	r3, r1
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032fe:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 8003302:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003306:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 8003310:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003314:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003318:	1a84      	subs	r4, r0, r2
 800331a:	60bc      	str	r4, [r7, #8]
 800331c:	eb61 0303 	sbc.w	r3, r1, r3
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003326:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 800332a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800332e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003332:	1a84      	subs	r4, r0, r2
 8003334:	603c      	str	r4, [r7, #0]
 8003336:	eb61 0303 	sbc.w	r3, r1, r3
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003340:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t) sample->pressure * SENS) >> 21) - OFF) >> 15;
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800334e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003350:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003354:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003358:	462a      	mov	r2, r5
 800335a:	fb02 f203 	mul.w	r2, r2, r3
 800335e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003362:	4621      	mov	r1, r4
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800336e:	4621      	mov	r1, r4
 8003370:	fba2 1201 	umull	r1, r2, r2, r1
 8003374:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003378:	460a      	mov	r2, r1
 800337a:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800337e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003382:	4413      	add	r3, r2
 8003384:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003394:	4621      	mov	r1, r4
 8003396:	0d4a      	lsrs	r2, r1, #21
 8003398:	4629      	mov	r1, r5
 800339a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800339e:	4629      	mov	r1, r5
 80033a0:	154b      	asrs	r3, r1, #21
 80033a2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80033a6:	1a14      	subs	r4, r2, r0
 80033a8:	643c      	str	r4, [r7, #64]	@ 0x40
 80033aa:	eb63 0301 	sbc.w	r3, r3, r1
 80033ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80033bc:	4621      	mov	r1, r4
 80033be:	0bca      	lsrs	r2, r1, #15
 80033c0:	4629      	mov	r1, r5
 80033c2:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80033c6:	4629      	mov	r1, r5
 80033c8:	13cb      	asrs	r3, r1, #15
 80033ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80033ce:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 80033d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80033d4:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80033d8:	605a      	str	r2, [r3, #4]
}
 80033da:	bf00      	nop
 80033dc:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80033e6:	4770      	bx	lr

080033e8 <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void){
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 80033ec:	4804      	ldr	r0, [pc, #16]	@ (8003400 <MS5607Update+0x18>)
 80033ee:	f7ff fcaf 	bl	8002d50 <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 80033f2:	4904      	ldr	r1, [pc, #16]	@ (8003404 <MS5607Update+0x1c>)
 80033f4:	4802      	ldr	r0, [pc, #8]	@ (8003400 <MS5607Update+0x18>)
 80033f6:	f7ff fd6f 	bl	8002ed8 <MS5607Convert>
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	24000644 	.word	0x24000644
 8003404:	2400064c 	.word	0x2400064c

08003408 <MS5607GetTemperatureC>:

/* Gets the temperature from the sensor reading */
double MS5607GetTemperatureC(void){
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return (double)readings.temperature/(double)100.0;
 800340c:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <MS5607GetTemperatureC+0x30>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003418:	ed9f 6b05 	vldr	d6, [pc, #20]	@ 8003430 <MS5607GetTemperatureC+0x28>
 800341c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003420:	eeb0 7b45 	vmov.f64	d7, d5
}
 8003424:	eeb0 0b47 	vmov.f64	d0, d7
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	00000000 	.word	0x00000000
 8003434:	40590000 	.word	0x40590000
 8003438:	2400064c 	.word	0x2400064c

0800343c <MS5607GetPressurePa>:

/* Gets the pressure from the sensor reading */
int32_t MS5607GetPressurePa(void){
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return readings.pressure;
 8003440:	4b03      	ldr	r3, [pc, #12]	@ (8003450 <MS5607GetPressurePa+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	2400064c 	.word	0x2400064c

08003454 <enableCSB>:

/* Sets the CS pin */
void enableCSB(void){
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8003458:	2200      	movs	r2, #0
 800345a:	2108      	movs	r1, #8
 800345c:	4802      	ldr	r0, [pc, #8]	@ (8003468 <enableCSB+0x14>)
 800345e:	f001 fe47 	bl	80050f0 <HAL_GPIO_WritePin>
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	58021000 	.word	0x58021000

0800346c <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8003470:	2201      	movs	r2, #1
 8003472:	2108      	movs	r1, #8
 8003474:	4802      	ldr	r0, [pc, #8]	@ (8003480 <disableCSB+0x14>)
 8003476:	f001 fe3b 	bl	80050f0 <HAL_GPIO_WritePin>
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	58021000 	.word	0x58021000
 8003484:	00000000 	.word	0x00000000

08003488 <calculate_altitude>:
void MS5607SetPressureOSR(MS5607OSRFactors pOSR){
  Pressure_OSR = pOSR;
}

// Function to calculate altitude from pressure and temperature
double calculate_altitude(double pressure, double temperature_celsius) {
 8003488:	b580      	push	{r7, lr}
 800348a:	ed2d 8b02 	vpush	{d8}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	ed87 0b02 	vstr	d0, [r7, #8]
 8003496:	ed87 1b00 	vstr	d1, [r7]
	//Method 1 : Variables to tweak
    double temperature_kelvin = temperature_celsius + 273.15; // Convert temperature to Kelvin
 800349a:	ed97 7b00 	vldr	d7, [r7]
 800349e:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 80034f8 <calculate_altitude+0x70>
 80034a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034a6:	ed87 7b06 	vstr	d7, [r7, #24]
    double altitude = (temperature_kelvin / TEMP_LAPSE_RATE) *
 80034aa:	ed97 7b06 	vldr	d7, [r7, #24]
 80034ae:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8003500 <calculate_altitude+0x78>
 80034b2:	ee87 8b06 	vdiv.f64	d8, d7, d6
                      (1 - pow((pressure / SEA_LEVEL_PRESSURE), (GRAVITY * MOLAR_MASS) / (GAS_CONSTANT * TEMP_LAPSE_RATE)));
 80034b6:	ed97 7b02 	vldr	d7, [r7, #8]
 80034ba:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 8003508 <calculate_altitude+0x80>
 80034be:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80034c2:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8003510 <calculate_altitude+0x88>
 80034c6:	eeb0 0b46 	vmov.f64	d0, d6
 80034ca:	f015 f955 	bl	8018778 <pow>
 80034ce:	eeb0 7b40 	vmov.f64	d7, d0
 80034d2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80034d6:	ee36 7b47 	vsub.f64	d7, d6, d7
    double altitude = (temperature_kelvin / TEMP_LAPSE_RATE) *
 80034da:	ee28 7b07 	vmul.f64	d7, d8, d7
 80034de:	ed87 7b04 	vstr	d7, [r7, #16]

	//Method 2 : Not accurate
	//double altitude = ((((((10 * log10((pressure / 100.0) / 1013.25)) / 5.2558797) - 1) / (-6.8755856 * pow(10, -6))) / 1000) * 0.30);

	return altitude;
 80034e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80034e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80034ea:	eeb0 0b47 	vmov.f64	d0, d7
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	ecbd 8b02 	vpop	{d8}
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	66666666 	.word	0x66666666
 80034fc:	40711266 	.word	0x40711266
 8003500:	bc01a36e 	.word	0xbc01a36e
 8003504:	3f841205 	.word	0x3f841205
 8003508:	00000000 	.word	0x00000000
 800350c:	40f8bcd0 	.word	0x40f8bcd0
 8003510:	15fe261c 	.word	0x15fe261c
 8003514:	400be369 	.word	0x400be369

08003518 <MS5607_ReadData>:


Barometer_2_Axis MS5607_ReadData(){
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	Barometer_2_Axis data = {0};
 8003520:	f107 0308 	add.w	r3, r7, #8
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
 8003530:	615a      	str	r2, [r3, #20]
	MS5607UncompensatedRead(&uncompValues);
 8003532:	4819      	ldr	r0, [pc, #100]	@ (8003598 <MS5607_ReadData+0x80>)
 8003534:	f7ff fc0c 	bl	8002d50 <MS5607UncompensatedRead>
	MS5607Convert(&uncompValues, &readings);
 8003538:	4918      	ldr	r1, [pc, #96]	@ (800359c <MS5607_ReadData+0x84>)
 800353a:	4817      	ldr	r0, [pc, #92]	@ (8003598 <MS5607_ReadData+0x80>)
 800353c:	f7ff fccc 	bl	8002ed8 <MS5607Convert>
	data.temperature = MS5607GetTemperatureC();
 8003540:	f7ff ff62 	bl	8003408 <MS5607GetTemperatureC>
 8003544:	eeb0 7b40 	vmov.f64	d7, d0
 8003548:	ed87 7b04 	vstr	d7, [r7, #16]
	data.pressure = MS5607GetPressurePa();
 800354c:	f7ff ff76 	bl	800343c <MS5607GetPressurePa>
 8003550:	4603      	mov	r3, r0
 8003552:	60bb      	str	r3, [r7, #8]
	data.altitude = calculate_altitude(data.pressure, data.temperature);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800355e:	ed97 6b04 	vldr	d6, [r7, #16]
 8003562:	eeb0 1b46 	vmov.f64	d1, d6
 8003566:	eeb0 0b47 	vmov.f64	d0, d7
 800356a:	f7ff ff8d 	bl	8003488 <calculate_altitude>
 800356e:	eeb0 7b40 	vmov.f64	d7, d0
 8003572:	ed87 7b06 	vstr	d7, [r7, #24]
	MS5607Update();
 8003576:	f7ff ff37 	bl	80033e8 <MS5607Update>
	return data;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	461d      	mov	r5, r3
 800357e:	f107 0408 	add.w	r4, r7, #8
 8003582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003586:	e894 0003 	ldmia.w	r4, {r0, r1}
 800358a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bdb0      	pop	{r4, r5, r7, pc}
 8003596:	bf00      	nop
 8003598:	24000644 	.word	0x24000644
 800359c:	2400064c 	.word	0x2400064c

080035a0 <ms5607_print_barometer_data>:


void ms5607_print_barometer_data(Barometer_2_Axis *data) {
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	6078      	str	r0, [r7, #4]
	printf("MS5607 Barometer: \n");
 80035a8:	480c      	ldr	r0, [pc, #48]	@ (80035dc <ms5607_print_barometer_data+0x3c>)
 80035aa:	f013 f9af 	bl	801690c <puts>
	printf("Pressure: %ld Pa, Temperature: %f degC, Altitude: %f meters \n", data->pressure, data->temperature, data->altitude);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681c      	ldr	r4, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80035be:	e9cd 2300 	strd	r2, r3, [sp]
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4621      	mov	r1, r4
 80035c8:	4805      	ldr	r0, [pc, #20]	@ (80035e0 <ms5607_print_barometer_data+0x40>)
 80035ca:	f013 f937 	bl	801683c <iprintf>
    printf("----- \n");
 80035ce:	4805      	ldr	r0, [pc, #20]	@ (80035e4 <ms5607_print_barometer_data+0x44>)
 80035d0:	f013 f99c 	bl	801690c <puts>
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd90      	pop	{r4, r7, pc}
 80035dc:	080190dc 	.word	0x080190dc
 80035e0:	080190f0 	.word	0x080190f0
 80035e4:	08019130 	.word	0x08019130

080035e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80035f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80035f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003600:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003604:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8003608:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003610:	e000      	b.n	8003614 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003612:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003614:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f9      	beq.n	8003612 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800361e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003628:	687b      	ldr	r3, [r7, #4]
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
	int i=0;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e009      	b.n	8003660 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	60ba      	str	r2, [r7, #8]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ffc7 	bl	80035e8 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	3301      	adds	r3, #1
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	dbf1      	blt.n	800364c <_write+0x16>
	}
	return len;
 8003668:	687b      	ldr	r3, [r7, #4]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003676:	f000 fbff 	bl	8003e78 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800367a:	f001 f927 	bl	80048cc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800367e:	f000 f81f 	bl	80036c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003682:	f000 f8a1 	bl	80037c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003686:	f000 faf7 	bl	8003c78 <MX_GPIO_Init>
  MX_I2C1_Init();
 800368a:	f000 f8bb 	bl	8003804 <MX_I2C1_Init>
  MX_I2C2_Init();
 800368e:	f000 f8f9 	bl	8003884 <MX_I2C2_Init>
  MX_I2C4_Init();
 8003692:	f000 f937 	bl	8003904 <MX_I2C4_Init>
  MX_SDMMC1_SD_Init();
 8003696:	f000 f975 	bl	8003984 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800369a:	f000 f995 	bl	80039c8 <MX_SPI1_Init>
  MX_SPI4_Init();
 800369e:	f000 f9eb 	bl	8003a78 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80036a2:	f000 fa3f 	bl	8003b24 <MX_USART2_UART_Init>
  MX_USART3_Init();
 80036a6:	f000 fa89 	bl	8003bbc <MX_USART3_Init>
  MX_FATFS_Init();
 80036aa:	f00e f9ab 	bl	8011a04 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80036ae:	f011 fe93 	bl	80153d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  SensorManager_Init();
 80036b2:	f7fc ffe5 	bl	8000680 <SensorManager_Init>
  TestTelemetry();
 80036b6:	f7fd f883 	bl	80007c0 <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036ba:	bf00      	nop
 80036bc:	e7fd      	b.n	80036ba <main+0x48>
	...

080036c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b09c      	sub	sp, #112	@ 0x70
 80036c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036ca:	224c      	movs	r2, #76	@ 0x4c
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f013 f9fc 	bl	8016acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	2220      	movs	r2, #32
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f013 f9f6 	bl	8016acc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80036e0:	2002      	movs	r0, #2
 80036e2:	f004 f8a7 	bl	8007834 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80036e6:	2300      	movs	r3, #0
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4b35      	ldr	r3, [pc, #212]	@ (80037c0 <SystemClock_Config+0x100>)
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	4a34      	ldr	r2, [pc, #208]	@ (80037c0 <SystemClock_Config+0x100>)
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80036f6:	4b32      	ldr	r3, [pc, #200]	@ (80037c0 <SystemClock_Config+0x100>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	4b30      	ldr	r3, [pc, #192]	@ (80037c4 <SystemClock_Config+0x104>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003708:	4a2e      	ldr	r2, [pc, #184]	@ (80037c4 <SystemClock_Config+0x104>)
 800370a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800370e:	6193      	str	r3, [r2, #24]
 8003710:	4b2c      	ldr	r3, [pc, #176]	@ (80037c4 <SystemClock_Config+0x104>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800371c:	bf00      	nop
 800371e:	4b29      	ldr	r3, [pc, #164]	@ (80037c4 <SystemClock_Config+0x104>)
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372a:	d1f8      	bne.n	800371e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800372c:	2323      	movs	r3, #35	@ 0x23
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003730:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003736:	2301      	movs	r3, #1
 8003738:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800373a:	2340      	movs	r3, #64	@ 0x40
 800373c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800373e:	2301      	movs	r3, #1
 8003740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003742:	2302      	movs	r3, #2
 8003744:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003746:	2302      	movs	r3, #2
 8003748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800374a:	2302      	movs	r3, #2
 800374c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800374e:	230c      	movs	r3, #12
 8003750:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003752:	2302      	movs	r3, #2
 8003754:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003756:	2303      	movs	r3, #3
 8003758:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800375a:	2302      	movs	r3, #2
 800375c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800375e:	230c      	movs	r3, #12
 8003760:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8003762:	2302      	movs	r3, #2
 8003764:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800376a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800376e:	4618      	mov	r0, r3
 8003770:	f004 f8aa 	bl	80078c8 <HAL_RCC_OscConfig>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800377a:	f000 fba9 	bl	8003ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800377e:	233f      	movs	r3, #63	@ 0x3f
 8003780:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003782:	2303      	movs	r3, #3
 8003784:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003792:	2340      	movs	r3, #64	@ 0x40
 8003794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800379a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800379c:	2340      	movs	r3, #64	@ 0x40
 800379e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	2101      	movs	r1, #1
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 fce9 	bl	800817c <HAL_RCC_ClockConfig>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80037b0:	f000 fb8e 	bl	8003ed0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80037b4:	f004 fe98 	bl	80084e8 <HAL_RCC_EnableCSS>
}
 80037b8:	bf00      	nop
 80037ba:	3770      	adds	r7, #112	@ 0x70
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	58000400 	.word	0x58000400
 80037c4:	58024800 	.word	0x58024800

080037c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b0b0      	sub	sp, #192	@ 0xc0
 80037cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037ce:	463b      	mov	r3, r7
 80037d0:	22c0      	movs	r2, #192	@ 0xc0
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f013 f979 	bl	8016acc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80037da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80037e6:	2300      	movs	r3, #0
 80037e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037ea:	463b      	mov	r3, r7
 80037ec:	4618      	mov	r0, r3
 80037ee:	f005 f87d 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 80037f8:	f000 fb6a 	bl	8003ed0 <Error_Handler>
  }
}
 80037fc:	bf00      	nop
 80037fe:	37c0      	adds	r7, #192	@ 0xc0
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003808:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <MX_I2C1_Init+0x74>)
 800380a:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <MX_I2C1_Init+0x78>)
 800380c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 800380e:	4b1a      	ldr	r3, [pc, #104]	@ (8003878 <MX_I2C1_Init+0x74>)
 8003810:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <MX_I2C1_Init+0x7c>)
 8003812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003814:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <MX_I2C1_Init+0x74>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800381a:	4b17      	ldr	r3, [pc, #92]	@ (8003878 <MX_I2C1_Init+0x74>)
 800381c:	2201      	movs	r2, #1
 800381e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003820:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <MX_I2C1_Init+0x74>)
 8003822:	2200      	movs	r2, #0
 8003824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003826:	4b14      	ldr	r3, [pc, #80]	@ (8003878 <MX_I2C1_Init+0x74>)
 8003828:	2200      	movs	r2, #0
 800382a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800382c:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <MX_I2C1_Init+0x74>)
 800382e:	2200      	movs	r2, #0
 8003830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003832:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <MX_I2C1_Init+0x74>)
 8003834:	2200      	movs	r2, #0
 8003836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003838:	4b0f      	ldr	r3, [pc, #60]	@ (8003878 <MX_I2C1_Init+0x74>)
 800383a:	2200      	movs	r2, #0
 800383c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800383e:	480e      	ldr	r0, [pc, #56]	@ (8003878 <MX_I2C1_Init+0x74>)
 8003840:	f001 fc70 	bl	8005124 <HAL_I2C_Init>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800384a:	f000 fb41 	bl	8003ed0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800384e:	2100      	movs	r1, #0
 8003850:	4809      	ldr	r0, [pc, #36]	@ (8003878 <MX_I2C1_Init+0x74>)
 8003852:	f002 fc8d 	bl	8006170 <HAL_I2CEx_ConfigAnalogFilter>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800385c:	f000 fb38 	bl	8003ed0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003860:	2100      	movs	r1, #0
 8003862:	4805      	ldr	r0, [pc, #20]	@ (8003878 <MX_I2C1_Init+0x74>)
 8003864:	f002 fccf 	bl	8006206 <HAL_I2CEx_ConfigDigitalFilter>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800386e:	f000 fb2f 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	24000654 	.word	0x24000654
 800387c:	40005400 	.word	0x40005400
 8003880:	00909fce 	.word	0x00909fce

08003884 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003888:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <MX_I2C2_Init+0x74>)
 800388a:	4a1c      	ldr	r2, [pc, #112]	@ (80038fc <MX_I2C2_Init+0x78>)
 800388c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 800388e:	4b1a      	ldr	r3, [pc, #104]	@ (80038f8 <MX_I2C2_Init+0x74>)
 8003890:	4a1b      	ldr	r2, [pc, #108]	@ (8003900 <MX_I2C2_Init+0x7c>)
 8003892:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003894:	4b18      	ldr	r3, [pc, #96]	@ (80038f8 <MX_I2C2_Init+0x74>)
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800389a:	4b17      	ldr	r3, [pc, #92]	@ (80038f8 <MX_I2C2_Init+0x74>)
 800389c:	2201      	movs	r2, #1
 800389e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038a0:	4b15      	ldr	r3, [pc, #84]	@ (80038f8 <MX_I2C2_Init+0x74>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80038a6:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <MX_I2C2_Init+0x74>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80038ac:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <MX_I2C2_Init+0x74>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038b2:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <MX_I2C2_Init+0x74>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038b8:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <MX_I2C2_Init+0x74>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80038be:	480e      	ldr	r0, [pc, #56]	@ (80038f8 <MX_I2C2_Init+0x74>)
 80038c0:	f001 fc30 	bl	8005124 <HAL_I2C_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80038ca:	f000 fb01 	bl	8003ed0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038ce:	2100      	movs	r1, #0
 80038d0:	4809      	ldr	r0, [pc, #36]	@ (80038f8 <MX_I2C2_Init+0x74>)
 80038d2:	f002 fc4d 	bl	8006170 <HAL_I2CEx_ConfigAnalogFilter>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80038dc:	f000 faf8 	bl	8003ed0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80038e0:	2100      	movs	r1, #0
 80038e2:	4805      	ldr	r0, [pc, #20]	@ (80038f8 <MX_I2C2_Init+0x74>)
 80038e4:	f002 fc8f 	bl	8006206 <HAL_I2CEx_ConfigDigitalFilter>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80038ee:	f000 faef 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	240006a8 	.word	0x240006a8
 80038fc:	40005800 	.word	0x40005800
 8003900:	00909fce 	.word	0x00909fce

08003904 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8003908:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <MX_I2C4_Init+0x74>)
 800390a:	4a1c      	ldr	r2, [pc, #112]	@ (800397c <MX_I2C4_Init+0x78>)
 800390c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909FCE;
 800390e:	4b1a      	ldr	r3, [pc, #104]	@ (8003978 <MX_I2C4_Init+0x74>)
 8003910:	4a1b      	ldr	r2, [pc, #108]	@ (8003980 <MX_I2C4_Init+0x7c>)
 8003912:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8003914:	4b18      	ldr	r3, [pc, #96]	@ (8003978 <MX_I2C4_Init+0x74>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800391a:	4b17      	ldr	r3, [pc, #92]	@ (8003978 <MX_I2C4_Init+0x74>)
 800391c:	2201      	movs	r2, #1
 800391e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003920:	4b15      	ldr	r3, [pc, #84]	@ (8003978 <MX_I2C4_Init+0x74>)
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8003926:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <MX_I2C4_Init+0x74>)
 8003928:	2200      	movs	r2, #0
 800392a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800392c:	4b12      	ldr	r3, [pc, #72]	@ (8003978 <MX_I2C4_Init+0x74>)
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003932:	4b11      	ldr	r3, [pc, #68]	@ (8003978 <MX_I2C4_Init+0x74>)
 8003934:	2200      	movs	r2, #0
 8003936:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003938:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <MX_I2C4_Init+0x74>)
 800393a:	2200      	movs	r2, #0
 800393c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800393e:	480e      	ldr	r0, [pc, #56]	@ (8003978 <MX_I2C4_Init+0x74>)
 8003940:	f001 fbf0 	bl	8005124 <HAL_I2C_Init>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800394a:	f000 fac1 	bl	8003ed0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800394e:	2100      	movs	r1, #0
 8003950:	4809      	ldr	r0, [pc, #36]	@ (8003978 <MX_I2C4_Init+0x74>)
 8003952:	f002 fc0d 	bl	8006170 <HAL_I2CEx_ConfigAnalogFilter>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800395c:	f000 fab8 	bl	8003ed0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003960:	2100      	movs	r1, #0
 8003962:	4805      	ldr	r0, [pc, #20]	@ (8003978 <MX_I2C4_Init+0x74>)
 8003964:	f002 fc4f 	bl	8006206 <HAL_I2CEx_ConfigDigitalFilter>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800396e:	f000 faaf 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	240006fc 	.word	0x240006fc
 800397c:	58001c00 	.word	0x58001c00
 8003980:	00909fce 	.word	0x00909fce

08003984 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003988:	4b0d      	ldr	r3, [pc, #52]	@ (80039c0 <MX_SDMMC1_SD_Init+0x3c>)
 800398a:	4a0e      	ldr	r2, [pc, #56]	@ (80039c4 <MX_SDMMC1_SD_Init+0x40>)
 800398c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800398e:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <MX_SDMMC1_SD_Init+0x3c>)
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003994:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <MX_SDMMC1_SD_Init+0x3c>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800399a:	4b09      	ldr	r3, [pc, #36]	@ (80039c0 <MX_SDMMC1_SD_Init+0x3c>)
 800399c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039a0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80039a2:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <MX_SDMMC1_SD_Init+0x3c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <MX_SDMMC1_SD_Init+0x3c>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  HAL_SD_Init(&hsd1);
 80039ae:	4804      	ldr	r0, [pc, #16]	@ (80039c0 <MX_SDMMC1_SD_Init+0x3c>)
 80039b0:	f007 fc9a 	bl	800b2e8 <HAL_SD_Init>
  HAL_SD_InitCard(&hsd1);
 80039b4:	4802      	ldr	r0, [pc, #8]	@ (80039c0 <MX_SDMMC1_SD_Init+0x3c>)
 80039b6:	f007 fd1b 	bl	800b3f0 <HAL_SD_InitCard>
  //printf("%d \n",ret);
  /* USER CODE END SDMMC1_Init 2 */

}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	24000750 	.word	0x24000750
 80039c4:	52007000 	.word	0x52007000

080039c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039cc:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 80039ce:	4a29      	ldr	r2, [pc, #164]	@ (8003a74 <MX_SPI1_Init+0xac>)
 80039d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039d2:	4b27      	ldr	r3, [pc, #156]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 80039d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80039d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039da:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039e0:	4b23      	ldr	r3, [pc, #140]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 80039e2:	2207      	movs	r2, #7
 80039e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80039e6:	4b22      	ldr	r3, [pc, #136]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 80039e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80039ee:	4b20      	ldr	r3, [pc, #128]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 80039f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 80039f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80039fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80039fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a00:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003a04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a06:	4b1a      	ldr	r3, [pc, #104]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a0c:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a12:	4b17      	ldr	r3, [pc, #92]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003a18:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a1e:	4b14      	ldr	r3, [pc, #80]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a24:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003a26:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003a2c:	4b10      	ldr	r3, [pc, #64]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003a32:	4b0f      	ldr	r3, [pc, #60]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003a38:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003a44:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003a4a:	4b09      	ldr	r3, [pc, #36]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003a50:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003a56:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a5c:	4804      	ldr	r0, [pc, #16]	@ (8003a70 <MX_SPI1_Init+0xa8>)
 8003a5e:	f008 fff5 	bl	800ca4c <HAL_SPI_Init>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8003a68:	f000 fa32 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	240007cc 	.word	0x240007cc
 8003a74:	40013000 	.word	0x40013000

08003a78 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003a7c:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003a7e:	4a28      	ldr	r2, [pc, #160]	@ (8003b20 <MX_SPI4_Init+0xa8>)
 8003a80:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003a82:	4b26      	ldr	r3, [pc, #152]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003a84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003a88:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003a8a:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8003a90:	4b22      	ldr	r3, [pc, #136]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003a92:	2203      	movs	r2, #3
 8003a94:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a96:	4b21      	ldr	r3, [pc, #132]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003aa4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003aa8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ab6:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003abc:	4b17      	ldr	r3, [pc, #92]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8003ac2:	4b16      	ldr	r3, [pc, #88]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003aca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ace:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003ad0:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003ad6:	4b11      	ldr	r3, [pc, #68]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003adc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003aee:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003af4:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003afa:	4b08      	ldr	r3, [pc, #32]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003b00:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003b06:	4805      	ldr	r0, [pc, #20]	@ (8003b1c <MX_SPI4_Init+0xa4>)
 8003b08:	f008 ffa0 	bl	800ca4c <HAL_SPI_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8003b12:	f000 f9dd 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	24000854 	.word	0x24000854
 8003b20:	40013400 	.word	0x40013400

08003b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b28:	4b22      	ldr	r3, [pc, #136]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b2a:	4a23      	ldr	r2, [pc, #140]	@ (8003bb8 <MX_USART2_UART_Init+0x94>)
 8003b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b2e:	4b21      	ldr	r3, [pc, #132]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b36:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b42:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b48:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b4a:	220c      	movs	r2, #12
 8003b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b4e:	4b19      	ldr	r3, [pc, #100]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b54:	4b17      	ldr	r3, [pc, #92]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b5a:	4b16      	ldr	r3, [pc, #88]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b60:	4b14      	ldr	r3, [pc, #80]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b66:	4b13      	ldr	r3, [pc, #76]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b6c:	4811      	ldr	r0, [pc, #68]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b6e:	f009 fdda 	bl	800d726 <HAL_UART_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003b78:	f000 f9aa 	bl	8003ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	480d      	ldr	r0, [pc, #52]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b80:	f00a fde3 	bl	800e74a <HAL_UARTEx_SetTxFifoThreshold>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003b8a:	f000 f9a1 	bl	8003ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4808      	ldr	r0, [pc, #32]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003b92:	f00a fe18 	bl	800e7c6 <HAL_UARTEx_SetRxFifoThreshold>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003b9c:	f000 f998 	bl	8003ed0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003ba0:	4804      	ldr	r0, [pc, #16]	@ (8003bb4 <MX_USART2_UART_Init+0x90>)
 8003ba2:	f00a fd99 	bl	800e6d8 <HAL_UARTEx_DisableFifoMode>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003bac:	f000 f990 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bb0:	bf00      	nop
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	240008dc 	.word	0x240008dc
 8003bb8:	40004400 	.word	0x40004400

08003bbc <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c74 <MX_USART3_Init+0xb8>)
 8003bc4:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003bc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003bcc:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8003bce:	4b28      	ldr	r3, [pc, #160]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8003bd4:	4b26      	ldr	r3, [pc, #152]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8003bda:	4b25      	ldr	r3, [pc, #148]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8003be0:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003be2:	220c      	movs	r2, #12
 8003be4:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8003be6:	4b22      	ldr	r3, [pc, #136]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8003bec:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8003bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8003c04:	481a      	ldr	r0, [pc, #104]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003c06:	f00a fe6b 	bl	800e8e0 <HAL_USART_Init>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8003c10:	f000 f95e 	bl	8003ed0 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c14:	2100      	movs	r1, #0
 8003c16:	4816      	ldr	r0, [pc, #88]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003c18:	f00b fd10 	bl	800f63c <HAL_USARTEx_SetTxFifoThreshold>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8003c22:	f000 f955 	bl	8003ed0 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c26:	2100      	movs	r1, #0
 8003c28:	4811      	ldr	r0, [pc, #68]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003c2a:	f00b fd45 	bl	800f6b8 <HAL_USARTEx_SetRxFifoThreshold>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8003c34:	f000 f94c 	bl	8003ed0 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8003c38:	2100      	movs	r1, #0
 8003c3a:	480d      	ldr	r0, [pc, #52]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003c3c:	f00b fc88 	bl	800f550 <HAL_USARTEx_ConfigNSS>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8003c46:	f000 f943 	bl	8003ed0 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8003c4a:	4809      	ldr	r0, [pc, #36]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003c4c:	f00b fcbd 	bl	800f5ca <HAL_USARTEx_DisableFifoMode>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8003c56:	f000 f93b 	bl	8003ed0 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8003c5a:	4805      	ldr	r0, [pc, #20]	@ (8003c70 <MX_USART3_Init+0xb4>)
 8003c5c:	f00b fc23 	bl	800f4a6 <HAL_USARTEx_EnableSlaveMode>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8003c66:	f000 f933 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	24000970 	.word	0x24000970
 8003c74:	40004800 	.word	0x40004800

08003c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	@ 0x30
 8003c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c7e:	f107 031c 	add.w	r3, r7, #28
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	605a      	str	r2, [r3, #4]
 8003c88:	609a      	str	r2, [r3, #8]
 8003c8a:	60da      	str	r2, [r3, #12]
 8003c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c8e:	4b74      	ldr	r3, [pc, #464]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c94:	4a72      	ldr	r2, [pc, #456]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003c96:	f043 0310 	orr.w	r3, r3, #16
 8003c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c9e:	4b70      	ldr	r3, [pc, #448]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cac:	4b6c      	ldr	r3, [pc, #432]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cb2:	4a6b      	ldr	r2, [pc, #428]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003cb4:	f043 0304 	orr.w	r3, r3, #4
 8003cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cbc:	4b68      	ldr	r3, [pc, #416]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cca:	4b65      	ldr	r3, [pc, #404]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cd0:	4a63      	ldr	r2, [pc, #396]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cda:	4b61      	ldr	r3, [pc, #388]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cee:	4a5c      	ldr	r2, [pc, #368]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cf8:	4b59      	ldr	r3, [pc, #356]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d06:	4b56      	ldr	r3, [pc, #344]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d0c:	4a54      	ldr	r2, [pc, #336]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003d0e:	f043 0302 	orr.w	r3, r3, #2
 8003d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d16:	4b52      	ldr	r3, [pc, #328]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d24:	4b4e      	ldr	r3, [pc, #312]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d2a:	4a4d      	ldr	r2, [pc, #308]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003d2c:	f043 0308 	orr.w	r3, r3, #8
 8003d30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d34:	4b4a      	ldr	r3, [pc, #296]	@ (8003e60 <MX_GPIO_Init+0x1e8>)
 8003d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2108      	movs	r1, #8
 8003d46:	4847      	ldr	r0, [pc, #284]	@ (8003e64 <MX_GPIO_Init+0x1ec>)
 8003d48:	f001 f9d2 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5607_ON_GPIO_Port, MS5607_ON_Pin, GPIO_PIN_SET);
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d52:	4845      	ldr	r0, [pc, #276]	@ (8003e68 <MX_GPIO_Init+0x1f0>)
 8003d54:	f001 f9cc 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADXL375_ON_Pin|BNO055_ON_Pin, GPIO_PIN_SET);
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f248 0108 	movw	r1, #32776	@ 0x8008
 8003d5e:	4843      	ldr	r0, [pc, #268]	@ (8003e6c <MX_GPIO_Init+0x1f4>)
 8003d60:	f001 f9c6 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003d64:	2200      	movs	r2, #0
 8003d66:	2110      	movs	r1, #16
 8003d68:	483f      	ldr	r0, [pc, #252]	@ (8003e68 <MX_GPIO_Init+0x1f0>)
 8003d6a:	f001 f9c1 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MPL311_ON_Pin|BNO086_ON_Pin, GPIO_PIN_SET);
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f244 0102 	movw	r1, #16386	@ 0x4002
 8003d74:	483b      	ldr	r0, [pc, #236]	@ (8003e64 <MX_GPIO_Init+0x1ec>)
 8003d76:	f001 f9bb 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BNO086_RST_Pin, GPIO_PIN_RESET);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f248 0120 	movw	r1, #32800	@ 0x8020
 8003d80:	483b      	ldr	r0, [pc, #236]	@ (8003e70 <MX_GPIO_Init+0x1f8>)
 8003d82:	f001 f9b5 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8003d86:	2200      	movs	r2, #0
 8003d88:	2110      	movs	r1, #16
 8003d8a:	483a      	ldr	r0, [pc, #232]	@ (8003e74 <MX_GPIO_Init+0x1fc>)
 8003d8c:	f001 f9b0 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS_Pin MPL311_ON_Pin BNO086_ON_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|MPL311_ON_Pin|BNO086_ON_Pin;
 8003d90:	f244 030a 	movw	r3, #16394	@ 0x400a
 8003d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d96:	2301      	movs	r3, #1
 8003d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	4619      	mov	r1, r3
 8003da8:	482e      	ldr	r0, [pc, #184]	@ (8003e64 <MX_GPIO_Init+0x1ec>)
 8003daa:	f000 ffd9 	bl	8004d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS5607_ON_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = MS5607_ON_Pin|SPI1_CS_Pin;
 8003dae:	f242 0310 	movw	r3, #8208	@ 0x2010
 8003db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db4:	2301      	movs	r3, #1
 8003db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc0:	f107 031c 	add.w	r3, r7, #28
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4828      	ldr	r0, [pc, #160]	@ (8003e68 <MX_GPIO_Init+0x1f0>)
 8003dc8:	f000 ffca 	bl	8004d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003dd8:	f107 031c 	add.w	r3, r7, #28
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4823      	ldr	r0, [pc, #140]	@ (8003e6c <MX_GPIO_Init+0x1f4>)
 8003de0:	f000 ffbe 	bl	8004d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_ON_Pin BNO055_ON_Pin */
  GPIO_InitStruct.Pin = ADXL375_ON_Pin|BNO055_ON_Pin;
 8003de4:	f248 0308 	movw	r3, #32776	@ 0x8008
 8003de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dea:	2301      	movs	r3, #1
 8003dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df2:	2300      	movs	r3, #0
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df6:	f107 031c 	add.w	r3, r7, #28
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	481b      	ldr	r0, [pc, #108]	@ (8003e6c <MX_GPIO_Init+0x1f4>)
 8003dfe:	f000 ffaf 	bl	8004d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : HEARTBEAT_Pin BNO086_RST_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin|BNO086_RST_Pin;
 8003e02:	f248 0320 	movw	r3, #32800	@ 0x8020
 8003e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e14:	f107 031c 	add.w	r3, r7, #28
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4815      	ldr	r0, [pc, #84]	@ (8003e70 <MX_GPIO_Init+0x1f8>)
 8003e1c:	f000 ffa0 	bl	8004d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e26:	2300      	movs	r3, #0
 8003e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2e:	f107 031c 	add.w	r3, r7, #28
 8003e32:	4619      	mov	r1, r3
 8003e34:	480d      	ldr	r0, [pc, #52]	@ (8003e6c <MX_GPIO_Init+0x1f4>)
 8003e36:	f000 ff93 	bl	8004d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e46:	2300      	movs	r3, #0
 8003e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8003e4a:	f107 031c 	add.w	r3, r7, #28
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4808      	ldr	r0, [pc, #32]	@ (8003e74 <MX_GPIO_Init+0x1fc>)
 8003e52:	f000 ff85 	bl	8004d60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e56:	bf00      	nop
 8003e58:	3730      	adds	r7, #48	@ 0x30
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	58024400 	.word	0x58024400
 8003e64:	58021000 	.word	0x58021000
 8003e68:	58020800 	.word	0x58020800
 8003e6c:	58020000 	.word	0x58020000
 8003e70:	58020400 	.word	0x58020400
 8003e74:	58020c00 	.word	0x58020c00

08003e78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003e7e:	463b      	mov	r3, r7
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003e8a:	f000 fef1 	bl	8004c70 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003e9a:	231f      	movs	r3, #31
 8003e9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003e9e:	2387      	movs	r3, #135	@ 0x87
 8003ea0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003eba:	463b      	mov	r3, r7
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 ff0f 	bl	8004ce0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003ec2:	2004      	movs	r0, #4
 8003ec4:	f000 feec 	bl	8004ca0 <HAL_MPU_Enable>

}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed4:	b672      	cpsid	i
}
 8003ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <Error_Handler+0x8>

08003edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f0c <HAL_MspInit+0x30>)
 8003ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ee8:	4a08      	ldr	r2, [pc, #32]	@ (8003f0c <HAL_MspInit+0x30>)
 8003eea:	f043 0302 	orr.w	r3, r3, #2
 8003eee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_MspInit+0x30>)
 8003ef4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	58024400 	.word	0x58024400

08003f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b0be      	sub	sp, #248	@ 0xf8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f28:	f107 0320 	add.w	r3, r7, #32
 8003f2c:	22c0      	movs	r2, #192	@ 0xc0
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f012 fdcb 	bl	8016acc <memset>
  if(hi2c->Instance==I2C1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a73      	ldr	r2, [pc, #460]	@ (8004108 <HAL_I2C_MspInit+0x1f8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d146      	bne.n	8003fce <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003f40:	f04f 0208 	mov.w	r2, #8
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f52:	f107 0320 	add.w	r3, r7, #32
 8003f56:	4618      	mov	r0, r3
 8003f58:	f004 fcc8 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003f62:	f7ff ffb5 	bl	8003ed0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f66:	4b69      	ldr	r3, [pc, #420]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 8003f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f6c:	4a67      	ldr	r2, [pc, #412]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f76:	4b65      	ldr	r3, [pc, #404]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 8003f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f84:	23c0      	movs	r3, #192	@ 0xc0
 8003f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f8a:	2312      	movs	r3, #18
 8003f8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4859      	ldr	r0, [pc, #356]	@ (8004110 <HAL_I2C_MspInit+0x200>)
 8003faa:	f000 fed9 	bl	8004d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fae:	4b57      	ldr	r3, [pc, #348]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 8003fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fb4:	4a55      	ldr	r2, [pc, #340]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 8003fb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003fba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003fbe:	4b53      	ldr	r3, [pc, #332]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 8003fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003fcc:	e098      	b.n	8004100 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a50      	ldr	r2, [pc, #320]	@ (8004114 <HAL_I2C_MspInit+0x204>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d147      	bne.n	8004068 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003fd8:	f04f 0208 	mov.w	r2, #8
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fea:	f107 0320 	add.w	r3, r7, #32
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f004 fc7c 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8003ffa:	f7ff ff69 	bl	8003ed0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffe:	4b43      	ldr	r3, [pc, #268]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 8004000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004004:	4a41      	ldr	r2, [pc, #260]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 8004006:	f043 0302 	orr.w	r3, r3, #2
 800400a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800400e:	4b3f      	ldr	r3, [pc, #252]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 8004010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800401c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004020:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004024:	2312      	movs	r3, #18
 8004026:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004036:	2304      	movs	r3, #4
 8004038:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800403c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004040:	4619      	mov	r1, r3
 8004042:	4833      	ldr	r0, [pc, #204]	@ (8004110 <HAL_I2C_MspInit+0x200>)
 8004044:	f000 fe8c 	bl	8004d60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004048:	4b30      	ldr	r3, [pc, #192]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 800404a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800404e:	4a2f      	ldr	r2, [pc, #188]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 8004050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004054:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004058:	4b2c      	ldr	r3, [pc, #176]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 800405a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800405e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	693b      	ldr	r3, [r7, #16]
}
 8004066:	e04b      	b.n	8004100 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C4)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <HAL_I2C_MspInit+0x208>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d146      	bne.n	8004100 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004072:	f04f 0210 	mov.w	r2, #16
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004084:	f107 0320 	add.w	r3, r7, #32
 8004088:	4618      	mov	r0, r3
 800408a:	f004 fc2f 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8004094:	f7ff ff1c 	bl	8003ed0 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004098:	4b1c      	ldr	r3, [pc, #112]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 800409a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800409e:	4a1b      	ldr	r2, [pc, #108]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 80040a0:	f043 0308 	orr.w	r3, r3, #8
 80040a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040a8:	4b18      	ldr	r3, [pc, #96]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 80040aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80040b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80040ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040be:	2312      	movs	r3, #18
 80040c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80040d0:	2304      	movs	r3, #4
 80040d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040d6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80040da:	4619      	mov	r1, r3
 80040dc:	480f      	ldr	r0, [pc, #60]	@ (800411c <HAL_I2C_MspInit+0x20c>)
 80040de:	f000 fe3f 	bl	8004d60 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80040e2:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 80040e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040e8:	4a08      	ldr	r2, [pc, #32]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 80040ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80040f2:	4b06      	ldr	r3, [pc, #24]	@ (800410c <HAL_I2C_MspInit+0x1fc>)
 80040f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
}
 8004100:	bf00      	nop
 8004102:	37f8      	adds	r7, #248	@ 0xf8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40005400 	.word	0x40005400
 800410c:	58024400 	.word	0x58024400
 8004110:	58020400 	.word	0x58020400
 8004114:	40005800 	.word	0x40005800
 8004118:	58001c00 	.word	0x58001c00
 800411c:	58020c00 	.word	0x58020c00

08004120 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b0bc      	sub	sp, #240	@ 0xf0
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004138:	f107 0318 	add.w	r3, r7, #24
 800413c:	22c0      	movs	r2, #192	@ 0xc0
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f012 fcc3 	bl	8016acc <memset>
  if(hsd->Instance==SDMMC1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a38      	ldr	r2, [pc, #224]	@ (800422c <HAL_SD_MspInit+0x10c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d169      	bne.n	8004224 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8004150:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800415c:	2300      	movs	r3, #0
 800415e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004160:	f107 0318 	add.w	r3, r7, #24
 8004164:	4618      	mov	r0, r3
 8004166:	f004 fbc1 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8004170:	f7ff feae 	bl	8003ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004174:	4b2e      	ldr	r3, [pc, #184]	@ (8004230 <HAL_SD_MspInit+0x110>)
 8004176:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800417a:	4a2d      	ldr	r2, [pc, #180]	@ (8004230 <HAL_SD_MspInit+0x110>)
 800417c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004180:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004184:	4b2a      	ldr	r3, [pc, #168]	@ (8004230 <HAL_SD_MspInit+0x110>)
 8004186:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800418a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004192:	4b27      	ldr	r3, [pc, #156]	@ (8004230 <HAL_SD_MspInit+0x110>)
 8004194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004198:	4a25      	ldr	r2, [pc, #148]	@ (8004230 <HAL_SD_MspInit+0x110>)
 800419a:	f043 0304 	orr.w	r3, r3, #4
 800419e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041a2:	4b23      	ldr	r3, [pc, #140]	@ (8004230 <HAL_SD_MspInit+0x110>)
 80041a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004230 <HAL_SD_MspInit+0x110>)
 80041b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <HAL_SD_MspInit+0x110>)
 80041b8:	f043 0308 	orr.w	r3, r3, #8
 80041bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004230 <HAL_SD_MspInit+0x110>)
 80041c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80041ce:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80041d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d6:	2302      	movs	r3, #2
 80041d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e2:	2303      	movs	r3, #3
 80041e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80041e8:	230c      	movs	r3, #12
 80041ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80041f2:	4619      	mov	r1, r3
 80041f4:	480f      	ldr	r0, [pc, #60]	@ (8004234 <HAL_SD_MspInit+0x114>)
 80041f6:	f000 fdb3 	bl	8004d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041fa:	2304      	movs	r3, #4
 80041fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420c:	2303      	movs	r3, #3
 800420e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004212:	230c      	movs	r3, #12
 8004214:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004218:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800421c:	4619      	mov	r1, r3
 800421e:	4806      	ldr	r0, [pc, #24]	@ (8004238 <HAL_SD_MspInit+0x118>)
 8004220:	f000 fd9e 	bl	8004d60 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004224:	bf00      	nop
 8004226:	37f0      	adds	r7, #240	@ 0xf0
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	52007000 	.word	0x52007000
 8004230:	58024400 	.word	0x58024400
 8004234:	58020800 	.word	0x58020800
 8004238:	58020c00 	.word	0x58020c00

0800423c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b0bc      	sub	sp, #240	@ 0xf0
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004244:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004254:	f107 0318 	add.w	r3, r7, #24
 8004258:	22c0      	movs	r2, #192	@ 0xc0
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f012 fc35 	bl	8016acc <memset>
  if(hspi->Instance==SPI1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a4c      	ldr	r2, [pc, #304]	@ (8004398 <HAL_SPI_MspInit+0x15c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d146      	bne.n	80042fa <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800426c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8004278:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800427c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800427e:	f107 0318 	add.w	r3, r7, #24
 8004282:	4618      	mov	r0, r3
 8004284:	f004 fb32 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800428e:	f7ff fe1f 	bl	8003ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004292:	4b42      	ldr	r3, [pc, #264]	@ (800439c <HAL_SPI_MspInit+0x160>)
 8004294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004298:	4a40      	ldr	r2, [pc, #256]	@ (800439c <HAL_SPI_MspInit+0x160>)
 800429a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800429e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80042a2:	4b3e      	ldr	r3, [pc, #248]	@ (800439c <HAL_SPI_MspInit+0x160>)
 80042a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b0:	4b3a      	ldr	r3, [pc, #232]	@ (800439c <HAL_SPI_MspInit+0x160>)
 80042b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042b6:	4a39      	ldr	r2, [pc, #228]	@ (800439c <HAL_SPI_MspInit+0x160>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042c0:	4b36      	ldr	r3, [pc, #216]	@ (800439c <HAL_SPI_MspInit+0x160>)
 80042c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80042ce:	23e0      	movs	r3, #224	@ 0xe0
 80042d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d4:	2302      	movs	r3, #2
 80042d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042e6:	2305      	movs	r3, #5
 80042e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80042f0:	4619      	mov	r1, r3
 80042f2:	482b      	ldr	r0, [pc, #172]	@ (80043a0 <HAL_SPI_MspInit+0x164>)
 80042f4:	f000 fd34 	bl	8004d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80042f8:	e049      	b.n	800438e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI4)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a29      	ldr	r2, [pc, #164]	@ (80043a4 <HAL_SPI_MspInit+0x168>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d144      	bne.n	800438e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8004304:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8004310:	2300      	movs	r3, #0
 8004312:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004314:	f107 0318 	add.w	r3, r7, #24
 8004318:	4618      	mov	r0, r3
 800431a:	f004 fae7 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8004324:	f7ff fdd4 	bl	8003ed0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004328:	4b1c      	ldr	r3, [pc, #112]	@ (800439c <HAL_SPI_MspInit+0x160>)
 800432a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800432e:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <HAL_SPI_MspInit+0x160>)
 8004330:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004334:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004338:	4b18      	ldr	r3, [pc, #96]	@ (800439c <HAL_SPI_MspInit+0x160>)
 800433a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800433e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004346:	4b15      	ldr	r3, [pc, #84]	@ (800439c <HAL_SPI_MspInit+0x160>)
 8004348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800434c:	4a13      	ldr	r2, [pc, #76]	@ (800439c <HAL_SPI_MspInit+0x160>)
 800434e:	f043 0310 	orr.w	r3, r3, #16
 8004352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004356:	4b11      	ldr	r3, [pc, #68]	@ (800439c <HAL_SPI_MspInit+0x160>)
 8004358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8004364:	2364      	movs	r3, #100	@ 0x64
 8004366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	2302      	movs	r3, #2
 800436c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004370:	2300      	movs	r3, #0
 8004372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004376:	2300      	movs	r3, #0
 8004378:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800437c:	2305      	movs	r3, #5
 800437e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004382:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004386:	4619      	mov	r1, r3
 8004388:	4807      	ldr	r0, [pc, #28]	@ (80043a8 <HAL_SPI_MspInit+0x16c>)
 800438a:	f000 fce9 	bl	8004d60 <HAL_GPIO_Init>
}
 800438e:	bf00      	nop
 8004390:	37f0      	adds	r7, #240	@ 0xf0
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40013000 	.word	0x40013000
 800439c:	58024400 	.word	0x58024400
 80043a0:	58020000 	.word	0x58020000
 80043a4:	40013400 	.word	0x40013400
 80043a8:	58021000 	.word	0x58021000

080043ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b0ba      	sub	sp, #232	@ 0xe8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	609a      	str	r2, [r3, #8]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043c4:	f107 0310 	add.w	r3, r7, #16
 80043c8:	22c0      	movs	r2, #192	@ 0xc0
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f012 fb7d 	bl	8016acc <memset>
  if(huart->Instance==USART2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a26      	ldr	r2, [pc, #152]	@ (8004470 <HAL_UART_MspInit+0xc4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d145      	bne.n	8004468 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80043dc:	f04f 0202 	mov.w	r2, #2
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043ee:	f107 0310 	add.w	r3, r7, #16
 80043f2:	4618      	mov	r0, r3
 80043f4:	f004 fa7a 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80043fe:	f7ff fd67 	bl	8003ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004402:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <HAL_UART_MspInit+0xc8>)
 8004404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004408:	4a1a      	ldr	r2, [pc, #104]	@ (8004474 <HAL_UART_MspInit+0xc8>)
 800440a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800440e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004412:	4b18      	ldr	r3, [pc, #96]	@ (8004474 <HAL_UART_MspInit+0xc8>)
 8004414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004420:	4b14      	ldr	r3, [pc, #80]	@ (8004474 <HAL_UART_MspInit+0xc8>)
 8004422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004426:	4a13      	ldr	r2, [pc, #76]	@ (8004474 <HAL_UART_MspInit+0xc8>)
 8004428:	f043 0308 	orr.w	r3, r3, #8
 800442c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004430:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <HAL_UART_MspInit+0xc8>)
 8004432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800443e:	2360      	movs	r3, #96	@ 0x60
 8004440:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004444:	2302      	movs	r3, #2
 8004446:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004450:	2300      	movs	r3, #0
 8004452:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004456:	2307      	movs	r3, #7
 8004458:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800445c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004460:	4619      	mov	r1, r3
 8004462:	4805      	ldr	r0, [pc, #20]	@ (8004478 <HAL_UART_MspInit+0xcc>)
 8004464:	f000 fc7c 	bl	8004d60 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004468:	bf00      	nop
 800446a:	37e8      	adds	r7, #232	@ 0xe8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40004400 	.word	0x40004400
 8004474:	58024400 	.word	0x58024400
 8004478:	58020c00 	.word	0x58020c00

0800447c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b0bc      	sub	sp, #240	@ 0xf0
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004484:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004494:	f107 0318 	add.w	r3, r7, #24
 8004498:	22c0      	movs	r2, #192	@ 0xc0
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f012 fb15 	bl	8016acc <memset>
  if(husart->Instance==USART3)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a39      	ldr	r2, [pc, #228]	@ (800458c <HAL_USART_MspInit+0x110>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d16b      	bne.n	8004584 <HAL_USART_MspInit+0x108>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80044ac:	f04f 0202 	mov.w	r2, #2
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80044b8:	2300      	movs	r3, #0
 80044ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044be:	f107 0318 	add.w	r3, r7, #24
 80044c2:	4618      	mov	r0, r3
 80044c4:	f004 fa12 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 80044ce:	f7ff fcff 	bl	8003ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80044d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004590 <HAL_USART_MspInit+0x114>)
 80044d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004590 <HAL_USART_MspInit+0x114>)
 80044da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80044e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004590 <HAL_USART_MspInit+0x114>)
 80044e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f0:	4b27      	ldr	r3, [pc, #156]	@ (8004590 <HAL_USART_MspInit+0x114>)
 80044f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044f6:	4a26      	ldr	r2, [pc, #152]	@ (8004590 <HAL_USART_MspInit+0x114>)
 80044f8:	f043 0302 	orr.w	r3, r3, #2
 80044fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004500:	4b23      	ldr	r3, [pc, #140]	@ (8004590 <HAL_USART_MspInit+0x114>)
 8004502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800450e:	4b20      	ldr	r3, [pc, #128]	@ (8004590 <HAL_USART_MspInit+0x114>)
 8004510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004514:	4a1e      	ldr	r2, [pc, #120]	@ (8004590 <HAL_USART_MspInit+0x114>)
 8004516:	f043 0308 	orr.w	r3, r3, #8
 800451a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800451e:	4b1c      	ldr	r3, [pc, #112]	@ (8004590 <HAL_USART_MspInit+0x114>)
 8004520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800452c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004530:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004534:	2302      	movs	r3, #2
 8004536:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004540:	2300      	movs	r3, #0
 8004542:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004546:	2307      	movs	r3, #7
 8004548:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800454c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004550:	4619      	mov	r1, r3
 8004552:	4810      	ldr	r0, [pc, #64]	@ (8004594 <HAL_USART_MspInit+0x118>)
 8004554:	f000 fc04 	bl	8004d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8004558:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 800455c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004560:	2302      	movs	r3, #2
 8004562:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800456c:	2300      	movs	r3, #0
 800456e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004572:	2307      	movs	r3, #7
 8004574:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004578:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800457c:	4619      	mov	r1, r3
 800457e:	4806      	ldr	r0, [pc, #24]	@ (8004598 <HAL_USART_MspInit+0x11c>)
 8004580:	f000 fbee 	bl	8004d60 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004584:	bf00      	nop
 8004586:	37f0      	adds	r7, #240	@ 0xf0
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40004800 	.word	0x40004800
 8004590:	58024400 	.word	0x58024400
 8004594:	58020400 	.word	0x58020400
 8004598:	58020c00 	.word	0x58020c00

0800459c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80045a0:	f004 f988 	bl	80088b4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <NMI_Handler+0x8>

080045a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <HardFault_Handler+0x4>

080045b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045b4:	bf00      	nop
 80045b6:	e7fd      	b.n	80045b4 <MemManage_Handler+0x4>

080045b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045bc:	bf00      	nop
 80045be:	e7fd      	b.n	80045bc <BusFault_Handler+0x4>

080045c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045c4:	bf00      	nop
 80045c6:	e7fd      	b.n	80045c4 <UsageFault_Handler+0x4>

080045c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045cc:	bf00      	nop
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045d6:	b480      	push	{r7}
 80045d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045da:	bf00      	nop
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045f6:	f000 f9db 	bl	80049b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004604:	4802      	ldr	r0, [pc, #8]	@ (8004610 <OTG_FS_IRQHandler+0x10>)
 8004606:	f001 ff8b 	bl	8006520 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	24000ecc 	.word	0x24000ecc

08004614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return 1;
 8004618:	2301      	movs	r3, #1
}
 800461a:	4618      	mov	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <_kill>:

int _kill(int pid, int sig)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800462e:	f012 fa9f 	bl	8016b70 <__errno>
 8004632:	4603      	mov	r3, r0
 8004634:	2216      	movs	r2, #22
 8004636:	601a      	str	r2, [r3, #0]
  return -1;
 8004638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <_exit>:

void _exit (int status)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800464c:	f04f 31ff 	mov.w	r1, #4294967295
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ffe7 	bl	8004624 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <_exit+0x12>

0800465a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e00a      	b.n	8004682 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800466c:	f3af 8000 	nop.w
 8004670:	4601      	mov	r1, r0
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	60ba      	str	r2, [r7, #8]
 8004678:	b2ca      	uxtb	r2, r1
 800467a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	429a      	cmp	r2, r3
 8004688:	dbf0      	blt.n	800466c <_read+0x12>
  }

  return len;
 800468a:	687b      	ldr	r3, [r7, #4]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046bc:	605a      	str	r2, [r3, #4]
  return 0;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <_isatty>:

int _isatty(int file)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046d4:	2301      	movs	r3, #1
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004704:	4a14      	ldr	r2, [pc, #80]	@ (8004758 <_sbrk+0x5c>)
 8004706:	4b15      	ldr	r3, [pc, #84]	@ (800475c <_sbrk+0x60>)
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004710:	4b13      	ldr	r3, [pc, #76]	@ (8004760 <_sbrk+0x64>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004718:	4b11      	ldr	r3, [pc, #68]	@ (8004760 <_sbrk+0x64>)
 800471a:	4a12      	ldr	r2, [pc, #72]	@ (8004764 <_sbrk+0x68>)
 800471c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800471e:	4b10      	ldr	r3, [pc, #64]	@ (8004760 <_sbrk+0x64>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	429a      	cmp	r2, r3
 800472a:	d207      	bcs.n	800473c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800472c:	f012 fa20 	bl	8016b70 <__errno>
 8004730:	4603      	mov	r3, r0
 8004732:	220c      	movs	r2, #12
 8004734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
 800473a:	e009      	b.n	8004750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800473c:	4b08      	ldr	r3, [pc, #32]	@ (8004760 <_sbrk+0x64>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004742:	4b07      	ldr	r3, [pc, #28]	@ (8004760 <_sbrk+0x64>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	4a05      	ldr	r2, [pc, #20]	@ (8004760 <_sbrk+0x64>)
 800474c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800474e:	68fb      	ldr	r3, [r7, #12]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	24080000 	.word	0x24080000
 800475c:	00000400 	.word	0x00000400
 8004760:	240009d0 	.word	0x240009d0
 8004764:	24001778 	.word	0x24001778

08004768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800476c:	4b37      	ldr	r3, [pc, #220]	@ (800484c <SystemInit+0xe4>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	4a36      	ldr	r2, [pc, #216]	@ (800484c <SystemInit+0xe4>)
 8004774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800477c:	4b34      	ldr	r3, [pc, #208]	@ (8004850 <SystemInit+0xe8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	2b06      	cmp	r3, #6
 8004786:	d807      	bhi.n	8004798 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004788:	4b31      	ldr	r3, [pc, #196]	@ (8004850 <SystemInit+0xe8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f023 030f 	bic.w	r3, r3, #15
 8004790:	4a2f      	ldr	r2, [pc, #188]	@ (8004850 <SystemInit+0xe8>)
 8004792:	f043 0307 	orr.w	r3, r3, #7
 8004796:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004798:	4b2e      	ldr	r3, [pc, #184]	@ (8004854 <SystemInit+0xec>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2d      	ldr	r2, [pc, #180]	@ (8004854 <SystemInit+0xec>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004854 <SystemInit+0xec>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80047aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004854 <SystemInit+0xec>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4929      	ldr	r1, [pc, #164]	@ (8004854 <SystemInit+0xec>)
 80047b0:	4b29      	ldr	r3, [pc, #164]	@ (8004858 <SystemInit+0xf0>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80047b6:	4b26      	ldr	r3, [pc, #152]	@ (8004850 <SystemInit+0xe8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80047c2:	4b23      	ldr	r3, [pc, #140]	@ (8004850 <SystemInit+0xe8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 030f 	bic.w	r3, r3, #15
 80047ca:	4a21      	ldr	r2, [pc, #132]	@ (8004850 <SystemInit+0xe8>)
 80047cc:	f043 0307 	orr.w	r3, r3, #7
 80047d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80047d2:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <SystemInit+0xec>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80047d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004854 <SystemInit+0xec>)
 80047da:	2200      	movs	r2, #0
 80047dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80047de:	4b1d      	ldr	r3, [pc, #116]	@ (8004854 <SystemInit+0xec>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80047e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004854 <SystemInit+0xec>)
 80047e6:	4a1d      	ldr	r2, [pc, #116]	@ (800485c <SystemInit+0xf4>)
 80047e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80047ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004854 <SystemInit+0xec>)
 80047ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004860 <SystemInit+0xf8>)
 80047ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80047f0:	4b18      	ldr	r3, [pc, #96]	@ (8004854 <SystemInit+0xec>)
 80047f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004864 <SystemInit+0xfc>)
 80047f4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80047f6:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <SystemInit+0xec>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80047fc:	4b15      	ldr	r3, [pc, #84]	@ (8004854 <SystemInit+0xec>)
 80047fe:	4a19      	ldr	r2, [pc, #100]	@ (8004864 <SystemInit+0xfc>)
 8004800:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004802:	4b14      	ldr	r3, [pc, #80]	@ (8004854 <SystemInit+0xec>)
 8004804:	2200      	movs	r2, #0
 8004806:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004808:	4b12      	ldr	r3, [pc, #72]	@ (8004854 <SystemInit+0xec>)
 800480a:	4a16      	ldr	r2, [pc, #88]	@ (8004864 <SystemInit+0xfc>)
 800480c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800480e:	4b11      	ldr	r3, [pc, #68]	@ (8004854 <SystemInit+0xec>)
 8004810:	2200      	movs	r2, #0
 8004812:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004814:	4b0f      	ldr	r3, [pc, #60]	@ (8004854 <SystemInit+0xec>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0e      	ldr	r2, [pc, #56]	@ (8004854 <SystemInit+0xec>)
 800481a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800481e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004820:	4b0c      	ldr	r3, [pc, #48]	@ (8004854 <SystemInit+0xec>)
 8004822:	2200      	movs	r2, #0
 8004824:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004826:	4b10      	ldr	r3, [pc, #64]	@ (8004868 <SystemInit+0x100>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b10      	ldr	r3, [pc, #64]	@ (800486c <SystemInit+0x104>)
 800482c:	4013      	ands	r3, r2
 800482e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004832:	d202      	bcs.n	800483a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004834:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <SystemInit+0x108>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800483a:	4b0e      	ldr	r3, [pc, #56]	@ (8004874 <SystemInit+0x10c>)
 800483c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004840:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004842:	bf00      	nop
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	e000ed00 	.word	0xe000ed00
 8004850:	52002000 	.word	0x52002000
 8004854:	58024400 	.word	0x58024400
 8004858:	eaf6ed7f 	.word	0xeaf6ed7f
 800485c:	02020200 	.word	0x02020200
 8004860:	01ff0000 	.word	0x01ff0000
 8004864:	01010280 	.word	0x01010280
 8004868:	5c001000 	.word	0x5c001000
 800486c:	ffff0000 	.word	0xffff0000
 8004870:	51008108 	.word	0x51008108
 8004874:	52004000 	.word	0x52004000

08004878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004878:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80048b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800487c:	f7ff ff74 	bl	8004768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004880:	480c      	ldr	r0, [pc, #48]	@ (80048b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004882:	490d      	ldr	r1, [pc, #52]	@ (80048b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004884:	4a0d      	ldr	r2, [pc, #52]	@ (80048bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004888:	e002      	b.n	8004890 <LoopCopyDataInit>

0800488a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800488a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800488c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800488e:	3304      	adds	r3, #4

08004890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004894:	d3f9      	bcc.n	800488a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004896:	4a0a      	ldr	r2, [pc, #40]	@ (80048c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004898:	4c0a      	ldr	r4, [pc, #40]	@ (80048c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800489a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800489c:	e001      	b.n	80048a2 <LoopFillZerobss>

0800489e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800489e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048a0:	3204      	adds	r2, #4

080048a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048a4:	d3fb      	bcc.n	800489e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048a6:	f012 f969 	bl	8016b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048aa:	f7fe fee2 	bl	8003672 <main>
  bx  lr
 80048ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80048b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80048b8:	240002f0 	.word	0x240002f0
  ldr r2, =_sidata
 80048bc:	0801ae38 	.word	0x0801ae38
  ldr r2, =_sbss
 80048c0:	240002f0 	.word	0x240002f0
  ldr r4, =_ebss
 80048c4:	24001774 	.word	0x24001774

080048c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048c8:	e7fe      	b.n	80048c8 <ADC3_IRQHandler>
	...

080048cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048d2:	2003      	movs	r0, #3
 80048d4:	f000 f98c 	bl	8004bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048d8:	f003 fe16 	bl	8008508 <HAL_RCC_GetSysClockFreq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <HAL_Init+0x68>)
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	4913      	ldr	r1, [pc, #76]	@ (8004938 <HAL_Init+0x6c>)
 80048ea:	5ccb      	ldrb	r3, [r1, r3]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
 80048f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004934 <HAL_Init+0x68>)
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004938 <HAL_Init+0x6c>)
 8004900:	5cd3      	ldrb	r3, [r2, r3]
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
 800490c:	4a0b      	ldr	r2, [pc, #44]	@ (800493c <HAL_Init+0x70>)
 800490e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004910:	4a0b      	ldr	r2, [pc, #44]	@ (8004940 <HAL_Init+0x74>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004916:	200f      	movs	r0, #15
 8004918:	f000 f814 	bl	8004944 <HAL_InitTick>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e002      	b.n	800492c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004926:	f7ff fad9 	bl	8003edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	58024400 	.word	0x58024400
 8004938:	0801917c 	.word	0x0801917c
 800493c:	24000028 	.word	0x24000028
 8004940:	24000024 	.word	0x24000024

08004944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800494c:	4b15      	ldr	r3, [pc, #84]	@ (80049a4 <HAL_InitTick+0x60>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e021      	b.n	800499c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004958:	4b13      	ldr	r3, [pc, #76]	@ (80049a8 <HAL_InitTick+0x64>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <HAL_InitTick+0x60>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	4619      	mov	r1, r3
 8004962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004966:	fbb3 f3f1 	udiv	r3, r3, r1
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f971 	bl	8004c56 <HAL_SYSTICK_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e00e      	b.n	800499c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b0f      	cmp	r3, #15
 8004982:	d80a      	bhi.n	800499a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004984:	2200      	movs	r2, #0
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	f000 f93b 	bl	8004c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004990:	4a06      	ldr	r2, [pc, #24]	@ (80049ac <HAL_InitTick+0x68>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e000      	b.n	800499c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	24000030 	.word	0x24000030
 80049a8:	24000024 	.word	0x24000024
 80049ac:	2400002c 	.word	0x2400002c

080049b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80049b4:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <HAL_IncTick+0x20>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <HAL_IncTick+0x24>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4413      	add	r3, r2
 80049c0:	4a04      	ldr	r2, [pc, #16]	@ (80049d4 <HAL_IncTick+0x24>)
 80049c2:	6013      	str	r3, [r2, #0]
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	24000030 	.word	0x24000030
 80049d4:	240009d4 	.word	0x240009d4

080049d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return uwTick;
 80049dc:	4b03      	ldr	r3, [pc, #12]	@ (80049ec <HAL_GetTick+0x14>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	240009d4 	.word	0x240009d4

080049f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049f8:	f7ff ffee 	bl	80049d8 <HAL_GetTick>
 80049fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d005      	beq.n	8004a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a34 <HAL_Delay+0x44>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a16:	bf00      	nop
 8004a18:	f7ff ffde 	bl	80049d8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d8f7      	bhi.n	8004a18 <HAL_Delay+0x28>
  {
  }
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	24000030 	.word	0x24000030

08004a38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004a3c:	4b03      	ldr	r3, [pc, #12]	@ (8004a4c <HAL_GetREVID+0x14>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	0c1b      	lsrs	r3, r3, #16
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	5c001000 	.word	0x5c001000

08004a50 <__NVIC_SetPriorityGrouping>:
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a60:	4b0b      	ldr	r3, [pc, #44]	@ (8004a90 <__NVIC_SetPriorityGrouping+0x40>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a78:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <__NVIC_SetPriorityGrouping+0x44>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a7e:	4a04      	ldr	r2, [pc, #16]	@ (8004a90 <__NVIC_SetPriorityGrouping+0x40>)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	60d3      	str	r3, [r2, #12]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	e000ed00 	.word	0xe000ed00
 8004a94:	05fa0000 	.word	0x05fa0000

08004a98 <__NVIC_GetPriorityGrouping>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a9c:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	f003 0307 	and.w	r3, r3, #7
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <__NVIC_EnableIRQ>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	db0b      	blt.n	8004ade <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	f003 021f 	and.w	r2, r3, #31
 8004acc:	4907      	ldr	r1, [pc, #28]	@ (8004aec <__NVIC_EnableIRQ+0x38>)
 8004ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8004ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	e000e100 	.word	0xe000e100

08004af0 <__NVIC_SetPriority>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	6039      	str	r1, [r7, #0]
 8004afa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	db0a      	blt.n	8004b1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	490c      	ldr	r1, [pc, #48]	@ (8004b3c <__NVIC_SetPriority+0x4c>)
 8004b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b0e:	0112      	lsls	r2, r2, #4
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	440b      	add	r3, r1
 8004b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b18:	e00a      	b.n	8004b30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	4908      	ldr	r1, [pc, #32]	@ (8004b40 <__NVIC_SetPriority+0x50>)
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	3b04      	subs	r3, #4
 8004b28:	0112      	lsls	r2, r2, #4
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	761a      	strb	r2, [r3, #24]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	e000e100 	.word	0xe000e100
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <NVIC_EncodePriority>:
{
 8004b44:	b480      	push	{r7}
 8004b46:	b089      	sub	sp, #36	@ 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f1c3 0307 	rsb	r3, r3, #7
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	bf28      	it	cs
 8004b62:	2304      	movcs	r3, #4
 8004b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	2b06      	cmp	r3, #6
 8004b6c:	d902      	bls.n	8004b74 <NVIC_EncodePriority+0x30>
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3b03      	subs	r3, #3
 8004b72:	e000      	b.n	8004b76 <NVIC_EncodePriority+0x32>
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43da      	mvns	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	401a      	ands	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	43d9      	mvns	r1, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b9c:	4313      	orrs	r3, r2
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3724      	adds	r7, #36	@ 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <SysTick_Config>:
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bbc:	d301      	bcc.n	8004bc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e00f      	b.n	8004be2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bec <SysTick_Config+0x40>)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bca:	210f      	movs	r1, #15
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd0:	f7ff ff8e 	bl	8004af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <SysTick_Config+0x40>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bda:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <SysTick_Config+0x40>)
 8004bdc:	2207      	movs	r2, #7
 8004bde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	e000e010 	.word	0xe000e010

08004bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ff29 	bl	8004a50 <__NVIC_SetPriorityGrouping>
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c14:	f7ff ff40 	bl	8004a98 <__NVIC_GetPriorityGrouping>
 8004c18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f7ff ff90 	bl	8004b44 <NVIC_EncodePriority>
 8004c24:	4602      	mov	r2, r0
 8004c26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff5f 	bl	8004af0 <__NVIC_SetPriority>
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	4603      	mov	r3, r0
 8004c42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff33 	bl	8004ab4 <__NVIC_EnableIRQ>
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ffa4 	bl	8004bac <SysTick_Config>
 8004c64:	4603      	mov	r3, r0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004c74:	f3bf 8f5f 	dmb	sy
}
 8004c78:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004c7a:	4b07      	ldr	r3, [pc, #28]	@ (8004c98 <HAL_MPU_Disable+0x28>)
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	4a06      	ldr	r2, [pc, #24]	@ (8004c98 <HAL_MPU_Disable+0x28>)
 8004c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c84:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004c86:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <HAL_MPU_Disable+0x2c>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	605a      	str	r2, [r3, #4]
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	e000ed00 	.word	0xe000ed00
 8004c9c:	e000ed90 	.word	0xe000ed90

08004ca0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8004cd8 <HAL_MPU_Enable+0x38>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <HAL_MPU_Enable+0x3c>)
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	4a09      	ldr	r2, [pc, #36]	@ (8004cdc <HAL_MPU_Enable+0x3c>)
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cbc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004cbe:	f3bf 8f4f 	dsb	sy
}
 8004cc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cc4:	f3bf 8f6f 	isb	sy
}
 8004cc8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	e000ed90 	.word	0xe000ed90
 8004cdc:	e000ed00 	.word	0xe000ed00

08004ce0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	785a      	ldrb	r2, [r3, #1]
 8004cec:	4b1b      	ldr	r3, [pc, #108]	@ (8004d5c <HAL_MPU_ConfigRegion+0x7c>)
 8004cee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d5c <HAL_MPU_ConfigRegion+0x7c>)
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	4a19      	ldr	r2, [pc, #100]	@ (8004d5c <HAL_MPU_ConfigRegion+0x7c>)
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004cfc:	4a17      	ldr	r2, [pc, #92]	@ (8004d5c <HAL_MPU_ConfigRegion+0x7c>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	7b1b      	ldrb	r3, [r3, #12]
 8004d08:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	7adb      	ldrb	r3, [r3, #11]
 8004d0e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	7a9b      	ldrb	r3, [r3, #10]
 8004d16:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004d18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7b5b      	ldrb	r3, [r3, #13]
 8004d1e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004d20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7b9b      	ldrb	r3, [r3, #14]
 8004d26:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004d28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	7bdb      	ldrb	r3, [r3, #15]
 8004d2e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004d30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7a5b      	ldrb	r3, [r3, #9]
 8004d36:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004d38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	7a1b      	ldrb	r3, [r3, #8]
 8004d3e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004d40:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	7812      	ldrb	r2, [r2, #0]
 8004d46:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d48:	4a04      	ldr	r2, [pc, #16]	@ (8004d5c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004d4a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d4c:	6113      	str	r3, [r2, #16]
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	e000ed90 	.word	0xe000ed90

08004d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b089      	sub	sp, #36	@ 0x24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d6e:	4b89      	ldr	r3, [pc, #548]	@ (8004f94 <HAL_GPIO_Init+0x234>)
 8004d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d72:	e194      	b.n	800509e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	2101      	movs	r1, #1
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d80:	4013      	ands	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8186 	beq.w	8005098 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d005      	beq.n	8004da4 <HAL_GPIO_Init+0x44>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d130      	bne.n	8004e06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2203      	movs	r2, #3
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dda:	2201      	movs	r2, #1
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43db      	mvns	r3, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4013      	ands	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	091b      	lsrs	r3, r3, #4
 8004df0:	f003 0201 	and.w	r2, r3, #1
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d017      	beq.n	8004e42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d123      	bne.n	8004e96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	08da      	lsrs	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3208      	adds	r2, #8
 8004e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	220f      	movs	r2, #15
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	08da      	lsrs	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3208      	adds	r2, #8
 8004e90:	69b9      	ldr	r1, [r7, #24]
 8004e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 0203 	and.w	r2, r3, #3
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80e0 	beq.w	8005098 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8004f98 <HAL_GPIO_Init+0x238>)
 8004eda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ede:	4a2e      	ldr	r2, [pc, #184]	@ (8004f98 <HAL_GPIO_Init+0x238>)
 8004ee0:	f043 0302 	orr.w	r3, r3, #2
 8004ee4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f98 <HAL_GPIO_Init+0x238>)
 8004eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ef6:	4a29      	ldr	r2, [pc, #164]	@ (8004f9c <HAL_GPIO_Init+0x23c>)
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	089b      	lsrs	r3, r3, #2
 8004efc:	3302      	adds	r3, #2
 8004efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	220f      	movs	r2, #15
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a20      	ldr	r2, [pc, #128]	@ (8004fa0 <HAL_GPIO_Init+0x240>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d052      	beq.n	8004fc8 <HAL_GPIO_Init+0x268>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa4 <HAL_GPIO_Init+0x244>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d031      	beq.n	8004f8e <HAL_GPIO_Init+0x22e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa8 <HAL_GPIO_Init+0x248>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02b      	beq.n	8004f8a <HAL_GPIO_Init+0x22a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1d      	ldr	r2, [pc, #116]	@ (8004fac <HAL_GPIO_Init+0x24c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d025      	beq.n	8004f86 <HAL_GPIO_Init+0x226>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb0 <HAL_GPIO_Init+0x250>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01f      	beq.n	8004f82 <HAL_GPIO_Init+0x222>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb4 <HAL_GPIO_Init+0x254>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d019      	beq.n	8004f7e <HAL_GPIO_Init+0x21e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb8 <HAL_GPIO_Init+0x258>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <HAL_GPIO_Init+0x21a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <HAL_GPIO_Init+0x25c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00d      	beq.n	8004f76 <HAL_GPIO_Init+0x216>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a18      	ldr	r2, [pc, #96]	@ (8004fc0 <HAL_GPIO_Init+0x260>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <HAL_GPIO_Init+0x212>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a17      	ldr	r2, [pc, #92]	@ (8004fc4 <HAL_GPIO_Init+0x264>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <HAL_GPIO_Init+0x20e>
 8004f6a:	2309      	movs	r3, #9
 8004f6c:	e02d      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f6e:	230a      	movs	r3, #10
 8004f70:	e02b      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f72:	2308      	movs	r3, #8
 8004f74:	e029      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f76:	2307      	movs	r3, #7
 8004f78:	e027      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f7a:	2306      	movs	r3, #6
 8004f7c:	e025      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f7e:	2305      	movs	r3, #5
 8004f80:	e023      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f82:	2304      	movs	r3, #4
 8004f84:	e021      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f86:	2303      	movs	r3, #3
 8004f88:	e01f      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e01d      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e01b      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f92:	bf00      	nop
 8004f94:	58000080 	.word	0x58000080
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	58000400 	.word	0x58000400
 8004fa0:	58020000 	.word	0x58020000
 8004fa4:	58020400 	.word	0x58020400
 8004fa8:	58020800 	.word	0x58020800
 8004fac:	58020c00 	.word	0x58020c00
 8004fb0:	58021000 	.word	0x58021000
 8004fb4:	58021400 	.word	0x58021400
 8004fb8:	58021800 	.word	0x58021800
 8004fbc:	58021c00 	.word	0x58021c00
 8004fc0:	58022000 	.word	0x58022000
 8004fc4:	58022400 	.word	0x58022400
 8004fc8:	2300      	movs	r3, #0
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	f002 0203 	and.w	r2, r2, #3
 8004fd0:	0092      	lsls	r2, r2, #2
 8004fd2:	4093      	lsls	r3, r2
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fda:	4938      	ldr	r1, [pc, #224]	@ (80050bc <HAL_GPIO_Init+0x35c>)
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800500e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	43db      	mvns	r3, r3
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800503c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f ae63 	bne.w	8004d74 <HAL_GPIO_Init+0x14>
  }
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	3724      	adds	r7, #36	@ 0x24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	58000400 	.word	0x58000400

080050c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	887b      	ldrh	r3, [r7, #2]
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
 80050dc:	e001      	b.n	80050e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	807b      	strh	r3, [r7, #2]
 80050fc:	4613      	mov	r3, r2
 80050fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005100:	787b      	ldrb	r3, [r7, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005106:	887a      	ldrh	r2, [r7, #2]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800510c:	e003      	b.n	8005116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	041a      	lsls	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	619a      	str	r2, [r3, #24]
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e08b      	b.n	800524e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fe fee0 	bl	8003f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2224      	movs	r2, #36	@ 0x24
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005174:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005184:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d107      	bne.n	800519e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	e006      	b.n	80051ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d108      	bne.n	80051c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051c2:	605a      	str	r2, [r3, #4]
 80051c4:	e007      	b.n	80051d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6859      	ldr	r1, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005258 <HAL_I2C_Init+0x134>)
 80051e2:	430b      	orrs	r3, r1
 80051e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	02008000 	.word	0x02008000

0800525c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	461a      	mov	r2, r3
 8005268:	460b      	mov	r3, r1
 800526a:	817b      	strh	r3, [r7, #10]
 800526c:	4613      	mov	r3, r2
 800526e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b20      	cmp	r3, #32
 800527a:	f040 80fd 	bne.w	8005478 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_I2C_Master_Transmit+0x30>
 8005288:	2302      	movs	r3, #2
 800528a:	e0f6      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005294:	f7ff fba0 	bl	80049d8 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2319      	movs	r3, #25
 80052a0:	2201      	movs	r2, #1
 80052a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fce0 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0e1      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2221      	movs	r2, #33	@ 0x21
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2210      	movs	r2, #16
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	893a      	ldrh	r2, [r7, #8]
 80052d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2bff      	cmp	r3, #255	@ 0xff
 80052e6:	d906      	bls.n	80052f6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	22ff      	movs	r2, #255	@ 0xff
 80052ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80052ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e007      	b.n	8005306 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005300:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005304:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530a:	2b00      	cmp	r3, #0
 800530c:	d024      	beq.n	8005358 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	781a      	ldrb	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005342:	b2db      	uxtb	r3, r3
 8005344:	3301      	adds	r3, #1
 8005346:	b2da      	uxtb	r2, r3
 8005348:	8979      	ldrh	r1, [r7, #10]
 800534a:	4b4e      	ldr	r3, [pc, #312]	@ (8005484 <HAL_I2C_Master_Transmit+0x228>)
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fedb 	bl	800610c <I2C_TransferConfig>
 8005356:	e066      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535c:	b2da      	uxtb	r2, r3
 800535e:	8979      	ldrh	r1, [r7, #10]
 8005360:	4b48      	ldr	r3, [pc, #288]	@ (8005484 <HAL_I2C_Master_Transmit+0x228>)
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fed0 	bl	800610c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800536c:	e05b      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fcd3 	bl	8005d1e <I2C_WaitOnTXISFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e07b      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d034      	beq.n	8005426 <HAL_I2C_Master_Transmit+0x1ca>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d130      	bne.n	8005426 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	2200      	movs	r2, #0
 80053cc:	2180      	movs	r1, #128	@ 0x80
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 fc4c 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e04d      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2bff      	cmp	r3, #255	@ 0xff
 80053e6:	d90e      	bls.n	8005406 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	22ff      	movs	r2, #255	@ 0xff
 80053ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	8979      	ldrh	r1, [r7, #10]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fe84 	bl	800610c <I2C_TransferConfig>
 8005404:	e00f      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005414:	b2da      	uxtb	r2, r3
 8005416:	8979      	ldrh	r1, [r7, #10]
 8005418:	2300      	movs	r3, #0
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fe73 	bl	800610c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d19e      	bne.n	800536e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	6a39      	ldr	r1, [r7, #32]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fcb9 	bl	8005dac <I2C_WaitOnSTOPFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e01a      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2220      	movs	r2, #32
 800544a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b0c      	ldr	r3, [pc, #48]	@ (8005488 <HAL_I2C_Master_Transmit+0x22c>)
 8005458:	400b      	ands	r3, r1
 800545a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	80002000 	.word	0x80002000
 8005488:	fe00e800 	.word	0xfe00e800

0800548c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	607a      	str	r2, [r7, #4]
 8005496:	461a      	mov	r2, r3
 8005498:	460b      	mov	r3, r1
 800549a:	817b      	strh	r3, [r7, #10]
 800549c:	4613      	mov	r3, r2
 800549e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	f040 80db 	bne.w	8005664 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_I2C_Master_Receive+0x30>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e0d4      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054c4:	f7ff fa88 	bl	80049d8 <HAL_GetTick>
 80054c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2319      	movs	r3, #25
 80054d0:	2201      	movs	r2, #1
 80054d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fbc8 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e0bf      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2222      	movs	r2, #34	@ 0x22
 80054ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2210      	movs	r2, #16
 80054f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	893a      	ldrh	r2, [r7, #8]
 8005506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	2bff      	cmp	r3, #255	@ 0xff
 8005516:	d90e      	bls.n	8005536 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	22ff      	movs	r2, #255	@ 0xff
 800551c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005522:	b2da      	uxtb	r2, r3
 8005524:	8979      	ldrh	r1, [r7, #10]
 8005526:	4b52      	ldr	r3, [pc, #328]	@ (8005670 <HAL_I2C_Master_Receive+0x1e4>)
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fdec 	bl	800610c <I2C_TransferConfig>
 8005534:	e06d      	b.n	8005612 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005544:	b2da      	uxtb	r2, r3
 8005546:	8979      	ldrh	r1, [r7, #10]
 8005548:	4b49      	ldr	r3, [pc, #292]	@ (8005670 <HAL_I2C_Master_Receive+0x1e4>)
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fddb 	bl	800610c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005556:	e05c      	b.n	8005612 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	6a39      	ldr	r1, [r7, #32]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fc69 	bl	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e07c      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d034      	beq.n	8005612 <HAL_I2C_Master_Receive+0x186>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d130      	bne.n	8005612 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2200      	movs	r2, #0
 80055b8:	2180      	movs	r1, #128	@ 0x80
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fb56 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e04d      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2bff      	cmp	r3, #255	@ 0xff
 80055d2:	d90e      	bls.n	80055f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	22ff      	movs	r2, #255	@ 0xff
 80055d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	8979      	ldrh	r1, [r7, #10]
 80055e2:	2300      	movs	r3, #0
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fd8e 	bl	800610c <I2C_TransferConfig>
 80055f0:	e00f      	b.n	8005612 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005600:	b2da      	uxtb	r2, r3
 8005602:	8979      	ldrh	r1, [r7, #10]
 8005604:	2300      	movs	r3, #0
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fd7d 	bl	800610c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d19d      	bne.n	8005558 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	6a39      	ldr	r1, [r7, #32]
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fbc3 	bl	8005dac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e01a      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2220      	movs	r2, #32
 8005636:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <HAL_I2C_Master_Receive+0x1e8>)
 8005644:	400b      	ands	r3, r1
 8005646:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	80002400 	.word	0x80002400
 8005674:	fe00e800 	.word	0xfe00e800

08005678 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	4603      	mov	r3, r0
 8005688:	817b      	strh	r3, [r7, #10]
 800568a:	460b      	mov	r3, r1
 800568c:	813b      	strh	r3, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b20      	cmp	r3, #32
 800569c:	f040 80f9 	bne.w	8005892 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_I2C_Mem_Write+0x34>
 80056a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d105      	bne.n	80056b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0ed      	b.n	8005894 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_I2C_Mem_Write+0x4e>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e0e6      	b.n	8005894 <HAL_I2C_Mem_Write+0x21c>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056ce:	f7ff f983 	bl	80049d8 <HAL_GetTick>
 80056d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	2319      	movs	r3, #25
 80056da:	2201      	movs	r2, #1
 80056dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 fac3 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0d1      	b.n	8005894 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2221      	movs	r2, #33	@ 0x21
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2240      	movs	r2, #64	@ 0x40
 80056fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a3a      	ldr	r2, [r7, #32]
 800570a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005710:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005718:	88f8      	ldrh	r0, [r7, #6]
 800571a:	893a      	ldrh	r2, [r7, #8]
 800571c:	8979      	ldrh	r1, [r7, #10]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	4603      	mov	r3, r0
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f9d3 	bl	8005ad4 <I2C_RequestMemoryWrite>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e0a9      	b.n	8005894 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2bff      	cmp	r3, #255	@ 0xff
 8005748:	d90e      	bls.n	8005768 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	22ff      	movs	r2, #255	@ 0xff
 800574e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005754:	b2da      	uxtb	r2, r3
 8005756:	8979      	ldrh	r1, [r7, #10]
 8005758:	2300      	movs	r3, #0
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fcd3 	bl	800610c <I2C_TransferConfig>
 8005766:	e00f      	b.n	8005788 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005776:	b2da      	uxtb	r2, r3
 8005778:	8979      	ldrh	r1, [r7, #10]
 800577a:	2300      	movs	r3, #0
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fcc2 	bl	800610c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fac6 	bl	8005d1e <I2C_WaitOnTXISFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e07b      	b.n	8005894 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d034      	beq.n	8005840 <HAL_I2C_Mem_Write+0x1c8>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d130      	bne.n	8005840 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	2200      	movs	r2, #0
 80057e6:	2180      	movs	r1, #128	@ 0x80
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fa3f 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e04d      	b.n	8005894 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2bff      	cmp	r3, #255	@ 0xff
 8005800:	d90e      	bls.n	8005820 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	22ff      	movs	r2, #255	@ 0xff
 8005806:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580c:	b2da      	uxtb	r2, r3
 800580e:	8979      	ldrh	r1, [r7, #10]
 8005810:	2300      	movs	r3, #0
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 fc77 	bl	800610c <I2C_TransferConfig>
 800581e:	e00f      	b.n	8005840 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582e:	b2da      	uxtb	r2, r3
 8005830:	8979      	ldrh	r1, [r7, #10]
 8005832:	2300      	movs	r3, #0
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fc66 	bl	800610c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d19e      	bne.n	8005788 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 faac 	bl	8005dac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e01a      	b.n	8005894 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2220      	movs	r2, #32
 8005864:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6859      	ldr	r1, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4b0a      	ldr	r3, [pc, #40]	@ (800589c <HAL_I2C_Mem_Write+0x224>)
 8005872:	400b      	ands	r3, r1
 8005874:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	e000      	b.n	8005894 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005892:	2302      	movs	r3, #2
  }
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	fe00e800 	.word	0xfe00e800

080058a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	4608      	mov	r0, r1
 80058aa:	4611      	mov	r1, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	817b      	strh	r3, [r7, #10]
 80058b2:	460b      	mov	r3, r1
 80058b4:	813b      	strh	r3, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	f040 80fd 	bne.w	8005ac2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <HAL_I2C_Mem_Read+0x34>
 80058ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0f1      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_I2C_Mem_Read+0x4e>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e0ea      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x224>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058f6:	f7ff f86f 	bl	80049d8 <HAL_GetTick>
 80058fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	2319      	movs	r3, #25
 8005902:	2201      	movs	r2, #1
 8005904:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f9af 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0d5      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2222      	movs	r2, #34	@ 0x22
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2240      	movs	r2, #64	@ 0x40
 8005924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a3a      	ldr	r2, [r7, #32]
 8005932:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005938:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005940:	88f8      	ldrh	r0, [r7, #6]
 8005942:	893a      	ldrh	r2, [r7, #8]
 8005944:	8979      	ldrh	r1, [r7, #10]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	4603      	mov	r3, r0
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f913 	bl	8005b7c <I2C_RequestMemoryRead>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0ad      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2bff      	cmp	r3, #255	@ 0xff
 8005970:	d90e      	bls.n	8005990 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	22ff      	movs	r2, #255	@ 0xff
 8005976:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597c:	b2da      	uxtb	r2, r3
 800597e:	8979      	ldrh	r1, [r7, #10]
 8005980:	4b52      	ldr	r3, [pc, #328]	@ (8005acc <HAL_I2C_Mem_Read+0x22c>)
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fbbf 	bl	800610c <I2C_TransferConfig>
 800598e:	e00f      	b.n	80059b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	8979      	ldrh	r1, [r7, #10]
 80059a2:	4b4a      	ldr	r3, [pc, #296]	@ (8005acc <HAL_I2C_Mem_Read+0x22c>)
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fbae 	bl	800610c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b6:	2200      	movs	r2, #0
 80059b8:	2104      	movs	r1, #4
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f956 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e07c      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d034      	beq.n	8005a70 <HAL_I2C_Mem_Read+0x1d0>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d130      	bne.n	8005a70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a14:	2200      	movs	r2, #0
 8005a16:	2180      	movs	r1, #128	@ 0x80
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f927 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e04d      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2bff      	cmp	r3, #255	@ 0xff
 8005a30:	d90e      	bls.n	8005a50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	22ff      	movs	r2, #255	@ 0xff
 8005a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	8979      	ldrh	r1, [r7, #10]
 8005a40:	2300      	movs	r3, #0
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fb5f 	bl	800610c <I2C_TransferConfig>
 8005a4e:	e00f      	b.n	8005a70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	8979      	ldrh	r1, [r7, #10]
 8005a62:	2300      	movs	r3, #0
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 fb4e 	bl	800610c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d19a      	bne.n	80059b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 f994 	bl	8005dac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e01a      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2220      	movs	r2, #32
 8005a94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6859      	ldr	r1, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <HAL_I2C_Mem_Read+0x230>)
 8005aa2:	400b      	ands	r3, r1
 8005aa4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e000      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005ac2:	2302      	movs	r3, #2
  }
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	80002400 	.word	0x80002400
 8005ad0:	fe00e800 	.word	0xfe00e800

08005ad4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	4608      	mov	r0, r1
 8005ade:	4611      	mov	r1, r2
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	817b      	strh	r3, [r7, #10]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	813b      	strh	r3, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	8979      	ldrh	r1, [r7, #10]
 8005af4:	4b20      	ldr	r3, [pc, #128]	@ (8005b78 <I2C_RequestMemoryWrite+0xa4>)
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fb05 	bl	800610c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	69b9      	ldr	r1, [r7, #24]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f909 	bl	8005d1e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e02c      	b.n	8005b70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d105      	bne.n	8005b28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b1c:	893b      	ldrh	r3, [r7, #8]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b26:	e015      	b.n	8005b54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b28:	893b      	ldrh	r3, [r7, #8]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	69b9      	ldr	r1, [r7, #24]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f8ef 	bl	8005d1e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e012      	b.n	8005b70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b4a:	893b      	ldrh	r3, [r7, #8]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2180      	movs	r1, #128	@ 0x80
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f884 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	80002000 	.word	0x80002000

08005b7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	4608      	mov	r0, r1
 8005b86:	4611      	mov	r1, r2
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	817b      	strh	r3, [r7, #10]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	813b      	strh	r3, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	8979      	ldrh	r1, [r7, #10]
 8005b9c:	4b20      	ldr	r3, [pc, #128]	@ (8005c20 <I2C_RequestMemoryRead+0xa4>)
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fab2 	bl	800610c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	69b9      	ldr	r1, [r7, #24]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f8b6 	bl	8005d1e <I2C_WaitOnTXISFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e02c      	b.n	8005c16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d105      	bne.n	8005bce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bc2:	893b      	ldrh	r3, [r7, #8]
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bcc:	e015      	b.n	8005bfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bce:	893b      	ldrh	r3, [r7, #8]
 8005bd0:	0a1b      	lsrs	r3, r3, #8
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	69b9      	ldr	r1, [r7, #24]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f89c 	bl	8005d1e <I2C_WaitOnTXISFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e012      	b.n	8005c16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf0:	893b      	ldrh	r3, [r7, #8]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2200      	movs	r2, #0
 8005c02:	2140      	movs	r1, #64	@ 0x40
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f831 	bl	8005c6c <I2C_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e000      	b.n	8005c16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	80002000 	.word	0x80002000

08005c24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d103      	bne.n	8005c42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d007      	beq.n	8005c60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	619a      	str	r2, [r3, #24]
  }
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c7c:	e03b      	b.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f962 	bl	8005f4c <I2C_IsErrorOccurred>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e041      	b.n	8005d16 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d02d      	beq.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9a:	f7fe fe9d 	bl	80049d8 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d122      	bne.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d113      	bne.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd2:	f043 0220 	orr.w	r2, r3, #32
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e00f      	b.n	8005d16 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699a      	ldr	r2, [r3, #24]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	bf0c      	ite	eq
 8005d06:	2301      	moveq	r3, #1
 8005d08:	2300      	movne	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d0b4      	beq.n	8005c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d2a:	e033      	b.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f90b 	bl	8005f4c <I2C_IsErrorOccurred>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e031      	b.n	8005da4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d025      	beq.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d48:	f7fe fe46 	bl	80049d8 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d302      	bcc.n	8005d5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11a      	bne.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d013      	beq.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d70:	f043 0220 	orr.w	r2, r3, #32
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e007      	b.n	8005da4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d1c4      	bne.n	8005d2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005db8:	e02f      	b.n	8005e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f8c4 	bl	8005f4c <I2C_IsErrorOccurred>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e02d      	b.n	8005e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dce:	f7fe fe03 	bl	80049d8 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11a      	bne.n	8005e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d013      	beq.n	8005e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df6:	f043 0220 	orr.w	r2, r3, #32
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e007      	b.n	8005e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d1c8      	bne.n	8005dba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005e44:	e071      	b.n	8005f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f87e 	bl	8005f4c <I2C_IsErrorOccurred>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d13b      	bne.n	8005ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d138      	bne.n	8005ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d105      	bne.n	8005e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d121      	bne.n	8005eda <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2210      	movs	r2, #16
 8005e9c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6859      	ldr	r1, [r3, #4]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4b24      	ldr	r3, [pc, #144]	@ (8005f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005eb8:	400b      	ands	r3, r1
 8005eba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	75fb      	strb	r3, [r7, #23]
 8005ed8:	e002      	b.n	8005ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005ee0:	f7fe fd7a 	bl	80049d8 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d302      	bcc.n	8005ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d119      	bne.n	8005f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d116      	bne.n	8005f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d00f      	beq.n	8005f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d002      	beq.n	8005f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d083      	beq.n	8005e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	fe00e800 	.word	0xfe00e800

08005f4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	@ 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d068      	beq.n	800604a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2210      	movs	r2, #16
 8005f7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f80:	e049      	b.n	8006016 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d045      	beq.n	8006016 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f8a:	f7fe fd25 	bl	80049d8 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <I2C_IsErrorOccurred+0x54>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d13a      	bne.n	8006016 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005faa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fc2:	d121      	bne.n	8006008 <I2C_IsErrorOccurred+0xbc>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fca:	d01d      	beq.n	8006008 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005fcc:	7cfb      	ldrb	r3, [r7, #19]
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d01a      	beq.n	8006008 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fe0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005fe2:	f7fe fcf9 	bl	80049d8 <HAL_GetTick>
 8005fe6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fe8:	e00e      	b.n	8006008 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005fea:	f7fe fcf5 	bl	80049d8 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b19      	cmp	r3, #25
 8005ff6:	d907      	bls.n	8006008 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	f043 0320 	orr.w	r3, r3, #32
 8005ffe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006006:	e006      	b.n	8006016 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b20      	cmp	r3, #32
 8006014:	d1e9      	bne.n	8005fea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b20      	cmp	r3, #32
 8006022:	d003      	beq.n	800602c <I2C_IsErrorOccurred+0xe0>
 8006024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0aa      	beq.n	8005f82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800602c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2220      	movs	r2, #32
 800603a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	f043 0304 	orr.w	r3, r3, #4
 8006042:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800606c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	f043 0308 	orr.w	r3, r3, #8
 8006084:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800608e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00b      	beq.n	80060b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80060b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01c      	beq.n	80060fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff fdaf 	bl	8005c24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <I2C_IsErrorOccurred+0x1bc>)
 80060d2:	400b      	ands	r3, r1
 80060d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	431a      	orrs	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80060fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3728      	adds	r7, #40	@ 0x28
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	fe00e800 	.word	0xfe00e800

0800610c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	817b      	strh	r3, [r7, #10]
 800611a:	4613      	mov	r3, r2
 800611c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800611e:	897b      	ldrh	r3, [r7, #10]
 8006120:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006124:	7a7b      	ldrb	r3, [r7, #9]
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800612c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	4313      	orrs	r3, r2
 8006136:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800613a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	0d5b      	lsrs	r3, r3, #21
 8006146:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800614a:	4b08      	ldr	r3, [pc, #32]	@ (800616c <I2C_TransferConfig+0x60>)
 800614c:	430b      	orrs	r3, r1
 800614e:	43db      	mvns	r3, r3
 8006150:	ea02 0103 	and.w	r1, r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	03ff63ff 	.word	0x03ff63ff

08006170 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b20      	cmp	r3, #32
 8006184:	d138      	bne.n	80061f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006190:	2302      	movs	r3, #2
 8006192:	e032      	b.n	80061fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2224      	movs	r2, #36	@ 0x24
 80061a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6819      	ldr	r1, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	e000      	b.n	80061fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
  }
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b20      	cmp	r3, #32
 800621a:	d139      	bne.n	8006290 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006226:	2302      	movs	r3, #2
 8006228:	e033      	b.n	8006292 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2224      	movs	r2, #36	@ 0x24
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006258:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	021b      	lsls	r3, r3, #8
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e000      	b.n	8006292 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006290:	2302      	movs	r3, #2
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b086      	sub	sp, #24
 80062a2:	af02      	add	r7, sp, #8
 80062a4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e0fe      	b.n	80064ae <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f00f fa67 	bl	8015798 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2203      	movs	r2, #3
 80062ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f00a f965 	bl	80105a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	7c1a      	ldrb	r2, [r3, #16]
 80062e4:	f88d 2000 	strb.w	r2, [sp]
 80062e8:	3304      	adds	r3, #4
 80062ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062ec:	f00a f836 	bl	801035c <USB_CoreInit>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2202      	movs	r2, #2
 80062fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e0d5      	b.n	80064ae <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f00a f95d 	bl	80105c8 <USB_SetCurrentMode>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e0c6      	b.n	80064ae <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
 8006324:	e04a      	b.n	80063bc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006326:	7bfa      	ldrb	r2, [r7, #15]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	3315      	adds	r3, #21
 8006336:	2201      	movs	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800633a:	7bfa      	ldrb	r2, [r7, #15]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	3314      	adds	r3, #20
 800634a:	7bfa      	ldrb	r2, [r7, #15]
 800634c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800634e:	7bfa      	ldrb	r2, [r7, #15]
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	b298      	uxth	r0, r3
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	332e      	adds	r3, #46	@ 0x2e
 8006362:	4602      	mov	r2, r0
 8006364:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006366:	7bfa      	ldrb	r2, [r7, #15]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	3318      	adds	r3, #24
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800637a:	7bfa      	ldrb	r2, [r7, #15]
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	331c      	adds	r3, #28
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800638e:	7bfa      	ldrb	r2, [r7, #15]
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	3320      	adds	r3, #32
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80063a2:	7bfa      	ldrb	r2, [r7, #15]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	3324      	adds	r3, #36	@ 0x24
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	3301      	adds	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	791b      	ldrb	r3, [r3, #4]
 80063c0:	7bfa      	ldrb	r2, [r7, #15]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d3af      	bcc.n	8006326 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]
 80063ca:	e044      	b.n	8006456 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80063cc:	7bfa      	ldrb	r2, [r7, #15]
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80063de:	2200      	movs	r2, #0
 80063e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80063e2:	7bfa      	ldrb	r2, [r7, #15]
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80063f4:	7bfa      	ldrb	r2, [r7, #15]
 80063f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063f8:	7bfa      	ldrb	r2, [r7, #15]
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800640a:	2200      	movs	r2, #0
 800640c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800640e:	7bfa      	ldrb	r2, [r7, #15]
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006424:	7bfa      	ldrb	r2, [r7, #15]
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	4613      	mov	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800643a:	7bfa      	ldrb	r2, [r7, #15]
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	3301      	adds	r3, #1
 8006454:	73fb      	strb	r3, [r7, #15]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	791b      	ldrb	r3, [r3, #4]
 800645a:	7bfa      	ldrb	r2, [r7, #15]
 800645c:	429a      	cmp	r2, r3
 800645e:	d3b5      	bcc.n	80063cc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	7c1a      	ldrb	r2, [r3, #16]
 8006468:	f88d 2000 	strb.w	r2, [sp]
 800646c:	3304      	adds	r3, #4
 800646e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006470:	f00a f8f6 	bl	8010660 <USB_DevInit>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2202      	movs	r2, #2
 800647e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e013      	b.n	80064ae <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	7b1b      	ldrb	r3, [r3, #12]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d102      	bne.n	80064a2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 f999 	bl	80077d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f00b f935 	bl	8011716 <USB_DevDisconnect>

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_PCD_Start+0x1c>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e022      	b.n	8006518 <HAL_PCD_Start+0x62>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d105      	bne.n	80064fa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f00a f840 	bl	8010584 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f00b f8e3 	bl	80116d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006520:	b590      	push	{r4, r7, lr}
 8006522:	b08d      	sub	sp, #52	@ 0x34
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f00b f9a1 	bl	801187e <USB_GetMode>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	f040 84b9 	bne.w	8006eb6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4618      	mov	r0, r3
 800654a:	f00b f905 	bl	8011758 <USB_ReadInterrupts>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 84af 	beq.w	8006eb4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	0a1b      	lsrs	r3, r3, #8
 8006560:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f00b f8f2 	bl	8011758 <USB_ReadInterrupts>
 8006574:	4603      	mov	r3, r0
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b02      	cmp	r3, #2
 800657c:	d107      	bne.n	800658e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f002 0202 	and.w	r2, r2, #2
 800658c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f00b f8e0 	bl	8011758 <USB_ReadInterrupts>
 8006598:	4603      	mov	r3, r0
 800659a:	f003 0310 	and.w	r3, r3, #16
 800659e:	2b10      	cmp	r3, #16
 80065a0:	d161      	bne.n	8006666 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699a      	ldr	r2, [r3, #24]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0210 	bic.w	r2, r2, #16
 80065b0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	f003 020f 	and.w	r2, r3, #15
 80065be:	4613      	mov	r3, r2
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	3304      	adds	r3, #4
 80065d0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	0c5b      	lsrs	r3, r3, #17
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d124      	bne.n	8006628 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80065e4:	4013      	ands	r3, r2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d035      	beq.n	8006656 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	6a38      	ldr	r0, [r7, #32]
 80065fe:	f00a ff17 	bl	8011430 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800660e:	441a      	add	r2, r3
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006620:	441a      	add	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	615a      	str	r2, [r3, #20]
 8006626:	e016      	b.n	8006656 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	0c5b      	lsrs	r3, r3, #17
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	2b06      	cmp	r3, #6
 8006632:	d110      	bne.n	8006656 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800663a:	2208      	movs	r2, #8
 800663c:	4619      	mov	r1, r3
 800663e:	6a38      	ldr	r0, [r7, #32]
 8006640:	f00a fef6 	bl	8011430 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	695a      	ldr	r2, [r3, #20]
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	091b      	lsrs	r3, r3, #4
 800664c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006650:	441a      	add	r2, r3
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0210 	orr.w	r2, r2, #16
 8006664:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f00b f874 	bl	8011758 <USB_ReadInterrupts>
 8006670:	4603      	mov	r3, r0
 8006672:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006676:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800667a:	f040 80a7 	bne.w	80067cc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f00b f879 	bl	801177e <USB_ReadDevAllOutEpInterrupt>
 800668c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800668e:	e099      	b.n	80067c4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 808e 	beq.w	80067b8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	4611      	mov	r1, r2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f00b f89d 	bl	80117e6 <USB_ReadDevOutEPInterrupt>
 80066ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00c      	beq.n	80066d2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c4:	461a      	mov	r2, r3
 80066c6:	2301      	movs	r3, #1
 80066c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80066ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fefb 	bl	80074c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00c      	beq.n	80066f6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80066dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e8:	461a      	mov	r2, r3
 80066ea:	2308      	movs	r3, #8
 80066ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80066ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 ffd1 	bl	8007698 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800670c:	461a      	mov	r2, r3
 800670e:	2310      	movs	r3, #16
 8006710:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d030      	beq.n	800677e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006724:	2b80      	cmp	r3, #128	@ 0x80
 8006726:	d109      	bne.n	800673c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006736:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800673a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800673c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673e:	4613      	mov	r3, r2
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	3304      	adds	r3, #4
 8006750:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	78db      	ldrb	r3, [r3, #3]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d108      	bne.n	800676c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2200      	movs	r2, #0
 800675e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	b2db      	uxtb	r3, r3
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f00f f93c 	bl	80159e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006778:	461a      	mov	r2, r3
 800677a:	2302      	movs	r3, #2
 800677c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b00      	cmp	r3, #0
 8006786:	d008      	beq.n	800679a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006794:	461a      	mov	r2, r3
 8006796:	2320      	movs	r3, #32
 8006798:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d009      	beq.n	80067b8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b0:	461a      	mov	r2, r3
 80067b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80067b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	3301      	adds	r3, #1
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80067be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80067c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f47f af62 	bne.w	8006690 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f00a ffc1 	bl	8011758 <USB_ReadInterrupts>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067e0:	f040 80db 	bne.w	800699a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f00a ffe2 	bl	80117b2 <USB_ReadDevAllInEpInterrupt>
 80067ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80067f4:	e0cd      	b.n	8006992 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80c2 	beq.w	8006986 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	4611      	mov	r1, r2
 800680c:	4618      	mov	r0, r3
 800680e:	f00b f808 	bl	8011822 <USB_ReadDevInEPInterrupt>
 8006812:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d057      	beq.n	80068ce <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	2201      	movs	r2, #1
 8006826:	fa02 f303 	lsl.w	r3, r2, r3
 800682a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	43db      	mvns	r3, r3
 8006838:	69f9      	ldr	r1, [r7, #28]
 800683a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800683e:	4013      	ands	r3, r2
 8006840:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684e:	461a      	mov	r2, r3
 8006850:	2301      	movs	r3, #1
 8006852:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	799b      	ldrb	r3, [r3, #6]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d132      	bne.n	80068c2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006860:	4613      	mov	r3, r2
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	3320      	adds	r3, #32
 800686c:	6819      	ldr	r1, [r3, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006872:	4613      	mov	r3, r2
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4403      	add	r3, r0
 800687c:	331c      	adds	r3, #28
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4419      	add	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4403      	add	r3, r0
 8006890:	3320      	adds	r3, #32
 8006892:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d113      	bne.n	80068c2 <HAL_PCD_IRQHandler+0x3a2>
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800689e:	4613      	mov	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	3324      	adds	r3, #36	@ 0x24
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d108      	bne.n	80068c2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80068ba:	461a      	mov	r2, r3
 80068bc:	2101      	movs	r1, #1
 80068be:	f00b f811 	bl	80118e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f00f f806 	bl	80158da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d008      	beq.n	80068ea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e4:	461a      	mov	r2, r3
 80068e6:	2308      	movs	r3, #8
 80068e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d008      	beq.n	8006906 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80068f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006900:	461a      	mov	r2, r3
 8006902:	2310      	movs	r3, #16
 8006904:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800691c:	461a      	mov	r2, r3
 800691e:	2340      	movs	r3, #64	@ 0x40
 8006920:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d023      	beq.n	8006974 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800692c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800692e:	6a38      	ldr	r0, [r7, #32]
 8006930:	f009 fff4 	bl	801091c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006936:	4613      	mov	r3, r2
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	3310      	adds	r3, #16
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	4413      	add	r3, r2
 8006944:	3304      	adds	r3, #4
 8006946:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	78db      	ldrb	r3, [r3, #3]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d108      	bne.n	8006962 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2200      	movs	r2, #0
 8006954:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	b2db      	uxtb	r3, r3
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f00f f853 	bl	8015a08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800696e:	461a      	mov	r2, r3
 8006970:	2302      	movs	r3, #2
 8006972:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800697e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fd15 	bl	80073b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	3301      	adds	r3, #1
 800698a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800698c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006994:	2b00      	cmp	r3, #0
 8006996:	f47f af2e 	bne.w	80067f6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f00a feda 	bl	8011758 <USB_ReadInterrupts>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069ae:	d122      	bne.n	80069f6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d108      	bne.n	80069e0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80069d6:	2100      	movs	r1, #0
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 ff1f 	bl	800781c <HAL_PCDEx_LPM_Callback>
 80069de:	e002      	b.n	80069e6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f00e fff1 	bl	80159c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	695a      	ldr	r2, [r3, #20]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80069f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f00a feac 	bl	8011758 <USB_ReadInterrupts>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a0a:	d112      	bne.n	8006a32 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d102      	bne.n	8006a22 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f00e ffad 	bl	801597c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695a      	ldr	r2, [r3, #20]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f00a fe8e 	bl	8011758 <USB_ReadInterrupts>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a46:	d121      	bne.n	8006a8c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695a      	ldr	r2, [r3, #20]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006a56:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d111      	bne.n	8006a86 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a70:	089b      	lsrs	r3, r3, #2
 8006a72:	f003 020f 	and.w	r2, r3, #15
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fecc 	bl	800781c <HAL_PCDEx_LPM_Callback>
 8006a84:	e002      	b.n	8006a8c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f00e ff78 	bl	801597c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f00a fe61 	bl	8011758 <USB_ReadInterrupts>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa0:	f040 80b7 	bne.w	8006c12 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ab2:	f023 0301 	bic.w	r3, r3, #1
 8006ab6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2110      	movs	r1, #16
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f009 ff2c 	bl	801091c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ac8:	e046      	b.n	8006b58 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006adc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aee:	0151      	lsls	r1, r2, #5
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	440a      	add	r2, r1
 8006af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006afc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b10:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b22:	0151      	lsls	r1, r2, #5
 8006b24:	69fa      	ldr	r2, [r7, #28]
 8006b26:	440a      	add	r2, r1
 8006b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b50:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b54:	3301      	adds	r3, #1
 8006b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	791b      	ldrb	r3, [r3, #4]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d3b2      	bcc.n	8006aca <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b72:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006b76:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7bdb      	ldrb	r3, [r3, #15]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d016      	beq.n	8006bae <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b90:	f043 030b 	orr.w	r3, r3, #11
 8006b94:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ba6:	f043 030b 	orr.w	r3, r3, #11
 8006baa:	6453      	str	r3, [r2, #68]	@ 0x44
 8006bac:	e015      	b.n	8006bda <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb4:	695a      	ldr	r2, [r3, #20]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bd4:	f043 030b 	orr.w	r3, r3, #11
 8006bd8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006be8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006bec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f00a fe71 	bl	80118e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695a      	ldr	r2, [r3, #20]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f00a fd9e 	bl	8011758 <USB_ReadInterrupts>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c26:	d123      	bne.n	8006c70 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f00a fe35 	bl	801189c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f009 fee9 	bl	8010a0e <USB_GetDevSpeed>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	461a      	mov	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681c      	ldr	r4, [r3, #0]
 8006c48:	f001 fdd8 	bl	80087fc <HAL_RCC_GetHCLKFreq>
 8006c4c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c52:	461a      	mov	r2, r3
 8006c54:	4620      	mov	r0, r4
 8006c56:	f009 fbf3 	bl	8010440 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f00e fe65 	bl	801592a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	695a      	ldr	r2, [r3, #20]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f00a fd6f 	bl	8011758 <USB_ReadInterrupts>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d10a      	bne.n	8006c9a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f00e fe42 	bl	801590e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695a      	ldr	r2, [r3, #20]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f002 0208 	and.w	r2, r2, #8
 8006c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f00a fd5a 	bl	8011758 <USB_ReadInterrupts>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006caa:	2b80      	cmp	r3, #128	@ 0x80
 8006cac:	d123      	bne.n	8006cf6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cba:	2301      	movs	r3, #1
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cbe:	e014      	b.n	8006cea <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	4413      	add	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d105      	bne.n	8006ce4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fb08 	bl	80072f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	791b      	ldrb	r3, [r3, #4]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d3e4      	bcc.n	8006cc0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f00a fd2c 	bl	8011758 <USB_ReadInterrupts>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d0a:	d13c      	bne.n	8006d86 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d10:	e02b      	b.n	8006d6a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d26:	4613      	mov	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	440b      	add	r3, r1
 8006d30:	3318      	adds	r3, #24
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d115      	bne.n	8006d64 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006d38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da12      	bge.n	8006d64 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d42:	4613      	mov	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3317      	adds	r3, #23
 8006d4e:	2201      	movs	r2, #1
 8006d50:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fac8 	bl	80072f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	3301      	adds	r3, #1
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	791b      	ldrb	r3, [r3, #4]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d3cd      	bcc.n	8006d12 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f00a fce4 	bl	8011758 <USB_ReadInterrupts>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d9a:	d156      	bne.n	8006e4a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006da0:	e045      	b.n	8006e2e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db6:	4613      	mov	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d12e      	bne.n	8006e28 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006dca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	da2b      	bge.n	8006e28 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006ddc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d121      	bne.n	8006e28 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de8:	4613      	mov	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006df6:	2201      	movs	r2, #1
 8006df8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e24:	6053      	str	r3, [r2, #4]
            break;
 8006e26:	e008      	b.n	8006e3a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	791b      	ldrb	r3, [r3, #4]
 8006e32:	461a      	mov	r2, r3
 8006e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d3b3      	bcc.n	8006da2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695a      	ldr	r2, [r3, #20]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f00a fc82 	bl	8011758 <USB_ReadInterrupts>
 8006e54:	4603      	mov	r3, r0
 8006e56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e5e:	d10a      	bne.n	8006e76 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f00e fde3 	bl	8015a2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f00a fc6c 	bl	8011758 <USB_ReadInterrupts>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d115      	bne.n	8006eb6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f00e fdd3 	bl	8015a48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6859      	ldr	r1, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	e000      	b.n	8006eb6 <HAL_PCD_IRQHandler+0x996>
      return;
 8006eb4:	bf00      	nop
    }
  }
}
 8006eb6:	3734      	adds	r7, #52	@ 0x34
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd90      	pop	{r4, r7, pc}

08006ebc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_PCD_SetAddress+0x1a>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e012      	b.n	8006efc <HAL_PCD_SetAddress+0x40>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	78fa      	ldrb	r2, [r7, #3]
 8006ee2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	78fa      	ldrb	r2, [r7, #3]
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f00a fbcb 	bl	8011688 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	4611      	mov	r1, r2
 8006f10:	461a      	mov	r2, r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	70fb      	strb	r3, [r7, #3]
 8006f16:	460b      	mov	r3, r1
 8006f18:	803b      	strh	r3, [r7, #0]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da0f      	bge.n	8006f4a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	f003 020f 	and.w	r2, r3, #15
 8006f30:	4613      	mov	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	4413      	add	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	3310      	adds	r3, #16
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	3304      	adds	r3, #4
 8006f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	705a      	strb	r2, [r3, #1]
 8006f48:	e00f      	b.n	8006f6a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f4a:	78fb      	ldrb	r3, [r7, #3]
 8006f4c:	f003 020f 	and.w	r2, r3, #15
 8006f50:	4613      	mov	r3, r2
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	4413      	add	r3, r2
 8006f60:	3304      	adds	r3, #4
 8006f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006f6a:	78fb      	ldrb	r3, [r7, #3]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006f76:	883a      	ldrh	r2, [r7, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	78ba      	ldrb	r2, [r7, #2]
 8006f80:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006f94:	78bb      	ldrb	r3, [r7, #2]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d102      	bne.n	8006fa0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_PCD_EP_Open+0xaa>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e00e      	b.n	8006fcc <HAL_PCD_EP_Open+0xc8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68f9      	ldr	r1, [r7, #12]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f009 fd4b 	bl	8010a58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006fca:	7afb      	ldrb	r3, [r7, #11]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	da0f      	bge.n	8007008 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	f003 020f 	and.w	r2, r3, #15
 8006fee:	4613      	mov	r3, r2
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	3310      	adds	r3, #16
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	705a      	strb	r2, [r3, #1]
 8007006:	e00f      	b.n	8007028 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	f003 020f 	and.w	r2, r3, #15
 800700e:	4613      	mov	r3, r2
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	4413      	add	r3, r2
 800701e:	3304      	adds	r3, #4
 8007020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	b2da      	uxtb	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_PCD_EP_Close+0x6e>
 800703e:	2302      	movs	r3, #2
 8007040:	e00e      	b.n	8007060 <HAL_PCD_EP_Close+0x8c>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	4618      	mov	r0, r3
 8007052:	f009 fd89 	bl	8010b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	460b      	mov	r3, r1
 8007076:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007078:	7afb      	ldrb	r3, [r7, #11]
 800707a:	f003 020f 	and.w	r2, r3, #15
 800707e:	4613      	mov	r3, r2
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	3304      	adds	r3, #4
 8007090:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2200      	movs	r2, #0
 80070a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2200      	movs	r2, #0
 80070a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070aa:	7afb      	ldrb	r3, [r7, #11]
 80070ac:	f003 030f 	and.w	r3, r3, #15
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	799b      	ldrb	r3, [r3, #6]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d102      	bne.n	80070c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	799b      	ldrb	r3, [r3, #6]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6979      	ldr	r1, [r7, #20]
 80070d0:	f009 fe26 	bl	8010d20 <USB_EPStartXfer>

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	460b      	mov	r3, r1
 80070e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80070ea:	78fb      	ldrb	r3, [r7, #3]
 80070ec:	f003 020f 	and.w	r2, r3, #15
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007100:	681b      	ldr	r3, [r3, #0]
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b086      	sub	sp, #24
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	607a      	str	r2, [r7, #4]
 8007118:	603b      	str	r3, [r7, #0]
 800711a:	460b      	mov	r3, r1
 800711c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800711e:	7afb      	ldrb	r3, [r7, #11]
 8007120:	f003 020f 	and.w	r2, r3, #15
 8007124:	4613      	mov	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	3310      	adds	r3, #16
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	3304      	adds	r3, #4
 8007134:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2201      	movs	r2, #1
 800714c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800714e:	7afb      	ldrb	r3, [r7, #11]
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	b2da      	uxtb	r2, r3
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	799b      	ldrb	r3, [r3, #6]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d102      	bne.n	8007168 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6818      	ldr	r0, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	799b      	ldrb	r3, [r3, #6]
 8007170:	461a      	mov	r2, r3
 8007172:	6979      	ldr	r1, [r7, #20]
 8007174:	f009 fdd4 	bl	8010d20 <USB_EPStartXfer>

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	460b      	mov	r3, r1
 800718c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	7912      	ldrb	r2, [r2, #4]
 8007198:	4293      	cmp	r3, r2
 800719a:	d901      	bls.n	80071a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e04f      	b.n	8007240 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80071a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	da0f      	bge.n	80071c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	f003 020f 	and.w	r2, r3, #15
 80071ae:	4613      	mov	r3, r2
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	3310      	adds	r3, #16
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	4413      	add	r3, r2
 80071bc:	3304      	adds	r3, #4
 80071be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	705a      	strb	r2, [r3, #1]
 80071c6:	e00d      	b.n	80071e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80071c8:	78fa      	ldrb	r2, [r7, #3]
 80071ca:	4613      	mov	r3, r2
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	4413      	add	r3, r2
 80071da:	3304      	adds	r3, #4
 80071dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071ea:	78fb      	ldrb	r3, [r7, #3]
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_PCD_EP_SetStall+0x82>
 8007200:	2302      	movs	r3, #2
 8007202:	e01d      	b.n	8007240 <HAL_PCD_EP_SetStall+0xbe>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68f9      	ldr	r1, [r7, #12]
 8007212:	4618      	mov	r0, r3
 8007214:	f00a f964 	bl	80114e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	2b00      	cmp	r3, #0
 8007220:	d109      	bne.n	8007236 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	7999      	ldrb	r1, [r3, #6]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007230:	461a      	mov	r2, r3
 8007232:	f00a fb57 	bl	80118e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	7912      	ldrb	r2, [r2, #4]
 800725e:	4293      	cmp	r3, r2
 8007260:	d901      	bls.n	8007266 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e042      	b.n	80072ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800726a:	2b00      	cmp	r3, #0
 800726c:	da0f      	bge.n	800728e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	f003 020f 	and.w	r2, r3, #15
 8007274:	4613      	mov	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	3310      	adds	r3, #16
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	4413      	add	r3, r2
 8007282:	3304      	adds	r3, #4
 8007284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	705a      	strb	r2, [r3, #1]
 800728c:	e00f      	b.n	80072ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	f003 020f 	and.w	r2, r3, #15
 8007294:	4613      	mov	r3, r2
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4413      	add	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4413      	add	r3, r2
 80072a4:	3304      	adds	r3, #4
 80072a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_PCD_EP_ClrStall+0x86>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e00e      	b.n	80072ec <HAL_PCD_EP_ClrStall+0xa4>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	4618      	mov	r0, r3
 80072de:	f00a f96d 	bl	80115bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007304:	2b00      	cmp	r3, #0
 8007306:	da0c      	bge.n	8007322 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	f003 020f 	and.w	r2, r3, #15
 800730e:	4613      	mov	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	3310      	adds	r3, #16
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	4413      	add	r3, r2
 800731c:	3304      	adds	r3, #4
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	e00c      	b.n	800733c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	f003 020f 	and.w	r2, r3, #15
 8007328:	4613      	mov	r3, r2
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	4413      	add	r3, r2
 8007338:	3304      	adds	r3, #4
 800733a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68f9      	ldr	r1, [r7, #12]
 8007342:	4618      	mov	r0, r3
 8007344:	f009 ff8c 	bl	8011260 <USB_EPStopXfer>
 8007348:	4603      	mov	r3, r0
 800734a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800734c:	7afb      	ldrb	r3, [r7, #11]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	460b      	mov	r3, r1
 8007360:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_PCD_EP_Flush+0x1a>
 800736c:	2302      	movs	r3, #2
 800736e:	e01b      	b.n	80073a8 <HAL_PCD_EP_Flush+0x52>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8007378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800737c:	2b00      	cmp	r3, #0
 800737e:	da09      	bge.n	8007394 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	4619      	mov	r1, r3
 800738c:	4610      	mov	r0, r2
 800738e:	f009 fac5 	bl	801091c <USB_FlushTxFifo>
 8007392:	e004      	b.n	800739e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f009 faf1 	bl	8010980 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08a      	sub	sp, #40	@ 0x28
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	4613      	mov	r3, r2
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	3310      	adds	r3, #16
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	3304      	adds	r3, #4
 80073d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	695a      	ldr	r2, [r3, #20]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d901      	bls.n	80073e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e06b      	b.n	80074c0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d902      	bls.n	8007404 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	3303      	adds	r3, #3
 8007408:	089b      	lsrs	r3, r3, #2
 800740a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800740c:	e02a      	b.n	8007464 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	691a      	ldr	r2, [r3, #16]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	429a      	cmp	r2, r3
 8007422:	d902      	bls.n	800742a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	3303      	adds	r3, #3
 800742e:	089b      	lsrs	r3, r3, #2
 8007430:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	68d9      	ldr	r1, [r3, #12]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	b2da      	uxtb	r2, r3
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	4603      	mov	r3, r0
 8007446:	6978      	ldr	r0, [r7, #20]
 8007448:	f009 ffb4 	bl	80113b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	441a      	add	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	695a      	ldr	r2, [r3, #20]
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	441a      	add	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	429a      	cmp	r2, r3
 8007478:	d809      	bhi.n	800748e <PCD_WriteEmptyTxFifo+0xde>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	695a      	ldr	r2, [r3, #20]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007482:	429a      	cmp	r2, r3
 8007484:	d203      	bcs.n	800748e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1bf      	bne.n	800740e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	429a      	cmp	r2, r3
 8007498:	d811      	bhi.n	80074be <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	f003 030f 	and.w	r3, r3, #15
 80074a0:	2201      	movs	r2, #1
 80074a2:	fa02 f303 	lsl.w	r3, r2, r3
 80074a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	43db      	mvns	r3, r3
 80074b4:	6939      	ldr	r1, [r7, #16]
 80074b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074ba:	4013      	ands	r3, r2
 80074bc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3720      	adds	r7, #32
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	333c      	adds	r3, #60	@ 0x3c
 80074e0:	3304      	adds	r3, #4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	799b      	ldrb	r3, [r3, #6]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d17b      	bne.n	80075f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d015      	beq.n	8007534 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	4a61      	ldr	r2, [pc, #388]	@ (8007690 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	f240 80b9 	bls.w	8007684 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80b3 	beq.w	8007684 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752a:	461a      	mov	r2, r3
 800752c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007530:	6093      	str	r3, [r2, #8]
 8007532:	e0a7      	b.n	8007684 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d009      	beq.n	8007552 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754a:	461a      	mov	r2, r3
 800754c:	2320      	movs	r3, #32
 800754e:	6093      	str	r3, [r2, #8]
 8007550:	e098      	b.n	8007684 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007558:	2b00      	cmp	r3, #0
 800755a:	f040 8093 	bne.w	8007684 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	4a4b      	ldr	r2, [pc, #300]	@ (8007690 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d90f      	bls.n	8007586 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800757c:	461a      	mov	r2, r3
 800757e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007582:	6093      	str	r3, [r2, #8]
 8007584:	e07e      	b.n	8007684 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	4413      	add	r3, r2
 8007598:	3304      	adds	r3, #4
 800759a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1a      	ldr	r2, [r3, #32]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	0159      	lsls	r1, r3, #5
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	440b      	add	r3, r1
 80075a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075b2:	1ad2      	subs	r2, r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d114      	bne.n	80075e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075d0:	461a      	mov	r2, r3
 80075d2:	2101      	movs	r1, #1
 80075d4:	f00a f986 	bl	80118e4 <USB_EP0_OutStart>
 80075d8:	e006      	b.n	80075e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	441a      	add	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f00e f958 	bl	80158a4 <HAL_PCD_DataOutStageCallback>
 80075f4:	e046      	b.n	8007684 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	4a26      	ldr	r2, [pc, #152]	@ (8007694 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d124      	bne.n	8007648 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007614:	461a      	mov	r2, r3
 8007616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800761a:	6093      	str	r3, [r2, #8]
 800761c:	e032      	b.n	8007684 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d008      	beq.n	800763a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007634:	461a      	mov	r2, r3
 8007636:	2320      	movs	r3, #32
 8007638:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f00e f92f 	bl	80158a4 <HAL_PCD_DataOutStageCallback>
 8007646:	e01d      	b.n	8007684 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d114      	bne.n	8007678 <PCD_EP_OutXfrComplete_int+0x1b0>
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	4613      	mov	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d108      	bne.n	8007678 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007670:	461a      	mov	r2, r3
 8007672:	2100      	movs	r1, #0
 8007674:	f00a f936 	bl	80118e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f00e f910 	bl	80158a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3720      	adds	r7, #32
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	4f54300a 	.word	0x4f54300a
 8007694:	4f54310a 	.word	0x4f54310a

08007698 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	333c      	adds	r3, #60	@ 0x3c
 80076b0:	3304      	adds	r3, #4
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4a15      	ldr	r2, [pc, #84]	@ (8007720 <PCD_EP_OutSetupPacket_int+0x88>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d90e      	bls.n	80076ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d009      	beq.n	80076ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e4:	461a      	mov	r2, r3
 80076e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f00e f8c7 	bl	8015880 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007720 <PCD_EP_OutSetupPacket_int+0x88>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d90c      	bls.n	8007714 <PCD_EP_OutSetupPacket_int+0x7c>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	799b      	ldrb	r3, [r3, #6]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d108      	bne.n	8007714 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800770c:	461a      	mov	r2, r3
 800770e:	2101      	movs	r1, #1
 8007710:	f00a f8e8 	bl	80118e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	4f54300a 	.word	0x4f54300a

08007724 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
 8007730:	4613      	mov	r3, r2
 8007732:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d107      	bne.n	8007752 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007742:	883b      	ldrh	r3, [r7, #0]
 8007744:	0419      	lsls	r1, r3, #16
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	430a      	orrs	r2, r1
 800774e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007750:	e028      	b.n	80077a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007758:	0c1b      	lsrs	r3, r3, #16
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	4413      	add	r3, r2
 800775e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
 8007764:	e00d      	b.n	8007782 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	3340      	adds	r3, #64	@ 0x40
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	0c1b      	lsrs	r3, r3, #16
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	4413      	add	r3, r2
 800777a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	3301      	adds	r3, #1
 8007780:	73fb      	strb	r3, [r7, #15]
 8007782:	7bfa      	ldrb	r2, [r7, #15]
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	3b01      	subs	r3, #1
 8007788:	429a      	cmp	r2, r3
 800778a:	d3ec      	bcc.n	8007766 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800778c:	883b      	ldrh	r3, [r7, #0]
 800778e:	0418      	lsls	r0, r3, #16
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	3b01      	subs	r3, #1
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	4302      	orrs	r2, r0
 800779c:	3340      	adds	r3, #64	@ 0x40
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	460b      	mov	r3, r1
 80077bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	887a      	ldrh	r2, [r7, #2]
 80077c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007802:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <HAL_PCDEx_ActivateLPM+0x44>)
 8007804:	4313      	orrs	r3, r2
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	10000003 	.word	0x10000003

0800781c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800783c:	4b19      	ldr	r3, [pc, #100]	@ (80078a4 <HAL_PWREx_ConfigSupply+0x70>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f003 0304 	and.w	r3, r3, #4
 8007844:	2b04      	cmp	r3, #4
 8007846:	d00a      	beq.n	800785e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007848:	4b16      	ldr	r3, [pc, #88]	@ (80078a4 <HAL_PWREx_ConfigSupply+0x70>)
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f003 0307 	and.w	r3, r3, #7
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	429a      	cmp	r2, r3
 8007854:	d001      	beq.n	800785a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e01f      	b.n	800789a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	e01d      	b.n	800789a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800785e:	4b11      	ldr	r3, [pc, #68]	@ (80078a4 <HAL_PWREx_ConfigSupply+0x70>)
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f023 0207 	bic.w	r2, r3, #7
 8007866:	490f      	ldr	r1, [pc, #60]	@ (80078a4 <HAL_PWREx_ConfigSupply+0x70>)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4313      	orrs	r3, r2
 800786c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800786e:	f7fd f8b3 	bl	80049d8 <HAL_GetTick>
 8007872:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007874:	e009      	b.n	800788a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007876:	f7fd f8af 	bl	80049d8 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007884:	d901      	bls.n	800788a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e007      	b.n	800789a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800788a:	4b06      	ldr	r3, [pc, #24]	@ (80078a4 <HAL_PWREx_ConfigSupply+0x70>)
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007896:	d1ee      	bne.n	8007876 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	58024800 	.word	0x58024800

080078a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80078ac:	4b05      	ldr	r3, [pc, #20]	@ (80078c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	4a04      	ldr	r2, [pc, #16]	@ (80078c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80078b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078b6:	60d3      	str	r3, [r2, #12]
}
 80078b8:	bf00      	nop
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	58024800 	.word	0x58024800

080078c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08c      	sub	sp, #48	@ 0x30
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f000 bc48 	b.w	800816c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8088 	beq.w	80079fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078ea:	4b99      	ldr	r3, [pc, #612]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078f4:	4b96      	ldr	r3, [pc, #600]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 80078f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80078fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fc:	2b10      	cmp	r3, #16
 80078fe:	d007      	beq.n	8007910 <HAL_RCC_OscConfig+0x48>
 8007900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007902:	2b18      	cmp	r3, #24
 8007904:	d111      	bne.n	800792a <HAL_RCC_OscConfig+0x62>
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	f003 0303 	and.w	r3, r3, #3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d10c      	bne.n	800792a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007910:	4b8f      	ldr	r3, [pc, #572]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d06d      	beq.n	80079f8 <HAL_RCC_OscConfig+0x130>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d169      	bne.n	80079f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	f000 bc21 	b.w	800816c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007932:	d106      	bne.n	8007942 <HAL_RCC_OscConfig+0x7a>
 8007934:	4b86      	ldr	r3, [pc, #536]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a85      	ldr	r2, [pc, #532]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 800793a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	e02e      	b.n	80079a0 <HAL_RCC_OscConfig+0xd8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10c      	bne.n	8007964 <HAL_RCC_OscConfig+0x9c>
 800794a:	4b81      	ldr	r3, [pc, #516]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a80      	ldr	r2, [pc, #512]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	4b7e      	ldr	r3, [pc, #504]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a7d      	ldr	r2, [pc, #500]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 800795c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	e01d      	b.n	80079a0 <HAL_RCC_OscConfig+0xd8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800796c:	d10c      	bne.n	8007988 <HAL_RCC_OscConfig+0xc0>
 800796e:	4b78      	ldr	r3, [pc, #480]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a77      	ldr	r2, [pc, #476]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	4b75      	ldr	r3, [pc, #468]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a74      	ldr	r2, [pc, #464]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	e00b      	b.n	80079a0 <HAL_RCC_OscConfig+0xd8>
 8007988:	4b71      	ldr	r3, [pc, #452]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a70      	ldr	r2, [pc, #448]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 800798e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	4b6e      	ldr	r3, [pc, #440]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a6d      	ldr	r2, [pc, #436]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 800799a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800799e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d013      	beq.n	80079d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a8:	f7fd f816 	bl	80049d8 <HAL_GetTick>
 80079ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079b0:	f7fd f812 	bl	80049d8 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b64      	cmp	r3, #100	@ 0x64
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e3d4      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079c2:	4b63      	ldr	r3, [pc, #396]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0xe8>
 80079ce:	e014      	b.n	80079fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d0:	f7fd f802 	bl	80049d8 <HAL_GetTick>
 80079d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d8:	f7fc fffe 	bl	80049d8 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b64      	cmp	r3, #100	@ 0x64
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e3c0      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079ea:	4b59      	ldr	r3, [pc, #356]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f0      	bne.n	80079d8 <HAL_RCC_OscConfig+0x110>
 80079f6:	e000      	b.n	80079fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 80ca 	beq.w	8007b9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a08:	4b51      	ldr	r3, [pc, #324]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a12:	4b4f      	ldr	r3, [pc, #316]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d007      	beq.n	8007a2e <HAL_RCC_OscConfig+0x166>
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	2b18      	cmp	r3, #24
 8007a22:	d156      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x20a>
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d151      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a2e:	4b48      	ldr	r3, [pc, #288]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0304 	and.w	r3, r3, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_RCC_OscConfig+0x17e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e392      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a46:	4b42      	ldr	r3, [pc, #264]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f023 0219 	bic.w	r2, r3, #25
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	493f      	ldr	r1, [pc, #252]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a58:	f7fc ffbe 	bl	80049d8 <HAL_GetTick>
 8007a5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a60:	f7fc ffba 	bl	80049d8 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e37c      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a72:	4b37      	ldr	r3, [pc, #220]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0f0      	beq.n	8007a60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a7e:	f7fc ffdb 	bl	8004a38 <HAL_GetREVID>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d817      	bhi.n	8007abc <HAL_RCC_OscConfig+0x1f4>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	2b40      	cmp	r3, #64	@ 0x40
 8007a92:	d108      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x1de>
 8007a94:	4b2e      	ldr	r3, [pc, #184]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aa2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007aa4:	e07a      	b.n	8007b9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	031b      	lsls	r3, r3, #12
 8007ab4:	4926      	ldr	r1, [pc, #152]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007aba:	e06f      	b.n	8007b9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007abc:	4b24      	ldr	r3, [pc, #144]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	061b      	lsls	r3, r3, #24
 8007aca:	4921      	ldr	r1, [pc, #132]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ad0:	e064      	b.n	8007b9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d047      	beq.n	8007b6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ada:	4b1d      	ldr	r3, [pc, #116]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f023 0219 	bic.w	r2, r3, #25
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	491a      	ldr	r1, [pc, #104]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aec:	f7fc ff74 	bl	80049d8 <HAL_GetTick>
 8007af0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007af2:	e008      	b.n	8007b06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007af4:	f7fc ff70 	bl	80049d8 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e332      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b06:	4b12      	ldr	r3, [pc, #72]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0f0      	beq.n	8007af4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b12:	f7fc ff91 	bl	8004a38 <HAL_GetREVID>
 8007b16:	4603      	mov	r3, r0
 8007b18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d819      	bhi.n	8007b54 <HAL_RCC_OscConfig+0x28c>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b40      	cmp	r3, #64	@ 0x40
 8007b26:	d108      	bne.n	8007b3a <HAL_RCC_OscConfig+0x272>
 8007b28:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007b30:	4a07      	ldr	r2, [pc, #28]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b36:	6053      	str	r3, [r2, #4]
 8007b38:	e030      	b.n	8007b9c <HAL_RCC_OscConfig+0x2d4>
 8007b3a:	4b05      	ldr	r3, [pc, #20]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	031b      	lsls	r3, r3, #12
 8007b48:	4901      	ldr	r1, [pc, #4]	@ (8007b50 <HAL_RCC_OscConfig+0x288>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	604b      	str	r3, [r1, #4]
 8007b4e:	e025      	b.n	8007b9c <HAL_RCC_OscConfig+0x2d4>
 8007b50:	58024400 	.word	0x58024400
 8007b54:	4b9a      	ldr	r3, [pc, #616]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	061b      	lsls	r3, r3, #24
 8007b62:	4997      	ldr	r1, [pc, #604]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	604b      	str	r3, [r1, #4]
 8007b68:	e018      	b.n	8007b9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b6a:	4b95      	ldr	r3, [pc, #596]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a94      	ldr	r2, [pc, #592]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007b70:	f023 0301 	bic.w	r3, r3, #1
 8007b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b76:	f7fc ff2f 	bl	80049d8 <HAL_GetTick>
 8007b7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b7c:	e008      	b.n	8007b90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b7e:	f7fc ff2b 	bl	80049d8 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d901      	bls.n	8007b90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e2ed      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b90:	4b8b      	ldr	r3, [pc, #556]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1f0      	bne.n	8007b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 80a9 	beq.w	8007cfc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007baa:	4b85      	ldr	r3, [pc, #532]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bb4:	4b82      	ldr	r3, [pc, #520]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d007      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x308>
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	2b18      	cmp	r3, #24
 8007bc4:	d13a      	bne.n	8007c3c <HAL_RCC_OscConfig+0x374>
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f003 0303 	and.w	r3, r3, #3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d135      	bne.n	8007c3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007bd0:	4b7b      	ldr	r3, [pc, #492]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <HAL_RCC_OscConfig+0x320>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	2b80      	cmp	r3, #128	@ 0x80
 8007be2:	d001      	beq.n	8007be8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e2c1      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007be8:	f7fc ff26 	bl	8004a38 <HAL_GetREVID>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d817      	bhi.n	8007c26 <HAL_RCC_OscConfig+0x35e>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d108      	bne.n	8007c10 <HAL_RCC_OscConfig+0x348>
 8007bfe:	4b70      	ldr	r3, [pc, #448]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007c06:	4a6e      	ldr	r2, [pc, #440]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c0e:	e075      	b.n	8007cfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c10:	4b6b      	ldr	r3, [pc, #428]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	069b      	lsls	r3, r3, #26
 8007c1e:	4968      	ldr	r1, [pc, #416]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c24:	e06a      	b.n	8007cfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c26:	4b66      	ldr	r3, [pc, #408]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	061b      	lsls	r3, r3, #24
 8007c34:	4962      	ldr	r1, [pc, #392]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c3a:	e05f      	b.n	8007cfc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d042      	beq.n	8007cca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c44:	4b5e      	ldr	r3, [pc, #376]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a5d      	ldr	r2, [pc, #372]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c50:	f7fc fec2 	bl	80049d8 <HAL_GetTick>
 8007c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c56:	e008      	b.n	8007c6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c58:	f7fc febe 	bl	80049d8 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e280      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c6a:	4b55      	ldr	r3, [pc, #340]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0f0      	beq.n	8007c58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c76:	f7fc fedf 	bl	8004a38 <HAL_GetREVID>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d817      	bhi.n	8007cb4 <HAL_RCC_OscConfig+0x3ec>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d108      	bne.n	8007c9e <HAL_RCC_OscConfig+0x3d6>
 8007c8c:	4b4c      	ldr	r3, [pc, #304]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007c94:	4a4a      	ldr	r2, [pc, #296]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007c96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c9a:	6053      	str	r3, [r2, #4]
 8007c9c:	e02e      	b.n	8007cfc <HAL_RCC_OscConfig+0x434>
 8007c9e:	4b48      	ldr	r3, [pc, #288]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	069b      	lsls	r3, r3, #26
 8007cac:	4944      	ldr	r1, [pc, #272]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	604b      	str	r3, [r1, #4]
 8007cb2:	e023      	b.n	8007cfc <HAL_RCC_OscConfig+0x434>
 8007cb4:	4b42      	ldr	r3, [pc, #264]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	061b      	lsls	r3, r3, #24
 8007cc2:	493f      	ldr	r1, [pc, #252]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60cb      	str	r3, [r1, #12]
 8007cc8:	e018      	b.n	8007cfc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007cca:	4b3d      	ldr	r3, [pc, #244]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a3c      	ldr	r2, [pc, #240]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007cd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd6:	f7fc fe7f 	bl	80049d8 <HAL_GetTick>
 8007cda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cdc:	e008      	b.n	8007cf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007cde:	f7fc fe7b 	bl	80049d8 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d901      	bls.n	8007cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e23d      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cf0:	4b33      	ldr	r3, [pc, #204]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1f0      	bne.n	8007cde <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0308 	and.w	r3, r3, #8
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d036      	beq.n	8007d76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d019      	beq.n	8007d44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d10:	4b2b      	ldr	r3, [pc, #172]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d14:	4a2a      	ldr	r2, [pc, #168]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007d16:	f043 0301 	orr.w	r3, r3, #1
 8007d1a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d1c:	f7fc fe5c 	bl	80049d8 <HAL_GetTick>
 8007d20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d22:	e008      	b.n	8007d36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d24:	f7fc fe58 	bl	80049d8 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e21a      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d36:	4b22      	ldr	r3, [pc, #136]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0f0      	beq.n	8007d24 <HAL_RCC_OscConfig+0x45c>
 8007d42:	e018      	b.n	8007d76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d44:	4b1e      	ldr	r3, [pc, #120]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d48:	4a1d      	ldr	r2, [pc, #116]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007d4a:	f023 0301 	bic.w	r3, r3, #1
 8007d4e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d50:	f7fc fe42 	bl	80049d8 <HAL_GetTick>
 8007d54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d56:	e008      	b.n	8007d6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d58:	f7fc fe3e 	bl	80049d8 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d901      	bls.n	8007d6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e200      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d6a:	4b15      	ldr	r3, [pc, #84]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1f0      	bne.n	8007d58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d039      	beq.n	8007df6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d01c      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007d90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d96:	f7fc fe1f 	bl	80049d8 <HAL_GetTick>
 8007d9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d9c:	e008      	b.n	8007db0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d9e:	f7fc fe1b 	bl	80049d8 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d901      	bls.n	8007db0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e1dd      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007db0:	4b03      	ldr	r3, [pc, #12]	@ (8007dc0 <HAL_RCC_OscConfig+0x4f8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d0f0      	beq.n	8007d9e <HAL_RCC_OscConfig+0x4d6>
 8007dbc:	e01b      	b.n	8007df6 <HAL_RCC_OscConfig+0x52e>
 8007dbe:	bf00      	nop
 8007dc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007dc4:	4b9b      	ldr	r3, [pc, #620]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a9a      	ldr	r2, [pc, #616]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007dca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007dd0:	f7fc fe02 	bl	80049d8 <HAL_GetTick>
 8007dd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dd8:	f7fc fdfe 	bl	80049d8 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e1c0      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dea:	4b92      	ldr	r3, [pc, #584]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0304 	and.w	r3, r3, #4
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 8081 	beq.w	8007f06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007e04:	4b8c      	ldr	r3, [pc, #560]	@ (8008038 <HAL_RCC_OscConfig+0x770>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a8b      	ldr	r2, [pc, #556]	@ (8008038 <HAL_RCC_OscConfig+0x770>)
 8007e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e10:	f7fc fde2 	bl	80049d8 <HAL_GetTick>
 8007e14:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e18:	f7fc fdde 	bl	80049d8 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b64      	cmp	r3, #100	@ 0x64
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e1a0      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e2a:	4b83      	ldr	r3, [pc, #524]	@ (8008038 <HAL_RCC_OscConfig+0x770>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0f0      	beq.n	8007e18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d106      	bne.n	8007e4c <HAL_RCC_OscConfig+0x584>
 8007e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e42:	4a7c      	ldr	r2, [pc, #496]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e44:	f043 0301 	orr.w	r3, r3, #1
 8007e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e4a:	e02d      	b.n	8007ea8 <HAL_RCC_OscConfig+0x5e0>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10c      	bne.n	8007e6e <HAL_RCC_OscConfig+0x5a6>
 8007e54:	4b77      	ldr	r3, [pc, #476]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e58:	4a76      	ldr	r2, [pc, #472]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e5a:	f023 0301 	bic.w	r3, r3, #1
 8007e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e60:	4b74      	ldr	r3, [pc, #464]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e64:	4a73      	ldr	r2, [pc, #460]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e66:	f023 0304 	bic.w	r3, r3, #4
 8007e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e6c:	e01c      	b.n	8007ea8 <HAL_RCC_OscConfig+0x5e0>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	2b05      	cmp	r3, #5
 8007e74:	d10c      	bne.n	8007e90 <HAL_RCC_OscConfig+0x5c8>
 8007e76:	4b6f      	ldr	r3, [pc, #444]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e7c:	f043 0304 	orr.w	r3, r3, #4
 8007e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e82:	4b6c      	ldr	r3, [pc, #432]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e86:	4a6b      	ldr	r2, [pc, #428]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e8e:	e00b      	b.n	8007ea8 <HAL_RCC_OscConfig+0x5e0>
 8007e90:	4b68      	ldr	r3, [pc, #416]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e94:	4a67      	ldr	r2, [pc, #412]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e96:	f023 0301 	bic.w	r3, r3, #1
 8007e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e9c:	4b65      	ldr	r3, [pc, #404]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ea0:	4a64      	ldr	r2, [pc, #400]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007ea2:	f023 0304 	bic.w	r3, r3, #4
 8007ea6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d015      	beq.n	8007edc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb0:	f7fc fd92 	bl	80049d8 <HAL_GetTick>
 8007eb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eb6:	e00a      	b.n	8007ece <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eb8:	f7fc fd8e 	bl	80049d8 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e14e      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ece:	4b59      	ldr	r3, [pc, #356]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0ee      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x5f0>
 8007eda:	e014      	b.n	8007f06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007edc:	f7fc fd7c 	bl	80049d8 <HAL_GetTick>
 8007ee0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ee2:	e00a      	b.n	8007efa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ee4:	f7fc fd78 	bl	80049d8 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e138      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007efa:	4b4e      	ldr	r3, [pc, #312]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1ee      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 812d 	beq.w	800816a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f10:	4b48      	ldr	r3, [pc, #288]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f18:	2b18      	cmp	r3, #24
 8007f1a:	f000 80bd 	beq.w	8008098 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	f040 809e 	bne.w	8008064 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f28:	4b42      	ldr	r3, [pc, #264]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a41      	ldr	r2, [pc, #260]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f34:	f7fc fd50 	bl	80049d8 <HAL_GetTick>
 8007f38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f3a:	e008      	b.n	8007f4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f3c:	f7fc fd4c 	bl	80049d8 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e10e      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f4e:	4b39      	ldr	r3, [pc, #228]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1f0      	bne.n	8007f3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f5a:	4b36      	ldr	r3, [pc, #216]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007f5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f5e:	4b37      	ldr	r3, [pc, #220]	@ (800803c <HAL_RCC_OscConfig+0x774>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007f6a:	0112      	lsls	r2, r2, #4
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	4931      	ldr	r1, [pc, #196]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f82:	3b01      	subs	r3, #1
 8007f84:	025b      	lsls	r3, r3, #9
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	041b      	lsls	r3, r3, #16
 8007f92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	061b      	lsls	r3, r3, #24
 8007fa0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007fa4:	4923      	ldr	r1, [pc, #140]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007faa:	4b22      	ldr	r3, [pc, #136]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fae:	4a21      	ldr	r2, [pc, #132]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007fb0:	f023 0301 	bic.w	r3, r3, #1
 8007fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fba:	4b21      	ldr	r3, [pc, #132]	@ (8008040 <HAL_RCC_OscConfig+0x778>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007fc2:	00d2      	lsls	r2, r2, #3
 8007fc4:	491b      	ldr	r1, [pc, #108]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007fca:	4b1a      	ldr	r3, [pc, #104]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fce:	f023 020c 	bic.w	r2, r3, #12
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd6:	4917      	ldr	r1, [pc, #92]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007fdc:	4b15      	ldr	r3, [pc, #84]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe0:	f023 0202 	bic.w	r2, r3, #2
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe8:	4912      	ldr	r1, [pc, #72]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fee:	4b11      	ldr	r3, [pc, #68]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff2:	4a10      	ldr	r2, [pc, #64]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8007ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8008000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008004:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008006:	4b0b      	ldr	r3, [pc, #44]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8008008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800a:	4a0a      	ldr	r2, [pc, #40]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 800800c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008010:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008012:	4b08      	ldr	r3, [pc, #32]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8008014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008016:	4a07      	ldr	r2, [pc, #28]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8008018:	f043 0301 	orr.w	r3, r3, #1
 800801c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800801e:	4b05      	ldr	r3, [pc, #20]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a04      	ldr	r2, [pc, #16]	@ (8008034 <HAL_RCC_OscConfig+0x76c>)
 8008024:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802a:	f7fc fcd5 	bl	80049d8 <HAL_GetTick>
 800802e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008030:	e011      	b.n	8008056 <HAL_RCC_OscConfig+0x78e>
 8008032:	bf00      	nop
 8008034:	58024400 	.word	0x58024400
 8008038:	58024800 	.word	0x58024800
 800803c:	fffffc0c 	.word	0xfffffc0c
 8008040:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008044:	f7fc fcc8 	bl	80049d8 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e08a      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008056:	4b47      	ldr	r3, [pc, #284]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0f0      	beq.n	8008044 <HAL_RCC_OscConfig+0x77c>
 8008062:	e082      	b.n	800816a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008064:	4b43      	ldr	r3, [pc, #268]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a42      	ldr	r2, [pc, #264]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 800806a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800806e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fc fcb2 	bl	80049d8 <HAL_GetTick>
 8008074:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008078:	f7fc fcae 	bl	80049d8 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e070      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800808a:	4b3a      	ldr	r3, [pc, #232]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x7b0>
 8008096:	e068      	b.n	800816a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008098:	4b36      	ldr	r3, [pc, #216]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 800809a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800809e:	4b35      	ldr	r3, [pc, #212]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 80080a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d031      	beq.n	8008110 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f003 0203 	and.w	r2, r3, #3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d12a      	bne.n	8008110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	091b      	lsrs	r3, r3, #4
 80080be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d122      	bne.n	8008110 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d11a      	bne.n	8008110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	0a5b      	lsrs	r3, r3, #9
 80080de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d111      	bne.n	8008110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	0c1b      	lsrs	r3, r3, #16
 80080f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d108      	bne.n	8008110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	0e1b      	lsrs	r3, r3, #24
 8008102:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800810a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800810c:	429a      	cmp	r2, r3
 800810e:	d001      	beq.n	8008114 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e02b      	b.n	800816c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008114:	4b17      	ldr	r3, [pc, #92]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 8008116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008118:	08db      	lsrs	r3, r3, #3
 800811a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800811e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	429a      	cmp	r2, r3
 8008128:	d01f      	beq.n	800816a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800812a:	4b12      	ldr	r3, [pc, #72]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 800812c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812e:	4a11      	ldr	r2, [pc, #68]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 8008130:	f023 0301 	bic.w	r3, r3, #1
 8008134:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008136:	f7fc fc4f 	bl	80049d8 <HAL_GetTick>
 800813a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800813c:	bf00      	nop
 800813e:	f7fc fc4b 	bl	80049d8 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	4293      	cmp	r3, r2
 8008148:	d0f9      	beq.n	800813e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800814a:	4b0a      	ldr	r3, [pc, #40]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 800814c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800814e:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <HAL_RCC_OscConfig+0x8b0>)
 8008150:	4013      	ands	r3, r2
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008156:	00d2      	lsls	r2, r2, #3
 8008158:	4906      	ldr	r1, [pc, #24]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 800815a:	4313      	orrs	r3, r2
 800815c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800815e:	4b05      	ldr	r3, [pc, #20]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 8008160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008162:	4a04      	ldr	r2, [pc, #16]	@ (8008174 <HAL_RCC_OscConfig+0x8ac>)
 8008164:	f043 0301 	orr.w	r3, r3, #1
 8008168:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3730      	adds	r7, #48	@ 0x30
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	58024400 	.word	0x58024400
 8008178:	ffff0007 	.word	0xffff0007

0800817c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e19c      	b.n	80084ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008190:	4b8a      	ldr	r3, [pc, #552]	@ (80083bc <HAL_RCC_ClockConfig+0x240>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 030f 	and.w	r3, r3, #15
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d910      	bls.n	80081c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800819e:	4b87      	ldr	r3, [pc, #540]	@ (80083bc <HAL_RCC_ClockConfig+0x240>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f023 020f 	bic.w	r2, r3, #15
 80081a6:	4985      	ldr	r1, [pc, #532]	@ (80083bc <HAL_RCC_ClockConfig+0x240>)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ae:	4b83      	ldr	r3, [pc, #524]	@ (80083bc <HAL_RCC_ClockConfig+0x240>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d001      	beq.n	80081c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e184      	b.n	80084ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d010      	beq.n	80081ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	691a      	ldr	r2, [r3, #16]
 80081d0:	4b7b      	ldr	r3, [pc, #492]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081d8:	429a      	cmp	r2, r3
 80081da:	d908      	bls.n	80081ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081dc:	4b78      	ldr	r3, [pc, #480]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	4975      	ldr	r1, [pc, #468]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d010      	beq.n	800821c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695a      	ldr	r2, [r3, #20]
 80081fe:	4b70      	ldr	r3, [pc, #448]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008206:	429a      	cmp	r2, r3
 8008208:	d908      	bls.n	800821c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800820a:	4b6d      	ldr	r3, [pc, #436]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	496a      	ldr	r1, [pc, #424]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 8008218:	4313      	orrs	r3, r2
 800821a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b00      	cmp	r3, #0
 8008226:	d010      	beq.n	800824a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	699a      	ldr	r2, [r3, #24]
 800822c:	4b64      	ldr	r3, [pc, #400]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008234:	429a      	cmp	r2, r3
 8008236:	d908      	bls.n	800824a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008238:	4b61      	ldr	r3, [pc, #388]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	495e      	ldr	r1, [pc, #376]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 8008246:	4313      	orrs	r3, r2
 8008248:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d010      	beq.n	8008278 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69da      	ldr	r2, [r3, #28]
 800825a:	4b59      	ldr	r3, [pc, #356]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008262:	429a      	cmp	r2, r3
 8008264:	d908      	bls.n	8008278 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008266:	4b56      	ldr	r3, [pc, #344]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	4953      	ldr	r1, [pc, #332]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 8008274:	4313      	orrs	r3, r2
 8008276:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d010      	beq.n	80082a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	4b4d      	ldr	r3, [pc, #308]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	429a      	cmp	r2, r3
 8008292:	d908      	bls.n	80082a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008294:	4b4a      	ldr	r3, [pc, #296]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	f023 020f 	bic.w	r2, r3, #15
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	4947      	ldr	r1, [pc, #284]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d055      	beq.n	800835e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80082b2:	4b43      	ldr	r3, [pc, #268]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	4940      	ldr	r1, [pc, #256]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d107      	bne.n	80082dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082cc:	4b3c      	ldr	r3, [pc, #240]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d121      	bne.n	800831c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e0f6      	b.n	80084ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d107      	bne.n	80082f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082e4:	4b36      	ldr	r3, [pc, #216]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d115      	bne.n	800831c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e0ea      	b.n	80084ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d107      	bne.n	800830c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082fc:	4b30      	ldr	r3, [pc, #192]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008304:	2b00      	cmp	r3, #0
 8008306:	d109      	bne.n	800831c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e0de      	b.n	80084ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800830c:	4b2c      	ldr	r3, [pc, #176]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e0d6      	b.n	80084ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800831c:	4b28      	ldr	r3, [pc, #160]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	f023 0207 	bic.w	r2, r3, #7
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	4925      	ldr	r1, [pc, #148]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 800832a:	4313      	orrs	r3, r2
 800832c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800832e:	f7fc fb53 	bl	80049d8 <HAL_GetTick>
 8008332:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008334:	e00a      	b.n	800834c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008336:	f7fc fb4f 	bl	80049d8 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008344:	4293      	cmp	r3, r2
 8008346:	d901      	bls.n	800834c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e0be      	b.n	80084ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800834c:	4b1c      	ldr	r3, [pc, #112]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	429a      	cmp	r2, r3
 800835c:	d1eb      	bne.n	8008336 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d010      	beq.n	800838c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	4b14      	ldr	r3, [pc, #80]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	429a      	cmp	r2, r3
 8008378:	d208      	bcs.n	800838c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800837a:	4b11      	ldr	r3, [pc, #68]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	f023 020f 	bic.w	r2, r3, #15
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	490e      	ldr	r1, [pc, #56]	@ (80083c0 <HAL_RCC_ClockConfig+0x244>)
 8008388:	4313      	orrs	r3, r2
 800838a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800838c:	4b0b      	ldr	r3, [pc, #44]	@ (80083bc <HAL_RCC_ClockConfig+0x240>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 030f 	and.w	r3, r3, #15
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	429a      	cmp	r2, r3
 8008398:	d214      	bcs.n	80083c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800839a:	4b08      	ldr	r3, [pc, #32]	@ (80083bc <HAL_RCC_ClockConfig+0x240>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f023 020f 	bic.w	r2, r3, #15
 80083a2:	4906      	ldr	r1, [pc, #24]	@ (80083bc <HAL_RCC_ClockConfig+0x240>)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083aa:	4b04      	ldr	r3, [pc, #16]	@ (80083bc <HAL_RCC_ClockConfig+0x240>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 030f 	and.w	r3, r3, #15
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d005      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e086      	b.n	80084ca <HAL_RCC_ClockConfig+0x34e>
 80083bc:	52002000 	.word	0x52002000
 80083c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d010      	beq.n	80083f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691a      	ldr	r2, [r3, #16]
 80083d4:	4b3f      	ldr	r3, [pc, #252]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083dc:	429a      	cmp	r2, r3
 80083de:	d208      	bcs.n	80083f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083e0:	4b3c      	ldr	r3, [pc, #240]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	4939      	ldr	r1, [pc, #228]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0308 	and.w	r3, r3, #8
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d010      	beq.n	8008420 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	695a      	ldr	r2, [r3, #20]
 8008402:	4b34      	ldr	r3, [pc, #208]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800840a:	429a      	cmp	r2, r3
 800840c:	d208      	bcs.n	8008420 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800840e:	4b31      	ldr	r3, [pc, #196]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	492e      	ldr	r1, [pc, #184]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 800841c:	4313      	orrs	r3, r2
 800841e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b00      	cmp	r3, #0
 800842a:	d010      	beq.n	800844e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699a      	ldr	r2, [r3, #24]
 8008430:	4b28      	ldr	r3, [pc, #160]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008438:	429a      	cmp	r2, r3
 800843a:	d208      	bcs.n	800844e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800843c:	4b25      	ldr	r3, [pc, #148]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	4922      	ldr	r1, [pc, #136]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 800844a:	4313      	orrs	r3, r2
 800844c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d010      	beq.n	800847c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	69da      	ldr	r2, [r3, #28]
 800845e:	4b1d      	ldr	r3, [pc, #116]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008466:	429a      	cmp	r2, r3
 8008468:	d208      	bcs.n	800847c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800846a:	4b1a      	ldr	r3, [pc, #104]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	4917      	ldr	r1, [pc, #92]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 8008478:	4313      	orrs	r3, r2
 800847a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800847c:	f000 f844 	bl	8008508 <HAL_RCC_GetSysClockFreq>
 8008480:	4602      	mov	r2, r0
 8008482:	4b14      	ldr	r3, [pc, #80]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	0a1b      	lsrs	r3, r3, #8
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	4912      	ldr	r1, [pc, #72]	@ (80084d8 <HAL_RCC_ClockConfig+0x35c>)
 800848e:	5ccb      	ldrb	r3, [r1, r3]
 8008490:	f003 031f 	and.w	r3, r3, #31
 8008494:	fa22 f303 	lsr.w	r3, r2, r3
 8008498:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800849a:	4b0e      	ldr	r3, [pc, #56]	@ (80084d4 <HAL_RCC_ClockConfig+0x358>)
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	f003 030f 	and.w	r3, r3, #15
 80084a2:	4a0d      	ldr	r2, [pc, #52]	@ (80084d8 <HAL_RCC_ClockConfig+0x35c>)
 80084a4:	5cd3      	ldrb	r3, [r2, r3]
 80084a6:	f003 031f 	and.w	r3, r3, #31
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	fa22 f303 	lsr.w	r3, r2, r3
 80084b0:	4a0a      	ldr	r2, [pc, #40]	@ (80084dc <HAL_RCC_ClockConfig+0x360>)
 80084b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084b4:	4a0a      	ldr	r2, [pc, #40]	@ (80084e0 <HAL_RCC_ClockConfig+0x364>)
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80084ba:	4b0a      	ldr	r3, [pc, #40]	@ (80084e4 <HAL_RCC_ClockConfig+0x368>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fc fa40 	bl	8004944 <HAL_InitTick>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	58024400 	.word	0x58024400
 80084d8:	0801917c 	.word	0x0801917c
 80084dc:	24000028 	.word	0x24000028
 80084e0:	24000024 	.word	0x24000024
 80084e4:	2400002c 	.word	0x2400002c

080084e8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <HAL_RCC_EnableCSS+0x1c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a04      	ldr	r2, [pc, #16]	@ (8008504 <HAL_RCC_EnableCSS+0x1c>)
 80084f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084f6:	6013      	str	r3, [r2, #0]
}
 80084f8:	bf00      	nop
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	58024400 	.word	0x58024400

08008508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008508:	b480      	push	{r7}
 800850a:	b089      	sub	sp, #36	@ 0x24
 800850c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800850e:	4bb3      	ldr	r3, [pc, #716]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008516:	2b18      	cmp	r3, #24
 8008518:	f200 8155 	bhi.w	80087c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800851c:	a201      	add	r2, pc, #4	@ (adr r2, 8008524 <HAL_RCC_GetSysClockFreq+0x1c>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008589 	.word	0x08008589
 8008528:	080087c7 	.word	0x080087c7
 800852c:	080087c7 	.word	0x080087c7
 8008530:	080087c7 	.word	0x080087c7
 8008534:	080087c7 	.word	0x080087c7
 8008538:	080087c7 	.word	0x080087c7
 800853c:	080087c7 	.word	0x080087c7
 8008540:	080087c7 	.word	0x080087c7
 8008544:	080085af 	.word	0x080085af
 8008548:	080087c7 	.word	0x080087c7
 800854c:	080087c7 	.word	0x080087c7
 8008550:	080087c7 	.word	0x080087c7
 8008554:	080087c7 	.word	0x080087c7
 8008558:	080087c7 	.word	0x080087c7
 800855c:	080087c7 	.word	0x080087c7
 8008560:	080087c7 	.word	0x080087c7
 8008564:	080085b5 	.word	0x080085b5
 8008568:	080087c7 	.word	0x080087c7
 800856c:	080087c7 	.word	0x080087c7
 8008570:	080087c7 	.word	0x080087c7
 8008574:	080087c7 	.word	0x080087c7
 8008578:	080087c7 	.word	0x080087c7
 800857c:	080087c7 	.word	0x080087c7
 8008580:	080087c7 	.word	0x080087c7
 8008584:	080085bb 	.word	0x080085bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008588:	4b94      	ldr	r3, [pc, #592]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b00      	cmp	r3, #0
 8008592:	d009      	beq.n	80085a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008594:	4b91      	ldr	r3, [pc, #580]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	08db      	lsrs	r3, r3, #3
 800859a:	f003 0303 	and.w	r3, r3, #3
 800859e:	4a90      	ldr	r2, [pc, #576]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085a0:	fa22 f303 	lsr.w	r3, r2, r3
 80085a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80085a6:	e111      	b.n	80087cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80085a8:	4b8d      	ldr	r3, [pc, #564]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085aa:	61bb      	str	r3, [r7, #24]
      break;
 80085ac:	e10e      	b.n	80087cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80085ae:	4b8d      	ldr	r3, [pc, #564]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085b0:	61bb      	str	r3, [r7, #24]
      break;
 80085b2:	e10b      	b.n	80087cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80085b4:	4b8c      	ldr	r3, [pc, #560]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80085b6:	61bb      	str	r3, [r7, #24]
      break;
 80085b8:	e108      	b.n	80087cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085ba:	4b88      	ldr	r3, [pc, #544]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085be:	f003 0303 	and.w	r3, r3, #3
 80085c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80085c4:	4b85      	ldr	r3, [pc, #532]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c8:	091b      	lsrs	r3, r3, #4
 80085ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80085d0:	4b82      	ldr	r3, [pc, #520]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80085da:	4b80      	ldr	r3, [pc, #512]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085de:	08db      	lsrs	r3, r3, #3
 80085e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	fb02 f303 	mul.w	r3, r2, r3
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 80e1 	beq.w	80087c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b02      	cmp	r3, #2
 8008602:	f000 8083 	beq.w	800870c <HAL_RCC_GetSysClockFreq+0x204>
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b02      	cmp	r3, #2
 800860a:	f200 80a1 	bhi.w	8008750 <HAL_RCC_GetSysClockFreq+0x248>
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_RCC_GetSysClockFreq+0x114>
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d056      	beq.n	80086c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800861a:	e099      	b.n	8008750 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800861c:	4b6f      	ldr	r3, [pc, #444]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b00      	cmp	r3, #0
 8008626:	d02d      	beq.n	8008684 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008628:	4b6c      	ldr	r3, [pc, #432]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	08db      	lsrs	r3, r3, #3
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	4a6b      	ldr	r2, [pc, #428]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008634:	fa22 f303 	lsr.w	r3, r2, r3
 8008638:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	ee07 3a90 	vmov	s15, r3
 8008640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008652:	4b62      	ldr	r3, [pc, #392]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865a:	ee07 3a90 	vmov	s15, r3
 800865e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008662:	ed97 6a02 	vldr	s12, [r7, #8]
 8008666:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80087ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800866a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800866e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008682:	e087      	b.n	8008794 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80087f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008696:	4b51      	ldr	r3, [pc, #324]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80086aa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80087ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80086ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086c6:	e065      	b.n	8008794 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80087f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80086d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086da:	4b40      	ldr	r3, [pc, #256]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80087ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80086f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800870a:	e043      	b.n	8008794 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80087f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800871a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871e:	4b2f      	ldr	r3, [pc, #188]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008732:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80087ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800874e:	e021      	b.n	8008794 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80087f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800875e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008762:	4b1e      	ldr	r3, [pc, #120]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008772:	ed97 6a02 	vldr	s12, [r7, #8]
 8008776:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80087ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800877a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008792:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008794:	4b11      	ldr	r3, [pc, #68]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008798:	0a5b      	lsrs	r3, r3, #9
 800879a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800879e:	3301      	adds	r3, #1
 80087a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80087b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b8:	ee17 3a90 	vmov	r3, s15
 80087bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80087be:	e005      	b.n	80087cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	61bb      	str	r3, [r7, #24]
      break;
 80087c4:	e002      	b.n	80087cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80087c6:	4b07      	ldr	r3, [pc, #28]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087c8:	61bb      	str	r3, [r7, #24]
      break;
 80087ca:	bf00      	nop
  }

  return sysclockfreq;
 80087cc:	69bb      	ldr	r3, [r7, #24]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3724      	adds	r7, #36	@ 0x24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	58024400 	.word	0x58024400
 80087e0:	03d09000 	.word	0x03d09000
 80087e4:	003d0900 	.word	0x003d0900
 80087e8:	017d7840 	.word	0x017d7840
 80087ec:	46000000 	.word	0x46000000
 80087f0:	4c742400 	.word	0x4c742400
 80087f4:	4a742400 	.word	0x4a742400
 80087f8:	4bbebc20 	.word	0x4bbebc20

080087fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008802:	f7ff fe81 	bl	8008508 <HAL_RCC_GetSysClockFreq>
 8008806:	4602      	mov	r2, r0
 8008808:	4b10      	ldr	r3, [pc, #64]	@ (800884c <HAL_RCC_GetHCLKFreq+0x50>)
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	0a1b      	lsrs	r3, r3, #8
 800880e:	f003 030f 	and.w	r3, r3, #15
 8008812:	490f      	ldr	r1, [pc, #60]	@ (8008850 <HAL_RCC_GetHCLKFreq+0x54>)
 8008814:	5ccb      	ldrb	r3, [r1, r3]
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	fa22 f303 	lsr.w	r3, r2, r3
 800881e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008820:	4b0a      	ldr	r3, [pc, #40]	@ (800884c <HAL_RCC_GetHCLKFreq+0x50>)
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	f003 030f 	and.w	r3, r3, #15
 8008828:	4a09      	ldr	r2, [pc, #36]	@ (8008850 <HAL_RCC_GetHCLKFreq+0x54>)
 800882a:	5cd3      	ldrb	r3, [r2, r3]
 800882c:	f003 031f 	and.w	r3, r3, #31
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	fa22 f303 	lsr.w	r3, r2, r3
 8008836:	4a07      	ldr	r2, [pc, #28]	@ (8008854 <HAL_RCC_GetHCLKFreq+0x58>)
 8008838:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800883a:	4a07      	ldr	r2, [pc, #28]	@ (8008858 <HAL_RCC_GetHCLKFreq+0x5c>)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008840:	4b04      	ldr	r3, [pc, #16]	@ (8008854 <HAL_RCC_GetHCLKFreq+0x58>)
 8008842:	681b      	ldr	r3, [r3, #0]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	58024400 	.word	0x58024400
 8008850:	0801917c 	.word	0x0801917c
 8008854:	24000028 	.word	0x24000028
 8008858:	24000024 	.word	0x24000024

0800885c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008860:	f7ff ffcc 	bl	80087fc <HAL_RCC_GetHCLKFreq>
 8008864:	4602      	mov	r2, r0
 8008866:	4b06      	ldr	r3, [pc, #24]	@ (8008880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	091b      	lsrs	r3, r3, #4
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	4904      	ldr	r1, [pc, #16]	@ (8008884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008872:	5ccb      	ldrb	r3, [r1, r3]
 8008874:	f003 031f 	and.w	r3, r3, #31
 8008878:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800887c:	4618      	mov	r0, r3
 800887e:	bd80      	pop	{r7, pc}
 8008880:	58024400 	.word	0x58024400
 8008884:	0801917c 	.word	0x0801917c

08008888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800888c:	f7ff ffb6 	bl	80087fc <HAL_RCC_GetHCLKFreq>
 8008890:	4602      	mov	r2, r0
 8008892:	4b06      	ldr	r3, [pc, #24]	@ (80088ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	0a1b      	lsrs	r3, r3, #8
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	4904      	ldr	r1, [pc, #16]	@ (80088b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800889e:	5ccb      	ldrb	r3, [r1, r3]
 80088a0:	f003 031f 	and.w	r3, r3, #31
 80088a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	58024400 	.word	0x58024400
 80088b0:	0801917c 	.word	0x0801917c

080088b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80088b8:	4b07      	ldr	r3, [pc, #28]	@ (80088d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80088ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088c4:	d105      	bne.n	80088d2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80088c6:	f000 f809 	bl	80088dc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80088ca:	4b03      	ldr	r3, [pc, #12]	@ (80088d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80088cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80088d0:	669a      	str	r2, [r3, #104]	@ 0x68
  }
}
 80088d2:	bf00      	nop
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	58024400 	.word	0x58024400

080088dc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80088dc:	b480      	push	{r7}
 80088de:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80088e0:	bf00      	nop
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
	...

080088ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088f0:	b0ca      	sub	sp, #296	@ 0x128
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088f8:	2300      	movs	r3, #0
 80088fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088fe:	2300      	movs	r3, #0
 8008900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008910:	2500      	movs	r5, #0
 8008912:	ea54 0305 	orrs.w	r3, r4, r5
 8008916:	d049      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800891e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008922:	d02f      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008924:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008928:	d828      	bhi.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800892a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800892e:	d01a      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008930:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008934:	d822      	bhi.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800893a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800893e:	d007      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008940:	e01c      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008942:	4bb8      	ldr	r3, [pc, #736]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	4ab7      	ldr	r2, [pc, #732]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800894c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800894e:	e01a      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008954:	3308      	adds	r3, #8
 8008956:	2102      	movs	r1, #2
 8008958:	4618      	mov	r0, r3
 800895a:	f002 fb61 	bl	800b020 <RCCEx_PLL2_Config>
 800895e:	4603      	mov	r3, r0
 8008960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008964:	e00f      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896a:	3328      	adds	r3, #40	@ 0x28
 800896c:	2102      	movs	r1, #2
 800896e:	4618      	mov	r0, r3
 8008970:	f002 fc08 	bl	800b184 <RCCEx_PLL3_Config>
 8008974:	4603      	mov	r3, r0
 8008976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800897a:	e004      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008982:	e000      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800898e:	4ba5      	ldr	r3, [pc, #660]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008992:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800899c:	4aa1      	ldr	r2, [pc, #644]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800899e:	430b      	orrs	r3, r1
 80089a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80089a2:	e003      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80089ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80089b8:	f04f 0900 	mov.w	r9, #0
 80089bc:	ea58 0309 	orrs.w	r3, r8, r9
 80089c0:	d047      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d82a      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80089cc:	a201      	add	r2, pc, #4	@ (adr r2, 80089d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80089ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d2:	bf00      	nop
 80089d4:	080089e9 	.word	0x080089e9
 80089d8:	080089f7 	.word	0x080089f7
 80089dc:	08008a0d 	.word	0x08008a0d
 80089e0:	08008a2b 	.word	0x08008a2b
 80089e4:	08008a2b 	.word	0x08008a2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e8:	4b8e      	ldr	r3, [pc, #568]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ec:	4a8d      	ldr	r2, [pc, #564]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089f4:	e01a      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fa:	3308      	adds	r3, #8
 80089fc:	2100      	movs	r1, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f002 fb0e 	bl	800b020 <RCCEx_PLL2_Config>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a0a:	e00f      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a10:	3328      	adds	r3, #40	@ 0x28
 8008a12:	2100      	movs	r1, #0
 8008a14:	4618      	mov	r0, r3
 8008a16:	f002 fbb5 	bl	800b184 <RCCEx_PLL3_Config>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a20:	e004      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a28:	e000      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a34:	4b7b      	ldr	r3, [pc, #492]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a38:	f023 0107 	bic.w	r1, r3, #7
 8008a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a42:	4a78      	ldr	r2, [pc, #480]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a44:	430b      	orrs	r3, r1
 8008a46:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a48:	e003      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008a5e:	f04f 0b00 	mov.w	fp, #0
 8008a62:	ea5a 030b 	orrs.w	r3, sl, fp
 8008a66:	d04c      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a72:	d030      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a78:	d829      	bhi.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008a7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a7c:	d02d      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008a7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a80:	d825      	bhi.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008a82:	2b80      	cmp	r3, #128	@ 0x80
 8008a84:	d018      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008a86:	2b80      	cmp	r3, #128	@ 0x80
 8008a88:	d821      	bhi.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008a8e:	2b40      	cmp	r3, #64	@ 0x40
 8008a90:	d007      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008a92:	e01c      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a94:	4b63      	ldr	r3, [pc, #396]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a98:	4a62      	ldr	r2, [pc, #392]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008aa0:	e01c      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f002 fab8 	bl	800b020 <RCCEx_PLL2_Config>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ab6:	e011      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abc:	3328      	adds	r3, #40	@ 0x28
 8008abe:	2100      	movs	r1, #0
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f002 fb5f 	bl	800b184 <RCCEx_PLL3_Config>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008acc:	e006      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ad4:	e002      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008ad6:	bf00      	nop
 8008ad8:	e000      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10a      	bne.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ae8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008af2:	4a4c      	ldr	r2, [pc, #304]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008af4:	430b      	orrs	r3, r1
 8008af6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008af8:	e003      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008afe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008b0e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008b12:	2300      	movs	r3, #0
 8008b14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008b18:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	d053      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b2e:	d035      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008b30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b34:	d82e      	bhi.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b3a:	d031      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008b3c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b40:	d828      	bhi.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b46:	d01a      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008b48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b4c:	d822      	bhi.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b56:	d007      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008b58:	e01c      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b5a:	4b32      	ldr	r3, [pc, #200]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5e:	4a31      	ldr	r2, [pc, #196]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b66:	e01c      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 fa55 	bl	800b020 <RCCEx_PLL2_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008b7c:	e011      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b82:	3328      	adds	r3, #40	@ 0x28
 8008b84:	2100      	movs	r1, #0
 8008b86:	4618      	mov	r0, r3
 8008b88:	f002 fafc 	bl	800b184 <RCCEx_PLL3_Config>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b92:	e006      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b9a:	e002      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008b9c:	bf00      	nop
 8008b9e:	e000      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10b      	bne.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008baa:	4b1e      	ldr	r3, [pc, #120]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008bba:	4a1a      	ldr	r2, [pc, #104]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bbc:	430b      	orrs	r3, r1
 8008bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bc0:	e003      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008bd6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008be0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008be4:	460b      	mov	r3, r1
 8008be6:	4313      	orrs	r3, r2
 8008be8:	d056      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bf2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bf6:	d038      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008bf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bfc:	d831      	bhi.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008bfe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c02:	d034      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008c04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c08:	d82b      	bhi.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c0e:	d01d      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008c10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c14:	d825      	bhi.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d006      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c1e:	d00a      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008c20:	e01f      	b.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c22:	bf00      	nop
 8008c24:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c28:	4ba2      	ldr	r3, [pc, #648]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2c:	4aa1      	ldr	r2, [pc, #644]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c34:	e01c      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f002 f9ee 	bl	800b020 <RCCEx_PLL2_Config>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008c4a:	e011      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c50:	3328      	adds	r3, #40	@ 0x28
 8008c52:	2100      	movs	r1, #0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f002 fa95 	bl	800b184 <RCCEx_PLL3_Config>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c60:	e006      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c68:	e002      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008c6a:	bf00      	nop
 8008c6c:	e000      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10b      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008c78:	4b8e      	ldr	r3, [pc, #568]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c88:	4a8a      	ldr	r2, [pc, #552]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c8e:	e003      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008cae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	d03a      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cbe:	2b30      	cmp	r3, #48	@ 0x30
 8008cc0:	d01f      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008cc2:	2b30      	cmp	r3, #48	@ 0x30
 8008cc4:	d819      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	d00c      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d815      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d019      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008cd2:	2b10      	cmp	r3, #16
 8008cd4:	d111      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cd6:	4b77      	ldr	r3, [pc, #476]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cda:	4a76      	ldr	r2, [pc, #472]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ce2:	e011      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce8:	3308      	adds	r3, #8
 8008cea:	2102      	movs	r1, #2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f002 f997 	bl	800b020 <RCCEx_PLL2_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008cf8:	e006      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d00:	e002      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008d02:	bf00      	nop
 8008d04:	e000      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d10:	4b68      	ldr	r3, [pc, #416]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d14:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d1e:	4a65      	ldr	r2, [pc, #404]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d20:	430b      	orrs	r3, r1
 8008d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d24:	e003      	b.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008d3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008d44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	d051      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d58:	d035      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008d5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d5e:	d82e      	bhi.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008d60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d64:	d031      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008d66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d6a:	d828      	bhi.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d70:	d01a      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d76:	d822      	bhi.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d80:	d007      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008d82:	e01c      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d84:	4b4b      	ldr	r3, [pc, #300]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	4a4a      	ldr	r2, [pc, #296]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d90:	e01c      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d96:	3308      	adds	r3, #8
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f002 f940 	bl	800b020 <RCCEx_PLL2_Config>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008da6:	e011      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dac:	3328      	adds	r3, #40	@ 0x28
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f002 f9e7 	bl	800b184 <RCCEx_PLL3_Config>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008dbc:	e006      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dc4:	e002      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008dc6:	bf00      	nop
 8008dc8:	e000      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008dd4:	4b37      	ldr	r3, [pc, #220]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dd8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008de2:	4a34      	ldr	r2, [pc, #208]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008de4:	430b      	orrs	r3, r1
 8008de6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008de8:	e003      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e02:	2300      	movs	r3, #0
 8008e04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008e08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	d056      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e1c:	d033      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008e1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e22:	d82c      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e28:	d02f      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008e2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e2e:	d826      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e34:	d02b      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008e36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e3a:	d820      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e40:	d012      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008e42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e46:	d81a      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d022      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e50:	d115      	bne.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e56:	3308      	adds	r3, #8
 8008e58:	2101      	movs	r1, #1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f002 f8e0 	bl	800b020 <RCCEx_PLL2_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008e66:	e015      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6c:	3328      	adds	r3, #40	@ 0x28
 8008e6e:	2101      	movs	r1, #1
 8008e70:	4618      	mov	r0, r3
 8008e72:	f002 f987 	bl	800b184 <RCCEx_PLL3_Config>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008e7c:	e00a      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e84:	e006      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008e86:	bf00      	nop
 8008e88:	e004      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008e8a:	bf00      	nop
 8008e8c:	e002      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008e8e:	bf00      	nop
 8008e90:	e000      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10d      	bne.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e9c:	4b05      	ldr	r3, [pc, #20]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eaa:	4a02      	ldr	r2, [pc, #8]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eac:	430b      	orrs	r3, r1
 8008eae:	6513      	str	r3, [r2, #80]	@ 0x50
 8008eb0:	e006      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008eb2:	bf00      	nop
 8008eb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ebc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ed6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4313      	orrs	r3, r2
 8008ede:	d055      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eec:	d033      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ef2:	d82c      	bhi.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ef8:	d02f      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008efe:	d826      	bhi.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f04:	d02b      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008f06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f0a:	d820      	bhi.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f10:	d012      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f16:	d81a      	bhi.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d022      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f20:	d115      	bne.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f26:	3308      	adds	r3, #8
 8008f28:	2101      	movs	r1, #1
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f002 f878 	bl	800b020 <RCCEx_PLL2_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f36:	e015      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3c:	3328      	adds	r3, #40	@ 0x28
 8008f3e:	2101      	movs	r1, #1
 8008f40:	4618      	mov	r0, r3
 8008f42:	f002 f91f 	bl	800b184 <RCCEx_PLL3_Config>
 8008f46:	4603      	mov	r3, r0
 8008f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f4c:	e00a      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f54:	e006      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008f56:	bf00      	nop
 8008f58:	e004      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008f5a:	bf00      	nop
 8008f5c:	e002      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008f5e:	bf00      	nop
 8008f60:	e000      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10b      	bne.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f6c:	4ba3      	ldr	r3, [pc, #652]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f70:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008f7c:	4a9f      	ldr	r2, [pc, #636]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f82:	e003      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008f98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	d037      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fbc:	d816      	bhi.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d018      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fc6:	d111      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fcc:	4a8b      	ldr	r2, [pc, #556]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008fd4:	e00f      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fda:	3308      	adds	r3, #8
 8008fdc:	2101      	movs	r1, #1
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f002 f81e 	bl	800b020 <RCCEx_PLL2_Config>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008fea:	e004      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ff2:	e000      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009002:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800900c:	4a7b      	ldr	r2, [pc, #492]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800900e:	430b      	orrs	r3, r1
 8009010:	6513      	str	r3, [r2, #80]	@ 0x50
 8009012:	e003      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800901c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800902c:	2300      	movs	r3, #0
 800902e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009032:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009036:	460b      	mov	r3, r1
 8009038:	4313      	orrs	r3, r2
 800903a:	d039      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800903c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009042:	2b03      	cmp	r3, #3
 8009044:	d81c      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009046:	a201      	add	r2, pc, #4	@ (adr r2, 800904c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	08009089 	.word	0x08009089
 8009050:	0800905d 	.word	0x0800905d
 8009054:	0800906b 	.word	0x0800906b
 8009058:	08009089 	.word	0x08009089
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800905c:	4b67      	ldr	r3, [pc, #412]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800905e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009060:	4a66      	ldr	r2, [pc, #408]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009068:	e00f      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906e:	3308      	adds	r3, #8
 8009070:	2102      	movs	r1, #2
 8009072:	4618      	mov	r0, r3
 8009074:	f001 ffd4 	bl	800b020 <RCCEx_PLL2_Config>
 8009078:	4603      	mov	r3, r0
 800907a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800907e:	e004      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009086:	e000      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800908a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10a      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009092:	4b5a      	ldr	r3, [pc, #360]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009096:	f023 0103 	bic.w	r1, r3, #3
 800909a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090a0:	4a56      	ldr	r2, [pc, #344]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a2:	430b      	orrs	r3, r1
 80090a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80090a6:	e003      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80090bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090c0:	2300      	movs	r3, #0
 80090c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80090ca:	460b      	mov	r3, r1
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f000 809f 	beq.w	8009210 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090d2:	4b4b      	ldr	r3, [pc, #300]	@ (8009200 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a4a      	ldr	r2, [pc, #296]	@ (8009200 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80090d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090de:	f7fb fc7b 	bl	80049d8 <HAL_GetTick>
 80090e2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090e6:	e00b      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090e8:	f7fb fc76 	bl	80049d8 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b64      	cmp	r3, #100	@ 0x64
 80090f6:	d903      	bls.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090fe:	e005      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009100:	4b3f      	ldr	r3, [pc, #252]	@ (8009200 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009108:	2b00      	cmp	r3, #0
 800910a:	d0ed      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800910c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009110:	2b00      	cmp	r3, #0
 8009112:	d179      	bne.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009114:	4b39      	ldr	r3, [pc, #228]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009116:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009120:	4053      	eors	r3, r2
 8009122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009126:	2b00      	cmp	r3, #0
 8009128:	d015      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800912a:	4b34      	ldr	r3, [pc, #208]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800912c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800912e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009132:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009136:	4b31      	ldr	r3, [pc, #196]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800913a:	4a30      	ldr	r2, [pc, #192]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800913c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009140:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009142:	4b2e      	ldr	r3, [pc, #184]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009146:	4a2d      	ldr	r2, [pc, #180]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800914c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800914e:	4a2b      	ldr	r2, [pc, #172]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009154:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800915a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800915e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009162:	d118      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009164:	f7fb fc38 	bl	80049d8 <HAL_GetTick>
 8009168:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800916c:	e00d      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800916e:	f7fb fc33 	bl	80049d8 <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009178:	1ad2      	subs	r2, r2, r3
 800917a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800917e:	429a      	cmp	r2, r3
 8009180:	d903      	bls.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009188:	e005      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800918a:	4b1c      	ldr	r3, [pc, #112]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800918c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0eb      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919a:	2b00      	cmp	r3, #0
 800919c:	d129      	bne.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80091a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091ae:	d10e      	bne.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80091b0:	4b12      	ldr	r3, [pc, #72]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80091b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80091c0:	091a      	lsrs	r2, r3, #4
 80091c2:	4b10      	ldr	r3, [pc, #64]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80091c4:	4013      	ands	r3, r2
 80091c6:	4a0d      	ldr	r2, [pc, #52]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091c8:	430b      	orrs	r3, r1
 80091ca:	6113      	str	r3, [r2, #16]
 80091cc:	e005      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80091ce:	4b0b      	ldr	r3, [pc, #44]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	4a0a      	ldr	r2, [pc, #40]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80091d8:	6113      	str	r3, [r2, #16]
 80091da:	4b08      	ldr	r3, [pc, #32]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80091de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80091e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ea:	4a04      	ldr	r2, [pc, #16]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ec:	430b      	orrs	r3, r1
 80091ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80091f0:	e00e      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80091fa:	e009      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80091fc:	58024400 	.word	0x58024400
 8009200:	58024800 	.word	0x58024800
 8009204:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800920c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f002 0301 	and.w	r3, r2, #1
 800921c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009220:	2300      	movs	r3, #0
 8009222:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009226:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800922a:	460b      	mov	r3, r1
 800922c:	4313      	orrs	r3, r2
 800922e:	f000 8089 	beq.w	8009344 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009236:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009238:	2b28      	cmp	r3, #40	@ 0x28
 800923a:	d86b      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800923c:	a201      	add	r2, pc, #4	@ (adr r2, 8009244 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800923e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009242:	bf00      	nop
 8009244:	0800931d 	.word	0x0800931d
 8009248:	08009315 	.word	0x08009315
 800924c:	08009315 	.word	0x08009315
 8009250:	08009315 	.word	0x08009315
 8009254:	08009315 	.word	0x08009315
 8009258:	08009315 	.word	0x08009315
 800925c:	08009315 	.word	0x08009315
 8009260:	08009315 	.word	0x08009315
 8009264:	080092e9 	.word	0x080092e9
 8009268:	08009315 	.word	0x08009315
 800926c:	08009315 	.word	0x08009315
 8009270:	08009315 	.word	0x08009315
 8009274:	08009315 	.word	0x08009315
 8009278:	08009315 	.word	0x08009315
 800927c:	08009315 	.word	0x08009315
 8009280:	08009315 	.word	0x08009315
 8009284:	080092ff 	.word	0x080092ff
 8009288:	08009315 	.word	0x08009315
 800928c:	08009315 	.word	0x08009315
 8009290:	08009315 	.word	0x08009315
 8009294:	08009315 	.word	0x08009315
 8009298:	08009315 	.word	0x08009315
 800929c:	08009315 	.word	0x08009315
 80092a0:	08009315 	.word	0x08009315
 80092a4:	0800931d 	.word	0x0800931d
 80092a8:	08009315 	.word	0x08009315
 80092ac:	08009315 	.word	0x08009315
 80092b0:	08009315 	.word	0x08009315
 80092b4:	08009315 	.word	0x08009315
 80092b8:	08009315 	.word	0x08009315
 80092bc:	08009315 	.word	0x08009315
 80092c0:	08009315 	.word	0x08009315
 80092c4:	0800931d 	.word	0x0800931d
 80092c8:	08009315 	.word	0x08009315
 80092cc:	08009315 	.word	0x08009315
 80092d0:	08009315 	.word	0x08009315
 80092d4:	08009315 	.word	0x08009315
 80092d8:	08009315 	.word	0x08009315
 80092dc:	08009315 	.word	0x08009315
 80092e0:	08009315 	.word	0x08009315
 80092e4:	0800931d 	.word	0x0800931d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ec:	3308      	adds	r3, #8
 80092ee:	2101      	movs	r1, #1
 80092f0:	4618      	mov	r0, r3
 80092f2:	f001 fe95 	bl	800b020 <RCCEx_PLL2_Config>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80092fc:	e00f      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009302:	3328      	adds	r3, #40	@ 0x28
 8009304:	2101      	movs	r1, #1
 8009306:	4618      	mov	r0, r3
 8009308:	f001 ff3c 	bl	800b184 <RCCEx_PLL3_Config>
 800930c:	4603      	mov	r3, r0
 800930e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009312:	e004      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800931a:	e000      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800931c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800931e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009326:	4bbf      	ldr	r3, [pc, #764]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800932a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800932e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009334:	4abb      	ldr	r2, [pc, #748]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009336:	430b      	orrs	r3, r1
 8009338:	6553      	str	r3, [r2, #84]	@ 0x54
 800933a:	e003      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f002 0302 	and.w	r3, r2, #2
 8009350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800935a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800935e:	460b      	mov	r3, r1
 8009360:	4313      	orrs	r3, r2
 8009362:	d041      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800936a:	2b05      	cmp	r3, #5
 800936c:	d824      	bhi.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800936e:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	080093c1 	.word	0x080093c1
 8009378:	0800938d 	.word	0x0800938d
 800937c:	080093a3 	.word	0x080093a3
 8009380:	080093c1 	.word	0x080093c1
 8009384:	080093c1 	.word	0x080093c1
 8009388:	080093c1 	.word	0x080093c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800938c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009390:	3308      	adds	r3, #8
 8009392:	2101      	movs	r1, #1
 8009394:	4618      	mov	r0, r3
 8009396:	f001 fe43 	bl	800b020 <RCCEx_PLL2_Config>
 800939a:	4603      	mov	r3, r0
 800939c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80093a0:	e00f      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a6:	3328      	adds	r3, #40	@ 0x28
 80093a8:	2101      	movs	r1, #1
 80093aa:	4618      	mov	r0, r3
 80093ac:	f001 feea 	bl	800b184 <RCCEx_PLL3_Config>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80093b6:	e004      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093be:	e000      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80093c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80093ca:	4b96      	ldr	r3, [pc, #600]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ce:	f023 0107 	bic.w	r1, r3, #7
 80093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093d8:	4a92      	ldr	r2, [pc, #584]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093da:	430b      	orrs	r3, r1
 80093dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80093de:	e003      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f002 0304 	and.w	r3, r2, #4
 80093f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093f8:	2300      	movs	r3, #0
 80093fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009402:	460b      	mov	r3, r1
 8009404:	4313      	orrs	r3, r2
 8009406:	d044      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800940c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009410:	2b05      	cmp	r3, #5
 8009412:	d825      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009414:	a201      	add	r2, pc, #4	@ (adr r2, 800941c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941a:	bf00      	nop
 800941c:	08009469 	.word	0x08009469
 8009420:	08009435 	.word	0x08009435
 8009424:	0800944b 	.word	0x0800944b
 8009428:	08009469 	.word	0x08009469
 800942c:	08009469 	.word	0x08009469
 8009430:	08009469 	.word	0x08009469
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009438:	3308      	adds	r3, #8
 800943a:	2101      	movs	r1, #1
 800943c:	4618      	mov	r0, r3
 800943e:	f001 fdef 	bl	800b020 <RCCEx_PLL2_Config>
 8009442:	4603      	mov	r3, r0
 8009444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009448:	e00f      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800944a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800944e:	3328      	adds	r3, #40	@ 0x28
 8009450:	2101      	movs	r1, #1
 8009452:	4618      	mov	r0, r3
 8009454:	f001 fe96 	bl	800b184 <RCCEx_PLL3_Config>
 8009458:	4603      	mov	r3, r0
 800945a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800945e:	e004      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009466:	e000      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800946a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10b      	bne.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009472:	4b6c      	ldr	r3, [pc, #432]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009476:	f023 0107 	bic.w	r1, r3, #7
 800947a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009482:	4a68      	ldr	r2, [pc, #416]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009484:	430b      	orrs	r3, r1
 8009486:	6593      	str	r3, [r2, #88]	@ 0x58
 8009488:	e003      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800948e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f002 0320 	and.w	r3, r2, #32
 800949e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80094a2:	2300      	movs	r3, #0
 80094a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80094ac:	460b      	mov	r3, r1
 80094ae:	4313      	orrs	r3, r2
 80094b0:	d055      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094be:	d033      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80094c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094c4:	d82c      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80094c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ca:	d02f      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80094cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094d0:	d826      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80094d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094d6:	d02b      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80094d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094dc:	d820      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80094de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094e2:	d012      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80094e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094e8:	d81a      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d022      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80094ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094f2:	d115      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f8:	3308      	adds	r3, #8
 80094fa:	2100      	movs	r1, #0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f001 fd8f 	bl	800b020 <RCCEx_PLL2_Config>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009508:	e015      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800950a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950e:	3328      	adds	r3, #40	@ 0x28
 8009510:	2102      	movs	r1, #2
 8009512:	4618      	mov	r0, r3
 8009514:	f001 fe36 	bl	800b184 <RCCEx_PLL3_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800951e:	e00a      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009526:	e006      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009528:	bf00      	nop
 800952a:	e004      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800952c:	bf00      	nop
 800952e:	e002      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009530:	bf00      	nop
 8009532:	e000      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10b      	bne.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800953e:	4b39      	ldr	r3, [pc, #228]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009542:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800954e:	4a35      	ldr	r2, [pc, #212]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009550:	430b      	orrs	r3, r1
 8009552:	6553      	str	r3, [r2, #84]	@ 0x54
 8009554:	e003      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800955a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800955e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800956a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800956e:	2300      	movs	r3, #0
 8009570:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009574:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009578:	460b      	mov	r3, r1
 800957a:	4313      	orrs	r3, r2
 800957c:	d058      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800957e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009586:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800958a:	d033      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800958c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009590:	d82c      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009596:	d02f      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800959c:	d826      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800959e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095a2:	d02b      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80095a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095a8:	d820      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095ae:	d012      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80095b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095b4:	d81a      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d022      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80095ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095be:	d115      	bne.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c4:	3308      	adds	r3, #8
 80095c6:	2100      	movs	r1, #0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f001 fd29 	bl	800b020 <RCCEx_PLL2_Config>
 80095ce:	4603      	mov	r3, r0
 80095d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80095d4:	e015      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095da:	3328      	adds	r3, #40	@ 0x28
 80095dc:	2102      	movs	r1, #2
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 fdd0 	bl	800b184 <RCCEx_PLL3_Config>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80095ea:	e00a      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095f2:	e006      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80095f4:	bf00      	nop
 80095f6:	e004      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80095f8:	bf00      	nop
 80095fa:	e002      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80095fc:	bf00      	nop
 80095fe:	e000      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10e      	bne.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800960a:	4b06      	ldr	r3, [pc, #24]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800960c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800960e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009616:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800961a:	4a02      	ldr	r2, [pc, #8]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800961c:	430b      	orrs	r3, r1
 800961e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009620:	e006      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009622:	bf00      	nop
 8009624:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800962c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800963c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009640:	2300      	movs	r3, #0
 8009642:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009646:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800964a:	460b      	mov	r3, r1
 800964c:	4313      	orrs	r3, r2
 800964e:	d055      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009654:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009658:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800965c:	d033      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800965e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009662:	d82c      	bhi.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009668:	d02f      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800966a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800966e:	d826      	bhi.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009670:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009674:	d02b      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009676:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800967a:	d820      	bhi.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800967c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009680:	d012      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009686:	d81a      	bhi.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d022      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800968c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009690:	d115      	bne.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009696:	3308      	adds	r3, #8
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f001 fcc0 	bl	800b020 <RCCEx_PLL2_Config>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80096a6:	e015      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ac:	3328      	adds	r3, #40	@ 0x28
 80096ae:	2102      	movs	r1, #2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f001 fd67 	bl	800b184 <RCCEx_PLL3_Config>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80096bc:	e00a      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096c4:	e006      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80096c6:	bf00      	nop
 80096c8:	e004      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80096ca:	bf00      	nop
 80096cc:	e002      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80096ce:	bf00      	nop
 80096d0:	e000      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80096d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10b      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80096dc:	4ba1      	ldr	r3, [pc, #644]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80096e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80096ec:	4a9d      	ldr	r2, [pc, #628]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096ee:	430b      	orrs	r3, r1
 80096f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80096f2:	e003      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80096fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f002 0308 	and.w	r3, r2, #8
 8009708:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800970c:	2300      	movs	r3, #0
 800970e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009712:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009716:	460b      	mov	r3, r1
 8009718:	4313      	orrs	r3, r2
 800971a:	d01e      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800971c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009728:	d10c      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972e:	3328      	adds	r3, #40	@ 0x28
 8009730:	2102      	movs	r1, #2
 8009732:	4618      	mov	r0, r3
 8009734:	f001 fd26 	bl	800b184 <RCCEx_PLL3_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009744:	4b87      	ldr	r3, [pc, #540]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009748:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800974c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009750:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009754:	4a83      	ldr	r2, [pc, #524]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009756:	430b      	orrs	r3, r1
 8009758:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800975a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	f002 0310 	and.w	r3, r2, #16
 8009766:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800976a:	2300      	movs	r3, #0
 800976c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009770:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009774:	460b      	mov	r3, r1
 8009776:	4313      	orrs	r3, r2
 8009778:	d01e      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800977a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800977e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009786:	d10c      	bne.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800978c:	3328      	adds	r3, #40	@ 0x28
 800978e:	2102      	movs	r1, #2
 8009790:	4618      	mov	r0, r3
 8009792:	f001 fcf7 	bl	800b184 <RCCEx_PLL3_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097a2:	4b70      	ldr	r3, [pc, #448]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80097aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80097b2:	4a6c      	ldr	r2, [pc, #432]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097b4:	430b      	orrs	r3, r1
 80097b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80097c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097c8:	2300      	movs	r3, #0
 80097ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80097d2:	460b      	mov	r3, r1
 80097d4:	4313      	orrs	r3, r2
 80097d6:	d03e      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80097d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097e4:	d022      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80097e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ea:	d81b      	bhi.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80097f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097f4:	d00b      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80097f6:	e015      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fc:	3308      	adds	r3, #8
 80097fe:	2100      	movs	r1, #0
 8009800:	4618      	mov	r0, r3
 8009802:	f001 fc0d 	bl	800b020 <RCCEx_PLL2_Config>
 8009806:	4603      	mov	r3, r0
 8009808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800980c:	e00f      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800980e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009812:	3328      	adds	r3, #40	@ 0x28
 8009814:	2102      	movs	r1, #2
 8009816:	4618      	mov	r0, r3
 8009818:	f001 fcb4 	bl	800b184 <RCCEx_PLL3_Config>
 800981c:	4603      	mov	r3, r0
 800981e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009822:	e004      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800982a:	e000      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800982c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10b      	bne.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009836:	4b4b      	ldr	r3, [pc, #300]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800983a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009842:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009846:	4a47      	ldr	r2, [pc, #284]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009848:	430b      	orrs	r3, r1
 800984a:	6593      	str	r3, [r2, #88]	@ 0x58
 800984c:	e003      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009862:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009864:	2300      	movs	r3, #0
 8009866:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009868:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800986c:	460b      	mov	r3, r1
 800986e:	4313      	orrs	r3, r2
 8009870:	d03b      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800987a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800987e:	d01f      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009880:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009884:	d818      	bhi.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800988a:	d003      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800988c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009890:	d007      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009892:	e011      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009894:	4b33      	ldr	r3, [pc, #204]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009898:	4a32      	ldr	r2, [pc, #200]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800989a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800989e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80098a0:	e00f      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a6:	3328      	adds	r3, #40	@ 0x28
 80098a8:	2101      	movs	r1, #1
 80098aa:	4618      	mov	r0, r3
 80098ac:	f001 fc6a 	bl	800b184 <RCCEx_PLL3_Config>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80098b6:	e004      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098be:	e000      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80098c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10b      	bne.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098ca:	4b26      	ldr	r3, [pc, #152]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098da:	4a22      	ldr	r2, [pc, #136]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098dc:	430b      	orrs	r3, r1
 80098de:	6553      	str	r3, [r2, #84]	@ 0x54
 80098e0:	e003      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80098ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80098f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80098f8:	2300      	movs	r3, #0
 80098fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80098fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009900:	460b      	mov	r3, r1
 8009902:	4313      	orrs	r3, r2
 8009904:	d034      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009914:	d007      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009916:	e011      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009918:	4b12      	ldr	r3, [pc, #72]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	4a11      	ldr	r2, [pc, #68]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800991e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009924:	e00e      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992a:	3308      	adds	r3, #8
 800992c:	2102      	movs	r1, #2
 800992e:	4618      	mov	r0, r3
 8009930:	f001 fb76 	bl	800b020 <RCCEx_PLL2_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800993a:	e003      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10d      	bne.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800994c:	4b05      	ldr	r3, [pc, #20]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800994e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009950:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800995a:	4a02      	ldr	r2, [pc, #8]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800995c:	430b      	orrs	r3, r1
 800995e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009960:	e006      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009962:	bf00      	nop
 8009964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800996c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800997c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800997e:	2300      	movs	r3, #0
 8009980:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009982:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009986:	460b      	mov	r3, r1
 8009988:	4313      	orrs	r3, r2
 800998a:	d00c      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800998c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009990:	3328      	adds	r3, #40	@ 0x28
 8009992:	2102      	movs	r1, #2
 8009994:	4618      	mov	r0, r3
 8009996:	f001 fbf5 	bl	800b184 <RCCEx_PLL3_Config>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80099a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80099b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80099b4:	2300      	movs	r3, #0
 80099b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80099b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80099bc:	460b      	mov	r3, r1
 80099be:	4313      	orrs	r3, r2
 80099c0:	d038      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80099c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099ce:	d018      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80099d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099d4:	d811      	bhi.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80099d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099da:	d014      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80099dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099e0:	d80b      	bhi.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d011      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80099e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099ea:	d106      	bne.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ec:	4bc3      	ldr	r3, [pc, #780]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f0:	4ac2      	ldr	r2, [pc, #776]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80099f8:	e008      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a00:	e004      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a02:	bf00      	nop
 8009a04:	e002      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a06:	bf00      	nop
 8009a08:	e000      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10b      	bne.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a14:	4bb9      	ldr	r3, [pc, #740]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a24:	4ab5      	ldr	r2, [pc, #724]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a26:	430b      	orrs	r3, r1
 8009a28:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a2a:	e003      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009a40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a42:	2300      	movs	r3, #0
 8009a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	d009      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a50:	4baa      	ldr	r3, [pc, #680]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a5e:	4aa7      	ldr	r2, [pc, #668]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a60:	430b      	orrs	r3, r1
 8009a62:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009a70:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a72:	2300      	movs	r3, #0
 8009a74:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	d00a      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009a80:	4b9e      	ldr	r3, [pc, #632]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009a90:	4a9a      	ldr	r2, [pc, #616]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a92:	430b      	orrs	r3, r1
 8009a94:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009aa8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009aac:	460b      	mov	r3, r1
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	d009      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ab2:	4b92      	ldr	r3, [pc, #584]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ab6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ac0:	4a8e      	ldr	r2, [pc, #568]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009ad2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ad8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009adc:	460b      	mov	r3, r1
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	d00e      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ae2:	4b86      	ldr	r3, [pc, #536]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	4a85      	ldr	r2, [pc, #532]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ae8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009aec:	6113      	str	r3, [r2, #16]
 8009aee:	4b83      	ldr	r3, [pc, #524]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009af0:	6919      	ldr	r1, [r3, #16]
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009afa:	4a80      	ldr	r2, [pc, #512]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009afc:	430b      	orrs	r3, r1
 8009afe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b0e:	2300      	movs	r3, #0
 8009b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009b16:	460b      	mov	r3, r1
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	d009      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009b1c:	4b77      	ldr	r3, [pc, #476]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b20:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b2a:	4a74      	ldr	r2, [pc, #464]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b2c:	430b      	orrs	r3, r1
 8009b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b3e:	2300      	movs	r3, #0
 8009b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b42:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009b46:	460b      	mov	r3, r1
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	d00a      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b4c:	4b6b      	ldr	r3, [pc, #428]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b50:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b5c:	4a67      	ldr	r2, [pc, #412]	@ (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b5e:	430b      	orrs	r3, r1
 8009b60:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b74:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	d011      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b82:	3308      	adds	r3, #8
 8009b84:	2100      	movs	r1, #0
 8009b86:	4618      	mov	r0, r3
 8009b88:	f001 fa4a 	bl	800b020 <RCCEx_PLL2_Config>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d003      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	2100      	movs	r1, #0
 8009bac:	6239      	str	r1, [r7, #32]
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bb4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	d011      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f001 fa2a 	bl	800b020 <RCCEx_PLL2_Config>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	2100      	movs	r1, #0
 8009bec:	61b9      	str	r1, [r7, #24]
 8009bee:	f003 0304 	and.w	r3, r3, #4
 8009bf2:	61fb      	str	r3, [r7, #28]
 8009bf4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	d011      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c02:	3308      	adds	r3, #8
 8009c04:	2102      	movs	r1, #2
 8009c06:	4618      	mov	r0, r3
 8009c08:	f001 fa0a 	bl	800b020 <RCCEx_PLL2_Config>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	6139      	str	r1, [r7, #16]
 8009c2e:	f003 0308 	and.w	r3, r3, #8
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	d011      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c42:	3328      	adds	r3, #40	@ 0x28
 8009c44:	2100      	movs	r1, #0
 8009c46:	4618      	mov	r0, r3
 8009c48:	f001 fa9c 	bl	800b184 <RCCEx_PLL3_Config>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	f003 0310 	and.w	r3, r3, #16
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	d011      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c82:	3328      	adds	r3, #40	@ 0x28
 8009c84:	2101      	movs	r1, #1
 8009c86:	4618      	mov	r0, r3
 8009c88:	f001 fa7c 	bl	800b184 <RCCEx_PLL3_Config>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	2100      	movs	r1, #0
 8009cac:	6039      	str	r1, [r7, #0]
 8009cae:	f003 0320 	and.w	r3, r3, #32
 8009cb2:	607b      	str	r3, [r7, #4]
 8009cb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	d011      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc2:	3328      	adds	r3, #40	@ 0x28
 8009cc4:	2102      	movs	r1, #2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f001 fa5c 	bl	800b184 <RCCEx_PLL3_Config>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009ce2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	e000      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cfc:	58024400 	.word	0x58024400

08009d00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b090      	sub	sp, #64	@ 0x40
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d0e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009d12:	430b      	orrs	r3, r1
 8009d14:	f040 8094 	bne.w	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009d18:	4b9e      	ldr	r3, [pc, #632]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	f200 8087 	bhi.w	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d45 	.word	0x08009d45
 8009d34:	08009d6d 	.word	0x08009d6d
 8009d38:	08009d95 	.word	0x08009d95
 8009d3c:	08009e31 	.word	0x08009e31
 8009d40:	08009dbd 	.word	0x08009dbd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d44:	4b93      	ldr	r3, [pc, #588]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d50:	d108      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 f810 	bl	800ad7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d60:	f000 bd45 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d68:	f000 bd41 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d6c:	4b89      	ldr	r3, [pc, #548]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d78:	d108      	bne.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d7a:	f107 0318 	add.w	r3, r7, #24
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 fd54 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d88:	f000 bd31 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d90:	f000 bd2d 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d94:	4b7f      	ldr	r3, [pc, #508]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009da0:	d108      	bne.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009da2:	f107 030c 	add.w	r3, r7, #12
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 fe94 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009db0:	f000 bd1d 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db8:	f000 bd19 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dbc:	4b75      	ldr	r3, [pc, #468]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009dc4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009dc6:	4b73      	ldr	r3, [pc, #460]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	d10c      	bne.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d109      	bne.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dd8:	4b6e      	ldr	r3, [pc, #440]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	08db      	lsrs	r3, r3, #3
 8009dde:	f003 0303 	and.w	r3, r3, #3
 8009de2:	4a6d      	ldr	r2, [pc, #436]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009de4:	fa22 f303 	lsr.w	r3, r2, r3
 8009de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dea:	e01f      	b.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dec:	4b69      	ldr	r3, [pc, #420]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009df8:	d106      	bne.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e00:	d102      	bne.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e02:	4b66      	ldr	r3, [pc, #408]	@ (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e06:	e011      	b.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e08:	4b62      	ldr	r3, [pc, #392]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e14:	d106      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e1c:	d102      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e1e:	4b60      	ldr	r3, [pc, #384]	@ (8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e22:	e003      	b.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e28:	f000 bce1 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e2c:	f000 bcdf 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e30:	4b5c      	ldr	r3, [pc, #368]	@ (8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e34:	f000 bcdb 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e3c:	f000 bcd7 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e44:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009e48:	430b      	orrs	r3, r1
 8009e4a:	f040 80ad 	bne.w	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009e4e:	4b51      	ldr	r3, [pc, #324]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e52:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009e56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e5e:	d056      	beq.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e66:	f200 8090 	bhi.w	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e6e:	f000 8088 	beq.w	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e74:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e76:	f200 8088 	bhi.w	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	2b80      	cmp	r3, #128	@ 0x80
 8009e7e:	d032      	beq.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e82:	2b80      	cmp	r3, #128	@ 0x80
 8009e84:	f200 8081 	bhi.w	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	2b40      	cmp	r3, #64	@ 0x40
 8009e92:	d014      	beq.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009e94:	e079      	b.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e96:	4b3f      	ldr	r3, [pc, #252]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ea2:	d108      	bne.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 ff67 	bl	800ad7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eb2:	f000 bc9c 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eba:	f000 bc98 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ebe:	4b35      	ldr	r3, [pc, #212]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009eca:	d108      	bne.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ecc:	f107 0318 	add.w	r3, r7, #24
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 fcab 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eda:	f000 bc88 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee2:	f000 bc84 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ef2:	d108      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ef4:	f107 030c 	add.w	r3, r7, #12
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fdeb 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f02:	f000 bc74 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f0a:	f000 bc70 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f0e:	4b21      	ldr	r3, [pc, #132]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f18:	4b1e      	ldr	r3, [pc, #120]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d10c      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	08db      	lsrs	r3, r3, #3
 8009f30:	f003 0303 	and.w	r3, r3, #3
 8009f34:	4a18      	ldr	r2, [pc, #96]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f36:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f3c:	e01f      	b.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f3e:	4b15      	ldr	r3, [pc, #84]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f4a:	d106      	bne.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f52:	d102      	bne.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f54:	4b11      	ldr	r3, [pc, #68]	@ (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f58:	e011      	b.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f66:	d106      	bne.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f6e:	d102      	bne.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f70:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f74:	e003      	b.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009f7a:	f000 bc38 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f7e:	f000 bc36 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f82:	4b08      	ldr	r3, [pc, #32]	@ (8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f86:	f000 bc32 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f8e:	f000 bc2e 	b.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f92:	bf00      	nop
 8009f94:	58024400 	.word	0x58024400
 8009f98:	03d09000 	.word	0x03d09000
 8009f9c:	003d0900 	.word	0x003d0900
 8009fa0:	017d7840 	.word	0x017d7840
 8009fa4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	f040 809c 	bne.w	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009fb6:	4b9e      	ldr	r3, [pc, #632]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fba:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009fbe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fc6:	d054      	beq.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fce:	f200 808b 	bhi.w	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fd8:	f000 8083 	beq.w	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fde:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fe2:	f200 8081 	bhi.w	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fec:	d02f      	beq.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ff4:	d878      	bhi.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a002:	d012      	beq.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a004:	e070      	b.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a006:	4b8a      	ldr	r3, [pc, #552]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a00e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a012:	d107      	bne.n	800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a018:	4618      	mov	r0, r3
 800a01a:	f000 feaf 	bl	800ad7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a022:	e3e4      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a028:	e3e1      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a02a:	4b81      	ldr	r3, [pc, #516]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a036:	d107      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a038:	f107 0318 	add.w	r3, r7, #24
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 fbf5 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a046:	e3d2      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a048:	2300      	movs	r3, #0
 800a04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a04c:	e3cf      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a04e:	4b78      	ldr	r3, [pc, #480]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a05a:	d107      	bne.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a05c:	f107 030c 	add.w	r3, r7, #12
 800a060:	4618      	mov	r0, r3
 800a062:	f000 fd37 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a06a:	e3c0      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a070:	e3bd      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a072:	4b6f      	ldr	r3, [pc, #444]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a076:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a07a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a07c:	4b6c      	ldr	r3, [pc, #432]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b04      	cmp	r3, #4
 800a086:	d10c      	bne.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d109      	bne.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a08e:	4b68      	ldr	r3, [pc, #416]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	08db      	lsrs	r3, r3, #3
 800a094:	f003 0303 	and.w	r3, r3, #3
 800a098:	4a66      	ldr	r2, [pc, #408]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a09a:	fa22 f303 	lsr.w	r3, r2, r3
 800a09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0a0:	e01e      	b.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0a2:	4b63      	ldr	r3, [pc, #396]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0ae:	d106      	bne.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0b6:	d102      	bne.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0b8:	4b5f      	ldr	r3, [pc, #380]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0bc:	e010      	b.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0be:	4b5c      	ldr	r3, [pc, #368]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0ca:	d106      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0d2:	d102      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a0d4:	4b59      	ldr	r3, [pc, #356]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0d8:	e002      	b.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a0de:	e386      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0e0:	e385      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0e2:	4b57      	ldr	r3, [pc, #348]	@ (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e6:	e382      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ec:	e37f      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a0ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0f2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a0f6:	430b      	orrs	r3, r1
 800a0f8:	f040 80a7 	bne.w	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a0fc:	4b4c      	ldr	r3, [pc, #304]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a100:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a104:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a108:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a10c:	d055      	beq.n	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a114:	f200 8096 	bhi.w	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a11e:	f000 8084 	beq.w	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a124:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a128:	f200 808c 	bhi.w	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a132:	d030      	beq.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a136:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a13a:	f200 8083 	bhi.w	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	2b00      	cmp	r3, #0
 800a142:	d004      	beq.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a146:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a14a:	d012      	beq.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a14c:	e07a      	b.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a14e:	4b38      	ldr	r3, [pc, #224]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a15a:	d107      	bne.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a15c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a160:	4618      	mov	r0, r3
 800a162:	f000 fe0b 	bl	800ad7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a16a:	e340      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a170:	e33d      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a172:	4b2f      	ldr	r3, [pc, #188]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a17a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a17e:	d107      	bne.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a180:	f107 0318 	add.w	r3, r7, #24
 800a184:	4618      	mov	r0, r3
 800a186:	f000 fb51 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a18e:	e32e      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a194:	e32b      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a196:	4b26      	ldr	r3, [pc, #152]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a19e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1a2:	d107      	bne.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a4:	f107 030c 	add.w	r3, r7, #12
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 fc93 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1b2:	e31c      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b8:	e319      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b04      	cmp	r3, #4
 800a1ce:	d10c      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d109      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1d6:	4b16      	ldr	r3, [pc, #88]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	08db      	lsrs	r3, r3, #3
 800a1dc:	f003 0303 	and.w	r3, r3, #3
 800a1e0:	4a14      	ldr	r2, [pc, #80]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a1e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1e8:	e01e      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1ea:	4b11      	ldr	r3, [pc, #68]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1f6:	d106      	bne.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a1f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1fe:	d102      	bne.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a200:	4b0d      	ldr	r3, [pc, #52]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a204:	e010      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a206:	4b0a      	ldr	r3, [pc, #40]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a20e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a212:	d106      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a21a:	d102      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a21c:	4b07      	ldr	r3, [pc, #28]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a220:	e002      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a226:	e2e2      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a228:	e2e1      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a22a:	4b05      	ldr	r3, [pc, #20]	@ (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a22e:	e2de      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a230:	58024400 	.word	0x58024400
 800a234:	03d09000 	.word	0x03d09000
 800a238:	003d0900 	.word	0x003d0900
 800a23c:	017d7840 	.word	0x017d7840
 800a240:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a248:	e2d1      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a24a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a24e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a252:	430b      	orrs	r3, r1
 800a254:	f040 809c 	bne.w	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a258:	4b93      	ldr	r3, [pc, #588]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a25a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a25c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a260:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a264:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a268:	d054      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a270:	f200 808b 	bhi.w	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a276:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a27a:	f000 8083 	beq.w	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a280:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a284:	f200 8081 	bhi.w	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a28e:	d02f      	beq.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a296:	d878      	bhi.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d004      	beq.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2a4:	d012      	beq.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a2a6:	e070      	b.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2a8:	4b7f      	ldr	r3, [pc, #508]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2b4:	d107      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 fd5e 	bl	800ad7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2c4:	e293      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ca:	e290      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2cc:	4b76      	ldr	r3, [pc, #472]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2d8:	d107      	bne.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2da:	f107 0318 	add.w	r3, r7, #24
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 faa4 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2e8:	e281      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ee:	e27e      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2f0:	4b6d      	ldr	r3, [pc, #436]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2fc:	d107      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2fe:	f107 030c 	add.w	r3, r7, #12
 800a302:	4618      	mov	r0, r3
 800a304:	f000 fbe6 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a30c:	e26f      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a312:	e26c      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a314:	4b64      	ldr	r3, [pc, #400]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a318:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a31c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a31e:	4b62      	ldr	r3, [pc, #392]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b04      	cmp	r3, #4
 800a328:	d10c      	bne.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a32a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d109      	bne.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a330:	4b5d      	ldr	r3, [pc, #372]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	08db      	lsrs	r3, r3, #3
 800a336:	f003 0303 	and.w	r3, r3, #3
 800a33a:	4a5c      	ldr	r2, [pc, #368]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a33c:	fa22 f303 	lsr.w	r3, r2, r3
 800a340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a342:	e01e      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a344:	4b58      	ldr	r3, [pc, #352]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a34c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a350:	d106      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a358:	d102      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a35a:	4b55      	ldr	r3, [pc, #340]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a35e:	e010      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a360:	4b51      	ldr	r3, [pc, #324]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a368:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a36c:	d106      	bne.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a374:	d102      	bne.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a376:	4b4f      	ldr	r3, [pc, #316]	@ (800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a37a:	e002      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a380:	e235      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a382:	e234      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a384:	4b4c      	ldr	r3, [pc, #304]	@ (800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a388:	e231      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a38e:	e22e      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a390:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a394:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a398:	430b      	orrs	r3, r1
 800a39a:	f040 808f 	bne.w	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a39e:	4b42      	ldr	r3, [pc, #264]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3a2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a3a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3ae:	d06b      	beq.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3b6:	d874      	bhi.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a3be:	d056      	beq.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a3c6:	d86c      	bhi.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a3ce:	d03b      	beq.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a3d6:	d864      	bhi.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3de:	d021      	beq.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3e6:	d85c      	bhi.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d004      	beq.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3f4:	d004      	beq.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a3f6:	e054      	b.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a3f8:	f7fe fa30 	bl	800885c <HAL_RCC_GetPCLK1Freq>
 800a3fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a3fe:	e1f6      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a400:	4b29      	ldr	r3, [pc, #164]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a40c:	d107      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40e:	f107 0318 	add.w	r3, r7, #24
 800a412:	4618      	mov	r0, r3
 800a414:	f000 fa0a 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a41c:	e1e7      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a422:	e1e4      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a424:	4b20      	ldr	r3, [pc, #128]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a42c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a430:	d107      	bne.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a432:	f107 030c 	add.w	r3, r7, #12
 800a436:	4618      	mov	r0, r3
 800a438:	f000 fb4c 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a440:	e1d5      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a446:	e1d2      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a448:	4b17      	ldr	r3, [pc, #92]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0304 	and.w	r3, r3, #4
 800a450:	2b04      	cmp	r3, #4
 800a452:	d109      	bne.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a454:	4b14      	ldr	r3, [pc, #80]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	08db      	lsrs	r3, r3, #3
 800a45a:	f003 0303 	and.w	r3, r3, #3
 800a45e:	4a13      	ldr	r2, [pc, #76]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a460:	fa22 f303 	lsr.w	r3, r2, r3
 800a464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a466:	e1c2      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a468:	2300      	movs	r3, #0
 800a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a46c:	e1bf      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a46e:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a47a:	d102      	bne.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a47c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a480:	e1b5      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a482:	2300      	movs	r3, #0
 800a484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a486:	e1b2      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a488:	4b07      	ldr	r3, [pc, #28]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a494:	d102      	bne.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a496:	4b07      	ldr	r3, [pc, #28]	@ (800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a49a:	e1a8      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a0:	e1a5      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a6:	e1a2      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4a8:	58024400 	.word	0x58024400
 800a4ac:	03d09000 	.word	0x03d09000
 800a4b0:	003d0900 	.word	0x003d0900
 800a4b4:	017d7840 	.word	0x017d7840
 800a4b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a4bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a4c4:	430b      	orrs	r3, r1
 800a4c6:	d173      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a4c8:	4b9c      	ldr	r3, [pc, #624]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a4d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4d8:	d02f      	beq.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4e0:	d863      	bhi.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d004      	beq.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4ee:	d012      	beq.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a4f0:	e05b      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4f2:	4b92      	ldr	r3, [pc, #584]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4fe:	d107      	bne.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a500:	f107 0318 	add.w	r3, r7, #24
 800a504:	4618      	mov	r0, r3
 800a506:	f000 f991 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a50e:	e16e      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a514:	e16b      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a516:	4b89      	ldr	r3, [pc, #548]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a51e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a522:	d107      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a524:	f107 030c 	add.w	r3, r7, #12
 800a528:	4618      	mov	r0, r3
 800a52a:	f000 fad3 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a532:	e15c      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a538:	e159      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a53a:	4b80      	ldr	r3, [pc, #512]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a53c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a53e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a542:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a544:	4b7d      	ldr	r3, [pc, #500]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d10c      	bne.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a552:	2b00      	cmp	r3, #0
 800a554:	d109      	bne.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a556:	4b79      	ldr	r3, [pc, #484]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	08db      	lsrs	r3, r3, #3
 800a55c:	f003 0303 	and.w	r3, r3, #3
 800a560:	4a77      	ldr	r2, [pc, #476]	@ (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a562:	fa22 f303 	lsr.w	r3, r2, r3
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a568:	e01e      	b.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a56a:	4b74      	ldr	r3, [pc, #464]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a576:	d106      	bne.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a57a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a57e:	d102      	bne.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a580:	4b70      	ldr	r3, [pc, #448]	@ (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a584:	e010      	b.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a586:	4b6d      	ldr	r3, [pc, #436]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a58e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a592:	d106      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a59a:	d102      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a59c:	4b6a      	ldr	r3, [pc, #424]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5a0:	e002      	b.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5a6:	e122      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5a8:	e121      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ae:	e11e      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a5b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a5b8:	430b      	orrs	r3, r1
 800a5ba:	d133      	bne.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a5bc:	4b5f      	ldr	r3, [pc, #380]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d004      	beq.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5d2:	d012      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a5d4:	e023      	b.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5d6:	4b59      	ldr	r3, [pc, #356]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5e2:	d107      	bne.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 fbc7 	bl	800ad7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5f2:	e0fc      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5f8:	e0f9      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5fa:	4b50      	ldr	r3, [pc, #320]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a606:	d107      	bne.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a608:	f107 0318 	add.w	r3, r7, #24
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 f90d 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a616:	e0ea      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a61c:	e0e7      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a61e:	2300      	movs	r3, #0
 800a620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a622:	e0e4      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a624:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a628:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a62c:	430b      	orrs	r3, r1
 800a62e:	f040 808d 	bne.w	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a632:	4b42      	ldr	r3, [pc, #264]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a636:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a63a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a63e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a642:	d06b      	beq.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a646:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a64a:	d874      	bhi.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a652:	d056      	beq.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a65a:	d86c      	bhi.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a662:	d03b      	beq.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a666:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a66a:	d864      	bhi.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a672:	d021      	beq.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a67a:	d85c      	bhi.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d004      	beq.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a684:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a688:	d004      	beq.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a68a:	e054      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a68c:	f000 f8b8 	bl	800a800 <HAL_RCCEx_GetD3PCLK1Freq>
 800a690:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a692:	e0ac      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a694:	4b29      	ldr	r3, [pc, #164]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a69c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6a0:	d107      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6a2:	f107 0318 	add.w	r3, r7, #24
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 f8c0 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6b0:	e09d      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6b6:	e09a      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6b8:	4b20      	ldr	r3, [pc, #128]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6c4:	d107      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fa02 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6d4:	e08b      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6da:	e088      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a6dc:	4b17      	ldr	r3, [pc, #92]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0304 	and.w	r3, r3, #4
 800a6e4:	2b04      	cmp	r3, #4
 800a6e6:	d109      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6e8:	4b14      	ldr	r3, [pc, #80]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	08db      	lsrs	r3, r3, #3
 800a6ee:	f003 0303 	and.w	r3, r3, #3
 800a6f2:	4a13      	ldr	r2, [pc, #76]	@ (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a6f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6fa:	e078      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a700:	e075      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a702:	4b0e      	ldr	r3, [pc, #56]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a70a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a70e:	d102      	bne.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a710:	4b0c      	ldr	r3, [pc, #48]	@ (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a714:	e06b      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a71a:	e068      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a71c:	4b07      	ldr	r3, [pc, #28]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a724:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a728:	d102      	bne.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a72a:	4b07      	ldr	r3, [pc, #28]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a72e:	e05e      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a730:	2300      	movs	r3, #0
 800a732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a734:	e05b      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73a:	e058      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a73c:	58024400 	.word	0x58024400
 800a740:	03d09000 	.word	0x03d09000
 800a744:	003d0900 	.word	0x003d0900
 800a748:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a74c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a750:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a754:	430b      	orrs	r3, r1
 800a756:	d148      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a758:	4b27      	ldr	r3, [pc, #156]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a75a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a75c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a760:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a768:	d02a      	beq.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a770:	d838      	bhi.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a774:	2b00      	cmp	r3, #0
 800a776:	d004      	beq.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a77e:	d00d      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a780:	e030      	b.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a782:	4b1d      	ldr	r3, [pc, #116]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a78a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a78e:	d102      	bne.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a790:	4b1a      	ldr	r3, [pc, #104]	@ (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a794:	e02b      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a796:	2300      	movs	r3, #0
 800a798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a79a:	e028      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a79c:	4b16      	ldr	r3, [pc, #88]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7a8:	d107      	bne.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 fae4 	bl	800ad7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b8:	e019      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7be:	e016      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7c0:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7cc:	d107      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ce:	f107 0318 	add.w	r3, r7, #24
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 f82a 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7dc:	e007      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e2:	e004      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e8:	e001      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a7ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3740      	adds	r7, #64	@ 0x40
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	58024400 	.word	0x58024400
 800a7fc:	017d7840 	.word	0x017d7840

0800a800 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a804:	f7fd fffa 	bl	80087fc <HAL_RCC_GetHCLKFreq>
 800a808:	4602      	mov	r2, r0
 800a80a:	4b06      	ldr	r3, [pc, #24]	@ (800a824 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	091b      	lsrs	r3, r3, #4
 800a810:	f003 0307 	and.w	r3, r3, #7
 800a814:	4904      	ldr	r1, [pc, #16]	@ (800a828 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a816:	5ccb      	ldrb	r3, [r1, r3]
 800a818:	f003 031f 	and.w	r3, r3, #31
 800a81c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a820:	4618      	mov	r0, r3
 800a822:	bd80      	pop	{r7, pc}
 800a824:	58024400 	.word	0x58024400
 800a828:	0801917c 	.word	0x0801917c

0800a82c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b089      	sub	sp, #36	@ 0x24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a834:	4ba1      	ldr	r3, [pc, #644]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a838:	f003 0303 	and.w	r3, r3, #3
 800a83c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a83e:	4b9f      	ldr	r3, [pc, #636]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a842:	0b1b      	lsrs	r3, r3, #12
 800a844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a848:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a84a:	4b9c      	ldr	r3, [pc, #624]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84e:	091b      	lsrs	r3, r3, #4
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a856:	4b99      	ldr	r3, [pc, #612]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a85a:	08db      	lsrs	r3, r3, #3
 800a85c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	fb02 f303 	mul.w	r3, r2, r3
 800a866:	ee07 3a90 	vmov	s15, r3
 800a86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a86e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 8111 	beq.w	800aa9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	f000 8083 	beq.w	800a988 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	2b02      	cmp	r3, #2
 800a886:	f200 80a1 	bhi.w	800a9cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d003      	beq.n	800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d056      	beq.n	800a944 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a896:	e099      	b.n	800a9cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a898:	4b88      	ldr	r3, [pc, #544]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0320 	and.w	r3, r3, #32
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d02d      	beq.n	800a900 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8a4:	4b85      	ldr	r3, [pc, #532]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	08db      	lsrs	r3, r3, #3
 800a8aa:	f003 0303 	and.w	r3, r3, #3
 800a8ae:	4a84      	ldr	r2, [pc, #528]	@ (800aac0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a8b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	ee07 3a90 	vmov	s15, r3
 800a8bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	ee07 3a90 	vmov	s15, r3
 800a8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ce:	4b7b      	ldr	r3, [pc, #492]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d6:	ee07 3a90 	vmov	s15, r3
 800a8da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a8fe:	e087      	b.n	800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	ee07 3a90 	vmov	s15, r3
 800a906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a90e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a912:	4b6a      	ldr	r3, [pc, #424]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a91a:	ee07 3a90 	vmov	s15, r3
 800a91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a922:	ed97 6a03 	vldr	s12, [r7, #12]
 800a926:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a93a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a93e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a942:	e065      	b.n	800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	ee07 3a90 	vmov	s15, r3
 800a94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a956:	4b59      	ldr	r3, [pc, #356]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95e:	ee07 3a90 	vmov	s15, r3
 800a962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a966:	ed97 6a03 	vldr	s12, [r7, #12]
 800a96a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a986:	e043      	b.n	800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	ee07 3a90 	vmov	s15, r3
 800a98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a992:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a99a:	4b48      	ldr	r3, [pc, #288]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a99c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a2:	ee07 3a90 	vmov	s15, r3
 800a9a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9ca:	e021      	b.n	800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	ee07 3a90 	vmov	s15, r3
 800a9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9de:	4b37      	ldr	r3, [pc, #220]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aa10:	4b2a      	ldr	r3, [pc, #168]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa14:	0a5b      	lsrs	r3, r3, #9
 800aa16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa36:	ee17 2a90 	vmov	r2, s15
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aa3e:	4b1f      	ldr	r3, [pc, #124]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa42:	0c1b      	lsrs	r3, r3, #16
 800aa44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa48:	ee07 3a90 	vmov	s15, r3
 800aa4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa58:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa64:	ee17 2a90 	vmov	r2, s15
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aa6c:	4b13      	ldr	r3, [pc, #76]	@ (800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa70:	0e1b      	lsrs	r3, r3, #24
 800aa72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa86:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa92:	ee17 2a90 	vmov	r2, s15
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aa9a:	e008      	b.n	800aaae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	609a      	str	r2, [r3, #8]
}
 800aaae:	bf00      	nop
 800aab0:	3724      	adds	r7, #36	@ 0x24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	58024400 	.word	0x58024400
 800aac0:	03d09000 	.word	0x03d09000
 800aac4:	46000000 	.word	0x46000000
 800aac8:	4c742400 	.word	0x4c742400
 800aacc:	4a742400 	.word	0x4a742400
 800aad0:	4bbebc20 	.word	0x4bbebc20

0800aad4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b089      	sub	sp, #36	@ 0x24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aadc:	4ba1      	ldr	r3, [pc, #644]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae0:	f003 0303 	and.w	r3, r3, #3
 800aae4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aae6:	4b9f      	ldr	r3, [pc, #636]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaea:	0d1b      	lsrs	r3, r3, #20
 800aaec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aaf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aaf2:	4b9c      	ldr	r3, [pc, #624]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf6:	0a1b      	lsrs	r3, r3, #8
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aafe:	4b99      	ldr	r3, [pc, #612]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab02:	08db      	lsrs	r3, r3, #3
 800ab04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	fb02 f303 	mul.w	r3, r2, r3
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 8111 	beq.w	800ad44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	f000 8083 	beq.w	800ac30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	f200 80a1 	bhi.w	800ac74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d056      	beq.n	800abec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ab3e:	e099      	b.n	800ac74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab40:	4b88      	ldr	r3, [pc, #544]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0320 	and.w	r3, r3, #32
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d02d      	beq.n	800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab4c:	4b85      	ldr	r3, [pc, #532]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	08db      	lsrs	r3, r3, #3
 800ab52:	f003 0303 	and.w	r3, r3, #3
 800ab56:	4a84      	ldr	r2, [pc, #528]	@ (800ad68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ab58:	fa22 f303 	lsr.w	r3, r2, r3
 800ab5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	ee07 3a90 	vmov	s15, r3
 800ab64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab76:	4b7b      	ldr	r3, [pc, #492]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ad6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aba6:	e087      	b.n	800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800abb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abba:	4b6a      	ldr	r3, [pc, #424]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abca:	ed97 6a03 	vldr	s12, [r7, #12]
 800abce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ad6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abea:	e065      	b.n	800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800abfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abfe:	4b59      	ldr	r3, [pc, #356]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ad6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac2e:	e043      	b.n	800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ad78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ac3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac42:	4b48      	ldr	r3, [pc, #288]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ad6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac72:	e021      	b.n	800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac86:	4b37      	ldr	r3, [pc, #220]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ad6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800acb8:	4b2a      	ldr	r3, [pc, #168]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbc:	0a5b      	lsrs	r3, r3, #9
 800acbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800acce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800acd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acde:	ee17 2a90 	vmov	r2, s15
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ace6:	4b1f      	ldr	r3, [pc, #124]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acea:	0c1b      	lsrs	r3, r3, #16
 800acec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acf0:	ee07 3a90 	vmov	s15, r3
 800acf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800acfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad0c:	ee17 2a90 	vmov	r2, s15
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ad14:	4b13      	ldr	r3, [pc, #76]	@ (800ad64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad18:	0e1b      	lsrs	r3, r3, #24
 800ad1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad3a:	ee17 2a90 	vmov	r2, s15
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ad42:	e008      	b.n	800ad56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	609a      	str	r2, [r3, #8]
}
 800ad56:	bf00      	nop
 800ad58:	3724      	adds	r7, #36	@ 0x24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	58024400 	.word	0x58024400
 800ad68:	03d09000 	.word	0x03d09000
 800ad6c:	46000000 	.word	0x46000000
 800ad70:	4c742400 	.word	0x4c742400
 800ad74:	4a742400 	.word	0x4a742400
 800ad78:	4bbebc20 	.word	0x4bbebc20

0800ad7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b089      	sub	sp, #36	@ 0x24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad84:	4ba0      	ldr	r3, [pc, #640]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad88:	f003 0303 	and.w	r3, r3, #3
 800ad8c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ad8e:	4b9e      	ldr	r3, [pc, #632]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad92:	091b      	lsrs	r3, r3, #4
 800ad94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad98:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ad9a:	4b9b      	ldr	r3, [pc, #620]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ada4:	4b98      	ldr	r3, [pc, #608]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ada6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ada8:	08db      	lsrs	r3, r3, #3
 800adaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	fb02 f303 	mul.w	r3, r2, r3
 800adb4:	ee07 3a90 	vmov	s15, r3
 800adb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adbc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 8111 	beq.w	800afea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	2b02      	cmp	r3, #2
 800adcc:	f000 8083 	beq.w	800aed6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	2b02      	cmp	r3, #2
 800add4:	f200 80a1 	bhi.w	800af1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d003      	beq.n	800ade6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d056      	beq.n	800ae92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ade4:	e099      	b.n	800af1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ade6:	4b88      	ldr	r3, [pc, #544]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0320 	and.w	r3, r3, #32
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d02d      	beq.n	800ae4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adf2:	4b85      	ldr	r3, [pc, #532]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	08db      	lsrs	r3, r3, #3
 800adf8:	f003 0303 	and.w	r3, r3, #3
 800adfc:	4a83      	ldr	r2, [pc, #524]	@ (800b00c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800adfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ae02:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	ee07 3a90 	vmov	s15, r3
 800ae14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae1c:	4b7a      	ldr	r3, [pc, #488]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae24:	ee07 3a90 	vmov	s15, r3
 800ae28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae30:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b010 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae48:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae4c:	e087      	b.n	800af5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	ee07 3a90 	vmov	s15, r3
 800ae54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae58:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b014 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ae5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae60:	4b69      	ldr	r3, [pc, #420]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae68:	ee07 3a90 	vmov	s15, r3
 800ae6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae70:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae74:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b010 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae90:	e065      	b.n	800af5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	ee07 3a90 	vmov	s15, r3
 800ae98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b018 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea4:	4b58      	ldr	r3, [pc, #352]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeac:	ee07 3a90 	vmov	s15, r3
 800aeb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeb8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b010 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aec4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aed4:	e043      	b.n	800af5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	ee07 3a90 	vmov	s15, r3
 800aedc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b01c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800aee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee8:	4b47      	ldr	r3, [pc, #284]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef0:	ee07 3a90 	vmov	s15, r3
 800aef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aefc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b010 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af18:	e021      	b.n	800af5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	ee07 3a90 	vmov	s15, r3
 800af20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af24:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b014 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2c:	4b36      	ldr	r3, [pc, #216]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af34:	ee07 3a90 	vmov	s15, r3
 800af38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800af40:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b010 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af5c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800af5e:	4b2a      	ldr	r3, [pc, #168]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af62:	0a5b      	lsrs	r3, r3, #9
 800af64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af68:	ee07 3a90 	vmov	s15, r3
 800af6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af78:	edd7 6a07 	vldr	s13, [r7, #28]
 800af7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af84:	ee17 2a90 	vmov	r2, s15
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800af8c:	4b1e      	ldr	r3, [pc, #120]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af90:	0c1b      	lsrs	r3, r3, #16
 800af92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afb2:	ee17 2a90 	vmov	r2, s15
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800afba:	4b13      	ldr	r3, [pc, #76]	@ (800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afbe:	0e1b      	lsrs	r3, r3, #24
 800afc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afc4:	ee07 3a90 	vmov	s15, r3
 800afc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800afd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afe0:	ee17 2a90 	vmov	r2, s15
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800afe8:	e008      	b.n	800affc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	609a      	str	r2, [r3, #8]
}
 800affc:	bf00      	nop
 800affe:	3724      	adds	r7, #36	@ 0x24
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	58024400 	.word	0x58024400
 800b00c:	03d09000 	.word	0x03d09000
 800b010:	46000000 	.word	0x46000000
 800b014:	4c742400 	.word	0x4c742400
 800b018:	4a742400 	.word	0x4a742400
 800b01c:	4bbebc20 	.word	0x4bbebc20

0800b020 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b02e:	4b53      	ldr	r3, [pc, #332]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	2b03      	cmp	r3, #3
 800b038:	d101      	bne.n	800b03e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e099      	b.n	800b172 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b03e:	4b4f      	ldr	r3, [pc, #316]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a4e      	ldr	r2, [pc, #312]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b044:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b04a:	f7f9 fcc5 	bl	80049d8 <HAL_GetTick>
 800b04e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b050:	e008      	b.n	800b064 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b052:	f7f9 fcc1 	bl	80049d8 <HAL_GetTick>
 800b056:	4602      	mov	r2, r0
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d901      	bls.n	800b064 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b060:	2303      	movs	r3, #3
 800b062:	e086      	b.n	800b172 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b064:	4b45      	ldr	r3, [pc, #276]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1f0      	bne.n	800b052 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b070:	4b42      	ldr	r3, [pc, #264]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b074:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	031b      	lsls	r3, r3, #12
 800b07e:	493f      	ldr	r1, [pc, #252]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b080:	4313      	orrs	r3, r2
 800b082:	628b      	str	r3, [r1, #40]	@ 0x28
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	3b01      	subs	r3, #1
 800b08a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	3b01      	subs	r3, #1
 800b094:	025b      	lsls	r3, r3, #9
 800b096:	b29b      	uxth	r3, r3
 800b098:	431a      	orrs	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	041b      	lsls	r3, r3, #16
 800b0a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	061b      	lsls	r3, r3, #24
 800b0b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b0b4:	4931      	ldr	r1, [pc, #196]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b0ba:	4b30      	ldr	r3, [pc, #192]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	695b      	ldr	r3, [r3, #20]
 800b0c6:	492d      	ldr	r1, [pc, #180]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b0cc:	4b2b      	ldr	r3, [pc, #172]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d0:	f023 0220 	bic.w	r2, r3, #32
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	4928      	ldr	r1, [pc, #160]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b0de:	4b27      	ldr	r3, [pc, #156]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e2:	4a26      	ldr	r2, [pc, #152]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b0e4:	f023 0310 	bic.w	r3, r3, #16
 800b0e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b0ea:	4b24      	ldr	r3, [pc, #144]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b0ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0ee:	4b24      	ldr	r3, [pc, #144]	@ (800b180 <RCCEx_PLL2_Config+0x160>)
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	69d2      	ldr	r2, [r2, #28]
 800b0f6:	00d2      	lsls	r2, r2, #3
 800b0f8:	4920      	ldr	r1, [pc, #128]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b0fe:	4b1f      	ldr	r3, [pc, #124]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b102:	4a1e      	ldr	r2, [pc, #120]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b104:	f043 0310 	orr.w	r3, r3, #16
 800b108:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d106      	bne.n	800b11e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b110:	4b1a      	ldr	r3, [pc, #104]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b114:	4a19      	ldr	r2, [pc, #100]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b116:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b11a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b11c:	e00f      	b.n	800b13e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d106      	bne.n	800b132 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b124:	4b15      	ldr	r3, [pc, #84]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b128:	4a14      	ldr	r2, [pc, #80]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b12a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b12e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b130:	e005      	b.n	800b13e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b132:	4b12      	ldr	r3, [pc, #72]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b136:	4a11      	ldr	r2, [pc, #68]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b138:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b13c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b13e:	4b0f      	ldr	r3, [pc, #60]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a0e      	ldr	r2, [pc, #56]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b144:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b14a:	f7f9 fc45 	bl	80049d8 <HAL_GetTick>
 800b14e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b150:	e008      	b.n	800b164 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b152:	f7f9 fc41 	bl	80049d8 <HAL_GetTick>
 800b156:	4602      	mov	r2, r0
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d901      	bls.n	800b164 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e006      	b.n	800b172 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b164:	4b05      	ldr	r3, [pc, #20]	@ (800b17c <RCCEx_PLL2_Config+0x15c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d0f0      	beq.n	800b152 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b170:	7bfb      	ldrb	r3, [r7, #15]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	58024400 	.word	0x58024400
 800b180:	ffff0007 	.word	0xffff0007

0800b184 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b192:	4b53      	ldr	r3, [pc, #332]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d101      	bne.n	800b1a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e099      	b.n	800b2d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b1a2:	4b4f      	ldr	r3, [pc, #316]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a4e      	ldr	r2, [pc, #312]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b1a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1ae:	f7f9 fc13 	bl	80049d8 <HAL_GetTick>
 800b1b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1b4:	e008      	b.n	800b1c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b1b6:	f7f9 fc0f 	bl	80049d8 <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d901      	bls.n	800b1c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e086      	b.n	800b2d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1c8:	4b45      	ldr	r3, [pc, #276]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1f0      	bne.n	800b1b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b1d4:	4b42      	ldr	r3, [pc, #264]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b1d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	051b      	lsls	r3, r3, #20
 800b1e2:	493f      	ldr	r1, [pc, #252]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	628b      	str	r3, [r1, #40]	@ 0x28
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	025b      	lsls	r3, r3, #9
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	431a      	orrs	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	3b01      	subs	r3, #1
 800b204:	041b      	lsls	r3, r3, #16
 800b206:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b20a:	431a      	orrs	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	3b01      	subs	r3, #1
 800b212:	061b      	lsls	r3, r3, #24
 800b214:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b218:	4931      	ldr	r1, [pc, #196]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b21a:	4313      	orrs	r3, r2
 800b21c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b21e:	4b30      	ldr	r3, [pc, #192]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b222:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	492d      	ldr	r1, [pc, #180]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b22c:	4313      	orrs	r3, r2
 800b22e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b230:	4b2b      	ldr	r3, [pc, #172]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b234:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	4928      	ldr	r1, [pc, #160]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b23e:	4313      	orrs	r3, r2
 800b240:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b242:	4b27      	ldr	r3, [pc, #156]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b246:	4a26      	ldr	r2, [pc, #152]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b24c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b24e:	4b24      	ldr	r3, [pc, #144]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b252:	4b24      	ldr	r3, [pc, #144]	@ (800b2e4 <RCCEx_PLL3_Config+0x160>)
 800b254:	4013      	ands	r3, r2
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	69d2      	ldr	r2, [r2, #28]
 800b25a:	00d2      	lsls	r2, r2, #3
 800b25c:	4920      	ldr	r1, [pc, #128]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b25e:	4313      	orrs	r3, r2
 800b260:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b262:	4b1f      	ldr	r3, [pc, #124]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b266:	4a1e      	ldr	r2, [pc, #120]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b26c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d106      	bne.n	800b282 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b274:	4b1a      	ldr	r3, [pc, #104]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b278:	4a19      	ldr	r2, [pc, #100]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b27a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b27e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b280:	e00f      	b.n	800b2a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d106      	bne.n	800b296 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b288:	4b15      	ldr	r3, [pc, #84]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b28c:	4a14      	ldr	r2, [pc, #80]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b28e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b292:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b294:	e005      	b.n	800b2a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b296:	4b12      	ldr	r3, [pc, #72]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29a:	4a11      	ldr	r2, [pc, #68]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b29c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b2a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b2a2:	4b0f      	ldr	r3, [pc, #60]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a0e      	ldr	r2, [pc, #56]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b2a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2ae:	f7f9 fb93 	bl	80049d8 <HAL_GetTick>
 800b2b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2b4:	e008      	b.n	800b2c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2b6:	f7f9 fb8f 	bl	80049d8 <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d901      	bls.n	800b2c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e006      	b.n	800b2d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2c8:	4b05      	ldr	r3, [pc, #20]	@ (800b2e0 <RCCEx_PLL3_Config+0x15c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0f0      	beq.n	800b2b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	58024400 	.word	0x58024400
 800b2e4:	ffff0007 	.word	0xffff0007

0800b2e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08a      	sub	sp, #40	@ 0x28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e075      	b.n	800b3e6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b00      	cmp	r3, #0
 800b304:	d105      	bne.n	800b312 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7f8 ff07 	bl	8004120 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2204      	movs	r2, #4
 800b316:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f868 	bl	800b3f0 <HAL_SD_InitCard>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e05d      	b.n	800b3e6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b32a:	f107 0308 	add.w	r3, r7, #8
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fdb5 	bl	800bea0 <HAL_SD_GetCardStatus>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e052      	b.n	800b3e6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b340:	7e3b      	ldrb	r3, [r7, #24]
 800b342:	b2db      	uxtb	r3, r3
 800b344:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b346:	7e7b      	ldrb	r3, [r7, #25]
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b350:	2b01      	cmp	r3, #1
 800b352:	d10a      	bne.n	800b36a <HAL_SD_Init+0x82>
 800b354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b356:	2b00      	cmp	r3, #0
 800b358:	d102      	bne.n	800b360 <HAL_SD_Init+0x78>
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d004      	beq.n	800b36a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b366:	659a      	str	r2, [r3, #88]	@ 0x58
 800b368:	e00b      	b.n	800b382 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d104      	bne.n	800b37c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b378:	659a      	str	r2, [r3, #88]	@ 0x58
 800b37a:	e002      	b.n	800b382 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	4619      	mov	r1, r3
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fe73 	bl	800c074 <HAL_SD_ConfigWideBusOperation>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	e026      	b.n	800b3e6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b398:	f7f9 fb1e 	bl	80049d8 <HAL_GetTick>
 800b39c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b39e:	e011      	b.n	800b3c4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b3a0:	f7f9 fb1a 	bl	80049d8 <HAL_GetTick>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	1ad3      	subs	r3, r2, r3
 800b3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ae:	d109      	bne.n	800b3c4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b3b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	e010      	b.n	800b3e6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 ff67 	bl	800c298 <HAL_SD_GetCardState>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d1e7      	bne.n	800b3a0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3728      	adds	r7, #40	@ 0x28
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
	...

0800b3f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b3f0:	b590      	push	{r4, r7, lr}
 800b3f2:	b08d      	sub	sp, #52	@ 0x34
 800b3f4:	af02      	add	r7, sp, #8
 800b3f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b400:	2300      	movs	r3, #0
 800b402:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b404:	2300      	movs	r3, #0
 800b406:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b408:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b40c:	f04f 0100 	mov.w	r1, #0
 800b410:	f7fe fc76 	bl	8009d00 <HAL_RCCEx_GetPeriphCLKFreq>
 800b414:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800b416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d109      	bne.n	800b430 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b42a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e070      	b.n	800b512 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b432:	0a1b      	lsrs	r3, r3, #8
 800b434:	4a39      	ldr	r2, [pc, #228]	@ (800b51c <HAL_SD_InitCard+0x12c>)
 800b436:	fba2 2303 	umull	r2, r3, r2, r3
 800b43a:	091b      	lsrs	r3, r3, #4
 800b43c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681c      	ldr	r4, [r3, #0]
 800b442:	466a      	mov	r2, sp
 800b444:	f107 0318 	add.w	r3, r7, #24
 800b448:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b44c:	e882 0003 	stmia.w	r2, {r0, r1}
 800b450:	f107 030c 	add.w	r3, r7, #12
 800b454:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b456:	4620      	mov	r0, r4
 800b458:	f004 f9b6 	bl	800f7c8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4618      	mov	r0, r3
 800b462:	f004 f9f9 	bl	800f858 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d005      	beq.n	800b478 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	005b      	lsls	r3, r3, #1
 800b470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b472:	fbb2 f3f3 	udiv	r3, r2, r3
 800b476:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800b478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d007      	beq.n	800b48e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800b47e:	4a28      	ldr	r2, [pc, #160]	@ (800b520 <HAL_SD_InitCard+0x130>)
 800b480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b482:	fbb2 f3f3 	udiv	r3, r2, r3
 800b486:	3301      	adds	r3, #1
 800b488:	4618      	mov	r0, r3
 800b48a:	f7f9 fab1 	bl	80049f0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fff0 	bl	800c474 <SD_PowerON>
 800b494:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00b      	beq.n	800b4b4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4a8:	6a3b      	ldr	r3, [r7, #32]
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e02e      	b.n	800b512 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 ff0f 	bl	800c2d8 <SD_InitCard>
 800b4ba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4bc:	6a3b      	ldr	r3, [r7, #32]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00b      	beq.n	800b4da <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4ce:	6a3b      	ldr	r3, [r7, #32]
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e01b      	b.n	800b512 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f004 fa4e 	bl	800f984 <SDMMC_CmdBlockLength>
 800b4e8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00f      	beq.n	800b510 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a0b      	ldr	r2, [pc, #44]	@ (800b524 <HAL_SD_InitCard+0x134>)
 800b4f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	431a      	orrs	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e000      	b.n	800b512 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	372c      	adds	r7, #44	@ 0x2c
 800b516:	46bd      	mov	sp, r7
 800b518:	bd90      	pop	{r4, r7, pc}
 800b51a:	bf00      	nop
 800b51c:	014f8b59 	.word	0x014f8b59
 800b520:	00012110 	.word	0x00012110
 800b524:	1fe00fff 	.word	0x1fe00fff

0800b528 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b092      	sub	sp, #72	@ 0x48
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
 800b534:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b536:	f7f9 fa4f 	bl	80049d8 <HAL_GetTick>
 800b53a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d107      	bne.n	800b55a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b54e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e167      	b.n	800b82a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b01      	cmp	r3, #1
 800b564:	f040 815a 	bne.w	800b81c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b56e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	441a      	add	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b578:	429a      	cmp	r2, r3
 800b57a:	d907      	bls.n	800b58c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b580:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e14e      	b.n	800b82a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2203      	movs	r2, #3
 800b590:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2200      	movs	r2, #0
 800b59a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d002      	beq.n	800b5aa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a6:	025b      	lsls	r3, r3, #9
 800b5a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	025b      	lsls	r3, r3, #9
 800b5b4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b5b6:	2390      	movs	r3, #144	@ 0x90
 800b5b8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b5ba:	2302      	movs	r3, #2
 800b5bc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f107 0214 	add.w	r2, r7, #20
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f004 f9ab 	bl	800f92c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68da      	ldr	r2, [r3, #12]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5e4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d90a      	bls.n	800b602 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2202      	movs	r2, #2
 800b5f0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f004 fa09 	bl	800fa10 <SDMMC_CmdReadMultiBlock>
 800b5fe:	6478      	str	r0, [r7, #68]	@ 0x44
 800b600:	e009      	b.n	800b616 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2201      	movs	r2, #1
 800b606:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b60e:	4618      	mov	r0, r3
 800b610:	f004 f9db 	bl	800f9ca <SDMMC_CmdReadSingleBlock>
 800b614:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d012      	beq.n	800b642 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a84      	ldr	r2, [pc, #528]	@ (800b834 <HAL_SD_ReadBlocks+0x30c>)
 800b622:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b62a:	431a      	orrs	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e0f3      	b.n	800b82a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b646:	e058      	b.n	800b6fa <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b64e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b652:	2b00      	cmp	r3, #0
 800b654:	d033      	beq.n	800b6be <HAL_SD_ReadBlocks+0x196>
 800b656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b658:	2b1f      	cmp	r3, #31
 800b65a:	d930      	bls.n	800b6be <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800b65c:	2300      	movs	r3, #0
 800b65e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b660:	e027      	b.n	800b6b2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4618      	mov	r0, r3
 800b668:	f004 f8d8 	bl	800f81c <SDMMC_ReadFIFO>
 800b66c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b670:	b2da      	uxtb	r2, r3
 800b672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b674:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b678:	3301      	adds	r3, #1
 800b67a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b67e:	0a1b      	lsrs	r3, r3, #8
 800b680:	b2da      	uxtb	r2, r3
 800b682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b684:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b688:	3301      	adds	r3, #1
 800b68a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68e:	0c1b      	lsrs	r3, r3, #16
 800b690:	b2da      	uxtb	r2, r3
 800b692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b694:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b698:	3301      	adds	r3, #1
 800b69a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b69e:	0e1b      	lsrs	r3, r3, #24
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b6a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800b6ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6b4:	2b07      	cmp	r3, #7
 800b6b6:	d9d4      	bls.n	800b662 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800b6b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ba:	3b20      	subs	r3, #32
 800b6bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b6be:	f7f9 f98b 	bl	80049d8 <HAL_GetTick>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d902      	bls.n	800b6d4 <HAL_SD_ReadBlocks+0x1ac>
 800b6ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d112      	bne.n	800b6fa <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a56      	ldr	r2, [pc, #344]	@ (800b834 <HAL_SD_ReadBlocks+0x30c>)
 800b6da:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	e097      	b.n	800b82a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b700:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b704:	2b00      	cmp	r3, #0
 800b706:	d09f      	beq.n	800b648 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	68da      	ldr	r2, [r3, #12]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b716:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b71e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b722:	2b00      	cmp	r3, #0
 800b724:	d022      	beq.n	800b76c <HAL_SD_ReadBlocks+0x244>
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d91f      	bls.n	800b76c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b730:	2b03      	cmp	r3, #3
 800b732:	d01b      	beq.n	800b76c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4618      	mov	r0, r3
 800b73a:	f004 f9d3 	bl	800fae4 <SDMMC_CmdStopTransfer>
 800b73e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800b740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b742:	2b00      	cmp	r3, #0
 800b744:	d012      	beq.n	800b76c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a3a      	ldr	r2, [pc, #232]	@ (800b834 <HAL_SD_ReadBlocks+0x30c>)
 800b74c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b754:	431a      	orrs	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	e05e      	b.n	800b82a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b772:	f003 0308 	and.w	r3, r3, #8
 800b776:	2b00      	cmp	r3, #0
 800b778:	d012      	beq.n	800b7a0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a2d      	ldr	r2, [pc, #180]	@ (800b834 <HAL_SD_ReadBlocks+0x30c>)
 800b780:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b786:	f043 0208 	orr.w	r2, r3, #8
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	e044      	b.n	800b82a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7a6:	f003 0302 	and.w	r3, r3, #2
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d012      	beq.n	800b7d4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a20      	ldr	r2, [pc, #128]	@ (800b834 <HAL_SD_ReadBlocks+0x30c>)
 800b7b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7ba:	f043 0202 	orr.w	r2, r3, #2
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e02a      	b.n	800b82a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7da:	f003 0320 	and.w	r3, r3, #32
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d012      	beq.n	800b808 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a13      	ldr	r2, [pc, #76]	@ (800b834 <HAL_SD_ReadBlocks+0x30c>)
 800b7e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7ee:	f043 0220 	orr.w	r2, r3, #32
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	e010      	b.n	800b82a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a0a      	ldr	r2, [pc, #40]	@ (800b838 <HAL_SD_ReadBlocks+0x310>)
 800b80e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	e006      	b.n	800b82a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b820:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b828:	2301      	movs	r3, #1
  }
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3748      	adds	r7, #72	@ 0x48
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	1fe00fff 	.word	0x1fe00fff
 800b838:	18000f3a 	.word	0x18000f3a

0800b83c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b092      	sub	sp, #72	@ 0x48
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
 800b848:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b84a:	f7f9 f8c5 	bl	80049d8 <HAL_GetTick>
 800b84e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d107      	bne.n	800b86e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b862:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e16b      	b.n	800bb46 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b01      	cmp	r3, #1
 800b878:	f040 815e 	bne.w	800bb38 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b882:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	441a      	add	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d907      	bls.n	800b8a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b894:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e152      	b.n	800bb46 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2203      	movs	r2, #3
 800b8a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d002      	beq.n	800b8be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ba:	025b      	lsls	r3, r3, #9
 800b8bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b8be:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	025b      	lsls	r3, r3, #9
 800b8c8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b8ca:	2390      	movs	r3, #144	@ 0x90
 800b8cc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f107 0218 	add.w	r2, r7, #24
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f004 f821 	bl	800f92c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68da      	ldr	r2, [r3, #12]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8f8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d90a      	bls.n	800b916 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2220      	movs	r2, #32
 800b904:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b90c:	4618      	mov	r0, r3
 800b90e:	f004 f8c5 	bl	800fa9c <SDMMC_CmdWriteMultiBlock>
 800b912:	6478      	str	r0, [r7, #68]	@ 0x44
 800b914:	e009      	b.n	800b92a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2210      	movs	r2, #16
 800b91a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b922:	4618      	mov	r0, r3
 800b924:	f004 f897 	bl	800fa56 <SDMMC_CmdWriteSingleBlock>
 800b928:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b92a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d012      	beq.n	800b956 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a86      	ldr	r2, [pc, #536]	@ (800bb50 <HAL_SD_WriteBlocks+0x314>)
 800b936:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b93c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b93e:	431a      	orrs	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e0f7      	b.n	800bb46 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800b95a:	e05c      	b.n	800ba16 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b966:	2b00      	cmp	r3, #0
 800b968:	d037      	beq.n	800b9da <HAL_SD_WriteBlocks+0x19e>
 800b96a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b96c:	2b1f      	cmp	r3, #31
 800b96e:	d934      	bls.n	800b9da <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800b970:	2300      	movs	r3, #0
 800b972:	643b      	str	r3, [r7, #64]	@ 0x40
 800b974:	e02b      	b.n	800b9ce <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800b976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b97e:	3301      	adds	r3, #1
 800b980:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	021a      	lsls	r2, r3, #8
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b98e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b990:	3301      	adds	r3, #1
 800b992:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	041a      	lsls	r2, r3, #16
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b9a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b9a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	061a      	lsls	r2, r3, #24
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f107 0214 	add.w	r2, r7, #20
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f003 ff37 	bl	800f836 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800b9c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9d0:	2b07      	cmp	r3, #7
 800b9d2:	d9d0      	bls.n	800b976 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800b9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d6:	3b20      	subs	r3, #32
 800b9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b9da:	f7f8 fffd 	bl	80049d8 <HAL_GetTick>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d902      	bls.n	800b9f0 <HAL_SD_WriteBlocks+0x1b4>
 800b9ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d112      	bne.n	800ba16 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a56      	ldr	r2, [pc, #344]	@ (800bb50 <HAL_SD_WriteBlocks+0x314>)
 800b9f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e097      	b.n	800bb46 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba1c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d09b      	beq.n	800b95c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	68da      	ldr	r2, [r3, #12]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ba32:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d022      	beq.n	800ba88 <HAL_SD_WriteBlocks+0x24c>
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d91f      	bls.n	800ba88 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba4c:	2b03      	cmp	r3, #3
 800ba4e:	d01b      	beq.n	800ba88 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4618      	mov	r0, r3
 800ba56:	f004 f845 	bl	800fae4 <SDMMC_CmdStopTransfer>
 800ba5a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800ba5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d012      	beq.n	800ba88 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a3a      	ldr	r2, [pc, #232]	@ (800bb50 <HAL_SD_WriteBlocks+0x314>)
 800ba68:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba70:	431a      	orrs	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e05e      	b.n	800bb46 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba8e:	f003 0308 	and.w	r3, r3, #8
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d012      	beq.n	800babc <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a2d      	ldr	r2, [pc, #180]	@ (800bb50 <HAL_SD_WriteBlocks+0x314>)
 800ba9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baa2:	f043 0208 	orr.w	r2, r3, #8
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	e044      	b.n	800bb46 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bac2:	f003 0302 	and.w	r3, r3, #2
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d012      	beq.n	800baf0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a20      	ldr	r2, [pc, #128]	@ (800bb50 <HAL_SD_WriteBlocks+0x314>)
 800bad0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bad6:	f043 0202 	orr.w	r2, r3, #2
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e02a      	b.n	800bb46 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baf6:	f003 0310 	and.w	r3, r3, #16
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d012      	beq.n	800bb24 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a13      	ldr	r2, [pc, #76]	@ (800bb50 <HAL_SD_WriteBlocks+0x314>)
 800bb04:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb0a:	f043 0210 	orr.w	r2, r3, #16
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e010      	b.n	800bb46 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a0a      	ldr	r2, [pc, #40]	@ (800bb54 <HAL_SD_WriteBlocks+0x318>)
 800bb2a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	e006      	b.n	800bb46 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb3c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
  }
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3748      	adds	r7, #72	@ 0x48
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	1fe00fff 	.word	0x1fe00fff
 800bb54:	18000f3a 	.word	0x18000f3a

0800bb58 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb66:	0f9b      	lsrs	r3, r3, #30
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb72:	0e9b      	lsrs	r3, r3, #26
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	f003 030f 	and.w	r3, r3, #15
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb84:	0e1b      	lsrs	r3, r3, #24
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	f003 0303 	and.w	r3, r3, #3
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb96:	0c1b      	lsrs	r3, r3, #16
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bba2:	0a1b      	lsrs	r3, r3, #8
 800bba4:	b2da      	uxtb	r2, r3
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbb8:	0d1b      	lsrs	r3, r3, #20
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbc4:	0c1b      	lsrs	r3, r3, #16
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	f003 030f 	and.w	r3, r3, #15
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbd6:	0bdb      	lsrs	r3, r3, #15
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbe8:	0b9b      	lsrs	r3, r3, #14
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbfa:	0b5b      	lsrs	r3, r3, #13
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc0c:	0b1b      	lsrs	r3, r3, #12
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	f003 0301 	and.w	r3, r3, #1
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d163      	bne.n	800bcf0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc2c:	009a      	lsls	r2, r3, #2
 800bc2e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bc32:	4013      	ands	r3, r2
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800bc38:	0f92      	lsrs	r2, r2, #30
 800bc3a:	431a      	orrs	r2, r3
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc44:	0edb      	lsrs	r3, r3, #27
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	f003 0307 	and.w	r3, r3, #7
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc56:	0e1b      	lsrs	r3, r3, #24
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	f003 0307 	and.w	r3, r3, #7
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc68:	0d5b      	lsrs	r3, r3, #21
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	f003 0307 	and.w	r3, r3, #7
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc7a:	0c9b      	lsrs	r3, r3, #18
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	f003 0307 	and.w	r3, r3, #7
 800bc82:	b2da      	uxtb	r2, r3
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc8c:	0bdb      	lsrs	r3, r3, #15
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	f003 0307 	and.w	r3, r3, #7
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	7e1b      	ldrb	r3, [r3, #24]
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	f003 0307 	and.w	r3, r3, #7
 800bcae:	3302      	adds	r3, #2
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bcba:	fb03 f202 	mul.w	r2, r3, r2
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	7a1b      	ldrb	r3, [r3, #8]
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	f003 030f 	and.w	r3, r3, #15
 800bccc:	2201      	movs	r2, #1
 800bcce:	409a      	lsls	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800bcdc:	0a52      	lsrs	r2, r2, #9
 800bcde:	fb03 f202 	mul.w	r2, r3, r2
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcec:	655a      	str	r2, [r3, #84]	@ 0x54
 800bcee:	e031      	b.n	800bd54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d11d      	bne.n	800bd34 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bcfc:	041b      	lsls	r3, r3, #16
 800bcfe:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd06:	0c1b      	lsrs	r3, r3, #16
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	3301      	adds	r3, #1
 800bd14:	029a      	lsls	r2, r3, #10
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd28:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	655a      	str	r2, [r3, #84]	@ 0x54
 800bd32:	e00f      	b.n	800bd54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a58      	ldr	r2, [pc, #352]	@ (800be9c <HAL_SD_GetCardCSD+0x344>)
 800bd3a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e09d      	b.n	800be90 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd58:	0b9b      	lsrs	r3, r3, #14
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	f003 0301 	and.w	r3, r3, #1
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd6a:	09db      	lsrs	r3, r3, #7
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd8c:	0fdb      	lsrs	r3, r3, #31
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd98:	0f5b      	lsrs	r3, r3, #29
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f003 0303 	and.w	r3, r3, #3
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdaa:	0e9b      	lsrs	r3, r3, #26
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	f003 0307 	and.w	r3, r3, #7
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdbc:	0d9b      	lsrs	r3, r3, #22
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	f003 030f 	and.w	r3, r3, #15
 800bdc4:	b2da      	uxtb	r2, r3
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdce:	0d5b      	lsrs	r3, r3, #21
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	f003 0301 	and.w	r3, r3, #1
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdea:	0c1b      	lsrs	r3, r3, #16
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdfe:	0bdb      	lsrs	r3, r3, #15
 800be00:	b2db      	uxtb	r3, r3
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	b2da      	uxtb	r2, r3
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be12:	0b9b      	lsrs	r3, r3, #14
 800be14:	b2db      	uxtb	r3, r3
 800be16:	f003 0301 	and.w	r3, r3, #1
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be26:	0b5b      	lsrs	r3, r3, #13
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be3a:	0b1b      	lsrs	r3, r3, #12
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	f003 0301 	and.w	r3, r3, #1
 800be42:	b2da      	uxtb	r2, r3
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be4e:	0a9b      	lsrs	r3, r3, #10
 800be50:	b2db      	uxtb	r3, r3
 800be52:	f003 0303 	and.w	r3, r3, #3
 800be56:	b2da      	uxtb	r2, r3
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be62:	0a1b      	lsrs	r3, r3, #8
 800be64:	b2db      	uxtb	r3, r3
 800be66:	f003 0303 	and.w	r3, r3, #3
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be76:	085b      	lsrs	r3, r3, #1
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be7e:	b2da      	uxtb	r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	1fe00fff 	.word	0x1fe00fff

0800bea0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b094      	sub	sp, #80	@ 0x50
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d101      	bne.n	800bec0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	e0a7      	b.n	800c010 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800bec0:	f107 0308 	add.w	r3, r7, #8
 800bec4:	4619      	mov	r1, r3
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fb62 	bl	800c590 <SD_SendSDStatus>
 800becc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800bece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d011      	beq.n	800bef8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a4f      	ldr	r2, [pc, #316]	@ (800c018 <HAL_SD_GetCardStatus+0x178>)
 800beda:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bee0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bee2:	431a      	orrs	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800bef6:	e070      	b.n	800bfda <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	099b      	lsrs	r3, r3, #6
 800befc:	b2db      	uxtb	r3, r3
 800befe:	f003 0303 	and.w	r3, r3, #3
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	095b      	lsrs	r3, r3, #5
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	b2da      	uxtb	r2, r3
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	0a1b      	lsrs	r3, r3, #8
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	0e1b      	lsrs	r3, r3, #24
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	061a      	lsls	r2, r3, #24
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	021b      	lsls	r3, r3, #8
 800bf3a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf3e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	0a1b      	lsrs	r3, r3, #8
 800bf44:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bf48:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	0e1b      	lsrs	r3, r3, #24
 800bf4e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	0a1b      	lsrs	r3, r3, #8
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	0d1b      	lsrs	r3, r3, #20
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	f003 030f 	and.w	r3, r3, #15
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	0c1b      	lsrs	r3, r3, #16
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	0a9b      	lsrs	r3, r3, #10
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	0a1b      	lsrs	r3, r3, #8
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	f003 0303 	and.w	r3, r3, #3
 800bfac:	b2da      	uxtb	r2, r3
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	091b      	lsrs	r3, r3, #4
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	f003 030f 	and.w	r3, r3, #15
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	f003 030f 	and.w	r3, r3, #15
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	0e1b      	lsrs	r3, r3, #24
 800bfd4:	b2da      	uxtb	r2, r3
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f003 fcce 	bl	800f984 <SDMMC_CmdBlockLength>
 800bfe8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00d      	beq.n	800c00c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a08      	ldr	r2, [pc, #32]	@ (800c018 <HAL_SD_GetCardStatus+0x178>)
 800bff6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bffc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2201      	movs	r2, #1
 800c002:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800c00c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c010:	4618      	mov	r0, r3
 800c012:	3750      	adds	r7, #80	@ 0x50
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	1fe00fff 	.word	0x1fe00fff

0800c01c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c074:	b590      	push	{r4, r7, lr}
 800c076:	b08d      	sub	sp, #52	@ 0x34
 800c078:	af02      	add	r7, sp, #8
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2203      	movs	r2, #3
 800c088:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c090:	2b03      	cmp	r3, #3
 800c092:	d02e      	beq.n	800c0f2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c09a:	d106      	bne.n	800c0aa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	635a      	str	r2, [r3, #52]	@ 0x34
 800c0a8:	e029      	b.n	800c0fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c0b0:	d10a      	bne.n	800c0c8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fb64 	bl	800c780 <SD_WideBus_Enable>
 800c0b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	431a      	orrs	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	635a      	str	r2, [r3, #52]	@ 0x34
 800c0c6:	e01a      	b.n	800c0fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fba1 	bl	800c816 <SD_WideBus_Disable>
 800c0d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	431a      	orrs	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	635a      	str	r2, [r3, #52]	@ 0x34
 800c0e2:	e00c      	b.n	800c0fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	635a      	str	r2, [r3, #52]	@ 0x34
 800c0f0:	e005      	b.n	800c0fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0f6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c102:	2b00      	cmp	r3, #0
 800c104:	d007      	beq.n	800c116 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a5f      	ldr	r2, [pc, #380]	@ (800c288 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c10c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c114:	e096      	b.n	800c244 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c116:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c11a:	f04f 0100 	mov.w	r1, #0
 800c11e:	f7fd fdef 	bl	8009d00 <HAL_RCCEx_GetPeriphCLKFreq>
 800c122:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	2b00      	cmp	r3, #0
 800c128:	f000 8083 	beq.w	800c232 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	695a      	ldr	r2, [r3, #20]
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	4950      	ldr	r1, [pc, #320]	@ (800c28c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c14a:	fba1 1303 	umull	r1, r3, r1, r3
 800c14e:	0e1b      	lsrs	r3, r3, #24
 800c150:	429a      	cmp	r2, r3
 800c152:	d303      	bcc.n	800c15c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	61bb      	str	r3, [r7, #24]
 800c15a:	e05a      	b.n	800c212 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c164:	d103      	bne.n	800c16e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	61bb      	str	r3, [r7, #24]
 800c16c:	e051      	b.n	800c212 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c176:	d126      	bne.n	800c1c6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10e      	bne.n	800c19e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	4a43      	ldr	r2, [pc, #268]	@ (800c290 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d906      	bls.n	800c196 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	4a40      	ldr	r2, [pc, #256]	@ (800c28c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c18c:	fba2 2303 	umull	r2, r3, r2, r3
 800c190:	0e5b      	lsrs	r3, r3, #25
 800c192:	61bb      	str	r3, [r7, #24]
 800c194:	e03d      	b.n	800c212 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	61bb      	str	r3, [r7, #24]
 800c19c:	e039      	b.n	800c212 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	005b      	lsls	r3, r3, #1
 800c1a4:	69fa      	ldr	r2, [r7, #28]
 800c1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1aa:	4a39      	ldr	r2, [pc, #228]	@ (800c290 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d906      	bls.n	800c1be <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	4a36      	ldr	r2, [pc, #216]	@ (800c28c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c1b4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b8:	0e5b      	lsrs	r3, r3, #25
 800c1ba:	61bb      	str	r3, [r7, #24]
 800c1bc:	e029      	b.n	800c212 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	695b      	ldr	r3, [r3, #20]
 800c1c2:	61bb      	str	r3, [r7, #24]
 800c1c4:	e025      	b.n	800c212 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10e      	bne.n	800c1ec <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	4a30      	ldr	r2, [pc, #192]	@ (800c294 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d906      	bls.n	800c1e4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	4a2c      	ldr	r2, [pc, #176]	@ (800c28c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c1da:	fba2 2303 	umull	r2, r3, r2, r3
 800c1de:	0e1b      	lsrs	r3, r3, #24
 800c1e0:	61bb      	str	r3, [r7, #24]
 800c1e2:	e016      	b.n	800c212 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	695b      	ldr	r3, [r3, #20]
 800c1e8:	61bb      	str	r3, [r7, #24]
 800c1ea:	e012      	b.n	800c212 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	695b      	ldr	r3, [r3, #20]
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	69fa      	ldr	r2, [r7, #28]
 800c1f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f8:	4a26      	ldr	r2, [pc, #152]	@ (800c294 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d906      	bls.n	800c20c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	4a22      	ldr	r2, [pc, #136]	@ (800c28c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c202:	fba2 2303 	umull	r2, r3, r2, r3
 800c206:	0e1b      	lsrs	r3, r3, #24
 800c208:	61bb      	str	r3, [r7, #24]
 800c20a:	e002      	b.n	800c212 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	695b      	ldr	r3, [r3, #20]
 800c210:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681c      	ldr	r4, [r3, #0]
 800c216:	466a      	mov	r2, sp
 800c218:	f107 0314 	add.w	r3, r7, #20
 800c21c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c220:	e882 0003 	stmia.w	r2, {r0, r1}
 800c224:	f107 0308 	add.w	r3, r7, #8
 800c228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c22a:	4620      	mov	r0, r4
 800c22c:	f003 facc 	bl	800f7c8 <SDMMC_Init>
 800c230:	e008      	b.n	800c244 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c236:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c24c:	4618      	mov	r0, r3
 800c24e:	f003 fb99 	bl	800f984 <SDMMC_CmdBlockLength>
 800c252:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00c      	beq.n	800c274 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a0a      	ldr	r2, [pc, #40]	@ (800c288 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c260:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	431a      	orrs	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800c27c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c280:	4618      	mov	r0, r3
 800c282:	372c      	adds	r7, #44	@ 0x2c
 800c284:	46bd      	mov	sp, r7
 800c286:	bd90      	pop	{r4, r7, pc}
 800c288:	1fe00fff 	.word	0x1fe00fff
 800c28c:	55e63b89 	.word	0x55e63b89
 800c290:	02faf080 	.word	0x02faf080
 800c294:	017d7840 	.word	0x017d7840

0800c298 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c2a4:	f107 030c 	add.w	r3, r7, #12
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 fa40 	bl	800c730 <SD_SendStatus>
 800c2b0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d005      	beq.n	800c2c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	431a      	orrs	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	0a5b      	lsrs	r3, r3, #9
 800c2c8:	f003 030f 	and.w	r3, r3, #15
 800c2cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c2ce:	693b      	ldr	r3, [r7, #16]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3718      	adds	r7, #24
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b090      	sub	sp, #64	@ 0x40
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c2e4:	f7f8 fb78 	bl	80049d8 <HAL_GetTick>
 800c2e8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f003 fac3 	bl	800f87a <SDMMC_GetPowerState>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d102      	bne.n	800c300 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c2fa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c2fe:	e0b5      	b.n	800c46c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c304:	2b03      	cmp	r3, #3
 800c306:	d02e      	beq.n	800c366 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f003 fd0e 	bl	800fd2e <SDMMC_CmdSendCID>
 800c312:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c316:	2b00      	cmp	r3, #0
 800c318:	d001      	beq.n	800c31e <SD_InitCard+0x46>
    {
      return errorstate;
 800c31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31c:	e0a6      	b.n	800c46c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2100      	movs	r1, #0
 800c324:	4618      	mov	r0, r3
 800c326:	f003 faee 	bl	800f906 <SDMMC_GetResponse>
 800c32a:	4602      	mov	r2, r0
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2104      	movs	r1, #4
 800c336:	4618      	mov	r0, r3
 800c338:	f003 fae5 	bl	800f906 <SDMMC_GetResponse>
 800c33c:	4602      	mov	r2, r0
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2108      	movs	r1, #8
 800c348:	4618      	mov	r0, r3
 800c34a:	f003 fadc 	bl	800f906 <SDMMC_GetResponse>
 800c34e:	4602      	mov	r2, r0
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	210c      	movs	r1, #12
 800c35a:	4618      	mov	r0, r3
 800c35c:	f003 fad3 	bl	800f906 <SDMMC_GetResponse>
 800c360:	4602      	mov	r2, r0
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c36a:	2b03      	cmp	r3, #3
 800c36c:	d01d      	beq.n	800c3aa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c36e:	e019      	b.n	800c3a4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f107 020a 	add.w	r2, r7, #10
 800c378:	4611      	mov	r1, r2
 800c37a:	4618      	mov	r0, r3
 800c37c:	f003 fd16 	bl	800fdac <SDMMC_CmdSetRelAdd>
 800c380:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c384:	2b00      	cmp	r3, #0
 800c386:	d001      	beq.n	800c38c <SD_InitCard+0xb4>
      {
        return errorstate;
 800c388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c38a:	e06f      	b.n	800c46c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c38c:	f7f8 fb24 	bl	80049d8 <HAL_GetTick>
 800c390:	4602      	mov	r2, r0
 800c392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	f241 3287 	movw	r2, #4999	@ 0x1387
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d902      	bls.n	800c3a4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c39e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c3a2:	e063      	b.n	800c46c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c3a4:	897b      	ldrh	r3, [r7, #10]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d0e2      	beq.n	800c370 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d036      	beq.n	800c420 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c3b2:	897b      	ldrh	r3, [r7, #10]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3c2:	041b      	lsls	r3, r3, #16
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	f003 fcd0 	bl	800fd6c <SDMMC_CmdSendCSD>
 800c3cc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <SD_InitCard+0x100>
    {
      return errorstate;
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d6:	e049      	b.n	800c46c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2100      	movs	r1, #0
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f003 fa91 	bl	800f906 <SDMMC_GetResponse>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2104      	movs	r1, #4
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f003 fa88 	bl	800f906 <SDMMC_GetResponse>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2108      	movs	r1, #8
 800c402:	4618      	mov	r0, r3
 800c404:	f003 fa7f 	bl	800f906 <SDMMC_GetResponse>
 800c408:	4602      	mov	r2, r0
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	210c      	movs	r1, #12
 800c414:	4618      	mov	r0, r3
 800c416:	f003 fa76 	bl	800f906 <SDMMC_GetResponse>
 800c41a:	4602      	mov	r2, r0
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2104      	movs	r1, #4
 800c426:	4618      	mov	r0, r3
 800c428:	f003 fa6d 	bl	800f906 <SDMMC_GetResponse>
 800c42c:	4603      	mov	r3, r0
 800c42e:	0d1a      	lsrs	r2, r3, #20
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c434:	f107 030c 	add.w	r3, r7, #12
 800c438:	4619      	mov	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7ff fb8c 	bl	800bb58 <HAL_SD_GetCardCSD>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c446:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c44a:	e00f      	b.n	800c46c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c454:	041b      	lsls	r3, r3, #16
 800c456:	4619      	mov	r1, r3
 800c458:	4610      	mov	r0, r2
 800c45a:	f003 fb7f 	bl	800fb5c <SDMMC_CmdSelDesel>
 800c45e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800c460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c462:	2b00      	cmp	r3, #0
 800c464:	d001      	beq.n	800c46a <SD_InitCard+0x192>
  {
    return errorstate;
 800c466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c468:	e000      	b.n	800c46c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3740      	adds	r7, #64	@ 0x40
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c47c:	2300      	movs	r3, #0
 800c47e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800c480:	2300      	movs	r3, #0
 800c482:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800c484:	2300      	movs	r3, #0
 800c486:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f003 fb88 	bl	800fba2 <SDMMC_CmdGoIdleState>
 800c492:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <SD_PowerON+0x2a>
  {
    return errorstate;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	e072      	b.n	800c584 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f003 fb9b 	bl	800fbde <SDMMC_CmdOperCond>
 800c4a8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4b0:	d10d      	bne.n	800c4ce <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f003 fb70 	bl	800fba2 <SDMMC_CmdGoIdleState>
 800c4c2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d004      	beq.n	800c4d4 <SD_PowerON+0x60>
    {
      return errorstate;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	e05a      	b.n	800c584 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d137      	bne.n	800c54c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f003 fb9b 	bl	800fc1e <SDMMC_CmdAppCommand>
 800c4e8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d02d      	beq.n	800c54c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c4f0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c4f4:	e046      	b.n	800c584 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f003 fb8e 	bl	800fc1e <SDMMC_CmdAppCommand>
 800c502:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d001      	beq.n	800c50e <SD_PowerON+0x9a>
    {
      return errorstate;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	e03a      	b.n	800c584 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	491e      	ldr	r1, [pc, #120]	@ (800c58c <SD_PowerON+0x118>)
 800c514:	4618      	mov	r0, r3
 800c516:	f003 fba5 	bl	800fc64 <SDMMC_CmdAppOperCommand>
 800c51a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d002      	beq.n	800c528 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c522:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c526:	e02d      	b.n	800c584 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2100      	movs	r1, #0
 800c52e:	4618      	mov	r0, r3
 800c530:	f003 f9e9 	bl	800f906 <SDMMC_GetResponse>
 800c534:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	0fdb      	lsrs	r3, r3, #31
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d101      	bne.n	800c542 <SD_PowerON+0xce>
 800c53e:	2301      	movs	r3, #1
 800c540:	e000      	b.n	800c544 <SD_PowerON+0xd0>
 800c542:	2300      	movs	r3, #0
 800c544:	613b      	str	r3, [r7, #16]

    count++;
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	3301      	adds	r3, #1
 800c54a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c552:	4293      	cmp	r3, r2
 800c554:	d802      	bhi.n	800c55c <SD_PowerON+0xe8>
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0cc      	beq.n	800c4f6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c562:	4293      	cmp	r3, r2
 800c564:	d902      	bls.n	800c56c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c566:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c56a:	e00b      	b.n	800c584 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	c1100000 	.word	0xc1100000

0800c590 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b08c      	sub	sp, #48	@ 0x30
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c59a:	f7f8 fa1d 	bl	80049d8 <HAL_GetTick>
 800c59e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f003 f9ab 	bl	800f906 <SDMMC_GetResponse>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c5ba:	d102      	bne.n	800c5c2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c5bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c5c0:	e0b0      	b.n	800c724 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2140      	movs	r1, #64	@ 0x40
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f003 f9db 	bl	800f984 <SDMMC_CmdBlockLength>
 800c5ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c5d0:	6a3b      	ldr	r3, [r7, #32]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d005      	beq.n	800c5e2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	e0a0      	b.n	800c724 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5ea:	041b      	lsls	r3, r3, #16
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	f003 fb15 	bl	800fc1e <SDMMC_CmdAppCommand>
 800c5f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d005      	beq.n	800c608 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c604:	6a3b      	ldr	r3, [r7, #32]
 800c606:	e08d      	b.n	800c724 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c608:	f04f 33ff 	mov.w	r3, #4294967295
 800c60c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c60e:	2340      	movs	r3, #64	@ 0x40
 800c610:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c612:	2360      	movs	r3, #96	@ 0x60
 800c614:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c616:	2302      	movs	r3, #2
 800c618:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c61a:	2300      	movs	r3, #0
 800c61c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c61e:	2301      	movs	r3, #1
 800c620:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f107 0208 	add.w	r2, r7, #8
 800c62a:	4611      	mov	r1, r2
 800c62c:	4618      	mov	r0, r3
 800c62e:	f003 f97d 	bl	800f92c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4618      	mov	r0, r3
 800c638:	f003 fbfd 	bl	800fe36 <SDMMC_CmdStatusRegister>
 800c63c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d02b      	beq.n	800c69c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c64c:	6a3b      	ldr	r3, [r7, #32]
 800c64e:	e069      	b.n	800c724 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c656:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d013      	beq.n	800c686 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800c65e:	2300      	movs	r3, #0
 800c660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c662:	e00d      	b.n	800c680 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4618      	mov	r0, r3
 800c66a:	f003 f8d7 	bl	800f81c <SDMMC_ReadFIFO>
 800c66e:	4602      	mov	r2, r0
 800c670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c672:	601a      	str	r2, [r3, #0]
        pData++;
 800c674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c676:	3304      	adds	r3, #4
 800c678:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800c67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67c:	3301      	adds	r3, #1
 800c67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c682:	2b07      	cmp	r3, #7
 800c684:	d9ee      	bls.n	800c664 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c686:	f7f8 f9a7 	bl	80049d8 <HAL_GetTick>
 800c68a:	4602      	mov	r2, r0
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c694:	d102      	bne.n	800c69c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c696:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c69a:	e043      	b.n	800c724 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6a2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0d2      	beq.n	800c650 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6b0:	f003 0308 	and.w	r3, r3, #8
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c6b8:	2308      	movs	r3, #8
 800c6ba:	e033      	b.n	800c724 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6c2:	f003 0302 	and.w	r3, r3, #2
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d001      	beq.n	800c6ce <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c6ca:	2302      	movs	r3, #2
 800c6cc:	e02a      	b.n	800c724 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6d4:	f003 0320 	and.w	r3, r3, #32
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d017      	beq.n	800c70c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800c6dc:	2320      	movs	r3, #32
 800c6de:	e021      	b.n	800c724 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f003 f899 	bl	800f81c <SDMMC_ReadFIFO>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ee:	601a      	str	r2, [r3, #0]
    pData++;
 800c6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c6f6:	f7f8 f96f 	bl	80049d8 <HAL_GetTick>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c704:	d102      	bne.n	800c70c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c706:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c70a:	e00b      	b.n	800c724 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1e2      	bne.n	800c6e0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a03      	ldr	r2, [pc, #12]	@ (800c72c <SD_SendSDStatus+0x19c>)
 800c720:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3730      	adds	r7, #48	@ 0x30
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	18000f3a 	.word	0x18000f3a

0800c730 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d102      	bne.n	800c746 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c740:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c744:	e018      	b.n	800c778 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c74e:	041b      	lsls	r3, r3, #16
 800c750:	4619      	mov	r1, r3
 800c752:	4610      	mov	r0, r2
 800c754:	f003 fb4c 	bl	800fdf0 <SDMMC_CmdSendStatus>
 800c758:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d001      	beq.n	800c764 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	e009      	b.n	800c778 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2100      	movs	r1, #0
 800c76a:	4618      	mov	r0, r3
 800c76c:	f003 f8cb 	bl	800f906 <SDMMC_GetResponse>
 800c770:	4602      	mov	r2, r0
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c788:	2300      	movs	r3, #0
 800c78a:	60fb      	str	r3, [r7, #12]
 800c78c:	2300      	movs	r3, #0
 800c78e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2100      	movs	r1, #0
 800c796:	4618      	mov	r0, r3
 800c798:	f003 f8b5 	bl	800f906 <SDMMC_GetResponse>
 800c79c:	4603      	mov	r3, r0
 800c79e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c7a6:	d102      	bne.n	800c7ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c7a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c7ac:	e02f      	b.n	800c80e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c7ae:	f107 030c 	add.w	r3, r7, #12
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f879 	bl	800c8ac <SD_FindSCR>
 800c7ba:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d001      	beq.n	800c7c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	e023      	b.n	800c80e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d01c      	beq.n	800c80a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7d8:	041b      	lsls	r3, r3, #16
 800c7da:	4619      	mov	r1, r3
 800c7dc:	4610      	mov	r0, r2
 800c7de:	f003 fa1e 	bl	800fc1e <SDMMC_CmdAppCommand>
 800c7e2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d001      	beq.n	800c7ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	e00f      	b.n	800c80e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2102      	movs	r1, #2
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f003 fa55 	bl	800fca4 <SDMMC_CmdBusWidth>
 800c7fa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	e003      	b.n	800c80e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c806:	2300      	movs	r3, #0
 800c808:	e001      	b.n	800c80e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c80a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b086      	sub	sp, #24
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c81e:	2300      	movs	r3, #0
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	2300      	movs	r3, #0
 800c824:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2100      	movs	r1, #0
 800c82c:	4618      	mov	r0, r3
 800c82e:	f003 f86a 	bl	800f906 <SDMMC_GetResponse>
 800c832:	4603      	mov	r3, r0
 800c834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c838:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c83c:	d102      	bne.n	800c844 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c83e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c842:	e02f      	b.n	800c8a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c844:	f107 030c 	add.w	r3, r7, #12
 800c848:	4619      	mov	r1, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f82e 	bl	800c8ac <SD_FindSCR>
 800c850:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	e023      	b.n	800c8a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c862:	2b00      	cmp	r3, #0
 800c864:	d01c      	beq.n	800c8a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c86e:	041b      	lsls	r3, r3, #16
 800c870:	4619      	mov	r1, r3
 800c872:	4610      	mov	r0, r2
 800c874:	f003 f9d3 	bl	800fc1e <SDMMC_CmdAppCommand>
 800c878:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	e00f      	b.n	800c8a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2100      	movs	r1, #0
 800c88a:	4618      	mov	r0, r3
 800c88c:	f003 fa0a 	bl	800fca4 <SDMMC_CmdBusWidth>
 800c890:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d001      	beq.n	800c89c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	e003      	b.n	800c8a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c89c:	2300      	movs	r3, #0
 800c89e:	e001      	b.n	800c8a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c8a0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3718      	adds	r7, #24
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08e      	sub	sp, #56	@ 0x38
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c8b6:	f7f8 f88f 	bl	80049d8 <HAL_GetTick>
 800c8ba:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	60bb      	str	r3, [r7, #8]
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2108      	movs	r1, #8
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f003 f856 	bl	800f984 <SDMMC_CmdBlockLength>
 800c8d8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d001      	beq.n	800c8e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e2:	e0ad      	b.n	800ca40 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8ec:	041b      	lsls	r3, r3, #16
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	4610      	mov	r0, r2
 800c8f2:	f003 f994 	bl	800fc1e <SDMMC_CmdAppCommand>
 800c8f6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c900:	e09e      	b.n	800ca40 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c902:	f04f 33ff 	mov.w	r3, #4294967295
 800c906:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c908:	2308      	movs	r3, #8
 800c90a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c90c:	2330      	movs	r3, #48	@ 0x30
 800c90e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c910:	2302      	movs	r3, #2
 800c912:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c914:	2300      	movs	r3, #0
 800c916:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c918:	2301      	movs	r3, #1
 800c91a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f107 0210 	add.w	r2, r7, #16
 800c924:	4611      	mov	r1, r2
 800c926:	4618      	mov	r0, r3
 800c928:	f003 f800 	bl	800f92c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4618      	mov	r0, r3
 800c932:	f003 f9da 	bl	800fcea <SDMMC_CmdSendSCR>
 800c936:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d027      	beq.n	800c98e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800c93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c940:	e07e      	b.n	800ca40 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c948:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d113      	bne.n	800c978 <SD_FindSCR+0xcc>
 800c950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c952:	2b00      	cmp	r3, #0
 800c954:	d110      	bne.n	800c978 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f002 ff5e 	bl	800f81c <SDMMC_ReadFIFO>
 800c960:	4603      	mov	r3, r0
 800c962:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4618      	mov	r0, r3
 800c96a:	f002 ff57 	bl	800f81c <SDMMC_ReadFIFO>
 800c96e:	4603      	mov	r3, r0
 800c970:	60fb      	str	r3, [r7, #12]
      index++;
 800c972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c974:	3301      	adds	r3, #1
 800c976:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c978:	f7f8 f82e 	bl	80049d8 <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c986:	d102      	bne.n	800c98e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c988:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c98c:	e058      	b.n	800ca40 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c994:	f240 532a 	movw	r3, #1322	@ 0x52a
 800c998:	4013      	ands	r3, r2
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0d1      	beq.n	800c942 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9a4:	f003 0308 	and.w	r3, r3, #8
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d005      	beq.n	800c9b8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2208      	movs	r2, #8
 800c9b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c9b4:	2308      	movs	r3, #8
 800c9b6:	e043      	b.n	800ca40 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9be:	f003 0302 	and.w	r3, r3, #2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d005      	beq.n	800c9d2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2202      	movs	r2, #2
 800c9cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c9ce:	2302      	movs	r3, #2
 800c9d0:	e036      	b.n	800ca40 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9d8:	f003 0320 	and.w	r3, r3, #32
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d005      	beq.n	800c9ec <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2220      	movs	r2, #32
 800c9e6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c9e8:	2320      	movs	r3, #32
 800c9ea:	e029      	b.n	800ca40 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a15      	ldr	r2, [pc, #84]	@ (800ca48 <SD_FindSCR+0x19c>)
 800c9f2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	061a      	lsls	r2, r3, #24
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	021b      	lsls	r3, r3, #8
 800c9fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ca00:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	0a1b      	lsrs	r3, r3, #8
 800ca06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ca0a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	0e1b      	lsrs	r3, r3, #24
 800ca10:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ca12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca14:	601a      	str	r2, [r3, #0]
    scr++;
 800ca16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca18:	3304      	adds	r3, #4
 800ca1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	061a      	lsls	r2, r3, #24
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	021b      	lsls	r3, r3, #8
 800ca24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ca28:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	0a1b      	lsrs	r3, r3, #8
 800ca2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ca32:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	0e1b      	lsrs	r3, r3, #24
 800ca38:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ca3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca3c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3738      	adds	r7, #56	@ 0x38
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	18000f3a 	.word	0x18000f3a

0800ca4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d101      	bne.n	800ca5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e10f      	b.n	800cc7e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a87      	ldr	r2, [pc, #540]	@ (800cc88 <HAL_SPI_Init+0x23c>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d00f      	beq.n	800ca8e <HAL_SPI_Init+0x42>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a86      	ldr	r2, [pc, #536]	@ (800cc8c <HAL_SPI_Init+0x240>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d00a      	beq.n	800ca8e <HAL_SPI_Init+0x42>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a84      	ldr	r2, [pc, #528]	@ (800cc90 <HAL_SPI_Init+0x244>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d005      	beq.n	800ca8e <HAL_SPI_Init+0x42>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	2b0f      	cmp	r3, #15
 800ca88:	d901      	bls.n	800ca8e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e0f7      	b.n	800cc7e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fe2e 	bl	800d6f0 <SPI_GetPacketSize>
 800ca94:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a7b      	ldr	r2, [pc, #492]	@ (800cc88 <HAL_SPI_Init+0x23c>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d00c      	beq.n	800caba <HAL_SPI_Init+0x6e>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a79      	ldr	r2, [pc, #484]	@ (800cc8c <HAL_SPI_Init+0x240>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d007      	beq.n	800caba <HAL_SPI_Init+0x6e>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a78      	ldr	r2, [pc, #480]	@ (800cc90 <HAL_SPI_Init+0x244>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d002      	beq.n	800caba <HAL_SPI_Init+0x6e>
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2b08      	cmp	r3, #8
 800cab8:	d811      	bhi.n	800cade <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cabe:	4a72      	ldr	r2, [pc, #456]	@ (800cc88 <HAL_SPI_Init+0x23c>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d009      	beq.n	800cad8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a70      	ldr	r2, [pc, #448]	@ (800cc8c <HAL_SPI_Init+0x240>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d004      	beq.n	800cad8 <HAL_SPI_Init+0x8c>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a6f      	ldr	r2, [pc, #444]	@ (800cc90 <HAL_SPI_Init+0x244>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d104      	bne.n	800cae2 <HAL_SPI_Init+0x96>
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2b10      	cmp	r3, #16
 800cadc:	d901      	bls.n	800cae2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	e0cd      	b.n	800cc7e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	2b00      	cmp	r3, #0
 800caec:	d106      	bne.n	800cafc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7f7 fba0 	bl	800423c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2202      	movs	r2, #2
 800cb00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f022 0201 	bic.w	r2, r2, #1
 800cb12:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cb1e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cb28:	d119      	bne.n	800cb5e <HAL_SPI_Init+0x112>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cb32:	d103      	bne.n	800cb3c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d008      	beq.n	800cb4e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d10c      	bne.n	800cb5e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cb48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb4c:	d107      	bne.n	800cb5e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cb5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00f      	beq.n	800cb8a <HAL_SPI_Init+0x13e>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	2b06      	cmp	r3, #6
 800cb70:	d90b      	bls.n	800cb8a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	430a      	orrs	r2, r1
 800cb86:	601a      	str	r2, [r3, #0]
 800cb88:	e007      	b.n	800cb9a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cb98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	69da      	ldr	r2, [r3, #28]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba2:	431a      	orrs	r2, r3
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	431a      	orrs	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbac:	ea42 0103 	orr.w	r1, r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	68da      	ldr	r2, [r3, #12]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	430a      	orrs	r2, r1
 800cbba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbc4:	431a      	orrs	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbca:	431a      	orrs	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	431a      	orrs	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	431a      	orrs	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	431a      	orrs	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a1b      	ldr	r3, [r3, #32]
 800cbe2:	431a      	orrs	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	431a      	orrs	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbee:	431a      	orrs	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	431a      	orrs	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbfa:	ea42 0103 	orr.w	r1, r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	430a      	orrs	r2, r1
 800cc08:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d113      	bne.n	800cc3a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cc24:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cc38:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f022 0201 	bic.w	r2, r2, #1
 800cc48:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00a      	beq.n	800cc6c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	430a      	orrs	r2, r1
 800cc6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2201      	movs	r2, #1
 800cc78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	40013000 	.word	0x40013000
 800cc8c:	40003800 	.word	0x40003800
 800cc90:	40003c00 	.word	0x40003c00

0800cc94 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b088      	sub	sp, #32
 800cc98:	af02      	add	r7, sp, #8
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	603b      	str	r3, [r7, #0]
 800cca0:	4613      	mov	r3, r2
 800cca2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3320      	adds	r3, #32
 800ccaa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ccac:	f7f7 fe94 	bl	80049d8 <HAL_GetTick>
 800ccb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d001      	beq.n	800ccc2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800ccbe:	2302      	movs	r3, #2
 800ccc0:	e1d1      	b.n	800d066 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <HAL_SPI_Transmit+0x3a>
 800ccc8:	88fb      	ldrh	r3, [r7, #6]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e1c9      	b.n	800d066 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d101      	bne.n	800cce0 <HAL_SPI_Transmit+0x4c>
 800ccdc:	2302      	movs	r3, #2
 800ccde:	e1c2      	b.n	800d066 <HAL_SPI_Transmit+0x3d2>
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2203      	movs	r2, #3
 800ccec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	68ba      	ldr	r2, [r7, #8]
 800ccfc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	88fa      	ldrh	r2, [r7, #6]
 800cd02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	88fa      	ldrh	r2, [r7, #6]
 800cd0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2200      	movs	r2, #0
 800cd12:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800cd38:	d108      	bne.n	800cd4c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	e009      	b.n	800cd60 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800cd5e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	685a      	ldr	r2, [r3, #4]
 800cd66:	4b96      	ldr	r3, [pc, #600]	@ (800cfc0 <HAL_SPI_Transmit+0x32c>)
 800cd68:	4013      	ands	r3, r2
 800cd6a:	88f9      	ldrh	r1, [r7, #6]
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	6812      	ldr	r2, [r2, #0]
 800cd70:	430b      	orrs	r3, r1
 800cd72:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f042 0201 	orr.w	r2, r2, #1
 800cd82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd8c:	d107      	bne.n	800cd9e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	2b0f      	cmp	r3, #15
 800cda4:	d947      	bls.n	800ce36 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cda6:	e03f      	b.n	800ce28 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	f003 0302 	and.w	r3, r3, #2
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d114      	bne.n	800cde0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6812      	ldr	r2, [r2, #0]
 800cdc0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdc6:	1d1a      	adds	r2, r3, #4
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cdde:	e023      	b.n	800ce28 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cde0:	f7f7 fdfa 	bl	80049d8 <HAL_GetTick>
 800cde4:	4602      	mov	r2, r0
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	683a      	ldr	r2, [r7, #0]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d803      	bhi.n	800cdf8 <HAL_SPI_Transmit+0x164>
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf6:	d102      	bne.n	800cdfe <HAL_SPI_Transmit+0x16a>
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d114      	bne.n	800ce28 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f000 fba8 	bl	800d554 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ce24:	2303      	movs	r3, #3
 800ce26:	e11e      	b.n	800d066 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1b9      	bne.n	800cda8 <HAL_SPI_Transmit+0x114>
 800ce34:	e0f1      	b.n	800d01a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	2b07      	cmp	r3, #7
 800ce3c:	f240 80e6 	bls.w	800d00c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ce40:	e05d      	b.n	800cefe <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	695b      	ldr	r3, [r3, #20]
 800ce48:	f003 0302 	and.w	r3, r3, #2
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d132      	bne.n	800ceb6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d918      	bls.n	800ce8e <HAL_SPI_Transmit+0x1fa>
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d014      	beq.n	800ce8e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6812      	ldr	r2, [r2, #0]
 800ce6e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce74:	1d1a      	adds	r2, r3, #4
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	3b02      	subs	r3, #2
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ce8c:	e037      	b.n	800cefe <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce92:	881a      	ldrh	r2, [r3, #0]
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce9c:	1c9a      	adds	r2, r3, #2
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ceb4:	e023      	b.n	800cefe <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ceb6:	f7f7 fd8f 	bl	80049d8 <HAL_GetTick>
 800ceba:	4602      	mov	r2, r0
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	1ad3      	subs	r3, r2, r3
 800cec0:	683a      	ldr	r2, [r7, #0]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d803      	bhi.n	800cece <HAL_SPI_Transmit+0x23a>
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cecc:	d102      	bne.n	800ced4 <HAL_SPI_Transmit+0x240>
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d114      	bne.n	800cefe <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f000 fb3d 	bl	800d554 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cee0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2201      	movs	r2, #1
 800ceee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cefa:	2303      	movs	r3, #3
 800cefc:	e0b3      	b.n	800d066 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d19b      	bne.n	800ce42 <HAL_SPI_Transmit+0x1ae>
 800cf0a:	e086      	b.n	800d01a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	695b      	ldr	r3, [r3, #20]
 800cf12:	f003 0302 	and.w	r3, r3, #2
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	d154      	bne.n	800cfc4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	2b03      	cmp	r3, #3
 800cf24:	d918      	bls.n	800cf58 <HAL_SPI_Transmit+0x2c4>
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf2a:	2b40      	cmp	r3, #64	@ 0x40
 800cf2c:	d914      	bls.n	800cf58 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	6812      	ldr	r2, [r2, #0]
 800cf38:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf3e:	1d1a      	adds	r2, r3, #4
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	3b04      	subs	r3, #4
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cf56:	e059      	b.n	800d00c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d917      	bls.n	800cf94 <HAL_SPI_Transmit+0x300>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d013      	beq.n	800cf94 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf70:	881a      	ldrh	r2, [r3, #0]
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf7a:	1c9a      	adds	r2, r3, #2
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	3b02      	subs	r3, #2
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cf92:	e03b      	b.n	800d00c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3320      	adds	r3, #32
 800cf9e:	7812      	ldrb	r2, [r2, #0]
 800cfa0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfa6:	1c5a      	adds	r2, r3, #1
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cfbe:	e025      	b.n	800d00c <HAL_SPI_Transmit+0x378>
 800cfc0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfc4:	f7f7 fd08 	bl	80049d8 <HAL_GetTick>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	1ad3      	subs	r3, r2, r3
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d803      	bhi.n	800cfdc <HAL_SPI_Transmit+0x348>
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfda:	d102      	bne.n	800cfe2 <HAL_SPI_Transmit+0x34e>
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d114      	bne.n	800d00c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f000 fab6 	bl	800d554 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d008:	2303      	movs	r3, #3
 800d00a:	e02c      	b.n	800d066 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d012:	b29b      	uxth	r3, r3
 800d014:	2b00      	cmp	r3, #0
 800d016:	f47f af79 	bne.w	800cf0c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2200      	movs	r2, #0
 800d022:	2108      	movs	r1, #8
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f000 fb35 	bl	800d694 <SPI_WaitOnFlagUntilTimeout>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d007      	beq.n	800d040 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d036:	f043 0220 	orr.w	r2, r3, #32
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f000 fa87 	bl	800d554 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d001      	beq.n	800d064 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d060:	2301      	movs	r3, #1
 800d062:	e000      	b.n	800d066 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d064:	2300      	movs	r3, #0
  }
}
 800d066:	4618      	mov	r0, r3
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop

0800d070 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b088      	sub	sp, #32
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	603b      	str	r3, [r7, #0]
 800d07c:	4613      	mov	r3, r2
 800d07e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d084:	095b      	lsrs	r3, r3, #5
 800d086:	b29b      	uxth	r3, r3
 800d088:	3301      	adds	r3, #1
 800d08a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	3330      	adds	r3, #48	@ 0x30
 800d092:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d094:	f7f7 fca0 	bl	80049d8 <HAL_GetTick>
 800d098:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d001      	beq.n	800d0aa <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800d0a6:	2302      	movs	r3, #2
 800d0a8:	e250      	b.n	800d54c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <HAL_SPI_Receive+0x46>
 800d0b0:	88fb      	ldrh	r3, [r7, #6]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d101      	bne.n	800d0ba <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e248      	b.n	800d54c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d101      	bne.n	800d0c8 <HAL_SPI_Receive+0x58>
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	e241      	b.n	800d54c <HAL_SPI_Receive+0x4dc>
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2204      	movs	r2, #4
 800d0d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	88fa      	ldrh	r2, [r7, #6]
 800d0ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	88fa      	ldrh	r2, [r7, #6]
 800d0f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2200      	movs	r2, #0
 800d110:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d120:	d108      	bne.n	800d134 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d130:	601a      	str	r2, [r3, #0]
 800d132:	e009      	b.n	800d148 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800d146:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	4b95      	ldr	r3, [pc, #596]	@ (800d3a4 <HAL_SPI_Receive+0x334>)
 800d150:	4013      	ands	r3, r2
 800d152:	88f9      	ldrh	r1, [r7, #6]
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	6812      	ldr	r2, [r2, #0]
 800d158:	430b      	orrs	r3, r1
 800d15a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f042 0201 	orr.w	r2, r2, #1
 800d16a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d174:	d107      	bne.n	800d186 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d184:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	2b0f      	cmp	r3, #15
 800d18c:	d96c      	bls.n	800d268 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d18e:	e064      	b.n	800d25a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	695b      	ldr	r3, [r3, #20]
 800d196:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	695b      	ldr	r3, [r3, #20]
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d114      	bne.n	800d1d0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d1b0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1b6:	1d1a      	adds	r2, r3, #4
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d1ce:	e044      	b.n	800d25a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	8bfa      	ldrh	r2, [r7, #30]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d919      	bls.n	800d212 <HAL_SPI_Receive+0x1a2>
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d014      	beq.n	800d212 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d1f2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1f8:	1d1a      	adds	r2, r3, #4
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d204:	b29b      	uxth	r3, r3
 800d206:	3b01      	subs	r3, #1
 800d208:	b29a      	uxth	r2, r3
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d210:	e023      	b.n	800d25a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d212:	f7f7 fbe1 	bl	80049d8 <HAL_GetTick>
 800d216:	4602      	mov	r2, r0
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	683a      	ldr	r2, [r7, #0]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d803      	bhi.n	800d22a <HAL_SPI_Receive+0x1ba>
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d228:	d102      	bne.n	800d230 <HAL_SPI_Receive+0x1c0>
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d114      	bne.n	800d25a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d230:	68f8      	ldr	r0, [r7, #12]
 800d232:	f000 f98f 	bl	800d554 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d23c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d256:	2303      	movs	r3, #3
 800d258:	e178      	b.n	800d54c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d260:	b29b      	uxth	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d194      	bne.n	800d190 <HAL_SPI_Receive+0x120>
 800d266:	e15e      	b.n	800d526 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	2b07      	cmp	r3, #7
 800d26e:	f240 8153 	bls.w	800d518 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d272:	e08f      	b.n	800d394 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	695b      	ldr	r3, [r3, #20]
 800d27a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	695b      	ldr	r3, [r3, #20]
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b01      	cmp	r3, #1
 800d288:	d114      	bne.n	800d2b4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d28e:	69ba      	ldr	r2, [r7, #24]
 800d290:	8812      	ldrh	r2, [r2, #0]
 800d292:	b292      	uxth	r2, r2
 800d294:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d29a:	1c9a      	adds	r2, r3, #2
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d2b2:	e06f      	b.n	800d394 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	8bfa      	ldrh	r2, [r7, #30]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d924      	bls.n	800d30c <HAL_SPI_Receive+0x29c>
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d01f      	beq.n	800d30c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2d0:	69ba      	ldr	r2, [r7, #24]
 800d2d2:	8812      	ldrh	r2, [r2, #0]
 800d2d4:	b292      	uxth	r2, r2
 800d2d6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2dc:	1c9a      	adds	r2, r3, #2
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2e6:	69ba      	ldr	r2, [r7, #24]
 800d2e8:	8812      	ldrh	r2, [r2, #0]
 800d2ea:	b292      	uxth	r2, r2
 800d2ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2f2:	1c9a      	adds	r2, r3, #2
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	3b02      	subs	r3, #2
 800d302:	b29a      	uxth	r2, r3
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d30a:	e043      	b.n	800d394 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d312:	b29b      	uxth	r3, r3
 800d314:	2b01      	cmp	r3, #1
 800d316:	d119      	bne.n	800d34c <HAL_SPI_Receive+0x2dc>
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d014      	beq.n	800d34c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d326:	69ba      	ldr	r2, [r7, #24]
 800d328:	8812      	ldrh	r2, [r2, #0]
 800d32a:	b292      	uxth	r2, r2
 800d32c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d332:	1c9a      	adds	r2, r3, #2
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d33e:	b29b      	uxth	r3, r3
 800d340:	3b01      	subs	r3, #1
 800d342:	b29a      	uxth	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d34a:	e023      	b.n	800d394 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d34c:	f7f7 fb44 	bl	80049d8 <HAL_GetTick>
 800d350:	4602      	mov	r2, r0
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d803      	bhi.n	800d364 <HAL_SPI_Receive+0x2f4>
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d362:	d102      	bne.n	800d36a <HAL_SPI_Receive+0x2fa>
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d114      	bne.n	800d394 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f000 f8f2 	bl	800d554 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d376:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d390:	2303      	movs	r3, #3
 800d392:	e0db      	b.n	800d54c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f47f af69 	bne.w	800d274 <HAL_SPI_Receive+0x204>
 800d3a2:	e0c0      	b.n	800d526 <HAL_SPI_Receive+0x4b6>
 800d3a4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	f003 0301 	and.w	r3, r3, #1
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d117      	bne.n	800d3ee <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3ca:	7812      	ldrb	r2, [r2, #0]
 800d3cc:	b2d2      	uxtb	r2, r2
 800d3ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3d4:	1c5a      	adds	r2, r3, #1
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d3ec:	e094      	b.n	800d518 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	8bfa      	ldrh	r2, [r7, #30]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d946      	bls.n	800d48a <HAL_SPI_Receive+0x41a>
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d402:	2b00      	cmp	r3, #0
 800d404:	d041      	beq.n	800d48a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d412:	7812      	ldrb	r2, [r2, #0]
 800d414:	b2d2      	uxtb	r2, r2
 800d416:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d42e:	7812      	ldrb	r2, [r2, #0]
 800d430:	b2d2      	uxtb	r2, r2
 800d432:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d438:	1c5a      	adds	r2, r3, #1
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d44a:	7812      	ldrb	r2, [r2, #0]
 800d44c:	b2d2      	uxtb	r2, r2
 800d44e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d454:	1c5a      	adds	r2, r3, #1
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d466:	7812      	ldrb	r2, [r2, #0]
 800d468:	b2d2      	uxtb	r2, r2
 800d46a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	3b04      	subs	r3, #4
 800d480:	b29a      	uxth	r2, r3
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d488:	e046      	b.n	800d518 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d490:	b29b      	uxth	r3, r3
 800d492:	2b03      	cmp	r3, #3
 800d494:	d81c      	bhi.n	800d4d0 <HAL_SPI_Receive+0x460>
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d017      	beq.n	800d4d0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4ac:	7812      	ldrb	r2, [r2, #0]
 800d4ae:	b2d2      	uxtb	r2, r2
 800d4b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d4ce:	e023      	b.n	800d518 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4d0:	f7f7 fa82 	bl	80049d8 <HAL_GetTick>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	683a      	ldr	r2, [r7, #0]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d803      	bhi.n	800d4e8 <HAL_SPI_Receive+0x478>
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e6:	d102      	bne.n	800d4ee <HAL_SPI_Receive+0x47e>
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d114      	bne.n	800d518 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f000 f830 	bl	800d554 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d4fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d514:	2303      	movs	r3, #3
 800d516:	e019      	b.n	800d54c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d51e:	b29b      	uxth	r3, r3
 800d520:	2b00      	cmp	r3, #0
 800d522:	f47f af41 	bne.w	800d3a8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 f814 	bl	800d554 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2200      	movs	r2, #0
 800d538:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d542:	2b00      	cmp	r3, #0
 800d544:	d001      	beq.n	800d54a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	e000      	b.n	800d54c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800d54a:	2300      	movs	r3, #0
  }
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3720      	adds	r7, #32
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	695b      	ldr	r3, [r3, #20]
 800d562:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	699a      	ldr	r2, [r3, #24]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f042 0208 	orr.w	r2, r2, #8
 800d572:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	699a      	ldr	r2, [r3, #24]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f042 0210 	orr.w	r2, r2, #16
 800d582:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f022 0201 	bic.w	r2, r2, #1
 800d592:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6919      	ldr	r1, [r3, #16]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	4b3c      	ldr	r3, [pc, #240]	@ (800d690 <SPI_CloseTransfer+0x13c>)
 800d5a0:	400b      	ands	r3, r1
 800d5a2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	689a      	ldr	r2, [r3, #8]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d5b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	2b04      	cmp	r3, #4
 800d5be:	d014      	beq.n	800d5ea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f003 0320 	and.w	r3, r3, #32
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00f      	beq.n	800d5ea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	699a      	ldr	r2, [r3, #24]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f042 0220 	orr.w	r2, r2, #32
 800d5e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	2b03      	cmp	r3, #3
 800d5f4:	d014      	beq.n	800d620 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00f      	beq.n	800d620 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d606:	f043 0204 	orr.w	r2, r3, #4
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	699a      	ldr	r2, [r3, #24]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d61e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00f      	beq.n	800d64a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d630:	f043 0201 	orr.w	r2, r3, #1
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	699a      	ldr	r2, [r3, #24]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d648:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d650:	2b00      	cmp	r3, #0
 800d652:	d00f      	beq.n	800d674 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d65a:	f043 0208 	orr.w	r2, r3, #8
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	699a      	ldr	r2, [r3, #24]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d672:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d684:	bf00      	nop
 800d686:	3714      	adds	r7, #20
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr
 800d690:	fffffc90 	.word	0xfffffc90

0800d694 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	603b      	str	r3, [r7, #0]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d6a4:	e010      	b.n	800d6c8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6a6:	f7f7 f997 	bl	80049d8 <HAL_GetTick>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	1ad3      	subs	r3, r2, r3
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d803      	bhi.n	800d6be <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6bc:	d102      	bne.n	800d6c4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d101      	bne.n	800d6c8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	e00f      	b.n	800d6e8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	695a      	ldr	r2, [r3, #20]
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	4013      	ands	r3, r2
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	bf0c      	ite	eq
 800d6d8:	2301      	moveq	r3, #1
 800d6da:	2300      	movne	r3, #0
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	461a      	mov	r2, r3
 800d6e0:	79fb      	ldrb	r3, [r7, #7]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d0df      	beq.n	800d6a6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6fc:	095b      	lsrs	r3, r3, #5
 800d6fe:	3301      	adds	r3, #1
 800d700:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	3301      	adds	r3, #1
 800d708:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	3307      	adds	r3, #7
 800d70e:	08db      	lsrs	r3, r3, #3
 800d710:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	fb02 f303 	mul.w	r3, r2, r3
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3714      	adds	r7, #20
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b082      	sub	sp, #8
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d101      	bne.n	800d738 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d734:	2301      	movs	r3, #1
 800d736:	e042      	b.n	800d7be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d106      	bne.n	800d750 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7f6 fe2e 	bl	80043ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2224      	movs	r2, #36	@ 0x24
 800d754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f022 0201 	bic.w	r2, r2, #1
 800d766:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d002      	beq.n	800d776 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 fd91 	bl	800e298 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f826 	bl	800d7c8 <UART_SetConfig>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d101      	bne.n	800d786 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	e01b      	b.n	800d7be <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	685a      	ldr	r2, [r3, #4]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d794:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	689a      	ldr	r2, [r3, #8]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d7a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f042 0201 	orr.w	r2, r2, #1
 800d7b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fe10 	bl	800e3dc <UART_CheckIdleState>
 800d7bc:	4603      	mov	r3, r0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
	...

0800d7c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7cc:	b092      	sub	sp, #72	@ 0x48
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	689a      	ldr	r2, [r3, #8]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	431a      	orrs	r2, r3
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	695b      	ldr	r3, [r3, #20]
 800d7e6:	431a      	orrs	r2, r3
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	69db      	ldr	r3, [r3, #28]
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	4bbe      	ldr	r3, [pc, #760]	@ (800daf0 <UART_SetConfig+0x328>)
 800d7f8:	4013      	ands	r3, r2
 800d7fa:	697a      	ldr	r2, [r7, #20]
 800d7fc:	6812      	ldr	r2, [r2, #0]
 800d7fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d800:	430b      	orrs	r3, r1
 800d802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	68da      	ldr	r2, [r3, #12]
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	430a      	orrs	r2, r1
 800d818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	699b      	ldr	r3, [r3, #24]
 800d81e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4ab3      	ldr	r2, [pc, #716]	@ (800daf4 <UART_SetConfig+0x32c>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d004      	beq.n	800d834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d830:	4313      	orrs	r3, r2
 800d832:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	689a      	ldr	r2, [r3, #8]
 800d83a:	4baf      	ldr	r3, [pc, #700]	@ (800daf8 <UART_SetConfig+0x330>)
 800d83c:	4013      	ands	r3, r2
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	6812      	ldr	r2, [r2, #0]
 800d842:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d844:	430b      	orrs	r3, r1
 800d846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d84e:	f023 010f 	bic.w	r1, r3, #15
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	430a      	orrs	r2, r1
 800d85c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4aa6      	ldr	r2, [pc, #664]	@ (800dafc <UART_SetConfig+0x334>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d177      	bne.n	800d958 <UART_SetConfig+0x190>
 800d868:	4ba5      	ldr	r3, [pc, #660]	@ (800db00 <UART_SetConfig+0x338>)
 800d86a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d86c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d870:	2b28      	cmp	r3, #40	@ 0x28
 800d872:	d86d      	bhi.n	800d950 <UART_SetConfig+0x188>
 800d874:	a201      	add	r2, pc, #4	@ (adr r2, 800d87c <UART_SetConfig+0xb4>)
 800d876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87a:	bf00      	nop
 800d87c:	0800d921 	.word	0x0800d921
 800d880:	0800d951 	.word	0x0800d951
 800d884:	0800d951 	.word	0x0800d951
 800d888:	0800d951 	.word	0x0800d951
 800d88c:	0800d951 	.word	0x0800d951
 800d890:	0800d951 	.word	0x0800d951
 800d894:	0800d951 	.word	0x0800d951
 800d898:	0800d951 	.word	0x0800d951
 800d89c:	0800d929 	.word	0x0800d929
 800d8a0:	0800d951 	.word	0x0800d951
 800d8a4:	0800d951 	.word	0x0800d951
 800d8a8:	0800d951 	.word	0x0800d951
 800d8ac:	0800d951 	.word	0x0800d951
 800d8b0:	0800d951 	.word	0x0800d951
 800d8b4:	0800d951 	.word	0x0800d951
 800d8b8:	0800d951 	.word	0x0800d951
 800d8bc:	0800d931 	.word	0x0800d931
 800d8c0:	0800d951 	.word	0x0800d951
 800d8c4:	0800d951 	.word	0x0800d951
 800d8c8:	0800d951 	.word	0x0800d951
 800d8cc:	0800d951 	.word	0x0800d951
 800d8d0:	0800d951 	.word	0x0800d951
 800d8d4:	0800d951 	.word	0x0800d951
 800d8d8:	0800d951 	.word	0x0800d951
 800d8dc:	0800d939 	.word	0x0800d939
 800d8e0:	0800d951 	.word	0x0800d951
 800d8e4:	0800d951 	.word	0x0800d951
 800d8e8:	0800d951 	.word	0x0800d951
 800d8ec:	0800d951 	.word	0x0800d951
 800d8f0:	0800d951 	.word	0x0800d951
 800d8f4:	0800d951 	.word	0x0800d951
 800d8f8:	0800d951 	.word	0x0800d951
 800d8fc:	0800d941 	.word	0x0800d941
 800d900:	0800d951 	.word	0x0800d951
 800d904:	0800d951 	.word	0x0800d951
 800d908:	0800d951 	.word	0x0800d951
 800d90c:	0800d951 	.word	0x0800d951
 800d910:	0800d951 	.word	0x0800d951
 800d914:	0800d951 	.word	0x0800d951
 800d918:	0800d951 	.word	0x0800d951
 800d91c:	0800d949 	.word	0x0800d949
 800d920:	2301      	movs	r3, #1
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d926:	e222      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d928:	2304      	movs	r3, #4
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92e:	e21e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d930:	2308      	movs	r3, #8
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d936:	e21a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d938:	2310      	movs	r3, #16
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93e:	e216      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d940:	2320      	movs	r3, #32
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d946:	e212      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d948:	2340      	movs	r3, #64	@ 0x40
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94e:	e20e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d950:	2380      	movs	r3, #128	@ 0x80
 800d952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d956:	e20a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a69      	ldr	r2, [pc, #420]	@ (800db04 <UART_SetConfig+0x33c>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d130      	bne.n	800d9c4 <UART_SetConfig+0x1fc>
 800d962:	4b67      	ldr	r3, [pc, #412]	@ (800db00 <UART_SetConfig+0x338>)
 800d964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d966:	f003 0307 	and.w	r3, r3, #7
 800d96a:	2b05      	cmp	r3, #5
 800d96c:	d826      	bhi.n	800d9bc <UART_SetConfig+0x1f4>
 800d96e:	a201      	add	r2, pc, #4	@ (adr r2, 800d974 <UART_SetConfig+0x1ac>)
 800d970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d974:	0800d98d 	.word	0x0800d98d
 800d978:	0800d995 	.word	0x0800d995
 800d97c:	0800d99d 	.word	0x0800d99d
 800d980:	0800d9a5 	.word	0x0800d9a5
 800d984:	0800d9ad 	.word	0x0800d9ad
 800d988:	0800d9b5 	.word	0x0800d9b5
 800d98c:	2300      	movs	r3, #0
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d992:	e1ec      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d994:	2304      	movs	r3, #4
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99a:	e1e8      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d99c:	2308      	movs	r3, #8
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a2:	e1e4      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d9a4:	2310      	movs	r3, #16
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9aa:	e1e0      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d9ac:	2320      	movs	r3, #32
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9b2:	e1dc      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d9b4:	2340      	movs	r3, #64	@ 0x40
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ba:	e1d8      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d9bc:	2380      	movs	r3, #128	@ 0x80
 800d9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9c2:	e1d4      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a4f      	ldr	r2, [pc, #316]	@ (800db08 <UART_SetConfig+0x340>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d130      	bne.n	800da30 <UART_SetConfig+0x268>
 800d9ce:	4b4c      	ldr	r3, [pc, #304]	@ (800db00 <UART_SetConfig+0x338>)
 800d9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9d2:	f003 0307 	and.w	r3, r3, #7
 800d9d6:	2b05      	cmp	r3, #5
 800d9d8:	d826      	bhi.n	800da28 <UART_SetConfig+0x260>
 800d9da:	a201      	add	r2, pc, #4	@ (adr r2, 800d9e0 <UART_SetConfig+0x218>)
 800d9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e0:	0800d9f9 	.word	0x0800d9f9
 800d9e4:	0800da01 	.word	0x0800da01
 800d9e8:	0800da09 	.word	0x0800da09
 800d9ec:	0800da11 	.word	0x0800da11
 800d9f0:	0800da19 	.word	0x0800da19
 800d9f4:	0800da21 	.word	0x0800da21
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fe:	e1b6      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da00:	2304      	movs	r3, #4
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da06:	e1b2      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da08:	2308      	movs	r3, #8
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0e:	e1ae      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da10:	2310      	movs	r3, #16
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da16:	e1aa      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da18:	2320      	movs	r3, #32
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1e:	e1a6      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da20:	2340      	movs	r3, #64	@ 0x40
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da26:	e1a2      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da28:	2380      	movs	r3, #128	@ 0x80
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2e:	e19e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a35      	ldr	r2, [pc, #212]	@ (800db0c <UART_SetConfig+0x344>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d130      	bne.n	800da9c <UART_SetConfig+0x2d4>
 800da3a:	4b31      	ldr	r3, [pc, #196]	@ (800db00 <UART_SetConfig+0x338>)
 800da3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da3e:	f003 0307 	and.w	r3, r3, #7
 800da42:	2b05      	cmp	r3, #5
 800da44:	d826      	bhi.n	800da94 <UART_SetConfig+0x2cc>
 800da46:	a201      	add	r2, pc, #4	@ (adr r2, 800da4c <UART_SetConfig+0x284>)
 800da48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4c:	0800da65 	.word	0x0800da65
 800da50:	0800da6d 	.word	0x0800da6d
 800da54:	0800da75 	.word	0x0800da75
 800da58:	0800da7d 	.word	0x0800da7d
 800da5c:	0800da85 	.word	0x0800da85
 800da60:	0800da8d 	.word	0x0800da8d
 800da64:	2300      	movs	r3, #0
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6a:	e180      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da6c:	2304      	movs	r3, #4
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da72:	e17c      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da74:	2308      	movs	r3, #8
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7a:	e178      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da7c:	2310      	movs	r3, #16
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da82:	e174      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da84:	2320      	movs	r3, #32
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8a:	e170      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da8c:	2340      	movs	r3, #64	@ 0x40
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da92:	e16c      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da94:	2380      	movs	r3, #128	@ 0x80
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da9a:	e168      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a1b      	ldr	r2, [pc, #108]	@ (800db10 <UART_SetConfig+0x348>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d142      	bne.n	800db2c <UART_SetConfig+0x364>
 800daa6:	4b16      	ldr	r3, [pc, #88]	@ (800db00 <UART_SetConfig+0x338>)
 800daa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daaa:	f003 0307 	and.w	r3, r3, #7
 800daae:	2b05      	cmp	r3, #5
 800dab0:	d838      	bhi.n	800db24 <UART_SetConfig+0x35c>
 800dab2:	a201      	add	r2, pc, #4	@ (adr r2, 800dab8 <UART_SetConfig+0x2f0>)
 800dab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab8:	0800dad1 	.word	0x0800dad1
 800dabc:	0800dad9 	.word	0x0800dad9
 800dac0:	0800dae1 	.word	0x0800dae1
 800dac4:	0800dae9 	.word	0x0800dae9
 800dac8:	0800db15 	.word	0x0800db15
 800dacc:	0800db1d 	.word	0x0800db1d
 800dad0:	2300      	movs	r3, #0
 800dad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dad6:	e14a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dad8:	2304      	movs	r3, #4
 800dada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dade:	e146      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dae0:	2308      	movs	r3, #8
 800dae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dae6:	e142      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dae8:	2310      	movs	r3, #16
 800daea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daee:	e13e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800daf0:	cfff69f3 	.word	0xcfff69f3
 800daf4:	58000c00 	.word	0x58000c00
 800daf8:	11fff4ff 	.word	0x11fff4ff
 800dafc:	40011000 	.word	0x40011000
 800db00:	58024400 	.word	0x58024400
 800db04:	40004400 	.word	0x40004400
 800db08:	40004800 	.word	0x40004800
 800db0c:	40004c00 	.word	0x40004c00
 800db10:	40005000 	.word	0x40005000
 800db14:	2320      	movs	r3, #32
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db1a:	e128      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800db1c:	2340      	movs	r3, #64	@ 0x40
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db22:	e124      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800db24:	2380      	movs	r3, #128	@ 0x80
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db2a:	e120      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4acb      	ldr	r2, [pc, #812]	@ (800de60 <UART_SetConfig+0x698>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d176      	bne.n	800dc24 <UART_SetConfig+0x45c>
 800db36:	4bcb      	ldr	r3, [pc, #812]	@ (800de64 <UART_SetConfig+0x69c>)
 800db38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db3e:	2b28      	cmp	r3, #40	@ 0x28
 800db40:	d86c      	bhi.n	800dc1c <UART_SetConfig+0x454>
 800db42:	a201      	add	r2, pc, #4	@ (adr r2, 800db48 <UART_SetConfig+0x380>)
 800db44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db48:	0800dbed 	.word	0x0800dbed
 800db4c:	0800dc1d 	.word	0x0800dc1d
 800db50:	0800dc1d 	.word	0x0800dc1d
 800db54:	0800dc1d 	.word	0x0800dc1d
 800db58:	0800dc1d 	.word	0x0800dc1d
 800db5c:	0800dc1d 	.word	0x0800dc1d
 800db60:	0800dc1d 	.word	0x0800dc1d
 800db64:	0800dc1d 	.word	0x0800dc1d
 800db68:	0800dbf5 	.word	0x0800dbf5
 800db6c:	0800dc1d 	.word	0x0800dc1d
 800db70:	0800dc1d 	.word	0x0800dc1d
 800db74:	0800dc1d 	.word	0x0800dc1d
 800db78:	0800dc1d 	.word	0x0800dc1d
 800db7c:	0800dc1d 	.word	0x0800dc1d
 800db80:	0800dc1d 	.word	0x0800dc1d
 800db84:	0800dc1d 	.word	0x0800dc1d
 800db88:	0800dbfd 	.word	0x0800dbfd
 800db8c:	0800dc1d 	.word	0x0800dc1d
 800db90:	0800dc1d 	.word	0x0800dc1d
 800db94:	0800dc1d 	.word	0x0800dc1d
 800db98:	0800dc1d 	.word	0x0800dc1d
 800db9c:	0800dc1d 	.word	0x0800dc1d
 800dba0:	0800dc1d 	.word	0x0800dc1d
 800dba4:	0800dc1d 	.word	0x0800dc1d
 800dba8:	0800dc05 	.word	0x0800dc05
 800dbac:	0800dc1d 	.word	0x0800dc1d
 800dbb0:	0800dc1d 	.word	0x0800dc1d
 800dbb4:	0800dc1d 	.word	0x0800dc1d
 800dbb8:	0800dc1d 	.word	0x0800dc1d
 800dbbc:	0800dc1d 	.word	0x0800dc1d
 800dbc0:	0800dc1d 	.word	0x0800dc1d
 800dbc4:	0800dc1d 	.word	0x0800dc1d
 800dbc8:	0800dc0d 	.word	0x0800dc0d
 800dbcc:	0800dc1d 	.word	0x0800dc1d
 800dbd0:	0800dc1d 	.word	0x0800dc1d
 800dbd4:	0800dc1d 	.word	0x0800dc1d
 800dbd8:	0800dc1d 	.word	0x0800dc1d
 800dbdc:	0800dc1d 	.word	0x0800dc1d
 800dbe0:	0800dc1d 	.word	0x0800dc1d
 800dbe4:	0800dc1d 	.word	0x0800dc1d
 800dbe8:	0800dc15 	.word	0x0800dc15
 800dbec:	2301      	movs	r3, #1
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbf2:	e0bc      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dbf4:	2304      	movs	r3, #4
 800dbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbfa:	e0b8      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dbfc:	2308      	movs	r3, #8
 800dbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc02:	e0b4      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc04:	2310      	movs	r3, #16
 800dc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc0a:	e0b0      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc0c:	2320      	movs	r3, #32
 800dc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc12:	e0ac      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc14:	2340      	movs	r3, #64	@ 0x40
 800dc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc1a:	e0a8      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc1c:	2380      	movs	r3, #128	@ 0x80
 800dc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc22:	e0a4      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a8f      	ldr	r2, [pc, #572]	@ (800de68 <UART_SetConfig+0x6a0>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d130      	bne.n	800dc90 <UART_SetConfig+0x4c8>
 800dc2e:	4b8d      	ldr	r3, [pc, #564]	@ (800de64 <UART_SetConfig+0x69c>)
 800dc30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc32:	f003 0307 	and.w	r3, r3, #7
 800dc36:	2b05      	cmp	r3, #5
 800dc38:	d826      	bhi.n	800dc88 <UART_SetConfig+0x4c0>
 800dc3a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc40 <UART_SetConfig+0x478>)
 800dc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc40:	0800dc59 	.word	0x0800dc59
 800dc44:	0800dc61 	.word	0x0800dc61
 800dc48:	0800dc69 	.word	0x0800dc69
 800dc4c:	0800dc71 	.word	0x0800dc71
 800dc50:	0800dc79 	.word	0x0800dc79
 800dc54:	0800dc81 	.word	0x0800dc81
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc5e:	e086      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc60:	2304      	movs	r3, #4
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc66:	e082      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc68:	2308      	movs	r3, #8
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc6e:	e07e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc70:	2310      	movs	r3, #16
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc76:	e07a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc78:	2320      	movs	r3, #32
 800dc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc7e:	e076      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc80:	2340      	movs	r3, #64	@ 0x40
 800dc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc86:	e072      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc88:	2380      	movs	r3, #128	@ 0x80
 800dc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc8e:	e06e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a75      	ldr	r2, [pc, #468]	@ (800de6c <UART_SetConfig+0x6a4>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d130      	bne.n	800dcfc <UART_SetConfig+0x534>
 800dc9a:	4b72      	ldr	r3, [pc, #456]	@ (800de64 <UART_SetConfig+0x69c>)
 800dc9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc9e:	f003 0307 	and.w	r3, r3, #7
 800dca2:	2b05      	cmp	r3, #5
 800dca4:	d826      	bhi.n	800dcf4 <UART_SetConfig+0x52c>
 800dca6:	a201      	add	r2, pc, #4	@ (adr r2, 800dcac <UART_SetConfig+0x4e4>)
 800dca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcac:	0800dcc5 	.word	0x0800dcc5
 800dcb0:	0800dccd 	.word	0x0800dccd
 800dcb4:	0800dcd5 	.word	0x0800dcd5
 800dcb8:	0800dcdd 	.word	0x0800dcdd
 800dcbc:	0800dce5 	.word	0x0800dce5
 800dcc0:	0800dced 	.word	0x0800dced
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcca:	e050      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dccc:	2304      	movs	r3, #4
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd2:	e04c      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dcd4:	2308      	movs	r3, #8
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcda:	e048      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dcdc:	2310      	movs	r3, #16
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dce2:	e044      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dce4:	2320      	movs	r3, #32
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcea:	e040      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dcec:	2340      	movs	r3, #64	@ 0x40
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcf2:	e03c      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dcf4:	2380      	movs	r3, #128	@ 0x80
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcfa:	e038      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a5b      	ldr	r2, [pc, #364]	@ (800de70 <UART_SetConfig+0x6a8>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d130      	bne.n	800dd68 <UART_SetConfig+0x5a0>
 800dd06:	4b57      	ldr	r3, [pc, #348]	@ (800de64 <UART_SetConfig+0x69c>)
 800dd08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd0a:	f003 0307 	and.w	r3, r3, #7
 800dd0e:	2b05      	cmp	r3, #5
 800dd10:	d826      	bhi.n	800dd60 <UART_SetConfig+0x598>
 800dd12:	a201      	add	r2, pc, #4	@ (adr r2, 800dd18 <UART_SetConfig+0x550>)
 800dd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd18:	0800dd31 	.word	0x0800dd31
 800dd1c:	0800dd39 	.word	0x0800dd39
 800dd20:	0800dd41 	.word	0x0800dd41
 800dd24:	0800dd49 	.word	0x0800dd49
 800dd28:	0800dd51 	.word	0x0800dd51
 800dd2c:	0800dd59 	.word	0x0800dd59
 800dd30:	2302      	movs	r3, #2
 800dd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd36:	e01a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd38:	2304      	movs	r3, #4
 800dd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3e:	e016      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd40:	2308      	movs	r3, #8
 800dd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd46:	e012      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd48:	2310      	movs	r3, #16
 800dd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd4e:	e00e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd50:	2320      	movs	r3, #32
 800dd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd56:	e00a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd58:	2340      	movs	r3, #64	@ 0x40
 800dd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd5e:	e006      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd60:	2380      	movs	r3, #128	@ 0x80
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd66:	e002      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd68:	2380      	movs	r3, #128	@ 0x80
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a3f      	ldr	r2, [pc, #252]	@ (800de70 <UART_SetConfig+0x6a8>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	f040 80f8 	bne.w	800df6a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd7e:	2b20      	cmp	r3, #32
 800dd80:	dc46      	bgt.n	800de10 <UART_SetConfig+0x648>
 800dd82:	2b02      	cmp	r3, #2
 800dd84:	f2c0 8082 	blt.w	800de8c <UART_SetConfig+0x6c4>
 800dd88:	3b02      	subs	r3, #2
 800dd8a:	2b1e      	cmp	r3, #30
 800dd8c:	d87e      	bhi.n	800de8c <UART_SetConfig+0x6c4>
 800dd8e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd94 <UART_SetConfig+0x5cc>)
 800dd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd94:	0800de17 	.word	0x0800de17
 800dd98:	0800de8d 	.word	0x0800de8d
 800dd9c:	0800de1f 	.word	0x0800de1f
 800dda0:	0800de8d 	.word	0x0800de8d
 800dda4:	0800de8d 	.word	0x0800de8d
 800dda8:	0800de8d 	.word	0x0800de8d
 800ddac:	0800de2f 	.word	0x0800de2f
 800ddb0:	0800de8d 	.word	0x0800de8d
 800ddb4:	0800de8d 	.word	0x0800de8d
 800ddb8:	0800de8d 	.word	0x0800de8d
 800ddbc:	0800de8d 	.word	0x0800de8d
 800ddc0:	0800de8d 	.word	0x0800de8d
 800ddc4:	0800de8d 	.word	0x0800de8d
 800ddc8:	0800de8d 	.word	0x0800de8d
 800ddcc:	0800de3f 	.word	0x0800de3f
 800ddd0:	0800de8d 	.word	0x0800de8d
 800ddd4:	0800de8d 	.word	0x0800de8d
 800ddd8:	0800de8d 	.word	0x0800de8d
 800dddc:	0800de8d 	.word	0x0800de8d
 800dde0:	0800de8d 	.word	0x0800de8d
 800dde4:	0800de8d 	.word	0x0800de8d
 800dde8:	0800de8d 	.word	0x0800de8d
 800ddec:	0800de8d 	.word	0x0800de8d
 800ddf0:	0800de8d 	.word	0x0800de8d
 800ddf4:	0800de8d 	.word	0x0800de8d
 800ddf8:	0800de8d 	.word	0x0800de8d
 800ddfc:	0800de8d 	.word	0x0800de8d
 800de00:	0800de8d 	.word	0x0800de8d
 800de04:	0800de8d 	.word	0x0800de8d
 800de08:	0800de8d 	.word	0x0800de8d
 800de0c:	0800de7f 	.word	0x0800de7f
 800de10:	2b40      	cmp	r3, #64	@ 0x40
 800de12:	d037      	beq.n	800de84 <UART_SetConfig+0x6bc>
 800de14:	e03a      	b.n	800de8c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de16:	f7fc fcf3 	bl	800a800 <HAL_RCCEx_GetD3PCLK1Freq>
 800de1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de1c:	e03c      	b.n	800de98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de22:	4618      	mov	r0, r3
 800de24:	f7fc fd02 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de2c:	e034      	b.n	800de98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de2e:	f107 0318 	add.w	r3, r7, #24
 800de32:	4618      	mov	r0, r3
 800de34:	f7fc fe4e 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de3c:	e02c      	b.n	800de98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de3e:	4b09      	ldr	r3, [pc, #36]	@ (800de64 <UART_SetConfig+0x69c>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f003 0320 	and.w	r3, r3, #32
 800de46:	2b00      	cmp	r3, #0
 800de48:	d016      	beq.n	800de78 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de4a:	4b06      	ldr	r3, [pc, #24]	@ (800de64 <UART_SetConfig+0x69c>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	08db      	lsrs	r3, r3, #3
 800de50:	f003 0303 	and.w	r3, r3, #3
 800de54:	4a07      	ldr	r2, [pc, #28]	@ (800de74 <UART_SetConfig+0x6ac>)
 800de56:	fa22 f303 	lsr.w	r3, r2, r3
 800de5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de5c:	e01c      	b.n	800de98 <UART_SetConfig+0x6d0>
 800de5e:	bf00      	nop
 800de60:	40011400 	.word	0x40011400
 800de64:	58024400 	.word	0x58024400
 800de68:	40007800 	.word	0x40007800
 800de6c:	40007c00 	.word	0x40007c00
 800de70:	58000c00 	.word	0x58000c00
 800de74:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800de78:	4b9d      	ldr	r3, [pc, #628]	@ (800e0f0 <UART_SetConfig+0x928>)
 800de7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de7c:	e00c      	b.n	800de98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de7e:	4b9d      	ldr	r3, [pc, #628]	@ (800e0f4 <UART_SetConfig+0x92c>)
 800de80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de82:	e009      	b.n	800de98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de8a:	e005      	b.n	800de98 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800de8c:	2300      	movs	r3, #0
 800de8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800de90:	2301      	movs	r3, #1
 800de92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 81de 	beq.w	800e25c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dea4:	4a94      	ldr	r2, [pc, #592]	@ (800e0f8 <UART_SetConfig+0x930>)
 800dea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800deaa:	461a      	mov	r2, r3
 800deac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deae:	fbb3 f3f2 	udiv	r3, r3, r2
 800deb2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	685a      	ldr	r2, [r3, #4]
 800deb8:	4613      	mov	r3, r2
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	4413      	add	r3, r2
 800debe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d305      	bcc.n	800ded0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800deca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800decc:	429a      	cmp	r2, r3
 800dece:	d903      	bls.n	800ded8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ded0:	2301      	movs	r3, #1
 800ded2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ded6:	e1c1      	b.n	800e25c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ded8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deda:	2200      	movs	r2, #0
 800dedc:	60bb      	str	r3, [r7, #8]
 800dede:	60fa      	str	r2, [r7, #12]
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee4:	4a84      	ldr	r2, [pc, #528]	@ (800e0f8 <UART_SetConfig+0x930>)
 800dee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800deea:	b29b      	uxth	r3, r3
 800deec:	2200      	movs	r2, #0
 800deee:	603b      	str	r3, [r7, #0]
 800def0:	607a      	str	r2, [r7, #4]
 800def2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800def6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800defa:	f7f2 fa49 	bl	8000390 <__aeabi_uldivmod>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	4610      	mov	r0, r2
 800df04:	4619      	mov	r1, r3
 800df06:	f04f 0200 	mov.w	r2, #0
 800df0a:	f04f 0300 	mov.w	r3, #0
 800df0e:	020b      	lsls	r3, r1, #8
 800df10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df14:	0202      	lsls	r2, r0, #8
 800df16:	6979      	ldr	r1, [r7, #20]
 800df18:	6849      	ldr	r1, [r1, #4]
 800df1a:	0849      	lsrs	r1, r1, #1
 800df1c:	2000      	movs	r0, #0
 800df1e:	460c      	mov	r4, r1
 800df20:	4605      	mov	r5, r0
 800df22:	eb12 0804 	adds.w	r8, r2, r4
 800df26:	eb43 0905 	adc.w	r9, r3, r5
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	469a      	mov	sl, r3
 800df32:	4693      	mov	fp, r2
 800df34:	4652      	mov	r2, sl
 800df36:	465b      	mov	r3, fp
 800df38:	4640      	mov	r0, r8
 800df3a:	4649      	mov	r1, r9
 800df3c:	f7f2 fa28 	bl	8000390 <__aeabi_uldivmod>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4613      	mov	r3, r2
 800df46:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800df4e:	d308      	bcc.n	800df62 <UART_SetConfig+0x79a>
 800df50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df56:	d204      	bcs.n	800df62 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df5e:	60da      	str	r2, [r3, #12]
 800df60:	e17c      	b.n	800e25c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800df62:	2301      	movs	r3, #1
 800df64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800df68:	e178      	b.n	800e25c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	69db      	ldr	r3, [r3, #28]
 800df6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df72:	f040 80c5 	bne.w	800e100 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800df76:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800df7a:	2b20      	cmp	r3, #32
 800df7c:	dc48      	bgt.n	800e010 <UART_SetConfig+0x848>
 800df7e:	2b00      	cmp	r3, #0
 800df80:	db7b      	blt.n	800e07a <UART_SetConfig+0x8b2>
 800df82:	2b20      	cmp	r3, #32
 800df84:	d879      	bhi.n	800e07a <UART_SetConfig+0x8b2>
 800df86:	a201      	add	r2, pc, #4	@ (adr r2, 800df8c <UART_SetConfig+0x7c4>)
 800df88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8c:	0800e017 	.word	0x0800e017
 800df90:	0800e01f 	.word	0x0800e01f
 800df94:	0800e07b 	.word	0x0800e07b
 800df98:	0800e07b 	.word	0x0800e07b
 800df9c:	0800e027 	.word	0x0800e027
 800dfa0:	0800e07b 	.word	0x0800e07b
 800dfa4:	0800e07b 	.word	0x0800e07b
 800dfa8:	0800e07b 	.word	0x0800e07b
 800dfac:	0800e037 	.word	0x0800e037
 800dfb0:	0800e07b 	.word	0x0800e07b
 800dfb4:	0800e07b 	.word	0x0800e07b
 800dfb8:	0800e07b 	.word	0x0800e07b
 800dfbc:	0800e07b 	.word	0x0800e07b
 800dfc0:	0800e07b 	.word	0x0800e07b
 800dfc4:	0800e07b 	.word	0x0800e07b
 800dfc8:	0800e07b 	.word	0x0800e07b
 800dfcc:	0800e047 	.word	0x0800e047
 800dfd0:	0800e07b 	.word	0x0800e07b
 800dfd4:	0800e07b 	.word	0x0800e07b
 800dfd8:	0800e07b 	.word	0x0800e07b
 800dfdc:	0800e07b 	.word	0x0800e07b
 800dfe0:	0800e07b 	.word	0x0800e07b
 800dfe4:	0800e07b 	.word	0x0800e07b
 800dfe8:	0800e07b 	.word	0x0800e07b
 800dfec:	0800e07b 	.word	0x0800e07b
 800dff0:	0800e07b 	.word	0x0800e07b
 800dff4:	0800e07b 	.word	0x0800e07b
 800dff8:	0800e07b 	.word	0x0800e07b
 800dffc:	0800e07b 	.word	0x0800e07b
 800e000:	0800e07b 	.word	0x0800e07b
 800e004:	0800e07b 	.word	0x0800e07b
 800e008:	0800e07b 	.word	0x0800e07b
 800e00c:	0800e06d 	.word	0x0800e06d
 800e010:	2b40      	cmp	r3, #64	@ 0x40
 800e012:	d02e      	beq.n	800e072 <UART_SetConfig+0x8aa>
 800e014:	e031      	b.n	800e07a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e016:	f7fa fc21 	bl	800885c <HAL_RCC_GetPCLK1Freq>
 800e01a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e01c:	e033      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e01e:	f7fa fc33 	bl	8008888 <HAL_RCC_GetPCLK2Freq>
 800e022:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e024:	e02f      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fc fbfe 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e034:	e027      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e036:	f107 0318 	add.w	r3, r7, #24
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fc fd4a 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e044:	e01f      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e046:	4b2d      	ldr	r3, [pc, #180]	@ (800e0fc <UART_SetConfig+0x934>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f003 0320 	and.w	r3, r3, #32
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d009      	beq.n	800e066 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e052:	4b2a      	ldr	r3, [pc, #168]	@ (800e0fc <UART_SetConfig+0x934>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	08db      	lsrs	r3, r3, #3
 800e058:	f003 0303 	and.w	r3, r3, #3
 800e05c:	4a24      	ldr	r2, [pc, #144]	@ (800e0f0 <UART_SetConfig+0x928>)
 800e05e:	fa22 f303 	lsr.w	r3, r2, r3
 800e062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e064:	e00f      	b.n	800e086 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e066:	4b22      	ldr	r3, [pc, #136]	@ (800e0f0 <UART_SetConfig+0x928>)
 800e068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e06a:	e00c      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e06c:	4b21      	ldr	r3, [pc, #132]	@ (800e0f4 <UART_SetConfig+0x92c>)
 800e06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e070:	e009      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e078:	e005      	b.n	800e086 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e07a:	2300      	movs	r3, #0
 800e07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f000 80e7 	beq.w	800e25c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e092:	4a19      	ldr	r2, [pc, #100]	@ (800e0f8 <UART_SetConfig+0x930>)
 800e094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e098:	461a      	mov	r2, r3
 800e09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e09c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0a0:	005a      	lsls	r2, r3, #1
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	085b      	lsrs	r3, r3, #1
 800e0a8:	441a      	add	r2, r3
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b6:	2b0f      	cmp	r3, #15
 800e0b8:	d916      	bls.n	800e0e8 <UART_SetConfig+0x920>
 800e0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0c0:	d212      	bcs.n	800e0e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	f023 030f 	bic.w	r3, r3, #15
 800e0ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ce:	085b      	lsrs	r3, r3, #1
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	f003 0307 	and.w	r3, r3, #7
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e0e4:	60da      	str	r2, [r3, #12]
 800e0e6:	e0b9      	b.n	800e25c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e0ee:	e0b5      	b.n	800e25c <UART_SetConfig+0xa94>
 800e0f0:	03d09000 	.word	0x03d09000
 800e0f4:	003d0900 	.word	0x003d0900
 800e0f8:	0801918c 	.word	0x0801918c
 800e0fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e100:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e104:	2b20      	cmp	r3, #32
 800e106:	dc49      	bgt.n	800e19c <UART_SetConfig+0x9d4>
 800e108:	2b00      	cmp	r3, #0
 800e10a:	db7c      	blt.n	800e206 <UART_SetConfig+0xa3e>
 800e10c:	2b20      	cmp	r3, #32
 800e10e:	d87a      	bhi.n	800e206 <UART_SetConfig+0xa3e>
 800e110:	a201      	add	r2, pc, #4	@ (adr r2, 800e118 <UART_SetConfig+0x950>)
 800e112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e116:	bf00      	nop
 800e118:	0800e1a3 	.word	0x0800e1a3
 800e11c:	0800e1ab 	.word	0x0800e1ab
 800e120:	0800e207 	.word	0x0800e207
 800e124:	0800e207 	.word	0x0800e207
 800e128:	0800e1b3 	.word	0x0800e1b3
 800e12c:	0800e207 	.word	0x0800e207
 800e130:	0800e207 	.word	0x0800e207
 800e134:	0800e207 	.word	0x0800e207
 800e138:	0800e1c3 	.word	0x0800e1c3
 800e13c:	0800e207 	.word	0x0800e207
 800e140:	0800e207 	.word	0x0800e207
 800e144:	0800e207 	.word	0x0800e207
 800e148:	0800e207 	.word	0x0800e207
 800e14c:	0800e207 	.word	0x0800e207
 800e150:	0800e207 	.word	0x0800e207
 800e154:	0800e207 	.word	0x0800e207
 800e158:	0800e1d3 	.word	0x0800e1d3
 800e15c:	0800e207 	.word	0x0800e207
 800e160:	0800e207 	.word	0x0800e207
 800e164:	0800e207 	.word	0x0800e207
 800e168:	0800e207 	.word	0x0800e207
 800e16c:	0800e207 	.word	0x0800e207
 800e170:	0800e207 	.word	0x0800e207
 800e174:	0800e207 	.word	0x0800e207
 800e178:	0800e207 	.word	0x0800e207
 800e17c:	0800e207 	.word	0x0800e207
 800e180:	0800e207 	.word	0x0800e207
 800e184:	0800e207 	.word	0x0800e207
 800e188:	0800e207 	.word	0x0800e207
 800e18c:	0800e207 	.word	0x0800e207
 800e190:	0800e207 	.word	0x0800e207
 800e194:	0800e207 	.word	0x0800e207
 800e198:	0800e1f9 	.word	0x0800e1f9
 800e19c:	2b40      	cmp	r3, #64	@ 0x40
 800e19e:	d02e      	beq.n	800e1fe <UART_SetConfig+0xa36>
 800e1a0:	e031      	b.n	800e206 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1a2:	f7fa fb5b 	bl	800885c <HAL_RCC_GetPCLK1Freq>
 800e1a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e1a8:	e033      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1aa:	f7fa fb6d 	bl	8008888 <HAL_RCC_GetPCLK2Freq>
 800e1ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e1b0:	e02f      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fc fb38 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1c0:	e027      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1c2:	f107 0318 	add.w	r3, r7, #24
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fc fc84 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1d0:	e01f      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1d2:	4b2d      	ldr	r3, [pc, #180]	@ (800e288 <UART_SetConfig+0xac0>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d009      	beq.n	800e1f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1de:	4b2a      	ldr	r3, [pc, #168]	@ (800e288 <UART_SetConfig+0xac0>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	08db      	lsrs	r3, r3, #3
 800e1e4:	f003 0303 	and.w	r3, r3, #3
 800e1e8:	4a28      	ldr	r2, [pc, #160]	@ (800e28c <UART_SetConfig+0xac4>)
 800e1ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1f0:	e00f      	b.n	800e212 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e1f2:	4b26      	ldr	r3, [pc, #152]	@ (800e28c <UART_SetConfig+0xac4>)
 800e1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1f6:	e00c      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1f8:	4b25      	ldr	r3, [pc, #148]	@ (800e290 <UART_SetConfig+0xac8>)
 800e1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1fc:	e009      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e204:	e005      	b.n	800e212 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e206:	2300      	movs	r3, #0
 800e208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e210:	bf00      	nop
    }

    if (pclk != 0U)
 800e212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d021      	beq.n	800e25c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e21c:	4a1d      	ldr	r2, [pc, #116]	@ (800e294 <UART_SetConfig+0xacc>)
 800e21e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e222:	461a      	mov	r2, r3
 800e224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e226:	fbb3 f2f2 	udiv	r2, r3, r2
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	085b      	lsrs	r3, r3, #1
 800e230:	441a      	add	r2, r3
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	fbb2 f3f3 	udiv	r3, r2, r3
 800e23a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e23e:	2b0f      	cmp	r3, #15
 800e240:	d909      	bls.n	800e256 <UART_SetConfig+0xa8e>
 800e242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e248:	d205      	bcs.n	800e256 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	60da      	str	r2, [r3, #12]
 800e254:	e002      	b.n	800e25c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e256:	2301      	movs	r3, #1
 800e258:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	2201      	movs	r2, #1
 800e260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	2201      	movs	r2, #1
 800e268:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	2200      	movs	r2, #0
 800e270:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	2200      	movs	r2, #0
 800e276:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e278:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3748      	adds	r7, #72	@ 0x48
 800e280:	46bd      	mov	sp, r7
 800e282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e286:	bf00      	nop
 800e288:	58024400 	.word	0x58024400
 800e28c:	03d09000 	.word	0x03d09000
 800e290:	003d0900 	.word	0x003d0900
 800e294:	0801918c 	.word	0x0801918c

0800e298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2a4:	f003 0308 	and.w	r3, r3, #8
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00a      	beq.n	800e2c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	430a      	orrs	r2, r1
 800e2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2c6:	f003 0301 	and.w	r3, r3, #1
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	430a      	orrs	r2, r1
 800e2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2e8:	f003 0302 	and.w	r3, r3, #2
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00a      	beq.n	800e306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	430a      	orrs	r2, r1
 800e304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e30a:	f003 0304 	and.w	r3, r3, #4
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00a      	beq.n	800e328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	430a      	orrs	r2, r1
 800e326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e32c:	f003 0310 	and.w	r3, r3, #16
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00a      	beq.n	800e34a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	430a      	orrs	r2, r1
 800e348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e34e:	f003 0320 	and.w	r3, r3, #32
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00a      	beq.n	800e36c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	430a      	orrs	r2, r1
 800e36a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e374:	2b00      	cmp	r3, #0
 800e376:	d01a      	beq.n	800e3ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	430a      	orrs	r2, r1
 800e38c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e396:	d10a      	bne.n	800e3ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	430a      	orrs	r2, r1
 800e3ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00a      	beq.n	800e3d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	430a      	orrs	r2, r1
 800e3ce:	605a      	str	r2, [r3, #4]
  }
}
 800e3d0:	bf00      	nop
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b098      	sub	sp, #96	@ 0x60
 800e3e0:	af02      	add	r7, sp, #8
 800e3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3ec:	f7f6 faf4 	bl	80049d8 <HAL_GetTick>
 800e3f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f003 0308 	and.w	r3, r3, #8
 800e3fc:	2b08      	cmp	r3, #8
 800e3fe:	d12f      	bne.n	800e460 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e400:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e408:	2200      	movs	r2, #0
 800e40a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f88e 	bl	800e530 <UART_WaitOnFlagUntilTimeout>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d022      	beq.n	800e460 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e422:	e853 3f00 	ldrex	r3, [r3]
 800e426:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e42a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e42e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	461a      	mov	r2, r3
 800e436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e438:	647b      	str	r3, [r7, #68]	@ 0x44
 800e43a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e43e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e440:	e841 2300 	strex	r3, r2, [r1]
 800e444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1e6      	bne.n	800e41a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2220      	movs	r2, #32
 800e450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e45c:	2303      	movs	r3, #3
 800e45e:	e063      	b.n	800e528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 0304 	and.w	r3, r3, #4
 800e46a:	2b04      	cmp	r3, #4
 800e46c:	d149      	bne.n	800e502 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e46e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e476:	2200      	movs	r2, #0
 800e478:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 f857 	bl	800e530 <UART_WaitOnFlagUntilTimeout>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d03c      	beq.n	800e502 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e490:	e853 3f00 	ldrex	r3, [r3]
 800e494:	623b      	str	r3, [r7, #32]
   return(result);
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e49c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e4ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4ae:	e841 2300 	strex	r3, r2, [r1]
 800e4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1e6      	bne.n	800e488 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3308      	adds	r3, #8
 800e4c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	e853 3f00 	ldrex	r3, [r3]
 800e4c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f023 0301 	bic.w	r3, r3, #1
 800e4d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	3308      	adds	r3, #8
 800e4d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4da:	61fa      	str	r2, [r7, #28]
 800e4dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4de:	69b9      	ldr	r1, [r7, #24]
 800e4e0:	69fa      	ldr	r2, [r7, #28]
 800e4e2:	e841 2300 	strex	r3, r2, [r1]
 800e4e6:	617b      	str	r3, [r7, #20]
   return(result);
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1e5      	bne.n	800e4ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2220      	movs	r2, #32
 800e4f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4fe:	2303      	movs	r3, #3
 800e500:	e012      	b.n	800e528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2220      	movs	r2, #32
 800e506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2220      	movs	r2, #32
 800e50e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2200      	movs	r2, #0
 800e522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e526:	2300      	movs	r3, #0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3758      	adds	r7, #88	@ 0x58
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	603b      	str	r3, [r7, #0]
 800e53c:	4613      	mov	r3, r2
 800e53e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e540:	e04f      	b.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e548:	d04b      	beq.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e54a:	f7f6 fa45 	bl	80049d8 <HAL_GetTick>
 800e54e:	4602      	mov	r2, r0
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	69ba      	ldr	r2, [r7, #24]
 800e556:	429a      	cmp	r2, r3
 800e558:	d302      	bcc.n	800e560 <UART_WaitOnFlagUntilTimeout+0x30>
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d101      	bne.n	800e564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e560:	2303      	movs	r3, #3
 800e562:	e04e      	b.n	800e602 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f003 0304 	and.w	r3, r3, #4
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d037      	beq.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	2b80      	cmp	r3, #128	@ 0x80
 800e576:	d034      	beq.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	2b40      	cmp	r3, #64	@ 0x40
 800e57c:	d031      	beq.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	69db      	ldr	r3, [r3, #28]
 800e584:	f003 0308 	and.w	r3, r3, #8
 800e588:	2b08      	cmp	r3, #8
 800e58a:	d110      	bne.n	800e5ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2208      	movs	r2, #8
 800e592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f000 f839 	bl	800e60c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2208      	movs	r2, #8
 800e59e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e029      	b.n	800e602 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	69db      	ldr	r3, [r3, #28]
 800e5b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e5b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5bc:	d111      	bne.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e5c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f000 f81f 	bl	800e60c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2220      	movs	r2, #32
 800e5d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e5de:	2303      	movs	r3, #3
 800e5e0:	e00f      	b.n	800e602 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	69da      	ldr	r2, [r3, #28]
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	4013      	ands	r3, r2
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	bf0c      	ite	eq
 800e5f2:	2301      	moveq	r3, #1
 800e5f4:	2300      	movne	r3, #0
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	79fb      	ldrb	r3, [r7, #7]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d0a0      	beq.n	800e542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
	...

0800e60c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b095      	sub	sp, #84	@ 0x54
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e61c:	e853 3f00 	ldrex	r3, [r3]
 800e620:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e624:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	461a      	mov	r2, r3
 800e630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e632:	643b      	str	r3, [r7, #64]	@ 0x40
 800e634:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e636:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e638:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e63a:	e841 2300 	strex	r3, r2, [r1]
 800e63e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1e6      	bne.n	800e614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	3308      	adds	r3, #8
 800e64c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64e:	6a3b      	ldr	r3, [r7, #32]
 800e650:	e853 3f00 	ldrex	r3, [r3]
 800e654:	61fb      	str	r3, [r7, #28]
   return(result);
 800e656:	69fa      	ldr	r2, [r7, #28]
 800e658:	4b1e      	ldr	r3, [pc, #120]	@ (800e6d4 <UART_EndRxTransfer+0xc8>)
 800e65a:	4013      	ands	r3, r2
 800e65c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3308      	adds	r3, #8
 800e664:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e668:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e66c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e66e:	e841 2300 	strex	r3, r2, [r1]
 800e672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1e5      	bne.n	800e646 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d118      	bne.n	800e6b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	e853 3f00 	ldrex	r3, [r3]
 800e68e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	f023 0310 	bic.w	r3, r3, #16
 800e696:	647b      	str	r3, [r7, #68]	@ 0x44
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	461a      	mov	r2, r3
 800e69e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6a0:	61bb      	str	r3, [r7, #24]
 800e6a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a4:	6979      	ldr	r1, [r7, #20]
 800e6a6:	69ba      	ldr	r2, [r7, #24]
 800e6a8:	e841 2300 	strex	r3, r2, [r1]
 800e6ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1e6      	bne.n	800e682 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2220      	movs	r2, #32
 800e6b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e6c8:	bf00      	nop
 800e6ca:	3754      	adds	r7, #84	@ 0x54
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	effffffe 	.word	0xeffffffe

0800e6d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b085      	sub	sp, #20
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d101      	bne.n	800e6ee <HAL_UARTEx_DisableFifoMode+0x16>
 800e6ea:	2302      	movs	r3, #2
 800e6ec:	e027      	b.n	800e73e <HAL_UARTEx_DisableFifoMode+0x66>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2224      	movs	r2, #36	@ 0x24
 800e6fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f022 0201 	bic.w	r2, r2, #1
 800e714:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e71c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	68fa      	ldr	r2, [r7, #12]
 800e72a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2220      	movs	r2, #32
 800e730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2200      	movs	r2, #0
 800e738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e73c:	2300      	movs	r3, #0
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3714      	adds	r7, #20
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b084      	sub	sp, #16
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d101      	bne.n	800e762 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e75e:	2302      	movs	r3, #2
 800e760:	e02d      	b.n	800e7be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2201      	movs	r2, #1
 800e766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2224      	movs	r2, #36	@ 0x24
 800e76e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f022 0201 	bic.w	r2, r2, #1
 800e788:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	683a      	ldr	r2, [r7, #0]
 800e79a:	430a      	orrs	r2, r1
 800e79c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 f850 	bl	800e844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2220      	movs	r2, #32
 800e7b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e7bc:	2300      	movs	r3, #0
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b084      	sub	sp, #16
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
 800e7ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d101      	bne.n	800e7de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e7da:	2302      	movs	r3, #2
 800e7dc:	e02d      	b.n	800e83a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2224      	movs	r2, #36	@ 0x24
 800e7ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f022 0201 	bic.w	r2, r2, #1
 800e804:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	689b      	ldr	r3, [r3, #8]
 800e80c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	683a      	ldr	r2, [r7, #0]
 800e816:	430a      	orrs	r2, r1
 800e818:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f812 	bl	800e844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2220      	movs	r2, #32
 800e82c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2200      	movs	r2, #0
 800e834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e850:	2b00      	cmp	r3, #0
 800e852:	d108      	bne.n	800e866 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2201      	movs	r2, #1
 800e858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2201      	movs	r2, #1
 800e860:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e864:	e031      	b.n	800e8ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e866:	2310      	movs	r3, #16
 800e868:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e86a:	2310      	movs	r3, #16
 800e86c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	0e5b      	lsrs	r3, r3, #25
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f003 0307 	and.w	r3, r3, #7
 800e87c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	0f5b      	lsrs	r3, r3, #29
 800e886:	b2db      	uxtb	r3, r3
 800e888:	f003 0307 	and.w	r3, r3, #7
 800e88c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e88e:	7bbb      	ldrb	r3, [r7, #14]
 800e890:	7b3a      	ldrb	r2, [r7, #12]
 800e892:	4911      	ldr	r1, [pc, #68]	@ (800e8d8 <UARTEx_SetNbDataToProcess+0x94>)
 800e894:	5c8a      	ldrb	r2, [r1, r2]
 800e896:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e89a:	7b3a      	ldrb	r2, [r7, #12]
 800e89c:	490f      	ldr	r1, [pc, #60]	@ (800e8dc <UARTEx_SetNbDataToProcess+0x98>)
 800e89e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	7b7a      	ldrb	r2, [r7, #13]
 800e8b0:	4909      	ldr	r1, [pc, #36]	@ (800e8d8 <UARTEx_SetNbDataToProcess+0x94>)
 800e8b2:	5c8a      	ldrb	r2, [r1, r2]
 800e8b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e8b8:	7b7a      	ldrb	r2, [r7, #13]
 800e8ba:	4908      	ldr	r1, [pc, #32]	@ (800e8dc <UARTEx_SetNbDataToProcess+0x98>)
 800e8bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8be:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8c2:	b29a      	uxth	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e8ca:	bf00      	nop
 800e8cc:	3714      	adds	r7, #20
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	080191a4 	.word	0x080191a4
 800e8dc:	080191ac 	.word	0x080191ac

0800e8e0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d101      	bne.n	800e8f2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	e03c      	b.n	800e96c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d106      	bne.n	800e90c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7f5 fdb8 	bl	800447c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2202      	movs	r2, #2
 800e910:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f022 0201 	bic.w	r2, r2, #1
 800e922:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 f85b 	bl	800e9e0 <USART_SetConfig>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d101      	bne.n	800e934 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800e930:	2301      	movs	r3, #1
 800e932:	e01b      	b.n	800e96c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	685a      	ldr	r2, [r3, #4]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e942:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	689a      	ldr	r2, [r3, #8]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e952:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f042 0201 	orr.w	r2, r2, #1
 800e962:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 fd5b 	bl	800f420 <USART_CheckIdleState>
 800e96a:	4603      	mov	r3, r0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	603b      	str	r3, [r7, #0]
 800e980:	4613      	mov	r3, r2
 800e982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800e984:	e018      	b.n	800e9b8 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e98c:	d014      	beq.n	800e9b8 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e98e:	f7f6 f823 	bl	80049d8 <HAL_GetTick>
 800e992:	4602      	mov	r2, r0
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	69ba      	ldr	r2, [r7, #24]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d302      	bcc.n	800e9a4 <USART_WaitOnFlagUntilTimeout+0x30>
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d109      	bne.n	800e9b8 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800e9b4:	2303      	movs	r3, #3
 800e9b6:	e00f      	b.n	800e9d8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	69da      	ldr	r2, [r3, #28]
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	4013      	ands	r3, r2
 800e9c2:	68ba      	ldr	r2, [r7, #8]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	bf0c      	ite	eq
 800e9c8:	2301      	moveq	r3, #1
 800e9ca:	2300      	movne	r3, #0
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	79fb      	ldrb	r3, [r7, #7]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d0d7      	beq.n	800e986 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3710      	adds	r7, #16
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b08e      	sub	sp, #56	@ 0x38
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	689a      	ldr	r2, [r3, #8]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	691b      	ldr	r3, [r3, #16]
 800e9fa:	431a      	orrs	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	695b      	ldr	r3, [r3, #20]
 800ea00:	4313      	orrs	r3, r2
 800ea02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	4bc9      	ldr	r3, [pc, #804]	@ (800ed34 <USART_SetConfig+0x354>)
 800ea10:	4013      	ands	r3, r2
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	6812      	ldr	r2, [r2, #0]
 800ea16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea18:	430b      	orrs	r3, r1
 800ea1a:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800ea1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ea20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6a1b      	ldr	r3, [r3, #32]
 800ea26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	699a      	ldr	r2, [r3, #24]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	69db      	ldr	r3, [r3, #28]
 800ea34:	4313      	orrs	r3, r2
 800ea36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea42:	4313      	orrs	r3, r2
 800ea44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	685a      	ldr	r2, [r3, #4]
 800ea4c:	4bba      	ldr	r3, [pc, #744]	@ (800ed38 <USART_SetConfig+0x358>)
 800ea4e:	4013      	ands	r3, r2
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	6812      	ldr	r2, [r2, #0]
 800ea54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea56:	430b      	orrs	r3, r1
 800ea58:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea60:	f023 010f 	bic.w	r1, r3, #15
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	430a      	orrs	r2, r1
 800ea6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4ab1      	ldr	r2, [pc, #708]	@ (800ed3c <USART_SetConfig+0x35c>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d176      	bne.n	800eb68 <USART_SetConfig+0x188>
 800ea7a:	4bb1      	ldr	r3, [pc, #708]	@ (800ed40 <USART_SetConfig+0x360>)
 800ea7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ea82:	2b28      	cmp	r3, #40	@ 0x28
 800ea84:	d86c      	bhi.n	800eb60 <USART_SetConfig+0x180>
 800ea86:	a201      	add	r2, pc, #4	@ (adr r2, 800ea8c <USART_SetConfig+0xac>)
 800ea88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea8c:	0800eb31 	.word	0x0800eb31
 800ea90:	0800eb61 	.word	0x0800eb61
 800ea94:	0800eb61 	.word	0x0800eb61
 800ea98:	0800eb61 	.word	0x0800eb61
 800ea9c:	0800eb61 	.word	0x0800eb61
 800eaa0:	0800eb61 	.word	0x0800eb61
 800eaa4:	0800eb61 	.word	0x0800eb61
 800eaa8:	0800eb61 	.word	0x0800eb61
 800eaac:	0800eb39 	.word	0x0800eb39
 800eab0:	0800eb61 	.word	0x0800eb61
 800eab4:	0800eb61 	.word	0x0800eb61
 800eab8:	0800eb61 	.word	0x0800eb61
 800eabc:	0800eb61 	.word	0x0800eb61
 800eac0:	0800eb61 	.word	0x0800eb61
 800eac4:	0800eb61 	.word	0x0800eb61
 800eac8:	0800eb61 	.word	0x0800eb61
 800eacc:	0800eb41 	.word	0x0800eb41
 800ead0:	0800eb61 	.word	0x0800eb61
 800ead4:	0800eb61 	.word	0x0800eb61
 800ead8:	0800eb61 	.word	0x0800eb61
 800eadc:	0800eb61 	.word	0x0800eb61
 800eae0:	0800eb61 	.word	0x0800eb61
 800eae4:	0800eb61 	.word	0x0800eb61
 800eae8:	0800eb61 	.word	0x0800eb61
 800eaec:	0800eb49 	.word	0x0800eb49
 800eaf0:	0800eb61 	.word	0x0800eb61
 800eaf4:	0800eb61 	.word	0x0800eb61
 800eaf8:	0800eb61 	.word	0x0800eb61
 800eafc:	0800eb61 	.word	0x0800eb61
 800eb00:	0800eb61 	.word	0x0800eb61
 800eb04:	0800eb61 	.word	0x0800eb61
 800eb08:	0800eb61 	.word	0x0800eb61
 800eb0c:	0800eb51 	.word	0x0800eb51
 800eb10:	0800eb61 	.word	0x0800eb61
 800eb14:	0800eb61 	.word	0x0800eb61
 800eb18:	0800eb61 	.word	0x0800eb61
 800eb1c:	0800eb61 	.word	0x0800eb61
 800eb20:	0800eb61 	.word	0x0800eb61
 800eb24:	0800eb61 	.word	0x0800eb61
 800eb28:	0800eb61 	.word	0x0800eb61
 800eb2c:	0800eb59 	.word	0x0800eb59
 800eb30:	2301      	movs	r3, #1
 800eb32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb36:	e112      	b.n	800ed5e <USART_SetConfig+0x37e>
 800eb38:	2302      	movs	r3, #2
 800eb3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb3e:	e10e      	b.n	800ed5e <USART_SetConfig+0x37e>
 800eb40:	2304      	movs	r3, #4
 800eb42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb46:	e10a      	b.n	800ed5e <USART_SetConfig+0x37e>
 800eb48:	2308      	movs	r3, #8
 800eb4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb4e:	e106      	b.n	800ed5e <USART_SetConfig+0x37e>
 800eb50:	2310      	movs	r3, #16
 800eb52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb56:	e102      	b.n	800ed5e <USART_SetConfig+0x37e>
 800eb58:	2320      	movs	r3, #32
 800eb5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb5e:	e0fe      	b.n	800ed5e <USART_SetConfig+0x37e>
 800eb60:	2340      	movs	r3, #64	@ 0x40
 800eb62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb66:	e0fa      	b.n	800ed5e <USART_SetConfig+0x37e>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a75      	ldr	r2, [pc, #468]	@ (800ed44 <USART_SetConfig+0x364>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d130      	bne.n	800ebd4 <USART_SetConfig+0x1f4>
 800eb72:	4b73      	ldr	r3, [pc, #460]	@ (800ed40 <USART_SetConfig+0x360>)
 800eb74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb76:	f003 0307 	and.w	r3, r3, #7
 800eb7a:	2b05      	cmp	r3, #5
 800eb7c:	d826      	bhi.n	800ebcc <USART_SetConfig+0x1ec>
 800eb7e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb84 <USART_SetConfig+0x1a4>)
 800eb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb84:	0800eb9d 	.word	0x0800eb9d
 800eb88:	0800eba5 	.word	0x0800eba5
 800eb8c:	0800ebad 	.word	0x0800ebad
 800eb90:	0800ebb5 	.word	0x0800ebb5
 800eb94:	0800ebbd 	.word	0x0800ebbd
 800eb98:	0800ebc5 	.word	0x0800ebc5
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eba2:	e0dc      	b.n	800ed5e <USART_SetConfig+0x37e>
 800eba4:	2302      	movs	r3, #2
 800eba6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ebaa:	e0d8      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ebac:	2304      	movs	r3, #4
 800ebae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ebb2:	e0d4      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ebb4:	2308      	movs	r3, #8
 800ebb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ebba:	e0d0      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ebbc:	2310      	movs	r3, #16
 800ebbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ebc2:	e0cc      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ebc4:	2320      	movs	r3, #32
 800ebc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ebca:	e0c8      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ebcc:	2340      	movs	r3, #64	@ 0x40
 800ebce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ebd2:	e0c4      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4a5b      	ldr	r2, [pc, #364]	@ (800ed48 <USART_SetConfig+0x368>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d130      	bne.n	800ec40 <USART_SetConfig+0x260>
 800ebde:	4b58      	ldr	r3, [pc, #352]	@ (800ed40 <USART_SetConfig+0x360>)
 800ebe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebe2:	f003 0307 	and.w	r3, r3, #7
 800ebe6:	2b05      	cmp	r3, #5
 800ebe8:	d826      	bhi.n	800ec38 <USART_SetConfig+0x258>
 800ebea:	a201      	add	r2, pc, #4	@ (adr r2, 800ebf0 <USART_SetConfig+0x210>)
 800ebec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf0:	0800ec09 	.word	0x0800ec09
 800ebf4:	0800ec11 	.word	0x0800ec11
 800ebf8:	0800ec19 	.word	0x0800ec19
 800ebfc:	0800ec21 	.word	0x0800ec21
 800ec00:	0800ec29 	.word	0x0800ec29
 800ec04:	0800ec31 	.word	0x0800ec31
 800ec08:	2300      	movs	r3, #0
 800ec0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ec0e:	e0a6      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ec10:	2302      	movs	r3, #2
 800ec12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ec16:	e0a2      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ec18:	2304      	movs	r3, #4
 800ec1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ec1e:	e09e      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ec20:	2308      	movs	r3, #8
 800ec22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ec26:	e09a      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ec28:	2310      	movs	r3, #16
 800ec2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ec2e:	e096      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ec30:	2320      	movs	r3, #32
 800ec32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ec36:	e092      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ec38:	2340      	movs	r3, #64	@ 0x40
 800ec3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ec3e:	e08e      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a41      	ldr	r2, [pc, #260]	@ (800ed4c <USART_SetConfig+0x36c>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	f040 8086 	bne.w	800ed58 <USART_SetConfig+0x378>
 800ec4c:	4b3c      	ldr	r3, [pc, #240]	@ (800ed40 <USART_SetConfig+0x360>)
 800ec4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ec54:	2b28      	cmp	r3, #40	@ 0x28
 800ec56:	d87b      	bhi.n	800ed50 <USART_SetConfig+0x370>
 800ec58:	a201      	add	r2, pc, #4	@ (adr r2, 800ec60 <USART_SetConfig+0x280>)
 800ec5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5e:	bf00      	nop
 800ec60:	0800ed05 	.word	0x0800ed05
 800ec64:	0800ed51 	.word	0x0800ed51
 800ec68:	0800ed51 	.word	0x0800ed51
 800ec6c:	0800ed51 	.word	0x0800ed51
 800ec70:	0800ed51 	.word	0x0800ed51
 800ec74:	0800ed51 	.word	0x0800ed51
 800ec78:	0800ed51 	.word	0x0800ed51
 800ec7c:	0800ed51 	.word	0x0800ed51
 800ec80:	0800ed0d 	.word	0x0800ed0d
 800ec84:	0800ed51 	.word	0x0800ed51
 800ec88:	0800ed51 	.word	0x0800ed51
 800ec8c:	0800ed51 	.word	0x0800ed51
 800ec90:	0800ed51 	.word	0x0800ed51
 800ec94:	0800ed51 	.word	0x0800ed51
 800ec98:	0800ed51 	.word	0x0800ed51
 800ec9c:	0800ed51 	.word	0x0800ed51
 800eca0:	0800ed15 	.word	0x0800ed15
 800eca4:	0800ed51 	.word	0x0800ed51
 800eca8:	0800ed51 	.word	0x0800ed51
 800ecac:	0800ed51 	.word	0x0800ed51
 800ecb0:	0800ed51 	.word	0x0800ed51
 800ecb4:	0800ed51 	.word	0x0800ed51
 800ecb8:	0800ed51 	.word	0x0800ed51
 800ecbc:	0800ed51 	.word	0x0800ed51
 800ecc0:	0800ed1d 	.word	0x0800ed1d
 800ecc4:	0800ed51 	.word	0x0800ed51
 800ecc8:	0800ed51 	.word	0x0800ed51
 800eccc:	0800ed51 	.word	0x0800ed51
 800ecd0:	0800ed51 	.word	0x0800ed51
 800ecd4:	0800ed51 	.word	0x0800ed51
 800ecd8:	0800ed51 	.word	0x0800ed51
 800ecdc:	0800ed51 	.word	0x0800ed51
 800ece0:	0800ed25 	.word	0x0800ed25
 800ece4:	0800ed51 	.word	0x0800ed51
 800ece8:	0800ed51 	.word	0x0800ed51
 800ecec:	0800ed51 	.word	0x0800ed51
 800ecf0:	0800ed51 	.word	0x0800ed51
 800ecf4:	0800ed51 	.word	0x0800ed51
 800ecf8:	0800ed51 	.word	0x0800ed51
 800ecfc:	0800ed51 	.word	0x0800ed51
 800ed00:	0800ed2d 	.word	0x0800ed2d
 800ed04:	2301      	movs	r3, #1
 800ed06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ed0a:	e028      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ed0c:	2302      	movs	r3, #2
 800ed0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ed12:	e024      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ed14:	2304      	movs	r3, #4
 800ed16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ed1a:	e020      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ed1c:	2308      	movs	r3, #8
 800ed1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ed22:	e01c      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ed24:	2310      	movs	r3, #16
 800ed26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ed2a:	e018      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ed2c:	2320      	movs	r3, #32
 800ed2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ed32:	e014      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ed34:	cfff69f3 	.word	0xcfff69f3
 800ed38:	ffffc0f6 	.word	0xffffc0f6
 800ed3c:	40011000 	.word	0x40011000
 800ed40:	58024400 	.word	0x58024400
 800ed44:	40004400 	.word	0x40004400
 800ed48:	40004800 	.word	0x40004800
 800ed4c:	40011400 	.word	0x40011400
 800ed50:	2340      	movs	r3, #64	@ 0x40
 800ed52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ed56:	e002      	b.n	800ed5e <USART_SetConfig+0x37e>
 800ed58:	2340      	movs	r3, #64	@ 0x40
 800ed5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800ed5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed62:	2b20      	cmp	r3, #32
 800ed64:	f200 8329 	bhi.w	800f3ba <USART_SetConfig+0x9da>
 800ed68:	a201      	add	r2, pc, #4	@ (adr r2, 800ed70 <USART_SetConfig+0x390>)
 800ed6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed6e:	bf00      	nop
 800ed70:	0800edf5 	.word	0x0800edf5
 800ed74:	0800eeab 	.word	0x0800eeab
 800ed78:	0800ef61 	.word	0x0800ef61
 800ed7c:	0800f3bb 	.word	0x0800f3bb
 800ed80:	0800f01b 	.word	0x0800f01b
 800ed84:	0800f3bb 	.word	0x0800f3bb
 800ed88:	0800f3bb 	.word	0x0800f3bb
 800ed8c:	0800f3bb 	.word	0x0800f3bb
 800ed90:	0800f0d5 	.word	0x0800f0d5
 800ed94:	0800f3bb 	.word	0x0800f3bb
 800ed98:	0800f3bb 	.word	0x0800f3bb
 800ed9c:	0800f3bb 	.word	0x0800f3bb
 800eda0:	0800f3bb 	.word	0x0800f3bb
 800eda4:	0800f3bb 	.word	0x0800f3bb
 800eda8:	0800f3bb 	.word	0x0800f3bb
 800edac:	0800f3bb 	.word	0x0800f3bb
 800edb0:	0800f24d 	.word	0x0800f24d
 800edb4:	0800f3bb 	.word	0x0800f3bb
 800edb8:	0800f3bb 	.word	0x0800f3bb
 800edbc:	0800f3bb 	.word	0x0800f3bb
 800edc0:	0800f3bb 	.word	0x0800f3bb
 800edc4:	0800f3bb 	.word	0x0800f3bb
 800edc8:	0800f3bb 	.word	0x0800f3bb
 800edcc:	0800f3bb 	.word	0x0800f3bb
 800edd0:	0800f3bb 	.word	0x0800f3bb
 800edd4:	0800f3bb 	.word	0x0800f3bb
 800edd8:	0800f3bb 	.word	0x0800f3bb
 800eddc:	0800f3bb 	.word	0x0800f3bb
 800ede0:	0800f3bb 	.word	0x0800f3bb
 800ede4:	0800f3bb 	.word	0x0800f3bb
 800ede8:	0800f3bb 	.word	0x0800f3bb
 800edec:	0800f3bb 	.word	0x0800f3bb
 800edf0:	0800f309 	.word	0x0800f309
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800edf4:	f7f9 fd32 	bl	800885c <HAL_RCC_GetPCLK1Freq>
 800edf8:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d044      	beq.n	800ee8c <USART_SetConfig+0x4ac>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d03e      	beq.n	800ee88 <USART_SetConfig+0x4a8>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	d038      	beq.n	800ee84 <USART_SetConfig+0x4a4>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee16:	2b03      	cmp	r3, #3
 800ee18:	d032      	beq.n	800ee80 <USART_SetConfig+0x4a0>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee1e:	2b04      	cmp	r3, #4
 800ee20:	d02c      	beq.n	800ee7c <USART_SetConfig+0x49c>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee26:	2b05      	cmp	r3, #5
 800ee28:	d026      	beq.n	800ee78 <USART_SetConfig+0x498>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee2e:	2b06      	cmp	r3, #6
 800ee30:	d020      	beq.n	800ee74 <USART_SetConfig+0x494>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee36:	2b07      	cmp	r3, #7
 800ee38:	d01a      	beq.n	800ee70 <USART_SetConfig+0x490>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee3e:	2b08      	cmp	r3, #8
 800ee40:	d014      	beq.n	800ee6c <USART_SetConfig+0x48c>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee46:	2b09      	cmp	r3, #9
 800ee48:	d00e      	beq.n	800ee68 <USART_SetConfig+0x488>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee4e:	2b0a      	cmp	r3, #10
 800ee50:	d008      	beq.n	800ee64 <USART_SetConfig+0x484>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee56:	2b0b      	cmp	r3, #11
 800ee58:	d102      	bne.n	800ee60 <USART_SetConfig+0x480>
 800ee5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee5e:	e016      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee60:	2301      	movs	r3, #1
 800ee62:	e014      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee64:	2380      	movs	r3, #128	@ 0x80
 800ee66:	e012      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee68:	2340      	movs	r3, #64	@ 0x40
 800ee6a:	e010      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee6c:	2320      	movs	r3, #32
 800ee6e:	e00e      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee70:	2310      	movs	r3, #16
 800ee72:	e00c      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee74:	230c      	movs	r3, #12
 800ee76:	e00a      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee78:	230a      	movs	r3, #10
 800ee7a:	e008      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee7c:	2308      	movs	r3, #8
 800ee7e:	e006      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee80:	2306      	movs	r3, #6
 800ee82:	e004      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee84:	2304      	movs	r3, #4
 800ee86:	e002      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee88:	2302      	movs	r3, #2
 800ee8a:	e000      	b.n	800ee8e <USART_SetConfig+0x4ae>
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee94:	005a      	lsls	r2, r3, #1
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	085b      	lsrs	r3, r3, #1
 800ee9c:	441a      	add	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	fbb2 f3f3 	udiv	r3, r2, r3
 800eea6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800eea8:	e28b      	b.n	800f3c2 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800eeaa:	f7f9 fced 	bl	8008888 <HAL_RCC_GetPCLK2Freq>
 800eeae:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d044      	beq.n	800ef42 <USART_SetConfig+0x562>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d03e      	beq.n	800ef3e <USART_SetConfig+0x55e>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d038      	beq.n	800ef3a <USART_SetConfig+0x55a>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eecc:	2b03      	cmp	r3, #3
 800eece:	d032      	beq.n	800ef36 <USART_SetConfig+0x556>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eed4:	2b04      	cmp	r3, #4
 800eed6:	d02c      	beq.n	800ef32 <USART_SetConfig+0x552>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eedc:	2b05      	cmp	r3, #5
 800eede:	d026      	beq.n	800ef2e <USART_SetConfig+0x54e>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eee4:	2b06      	cmp	r3, #6
 800eee6:	d020      	beq.n	800ef2a <USART_SetConfig+0x54a>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeec:	2b07      	cmp	r3, #7
 800eeee:	d01a      	beq.n	800ef26 <USART_SetConfig+0x546>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eef4:	2b08      	cmp	r3, #8
 800eef6:	d014      	beq.n	800ef22 <USART_SetConfig+0x542>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eefc:	2b09      	cmp	r3, #9
 800eefe:	d00e      	beq.n	800ef1e <USART_SetConfig+0x53e>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef04:	2b0a      	cmp	r3, #10
 800ef06:	d008      	beq.n	800ef1a <USART_SetConfig+0x53a>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef0c:	2b0b      	cmp	r3, #11
 800ef0e:	d102      	bne.n	800ef16 <USART_SetConfig+0x536>
 800ef10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef14:	e016      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef16:	2301      	movs	r3, #1
 800ef18:	e014      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef1a:	2380      	movs	r3, #128	@ 0x80
 800ef1c:	e012      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef1e:	2340      	movs	r3, #64	@ 0x40
 800ef20:	e010      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef22:	2320      	movs	r3, #32
 800ef24:	e00e      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef26:	2310      	movs	r3, #16
 800ef28:	e00c      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef2a:	230c      	movs	r3, #12
 800ef2c:	e00a      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef2e:	230a      	movs	r3, #10
 800ef30:	e008      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef32:	2308      	movs	r3, #8
 800ef34:	e006      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef36:	2306      	movs	r3, #6
 800ef38:	e004      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef3a:	2304      	movs	r3, #4
 800ef3c:	e002      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef3e:	2302      	movs	r3, #2
 800ef40:	e000      	b.n	800ef44 <USART_SetConfig+0x564>
 800ef42:	2301      	movs	r3, #1
 800ef44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef4a:	005a      	lsls	r2, r3, #1
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	085b      	lsrs	r3, r3, #1
 800ef52:	441a      	add	r2, r3
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef5c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ef5e:	e230      	b.n	800f3c2 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef60:	f107 0318 	add.w	r3, r7, #24
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fb fc61 	bl	800a82c <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800ef6a:	69fa      	ldr	r2, [r7, #28]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d044      	beq.n	800effe <USART_SetConfig+0x61e>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d03e      	beq.n	800effa <USART_SetConfig+0x61a>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d038      	beq.n	800eff6 <USART_SetConfig+0x616>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef88:	2b03      	cmp	r3, #3
 800ef8a:	d032      	beq.n	800eff2 <USART_SetConfig+0x612>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef90:	2b04      	cmp	r3, #4
 800ef92:	d02c      	beq.n	800efee <USART_SetConfig+0x60e>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef98:	2b05      	cmp	r3, #5
 800ef9a:	d026      	beq.n	800efea <USART_SetConfig+0x60a>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efa0:	2b06      	cmp	r3, #6
 800efa2:	d020      	beq.n	800efe6 <USART_SetConfig+0x606>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efa8:	2b07      	cmp	r3, #7
 800efaa:	d01a      	beq.n	800efe2 <USART_SetConfig+0x602>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb0:	2b08      	cmp	r3, #8
 800efb2:	d014      	beq.n	800efde <USART_SetConfig+0x5fe>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb8:	2b09      	cmp	r3, #9
 800efba:	d00e      	beq.n	800efda <USART_SetConfig+0x5fa>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc0:	2b0a      	cmp	r3, #10
 800efc2:	d008      	beq.n	800efd6 <USART_SetConfig+0x5f6>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc8:	2b0b      	cmp	r3, #11
 800efca:	d102      	bne.n	800efd2 <USART_SetConfig+0x5f2>
 800efcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efd0:	e016      	b.n	800f000 <USART_SetConfig+0x620>
 800efd2:	2301      	movs	r3, #1
 800efd4:	e014      	b.n	800f000 <USART_SetConfig+0x620>
 800efd6:	2380      	movs	r3, #128	@ 0x80
 800efd8:	e012      	b.n	800f000 <USART_SetConfig+0x620>
 800efda:	2340      	movs	r3, #64	@ 0x40
 800efdc:	e010      	b.n	800f000 <USART_SetConfig+0x620>
 800efde:	2320      	movs	r3, #32
 800efe0:	e00e      	b.n	800f000 <USART_SetConfig+0x620>
 800efe2:	2310      	movs	r3, #16
 800efe4:	e00c      	b.n	800f000 <USART_SetConfig+0x620>
 800efe6:	230c      	movs	r3, #12
 800efe8:	e00a      	b.n	800f000 <USART_SetConfig+0x620>
 800efea:	230a      	movs	r3, #10
 800efec:	e008      	b.n	800f000 <USART_SetConfig+0x620>
 800efee:	2308      	movs	r3, #8
 800eff0:	e006      	b.n	800f000 <USART_SetConfig+0x620>
 800eff2:	2306      	movs	r3, #6
 800eff4:	e004      	b.n	800f000 <USART_SetConfig+0x620>
 800eff6:	2304      	movs	r3, #4
 800eff8:	e002      	b.n	800f000 <USART_SetConfig+0x620>
 800effa:	2302      	movs	r3, #2
 800effc:	e000      	b.n	800f000 <USART_SetConfig+0x620>
 800effe:	2301      	movs	r3, #1
 800f000:	fbb2 f3f3 	udiv	r3, r2, r3
 800f004:	005a      	lsls	r2, r3, #1
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	085b      	lsrs	r3, r3, #1
 800f00c:	441a      	add	r2, r3
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	fbb2 f3f3 	udiv	r3, r2, r3
 800f016:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800f018:	e1d3      	b.n	800f3c2 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f01a:	f107 030c 	add.w	r3, r7, #12
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fb fd58 	bl	800aad4 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800f024:	693a      	ldr	r2, [r7, #16]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d044      	beq.n	800f0b8 <USART_SetConfig+0x6d8>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f032:	2b01      	cmp	r3, #1
 800f034:	d03e      	beq.n	800f0b4 <USART_SetConfig+0x6d4>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	d038      	beq.n	800f0b0 <USART_SetConfig+0x6d0>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f042:	2b03      	cmp	r3, #3
 800f044:	d032      	beq.n	800f0ac <USART_SetConfig+0x6cc>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f04a:	2b04      	cmp	r3, #4
 800f04c:	d02c      	beq.n	800f0a8 <USART_SetConfig+0x6c8>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f052:	2b05      	cmp	r3, #5
 800f054:	d026      	beq.n	800f0a4 <USART_SetConfig+0x6c4>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f05a:	2b06      	cmp	r3, #6
 800f05c:	d020      	beq.n	800f0a0 <USART_SetConfig+0x6c0>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f062:	2b07      	cmp	r3, #7
 800f064:	d01a      	beq.n	800f09c <USART_SetConfig+0x6bc>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f06a:	2b08      	cmp	r3, #8
 800f06c:	d014      	beq.n	800f098 <USART_SetConfig+0x6b8>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f072:	2b09      	cmp	r3, #9
 800f074:	d00e      	beq.n	800f094 <USART_SetConfig+0x6b4>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f07a:	2b0a      	cmp	r3, #10
 800f07c:	d008      	beq.n	800f090 <USART_SetConfig+0x6b0>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f082:	2b0b      	cmp	r3, #11
 800f084:	d102      	bne.n	800f08c <USART_SetConfig+0x6ac>
 800f086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f08a:	e016      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f08c:	2301      	movs	r3, #1
 800f08e:	e014      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f090:	2380      	movs	r3, #128	@ 0x80
 800f092:	e012      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f094:	2340      	movs	r3, #64	@ 0x40
 800f096:	e010      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f098:	2320      	movs	r3, #32
 800f09a:	e00e      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f09c:	2310      	movs	r3, #16
 800f09e:	e00c      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f0a0:	230c      	movs	r3, #12
 800f0a2:	e00a      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f0a4:	230a      	movs	r3, #10
 800f0a6:	e008      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f0a8:	2308      	movs	r3, #8
 800f0aa:	e006      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f0ac:	2306      	movs	r3, #6
 800f0ae:	e004      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f0b0:	2304      	movs	r3, #4
 800f0b2:	e002      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f0b4:	2302      	movs	r3, #2
 800f0b6:	e000      	b.n	800f0ba <USART_SetConfig+0x6da>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0be:	005a      	lsls	r2, r3, #1
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	085b      	lsrs	r3, r3, #1
 800f0c6:	441a      	add	r2, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0d0:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800f0d2:	e176      	b.n	800f3c2 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0d4:	4b89      	ldr	r3, [pc, #548]	@ (800f2fc <USART_SetConfig+0x91c>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f003 0320 	and.w	r3, r3, #32
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d05d      	beq.n	800f19c <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800f0e0:	4b86      	ldr	r3, [pc, #536]	@ (800f2fc <USART_SetConfig+0x91c>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	08db      	lsrs	r3, r3, #3
 800f0e6:	f003 0303 	and.w	r3, r3, #3
 800f0ea:	4a85      	ldr	r2, [pc, #532]	@ (800f300 <USART_SetConfig+0x920>)
 800f0ec:	40da      	lsrs	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d044      	beq.n	800f180 <USART_SetConfig+0x7a0>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d03e      	beq.n	800f17c <USART_SetConfig+0x79c>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f102:	2b02      	cmp	r3, #2
 800f104:	d038      	beq.n	800f178 <USART_SetConfig+0x798>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d032      	beq.n	800f174 <USART_SetConfig+0x794>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f112:	2b04      	cmp	r3, #4
 800f114:	d02c      	beq.n	800f170 <USART_SetConfig+0x790>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f11a:	2b05      	cmp	r3, #5
 800f11c:	d026      	beq.n	800f16c <USART_SetConfig+0x78c>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f122:	2b06      	cmp	r3, #6
 800f124:	d020      	beq.n	800f168 <USART_SetConfig+0x788>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f12a:	2b07      	cmp	r3, #7
 800f12c:	d01a      	beq.n	800f164 <USART_SetConfig+0x784>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f132:	2b08      	cmp	r3, #8
 800f134:	d014      	beq.n	800f160 <USART_SetConfig+0x780>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f13a:	2b09      	cmp	r3, #9
 800f13c:	d00e      	beq.n	800f15c <USART_SetConfig+0x77c>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f142:	2b0a      	cmp	r3, #10
 800f144:	d008      	beq.n	800f158 <USART_SetConfig+0x778>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f14a:	2b0b      	cmp	r3, #11
 800f14c:	d102      	bne.n	800f154 <USART_SetConfig+0x774>
 800f14e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f152:	e016      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f154:	2301      	movs	r3, #1
 800f156:	e014      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f158:	2380      	movs	r3, #128	@ 0x80
 800f15a:	e012      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f15c:	2340      	movs	r3, #64	@ 0x40
 800f15e:	e010      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f160:	2320      	movs	r3, #32
 800f162:	e00e      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f164:	2310      	movs	r3, #16
 800f166:	e00c      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f168:	230c      	movs	r3, #12
 800f16a:	e00a      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f16c:	230a      	movs	r3, #10
 800f16e:	e008      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f170:	2308      	movs	r3, #8
 800f172:	e006      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f174:	2306      	movs	r3, #6
 800f176:	e004      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f178:	2304      	movs	r3, #4
 800f17a:	e002      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f17c:	2302      	movs	r3, #2
 800f17e:	e000      	b.n	800f182 <USART_SetConfig+0x7a2>
 800f180:	2301      	movs	r3, #1
 800f182:	fbb2 f3f3 	udiv	r3, r2, r3
 800f186:	005a      	lsls	r2, r3, #1
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	085b      	lsrs	r3, r3, #1
 800f18e:	441a      	add	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	fbb2 f3f3 	udiv	r3, r2, r3
 800f198:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800f19a:	e112      	b.n	800f3c2 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d044      	beq.n	800f22e <USART_SetConfig+0x84e>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d03e      	beq.n	800f22a <USART_SetConfig+0x84a>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d038      	beq.n	800f226 <USART_SetConfig+0x846>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b8:	2b03      	cmp	r3, #3
 800f1ba:	d032      	beq.n	800f222 <USART_SetConfig+0x842>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c0:	2b04      	cmp	r3, #4
 800f1c2:	d02c      	beq.n	800f21e <USART_SetConfig+0x83e>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c8:	2b05      	cmp	r3, #5
 800f1ca:	d026      	beq.n	800f21a <USART_SetConfig+0x83a>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1d0:	2b06      	cmp	r3, #6
 800f1d2:	d020      	beq.n	800f216 <USART_SetConfig+0x836>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1d8:	2b07      	cmp	r3, #7
 800f1da:	d01a      	beq.n	800f212 <USART_SetConfig+0x832>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1e0:	2b08      	cmp	r3, #8
 800f1e2:	d014      	beq.n	800f20e <USART_SetConfig+0x82e>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1e8:	2b09      	cmp	r3, #9
 800f1ea:	d00e      	beq.n	800f20a <USART_SetConfig+0x82a>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1f0:	2b0a      	cmp	r3, #10
 800f1f2:	d008      	beq.n	800f206 <USART_SetConfig+0x826>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1f8:	2b0b      	cmp	r3, #11
 800f1fa:	d102      	bne.n	800f202 <USART_SetConfig+0x822>
 800f1fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f200:	e016      	b.n	800f230 <USART_SetConfig+0x850>
 800f202:	2301      	movs	r3, #1
 800f204:	e014      	b.n	800f230 <USART_SetConfig+0x850>
 800f206:	2380      	movs	r3, #128	@ 0x80
 800f208:	e012      	b.n	800f230 <USART_SetConfig+0x850>
 800f20a:	2340      	movs	r3, #64	@ 0x40
 800f20c:	e010      	b.n	800f230 <USART_SetConfig+0x850>
 800f20e:	2320      	movs	r3, #32
 800f210:	e00e      	b.n	800f230 <USART_SetConfig+0x850>
 800f212:	2310      	movs	r3, #16
 800f214:	e00c      	b.n	800f230 <USART_SetConfig+0x850>
 800f216:	230c      	movs	r3, #12
 800f218:	e00a      	b.n	800f230 <USART_SetConfig+0x850>
 800f21a:	230a      	movs	r3, #10
 800f21c:	e008      	b.n	800f230 <USART_SetConfig+0x850>
 800f21e:	2308      	movs	r3, #8
 800f220:	e006      	b.n	800f230 <USART_SetConfig+0x850>
 800f222:	2306      	movs	r3, #6
 800f224:	e004      	b.n	800f230 <USART_SetConfig+0x850>
 800f226:	2304      	movs	r3, #4
 800f228:	e002      	b.n	800f230 <USART_SetConfig+0x850>
 800f22a:	2302      	movs	r3, #2
 800f22c:	e000      	b.n	800f230 <USART_SetConfig+0x850>
 800f22e:	2301      	movs	r3, #1
 800f230:	4a33      	ldr	r2, [pc, #204]	@ (800f300 <USART_SetConfig+0x920>)
 800f232:	fbb2 f3f3 	udiv	r3, r2, r3
 800f236:	005a      	lsls	r2, r3, #1
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	085b      	lsrs	r3, r3, #1
 800f23e:	441a      	add	r2, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	fbb2 f3f3 	udiv	r3, r2, r3
 800f248:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f24a:	e0ba      	b.n	800f3c2 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f250:	2b00      	cmp	r3, #0
 800f252:	d044      	beq.n	800f2de <USART_SetConfig+0x8fe>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d03e      	beq.n	800f2da <USART_SetConfig+0x8fa>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f260:	2b02      	cmp	r3, #2
 800f262:	d038      	beq.n	800f2d6 <USART_SetConfig+0x8f6>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f268:	2b03      	cmp	r3, #3
 800f26a:	d032      	beq.n	800f2d2 <USART_SetConfig+0x8f2>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f270:	2b04      	cmp	r3, #4
 800f272:	d02c      	beq.n	800f2ce <USART_SetConfig+0x8ee>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f278:	2b05      	cmp	r3, #5
 800f27a:	d026      	beq.n	800f2ca <USART_SetConfig+0x8ea>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f280:	2b06      	cmp	r3, #6
 800f282:	d020      	beq.n	800f2c6 <USART_SetConfig+0x8e6>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f288:	2b07      	cmp	r3, #7
 800f28a:	d01a      	beq.n	800f2c2 <USART_SetConfig+0x8e2>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f290:	2b08      	cmp	r3, #8
 800f292:	d014      	beq.n	800f2be <USART_SetConfig+0x8de>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f298:	2b09      	cmp	r3, #9
 800f29a:	d00e      	beq.n	800f2ba <USART_SetConfig+0x8da>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2a0:	2b0a      	cmp	r3, #10
 800f2a2:	d008      	beq.n	800f2b6 <USART_SetConfig+0x8d6>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2a8:	2b0b      	cmp	r3, #11
 800f2aa:	d102      	bne.n	800f2b2 <USART_SetConfig+0x8d2>
 800f2ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f2b0:	e016      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e014      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2b6:	2380      	movs	r3, #128	@ 0x80
 800f2b8:	e012      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2ba:	2340      	movs	r3, #64	@ 0x40
 800f2bc:	e010      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2be:	2320      	movs	r3, #32
 800f2c0:	e00e      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2c2:	2310      	movs	r3, #16
 800f2c4:	e00c      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2c6:	230c      	movs	r3, #12
 800f2c8:	e00a      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2ca:	230a      	movs	r3, #10
 800f2cc:	e008      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2ce:	2308      	movs	r3, #8
 800f2d0:	e006      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2d2:	2306      	movs	r3, #6
 800f2d4:	e004      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2d6:	2304      	movs	r3, #4
 800f2d8:	e002      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2da:	2302      	movs	r3, #2
 800f2dc:	e000      	b.n	800f2e0 <USART_SetConfig+0x900>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	4a08      	ldr	r2, [pc, #32]	@ (800f304 <USART_SetConfig+0x924>)
 800f2e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2e6:	005a      	lsls	r2, r3, #1
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	085b      	lsrs	r3, r3, #1
 800f2ee:	441a      	add	r2, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2f8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f2fa:	e062      	b.n	800f3c2 <USART_SetConfig+0x9e2>
 800f2fc:	58024400 	.word	0x58024400
 800f300:	03d09000 	.word	0x03d09000
 800f304:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d044      	beq.n	800f39a <USART_SetConfig+0x9ba>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f314:	2b01      	cmp	r3, #1
 800f316:	d03e      	beq.n	800f396 <USART_SetConfig+0x9b6>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f31c:	2b02      	cmp	r3, #2
 800f31e:	d038      	beq.n	800f392 <USART_SetConfig+0x9b2>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f324:	2b03      	cmp	r3, #3
 800f326:	d032      	beq.n	800f38e <USART_SetConfig+0x9ae>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f32c:	2b04      	cmp	r3, #4
 800f32e:	d02c      	beq.n	800f38a <USART_SetConfig+0x9aa>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f334:	2b05      	cmp	r3, #5
 800f336:	d026      	beq.n	800f386 <USART_SetConfig+0x9a6>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f33c:	2b06      	cmp	r3, #6
 800f33e:	d020      	beq.n	800f382 <USART_SetConfig+0x9a2>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f344:	2b07      	cmp	r3, #7
 800f346:	d01a      	beq.n	800f37e <USART_SetConfig+0x99e>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f34c:	2b08      	cmp	r3, #8
 800f34e:	d014      	beq.n	800f37a <USART_SetConfig+0x99a>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f354:	2b09      	cmp	r3, #9
 800f356:	d00e      	beq.n	800f376 <USART_SetConfig+0x996>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f35c:	2b0a      	cmp	r3, #10
 800f35e:	d008      	beq.n	800f372 <USART_SetConfig+0x992>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f364:	2b0b      	cmp	r3, #11
 800f366:	d102      	bne.n	800f36e <USART_SetConfig+0x98e>
 800f368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f36c:	e016      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f36e:	2301      	movs	r3, #1
 800f370:	e014      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f372:	2380      	movs	r3, #128	@ 0x80
 800f374:	e012      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f376:	2340      	movs	r3, #64	@ 0x40
 800f378:	e010      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f37a:	2320      	movs	r3, #32
 800f37c:	e00e      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f37e:	2310      	movs	r3, #16
 800f380:	e00c      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f382:	230c      	movs	r3, #12
 800f384:	e00a      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f386:	230a      	movs	r3, #10
 800f388:	e008      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f38a:	2308      	movs	r3, #8
 800f38c:	e006      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f38e:	2306      	movs	r3, #6
 800f390:	e004      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f392:	2304      	movs	r3, #4
 800f394:	e002      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f396:	2302      	movs	r3, #2
 800f398:	e000      	b.n	800f39c <USART_SetConfig+0x9bc>
 800f39a:	2301      	movs	r3, #1
 800f39c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800f3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3a4:	005a      	lsls	r2, r3, #1
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	085b      	lsrs	r3, r3, #1
 800f3ac:	441a      	add	r2, r3
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3b6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f3b8:	e003      	b.n	800f3c2 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800f3c0:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c4:	2b0f      	cmp	r3, #15
 800f3c6:	d916      	bls.n	800f3f6 <USART_SetConfig+0xa16>
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3ce:	d212      	bcs.n	800f3f6 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	f023 030f 	bic.w	r3, r3, #15
 800f3d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3dc:	085b      	lsrs	r3, r3, #1
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	f003 0307 	and.w	r3, r3, #7
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f3f2:	60da      	str	r2, [r3, #12]
 800f3f4:	e002      	b.n	800f3fc <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2201      	movs	r2, #1
 800f400:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2201      	movs	r2, #1
 800f406:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2200      	movs	r2, #0
 800f412:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800f414:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3738      	adds	r7, #56	@ 0x38
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b086      	sub	sp, #24
 800f424:	af02      	add	r7, sp, #8
 800f426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f42e:	f7f5 fad3 	bl	80049d8 <HAL_GetTick>
 800f432:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f003 0308 	and.w	r3, r3, #8
 800f43e:	2b08      	cmp	r3, #8
 800f440:	d10e      	bne.n	800f460 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800f442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2200      	movs	r2, #0
 800f44c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7ff fa8f 	bl	800e974 <USART_WaitOnFlagUntilTimeout>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f45c:	2303      	movs	r3, #3
 800f45e:	e01e      	b.n	800f49e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f003 0304 	and.w	r3, r3, #4
 800f46a:	2b04      	cmp	r3, #4
 800f46c:	d10e      	bne.n	800f48c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800f46e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2200      	movs	r2, #0
 800f478:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff fa79 	bl	800e974 <USART_WaitOnFlagUntilTimeout>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f488:	2303      	movs	r3, #3
 800f48a:	e008      	b.n	800f49e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2201      	movs	r2, #1
 800f490:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3710      	adds	r7, #16
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800f4a6:	b480      	push	{r7}
 800f4a8:	b085      	sub	sp, #20
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d101      	bne.n	800f4bc <HAL_USARTEx_EnableSlaveMode+0x16>
 800f4b8:	2302      	movs	r3, #2
 800f4ba:	e043      	b.n	800f544 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f022 0201 	bic.w	r2, r2, #1
 800f4e2:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	685a      	ldr	r2, [r3, #4]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f4f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	689a      	ldr	r2, [r3, #8]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f502:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	685a      	ldr	r2, [r3, #4]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f042 0201 	orr.w	r2, r2, #1
 800f512:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	68fa      	ldr	r2, [r7, #12]
 800f51a:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2201      	movs	r2, #1
 800f520:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2201      	movs	r2, #1
 800f526:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f042 0201 	orr.w	r2, r2, #1
 800f538:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2200      	movs	r2, #0
 800f53e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	3714      	adds	r7, #20
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800f550:	b480      	push	{r7}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800f560:	2b01      	cmp	r3, #1
 800f562:	d101      	bne.n	800f568 <HAL_USARTEx_ConfigNSS+0x18>
 800f564:	2302      	movs	r3, #2
 800f566:	e02a      	b.n	800f5be <HAL_USARTEx_ConfigNSS+0x6e>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2201      	movs	r2, #1
 800f56c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2202      	movs	r2, #2
 800f574:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f022 0201 	bic.w	r2, r2, #1
 800f58e:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	f023 0108 	bic.w	r1, r3, #8
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	430a      	orrs	r2, r1
 800f5a2:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3714      	adds	r7, #20
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr

0800f5ca <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800f5ca:	b480      	push	{r7}
 800f5cc:	b085      	sub	sp, #20
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d101      	bne.n	800f5e0 <HAL_USARTEx_DisableFifoMode+0x16>
 800f5dc:	2302      	movs	r3, #2
 800f5de:	e027      	b.n	800f630 <HAL_USARTEx_DisableFifoMode+0x66>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2202      	movs	r2, #2
 800f5ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	681a      	ldr	r2, [r3, #0]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f022 0201 	bic.w	r2, r2, #1
 800f606:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f60e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2200      	movs	r2, #0
 800f614:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	68fa      	ldr	r2, [r7, #12]
 800f61c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2201      	movs	r2, #1
 800f622:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2200      	movs	r2, #0
 800f62a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f62e:	2300      	movs	r3, #0
}
 800f630:	4618      	mov	r0, r3
 800f632:	3714      	adds	r7, #20
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr

0800f63c <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d101      	bne.n	800f654 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800f650:	2302      	movs	r3, #2
 800f652:	e02d      	b.n	800f6b0 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2201      	movs	r2, #1
 800f658:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2202      	movs	r2, #2
 800f660:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f022 0201 	bic.w	r2, r2, #1
 800f67a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	689b      	ldr	r3, [r3, #8]
 800f682:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	683a      	ldr	r2, [r7, #0]
 800f68c:	430a      	orrs	r2, r1
 800f68e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f84f 	bl	800f734 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	68fa      	ldr	r2, [r7, #12]
 800f69c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f6ae:	2300      	movs	r3, #0
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3710      	adds	r7, #16
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	d101      	bne.n	800f6d0 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800f6cc:	2302      	movs	r3, #2
 800f6ce:	e02d      	b.n	800f72c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2202      	movs	r2, #2
 800f6dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f022 0201 	bic.w	r2, r2, #1
 800f6f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	689b      	ldr	r3, [r3, #8]
 800f6fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	430a      	orrs	r2, r1
 800f70a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 f811 	bl	800f734 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	68fa      	ldr	r2, [r7, #12]
 800f718:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2201      	movs	r2, #1
 800f71e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800f734:	b480      	push	{r7}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f740:	2b00      	cmp	r3, #0
 800f742:	d106      	bne.n	800f752 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2201      	movs	r2, #1
 800f748:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2201      	movs	r2, #1
 800f74e:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f750:	e02f      	b.n	800f7b2 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f752:	2310      	movs	r3, #16
 800f754:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f756:	2310      	movs	r3, #16
 800f758:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800f760:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800f762:	b2db      	uxtb	r3, r3
 800f764:	f003 0307 	and.w	r3, r3, #7
 800f768:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800f770:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800f772:	b2db      	uxtb	r3, r3
 800f774:	f003 0307 	and.w	r3, r3, #7
 800f778:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f77a:	7bbb      	ldrb	r3, [r7, #14]
 800f77c:	7b3a      	ldrb	r2, [r7, #12]
 800f77e:	4910      	ldr	r1, [pc, #64]	@ (800f7c0 <USARTEx_SetNbDataToProcess+0x8c>)
 800f780:	5c8a      	ldrb	r2, [r1, r2]
 800f782:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800f786:	7b3a      	ldrb	r2, [r7, #12]
 800f788:	490e      	ldr	r1, [pc, #56]	@ (800f7c4 <USARTEx_SetNbDataToProcess+0x90>)
 800f78a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f78c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f790:	b29a      	uxth	r2, r3
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f796:	7bfb      	ldrb	r3, [r7, #15]
 800f798:	7b7a      	ldrb	r2, [r7, #13]
 800f79a:	4909      	ldr	r1, [pc, #36]	@ (800f7c0 <USARTEx_SetNbDataToProcess+0x8c>)
 800f79c:	5c8a      	ldrb	r2, [r1, r2]
 800f79e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800f7a2:	7b7a      	ldrb	r2, [r7, #13]
 800f7a4:	4907      	ldr	r1, [pc, #28]	@ (800f7c4 <USARTEx_SetNbDataToProcess+0x90>)
 800f7a6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800f7b2:	bf00      	nop
 800f7b4:	3714      	adds	r7, #20
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop
 800f7c0:	080191b4 	.word	0x080191b4
 800f7c4:	080191bc 	.word	0x080191bc

0800f7c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f7c8:	b084      	sub	sp, #16
 800f7ca:	b480      	push	{r7}
 800f7cc:	b085      	sub	sp, #20
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
 800f7d2:	f107 001c 	add.w	r0, r7, #28
 800f7d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800f7de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800f7e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800f7e2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800f7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800f7e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800f7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800f7ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800f7ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	685a      	ldr	r2, [r3, #4]
 800f7fa:	4b07      	ldr	r3, [pc, #28]	@ (800f818 <SDMMC_Init+0x50>)
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	431a      	orrs	r2, r3
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3714      	adds	r7, #20
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	b004      	add	sp, #16
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	ffc02c00 	.word	0xffc02c00

0800f81c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	370c      	adds	r7, #12
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr

0800f836 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800f836:	b480      	push	{r7}
 800f838:	b083      	sub	sp, #12
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	6078      	str	r0, [r7, #4]
 800f83e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f84a:	2300      	movs	r3, #0
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f043 0203 	orr.w	r2, r3, #3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	370c      	adds	r7, #12
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr

0800f87a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f87a:	b480      	push	{r7}
 800f87c:	b083      	sub	sp, #12
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f003 0303 	and.w	r3, r3, #3
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	370c      	adds	r7, #12
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
	...

0800f898 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f8b6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800f8bc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800f8c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f8c4:	68fa      	ldr	r2, [r7, #12]
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	68da      	ldr	r2, [r3, #12]
 800f8ce:	4b06      	ldr	r3, [pc, #24]	@ (800f8e8 <SDMMC_SendCommand+0x50>)
 800f8d0:	4013      	ands	r3, r2
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	431a      	orrs	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f8da:	2300      	movs	r3, #0
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3714      	adds	r7, #20
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr
 800f8e8:	fffee0c0 	.word	0xfffee0c0

0800f8ec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	691b      	ldr	r3, [r3, #16]
 800f8f8:	b2db      	uxtb	r3, r3
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f906:	b480      	push	{r7}
 800f908:	b085      	sub	sp, #20
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	3314      	adds	r3, #20
 800f914:	461a      	mov	r2, r3
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	4413      	add	r3, r2
 800f91a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
}
 800f920:	4618      	mov	r0, r3
 800f922:	3714      	adds	r7, #20
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b085      	sub	sp, #20
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f936:	2300      	movs	r3, #0
 800f938:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	685a      	ldr	r2, [r3, #4]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f952:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800f958:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800f95e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	4313      	orrs	r3, r2
 800f964:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f96a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	431a      	orrs	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f976:	2300      	movs	r3, #0

}
 800f978:	4618      	mov	r0, r3
 800f97a:	3714      	adds	r7, #20
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b088      	sub	sp, #32
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f992:	2310      	movs	r3, #16
 800f994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f996:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f99a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f99c:	2300      	movs	r3, #0
 800f99e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f9a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9a6:	f107 0308 	add.w	r3, r7, #8
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f7ff ff73 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f9b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f9b6:	2110      	movs	r1, #16
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 fa5f 	bl	800fe7c <SDMMC_GetCmdResp1>
 800f9be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9c0:	69fb      	ldr	r3, [r7, #28]
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3720      	adds	r7, #32
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b088      	sub	sp, #32
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
 800f9d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f9d8:	2311      	movs	r3, #17
 800f9da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f9e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f9ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9ec:	f107 0308 	add.w	r3, r7, #8
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f7ff ff50 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f9f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f9fc:	2111      	movs	r1, #17
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 fa3c 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fa04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa06:	69fb      	ldr	r3, [r7, #28]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3720      	adds	r7, #32
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b088      	sub	sp, #32
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fa1e:	2312      	movs	r3, #18
 800fa20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fa30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa32:	f107 0308 	add.w	r3, r7, #8
 800fa36:	4619      	mov	r1, r3
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7ff ff2d 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fa3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa42:	2112      	movs	r1, #18
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 fa19 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fa4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa4c:	69fb      	ldr	r3, [r7, #28]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3720      	adds	r7, #32
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b088      	sub	sp, #32
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
 800fa5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fa64:	2318      	movs	r3, #24
 800fa66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fa76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa78:	f107 0308 	add.w	r3, r7, #8
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f7ff ff0a 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fa84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa88:	2118      	movs	r1, #24
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 f9f6 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fa90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa92:	69fb      	ldr	r3, [r7, #28]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3720      	adds	r7, #32
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b088      	sub	sp, #32
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800faaa:	2319      	movs	r3, #25
 800faac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800faae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fab4:	2300      	movs	r3, #0
 800fab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fabc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fabe:	f107 0308 	add.w	r3, r7, #8
 800fac2:	4619      	mov	r1, r3
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f7ff fee7 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800faca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800face:	2119      	movs	r1, #25
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 f9d3 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fad8:	69fb      	ldr	r3, [r7, #28]
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3720      	adds	r7, #32
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
	...

0800fae4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b088      	sub	sp, #32
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800faec:	2300      	movs	r3, #0
 800faee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800faf0:	230c      	movs	r3, #12
 800faf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800faf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800faf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fafa:	2300      	movs	r3, #0
 800fafc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fafe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb02:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb1c:	f107 0308 	add.w	r3, r7, #8
 800fb20:	4619      	mov	r1, r3
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7ff feb8 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fb28:	4a0b      	ldr	r2, [pc, #44]	@ (800fb58 <SDMMC_CmdStopTransfer+0x74>)
 800fb2a:	210c      	movs	r1, #12
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 f9a5 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fb32:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fb46:	d101      	bne.n	800fb4c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fb4c:	69fb      	ldr	r3, [r7, #28]
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3720      	adds	r7, #32
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	bf00      	nop
 800fb58:	05f5e100 	.word	0x05f5e100

0800fb5c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b088      	sub	sp, #32
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fb6a:	2307      	movs	r3, #7
 800fb6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb74:	2300      	movs	r3, #0
 800fb76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb7e:	f107 0308 	add.w	r3, r7, #8
 800fb82:	4619      	mov	r1, r3
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7ff fe87 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fb8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb8e:	2107      	movs	r1, #7
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 f973 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fb96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb98:	69fb      	ldr	r3, [r7, #28]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3720      	adds	r7, #32
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b088      	sub	sp, #32
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fbbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbc0:	f107 0308 	add.w	r3, r7, #8
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7ff fe66 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fb97 	bl	8010300 <SDMMC_GetCmdError>
 800fbd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbd4:	69fb      	ldr	r3, [r7, #28]
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3720      	adds	r7, #32
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b088      	sub	sp, #32
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fbe6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fbea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fbec:	2308      	movs	r3, #8
 800fbee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fbf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fbfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc00:	f107 0308 	add.w	r3, r7, #8
 800fc04:	4619      	mov	r1, r3
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7ff fe46 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f000 fb29 	bl	8010264 <SDMMC_GetCmdResp7>
 800fc12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc14:	69fb      	ldr	r3, [r7, #28]
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3720      	adds	r7, #32
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b088      	sub	sp, #32
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
 800fc26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fc2c:	2337      	movs	r3, #55	@ 0x37
 800fc2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc36:	2300      	movs	r3, #0
 800fc38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc40:	f107 0308 	add.w	r3, r7, #8
 800fc44:	4619      	mov	r1, r3
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f7ff fe26 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fc4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc50:	2137      	movs	r1, #55	@ 0x37
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 f912 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fc58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc5a:	69fb      	ldr	r3, [r7, #28]
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3720      	adds	r7, #32
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b088      	sub	sp, #32
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fc72:	2329      	movs	r3, #41	@ 0x29
 800fc74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc86:	f107 0308 	add.w	r3, r7, #8
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f7ff fe03 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 fa2e 	bl	80100f4 <SDMMC_GetCmdResp3>
 800fc98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc9a:	69fb      	ldr	r3, [r7, #28]
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3720      	adds	r7, #32
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b088      	sub	sp, #32
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fcb2:	2306      	movs	r3, #6
 800fcb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fcc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcc6:	f107 0308 	add.w	r3, r7, #8
 800fcca:	4619      	mov	r1, r3
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f7ff fde3 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800fcd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcd6:	2106      	movs	r1, #6
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 f8cf 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fcde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fce0:	69fb      	ldr	r3, [r7, #28]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3720      	adds	r7, #32
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}

0800fcea <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800fcea:	b580      	push	{r7, lr}
 800fcec:	b088      	sub	sp, #32
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fcf6:	2333      	movs	r3, #51	@ 0x33
 800fcf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd00:	2300      	movs	r3, #0
 800fd02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd0a:	f107 0308 	add.w	r3, r7, #8
 800fd0e:	4619      	mov	r1, r3
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f7ff fdc1 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800fd16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd1a:	2133      	movs	r1, #51	@ 0x33
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 f8ad 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fd22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd24:	69fb      	ldr	r3, [r7, #28]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3720      	adds	r7, #32
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b088      	sub	sp, #32
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fd36:	2300      	movs	r3, #0
 800fd38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fd3a:	2302      	movs	r3, #2
 800fd3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fd3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800fd42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd44:	2300      	movs	r3, #0
 800fd46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd4e:	f107 0308 	add.w	r3, r7, #8
 800fd52:	4619      	mov	r1, r3
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7ff fd9f 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 f980 	bl	8010060 <SDMMC_GetCmdResp2>
 800fd60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd62:	69fb      	ldr	r3, [r7, #28]
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3720      	adds	r7, #32
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b088      	sub	sp, #32
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fd7a:	2309      	movs	r3, #9
 800fd7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fd7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800fd82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd84:	2300      	movs	r3, #0
 800fd86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd8e:	f107 0308 	add.w	r3, r7, #8
 800fd92:	4619      	mov	r1, r3
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7ff fd7f 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 f960 	bl	8010060 <SDMMC_GetCmdResp2>
 800fda0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fda2:	69fb      	ldr	r3, [r7, #28]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3720      	adds	r7, #32
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b088      	sub	sp, #32
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fdba:	2303      	movs	r3, #3
 800fdbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fdc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fdcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdce:	f107 0308 	add.w	r3, r7, #8
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7ff fd5f 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fdda:	683a      	ldr	r2, [r7, #0]
 800fddc:	2103      	movs	r1, #3
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 f9c8 	bl	8010174 <SDMMC_GetCmdResp6>
 800fde4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fde6:	69fb      	ldr	r3, [r7, #28]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3720      	adds	r7, #32
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b088      	sub	sp, #32
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fdfe:	230d      	movs	r3, #13
 800fe00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe12:	f107 0308 	add.w	r3, r7, #8
 800fe16:	4619      	mov	r1, r3
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7ff fd3d 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800fe1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe22:	210d      	movs	r1, #13
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 f829 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fe2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe2c:	69fb      	ldr	r3, [r7, #28]
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3720      	adds	r7, #32
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800fe36:	b580      	push	{r7, lr}
 800fe38:	b088      	sub	sp, #32
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800fe42:	230d      	movs	r3, #13
 800fe44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe56:	f107 0308 	add.w	r3, r7, #8
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7ff fd1b 	bl	800f898 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800fe62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe66:	210d      	movs	r1, #13
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 f807 	bl	800fe7c <SDMMC_GetCmdResp1>
 800fe6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe70:	69fb      	ldr	r3, [r7, #28]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3720      	adds	r7, #32
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
	...

0800fe7c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b088      	sub	sp, #32
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	460b      	mov	r3, r1
 800fe86:	607a      	str	r2, [r7, #4]
 800fe88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fe8a:	4b70      	ldr	r3, [pc, #448]	@ (801004c <SDMMC_GetCmdResp1+0x1d0>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a70      	ldr	r2, [pc, #448]	@ (8010050 <SDMMC_GetCmdResp1+0x1d4>)
 800fe90:	fba2 2303 	umull	r2, r3, r2, r3
 800fe94:	0a5a      	lsrs	r2, r3, #9
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	fb02 f303 	mul.w	r3, r2, r3
 800fe9c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	1e5a      	subs	r2, r3, #1
 800fea2:	61fa      	str	r2, [r7, #28]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d102      	bne.n	800feae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fea8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800feac:	e0c9      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800feb2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800feb4:	69ba      	ldr	r2, [r7, #24]
 800feb6:	4b67      	ldr	r3, [pc, #412]	@ (8010054 <SDMMC_GetCmdResp1+0x1d8>)
 800feb8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800feba:	2b00      	cmp	r3, #0
 800febc:	d0ef      	beq.n	800fe9e <SDMMC_GetCmdResp1+0x22>
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1ea      	bne.n	800fe9e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fecc:	f003 0304 	and.w	r3, r3, #4
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d004      	beq.n	800fede <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2204      	movs	r2, #4
 800fed8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800feda:	2304      	movs	r3, #4
 800fedc:	e0b1      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fee2:	f003 0301 	and.w	r3, r3, #1
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d004      	beq.n	800fef4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2201      	movs	r2, #1
 800feee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fef0:	2301      	movs	r3, #1
 800fef2:	e0a6      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	4a58      	ldr	r2, [pc, #352]	@ (8010058 <SDMMC_GetCmdResp1+0x1dc>)
 800fef8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fefa:	68f8      	ldr	r0, [r7, #12]
 800fefc:	f7ff fcf6 	bl	800f8ec <SDMMC_GetCommandResponse>
 800ff00:	4603      	mov	r3, r0
 800ff02:	461a      	mov	r2, r3
 800ff04:	7afb      	ldrb	r3, [r7, #11]
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d001      	beq.n	800ff0e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	e099      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ff0e:	2100      	movs	r1, #0
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7ff fcf8 	bl	800f906 <SDMMC_GetResponse>
 800ff16:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ff18:	697a      	ldr	r2, [r7, #20]
 800ff1a:	4b50      	ldr	r3, [pc, #320]	@ (801005c <SDMMC_GetCmdResp1+0x1e0>)
 800ff1c:	4013      	ands	r3, r2
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d101      	bne.n	800ff26 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ff22:	2300      	movs	r3, #0
 800ff24:	e08d      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	da02      	bge.n	800ff32 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ff2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ff30:	e087      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d001      	beq.n	800ff40 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ff3c:	2340      	movs	r3, #64	@ 0x40
 800ff3e:	e080      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d001      	beq.n	800ff4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ff4a:	2380      	movs	r3, #128	@ 0x80
 800ff4c:	e079      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d002      	beq.n	800ff5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ff58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff5c:	e071      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d002      	beq.n	800ff6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ff68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff6c:	e069      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d002      	beq.n	800ff7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ff78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff7c:	e061      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d002      	beq.n	800ff8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ff88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ff8c:	e059      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d002      	beq.n	800ff9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ff98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff9c:	e051      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d002      	beq.n	800ffae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ffa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ffac:	e049      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d002      	beq.n	800ffbe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ffb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ffbc:	e041      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d002      	beq.n	800ffce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ffc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ffcc:	e039      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d002      	beq.n	800ffde <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ffd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ffdc:	e031      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d002      	beq.n	800ffee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ffe8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ffec:	e029      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d002      	beq.n	800fffe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fff8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fffc:	e021      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010004:	2b00      	cmp	r3, #0
 8010006:	d002      	beq.n	801000e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010008:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801000c:	e019      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010014:	2b00      	cmp	r3, #0
 8010016:	d002      	beq.n	801001e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010018:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801001c:	e011      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010024:	2b00      	cmp	r3, #0
 8010026:	d002      	beq.n	801002e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010028:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801002c:	e009      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	f003 0308 	and.w	r3, r3, #8
 8010034:	2b00      	cmp	r3, #0
 8010036:	d002      	beq.n	801003e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010038:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801003c:	e001      	b.n	8010042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801003e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010042:	4618      	mov	r0, r3
 8010044:	3720      	adds	r7, #32
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	24000024 	.word	0x24000024
 8010050:	10624dd3 	.word	0x10624dd3
 8010054:	00200045 	.word	0x00200045
 8010058:	002000c5 	.word	0x002000c5
 801005c:	fdffe008 	.word	0xfdffe008

08010060 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010060:	b480      	push	{r7}
 8010062:	b085      	sub	sp, #20
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010068:	4b1f      	ldr	r3, [pc, #124]	@ (80100e8 <SDMMC_GetCmdResp2+0x88>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4a1f      	ldr	r2, [pc, #124]	@ (80100ec <SDMMC_GetCmdResp2+0x8c>)
 801006e:	fba2 2303 	umull	r2, r3, r2, r3
 8010072:	0a5b      	lsrs	r3, r3, #9
 8010074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010078:	fb02 f303 	mul.w	r3, r2, r3
 801007c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	1e5a      	subs	r2, r3, #1
 8010082:	60fa      	str	r2, [r7, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d102      	bne.n	801008e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010088:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801008c:	e026      	b.n	80100dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010092:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801009a:	2b00      	cmp	r3, #0
 801009c:	d0ef      	beq.n	801007e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d1ea      	bne.n	801007e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100ac:	f003 0304 	and.w	r3, r3, #4
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d004      	beq.n	80100be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2204      	movs	r2, #4
 80100b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80100ba:	2304      	movs	r3, #4
 80100bc:	e00e      	b.n	80100dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100c2:	f003 0301 	and.w	r3, r3, #1
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d004      	beq.n	80100d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2201      	movs	r2, #1
 80100ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100d0:	2301      	movs	r3, #1
 80100d2:	e003      	b.n	80100dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	4a06      	ldr	r2, [pc, #24]	@ (80100f0 <SDMMC_GetCmdResp2+0x90>)
 80100d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80100da:	2300      	movs	r3, #0
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3714      	adds	r7, #20
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr
 80100e8:	24000024 	.word	0x24000024
 80100ec:	10624dd3 	.word	0x10624dd3
 80100f0:	002000c5 	.word	0x002000c5

080100f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b085      	sub	sp, #20
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80100fc:	4b1a      	ldr	r3, [pc, #104]	@ (8010168 <SDMMC_GetCmdResp3+0x74>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4a1a      	ldr	r2, [pc, #104]	@ (801016c <SDMMC_GetCmdResp3+0x78>)
 8010102:	fba2 2303 	umull	r2, r3, r2, r3
 8010106:	0a5b      	lsrs	r3, r3, #9
 8010108:	f241 3288 	movw	r2, #5000	@ 0x1388
 801010c:	fb02 f303 	mul.w	r3, r2, r3
 8010110:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	1e5a      	subs	r2, r3, #1
 8010116:	60fa      	str	r2, [r7, #12]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d102      	bne.n	8010122 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801011c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010120:	e01b      	b.n	801015a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010126:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801012e:	2b00      	cmp	r3, #0
 8010130:	d0ef      	beq.n	8010112 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1ea      	bne.n	8010112 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010140:	f003 0304 	and.w	r3, r3, #4
 8010144:	2b00      	cmp	r3, #0
 8010146:	d004      	beq.n	8010152 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2204      	movs	r2, #4
 801014c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801014e:	2304      	movs	r3, #4
 8010150:	e003      	b.n	801015a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4a06      	ldr	r2, [pc, #24]	@ (8010170 <SDMMC_GetCmdResp3+0x7c>)
 8010156:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	3714      	adds	r7, #20
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	24000024 	.word	0x24000024
 801016c:	10624dd3 	.word	0x10624dd3
 8010170:	002000c5 	.word	0x002000c5

08010174 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b088      	sub	sp, #32
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	460b      	mov	r3, r1
 801017e:	607a      	str	r2, [r7, #4]
 8010180:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010182:	4b35      	ldr	r3, [pc, #212]	@ (8010258 <SDMMC_GetCmdResp6+0xe4>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4a35      	ldr	r2, [pc, #212]	@ (801025c <SDMMC_GetCmdResp6+0xe8>)
 8010188:	fba2 2303 	umull	r2, r3, r2, r3
 801018c:	0a5b      	lsrs	r3, r3, #9
 801018e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010192:	fb02 f303 	mul.w	r3, r2, r3
 8010196:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	1e5a      	subs	r2, r3, #1
 801019c:	61fa      	str	r2, [r7, #28]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d102      	bne.n	80101a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80101a6:	e052      	b.n	801024e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101ac:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d0ef      	beq.n	8010198 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80101b8:	69bb      	ldr	r3, [r7, #24]
 80101ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1ea      	bne.n	8010198 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101c6:	f003 0304 	and.w	r3, r3, #4
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d004      	beq.n	80101d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2204      	movs	r2, #4
 80101d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80101d4:	2304      	movs	r3, #4
 80101d6:	e03a      	b.n	801024e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101dc:	f003 0301 	and.w	r3, r3, #1
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d004      	beq.n	80101ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2201      	movs	r2, #1
 80101e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80101ea:	2301      	movs	r3, #1
 80101ec:	e02f      	b.n	801024e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f7ff fb7c 	bl	800f8ec <SDMMC_GetCommandResponse>
 80101f4:	4603      	mov	r3, r0
 80101f6:	461a      	mov	r2, r3
 80101f8:	7afb      	ldrb	r3, [r7, #11]
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d001      	beq.n	8010202 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80101fe:	2301      	movs	r3, #1
 8010200:	e025      	b.n	801024e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	4a16      	ldr	r2, [pc, #88]	@ (8010260 <SDMMC_GetCmdResp6+0xec>)
 8010206:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010208:	2100      	movs	r1, #0
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f7ff fb7b 	bl	800f906 <SDMMC_GetResponse>
 8010210:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010218:	2b00      	cmp	r3, #0
 801021a:	d106      	bne.n	801022a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	0c1b      	lsrs	r3, r3, #16
 8010220:	b29a      	uxth	r2, r3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010226:	2300      	movs	r3, #0
 8010228:	e011      	b.n	801024e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010230:	2b00      	cmp	r3, #0
 8010232:	d002      	beq.n	801023a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010234:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010238:	e009      	b.n	801024e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010240:	2b00      	cmp	r3, #0
 8010242:	d002      	beq.n	801024a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010248:	e001      	b.n	801024e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801024a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801024e:	4618      	mov	r0, r3
 8010250:	3720      	adds	r7, #32
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	24000024 	.word	0x24000024
 801025c:	10624dd3 	.word	0x10624dd3
 8010260:	002000c5 	.word	0x002000c5

08010264 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010264:	b480      	push	{r7}
 8010266:	b085      	sub	sp, #20
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801026c:	4b22      	ldr	r3, [pc, #136]	@ (80102f8 <SDMMC_GetCmdResp7+0x94>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4a22      	ldr	r2, [pc, #136]	@ (80102fc <SDMMC_GetCmdResp7+0x98>)
 8010272:	fba2 2303 	umull	r2, r3, r2, r3
 8010276:	0a5b      	lsrs	r3, r3, #9
 8010278:	f241 3288 	movw	r2, #5000	@ 0x1388
 801027c:	fb02 f303 	mul.w	r3, r2, r3
 8010280:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	1e5a      	subs	r2, r3, #1
 8010286:	60fa      	str	r2, [r7, #12]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d102      	bne.n	8010292 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801028c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010290:	e02c      	b.n	80102ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010296:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d0ef      	beq.n	8010282 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d1ea      	bne.n	8010282 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102b0:	f003 0304 	and.w	r3, r3, #4
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d004      	beq.n	80102c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2204      	movs	r2, #4
 80102bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80102be:	2304      	movs	r3, #4
 80102c0:	e014      	b.n	80102ec <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102c6:	f003 0301 	and.w	r3, r3, #1
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d004      	beq.n	80102d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2201      	movs	r2, #1
 80102d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80102d4:	2301      	movs	r3, #1
 80102d6:	e009      	b.n	80102ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d002      	beq.n	80102ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2240      	movs	r2, #64	@ 0x40
 80102e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80102ea:	2300      	movs	r3, #0

}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3714      	adds	r7, #20
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr
 80102f8:	24000024 	.word	0x24000024
 80102fc:	10624dd3 	.word	0x10624dd3

08010300 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010300:	b480      	push	{r7}
 8010302:	b085      	sub	sp, #20
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010308:	4b11      	ldr	r3, [pc, #68]	@ (8010350 <SDMMC_GetCmdError+0x50>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4a11      	ldr	r2, [pc, #68]	@ (8010354 <SDMMC_GetCmdError+0x54>)
 801030e:	fba2 2303 	umull	r2, r3, r2, r3
 8010312:	0a5b      	lsrs	r3, r3, #9
 8010314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010318:	fb02 f303 	mul.w	r3, r2, r3
 801031c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	1e5a      	subs	r2, r3, #1
 8010322:	60fa      	str	r2, [r7, #12]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d102      	bne.n	801032e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010328:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801032c:	e009      	b.n	8010342 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010336:	2b00      	cmp	r3, #0
 8010338:	d0f1      	beq.n	801031e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4a06      	ldr	r2, [pc, #24]	@ (8010358 <SDMMC_GetCmdError+0x58>)
 801033e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010340:	2300      	movs	r3, #0
}
 8010342:	4618      	mov	r0, r3
 8010344:	3714      	adds	r7, #20
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr
 801034e:	bf00      	nop
 8010350:	24000024 	.word	0x24000024
 8010354:	10624dd3 	.word	0x10624dd3
 8010358:	002000c5 	.word	0x002000c5

0801035c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801035c:	b084      	sub	sp, #16
 801035e:	b580      	push	{r7, lr}
 8010360:	b084      	sub	sp, #16
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
 8010366:	f107 001c 	add.w	r0, r7, #28
 801036a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801036e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010372:	2b01      	cmp	r3, #1
 8010374:	d121      	bne.n	80103ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801037a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68da      	ldr	r2, [r3, #12]
 8010386:	4b2c      	ldr	r3, [pc, #176]	@ (8010438 <USB_CoreInit+0xdc>)
 8010388:	4013      	ands	r3, r2
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801039a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d105      	bne.n	80103ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	68db      	ldr	r3, [r3, #12]
 80103a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f001 faf6 	bl	80119a0 <USB_CoreReset>
 80103b4:	4603      	mov	r3, r0
 80103b6:	73fb      	strb	r3, [r7, #15]
 80103b8:	e01b      	b.n	80103f2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	68db      	ldr	r3, [r3, #12]
 80103be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f001 faea 	bl	80119a0 <USB_CoreReset>
 80103cc:	4603      	mov	r3, r0
 80103ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80103d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d106      	bne.n	80103e6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80103e4:	e005      	b.n	80103f2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80103f2:	7fbb      	ldrb	r3, [r7, #30]
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d116      	bne.n	8010426 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80103fc:	b29a      	uxth	r2, r3
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010406:	4b0d      	ldr	r3, [pc, #52]	@ (801043c <USB_CoreInit+0xe0>)
 8010408:	4313      	orrs	r3, r2
 801040a:	687a      	ldr	r2, [r7, #4]
 801040c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	f043 0206 	orr.w	r2, r3, #6
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	689b      	ldr	r3, [r3, #8]
 801041e:	f043 0220 	orr.w	r2, r3, #32
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010426:	7bfb      	ldrb	r3, [r7, #15]
}
 8010428:	4618      	mov	r0, r3
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010432:	b004      	add	sp, #16
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop
 8010438:	ffbdffbf 	.word	0xffbdffbf
 801043c:	03ee0000 	.word	0x03ee0000

08010440 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010440:	b480      	push	{r7}
 8010442:	b087      	sub	sp, #28
 8010444:	af00      	add	r7, sp, #0
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	4613      	mov	r3, r2
 801044c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801044e:	79fb      	ldrb	r3, [r7, #7]
 8010450:	2b02      	cmp	r3, #2
 8010452:	d165      	bne.n	8010520 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	4a41      	ldr	r2, [pc, #260]	@ (801055c <USB_SetTurnaroundTime+0x11c>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d906      	bls.n	801046a <USB_SetTurnaroundTime+0x2a>
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	4a40      	ldr	r2, [pc, #256]	@ (8010560 <USB_SetTurnaroundTime+0x120>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d202      	bcs.n	801046a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010464:	230f      	movs	r3, #15
 8010466:	617b      	str	r3, [r7, #20]
 8010468:	e062      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	4a3c      	ldr	r2, [pc, #240]	@ (8010560 <USB_SetTurnaroundTime+0x120>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d306      	bcc.n	8010480 <USB_SetTurnaroundTime+0x40>
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	4a3b      	ldr	r2, [pc, #236]	@ (8010564 <USB_SetTurnaroundTime+0x124>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d202      	bcs.n	8010480 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801047a:	230e      	movs	r3, #14
 801047c:	617b      	str	r3, [r7, #20]
 801047e:	e057      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	4a38      	ldr	r2, [pc, #224]	@ (8010564 <USB_SetTurnaroundTime+0x124>)
 8010484:	4293      	cmp	r3, r2
 8010486:	d306      	bcc.n	8010496 <USB_SetTurnaroundTime+0x56>
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	4a37      	ldr	r2, [pc, #220]	@ (8010568 <USB_SetTurnaroundTime+0x128>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d202      	bcs.n	8010496 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010490:	230d      	movs	r3, #13
 8010492:	617b      	str	r3, [r7, #20]
 8010494:	e04c      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	4a33      	ldr	r2, [pc, #204]	@ (8010568 <USB_SetTurnaroundTime+0x128>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d306      	bcc.n	80104ac <USB_SetTurnaroundTime+0x6c>
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	4a32      	ldr	r2, [pc, #200]	@ (801056c <USB_SetTurnaroundTime+0x12c>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d802      	bhi.n	80104ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80104a6:	230c      	movs	r3, #12
 80104a8:	617b      	str	r3, [r7, #20]
 80104aa:	e041      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	4a2f      	ldr	r2, [pc, #188]	@ (801056c <USB_SetTurnaroundTime+0x12c>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d906      	bls.n	80104c2 <USB_SetTurnaroundTime+0x82>
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	4a2e      	ldr	r2, [pc, #184]	@ (8010570 <USB_SetTurnaroundTime+0x130>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d802      	bhi.n	80104c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80104bc:	230b      	movs	r3, #11
 80104be:	617b      	str	r3, [r7, #20]
 80104c0:	e036      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	4a2a      	ldr	r2, [pc, #168]	@ (8010570 <USB_SetTurnaroundTime+0x130>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d906      	bls.n	80104d8 <USB_SetTurnaroundTime+0x98>
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	4a29      	ldr	r2, [pc, #164]	@ (8010574 <USB_SetTurnaroundTime+0x134>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d802      	bhi.n	80104d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80104d2:	230a      	movs	r3, #10
 80104d4:	617b      	str	r3, [r7, #20]
 80104d6:	e02b      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	4a26      	ldr	r2, [pc, #152]	@ (8010574 <USB_SetTurnaroundTime+0x134>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d906      	bls.n	80104ee <USB_SetTurnaroundTime+0xae>
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	4a25      	ldr	r2, [pc, #148]	@ (8010578 <USB_SetTurnaroundTime+0x138>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d202      	bcs.n	80104ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80104e8:	2309      	movs	r3, #9
 80104ea:	617b      	str	r3, [r7, #20]
 80104ec:	e020      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	4a21      	ldr	r2, [pc, #132]	@ (8010578 <USB_SetTurnaroundTime+0x138>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d306      	bcc.n	8010504 <USB_SetTurnaroundTime+0xc4>
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	4a20      	ldr	r2, [pc, #128]	@ (801057c <USB_SetTurnaroundTime+0x13c>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d802      	bhi.n	8010504 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80104fe:	2308      	movs	r3, #8
 8010500:	617b      	str	r3, [r7, #20]
 8010502:	e015      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	4a1d      	ldr	r2, [pc, #116]	@ (801057c <USB_SetTurnaroundTime+0x13c>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d906      	bls.n	801051a <USB_SetTurnaroundTime+0xda>
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	4a1c      	ldr	r2, [pc, #112]	@ (8010580 <USB_SetTurnaroundTime+0x140>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d202      	bcs.n	801051a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010514:	2307      	movs	r3, #7
 8010516:	617b      	str	r3, [r7, #20]
 8010518:	e00a      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801051a:	2306      	movs	r3, #6
 801051c:	617b      	str	r3, [r7, #20]
 801051e:	e007      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010520:	79fb      	ldrb	r3, [r7, #7]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d102      	bne.n	801052c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010526:	2309      	movs	r3, #9
 8010528:	617b      	str	r3, [r7, #20]
 801052a:	e001      	b.n	8010530 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801052c:	2309      	movs	r3, #9
 801052e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	68da      	ldr	r2, [r3, #12]
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	029b      	lsls	r3, r3, #10
 8010544:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010548:	431a      	orrs	r2, r3
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801054e:	2300      	movs	r3, #0
}
 8010550:	4618      	mov	r0, r3
 8010552:	371c      	adds	r7, #28
 8010554:	46bd      	mov	sp, r7
 8010556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055a:	4770      	bx	lr
 801055c:	00d8acbf 	.word	0x00d8acbf
 8010560:	00e4e1c0 	.word	0x00e4e1c0
 8010564:	00f42400 	.word	0x00f42400
 8010568:	01067380 	.word	0x01067380
 801056c:	011a499f 	.word	0x011a499f
 8010570:	01312cff 	.word	0x01312cff
 8010574:	014ca43f 	.word	0x014ca43f
 8010578:	016e3600 	.word	0x016e3600
 801057c:	01a6ab1f 	.word	0x01a6ab1f
 8010580:	01e84800 	.word	0x01e84800

08010584 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010584:	b480      	push	{r7}
 8010586:	b083      	sub	sp, #12
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	689b      	ldr	r3, [r3, #8]
 8010590:	f043 0201 	orr.w	r2, r3, #1
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	370c      	adds	r7, #12
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr

080105a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80105a6:	b480      	push	{r7}
 80105a8:	b083      	sub	sp, #12
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	689b      	ldr	r3, [r3, #8]
 80105b2:	f023 0201 	bic.w	r2, r3, #1
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	4618      	mov	r0, r3
 80105be:	370c      	adds	r7, #12
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	460b      	mov	r3, r1
 80105d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80105d4:	2300      	movs	r3, #0
 80105d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80105e4:	78fb      	ldrb	r3, [r7, #3]
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d115      	bne.n	8010616 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80105f6:	200a      	movs	r0, #10
 80105f8:	f7f4 f9fa 	bl	80049f0 <HAL_Delay>
      ms += 10U;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	330a      	adds	r3, #10
 8010600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f001 f93b 	bl	801187e <USB_GetMode>
 8010608:	4603      	mov	r3, r0
 801060a:	2b01      	cmp	r3, #1
 801060c:	d01e      	beq.n	801064c <USB_SetCurrentMode+0x84>
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2bc7      	cmp	r3, #199	@ 0xc7
 8010612:	d9f0      	bls.n	80105f6 <USB_SetCurrentMode+0x2e>
 8010614:	e01a      	b.n	801064c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010616:	78fb      	ldrb	r3, [r7, #3]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d115      	bne.n	8010648 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	68db      	ldr	r3, [r3, #12]
 8010620:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010628:	200a      	movs	r0, #10
 801062a:	f7f4 f9e1 	bl	80049f0 <HAL_Delay>
      ms += 10U;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	330a      	adds	r3, #10
 8010632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f001 f922 	bl	801187e <USB_GetMode>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d005      	beq.n	801064c <USB_SetCurrentMode+0x84>
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	2bc7      	cmp	r3, #199	@ 0xc7
 8010644:	d9f0      	bls.n	8010628 <USB_SetCurrentMode+0x60>
 8010646:	e001      	b.n	801064c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010648:	2301      	movs	r3, #1
 801064a:	e005      	b.n	8010658 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	2bc8      	cmp	r3, #200	@ 0xc8
 8010650:	d101      	bne.n	8010656 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010652:	2301      	movs	r3, #1
 8010654:	e000      	b.n	8010658 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010656:	2300      	movs	r3, #0
}
 8010658:	4618      	mov	r0, r3
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010660:	b084      	sub	sp, #16
 8010662:	b580      	push	{r7, lr}
 8010664:	b086      	sub	sp, #24
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
 801066a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801066e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010672:	2300      	movs	r3, #0
 8010674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801067a:	2300      	movs	r3, #0
 801067c:	613b      	str	r3, [r7, #16]
 801067e:	e009      	b.n	8010694 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	3340      	adds	r3, #64	@ 0x40
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	4413      	add	r3, r2
 801068a:	2200      	movs	r2, #0
 801068c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	3301      	adds	r3, #1
 8010692:	613b      	str	r3, [r7, #16]
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	2b0e      	cmp	r3, #14
 8010698:	d9f2      	bls.n	8010680 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801069a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d11c      	bne.n	80106dc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	68fa      	ldr	r2, [r7, #12]
 80106ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80106b0:	f043 0302 	orr.w	r3, r3, #2
 80106b4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106ba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	601a      	str	r2, [r3, #0]
 80106da:	e005      	b.n	80106e8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80106ee:	461a      	mov	r2, r3
 80106f0:	2300      	movs	r3, #0
 80106f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80106f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d10d      	bne.n	8010718 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80106fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010700:	2b00      	cmp	r3, #0
 8010702:	d104      	bne.n	801070e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010704:	2100      	movs	r1, #0
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f000 f968 	bl	80109dc <USB_SetDevSpeed>
 801070c:	e008      	b.n	8010720 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801070e:	2101      	movs	r1, #1
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f000 f963 	bl	80109dc <USB_SetDevSpeed>
 8010716:	e003      	b.n	8010720 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010718:	2103      	movs	r1, #3
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f000 f95e 	bl	80109dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010720:	2110      	movs	r1, #16
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f000 f8fa 	bl	801091c <USB_FlushTxFifo>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d001      	beq.n	8010732 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801072e:	2301      	movs	r3, #1
 8010730:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 f924 	bl	8010980 <USB_FlushRxFifo>
 8010738:	4603      	mov	r3, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	d001      	beq.n	8010742 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801073e:	2301      	movs	r3, #1
 8010740:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010748:	461a      	mov	r2, r3
 801074a:	2300      	movs	r3, #0
 801074c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010754:	461a      	mov	r2, r3
 8010756:	2300      	movs	r3, #0
 8010758:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010760:	461a      	mov	r2, r3
 8010762:	2300      	movs	r3, #0
 8010764:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010766:	2300      	movs	r3, #0
 8010768:	613b      	str	r3, [r7, #16]
 801076a:	e043      	b.n	80107f4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	015a      	lsls	r2, r3, #5
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	4413      	add	r3, r2
 8010774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801077e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010782:	d118      	bne.n	80107b6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d10a      	bne.n	80107a0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	015a      	lsls	r2, r3, #5
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	4413      	add	r3, r2
 8010792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010796:	461a      	mov	r2, r3
 8010798:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801079c:	6013      	str	r3, [r2, #0]
 801079e:	e013      	b.n	80107c8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	015a      	lsls	r2, r3, #5
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	4413      	add	r3, r2
 80107a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107ac:	461a      	mov	r2, r3
 80107ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80107b2:	6013      	str	r3, [r2, #0]
 80107b4:	e008      	b.n	80107c8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	015a      	lsls	r2, r3, #5
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	4413      	add	r3, r2
 80107be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107c2:	461a      	mov	r2, r3
 80107c4:	2300      	movs	r3, #0
 80107c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	015a      	lsls	r2, r3, #5
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	4413      	add	r3, r2
 80107d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107d4:	461a      	mov	r2, r3
 80107d6:	2300      	movs	r3, #0
 80107d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	015a      	lsls	r2, r3, #5
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	4413      	add	r3, r2
 80107e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107e6:	461a      	mov	r2, r3
 80107e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80107ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	3301      	adds	r3, #1
 80107f2:	613b      	str	r3, [r7, #16]
 80107f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80107f8:	461a      	mov	r2, r3
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d3b5      	bcc.n	801076c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010800:	2300      	movs	r3, #0
 8010802:	613b      	str	r3, [r7, #16]
 8010804:	e043      	b.n	801088e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	015a      	lsls	r2, r3, #5
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	4413      	add	r3, r2
 801080e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801081c:	d118      	bne.n	8010850 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d10a      	bne.n	801083a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	015a      	lsls	r2, r3, #5
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	4413      	add	r3, r2
 801082c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010830:	461a      	mov	r2, r3
 8010832:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010836:	6013      	str	r3, [r2, #0]
 8010838:	e013      	b.n	8010862 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	015a      	lsls	r2, r3, #5
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	4413      	add	r3, r2
 8010842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010846:	461a      	mov	r2, r3
 8010848:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801084c:	6013      	str	r3, [r2, #0]
 801084e:	e008      	b.n	8010862 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	015a      	lsls	r2, r3, #5
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	4413      	add	r3, r2
 8010858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801085c:	461a      	mov	r2, r3
 801085e:	2300      	movs	r3, #0
 8010860:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	015a      	lsls	r2, r3, #5
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	4413      	add	r3, r2
 801086a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801086e:	461a      	mov	r2, r3
 8010870:	2300      	movs	r3, #0
 8010872:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	015a      	lsls	r2, r3, #5
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	4413      	add	r3, r2
 801087c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010880:	461a      	mov	r2, r3
 8010882:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010886:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	3301      	adds	r3, #1
 801088c:	613b      	str	r3, [r7, #16]
 801088e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010892:	461a      	mov	r2, r3
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	4293      	cmp	r3, r2
 8010898:	d3b5      	bcc.n	8010806 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108a0:	691b      	ldr	r3, [r3, #16]
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80108a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80108ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2200      	movs	r2, #0
 80108b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80108ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80108bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d105      	bne.n	80108d0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	699b      	ldr	r3, [r3, #24]
 80108c8:	f043 0210 	orr.w	r2, r3, #16
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	699a      	ldr	r2, [r3, #24]
 80108d4:	4b0f      	ldr	r3, [pc, #60]	@ (8010914 <USB_DevInit+0x2b4>)
 80108d6:	4313      	orrs	r3, r2
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80108dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d005      	beq.n	80108f0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	699b      	ldr	r3, [r3, #24]
 80108e8:	f043 0208 	orr.w	r2, r3, #8
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80108f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d105      	bne.n	8010904 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	699a      	ldr	r2, [r3, #24]
 80108fc:	4b06      	ldr	r3, [pc, #24]	@ (8010918 <USB_DevInit+0x2b8>)
 80108fe:	4313      	orrs	r3, r2
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010904:	7dfb      	ldrb	r3, [r7, #23]
}
 8010906:	4618      	mov	r0, r3
 8010908:	3718      	adds	r7, #24
 801090a:	46bd      	mov	sp, r7
 801090c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010910:	b004      	add	sp, #16
 8010912:	4770      	bx	lr
 8010914:	803c3800 	.word	0x803c3800
 8010918:	40000004 	.word	0x40000004

0801091c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801091c:	b480      	push	{r7}
 801091e:	b085      	sub	sp, #20
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
 8010924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010926:	2300      	movs	r3, #0
 8010928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	3301      	adds	r3, #1
 801092e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010936:	d901      	bls.n	801093c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010938:	2303      	movs	r3, #3
 801093a:	e01b      	b.n	8010974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	691b      	ldr	r3, [r3, #16]
 8010940:	2b00      	cmp	r3, #0
 8010942:	daf2      	bge.n	801092a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010944:	2300      	movs	r3, #0
 8010946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	019b      	lsls	r3, r3, #6
 801094c:	f043 0220 	orr.w	r2, r3, #32
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	3301      	adds	r3, #1
 8010958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010960:	d901      	bls.n	8010966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010962:	2303      	movs	r3, #3
 8010964:	e006      	b.n	8010974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	691b      	ldr	r3, [r3, #16]
 801096a:	f003 0320 	and.w	r3, r3, #32
 801096e:	2b20      	cmp	r3, #32
 8010970:	d0f0      	beq.n	8010954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3714      	adds	r7, #20
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010980:	b480      	push	{r7}
 8010982:	b085      	sub	sp, #20
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010988:	2300      	movs	r3, #0
 801098a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	3301      	adds	r3, #1
 8010990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010998:	d901      	bls.n	801099e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801099a:	2303      	movs	r3, #3
 801099c:	e018      	b.n	80109d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	691b      	ldr	r3, [r3, #16]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	daf2      	bge.n	801098c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80109a6:	2300      	movs	r3, #0
 80109a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2210      	movs	r2, #16
 80109ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	3301      	adds	r3, #1
 80109b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80109bc:	d901      	bls.n	80109c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80109be:	2303      	movs	r3, #3
 80109c0:	e006      	b.n	80109d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	691b      	ldr	r3, [r3, #16]
 80109c6:	f003 0310 	and.w	r3, r3, #16
 80109ca:	2b10      	cmp	r3, #16
 80109cc:	d0f0      	beq.n	80109b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80109ce:	2300      	movs	r3, #0
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3714      	adds	r7, #20
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80109dc:	b480      	push	{r7}
 80109de:	b085      	sub	sp, #20
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	460b      	mov	r3, r1
 80109e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	78fb      	ldrb	r3, [r7, #3]
 80109f6:	68f9      	ldr	r1, [r7, #12]
 80109f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80109fc:	4313      	orrs	r3, r2
 80109fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010a00:	2300      	movs	r3, #0
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3714      	adds	r7, #20
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8010a0e:	b480      	push	{r7}
 8010a10:	b087      	sub	sp, #28
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	f003 0306 	and.w	r3, r3, #6
 8010a26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d102      	bne.n	8010a34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	75fb      	strb	r3, [r7, #23]
 8010a32:	e00a      	b.n	8010a4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	d002      	beq.n	8010a40 <USB_GetDevSpeed+0x32>
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2b06      	cmp	r3, #6
 8010a3e:	d102      	bne.n	8010a46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010a40:	2302      	movs	r3, #2
 8010a42:	75fb      	strb	r3, [r7, #23]
 8010a44:	e001      	b.n	8010a4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010a46:	230f      	movs	r3, #15
 8010a48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	371c      	adds	r7, #28
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr

08010a58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	781b      	ldrb	r3, [r3, #0]
 8010a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	785b      	ldrb	r3, [r3, #1]
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d139      	bne.n	8010ae8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a7a:	69da      	ldr	r2, [r3, #28]
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	f003 030f 	and.w	r3, r3, #15
 8010a84:	2101      	movs	r1, #1
 8010a86:	fa01 f303 	lsl.w	r3, r1, r3
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	68f9      	ldr	r1, [r7, #12]
 8010a8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010a92:	4313      	orrs	r3, r2
 8010a94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	015a      	lsls	r2, r3, #5
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	4413      	add	r3, r2
 8010a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d153      	bne.n	8010b54 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	015a      	lsls	r2, r3, #5
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ab8:	681a      	ldr	r2, [r3, #0]
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	791b      	ldrb	r3, [r3, #4]
 8010ac6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010ac8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	059b      	lsls	r3, r3, #22
 8010ace:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010ad0:	431a      	orrs	r2, r3
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	0159      	lsls	r1, r3, #5
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	440b      	add	r3, r1
 8010ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ade:	4619      	mov	r1, r3
 8010ae0:	4b20      	ldr	r3, [pc, #128]	@ (8010b64 <USB_ActivateEndpoint+0x10c>)
 8010ae2:	4313      	orrs	r3, r2
 8010ae4:	600b      	str	r3, [r1, #0]
 8010ae6:	e035      	b.n	8010b54 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010aee:	69da      	ldr	r2, [r3, #28]
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	f003 030f 	and.w	r3, r3, #15
 8010af8:	2101      	movs	r1, #1
 8010afa:	fa01 f303 	lsl.w	r3, r1, r3
 8010afe:	041b      	lsls	r3, r3, #16
 8010b00:	68f9      	ldr	r1, [r7, #12]
 8010b02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010b06:	4313      	orrs	r3, r2
 8010b08:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	015a      	lsls	r2, r3, #5
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	4413      	add	r3, r2
 8010b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d119      	bne.n	8010b54 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	015a      	lsls	r2, r3, #5
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	4413      	add	r3, r2
 8010b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	689b      	ldr	r3, [r3, #8]
 8010b32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	791b      	ldrb	r3, [r3, #4]
 8010b3a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010b3c:	430b      	orrs	r3, r1
 8010b3e:	431a      	orrs	r2, r3
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	0159      	lsls	r1, r3, #5
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	440b      	add	r3, r1
 8010b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	4b05      	ldr	r3, [pc, #20]	@ (8010b64 <USB_ActivateEndpoint+0x10c>)
 8010b50:	4313      	orrs	r3, r2
 8010b52:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010b54:	2300      	movs	r3, #0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3714      	adds	r7, #20
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	10008000 	.word	0x10008000

08010b68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b085      	sub	sp, #20
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	785b      	ldrb	r3, [r3, #1]
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d161      	bne.n	8010c48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	015a      	lsls	r2, r3, #5
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010b9a:	d11f      	bne.n	8010bdc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	015a      	lsls	r2, r3, #5
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	4413      	add	r3, r2
 8010ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	68ba      	ldr	r2, [r7, #8]
 8010bac:	0151      	lsls	r1, r2, #5
 8010bae:	68fa      	ldr	r2, [r7, #12]
 8010bb0:	440a      	add	r2, r1
 8010bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010bb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010bba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	015a      	lsls	r2, r3, #5
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	4413      	add	r3, r2
 8010bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	68ba      	ldr	r2, [r7, #8]
 8010bcc:	0151      	lsls	r1, r2, #5
 8010bce:	68fa      	ldr	r2, [r7, #12]
 8010bd0:	440a      	add	r2, r1
 8010bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010bd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010bda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	f003 030f 	and.w	r3, r3, #15
 8010bec:	2101      	movs	r1, #1
 8010bee:	fa01 f303 	lsl.w	r3, r1, r3
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	43db      	mvns	r3, r3
 8010bf6:	68f9      	ldr	r1, [r7, #12]
 8010bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010bfc:	4013      	ands	r3, r2
 8010bfe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c06:	69da      	ldr	r2, [r3, #28]
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	f003 030f 	and.w	r3, r3, #15
 8010c10:	2101      	movs	r1, #1
 8010c12:	fa01 f303 	lsl.w	r3, r1, r3
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	43db      	mvns	r3, r3
 8010c1a:	68f9      	ldr	r1, [r7, #12]
 8010c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010c20:	4013      	ands	r3, r2
 8010c22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	015a      	lsls	r2, r3, #5
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	0159      	lsls	r1, r3, #5
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	440b      	add	r3, r1
 8010c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c3e:	4619      	mov	r1, r3
 8010c40:	4b35      	ldr	r3, [pc, #212]	@ (8010d18 <USB_DeactivateEndpoint+0x1b0>)
 8010c42:	4013      	ands	r3, r2
 8010c44:	600b      	str	r3, [r1, #0]
 8010c46:	e060      	b.n	8010d0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	015a      	lsls	r2, r3, #5
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	4413      	add	r3, r2
 8010c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010c5e:	d11f      	bne.n	8010ca0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	015a      	lsls	r2, r3, #5
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	4413      	add	r3, r2
 8010c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	68ba      	ldr	r2, [r7, #8]
 8010c70:	0151      	lsls	r1, r2, #5
 8010c72:	68fa      	ldr	r2, [r7, #12]
 8010c74:	440a      	add	r2, r1
 8010c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010c7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	015a      	lsls	r2, r3, #5
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	4413      	add	r3, r2
 8010c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	68ba      	ldr	r2, [r7, #8]
 8010c90:	0151      	lsls	r1, r2, #5
 8010c92:	68fa      	ldr	r2, [r7, #12]
 8010c94:	440a      	add	r2, r1
 8010c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ca6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	f003 030f 	and.w	r3, r3, #15
 8010cb0:	2101      	movs	r1, #1
 8010cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8010cb6:	041b      	lsls	r3, r3, #16
 8010cb8:	43db      	mvns	r3, r3
 8010cba:	68f9      	ldr	r1, [r7, #12]
 8010cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010cc0:	4013      	ands	r3, r2
 8010cc2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cca:	69da      	ldr	r2, [r3, #28]
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	781b      	ldrb	r3, [r3, #0]
 8010cd0:	f003 030f 	and.w	r3, r3, #15
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8010cda:	041b      	lsls	r3, r3, #16
 8010cdc:	43db      	mvns	r3, r3
 8010cde:	68f9      	ldr	r1, [r7, #12]
 8010ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010ce4:	4013      	ands	r3, r2
 8010ce6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	015a      	lsls	r2, r3, #5
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	4413      	add	r3, r2
 8010cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	0159      	lsls	r1, r3, #5
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	440b      	add	r3, r1
 8010cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d02:	4619      	mov	r1, r3
 8010d04:	4b05      	ldr	r3, [pc, #20]	@ (8010d1c <USB_DeactivateEndpoint+0x1b4>)
 8010d06:	4013      	ands	r3, r2
 8010d08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010d0a:	2300      	movs	r3, #0
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3714      	adds	r7, #20
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr
 8010d18:	ec337800 	.word	0xec337800
 8010d1c:	eff37800 	.word	0xeff37800

08010d20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b08a      	sub	sp, #40	@ 0x28
 8010d24:	af02      	add	r7, sp, #8
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	785b      	ldrb	r3, [r3, #1]
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	f040 8181 	bne.w	8011044 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	691b      	ldr	r3, [r3, #16]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d132      	bne.n	8010db0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010d4a:	69bb      	ldr	r3, [r7, #24]
 8010d4c:	015a      	lsls	r2, r3, #5
 8010d4e:	69fb      	ldr	r3, [r7, #28]
 8010d50:	4413      	add	r3, r2
 8010d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d56:	691a      	ldr	r2, [r3, #16]
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	0159      	lsls	r1, r3, #5
 8010d5c:	69fb      	ldr	r3, [r7, #28]
 8010d5e:	440b      	add	r3, r1
 8010d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d64:	4619      	mov	r1, r3
 8010d66:	4ba5      	ldr	r3, [pc, #660]	@ (8010ffc <USB_EPStartXfer+0x2dc>)
 8010d68:	4013      	ands	r3, r2
 8010d6a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010d6c:	69bb      	ldr	r3, [r7, #24]
 8010d6e:	015a      	lsls	r2, r3, #5
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	4413      	add	r3, r2
 8010d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d78:	691b      	ldr	r3, [r3, #16]
 8010d7a:	69ba      	ldr	r2, [r7, #24]
 8010d7c:	0151      	lsls	r1, r2, #5
 8010d7e:	69fa      	ldr	r2, [r7, #28]
 8010d80:	440a      	add	r2, r1
 8010d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010d86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	015a      	lsls	r2, r3, #5
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	4413      	add	r3, r2
 8010d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d98:	691a      	ldr	r2, [r3, #16]
 8010d9a:	69bb      	ldr	r3, [r7, #24]
 8010d9c:	0159      	lsls	r1, r3, #5
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	440b      	add	r3, r1
 8010da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010da6:	4619      	mov	r1, r3
 8010da8:	4b95      	ldr	r3, [pc, #596]	@ (8011000 <USB_EPStartXfer+0x2e0>)
 8010daa:	4013      	ands	r3, r2
 8010dac:	610b      	str	r3, [r1, #16]
 8010dae:	e092      	b.n	8010ed6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	015a      	lsls	r2, r3, #5
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	4413      	add	r3, r2
 8010db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010dbc:	691a      	ldr	r2, [r3, #16]
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	0159      	lsls	r1, r3, #5
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	440b      	add	r3, r1
 8010dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010dca:	4619      	mov	r1, r3
 8010dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8011000 <USB_EPStartXfer+0x2e0>)
 8010dce:	4013      	ands	r3, r2
 8010dd0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010dd2:	69bb      	ldr	r3, [r7, #24]
 8010dd4:	015a      	lsls	r2, r3, #5
 8010dd6:	69fb      	ldr	r3, [r7, #28]
 8010dd8:	4413      	add	r3, r2
 8010dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010dde:	691a      	ldr	r2, [r3, #16]
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	0159      	lsls	r1, r3, #5
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	440b      	add	r3, r1
 8010de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010dec:	4619      	mov	r1, r3
 8010dee:	4b83      	ldr	r3, [pc, #524]	@ (8010ffc <USB_EPStartXfer+0x2dc>)
 8010df0:	4013      	ands	r3, r2
 8010df2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d11a      	bne.n	8010e30 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	691a      	ldr	r2, [r3, #16]
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d903      	bls.n	8010e0e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	689a      	ldr	r2, [r3, #8]
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010e0e:	69bb      	ldr	r3, [r7, #24]
 8010e10:	015a      	lsls	r2, r3, #5
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	4413      	add	r3, r2
 8010e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e1a:	691b      	ldr	r3, [r3, #16]
 8010e1c:	69ba      	ldr	r2, [r7, #24]
 8010e1e:	0151      	lsls	r1, r2, #5
 8010e20:	69fa      	ldr	r2, [r7, #28]
 8010e22:	440a      	add	r2, r1
 8010e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010e2c:	6113      	str	r3, [r2, #16]
 8010e2e:	e01b      	b.n	8010e68 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	015a      	lsls	r2, r3, #5
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	4413      	add	r3, r2
 8010e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e3c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	6919      	ldr	r1, [r3, #16]
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	689b      	ldr	r3, [r3, #8]
 8010e46:	440b      	add	r3, r1
 8010e48:	1e59      	subs	r1, r3, #1
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	689b      	ldr	r3, [r3, #8]
 8010e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8010e52:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010e54:	4b6b      	ldr	r3, [pc, #428]	@ (8011004 <USB_EPStartXfer+0x2e4>)
 8010e56:	400b      	ands	r3, r1
 8010e58:	69b9      	ldr	r1, [r7, #24]
 8010e5a:	0148      	lsls	r0, r1, #5
 8010e5c:	69f9      	ldr	r1, [r7, #28]
 8010e5e:	4401      	add	r1, r0
 8010e60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010e64:	4313      	orrs	r3, r2
 8010e66:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	015a      	lsls	r2, r3, #5
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	4413      	add	r3, r2
 8010e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e74:	691a      	ldr	r2, [r3, #16]
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	691b      	ldr	r3, [r3, #16]
 8010e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e7e:	69b9      	ldr	r1, [r7, #24]
 8010e80:	0148      	lsls	r0, r1, #5
 8010e82:	69f9      	ldr	r1, [r7, #28]
 8010e84:	4401      	add	r1, r0
 8010e86:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	791b      	ldrb	r3, [r3, #4]
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d11f      	bne.n	8010ed6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	015a      	lsls	r2, r3, #5
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ea2:	691b      	ldr	r3, [r3, #16]
 8010ea4:	69ba      	ldr	r2, [r7, #24]
 8010ea6:	0151      	lsls	r1, r2, #5
 8010ea8:	69fa      	ldr	r2, [r7, #28]
 8010eaa:	440a      	add	r2, r1
 8010eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010eb0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8010eb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	015a      	lsls	r2, r3, #5
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	4413      	add	r3, r2
 8010ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ec2:	691b      	ldr	r3, [r3, #16]
 8010ec4:	69ba      	ldr	r2, [r7, #24]
 8010ec6:	0151      	lsls	r1, r2, #5
 8010ec8:	69fa      	ldr	r2, [r7, #28]
 8010eca:	440a      	add	r2, r1
 8010ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ed0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010ed4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010ed6:	79fb      	ldrb	r3, [r7, #7]
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d14b      	bne.n	8010f74 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	69db      	ldr	r3, [r3, #28]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d009      	beq.n	8010ef8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010ee4:	69bb      	ldr	r3, [r7, #24]
 8010ee6:	015a      	lsls	r2, r3, #5
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	4413      	add	r3, r2
 8010eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	69db      	ldr	r3, [r3, #28]
 8010ef6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	791b      	ldrb	r3, [r3, #4]
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d128      	bne.n	8010f52 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d110      	bne.n	8010f32 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	015a      	lsls	r2, r3, #5
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	4413      	add	r3, r2
 8010f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	69ba      	ldr	r2, [r7, #24]
 8010f20:	0151      	lsls	r1, r2, #5
 8010f22:	69fa      	ldr	r2, [r7, #28]
 8010f24:	440a      	add	r2, r1
 8010f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010f2e:	6013      	str	r3, [r2, #0]
 8010f30:	e00f      	b.n	8010f52 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	015a      	lsls	r2, r3, #5
 8010f36:	69fb      	ldr	r3, [r7, #28]
 8010f38:	4413      	add	r3, r2
 8010f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	69ba      	ldr	r2, [r7, #24]
 8010f42:	0151      	lsls	r1, r2, #5
 8010f44:	69fa      	ldr	r2, [r7, #28]
 8010f46:	440a      	add	r2, r1
 8010f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010f50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010f52:	69bb      	ldr	r3, [r7, #24]
 8010f54:	015a      	lsls	r2, r3, #5
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	4413      	add	r3, r2
 8010f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	69ba      	ldr	r2, [r7, #24]
 8010f62:	0151      	lsls	r1, r2, #5
 8010f64:	69fa      	ldr	r2, [r7, #28]
 8010f66:	440a      	add	r2, r1
 8010f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f6c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010f70:	6013      	str	r3, [r2, #0]
 8010f72:	e16a      	b.n	801124a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010f74:	69bb      	ldr	r3, [r7, #24]
 8010f76:	015a      	lsls	r2, r3, #5
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	4413      	add	r3, r2
 8010f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	69ba      	ldr	r2, [r7, #24]
 8010f84:	0151      	lsls	r1, r2, #5
 8010f86:	69fa      	ldr	r2, [r7, #28]
 8010f88:	440a      	add	r2, r1
 8010f8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f8e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010f92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	791b      	ldrb	r3, [r3, #4]
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	d015      	beq.n	8010fc8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	691b      	ldr	r3, [r3, #16]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	f000 8152 	beq.w	801124a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	f003 030f 	and.w	r3, r3, #15
 8010fb6:	2101      	movs	r1, #1
 8010fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8010fbc:	69f9      	ldr	r1, [r7, #28]
 8010fbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010fc2:	4313      	orrs	r3, r2
 8010fc4:	634b      	str	r3, [r1, #52]	@ 0x34
 8010fc6:	e140      	b.n	801124a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fce:	689b      	ldr	r3, [r3, #8]
 8010fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d117      	bne.n	8011008 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010fd8:	69bb      	ldr	r3, [r7, #24]
 8010fda:	015a      	lsls	r2, r3, #5
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	4413      	add	r3, r2
 8010fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	69ba      	ldr	r2, [r7, #24]
 8010fe8:	0151      	lsls	r1, r2, #5
 8010fea:	69fa      	ldr	r2, [r7, #28]
 8010fec:	440a      	add	r2, r1
 8010fee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ff2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010ff6:	6013      	str	r3, [r2, #0]
 8010ff8:	e016      	b.n	8011028 <USB_EPStartXfer+0x308>
 8010ffa:	bf00      	nop
 8010ffc:	e007ffff 	.word	0xe007ffff
 8011000:	fff80000 	.word	0xfff80000
 8011004:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011008:	69bb      	ldr	r3, [r7, #24]
 801100a:	015a      	lsls	r2, r3, #5
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	4413      	add	r3, r2
 8011010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	69ba      	ldr	r2, [r7, #24]
 8011018:	0151      	lsls	r1, r2, #5
 801101a:	69fa      	ldr	r2, [r7, #28]
 801101c:	440a      	add	r2, r1
 801101e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011026:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	68d9      	ldr	r1, [r3, #12]
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	781a      	ldrb	r2, [r3, #0]
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	691b      	ldr	r3, [r3, #16]
 8011034:	b298      	uxth	r0, r3
 8011036:	79fb      	ldrb	r3, [r7, #7]
 8011038:	9300      	str	r3, [sp, #0]
 801103a:	4603      	mov	r3, r0
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f000 f9b9 	bl	80113b4 <USB_WritePacket>
 8011042:	e102      	b.n	801124a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	015a      	lsls	r2, r3, #5
 8011048:	69fb      	ldr	r3, [r7, #28]
 801104a:	4413      	add	r3, r2
 801104c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011050:	691a      	ldr	r2, [r3, #16]
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	0159      	lsls	r1, r3, #5
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	440b      	add	r3, r1
 801105a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801105e:	4619      	mov	r1, r3
 8011060:	4b7c      	ldr	r3, [pc, #496]	@ (8011254 <USB_EPStartXfer+0x534>)
 8011062:	4013      	ands	r3, r2
 8011064:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011066:	69bb      	ldr	r3, [r7, #24]
 8011068:	015a      	lsls	r2, r3, #5
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	4413      	add	r3, r2
 801106e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011072:	691a      	ldr	r2, [r3, #16]
 8011074:	69bb      	ldr	r3, [r7, #24]
 8011076:	0159      	lsls	r1, r3, #5
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	440b      	add	r3, r1
 801107c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011080:	4619      	mov	r1, r3
 8011082:	4b75      	ldr	r3, [pc, #468]	@ (8011258 <USB_EPStartXfer+0x538>)
 8011084:	4013      	ands	r3, r2
 8011086:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8011088:	69bb      	ldr	r3, [r7, #24]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d12f      	bne.n	80110ee <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	691b      	ldr	r3, [r3, #16]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d003      	beq.n	801109e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	689a      	ldr	r2, [r3, #8]
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	689a      	ldr	r2, [r3, #8]
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80110a6:	69bb      	ldr	r3, [r7, #24]
 80110a8:	015a      	lsls	r2, r3, #5
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	4413      	add	r3, r2
 80110ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110b2:	691a      	ldr	r2, [r3, #16]
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	6a1b      	ldr	r3, [r3, #32]
 80110b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80110bc:	69b9      	ldr	r1, [r7, #24]
 80110be:	0148      	lsls	r0, r1, #5
 80110c0:	69f9      	ldr	r1, [r7, #28]
 80110c2:	4401      	add	r1, r0
 80110c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80110c8:	4313      	orrs	r3, r2
 80110ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	015a      	lsls	r2, r3, #5
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	4413      	add	r3, r2
 80110d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110d8:	691b      	ldr	r3, [r3, #16]
 80110da:	69ba      	ldr	r2, [r7, #24]
 80110dc:	0151      	lsls	r1, r2, #5
 80110de:	69fa      	ldr	r2, [r7, #28]
 80110e0:	440a      	add	r2, r1
 80110e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80110e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80110ea:	6113      	str	r3, [r2, #16]
 80110ec:	e05f      	b.n	80111ae <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	691b      	ldr	r3, [r3, #16]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d123      	bne.n	801113e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	015a      	lsls	r2, r3, #5
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	4413      	add	r3, r2
 80110fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011102:	691a      	ldr	r2, [r3, #16]
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	689b      	ldr	r3, [r3, #8]
 8011108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801110c:	69b9      	ldr	r1, [r7, #24]
 801110e:	0148      	lsls	r0, r1, #5
 8011110:	69f9      	ldr	r1, [r7, #28]
 8011112:	4401      	add	r1, r0
 8011114:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011118:	4313      	orrs	r3, r2
 801111a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801111c:	69bb      	ldr	r3, [r7, #24]
 801111e:	015a      	lsls	r2, r3, #5
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	4413      	add	r3, r2
 8011124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011128:	691b      	ldr	r3, [r3, #16]
 801112a:	69ba      	ldr	r2, [r7, #24]
 801112c:	0151      	lsls	r1, r2, #5
 801112e:	69fa      	ldr	r2, [r7, #28]
 8011130:	440a      	add	r2, r1
 8011132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011136:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801113a:	6113      	str	r3, [r2, #16]
 801113c:	e037      	b.n	80111ae <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	691a      	ldr	r2, [r3, #16]
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	689b      	ldr	r3, [r3, #8]
 8011146:	4413      	add	r3, r2
 8011148:	1e5a      	subs	r2, r3, #1
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	689b      	ldr	r3, [r3, #8]
 801114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011152:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	689b      	ldr	r3, [r3, #8]
 8011158:	8afa      	ldrh	r2, [r7, #22]
 801115a:	fb03 f202 	mul.w	r2, r3, r2
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011162:	69bb      	ldr	r3, [r7, #24]
 8011164:	015a      	lsls	r2, r3, #5
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	4413      	add	r3, r2
 801116a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801116e:	691a      	ldr	r2, [r3, #16]
 8011170:	8afb      	ldrh	r3, [r7, #22]
 8011172:	04d9      	lsls	r1, r3, #19
 8011174:	4b39      	ldr	r3, [pc, #228]	@ (801125c <USB_EPStartXfer+0x53c>)
 8011176:	400b      	ands	r3, r1
 8011178:	69b9      	ldr	r1, [r7, #24]
 801117a:	0148      	lsls	r0, r1, #5
 801117c:	69f9      	ldr	r1, [r7, #28]
 801117e:	4401      	add	r1, r0
 8011180:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011184:	4313      	orrs	r3, r2
 8011186:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011188:	69bb      	ldr	r3, [r7, #24]
 801118a:	015a      	lsls	r2, r3, #5
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	4413      	add	r3, r2
 8011190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011194:	691a      	ldr	r2, [r3, #16]
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	6a1b      	ldr	r3, [r3, #32]
 801119a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801119e:	69b9      	ldr	r1, [r7, #24]
 80111a0:	0148      	lsls	r0, r1, #5
 80111a2:	69f9      	ldr	r1, [r7, #28]
 80111a4:	4401      	add	r1, r0
 80111a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80111aa:	4313      	orrs	r3, r2
 80111ac:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80111ae:	79fb      	ldrb	r3, [r7, #7]
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d10d      	bne.n	80111d0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	68db      	ldr	r3, [r3, #12]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d009      	beq.n	80111d0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	68d9      	ldr	r1, [r3, #12]
 80111c0:	69bb      	ldr	r3, [r7, #24]
 80111c2:	015a      	lsls	r2, r3, #5
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	4413      	add	r3, r2
 80111c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111cc:	460a      	mov	r2, r1
 80111ce:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	791b      	ldrb	r3, [r3, #4]
 80111d4:	2b01      	cmp	r3, #1
 80111d6:	d128      	bne.n	801122a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80111d8:	69fb      	ldr	r3, [r7, #28]
 80111da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111de:	689b      	ldr	r3, [r3, #8]
 80111e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d110      	bne.n	801120a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80111e8:	69bb      	ldr	r3, [r7, #24]
 80111ea:	015a      	lsls	r2, r3, #5
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	4413      	add	r3, r2
 80111f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	69ba      	ldr	r2, [r7, #24]
 80111f8:	0151      	lsls	r1, r2, #5
 80111fa:	69fa      	ldr	r2, [r7, #28]
 80111fc:	440a      	add	r2, r1
 80111fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011202:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011206:	6013      	str	r3, [r2, #0]
 8011208:	e00f      	b.n	801122a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801120a:	69bb      	ldr	r3, [r7, #24]
 801120c:	015a      	lsls	r2, r3, #5
 801120e:	69fb      	ldr	r3, [r7, #28]
 8011210:	4413      	add	r3, r2
 8011212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	69ba      	ldr	r2, [r7, #24]
 801121a:	0151      	lsls	r1, r2, #5
 801121c:	69fa      	ldr	r2, [r7, #28]
 801121e:	440a      	add	r2, r1
 8011220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011228:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801122a:	69bb      	ldr	r3, [r7, #24]
 801122c:	015a      	lsls	r2, r3, #5
 801122e:	69fb      	ldr	r3, [r7, #28]
 8011230:	4413      	add	r3, r2
 8011232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	0151      	lsls	r1, r2, #5
 801123c:	69fa      	ldr	r2, [r7, #28]
 801123e:	440a      	add	r2, r1
 8011240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011244:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011248:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801124a:	2300      	movs	r3, #0
}
 801124c:	4618      	mov	r0, r3
 801124e:	3720      	adds	r7, #32
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	fff80000 	.word	0xfff80000
 8011258:	e007ffff 	.word	0xe007ffff
 801125c:	1ff80000 	.word	0x1ff80000

08011260 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011260:	b480      	push	{r7}
 8011262:	b087      	sub	sp, #28
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801126a:	2300      	movs	r3, #0
 801126c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801126e:	2300      	movs	r3, #0
 8011270:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	785b      	ldrb	r3, [r3, #1]
 801127a:	2b01      	cmp	r3, #1
 801127c:	d14a      	bne.n	8011314 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	015a      	lsls	r2, r3, #5
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	4413      	add	r3, r2
 8011288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011296:	f040 8086 	bne.w	80113a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	015a      	lsls	r2, r3, #5
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	4413      	add	r3, r2
 80112a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	683a      	ldr	r2, [r7, #0]
 80112ac:	7812      	ldrb	r2, [r2, #0]
 80112ae:	0151      	lsls	r1, r2, #5
 80112b0:	693a      	ldr	r2, [r7, #16]
 80112b2:	440a      	add	r2, r1
 80112b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80112b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80112bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	015a      	lsls	r2, r3, #5
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	4413      	add	r3, r2
 80112c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	683a      	ldr	r2, [r7, #0]
 80112d0:	7812      	ldrb	r2, [r2, #0]
 80112d2:	0151      	lsls	r1, r2, #5
 80112d4:	693a      	ldr	r2, [r7, #16]
 80112d6:	440a      	add	r2, r1
 80112d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80112dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80112e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	3301      	adds	r3, #1
 80112e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80112ee:	4293      	cmp	r3, r2
 80112f0:	d902      	bls.n	80112f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80112f2:	2301      	movs	r3, #1
 80112f4:	75fb      	strb	r3, [r7, #23]
          break;
 80112f6:	e056      	b.n	80113a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	015a      	lsls	r2, r3, #5
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	4413      	add	r3, r2
 8011302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801130c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011310:	d0e7      	beq.n	80112e2 <USB_EPStopXfer+0x82>
 8011312:	e048      	b.n	80113a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	015a      	lsls	r2, r3, #5
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	4413      	add	r3, r2
 801131e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011328:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801132c:	d13b      	bne.n	80113a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	015a      	lsls	r2, r3, #5
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	4413      	add	r3, r2
 8011338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	7812      	ldrb	r2, [r2, #0]
 8011342:	0151      	lsls	r1, r2, #5
 8011344:	693a      	ldr	r2, [r7, #16]
 8011346:	440a      	add	r2, r1
 8011348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801134c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011350:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	015a      	lsls	r2, r3, #5
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	4413      	add	r3, r2
 801135c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	683a      	ldr	r2, [r7, #0]
 8011364:	7812      	ldrb	r2, [r2, #0]
 8011366:	0151      	lsls	r1, r2, #5
 8011368:	693a      	ldr	r2, [r7, #16]
 801136a:	440a      	add	r2, r1
 801136c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011370:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011374:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	3301      	adds	r3, #1
 801137a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011382:	4293      	cmp	r3, r2
 8011384:	d902      	bls.n	801138c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011386:	2301      	movs	r3, #1
 8011388:	75fb      	strb	r3, [r7, #23]
          break;
 801138a:	e00c      	b.n	80113a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	015a      	lsls	r2, r3, #5
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	4413      	add	r3, r2
 8011396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80113a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80113a4:	d0e7      	beq.n	8011376 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80113a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	371c      	adds	r7, #28
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr

080113b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b089      	sub	sp, #36	@ 0x24
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	4611      	mov	r1, r2
 80113c0:	461a      	mov	r2, r3
 80113c2:	460b      	mov	r3, r1
 80113c4:	71fb      	strb	r3, [r7, #7]
 80113c6:	4613      	mov	r3, r2
 80113c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80113d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d123      	bne.n	8011422 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80113da:	88bb      	ldrh	r3, [r7, #4]
 80113dc:	3303      	adds	r3, #3
 80113de:	089b      	lsrs	r3, r3, #2
 80113e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80113e2:	2300      	movs	r3, #0
 80113e4:	61bb      	str	r3, [r7, #24]
 80113e6:	e018      	b.n	801141a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80113e8:	79fb      	ldrb	r3, [r7, #7]
 80113ea:	031a      	lsls	r2, r3, #12
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	4413      	add	r3, r2
 80113f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80113f4:	461a      	mov	r2, r3
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	3301      	adds	r3, #1
 8011400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	3301      	adds	r3, #1
 8011406:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	3301      	adds	r3, #1
 801140c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	3301      	adds	r3, #1
 8011412:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	3301      	adds	r3, #1
 8011418:	61bb      	str	r3, [r7, #24]
 801141a:	69ba      	ldr	r2, [r7, #24]
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	429a      	cmp	r2, r3
 8011420:	d3e2      	bcc.n	80113e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3724      	adds	r7, #36	@ 0x24
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011430:	b480      	push	{r7}
 8011432:	b08b      	sub	sp, #44	@ 0x2c
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	4613      	mov	r3, r2
 801143c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011446:	88fb      	ldrh	r3, [r7, #6]
 8011448:	089b      	lsrs	r3, r3, #2
 801144a:	b29b      	uxth	r3, r3
 801144c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801144e:	88fb      	ldrh	r3, [r7, #6]
 8011450:	f003 0303 	and.w	r3, r3, #3
 8011454:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011456:	2300      	movs	r3, #0
 8011458:	623b      	str	r3, [r7, #32]
 801145a:	e014      	b.n	8011486 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801145c:	69bb      	ldr	r3, [r7, #24]
 801145e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011462:	681a      	ldr	r2, [r3, #0]
 8011464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011466:	601a      	str	r2, [r3, #0]
    pDest++;
 8011468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146a:	3301      	adds	r3, #1
 801146c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011470:	3301      	adds	r3, #1
 8011472:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011476:	3301      	adds	r3, #1
 8011478:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801147c:	3301      	adds	r3, #1
 801147e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011480:	6a3b      	ldr	r3, [r7, #32]
 8011482:	3301      	adds	r3, #1
 8011484:	623b      	str	r3, [r7, #32]
 8011486:	6a3a      	ldr	r2, [r7, #32]
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	429a      	cmp	r2, r3
 801148c:	d3e6      	bcc.n	801145c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801148e:	8bfb      	ldrh	r3, [r7, #30]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d01e      	beq.n	80114d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011494:	2300      	movs	r3, #0
 8011496:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011498:	69bb      	ldr	r3, [r7, #24]
 801149a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801149e:	461a      	mov	r2, r3
 80114a0:	f107 0310 	add.w	r3, r7, #16
 80114a4:	6812      	ldr	r2, [r2, #0]
 80114a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80114a8:	693a      	ldr	r2, [r7, #16]
 80114aa:	6a3b      	ldr	r3, [r7, #32]
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	00db      	lsls	r3, r3, #3
 80114b0:	fa22 f303 	lsr.w	r3, r2, r3
 80114b4:	b2da      	uxtb	r2, r3
 80114b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b8:	701a      	strb	r2, [r3, #0]
      i++;
 80114ba:	6a3b      	ldr	r3, [r7, #32]
 80114bc:	3301      	adds	r3, #1
 80114be:	623b      	str	r3, [r7, #32]
      pDest++;
 80114c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c2:	3301      	adds	r3, #1
 80114c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80114c6:	8bfb      	ldrh	r3, [r7, #30]
 80114c8:	3b01      	subs	r3, #1
 80114ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80114cc:	8bfb      	ldrh	r3, [r7, #30]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d1ea      	bne.n	80114a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80114d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	372c      	adds	r7, #44	@ 0x2c
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr

080114e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b085      	sub	sp, #20
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	781b      	ldrb	r3, [r3, #0]
 80114f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	785b      	ldrb	r3, [r3, #1]
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d12c      	bne.n	8011556 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	015a      	lsls	r2, r3, #5
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	4413      	add	r3, r2
 8011504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	2b00      	cmp	r3, #0
 801150c:	db12      	blt.n	8011534 <USB_EPSetStall+0x54>
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d00f      	beq.n	8011534 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	015a      	lsls	r2, r3, #5
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	4413      	add	r3, r2
 801151c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	68ba      	ldr	r2, [r7, #8]
 8011524:	0151      	lsls	r1, r2, #5
 8011526:	68fa      	ldr	r2, [r7, #12]
 8011528:	440a      	add	r2, r1
 801152a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801152e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011532:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	015a      	lsls	r2, r3, #5
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	4413      	add	r3, r2
 801153c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	68ba      	ldr	r2, [r7, #8]
 8011544:	0151      	lsls	r1, r2, #5
 8011546:	68fa      	ldr	r2, [r7, #12]
 8011548:	440a      	add	r2, r1
 801154a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801154e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011552:	6013      	str	r3, [r2, #0]
 8011554:	e02b      	b.n	80115ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	015a      	lsls	r2, r3, #5
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	4413      	add	r3, r2
 801155e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	2b00      	cmp	r3, #0
 8011566:	db12      	blt.n	801158e <USB_EPSetStall+0xae>
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d00f      	beq.n	801158e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	015a      	lsls	r2, r3, #5
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	4413      	add	r3, r2
 8011576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	68ba      	ldr	r2, [r7, #8]
 801157e:	0151      	lsls	r1, r2, #5
 8011580:	68fa      	ldr	r2, [r7, #12]
 8011582:	440a      	add	r2, r1
 8011584:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011588:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801158c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	015a      	lsls	r2, r3, #5
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	4413      	add	r3, r2
 8011596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	68ba      	ldr	r2, [r7, #8]
 801159e:	0151      	lsls	r1, r2, #5
 80115a0:	68fa      	ldr	r2, [r7, #12]
 80115a2:	440a      	add	r2, r1
 80115a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80115a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80115ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80115ae:	2300      	movs	r3, #0
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3714      	adds	r7, #20
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr

080115bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80115bc:	b480      	push	{r7}
 80115be:	b085      	sub	sp, #20
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	785b      	ldrb	r3, [r3, #1]
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d128      	bne.n	801162a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	015a      	lsls	r2, r3, #5
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	4413      	add	r3, r2
 80115e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	68ba      	ldr	r2, [r7, #8]
 80115e8:	0151      	lsls	r1, r2, #5
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	440a      	add	r2, r1
 80115ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80115f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80115f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	791b      	ldrb	r3, [r3, #4]
 80115fc:	2b03      	cmp	r3, #3
 80115fe:	d003      	beq.n	8011608 <USB_EPClearStall+0x4c>
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	791b      	ldrb	r3, [r3, #4]
 8011604:	2b02      	cmp	r3, #2
 8011606:	d138      	bne.n	801167a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	015a      	lsls	r2, r3, #5
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	4413      	add	r3, r2
 8011610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	68ba      	ldr	r2, [r7, #8]
 8011618:	0151      	lsls	r1, r2, #5
 801161a:	68fa      	ldr	r2, [r7, #12]
 801161c:	440a      	add	r2, r1
 801161e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011626:	6013      	str	r3, [r2, #0]
 8011628:	e027      	b.n	801167a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	015a      	lsls	r2, r3, #5
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	4413      	add	r3, r2
 8011632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	0151      	lsls	r1, r2, #5
 801163c:	68fa      	ldr	r2, [r7, #12]
 801163e:	440a      	add	r2, r1
 8011640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011644:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011648:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	791b      	ldrb	r3, [r3, #4]
 801164e:	2b03      	cmp	r3, #3
 8011650:	d003      	beq.n	801165a <USB_EPClearStall+0x9e>
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	791b      	ldrb	r3, [r3, #4]
 8011656:	2b02      	cmp	r3, #2
 8011658:	d10f      	bne.n	801167a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	015a      	lsls	r2, r3, #5
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	4413      	add	r3, r2
 8011662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	68ba      	ldr	r2, [r7, #8]
 801166a:	0151      	lsls	r1, r2, #5
 801166c:	68fa      	ldr	r2, [r7, #12]
 801166e:	440a      	add	r2, r1
 8011670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011678:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801167a:	2300      	movs	r3, #0
}
 801167c:	4618      	mov	r0, r3
 801167e:	3714      	adds	r7, #20
 8011680:	46bd      	mov	sp, r7
 8011682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011686:	4770      	bx	lr

08011688 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011688:	b480      	push	{r7}
 801168a:	b085      	sub	sp, #20
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	460b      	mov	r3, r1
 8011692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	68fa      	ldr	r2, [r7, #12]
 80116a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80116a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80116aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	78fb      	ldrb	r3, [r7, #3]
 80116b6:	011b      	lsls	r3, r3, #4
 80116b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80116bc:	68f9      	ldr	r1, [r7, #12]
 80116be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80116c2:	4313      	orrs	r3, r2
 80116c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80116c6:	2300      	movs	r3, #0
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3714      	adds	r7, #20
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr

080116d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b085      	sub	sp, #20
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80116ee:	f023 0303 	bic.w	r3, r3, #3
 80116f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011702:	f023 0302 	bic.w	r3, r3, #2
 8011706:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011708:	2300      	movs	r3, #0
}
 801170a:	4618      	mov	r0, r3
 801170c:	3714      	adds	r7, #20
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr

08011716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011716:	b480      	push	{r7}
 8011718:	b085      	sub	sp, #20
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	68fa      	ldr	r2, [r7, #12]
 801172c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011730:	f023 0303 	bic.w	r3, r3, #3
 8011734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	68fa      	ldr	r2, [r7, #12]
 8011740:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011744:	f043 0302 	orr.w	r3, r3, #2
 8011748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801174a:	2300      	movs	r3, #0
}
 801174c:	4618      	mov	r0, r3
 801174e:	3714      	adds	r7, #20
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr

08011758 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011758:	b480      	push	{r7}
 801175a:	b085      	sub	sp, #20
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	695b      	ldr	r3, [r3, #20]
 8011764:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	699b      	ldr	r3, [r3, #24]
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	4013      	ands	r3, r2
 801176e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011770:	68fb      	ldr	r3, [r7, #12]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3714      	adds	r7, #20
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr

0801177e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801177e:	b480      	push	{r7}
 8011780:	b085      	sub	sp, #20
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011790:	699b      	ldr	r3, [r3, #24]
 8011792:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801179a:	69db      	ldr	r3, [r3, #28]
 801179c:	68ba      	ldr	r2, [r7, #8]
 801179e:	4013      	ands	r3, r2
 80117a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	0c1b      	lsrs	r3, r3, #16
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	3714      	adds	r7, #20
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr

080117b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80117b2:	b480      	push	{r7}
 80117b4:	b085      	sub	sp, #20
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117c4:	699b      	ldr	r3, [r3, #24]
 80117c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117ce:	69db      	ldr	r3, [r3, #28]
 80117d0:	68ba      	ldr	r2, [r7, #8]
 80117d2:	4013      	ands	r3, r2
 80117d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	b29b      	uxth	r3, r3
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3714      	adds	r7, #20
 80117de:	46bd      	mov	sp, r7
 80117e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e4:	4770      	bx	lr

080117e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80117e6:	b480      	push	{r7}
 80117e8:	b085      	sub	sp, #20
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
 80117ee:	460b      	mov	r3, r1
 80117f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80117f6:	78fb      	ldrb	r3, [r7, #3]
 80117f8:	015a      	lsls	r2, r3, #5
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	4413      	add	r3, r2
 80117fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801180c:	695b      	ldr	r3, [r3, #20]
 801180e:	68ba      	ldr	r2, [r7, #8]
 8011810:	4013      	ands	r3, r2
 8011812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011814:	68bb      	ldr	r3, [r7, #8]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3714      	adds	r7, #20
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr

08011822 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011822:	b480      	push	{r7}
 8011824:	b087      	sub	sp, #28
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
 801182a:	460b      	mov	r3, r1
 801182c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011838:	691b      	ldr	r3, [r3, #16]
 801183a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011844:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011846:	78fb      	ldrb	r3, [r7, #3]
 8011848:	f003 030f 	and.w	r3, r3, #15
 801184c:	68fa      	ldr	r2, [r7, #12]
 801184e:	fa22 f303 	lsr.w	r3, r2, r3
 8011852:	01db      	lsls	r3, r3, #7
 8011854:	b2db      	uxtb	r3, r3
 8011856:	693a      	ldr	r2, [r7, #16]
 8011858:	4313      	orrs	r3, r2
 801185a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801185c:	78fb      	ldrb	r3, [r7, #3]
 801185e:	015a      	lsls	r2, r3, #5
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	4413      	add	r3, r2
 8011864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011868:	689b      	ldr	r3, [r3, #8]
 801186a:	693a      	ldr	r2, [r7, #16]
 801186c:	4013      	ands	r3, r2
 801186e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011870:	68bb      	ldr	r3, [r7, #8]
}
 8011872:	4618      	mov	r0, r3
 8011874:	371c      	adds	r7, #28
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr

0801187e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801187e:	b480      	push	{r7}
 8011880:	b083      	sub	sp, #12
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	695b      	ldr	r3, [r3, #20]
 801188a:	f003 0301 	and.w	r3, r3, #1
}
 801188e:	4618      	mov	r0, r3
 8011890:	370c      	adds	r7, #12
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr
	...

0801189c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 801189c:	b480      	push	{r7}
 801189e:	b085      	sub	sp, #20
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118b6:	4619      	mov	r1, r3
 80118b8:	4b09      	ldr	r3, [pc, #36]	@ (80118e0 <USB_ActivateSetup+0x44>)
 80118ba:	4013      	ands	r3, r2
 80118bc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	68fa      	ldr	r2, [r7, #12]
 80118c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80118cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80118d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80118d2:	2300      	movs	r3, #0
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3714      	adds	r7, #20
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr
 80118e0:	fffff800 	.word	0xfffff800

080118e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b087      	sub	sp, #28
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	460b      	mov	r3, r1
 80118ee:	607a      	str	r2, [r7, #4]
 80118f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	333c      	adds	r3, #60	@ 0x3c
 80118fa:	3304      	adds	r3, #4
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	4a26      	ldr	r2, [pc, #152]	@ (801199c <USB_EP0_OutStart+0xb8>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d90a      	bls.n	801191e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011918:	d101      	bne.n	801191e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801191a:	2300      	movs	r3, #0
 801191c:	e037      	b.n	801198e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011924:	461a      	mov	r2, r3
 8011926:	2300      	movs	r3, #0
 8011928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011930:	691b      	ldr	r3, [r3, #16]
 8011932:	697a      	ldr	r2, [r7, #20]
 8011934:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011938:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801193c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011944:	691b      	ldr	r3, [r3, #16]
 8011946:	697a      	ldr	r2, [r7, #20]
 8011948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801194c:	f043 0318 	orr.w	r3, r3, #24
 8011950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011958:	691b      	ldr	r3, [r3, #16]
 801195a:	697a      	ldr	r2, [r7, #20]
 801195c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011960:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8011964:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011966:	7afb      	ldrb	r3, [r7, #11]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d10f      	bne.n	801198c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011972:	461a      	mov	r2, r3
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	697a      	ldr	r2, [r7, #20]
 8011982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011986:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801198a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801198c:	2300      	movs	r3, #0
}
 801198e:	4618      	mov	r0, r3
 8011990:	371c      	adds	r7, #28
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop
 801199c:	4f54300a 	.word	0x4f54300a

080119a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b085      	sub	sp, #20
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80119a8:	2300      	movs	r3, #0
 80119aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	3301      	adds	r3, #1
 80119b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80119b8:	d901      	bls.n	80119be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80119ba:	2303      	movs	r3, #3
 80119bc:	e01b      	b.n	80119f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	691b      	ldr	r3, [r3, #16]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	daf2      	bge.n	80119ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80119c6:	2300      	movs	r3, #0
 80119c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	691b      	ldr	r3, [r3, #16]
 80119ce:	f043 0201 	orr.w	r2, r3, #1
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	3301      	adds	r3, #1
 80119da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80119e2:	d901      	bls.n	80119e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80119e4:	2303      	movs	r3, #3
 80119e6:	e006      	b.n	80119f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	691b      	ldr	r3, [r3, #16]
 80119ec:	f003 0301 	and.w	r3, r3, #1
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d0f0      	beq.n	80119d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80119f4:	2300      	movs	r3, #0
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3714      	adds	r7, #20
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr
	...

08011a04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011a08:	4904      	ldr	r1, [pc, #16]	@ (8011a1c <MX_FATFS_Init+0x18>)
 8011a0a:	4805      	ldr	r0, [pc, #20]	@ (8011a20 <MX_FATFS_Init+0x1c>)
 8011a0c:	f003 fcd4 	bl	80153b8 <FATFS_LinkDriver>
 8011a10:	4603      	mov	r3, r0
 8011a12:	461a      	mov	r2, r3
 8011a14:	4b03      	ldr	r3, [pc, #12]	@ (8011a24 <MX_FATFS_Init+0x20>)
 8011a16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011a18:	bf00      	nop
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	240009dc 	.word	0x240009dc
 8011a20:	080191c4 	.word	0x080191c4
 8011a24:	240009d8 	.word	0x240009d8

08011a28 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011a32:	f000 f879 	bl	8011b28 <BSP_SD_IsDetected>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b01      	cmp	r3, #1
 8011a3a:	d001      	beq.n	8011a40 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011a3c:	2302      	movs	r3, #2
 8011a3e:	e012      	b.n	8011a66 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011a40:	480b      	ldr	r0, [pc, #44]	@ (8011a70 <BSP_SD_Init+0x48>)
 8011a42:	f7f9 fc51 	bl	800b2e8 <HAL_SD_Init>
 8011a46:	4603      	mov	r3, r0
 8011a48:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011a4a:	79fb      	ldrb	r3, [r7, #7]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d109      	bne.n	8011a64 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011a50:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8011a54:	4806      	ldr	r0, [pc, #24]	@ (8011a70 <BSP_SD_Init+0x48>)
 8011a56:	f7fa fb0d 	bl	800c074 <HAL_SD_ConfigWideBusOperation>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d001      	beq.n	8011a64 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011a60:	2301      	movs	r3, #1
 8011a62:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011a64:	79fb      	ldrb	r3, [r7, #7]
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3708      	adds	r7, #8
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	24000750 	.word	0x24000750

08011a74 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b088      	sub	sp, #32
 8011a78:	af02      	add	r7, sp, #8
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	607a      	str	r2, [r7, #4]
 8011a80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011a82:	2300      	movs	r3, #0
 8011a84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	9300      	str	r3, [sp, #0]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	68ba      	ldr	r2, [r7, #8]
 8011a8e:	68f9      	ldr	r1, [r7, #12]
 8011a90:	4806      	ldr	r0, [pc, #24]	@ (8011aac <BSP_SD_ReadBlocks+0x38>)
 8011a92:	f7f9 fd49 	bl	800b528 <HAL_SD_ReadBlocks>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d001      	beq.n	8011aa0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3718      	adds	r7, #24
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	24000750 	.word	0x24000750

08011ab0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b088      	sub	sp, #32
 8011ab4:	af02      	add	r7, sp, #8
 8011ab6:	60f8      	str	r0, [r7, #12]
 8011ab8:	60b9      	str	r1, [r7, #8]
 8011aba:	607a      	str	r2, [r7, #4]
 8011abc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	9300      	str	r3, [sp, #0]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	68ba      	ldr	r2, [r7, #8]
 8011aca:	68f9      	ldr	r1, [r7, #12]
 8011acc:	4806      	ldr	r0, [pc, #24]	@ (8011ae8 <BSP_SD_WriteBlocks+0x38>)
 8011ace:	f7f9 feb5 	bl	800b83c <HAL_SD_WriteBlocks>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d001      	beq.n	8011adc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011ad8:	2301      	movs	r3, #1
 8011ada:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3718      	adds	r7, #24
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	24000750 	.word	0x24000750

08011aec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011af0:	4805      	ldr	r0, [pc, #20]	@ (8011b08 <BSP_SD_GetCardState+0x1c>)
 8011af2:	f7fa fbd1 	bl	800c298 <HAL_SD_GetCardState>
 8011af6:	4603      	mov	r3, r0
 8011af8:	2b04      	cmp	r3, #4
 8011afa:	bf14      	ite	ne
 8011afc:	2301      	movne	r3, #1
 8011afe:	2300      	moveq	r3, #0
 8011b00:	b2db      	uxtb	r3, r3
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	24000750 	.word	0x24000750

08011b0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011b14:	6879      	ldr	r1, [r7, #4]
 8011b16:	4803      	ldr	r0, [pc, #12]	@ (8011b24 <BSP_SD_GetCardInfo+0x18>)
 8011b18:	f7fa fa80 	bl	800c01c <HAL_SD_GetCardInfo>
}
 8011b1c:	bf00      	nop
 8011b1e:	3708      	adds	r7, #8
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	24000750 	.word	0x24000750

08011b28 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011b2e:	2301      	movs	r3, #1
 8011b30:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011b32:	f000 f80b 	bl	8011b4c <BSP_PlatformIsDetected>
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d101      	bne.n	8011b40 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011b40:	79fb      	ldrb	r3, [r7, #7]
 8011b42:	b2db      	uxtb	r3, r3
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011b52:	2301      	movs	r3, #1
 8011b54:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011b56:	2102      	movs	r1, #2
 8011b58:	4806      	ldr	r0, [pc, #24]	@ (8011b74 <BSP_PlatformIsDetected+0x28>)
 8011b5a:	f7f3 fab1 	bl	80050c0 <HAL_GPIO_ReadPin>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d001      	beq.n	8011b68 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8011b64:	2300      	movs	r3, #0
 8011b66:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011b68:	79fb      	ldrb	r3, [r7, #7]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3708      	adds	r7, #8
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	58020000 	.word	0x58020000

08011b78 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	4603      	mov	r3, r0
 8011b80:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011b82:	4b0b      	ldr	r3, [pc, #44]	@ (8011bb0 <SD_CheckStatus+0x38>)
 8011b84:	2201      	movs	r2, #1
 8011b86:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011b88:	f7ff ffb0 	bl	8011aec <BSP_SD_GetCardState>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d107      	bne.n	8011ba2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011b92:	4b07      	ldr	r3, [pc, #28]	@ (8011bb0 <SD_CheckStatus+0x38>)
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	f023 0301 	bic.w	r3, r3, #1
 8011b9c:	b2da      	uxtb	r2, r3
 8011b9e:	4b04      	ldr	r3, [pc, #16]	@ (8011bb0 <SD_CheckStatus+0x38>)
 8011ba0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011ba2:	4b03      	ldr	r3, [pc, #12]	@ (8011bb0 <SD_CheckStatus+0x38>)
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	b2db      	uxtb	r3, r3
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3708      	adds	r7, #8
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	24000031 	.word	0x24000031

08011bb4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	4603      	mov	r3, r0
 8011bbc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8011bec <SD_initialize+0x38>)
 8011bc0:	2201      	movs	r2, #1
 8011bc2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011bc4:	f7ff ff30 	bl	8011a28 <BSP_SD_Init>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d107      	bne.n	8011bde <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8011bce:	79fb      	ldrb	r3, [r7, #7]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7ff ffd1 	bl	8011b78 <SD_CheckStatus>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	461a      	mov	r2, r3
 8011bda:	4b04      	ldr	r3, [pc, #16]	@ (8011bec <SD_initialize+0x38>)
 8011bdc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011bde:	4b03      	ldr	r3, [pc, #12]	@ (8011bec <SD_initialize+0x38>)
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	b2db      	uxtb	r3, r3
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3708      	adds	r7, #8
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	24000031 	.word	0x24000031

08011bf0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011bfa:	79fb      	ldrb	r3, [r7, #7]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7ff ffbb 	bl	8011b78 <SD_CheckStatus>
 8011c02:	4603      	mov	r3, r0
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b086      	sub	sp, #24
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60b9      	str	r1, [r7, #8]
 8011c14:	607a      	str	r2, [r7, #4]
 8011c16:	603b      	str	r3, [r7, #0]
 8011c18:	4603      	mov	r3, r0
 8011c1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8011c20:	f04f 33ff 	mov.w	r3, #4294967295
 8011c24:	683a      	ldr	r2, [r7, #0]
 8011c26:	6879      	ldr	r1, [r7, #4]
 8011c28:	68b8      	ldr	r0, [r7, #8]
 8011c2a:	f7ff ff23 	bl	8011a74 <BSP_SD_ReadBlocks>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d107      	bne.n	8011c44 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011c34:	bf00      	nop
 8011c36:	f7ff ff59 	bl	8011aec <BSP_SD_GetCardState>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d1fa      	bne.n	8011c36 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8011c40:	2300      	movs	r3, #0
 8011c42:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3718      	adds	r7, #24
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}

08011c4e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011c4e:	b580      	push	{r7, lr}
 8011c50:	b086      	sub	sp, #24
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	607a      	str	r2, [r7, #4]
 8011c58:	603b      	str	r3, [r7, #0]
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011c62:	f04f 33ff 	mov.w	r3, #4294967295
 8011c66:	683a      	ldr	r2, [r7, #0]
 8011c68:	6879      	ldr	r1, [r7, #4]
 8011c6a:	68b8      	ldr	r0, [r7, #8]
 8011c6c:	f7ff ff20 	bl	8011ab0 <BSP_SD_WriteBlocks>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d107      	bne.n	8011c86 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8011c76:	bf00      	nop
 8011c78:	f7ff ff38 	bl	8011aec <BSP_SD_GetCardState>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d1fa      	bne.n	8011c78 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8011c82:	2300      	movs	r3, #0
 8011c84:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3718      	adds	r7, #24
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b08c      	sub	sp, #48	@ 0x30
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	4603      	mov	r3, r0
 8011c98:	603a      	str	r2, [r7, #0]
 8011c9a:	71fb      	strb	r3, [r7, #7]
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011ca6:	4b25      	ldr	r3, [pc, #148]	@ (8011d3c <SD_ioctl+0xac>)
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	f003 0301 	and.w	r3, r3, #1
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d001      	beq.n	8011cb8 <SD_ioctl+0x28>
 8011cb4:	2303      	movs	r3, #3
 8011cb6:	e03c      	b.n	8011d32 <SD_ioctl+0xa2>

  switch (cmd)
 8011cb8:	79bb      	ldrb	r3, [r7, #6]
 8011cba:	2b03      	cmp	r3, #3
 8011cbc:	d834      	bhi.n	8011d28 <SD_ioctl+0x98>
 8011cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8011cc4 <SD_ioctl+0x34>)
 8011cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc4:	08011cd5 	.word	0x08011cd5
 8011cc8:	08011cdd 	.word	0x08011cdd
 8011ccc:	08011cf5 	.word	0x08011cf5
 8011cd0:	08011d0f 	.word	0x08011d0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011cda:	e028      	b.n	8011d2e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011cdc:	f107 0308 	add.w	r3, r7, #8
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7ff ff13 	bl	8011b0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011ce6:	6a3a      	ldr	r2, [r7, #32]
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011cec:	2300      	movs	r3, #0
 8011cee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011cf2:	e01c      	b.n	8011d2e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011cf4:	f107 0308 	add.w	r3, r7, #8
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7ff ff07 	bl	8011b0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d00:	b29a      	uxth	r2, r3
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011d06:	2300      	movs	r3, #0
 8011d08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011d0c:	e00f      	b.n	8011d2e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011d0e:	f107 0308 	add.w	r3, r7, #8
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7ff fefa 	bl	8011b0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d1a:	0a5a      	lsrs	r2, r3, #9
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011d20:	2300      	movs	r3, #0
 8011d22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011d26:	e002      	b.n	8011d2e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011d28:	2304      	movs	r3, #4
 8011d2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3730      	adds	r7, #48	@ 0x30
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	24000031 	.word	0x24000031

08011d40 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b084      	sub	sp, #16
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	460b      	mov	r3, r1
 8011d4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8011d4c:	f44f 701d 	mov.w	r0, #628	@ 0x274
 8011d50:	f004 f836 	bl	8015dc0 <USBD_static_malloc>
 8011d54:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d109      	bne.n	8011d70 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	32b0      	adds	r2, #176	@ 0xb0
 8011d66:	2100      	movs	r1, #0
 8011d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011d6c:	2302      	movs	r3, #2
 8011d6e:	e06e      	b.n	8011e4e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	32b0      	adds	r2, #176	@ 0xb0
 8011d7a:	68f9      	ldr	r1, [r7, #12]
 8011d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	32b0      	adds	r2, #176	@ 0xb0
 8011d8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	7c1b      	ldrb	r3, [r3, #16]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d12b      	bne.n	8011df4 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8011e58 <USBD_MSC_Init+0x118>)
 8011d9e:	7819      	ldrb	r1, [r3, #0]
 8011da0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011da4:	2202      	movs	r2, #2
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f003 fec7 	bl	8015b3a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011dac:	4b2a      	ldr	r3, [pc, #168]	@ (8011e58 <USBD_MSC_Init+0x118>)
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	f003 020f 	and.w	r2, r3, #15
 8011db4:	6879      	ldr	r1, [r7, #4]
 8011db6:	4613      	mov	r3, r2
 8011db8:	009b      	lsls	r3, r3, #2
 8011dba:	4413      	add	r3, r2
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	440b      	add	r3, r1
 8011dc0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011dc8:	4b24      	ldr	r3, [pc, #144]	@ (8011e5c <USBD_MSC_Init+0x11c>)
 8011dca:	7819      	ldrb	r1, [r3, #0]
 8011dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011dd0:	2202      	movs	r2, #2
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f003 feb1 	bl	8015b3a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011dd8:	4b20      	ldr	r3, [pc, #128]	@ (8011e5c <USBD_MSC_Init+0x11c>)
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	f003 020f 	and.w	r2, r3, #15
 8011de0:	6879      	ldr	r1, [r7, #4]
 8011de2:	4613      	mov	r3, r2
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	4413      	add	r3, r2
 8011de8:	009b      	lsls	r3, r3, #2
 8011dea:	440b      	add	r3, r1
 8011dec:	3324      	adds	r3, #36	@ 0x24
 8011dee:	2201      	movs	r2, #1
 8011df0:	801a      	strh	r2, [r3, #0]
 8011df2:	e028      	b.n	8011e46 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011df4:	4b18      	ldr	r3, [pc, #96]	@ (8011e58 <USBD_MSC_Init+0x118>)
 8011df6:	7819      	ldrb	r1, [r3, #0]
 8011df8:	2340      	movs	r3, #64	@ 0x40
 8011dfa:	2202      	movs	r2, #2
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f003 fe9c 	bl	8015b3a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011e02:	4b15      	ldr	r3, [pc, #84]	@ (8011e58 <USBD_MSC_Init+0x118>)
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	f003 020f 	and.w	r2, r3, #15
 8011e0a:	6879      	ldr	r1, [r7, #4]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	4413      	add	r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	440b      	add	r3, r1
 8011e16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8011e5c <USBD_MSC_Init+0x11c>)
 8011e20:	7819      	ldrb	r1, [r3, #0]
 8011e22:	2340      	movs	r3, #64	@ 0x40
 8011e24:	2202      	movs	r2, #2
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f003 fe87 	bl	8015b3a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8011e5c <USBD_MSC_Init+0x11c>)
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	f003 020f 	and.w	r2, r3, #15
 8011e34:	6879      	ldr	r1, [r7, #4]
 8011e36:	4613      	mov	r3, r2
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	4413      	add	r3, r2
 8011e3c:	009b      	lsls	r3, r3, #2
 8011e3e:	440b      	add	r3, r1
 8011e40:	3324      	adds	r3, #36	@ 0x24
 8011e42:	2201      	movs	r2, #1
 8011e44:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f000 fa2c 	bl	80122a4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8011e4c:	2300      	movs	r3, #0
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3710      	adds	r7, #16
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
 8011e56:	bf00      	nop
 8011e58:	24000097 	.word	0x24000097
 8011e5c:	24000096 	.word	0x24000096

08011e60 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	460b      	mov	r3, r1
 8011e6a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8011e6c:	4b26      	ldr	r3, [pc, #152]	@ (8011f08 <USBD_MSC_DeInit+0xa8>)
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	4619      	mov	r1, r3
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f003 fe87 	bl	8015b86 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8011e78:	4b23      	ldr	r3, [pc, #140]	@ (8011f08 <USBD_MSC_DeInit+0xa8>)
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	f003 020f 	and.w	r2, r3, #15
 8011e80:	6879      	ldr	r1, [r7, #4]
 8011e82:	4613      	mov	r3, r2
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	4413      	add	r3, r2
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	440b      	add	r3, r1
 8011e8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011e90:	2200      	movs	r2, #0
 8011e92:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8011e94:	4b1d      	ldr	r3, [pc, #116]	@ (8011f0c <USBD_MSC_DeInit+0xac>)
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	4619      	mov	r1, r3
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f003 fe73 	bl	8015b86 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8011ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8011f0c <USBD_MSC_DeInit+0xac>)
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	f003 020f 	and.w	r2, r3, #15
 8011ea8:	6879      	ldr	r1, [r7, #4]
 8011eaa:	4613      	mov	r3, r2
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	4413      	add	r3, r2
 8011eb0:	009b      	lsls	r3, r3, #2
 8011eb2:	440b      	add	r3, r1
 8011eb4:	3324      	adds	r3, #36	@ 0x24
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	32b0      	adds	r2, #176	@ 0xb0
 8011ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d018      	beq.n	8011efe <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f000 fa67 	bl	80123a0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	32b0      	adds	r2, #176	@ 0xb0
 8011edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f003 ff7b 	bl	8015ddc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	32b0      	adds	r2, #176	@ 0xb0
 8011ef0:	2100      	movs	r1, #0
 8011ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011efe:	2300      	movs	r3, #0
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	24000097 	.word	0x24000097
 8011f0c:	24000096 	.word	0x24000096

08011f10 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b086      	sub	sp, #24
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	32b0      	adds	r2, #176	@ 0xb0
 8011f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f28:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d101      	bne.n	8011f3c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8011f38:	2303      	movs	r3, #3
 8011f3a:	e0e1      	b.n	8012100 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d053      	beq.n	8011ff0 <USBD_MSC_Setup+0xe0>
 8011f48:	2b20      	cmp	r3, #32
 8011f4a:	f040 80d1 	bne.w	80120f0 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	785b      	ldrb	r3, [r3, #1]
 8011f52:	2bfe      	cmp	r3, #254	@ 0xfe
 8011f54:	d002      	beq.n	8011f5c <USBD_MSC_Setup+0x4c>
 8011f56:	2bff      	cmp	r3, #255	@ 0xff
 8011f58:	d02a      	beq.n	8011fb0 <USBD_MSC_Setup+0xa0>
 8011f5a:	e041      	b.n	8011fe0 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	885b      	ldrh	r3, [r3, #2]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d11e      	bne.n	8011fa2 <USBD_MSC_Setup+0x92>
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	88db      	ldrh	r3, [r3, #6]
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d11a      	bne.n	8011fa2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	da15      	bge.n	8011fa2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	33b0      	adds	r3, #176	@ 0xb0
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	4413      	add	r3, r2
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	699b      	ldr	r3, [r3, #24]
 8011f88:	4798      	blx	r3
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	2201      	movs	r2, #1
 8011f96:	4619      	mov	r1, r3
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f003 f95d 	bl	8015258 <USBD_CtlSendData>
 8011f9e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011fa0:	e025      	b.n	8011fee <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011fa2:	6839      	ldr	r1, [r7, #0]
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f003 f8da 	bl	801515e <USBD_CtlError>
            ret = USBD_FAIL;
 8011faa:	2303      	movs	r3, #3
 8011fac:	75fb      	strb	r3, [r7, #23]
          break;
 8011fae:	e01e      	b.n	8011fee <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	885b      	ldrh	r3, [r3, #2]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d10c      	bne.n	8011fd2 <USBD_MSC_Setup+0xc2>
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	88db      	ldrh	r3, [r3, #6]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d108      	bne.n	8011fd2 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	db03      	blt.n	8011fd2 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 f9b4 	bl	8012338 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011fd0:	e00d      	b.n	8011fee <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011fd2:	6839      	ldr	r1, [r7, #0]
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f003 f8c2 	bl	801515e <USBD_CtlError>
            ret = USBD_FAIL;
 8011fda:	2303      	movs	r3, #3
 8011fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8011fde:	e006      	b.n	8011fee <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8011fe0:	6839      	ldr	r1, [r7, #0]
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f003 f8bb 	bl	801515e <USBD_CtlError>
          ret = USBD_FAIL;
 8011fe8:	2303      	movs	r3, #3
 8011fea:	75fb      	strb	r3, [r7, #23]
          break;
 8011fec:	bf00      	nop
      }
      break;
 8011fee:	e086      	b.n	80120fe <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	785b      	ldrb	r3, [r3, #1]
 8011ff4:	2b0b      	cmp	r3, #11
 8011ff6:	d872      	bhi.n	80120de <USBD_MSC_Setup+0x1ce>
 8011ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8012000 <USBD_MSC_Setup+0xf0>)
 8011ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ffe:	bf00      	nop
 8012000:	08012031 	.word	0x08012031
 8012004:	080120ad 	.word	0x080120ad
 8012008:	080120df 	.word	0x080120df
 801200c:	080120df 	.word	0x080120df
 8012010:	080120df 	.word	0x080120df
 8012014:	080120df 	.word	0x080120df
 8012018:	080120df 	.word	0x080120df
 801201c:	080120df 	.word	0x080120df
 8012020:	080120df 	.word	0x080120df
 8012024:	080120df 	.word	0x080120df
 8012028:	0801205b 	.word	0x0801205b
 801202c:	08012085 	.word	0x08012085
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012036:	b2db      	uxtb	r3, r3
 8012038:	2b03      	cmp	r3, #3
 801203a:	d107      	bne.n	801204c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801203c:	f107 030e 	add.w	r3, r7, #14
 8012040:	2202      	movs	r2, #2
 8012042:	4619      	mov	r1, r3
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f003 f907 	bl	8015258 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801204a:	e050      	b.n	80120ee <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801204c:	6839      	ldr	r1, [r7, #0]
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f003 f885 	bl	801515e <USBD_CtlError>
            ret = USBD_FAIL;
 8012054:	2303      	movs	r3, #3
 8012056:	75fb      	strb	r3, [r7, #23]
          break;
 8012058:	e049      	b.n	80120ee <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012060:	b2db      	uxtb	r3, r3
 8012062:	2b03      	cmp	r3, #3
 8012064:	d107      	bne.n	8012076 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	3304      	adds	r3, #4
 801206a:	2201      	movs	r2, #1
 801206c:	4619      	mov	r1, r3
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f003 f8f2 	bl	8015258 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012074:	e03b      	b.n	80120ee <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8012076:	6839      	ldr	r1, [r7, #0]
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f003 f870 	bl	801515e <USBD_CtlError>
            ret = USBD_FAIL;
 801207e:	2303      	movs	r3, #3
 8012080:	75fb      	strb	r3, [r7, #23]
          break;
 8012082:	e034      	b.n	80120ee <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801208a:	b2db      	uxtb	r3, r3
 801208c:	2b03      	cmp	r3, #3
 801208e:	d106      	bne.n	801209e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	885b      	ldrh	r3, [r3, #2]
 8012094:	b2db      	uxtb	r3, r3
 8012096:	461a      	mov	r2, r3
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801209c:	e027      	b.n	80120ee <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801209e:	6839      	ldr	r1, [r7, #0]
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f003 f85c 	bl	801515e <USBD_CtlError>
            ret = USBD_FAIL;
 80120a6:	2303      	movs	r3, #3
 80120a8:	75fb      	strb	r3, [r7, #23]
          break;
 80120aa:	e020      	b.n	80120ee <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120b2:	b2db      	uxtb	r3, r3
 80120b4:	2b03      	cmp	r3, #3
 80120b6:	d119      	bne.n	80120ec <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	885b      	ldrh	r3, [r3, #2]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d115      	bne.n	80120ec <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	889b      	ldrh	r3, [r3, #4]
 80120c4:	b2db      	uxtb	r3, r3
 80120c6:	4619      	mov	r1, r3
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f003 fd7b 	bl	8015bc4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	889b      	ldrh	r3, [r3, #4]
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	4619      	mov	r1, r3
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 fb2e 	bl	8012738 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80120dc:	e006      	b.n	80120ec <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80120de:	6839      	ldr	r1, [r7, #0]
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f003 f83c 	bl	801515e <USBD_CtlError>
          ret = USBD_FAIL;
 80120e6:	2303      	movs	r3, #3
 80120e8:	75fb      	strb	r3, [r7, #23]
          break;
 80120ea:	e000      	b.n	80120ee <USBD_MSC_Setup+0x1de>
          break;
 80120ec:	bf00      	nop
      }
      break;
 80120ee:	e006      	b.n	80120fe <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f003 f833 	bl	801515e <USBD_CtlError>
      ret = USBD_FAIL;
 80120f8:	2303      	movs	r3, #3
 80120fa:	75fb      	strb	r3, [r7, #23]
      break;
 80120fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80120fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012100:	4618      	mov	r0, r3
 8012102:	3718      	adds	r7, #24
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	460b      	mov	r3, r1
 8012112:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8012114:	78fb      	ldrb	r3, [r7, #3]
 8012116:	4619      	mov	r1, r3
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f000 f959 	bl	80123d0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801211e:	2300      	movs	r3, #0
}
 8012120:	4618      	mov	r0, r3
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	460b      	mov	r3, r1
 8012132:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8012134:	78fb      	ldrb	r3, [r7, #3]
 8012136:	4619      	mov	r1, r3
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f000 f983 	bl	8012444 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801213e:	2300      	movs	r3, #0
}
 8012140:	4618      	mov	r0, r3
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8012150:	2181      	movs	r1, #129	@ 0x81
 8012152:	4812      	ldr	r0, [pc, #72]	@ (801219c <USBD_MSC_GetHSCfgDesc+0x54>)
 8012154:	f002 f9a4 	bl	80144a0 <USBD_GetEpDesc>
 8012158:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801215a:	2101      	movs	r1, #1
 801215c:	480f      	ldr	r0, [pc, #60]	@ (801219c <USBD_MSC_GetHSCfgDesc+0x54>)
 801215e:	f002 f99f 	bl	80144a0 <USBD_GetEpDesc>
 8012162:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d006      	beq.n	8012178 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2200      	movs	r2, #0
 801216e:	711a      	strb	r2, [r3, #4]
 8012170:	2200      	movs	r2, #0
 8012172:	f042 0202 	orr.w	r2, r2, #2
 8012176:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d006      	beq.n	801218c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	2200      	movs	r2, #0
 8012182:	711a      	strb	r2, [r3, #4]
 8012184:	2200      	movs	r2, #0
 8012186:	f042 0202 	orr.w	r2, r2, #2
 801218a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2220      	movs	r2, #32
 8012190:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8012192:	4b02      	ldr	r3, [pc, #8]	@ (801219c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8012194:	4618      	mov	r0, r3
 8012196:	3710      	adds	r7, #16
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	2400006c 	.word	0x2400006c

080121a0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80121a8:	2181      	movs	r1, #129	@ 0x81
 80121aa:	4812      	ldr	r0, [pc, #72]	@ (80121f4 <USBD_MSC_GetFSCfgDesc+0x54>)
 80121ac:	f002 f978 	bl	80144a0 <USBD_GetEpDesc>
 80121b0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80121b2:	2101      	movs	r1, #1
 80121b4:	480f      	ldr	r0, [pc, #60]	@ (80121f4 <USBD_MSC_GetFSCfgDesc+0x54>)
 80121b6:	f002 f973 	bl	80144a0 <USBD_GetEpDesc>
 80121ba:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d006      	beq.n	80121d0 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2200      	movs	r2, #0
 80121c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80121ca:	711a      	strb	r2, [r3, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d006      	beq.n	80121e4 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	2200      	movs	r2, #0
 80121da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80121de:	711a      	strb	r2, [r3, #4]
 80121e0:	2200      	movs	r2, #0
 80121e2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2220      	movs	r2, #32
 80121e8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80121ea:	4b02      	ldr	r3, [pc, #8]	@ (80121f4 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3710      	adds	r7, #16
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	2400006c 	.word	0x2400006c

080121f8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8012200:	2181      	movs	r1, #129	@ 0x81
 8012202:	4812      	ldr	r0, [pc, #72]	@ (801224c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8012204:	f002 f94c 	bl	80144a0 <USBD_GetEpDesc>
 8012208:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801220a:	2101      	movs	r1, #1
 801220c:	480f      	ldr	r0, [pc, #60]	@ (801224c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801220e:	f002 f947 	bl	80144a0 <USBD_GetEpDesc>
 8012212:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d006      	beq.n	8012228 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2200      	movs	r2, #0
 801221e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012222:	711a      	strb	r2, [r3, #4]
 8012224:	2200      	movs	r2, #0
 8012226:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d006      	beq.n	801223c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	2200      	movs	r2, #0
 8012232:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012236:	711a      	strb	r2, [r3, #4]
 8012238:	2200      	movs	r2, #0
 801223a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2220      	movs	r2, #32
 8012240:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8012242:	4b02      	ldr	r3, [pc, #8]	@ (801224c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8012244:	4618      	mov	r0, r3
 8012246:	3710      	adds	r7, #16
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	2400006c 	.word	0x2400006c

08012250 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012250:	b480      	push	{r7}
 8012252:	b083      	sub	sp, #12
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	220a      	movs	r2, #10
 801225c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801225e:	4b03      	ldr	r3, [pc, #12]	@ (801226c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012260:	4618      	mov	r0, r3
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr
 801226c:	2400008c 	.word	0x2400008c

08012270 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d101      	bne.n	8012284 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012280:	2303      	movs	r3, #3
 8012282:	e009      	b.n	8012298 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801228a:	687a      	ldr	r2, [r7, #4]
 801228c:	33b0      	adds	r3, #176	@ 0xb0
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	4413      	add	r3, r2
 8012292:	683a      	ldr	r2, [r7, #0]
 8012294:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012296:	2300      	movs	r3, #0
}
 8012298:	4618      	mov	r0, r3
 801229a:	370c      	adds	r7, #12
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	32b0      	adds	r2, #176	@ 0xb0
 80122b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d032      	beq.n	8012328 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2200      	movs	r2, #0
 80122c6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	2200      	movs	r2, #0
 80122cc:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2200      	movs	r2, #0
 80122d2:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2200      	movs	r2, #0
 80122da:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	2200      	movs	r2, #0
 80122e2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80122ec:	687a      	ldr	r2, [r7, #4]
 80122ee:	33b0      	adds	r3, #176	@ 0xb0
 80122f0:	009b      	lsls	r3, r3, #2
 80122f2:	4413      	add	r3, r2
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	2000      	movs	r0, #0
 80122fa:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80122fc:	4b0c      	ldr	r3, [pc, #48]	@ (8012330 <MSC_BOT_Init+0x8c>)
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	4619      	mov	r1, r3
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f003 fc5e 	bl	8015bc4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8012308:	4b0a      	ldr	r3, [pc, #40]	@ (8012334 <MSC_BOT_Init+0x90>)
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	4619      	mov	r1, r3
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f003 fc58 	bl	8015bc4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8012314:	4b06      	ldr	r3, [pc, #24]	@ (8012330 <MSC_BOT_Init+0x8c>)
 8012316:	7819      	ldrb	r1, [r3, #0]
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 801231e:	231f      	movs	r3, #31
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f003 fd18 	bl	8015d56 <USBD_LL_PrepareReceive>
 8012326:	e000      	b.n	801232a <MSC_BOT_Init+0x86>
    return;
 8012328:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801232a:	3710      	adds	r7, #16
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	24000097 	.word	0x24000097
 8012334:	24000096 	.word	0x24000096

08012338 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	32b0      	adds	r2, #176	@ 0xb0
 801234a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801234e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d01b      	beq.n	801238e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	2200      	movs	r2, #0
 801235a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	2201      	movs	r2, #1
 8012360:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8012362:	4b0d      	ldr	r3, [pc, #52]	@ (8012398 <MSC_BOT_Reset+0x60>)
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	4619      	mov	r1, r3
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f003 fc69 	bl	8015c40 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801236e:	4b0b      	ldr	r3, [pc, #44]	@ (801239c <MSC_BOT_Reset+0x64>)
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	4619      	mov	r1, r3
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f003 fc63 	bl	8015c40 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801237a:	4b08      	ldr	r3, [pc, #32]	@ (801239c <MSC_BOT_Reset+0x64>)
 801237c:	7819      	ldrb	r1, [r3, #0]
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8012384:	231f      	movs	r3, #31
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f003 fce5 	bl	8015d56 <USBD_LL_PrepareReceive>
 801238c:	e000      	b.n	8012390 <MSC_BOT_Reset+0x58>
    return;
 801238e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	24000096 	.word	0x24000096
 801239c:	24000097 	.word	0x24000097

080123a0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b085      	sub	sp, #20
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	32b0      	adds	r2, #176	@ 0xb0
 80123b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123b6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d002      	beq.n	80123c4 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2200      	movs	r2, #0
 80123c2:	721a      	strb	r2, [r3, #8]
  }
}
 80123c4:	bf00      	nop
 80123c6:	3714      	adds	r7, #20
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	460b      	mov	r3, r1
 80123da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	32b0      	adds	r2, #176	@ 0xb0
 80123e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123ea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d020      	beq.n	8012434 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	7a1b      	ldrb	r3, [r3, #8]
 80123f6:	2b02      	cmp	r3, #2
 80123f8:	d005      	beq.n	8012406 <MSC_BOT_DataIn+0x36>
 80123fa:	2b02      	cmp	r3, #2
 80123fc:	db1c      	blt.n	8012438 <MSC_BOT_DataIn+0x68>
 80123fe:	3b03      	subs	r3, #3
 8012400:	2b01      	cmp	r3, #1
 8012402:	d819      	bhi.n	8012438 <MSC_BOT_DataIn+0x68>
 8012404:	e011      	b.n	801242a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8012412:	461a      	mov	r2, r3
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 f9c9 	bl	80127ac <SCSI_ProcessCmd>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	da0d      	bge.n	801243c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012420:	2101      	movs	r1, #1
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 f90c 	bl	8012640 <MSC_BOT_SendCSW>
      }
      break;
 8012428:	e008      	b.n	801243c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801242a:	2100      	movs	r1, #0
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f000 f907 	bl	8012640 <MSC_BOT_SendCSW>
      break;
 8012432:	e004      	b.n	801243e <MSC_BOT_DataIn+0x6e>
    return;
 8012434:	bf00      	nop
 8012436:	e002      	b.n	801243e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8012438:	bf00      	nop
 801243a:	e000      	b.n	801243e <MSC_BOT_DataIn+0x6e>
      break;
 801243c:	bf00      	nop
  }
}
 801243e:	3710      	adds	r7, #16
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b084      	sub	sp, #16
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	460b      	mov	r3, r1
 801244e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	32b0      	adds	r2, #176	@ 0xb0
 801245a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801245e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d01c      	beq.n	80124a0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	7a1b      	ldrb	r3, [r3, #8]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d002      	beq.n	8012474 <MSC_BOT_DataOut+0x30>
 801246e:	2b01      	cmp	r3, #1
 8012470:	d004      	beq.n	801247c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8012472:	e018      	b.n	80124a6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f000 f819 	bl	80124ac <MSC_BOT_CBW_Decode>
      break;
 801247a:	e014      	b.n	80124a6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8012488:	461a      	mov	r2, r3
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f000 f98e 	bl	80127ac <SCSI_ProcessCmd>
 8012490:	4603      	mov	r3, r0
 8012492:	2b00      	cmp	r3, #0
 8012494:	da06      	bge.n	80124a4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012496:	2101      	movs	r1, #1
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 f8d1 	bl	8012640 <MSC_BOT_SendCSW>
      break;
 801249e:	e001      	b.n	80124a4 <MSC_BOT_DataOut+0x60>
    return;
 80124a0:	bf00      	nop
 80124a2:	e000      	b.n	80124a6 <MSC_BOT_DataOut+0x62>
      break;
 80124a4:	bf00      	nop
  }
}
 80124a6:	3710      	adds	r7, #16
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	32b0      	adds	r2, #176	@ 0xb0
 80124be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d079      	beq.n	80125be <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80124e2:	4b3a      	ldr	r3, [pc, #232]	@ (80125cc <MSC_BOT_CBW_Decode+0x120>)
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	4619      	mov	r1, r3
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f003 fc55 	bl	8015d98 <USBD_LL_GetRxDataSize>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b1f      	cmp	r3, #31
 80124f2:	d114      	bne.n	801251e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80124fa:	4a35      	ldr	r2, [pc, #212]	@ (80125d0 <MSC_BOT_CBW_Decode+0x124>)
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d10e      	bne.n	801251e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012506:	2b01      	cmp	r3, #1
 8012508:	d809      	bhi.n	801251e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8012510:	2b00      	cmp	r3, #0
 8012512:	d004      	beq.n	801251e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801251a:	2b10      	cmp	r3, #16
 801251c:	d90e      	bls.n	801253c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8012524:	2320      	movs	r3, #32
 8012526:	2205      	movs	r2, #5
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f000 fe54 	bl	80131d6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2202      	movs	r2, #2
 8012532:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f000 f8bd 	bl	80126b4 <MSC_BOT_Abort>
 801253a:	e043      	b.n	80125c4 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8012548:	461a      	mov	r2, r3
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f000 f92e 	bl	80127ac <SCSI_ProcessCmd>
 8012550:	4603      	mov	r3, r0
 8012552:	2b00      	cmp	r3, #0
 8012554:	da0c      	bge.n	8012570 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	7a1b      	ldrb	r3, [r3, #8]
 801255a:	2b05      	cmp	r3, #5
 801255c:	d104      	bne.n	8012568 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801255e:	2101      	movs	r1, #1
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 f86d 	bl	8012640 <MSC_BOT_SendCSW>
 8012566:	e02d      	b.n	80125c4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f000 f8a3 	bl	80126b4 <MSC_BOT_Abort>
 801256e:	e029      	b.n	80125c4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	7a1b      	ldrb	r3, [r3, #8]
 8012574:	2b02      	cmp	r3, #2
 8012576:	d024      	beq.n	80125c2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801257c:	2b01      	cmp	r3, #1
 801257e:	d020      	beq.n	80125c2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012584:	2b03      	cmp	r3, #3
 8012586:	d01c      	beq.n	80125c2 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	68db      	ldr	r3, [r3, #12]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d009      	beq.n	80125a4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f103 0110 	add.w	r1, r3, #16
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	461a      	mov	r2, r3
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 f819 	bl	80125d4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80125a2:	e00f      	b.n	80125c4 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	68db      	ldr	r3, [r3, #12]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d104      	bne.n	80125b6 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80125ac:	2100      	movs	r1, #0
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f000 f846 	bl	8012640 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80125b4:	e006      	b.n	80125c4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 f87c 	bl	80126b4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80125bc:	e002      	b.n	80125c4 <MSC_BOT_CBW_Decode+0x118>
    return;
 80125be:	bf00      	nop
 80125c0:	e000      	b.n	80125c4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80125c2:	bf00      	nop
    }
  }
}
 80125c4:	3710      	adds	r7, #16
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop
 80125cc:	24000097 	.word	0x24000097
 80125d0:	43425355 	.word	0x43425355

080125d4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b086      	sub	sp, #24
 80125d8:	af00      	add	r7, sp, #0
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	32b0      	adds	r2, #176	@ 0xb0
 80125ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125ee:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d01e      	beq.n	8012634 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80125fc:	687a      	ldr	r2, [r7, #4]
 80125fe:	4293      	cmp	r3, r2
 8012600:	bf28      	it	cs
 8012602:	4613      	movcs	r3, r2
 8012604:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	1ad2      	subs	r2, r2, r3
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	2200      	movs	r2, #0
 801261a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	2204      	movs	r2, #4
 8012622:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8012624:	4b05      	ldr	r3, [pc, #20]	@ (801263c <MSC_BOT_SendData+0x68>)
 8012626:	7819      	ldrb	r1, [r3, #0]
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	68ba      	ldr	r2, [r7, #8]
 801262c:	68f8      	ldr	r0, [r7, #12]
 801262e:	f003 fb71 	bl	8015d14 <USBD_LL_Transmit>
 8012632:	e000      	b.n	8012636 <MSC_BOT_SendData+0x62>
    return;
 8012634:	bf00      	nop
}
 8012636:	3718      	adds	r7, #24
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	24000096 	.word	0x24000096

08012640 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	460b      	mov	r3, r1
 801264a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	32b0      	adds	r2, #176	@ 0xb0
 8012656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801265a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d01d      	beq.n	801269e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	4a10      	ldr	r2, [pc, #64]	@ (80126a8 <MSC_BOT_SendCSW+0x68>)
 8012666:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	78fa      	ldrb	r2, [r7, #3]
 801266e:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	2200      	movs	r2, #0
 8012676:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8012678:	4b0c      	ldr	r3, [pc, #48]	@ (80126ac <MSC_BOT_SendCSW+0x6c>)
 801267a:	7819      	ldrb	r1, [r3, #0]
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 8012682:	230d      	movs	r3, #13
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f003 fb45 	bl	8015d14 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801268a:	4b09      	ldr	r3, [pc, #36]	@ (80126b0 <MSC_BOT_SendCSW+0x70>)
 801268c:	7819      	ldrb	r1, [r3, #0]
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8012694:	231f      	movs	r3, #31
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f003 fb5d 	bl	8015d56 <USBD_LL_PrepareReceive>
 801269c:	e000      	b.n	80126a0 <MSC_BOT_SendCSW+0x60>
    return;
 801269e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80126a0:	3710      	adds	r7, #16
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	53425355 	.word	0x53425355
 80126ac:	24000096 	.word	0x24000096
 80126b0:	24000097 	.word	0x24000097

080126b4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b084      	sub	sp, #16
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	32b0      	adds	r2, #176	@ 0xb0
 80126c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126ca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d02a      	beq.n	8012728 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d10e      	bne.n	80126fa <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d009      	beq.n	80126fa <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d105      	bne.n	80126fa <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80126ee:	4b10      	ldr	r3, [pc, #64]	@ (8012730 <MSC_BOT_Abort+0x7c>)
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	4619      	mov	r1, r3
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f003 fa84 	bl	8015c02 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80126fa:	4b0e      	ldr	r3, [pc, #56]	@ (8012734 <MSC_BOT_Abort+0x80>)
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	4619      	mov	r1, r3
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f003 fa7e 	bl	8015c02 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	7a5b      	ldrb	r3, [r3, #9]
 801270a:	2b02      	cmp	r3, #2
 801270c:	d10d      	bne.n	801272a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801270e:	4b09      	ldr	r3, [pc, #36]	@ (8012734 <MSC_BOT_Abort+0x80>)
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	4619      	mov	r1, r3
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f003 fa74 	bl	8015c02 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801271a:	4b05      	ldr	r3, [pc, #20]	@ (8012730 <MSC_BOT_Abort+0x7c>)
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	4619      	mov	r1, r3
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f003 fa6e 	bl	8015c02 <USBD_LL_StallEP>
 8012726:	e000      	b.n	801272a <MSC_BOT_Abort+0x76>
    return;
 8012728:	bf00      	nop
  }
}
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	24000097 	.word	0x24000097
 8012734:	24000096 	.word	0x24000096

08012738 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	460b      	mov	r3, r1
 8012742:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	32b0      	adds	r2, #176	@ 0xb0
 801274e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012752:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d01d      	beq.n	8012796 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	7a5b      	ldrb	r3, [r3, #9]
 801275e:	2b02      	cmp	r3, #2
 8012760:	d10c      	bne.n	801277c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8012762:	4b10      	ldr	r3, [pc, #64]	@ (80127a4 <MSC_BOT_CplClrFeature+0x6c>)
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	4619      	mov	r1, r3
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f003 fa4a 	bl	8015c02 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801276e:	4b0e      	ldr	r3, [pc, #56]	@ (80127a8 <MSC_BOT_CplClrFeature+0x70>)
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	4619      	mov	r1, r3
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f003 fa44 	bl	8015c02 <USBD_LL_StallEP>
 801277a:	e00f      	b.n	801279c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801277c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012780:	2b00      	cmp	r3, #0
 8012782:	da0a      	bge.n	801279a <MSC_BOT_CplClrFeature+0x62>
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	7a5b      	ldrb	r3, [r3, #9]
 8012788:	2b01      	cmp	r3, #1
 801278a:	d006      	beq.n	801279a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801278c:	2101      	movs	r1, #1
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7ff ff56 	bl	8012640 <MSC_BOT_SendCSW>
 8012794:	e002      	b.n	801279c <MSC_BOT_CplClrFeature+0x64>
    return;
 8012796:	bf00      	nop
 8012798:	e000      	b.n	801279c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 801279a:	bf00      	nop
  }
}
 801279c:	3710      	adds	r7, #16
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	bf00      	nop
 80127a4:	24000096 	.word	0x24000096
 80127a8:	24000097 	.word	0x24000097

080127ac <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b086      	sub	sp, #24
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	60f8      	str	r0, [r7, #12]
 80127b4:	460b      	mov	r3, r1
 80127b6:	607a      	str	r2, [r7, #4]
 80127b8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	32b0      	adds	r2, #176	@ 0xb0
 80127c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127c8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d102      	bne.n	80127d6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80127d0:	f04f 33ff 	mov.w	r3, #4294967295
 80127d4:	e168      	b.n	8012aa8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	2baa      	cmp	r3, #170	@ 0xaa
 80127dc:	f000 8144 	beq.w	8012a68 <SCSI_ProcessCmd+0x2bc>
 80127e0:	2baa      	cmp	r3, #170	@ 0xaa
 80127e2:	f300 8153 	bgt.w	8012a8c <SCSI_ProcessCmd+0x2e0>
 80127e6:	2ba8      	cmp	r3, #168	@ 0xa8
 80127e8:	f000 812c 	beq.w	8012a44 <SCSI_ProcessCmd+0x298>
 80127ec:	2ba8      	cmp	r3, #168	@ 0xa8
 80127ee:	f300 814d 	bgt.w	8012a8c <SCSI_ProcessCmd+0x2e0>
 80127f2:	2b5a      	cmp	r3, #90	@ 0x5a
 80127f4:	f300 80c0 	bgt.w	8012978 <SCSI_ProcessCmd+0x1cc>
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f2c0 8147 	blt.w	8012a8c <SCSI_ProcessCmd+0x2e0>
 80127fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8012800:	f200 8144 	bhi.w	8012a8c <SCSI_ProcessCmd+0x2e0>
 8012804:	a201      	add	r2, pc, #4	@ (adr r2, 801280c <SCSI_ProcessCmd+0x60>)
 8012806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801280a:	bf00      	nop
 801280c:	0801297f 	.word	0x0801297f
 8012810:	08012a8d 	.word	0x08012a8d
 8012814:	08012a8d 	.word	0x08012a8d
 8012818:	08012991 	.word	0x08012991
 801281c:	08012a8d 	.word	0x08012a8d
 8012820:	08012a8d 	.word	0x08012a8d
 8012824:	08012a8d 	.word	0x08012a8d
 8012828:	08012a8d 	.word	0x08012a8d
 801282c:	08012a8d 	.word	0x08012a8d
 8012830:	08012a8d 	.word	0x08012a8d
 8012834:	08012a8d 	.word	0x08012a8d
 8012838:	08012a8d 	.word	0x08012a8d
 801283c:	08012a8d 	.word	0x08012a8d
 8012840:	08012a8d 	.word	0x08012a8d
 8012844:	08012a8d 	.word	0x08012a8d
 8012848:	08012a8d 	.word	0x08012a8d
 801284c:	08012a8d 	.word	0x08012a8d
 8012850:	08012a8d 	.word	0x08012a8d
 8012854:	080129a3 	.word	0x080129a3
 8012858:	08012a8d 	.word	0x08012a8d
 801285c:	08012a8d 	.word	0x08012a8d
 8012860:	08012a8d 	.word	0x08012a8d
 8012864:	08012a8d 	.word	0x08012a8d
 8012868:	08012a8d 	.word	0x08012a8d
 801286c:	08012a8d 	.word	0x08012a8d
 8012870:	08012a8d 	.word	0x08012a8d
 8012874:	080129d9 	.word	0x080129d9
 8012878:	080129b5 	.word	0x080129b5
 801287c:	08012a8d 	.word	0x08012a8d
 8012880:	08012a8d 	.word	0x08012a8d
 8012884:	080129c7 	.word	0x080129c7
 8012888:	08012a8d 	.word	0x08012a8d
 801288c:	08012a8d 	.word	0x08012a8d
 8012890:	08012a8d 	.word	0x08012a8d
 8012894:	08012a8d 	.word	0x08012a8d
 8012898:	080129fd 	.word	0x080129fd
 801289c:	08012a8d 	.word	0x08012a8d
 80128a0:	08012a0f 	.word	0x08012a0f
 80128a4:	08012a8d 	.word	0x08012a8d
 80128a8:	08012a8d 	.word	0x08012a8d
 80128ac:	08012a33 	.word	0x08012a33
 80128b0:	08012a8d 	.word	0x08012a8d
 80128b4:	08012a57 	.word	0x08012a57
 80128b8:	08012a8d 	.word	0x08012a8d
 80128bc:	08012a8d 	.word	0x08012a8d
 80128c0:	08012a8d 	.word	0x08012a8d
 80128c4:	08012a8d 	.word	0x08012a8d
 80128c8:	08012a7b 	.word	0x08012a7b
 80128cc:	08012a8d 	.word	0x08012a8d
 80128d0:	08012a8d 	.word	0x08012a8d
 80128d4:	08012a8d 	.word	0x08012a8d
 80128d8:	08012a8d 	.word	0x08012a8d
 80128dc:	08012a8d 	.word	0x08012a8d
 80128e0:	08012a8d 	.word	0x08012a8d
 80128e4:	08012a8d 	.word	0x08012a8d
 80128e8:	08012a8d 	.word	0x08012a8d
 80128ec:	08012a8d 	.word	0x08012a8d
 80128f0:	08012a8d 	.word	0x08012a8d
 80128f4:	08012a8d 	.word	0x08012a8d
 80128f8:	08012a8d 	.word	0x08012a8d
 80128fc:	08012a8d 	.word	0x08012a8d
 8012900:	08012a8d 	.word	0x08012a8d
 8012904:	08012a8d 	.word	0x08012a8d
 8012908:	08012a8d 	.word	0x08012a8d
 801290c:	08012a8d 	.word	0x08012a8d
 8012910:	08012a8d 	.word	0x08012a8d
 8012914:	08012a8d 	.word	0x08012a8d
 8012918:	08012a8d 	.word	0x08012a8d
 801291c:	08012a8d 	.word	0x08012a8d
 8012920:	08012a8d 	.word	0x08012a8d
 8012924:	08012a8d 	.word	0x08012a8d
 8012928:	08012a8d 	.word	0x08012a8d
 801292c:	08012a8d 	.word	0x08012a8d
 8012930:	08012a8d 	.word	0x08012a8d
 8012934:	08012a8d 	.word	0x08012a8d
 8012938:	08012a8d 	.word	0x08012a8d
 801293c:	08012a8d 	.word	0x08012a8d
 8012940:	08012a8d 	.word	0x08012a8d
 8012944:	08012a8d 	.word	0x08012a8d
 8012948:	08012a8d 	.word	0x08012a8d
 801294c:	08012a8d 	.word	0x08012a8d
 8012950:	08012a8d 	.word	0x08012a8d
 8012954:	08012a8d 	.word	0x08012a8d
 8012958:	08012a8d 	.word	0x08012a8d
 801295c:	08012a8d 	.word	0x08012a8d
 8012960:	08012a8d 	.word	0x08012a8d
 8012964:	08012a8d 	.word	0x08012a8d
 8012968:	08012a8d 	.word	0x08012a8d
 801296c:	08012a8d 	.word	0x08012a8d
 8012970:	08012a8d 	.word	0x08012a8d
 8012974:	080129eb 	.word	0x080129eb
 8012978:	2b9e      	cmp	r3, #158	@ 0x9e
 801297a:	d051      	beq.n	8012a20 <SCSI_ProcessCmd+0x274>
 801297c:	e086      	b.n	8012a8c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801297e:	7afb      	ldrb	r3, [r7, #11]
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	4619      	mov	r1, r3
 8012984:	68f8      	ldr	r0, [r7, #12]
 8012986:	f000 f893 	bl	8012ab0 <SCSI_TestUnitReady>
 801298a:	4603      	mov	r3, r0
 801298c:	75fb      	strb	r3, [r7, #23]
      break;
 801298e:	e089      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8012990:	7afb      	ldrb	r3, [r7, #11]
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	4619      	mov	r1, r3
 8012996:	68f8      	ldr	r0, [r7, #12]
 8012998:	f000 fb9a 	bl	80130d0 <SCSI_RequestSense>
 801299c:	4603      	mov	r3, r0
 801299e:	75fb      	strb	r3, [r7, #23]
      break;
 80129a0:	e080      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80129a2:	7afb      	ldrb	r3, [r7, #11]
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	4619      	mov	r1, r3
 80129a8:	68f8      	ldr	r0, [r7, #12]
 80129aa:	f000 f8db 	bl	8012b64 <SCSI_Inquiry>
 80129ae:	4603      	mov	r3, r0
 80129b0:	75fb      	strb	r3, [r7, #23]
      break;
 80129b2:	e077      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80129b4:	7afb      	ldrb	r3, [r7, #11]
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	4619      	mov	r1, r3
 80129ba:	68f8      	ldr	r0, [r7, #12]
 80129bc:	f000 fc56 	bl	801326c <SCSI_StartStopUnit>
 80129c0:	4603      	mov	r3, r0
 80129c2:	75fb      	strb	r3, [r7, #23]
      break;
 80129c4:	e06e      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80129c6:	7afb      	ldrb	r3, [r7, #11]
 80129c8:	687a      	ldr	r2, [r7, #4]
 80129ca:	4619      	mov	r1, r3
 80129cc:	68f8      	ldr	r0, [r7, #12]
 80129ce:	f000 fca2 	bl	8013316 <SCSI_AllowPreventRemovable>
 80129d2:	4603      	mov	r3, r0
 80129d4:	75fb      	strb	r3, [r7, #23]
      break;
 80129d6:	e065      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80129d8:	7afb      	ldrb	r3, [r7, #11]
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	4619      	mov	r1, r3
 80129de:	68f8      	ldr	r0, [r7, #12]
 80129e0:	f000 faea 	bl	8012fb8 <SCSI_ModeSense6>
 80129e4:	4603      	mov	r3, r0
 80129e6:	75fb      	strb	r3, [r7, #23]
      break;
 80129e8:	e05c      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80129ea:	7afb      	ldrb	r3, [r7, #11]
 80129ec:	687a      	ldr	r2, [r7, #4]
 80129ee:	4619      	mov	r1, r3
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f000 fb27 	bl	8013044 <SCSI_ModeSense10>
 80129f6:	4603      	mov	r3, r0
 80129f8:	75fb      	strb	r3, [r7, #23]
      break;
 80129fa:	e053      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80129fc:	7afb      	ldrb	r3, [r7, #11]
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	4619      	mov	r1, r3
 8012a02:	68f8      	ldr	r0, [r7, #12]
 8012a04:	f000 fa5c 	bl	8012ec0 <SCSI_ReadFormatCapacity>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8012a0c:	e04a      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8012a0e:	7afb      	ldrb	r3, [r7, #11]
 8012a10:	687a      	ldr	r2, [r7, #4]
 8012a12:	4619      	mov	r1, r3
 8012a14:	68f8      	ldr	r0, [r7, #12]
 8012a16:	f000 f921 	bl	8012c5c <SCSI_ReadCapacity10>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8012a1e:	e041      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8012a20:	7afb      	ldrb	r3, [r7, #11]
 8012a22:	687a      	ldr	r2, [r7, #4]
 8012a24:	4619      	mov	r1, r3
 8012a26:	68f8      	ldr	r0, [r7, #12]
 8012a28:	f000 f996 	bl	8012d58 <SCSI_ReadCapacity16>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8012a30:	e038      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8012a32:	7afb      	ldrb	r3, [r7, #11]
 8012a34:	687a      	ldr	r2, [r7, #4]
 8012a36:	4619      	mov	r1, r3
 8012a38:	68f8      	ldr	r0, [r7, #12]
 8012a3a:	f000 fc99 	bl	8013370 <SCSI_Read10>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	75fb      	strb	r3, [r7, #23]
      break;
 8012a42:	e02f      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8012a44:	7afb      	ldrb	r3, [r7, #11]
 8012a46:	687a      	ldr	r2, [r7, #4]
 8012a48:	4619      	mov	r1, r3
 8012a4a:	68f8      	ldr	r0, [r7, #12]
 8012a4c:	f000 fd3a 	bl	80134c4 <SCSI_Read12>
 8012a50:	4603      	mov	r3, r0
 8012a52:	75fb      	strb	r3, [r7, #23]
      break;
 8012a54:	e026      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8012a56:	7afb      	ldrb	r3, [r7, #11]
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	68f8      	ldr	r0, [r7, #12]
 8012a5e:	f000 fde5 	bl	801362c <SCSI_Write10>
 8012a62:	4603      	mov	r3, r0
 8012a64:	75fb      	strb	r3, [r7, #23]
      break;
 8012a66:	e01d      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8012a68:	7afb      	ldrb	r3, [r7, #11]
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	68f8      	ldr	r0, [r7, #12]
 8012a70:	f000 feb2 	bl	80137d8 <SCSI_Write12>
 8012a74:	4603      	mov	r3, r0
 8012a76:	75fb      	strb	r3, [r7, #23]
      break;
 8012a78:	e014      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8012a7a:	7afb      	ldrb	r3, [r7, #11]
 8012a7c:	687a      	ldr	r2, [r7, #4]
 8012a7e:	4619      	mov	r1, r3
 8012a80:	68f8      	ldr	r0, [r7, #12]
 8012a82:	f000 ff8f 	bl	80139a4 <SCSI_Verify10>
 8012a86:	4603      	mov	r3, r0
 8012a88:	75fb      	strb	r3, [r7, #23]
      break;
 8012a8a:	e00b      	b.n	8012aa4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8012a8c:	7af9      	ldrb	r1, [r7, #11]
 8012a8e:	2320      	movs	r3, #32
 8012a90:	2205      	movs	r2, #5
 8012a92:	68f8      	ldr	r0, [r7, #12]
 8012a94:	f000 fb9f 	bl	80131d6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	2202      	movs	r2, #2
 8012a9c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8012a9e:	23ff      	movs	r3, #255	@ 0xff
 8012aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8012aa2:	bf00      	nop
  }

  return ret;
 8012aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3718      	adds	r7, #24
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b086      	sub	sp, #24
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	460b      	mov	r3, r1
 8012aba:	607a      	str	r2, [r7, #4]
 8012abc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	32b0      	adds	r2, #176	@ 0xb0
 8012ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012acc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d102      	bne.n	8012ada <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8012ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ad8:	e03f      	b.n	8012b5a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d00a      	beq.n	8012afa <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8012aea:	2320      	movs	r3, #32
 8012aec:	2205      	movs	r2, #5
 8012aee:	68f8      	ldr	r0, [r7, #12]
 8012af0:	f000 fb71 	bl	80131d6 <SCSI_SenseCode>

    return -1;
 8012af4:	f04f 33ff 	mov.w	r3, #4294967295
 8012af8:	e02f      	b.n	8012b5a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8012b00:	2b02      	cmp	r3, #2
 8012b02:	d10b      	bne.n	8012b1c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012b04:	7af9      	ldrb	r1, [r7, #11]
 8012b06:	233a      	movs	r3, #58	@ 0x3a
 8012b08:	2202      	movs	r2, #2
 8012b0a:	68f8      	ldr	r0, [r7, #12]
 8012b0c:	f000 fb63 	bl	80131d6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	2205      	movs	r2, #5
 8012b14:	721a      	strb	r2, [r3, #8]
    return -1;
 8012b16:	f04f 33ff 	mov.w	r3, #4294967295
 8012b1a:	e01e      	b.n	8012b5a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012b22:	68fa      	ldr	r2, [r7, #12]
 8012b24:	33b0      	adds	r3, #176	@ 0xb0
 8012b26:	009b      	lsls	r3, r3, #2
 8012b28:	4413      	add	r3, r2
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	689b      	ldr	r3, [r3, #8]
 8012b2e:	7afa      	ldrb	r2, [r7, #11]
 8012b30:	4610      	mov	r0, r2
 8012b32:	4798      	blx	r3
 8012b34:	4603      	mov	r3, r0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00b      	beq.n	8012b52 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012b3a:	7af9      	ldrb	r1, [r7, #11]
 8012b3c:	233a      	movs	r3, #58	@ 0x3a
 8012b3e:	2202      	movs	r2, #2
 8012b40:	68f8      	ldr	r0, [r7, #12]
 8012b42:	f000 fb48 	bl	80131d6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	2205      	movs	r2, #5
 8012b4a:	721a      	strb	r2, [r3, #8]

    return -1;
 8012b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b50:	e003      	b.n	8012b5a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	2200      	movs	r2, #0
 8012b56:	60da      	str	r2, [r3, #12]

  return 0;
 8012b58:	2300      	movs	r3, #0
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3718      	adds	r7, #24
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
	...

08012b64 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b088      	sub	sp, #32
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	60f8      	str	r0, [r7, #12]
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	607a      	str	r2, [r7, #4]
 8012b70:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	32b0      	adds	r2, #176	@ 0xb0
 8012b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b80:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012b82:	69bb      	ldr	r3, [r7, #24]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d102      	bne.n	8012b8e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8012b88:	f04f 33ff 	mov.w	r3, #4294967295
 8012b8c:	e05e      	b.n	8012c4c <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012b8e:	69bb      	ldr	r3, [r7, #24]
 8012b90:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d10a      	bne.n	8012bae <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8012b9e:	2320      	movs	r3, #32
 8012ba0:	2205      	movs	r2, #5
 8012ba2:	68f8      	ldr	r0, [r7, #12]
 8012ba4:	f000 fb17 	bl	80131d6 <SCSI_SenseCode>
    return -1;
 8012ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bac:	e04e      	b.n	8012c4c <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	f003 0301 	and.w	r3, r3, #1
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d020      	beq.n	8012bfe <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	3302      	adds	r3, #2
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d105      	bne.n	8012bd2 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8012bc6:	2206      	movs	r2, #6
 8012bc8:	4922      	ldr	r1, [pc, #136]	@ (8012c54 <SCSI_Inquiry+0xf0>)
 8012bca:	69b8      	ldr	r0, [r7, #24]
 8012bcc:	f001 f870 	bl	8013cb0 <SCSI_UpdateBotData>
 8012bd0:	e03b      	b.n	8012c4a <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	3302      	adds	r3, #2
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	2b80      	cmp	r3, #128	@ 0x80
 8012bda:	d105      	bne.n	8012be8 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8012bdc:	2208      	movs	r2, #8
 8012bde:	491e      	ldr	r1, [pc, #120]	@ (8012c58 <SCSI_Inquiry+0xf4>)
 8012be0:	69b8      	ldr	r0, [r7, #24]
 8012be2:	f001 f865 	bl	8013cb0 <SCSI_UpdateBotData>
 8012be6:	e030      	b.n	8012c4a <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8012bee:	2324      	movs	r3, #36	@ 0x24
 8012bf0:	2205      	movs	r2, #5
 8012bf2:	68f8      	ldr	r0, [r7, #12]
 8012bf4:	f000 faef 	bl	80131d6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bfc:	e026      	b.n	8012c4c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	33b0      	adds	r3, #176	@ 0xb0
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	4413      	add	r3, r2
 8012c0c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012c0e:	69d9      	ldr	r1, [r3, #28]
 8012c10:	7afa      	ldrb	r2, [r7, #11]
 8012c12:	4613      	mov	r3, r2
 8012c14:	00db      	lsls	r3, r3, #3
 8012c16:	4413      	add	r3, r2
 8012c18:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8012c1a:	440b      	add	r3, r1
 8012c1c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	3304      	adds	r3, #4
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	3305      	adds	r3, #5
 8012c26:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	3304      	adds	r3, #4
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	461a      	mov	r2, r3
 8012c30:	8bfb      	ldrh	r3, [r7, #30]
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d303      	bcc.n	8012c3e <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	3304      	adds	r3, #4
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8012c3e:	8bfb      	ldrh	r3, [r7, #30]
 8012c40:	461a      	mov	r2, r3
 8012c42:	6979      	ldr	r1, [r7, #20]
 8012c44:	69b8      	ldr	r0, [r7, #24]
 8012c46:	f001 f833 	bl	8013cb0 <SCSI_UpdateBotData>
  }

  return 0;
 8012c4a:	2300      	movs	r3, #0
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3720      	adds	r7, #32
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	24000098 	.word	0x24000098
 8012c58:	240000a0 	.word	0x240000a0

08012c5c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b086      	sub	sp, #24
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	460b      	mov	r3, r1
 8012c66:	607a      	str	r2, [r7, #4]
 8012c68:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	32b0      	adds	r2, #176	@ 0xb0
 8012c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c78:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d102      	bne.n	8012c86 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8012c80:	f04f 33ff 	mov.w	r3, #4294967295
 8012c84:	e064      	b.n	8012d50 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012c8c:	68fa      	ldr	r2, [r7, #12]
 8012c8e:	33b0      	adds	r3, #176	@ 0xb0
 8012c90:	009b      	lsls	r3, r3, #2
 8012c92:	4413      	add	r3, r2
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	697a      	ldr	r2, [r7, #20]
 8012c9a:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8012c9e:	697a      	ldr	r2, [r7, #20]
 8012ca0:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8012ca4:	7af8      	ldrb	r0, [r7, #11]
 8012ca6:	4798      	blx	r3
 8012ca8:	4603      	mov	r3, r0
 8012caa:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012cac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d104      	bne.n	8012cbe <SCSI_ReadCapacity10+0x62>
 8012cb4:	697b      	ldr	r3, [r7, #20]
 8012cb6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8012cba:	2b02      	cmp	r3, #2
 8012cbc:	d108      	bne.n	8012cd0 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012cbe:	7af9      	ldrb	r1, [r7, #11]
 8012cc0:	233a      	movs	r3, #58	@ 0x3a
 8012cc2:	2202      	movs	r2, #2
 8012cc4:	68f8      	ldr	r0, [r7, #12]
 8012cc6:	f000 fa86 	bl	80131d6 <SCSI_SenseCode>
    return -1;
 8012cca:	f04f 33ff 	mov.w	r3, #4294967295
 8012cce:	e03f      	b.n	8012d50 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012cd6:	3b01      	subs	r3, #1
 8012cd8:	0e1b      	lsrs	r3, r3, #24
 8012cda:	b2da      	uxtb	r2, r3
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012ce6:	3b01      	subs	r3, #1
 8012ce8:	0c1b      	lsrs	r3, r3, #16
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012cf6:	3b01      	subs	r3, #1
 8012cf8:	0a1b      	lsrs	r3, r3, #8
 8012cfa:	b2da      	uxtb	r2, r3
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	3b01      	subs	r3, #1
 8012d0a:	b2da      	uxtb	r2, r3
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012d16:	161b      	asrs	r3, r3, #24
 8012d18:	b2da      	uxtb	r2, r3
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012d24:	141b      	asrs	r3, r3, #16
 8012d26:	b2da      	uxtb	r2, r3
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012d32:	0a1b      	lsrs	r3, r3, #8
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	b2da      	uxtb	r2, r3
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012d42:	b2da      	uxtb	r2, r3
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	2208      	movs	r2, #8
 8012d4c:	60da      	str	r2, [r3, #12]

  return 0;
 8012d4e:	2300      	movs	r3, #0

}
 8012d50:	4618      	mov	r0, r3
 8012d52:	3718      	adds	r7, #24
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b088      	sub	sp, #32
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	60f8      	str	r0, [r7, #12]
 8012d60:	460b      	mov	r3, r1
 8012d62:	607a      	str	r2, [r7, #4]
 8012d64:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	32b0      	adds	r2, #176	@ 0xb0
 8012d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d74:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d102      	bne.n	8012d82 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8012d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d80:	e09a      	b.n	8012eb8 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	33b0      	adds	r3, #176	@ 0xb0
 8012d8c:	009b      	lsls	r3, r3, #2
 8012d8e:	4413      	add	r3, r2
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	69ba      	ldr	r2, [r7, #24]
 8012d96:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8012d9a:	69ba      	ldr	r2, [r7, #24]
 8012d9c:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8012da0:	7af8      	ldrb	r0, [r7, #11]
 8012da2:	4798      	blx	r3
 8012da4:	4603      	mov	r3, r0
 8012da6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012da8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d104      	bne.n	8012dba <SCSI_ReadCapacity16+0x62>
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8012db6:	2b02      	cmp	r3, #2
 8012db8:	d108      	bne.n	8012dcc <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012dba:	7af9      	ldrb	r1, [r7, #11]
 8012dbc:	233a      	movs	r3, #58	@ 0x3a
 8012dbe:	2202      	movs	r2, #2
 8012dc0:	68f8      	ldr	r0, [r7, #12]
 8012dc2:	f000 fa08 	bl	80131d6 <SCSI_SenseCode>
    return -1;
 8012dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8012dca:	e075      	b.n	8012eb8 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	330a      	adds	r3, #10
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	330b      	adds	r3, #11
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012ddc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	330c      	adds	r3, #12
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012de6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	320d      	adds	r2, #13
 8012dec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012dee:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012df0:	69bb      	ldr	r3, [r7, #24]
 8012df2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012df4:	2300      	movs	r3, #0
 8012df6:	61fb      	str	r3, [r7, #28]
 8012df8:	e008      	b.n	8012e0c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8012dfa:	69ba      	ldr	r2, [r7, #24]
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	4413      	add	r3, r2
 8012e00:	3310      	adds	r3, #16
 8012e02:	2200      	movs	r2, #0
 8012e04:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012e06:	69fb      	ldr	r3, [r7, #28]
 8012e08:	3301      	adds	r3, #1
 8012e0a:	61fb      	str	r3, [r7, #28]
 8012e0c:	69bb      	ldr	r3, [r7, #24]
 8012e0e:	68db      	ldr	r3, [r3, #12]
 8012e10:	69fa      	ldr	r2, [r7, #28]
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d3f1      	bcc.n	8012dfa <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012e16:	69bb      	ldr	r3, [r7, #24]
 8012e18:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012e1c:	3b01      	subs	r3, #1
 8012e1e:	0e1b      	lsrs	r3, r3, #24
 8012e20:	b2da      	uxtb	r2, r3
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012e26:	69bb      	ldr	r3, [r7, #24]
 8012e28:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012e2c:	3b01      	subs	r3, #1
 8012e2e:	0c1b      	lsrs	r3, r3, #16
 8012e30:	b2da      	uxtb	r2, r3
 8012e32:	69bb      	ldr	r3, [r7, #24]
 8012e34:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012e3c:	3b01      	subs	r3, #1
 8012e3e:	0a1b      	lsrs	r3, r3, #8
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	3b01      	subs	r3, #1
 8012e50:	b2da      	uxtb	r2, r3
 8012e52:	69bb      	ldr	r3, [r7, #24]
 8012e54:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012e56:	69bb      	ldr	r3, [r7, #24]
 8012e58:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012e5c:	161b      	asrs	r3, r3, #24
 8012e5e:	b2da      	uxtb	r2, r3
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012e6a:	141b      	asrs	r3, r3, #16
 8012e6c:	b2da      	uxtb	r2, r3
 8012e6e:	69bb      	ldr	r3, [r7, #24]
 8012e70:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012e78:	0a1b      	lsrs	r3, r3, #8
 8012e7a:	b29b      	uxth	r3, r3
 8012e7c:	b2da      	uxtb	r2, r3
 8012e7e:	69bb      	ldr	r3, [r7, #24]
 8012e80:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012e88:	b2da      	uxtb	r2, r3
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	330a      	adds	r3, #10
 8012e92:	781b      	ldrb	r3, [r3, #0]
 8012e94:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	330b      	adds	r3, #11
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012e9e:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	330c      	adds	r3, #12
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012ea8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	320d      	adds	r2, #13
 8012eae:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012eb0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	60da      	str	r2, [r3, #12]

  return 0;
 8012eb6:	2300      	movs	r3, #0
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3720      	adds	r7, #32
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}

08012ec0 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b088      	sub	sp, #32
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	460b      	mov	r3, r1
 8012eca:	607a      	str	r2, [r7, #4]
 8012ecc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	32b0      	adds	r2, #176	@ 0xb0
 8012ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012edc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012ede:	69bb      	ldr	r3, [r7, #24]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d102      	bne.n	8012eea <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8012ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee8:	e061      	b.n	8012fae <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012ef0:	68fa      	ldr	r2, [r7, #12]
 8012ef2:	33b0      	adds	r3, #176	@ 0xb0
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	4413      	add	r3, r2
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	f107 0214 	add.w	r2, r7, #20
 8012f00:	f107 0110 	add.w	r1, r7, #16
 8012f04:	7af8      	ldrb	r0, [r7, #11]
 8012f06:	4798      	blx	r3
 8012f08:	4603      	mov	r3, r0
 8012f0a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d104      	bne.n	8012f1e <SCSI_ReadFormatCapacity+0x5e>
 8012f14:	69bb      	ldr	r3, [r7, #24]
 8012f16:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8012f1a:	2b02      	cmp	r3, #2
 8012f1c:	d108      	bne.n	8012f30 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012f1e:	7af9      	ldrb	r1, [r7, #11]
 8012f20:	233a      	movs	r3, #58	@ 0x3a
 8012f22:	2202      	movs	r2, #2
 8012f24:	68f8      	ldr	r0, [r7, #12]
 8012f26:	f000 f956 	bl	80131d6 <SCSI_SenseCode>
    return -1;
 8012f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f2e:	e03e      	b.n	8012fae <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8012f30:	2300      	movs	r3, #0
 8012f32:	83fb      	strh	r3, [r7, #30]
 8012f34:	e007      	b.n	8012f46 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8012f36:	8bfb      	ldrh	r3, [r7, #30]
 8012f38:	69ba      	ldr	r2, [r7, #24]
 8012f3a:	4413      	add	r3, r2
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8012f40:	8bfb      	ldrh	r3, [r7, #30]
 8012f42:	3301      	adds	r3, #1
 8012f44:	83fb      	strh	r3, [r7, #30]
 8012f46:	8bfb      	ldrh	r3, [r7, #30]
 8012f48:	2b0b      	cmp	r3, #11
 8012f4a:	d9f4      	bls.n	8012f36 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	2208      	movs	r2, #8
 8012f50:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	3b01      	subs	r3, #1
 8012f56:	0e1b      	lsrs	r3, r3, #24
 8012f58:	b2da      	uxtb	r2, r3
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	3b01      	subs	r3, #1
 8012f62:	0c1b      	lsrs	r3, r3, #16
 8012f64:	b2da      	uxtb	r2, r3
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	3b01      	subs	r3, #1
 8012f6e:	0a1b      	lsrs	r3, r3, #8
 8012f70:	b2da      	uxtb	r2, r3
 8012f72:	69bb      	ldr	r3, [r7, #24]
 8012f74:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	3b01      	subs	r3, #1
 8012f7c:	b2da      	uxtb	r2, r3
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8012f82:	69bb      	ldr	r3, [r7, #24]
 8012f84:	2202      	movs	r2, #2
 8012f86:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012f88:	8abb      	ldrh	r3, [r7, #20]
 8012f8a:	141b      	asrs	r3, r3, #16
 8012f8c:	b2da      	uxtb	r2, r3
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8012f92:	8abb      	ldrh	r3, [r7, #20]
 8012f94:	0a1b      	lsrs	r3, r3, #8
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	b2da      	uxtb	r2, r3
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012f9e:	8abb      	ldrh	r3, [r7, #20]
 8012fa0:	b2da      	uxtb	r2, r3
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	220c      	movs	r2, #12
 8012faa:	60da      	str	r2, [r3, #12]

  return 0;
 8012fac:	2300      	movs	r3, #0
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3720      	adds	r7, #32
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
	...

08012fb8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b086      	sub	sp, #24
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	607a      	str	r2, [r7, #4]
 8012fc4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	32b0      	adds	r2, #176	@ 0xb0
 8012fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fd4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8012fd6:	2304      	movs	r3, #4
 8012fd8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8012fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fe4:	e027      	b.n	8013036 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012fec:	68fa      	ldr	r2, [r7, #12]
 8012fee:	33b0      	adds	r3, #176	@ 0xb0
 8012ff0:	009b      	lsls	r3, r3, #2
 8012ff2:	4413      	add	r3, r2
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	7afa      	ldrb	r2, [r7, #11]
 8012ffa:	4610      	mov	r0, r2
 8012ffc:	4798      	blx	r3
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d006      	beq.n	8013012 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8013004:	4b0e      	ldr	r3, [pc, #56]	@ (8013040 <SCSI_ModeSense6+0x88>)
 8013006:	789b      	ldrb	r3, [r3, #2]
 8013008:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801300c:	b2da      	uxtb	r2, r3
 801300e:	4b0c      	ldr	r3, [pc, #48]	@ (8013040 <SCSI_ModeSense6+0x88>)
 8013010:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	3304      	adds	r3, #4
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	461a      	mov	r2, r3
 801301a:	8afb      	ldrh	r3, [r7, #22]
 801301c:	4293      	cmp	r3, r2
 801301e:	d303      	bcc.n	8013028 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	3304      	adds	r3, #4
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8013028:	8afb      	ldrh	r3, [r7, #22]
 801302a:	461a      	mov	r2, r3
 801302c:	4904      	ldr	r1, [pc, #16]	@ (8013040 <SCSI_ModeSense6+0x88>)
 801302e:	6938      	ldr	r0, [r7, #16]
 8013030:	f000 fe3e 	bl	8013cb0 <SCSI_UpdateBotData>

  return 0;
 8013034:	2300      	movs	r3, #0
}
 8013036:	4618      	mov	r0, r3
 8013038:	3718      	adds	r7, #24
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}
 801303e:	bf00      	nop
 8013040:	240000a8 	.word	0x240000a8

08013044 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b086      	sub	sp, #24
 8013048:	af00      	add	r7, sp, #0
 801304a:	60f8      	str	r0, [r7, #12]
 801304c:	460b      	mov	r3, r1
 801304e:	607a      	str	r2, [r7, #4]
 8013050:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	32b0      	adds	r2, #176	@ 0xb0
 801305c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013060:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8013062:	2308      	movs	r3, #8
 8013064:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8013066:	693b      	ldr	r3, [r7, #16]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d102      	bne.n	8013072 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 801306c:	f04f 33ff 	mov.w	r3, #4294967295
 8013070:	e027      	b.n	80130c2 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013078:	68fa      	ldr	r2, [r7, #12]
 801307a:	33b0      	adds	r3, #176	@ 0xb0
 801307c:	009b      	lsls	r3, r3, #2
 801307e:	4413      	add	r3, r2
 8013080:	685b      	ldr	r3, [r3, #4]
 8013082:	68db      	ldr	r3, [r3, #12]
 8013084:	7afa      	ldrb	r2, [r7, #11]
 8013086:	4610      	mov	r0, r2
 8013088:	4798      	blx	r3
 801308a:	4603      	mov	r3, r0
 801308c:	2b00      	cmp	r3, #0
 801308e:	d006      	beq.n	801309e <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8013090:	4b0e      	ldr	r3, [pc, #56]	@ (80130cc <SCSI_ModeSense10+0x88>)
 8013092:	78db      	ldrb	r3, [r3, #3]
 8013094:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013098:	b2da      	uxtb	r2, r3
 801309a:	4b0c      	ldr	r3, [pc, #48]	@ (80130cc <SCSI_ModeSense10+0x88>)
 801309c:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	3308      	adds	r3, #8
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	461a      	mov	r2, r3
 80130a6:	8afb      	ldrh	r3, [r7, #22]
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d303      	bcc.n	80130b4 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	3308      	adds	r3, #8
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80130b4:	8afb      	ldrh	r3, [r7, #22]
 80130b6:	461a      	mov	r2, r3
 80130b8:	4904      	ldr	r1, [pc, #16]	@ (80130cc <SCSI_ModeSense10+0x88>)
 80130ba:	6938      	ldr	r0, [r7, #16]
 80130bc:	f000 fdf8 	bl	8013cb0 <SCSI_UpdateBotData>

  return 0;
 80130c0:	2300      	movs	r3, #0
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3718      	adds	r7, #24
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	240000ac 	.word	0x240000ac

080130d0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b086      	sub	sp, #24
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	60f8      	str	r0, [r7, #12]
 80130d8:	460b      	mov	r3, r1
 80130da:	607a      	str	r2, [r7, #4]
 80130dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	32b0      	adds	r2, #176	@ 0xb0
 80130e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130ec:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d102      	bne.n	80130fa <SCSI_RequestSense+0x2a>
  {
    return -1;
 80130f4:	f04f 33ff 	mov.w	r3, #4294967295
 80130f8:	e069      	b.n	80131ce <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8013100:	2b00      	cmp	r3, #0
 8013102:	d10a      	bne.n	801311a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013104:	693b      	ldr	r3, [r7, #16]
 8013106:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801310a:	2320      	movs	r3, #32
 801310c:	2205      	movs	r2, #5
 801310e:	68f8      	ldr	r0, [r7, #12]
 8013110:	f000 f861 	bl	80131d6 <SCSI_SenseCode>
    return -1;
 8013114:	f04f 33ff 	mov.w	r3, #4294967295
 8013118:	e059      	b.n	80131ce <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801311a:	2300      	movs	r3, #0
 801311c:	75fb      	strb	r3, [r7, #23]
 801311e:	e007      	b.n	8013130 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8013120:	7dfb      	ldrb	r3, [r7, #23]
 8013122:	693a      	ldr	r2, [r7, #16]
 8013124:	4413      	add	r3, r2
 8013126:	2200      	movs	r2, #0
 8013128:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801312a:	7dfb      	ldrb	r3, [r7, #23]
 801312c:	3301      	adds	r3, #1
 801312e:	75fb      	strb	r3, [r7, #23]
 8013130:	7dfb      	ldrb	r3, [r7, #23]
 8013132:	2b11      	cmp	r3, #17
 8013134:	d9f4      	bls.n	8013120 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	2270      	movs	r2, #112	@ 0x70
 801313a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	220c      	movs	r2, #12
 8013140:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801314e:	429a      	cmp	r2, r3
 8013150:	d02e      	beq.n	80131b0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8013158:	461a      	mov	r2, r3
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	3248      	adds	r2, #72	@ 0x48
 801315e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 801316c:	693a      	ldr	r2, [r7, #16]
 801316e:	3348      	adds	r3, #72	@ 0x48
 8013170:	00db      	lsls	r3, r3, #3
 8013172:	4413      	add	r3, r2
 8013174:	791a      	ldrb	r2, [r3, #4]
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8013180:	693a      	ldr	r2, [r7, #16]
 8013182:	3348      	adds	r3, #72	@ 0x48
 8013184:	00db      	lsls	r3, r3, #3
 8013186:	4413      	add	r3, r2
 8013188:	795a      	ldrb	r2, [r3, #5]
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8013194:	3301      	adds	r3, #1
 8013196:	b2da      	uxtb	r2, r3
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80131a4:	2b04      	cmp	r3, #4
 80131a6:	d103      	bne.n	80131b0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	2200      	movs	r2, #0
 80131ac:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	2212      	movs	r2, #18
 80131b4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	3304      	adds	r3, #4
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	2b12      	cmp	r3, #18
 80131be:	d805      	bhi.n	80131cc <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	3304      	adds	r3, #4
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	461a      	mov	r2, r3
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80131cc:	2300      	movs	r3, #0
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3718      	adds	r7, #24
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}

080131d6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80131d6:	b480      	push	{r7}
 80131d8:	b085      	sub	sp, #20
 80131da:	af00      	add	r7, sp, #0
 80131dc:	6078      	str	r0, [r7, #4]
 80131de:	4608      	mov	r0, r1
 80131e0:	4611      	mov	r1, r2
 80131e2:	461a      	mov	r2, r3
 80131e4:	4603      	mov	r3, r0
 80131e6:	70fb      	strb	r3, [r7, #3]
 80131e8:	460b      	mov	r3, r1
 80131ea:	70bb      	strb	r3, [r7, #2]
 80131ec:	4613      	mov	r3, r2
 80131ee:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	32b0      	adds	r2, #176	@ 0xb0
 80131fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131fe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d02c      	beq.n	8013260 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801320c:	461a      	mov	r2, r3
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	3248      	adds	r2, #72	@ 0x48
 8013212:	78b9      	ldrb	r1, [r7, #2]
 8013214:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801321e:	68fa      	ldr	r2, [r7, #12]
 8013220:	3348      	adds	r3, #72	@ 0x48
 8013222:	00db      	lsls	r3, r3, #3
 8013224:	4413      	add	r3, r2
 8013226:	787a      	ldrb	r2, [r7, #1]
 8013228:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8013230:	68fa      	ldr	r2, [r7, #12]
 8013232:	3348      	adds	r3, #72	@ 0x48
 8013234:	00db      	lsls	r3, r3, #3
 8013236:	4413      	add	r3, r2
 8013238:	2200      	movs	r2, #0
 801323a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8013242:	3301      	adds	r3, #1
 8013244:	b2da      	uxtb	r2, r3
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8013252:	2b04      	cmp	r3, #4
 8013254:	d105      	bne.n	8013262 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2200      	movs	r2, #0
 801325a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 801325e:	e000      	b.n	8013262 <SCSI_SenseCode+0x8c>
    return;
 8013260:	bf00      	nop
  }
}
 8013262:	3714      	adds	r7, #20
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr

0801326c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b086      	sub	sp, #24
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	460b      	mov	r3, r1
 8013276:	607a      	str	r2, [r7, #4]
 8013278:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	32b0      	adds	r2, #176	@ 0xb0
 8013284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013288:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d102      	bne.n	8013296 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8013290:	f04f 33ff 	mov.w	r3, #4294967295
 8013294:	e03b      	b.n	801330e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 801329c:	2b01      	cmp	r3, #1
 801329e:	d10f      	bne.n	80132c0 <SCSI_StartStopUnit+0x54>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	3304      	adds	r3, #4
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	f003 0303 	and.w	r3, r3, #3
 80132aa:	2b02      	cmp	r3, #2
 80132ac:	d108      	bne.n	80132c0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80132ae:	7af9      	ldrb	r1, [r7, #11]
 80132b0:	2324      	movs	r3, #36	@ 0x24
 80132b2:	2205      	movs	r2, #5
 80132b4:	68f8      	ldr	r0, [r7, #12]
 80132b6:	f7ff ff8e 	bl	80131d6 <SCSI_SenseCode>

    return -1;
 80132ba:	f04f 33ff 	mov.w	r3, #4294967295
 80132be:	e026      	b.n	801330e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	3304      	adds	r3, #4
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	f003 0303 	and.w	r3, r3, #3
 80132ca:	2b01      	cmp	r3, #1
 80132cc:	d104      	bne.n	80132d8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	2200      	movs	r2, #0
 80132d2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80132d6:	e016      	b.n	8013306 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	3304      	adds	r3, #4
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	f003 0303 	and.w	r3, r3, #3
 80132e2:	2b02      	cmp	r3, #2
 80132e4:	d104      	bne.n	80132f0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	2202      	movs	r2, #2
 80132ea:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80132ee:	e00a      	b.n	8013306 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	3304      	adds	r3, #4
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	f003 0303 	and.w	r3, r3, #3
 80132fa:	2b03      	cmp	r3, #3
 80132fc:	d103      	bne.n	8013306 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	2200      	movs	r2, #0
 8013302:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	2200      	movs	r2, #0
 801330a:	60da      	str	r2, [r3, #12]

  return 0;
 801330c:	2300      	movs	r3, #0
}
 801330e:	4618      	mov	r0, r3
 8013310:	3718      	adds	r7, #24
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}

08013316 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013316:	b480      	push	{r7}
 8013318:	b087      	sub	sp, #28
 801331a:	af00      	add	r7, sp, #0
 801331c:	60f8      	str	r0, [r7, #12]
 801331e:	460b      	mov	r3, r1
 8013320:	607a      	str	r2, [r7, #4]
 8013322:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	32b0      	adds	r2, #176	@ 0xb0
 801332e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013332:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d102      	bne.n	8013340 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801333a:	f04f 33ff 	mov.w	r3, #4294967295
 801333e:	e011      	b.n	8013364 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	3304      	adds	r3, #4
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d104      	bne.n	8013354 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	2200      	movs	r2, #0
 801334e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8013352:	e003      	b.n	801335c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	2201      	movs	r2, #1
 8013358:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	2200      	movs	r2, #0
 8013360:	60da      	str	r2, [r3, #12]

  return 0;
 8013362:	2300      	movs	r3, #0
}
 8013364:	4618      	mov	r0, r3
 8013366:	371c      	adds	r7, #28
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr

08013370 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b086      	sub	sp, #24
 8013374:	af00      	add	r7, sp, #0
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	460b      	mov	r3, r1
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	32b0      	adds	r2, #176	@ 0xb0
 8013388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801338c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d102      	bne.n	801339a <SCSI_Read10+0x2a>
  {
    return -1;
 8013394:	f04f 33ff 	mov.w	r3, #4294967295
 8013398:	e090      	b.n	80134bc <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	7a1b      	ldrb	r3, [r3, #8]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	f040 8082 	bne.w	80134a8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80133aa:	b25b      	sxtb	r3, r3
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	db0a      	blt.n	80133c6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80133b6:	2320      	movs	r3, #32
 80133b8:	2205      	movs	r2, #5
 80133ba:	68f8      	ldr	r0, [r7, #12]
 80133bc:	f7ff ff0b 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 80133c0:	f04f 33ff 	mov.w	r3, #4294967295
 80133c4:	e07a      	b.n	80134bc <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	d108      	bne.n	80133e2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80133d0:	7af9      	ldrb	r1, [r7, #11]
 80133d2:	233a      	movs	r3, #58	@ 0x3a
 80133d4:	2202      	movs	r2, #2
 80133d6:	68f8      	ldr	r0, [r7, #12]
 80133d8:	f7ff fefd 	bl	80131d6 <SCSI_SenseCode>

      return -1;
 80133dc:	f04f 33ff 	mov.w	r3, #4294967295
 80133e0:	e06c      	b.n	80134bc <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133e8:	68fa      	ldr	r2, [r7, #12]
 80133ea:	33b0      	adds	r3, #176	@ 0xb0
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	4413      	add	r3, r2
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	689b      	ldr	r3, [r3, #8]
 80133f4:	7afa      	ldrb	r2, [r7, #11]
 80133f6:	4610      	mov	r0, r2
 80133f8:	4798      	blx	r3
 80133fa:	4603      	mov	r3, r0
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d008      	beq.n	8013412 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013400:	7af9      	ldrb	r1, [r7, #11]
 8013402:	233a      	movs	r3, #58	@ 0x3a
 8013404:	2202      	movs	r2, #2
 8013406:	68f8      	ldr	r0, [r7, #12]
 8013408:	f7ff fee5 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 801340c:	f04f 33ff 	mov.w	r3, #4294967295
 8013410:	e054      	b.n	80134bc <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	3302      	adds	r3, #2
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	3303      	adds	r3, #3
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013422:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	3304      	adds	r3, #4
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801342c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801342e:	687a      	ldr	r2, [r7, #4]
 8013430:	3205      	adds	r2, #5
 8013432:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013434:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	3307      	adds	r3, #7
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	021b      	lsls	r3, r3, #8
 8013444:	687a      	ldr	r2, [r7, #4]
 8013446:	3208      	adds	r2, #8
 8013448:	7812      	ldrb	r2, [r2, #0]
 801344a:	431a      	orrs	r2, r3
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 801345e:	7af9      	ldrb	r1, [r7, #11]
 8013460:	68f8      	ldr	r0, [r7, #12]
 8013462:	f000 fadc 	bl	8013a1e <SCSI_CheckAddressRange>
 8013466:	4603      	mov	r3, r0
 8013468:	2b00      	cmp	r3, #0
 801346a:	da02      	bge.n	8013472 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801346c:	f04f 33ff 	mov.w	r3, #4294967295
 8013470:	e024      	b.n	80134bc <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 801347e:	6979      	ldr	r1, [r7, #20]
 8013480:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8013484:	fb01 f303 	mul.w	r3, r1, r3
 8013488:	429a      	cmp	r2, r3
 801348a:	d00a      	beq.n	80134a2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8013492:	2320      	movs	r3, #32
 8013494:	2205      	movs	r2, #5
 8013496:	68f8      	ldr	r0, [r7, #12]
 8013498:	f7ff fe9d 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 801349c:	f04f 33ff 	mov.w	r3, #4294967295
 80134a0:	e00c      	b.n	80134bc <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80134a2:	697b      	ldr	r3, [r7, #20]
 80134a4:	2202      	movs	r2, #2
 80134a6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80134ae:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80134b0:	7afb      	ldrb	r3, [r7, #11]
 80134b2:	4619      	mov	r1, r3
 80134b4:	68f8      	ldr	r0, [r7, #12]
 80134b6:	f000 fadf 	bl	8013a78 <SCSI_ProcessRead>
 80134ba:	4603      	mov	r3, r0
}
 80134bc:	4618      	mov	r0, r3
 80134be:	3718      	adds	r7, #24
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}

080134c4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	460b      	mov	r3, r1
 80134ce:	607a      	str	r2, [r7, #4]
 80134d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	32b0      	adds	r2, #176	@ 0xb0
 80134dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134e0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d102      	bne.n	80134ee <SCSI_Read12+0x2a>
  {
    return -1;
 80134e8:	f04f 33ff 	mov.w	r3, #4294967295
 80134ec:	e09a      	b.n	8013624 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	7a1b      	ldrb	r3, [r3, #8]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f040 808c 	bne.w	8013610 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80134fe:	b25b      	sxtb	r3, r3
 8013500:	2b00      	cmp	r3, #0
 8013502:	db0a      	blt.n	801351a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801350a:	2320      	movs	r3, #32
 801350c:	2205      	movs	r2, #5
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	f7ff fe61 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 8013514:	f04f 33ff 	mov.w	r3, #4294967295
 8013518:	e084      	b.n	8013624 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8013520:	2b02      	cmp	r3, #2
 8013522:	d108      	bne.n	8013536 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013524:	7af9      	ldrb	r1, [r7, #11]
 8013526:	233a      	movs	r3, #58	@ 0x3a
 8013528:	2202      	movs	r2, #2
 801352a:	68f8      	ldr	r0, [r7, #12]
 801352c:	f7ff fe53 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 8013530:	f04f 33ff 	mov.w	r3, #4294967295
 8013534:	e076      	b.n	8013624 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801353c:	68fa      	ldr	r2, [r7, #12]
 801353e:	33b0      	adds	r3, #176	@ 0xb0
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	4413      	add	r3, r2
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	689b      	ldr	r3, [r3, #8]
 8013548:	7afa      	ldrb	r2, [r7, #11]
 801354a:	4610      	mov	r0, r2
 801354c:	4798      	blx	r3
 801354e:	4603      	mov	r3, r0
 8013550:	2b00      	cmp	r3, #0
 8013552:	d008      	beq.n	8013566 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013554:	7af9      	ldrb	r1, [r7, #11]
 8013556:	233a      	movs	r3, #58	@ 0x3a
 8013558:	2202      	movs	r2, #2
 801355a:	68f8      	ldr	r0, [r7, #12]
 801355c:	f7ff fe3b 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 8013560:	f04f 33ff 	mov.w	r3, #4294967295
 8013564:	e05e      	b.n	8013624 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	3302      	adds	r3, #2
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	3303      	adds	r3, #3
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013576:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	3304      	adds	r3, #4
 801357c:	781b      	ldrb	r3, [r3, #0]
 801357e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013580:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013582:	687a      	ldr	r2, [r7, #4]
 8013584:	3205      	adds	r2, #5
 8013586:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013588:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	3306      	adds	r3, #6
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	3307      	adds	r3, #7
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80135a0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	3308      	adds	r3, #8
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80135aa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	3209      	adds	r2, #9
 80135b0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80135b2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80135c6:	7af9      	ldrb	r1, [r7, #11]
 80135c8:	68f8      	ldr	r0, [r7, #12]
 80135ca:	f000 fa28 	bl	8013a1e <SCSI_CheckAddressRange>
 80135ce:	4603      	mov	r3, r0
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	da02      	bge.n	80135da <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80135d4:	f04f 33ff 	mov.w	r3, #4294967295
 80135d8:	e024      	b.n	8013624 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80135e6:	6979      	ldr	r1, [r7, #20]
 80135e8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 80135ec:	fb01 f303 	mul.w	r3, r1, r3
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d00a      	beq.n	801360a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80135fa:	2320      	movs	r3, #32
 80135fc:	2205      	movs	r2, #5
 80135fe:	68f8      	ldr	r0, [r7, #12]
 8013600:	f7ff fde9 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 8013604:	f04f 33ff 	mov.w	r3, #4294967295
 8013608:	e00c      	b.n	8013624 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	2202      	movs	r2, #2
 801360e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013616:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013618:	7afb      	ldrb	r3, [r7, #11]
 801361a:	4619      	mov	r1, r3
 801361c:	68f8      	ldr	r0, [r7, #12]
 801361e:	f000 fa2b 	bl	8013a78 <SCSI_ProcessRead>
 8013622:	4603      	mov	r3, r0
}
 8013624:	4618      	mov	r0, r3
 8013626:	3718      	adds	r7, #24
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}

0801362c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b086      	sub	sp, #24
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	460b      	mov	r3, r1
 8013636:	607a      	str	r2, [r7, #4]
 8013638:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	32b0      	adds	r2, #176	@ 0xb0
 8013644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013648:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d102      	bne.n	8013656 <SCSI_Write10+0x2a>
  {
    return -1;
 8013650:	f04f 33ff 	mov.w	r3, #4294967295
 8013654:	e0ba      	b.n	80137cc <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	7a1b      	ldrb	r3, [r3, #8]
 801365a:	2b00      	cmp	r3, #0
 801365c:	f040 80b0 	bne.w	80137c0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8013666:	2b00      	cmp	r3, #0
 8013668:	d10a      	bne.n	8013680 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8013670:	2320      	movs	r3, #32
 8013672:	2205      	movs	r2, #5
 8013674:	68f8      	ldr	r0, [r7, #12]
 8013676:	f7ff fdae 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 801367a:	f04f 33ff 	mov.w	r3, #4294967295
 801367e:	e0a5      	b.n	80137cc <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8013686:	b25b      	sxtb	r3, r3
 8013688:	2b00      	cmp	r3, #0
 801368a:	da0a      	bge.n	80136a2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801368c:	697b      	ldr	r3, [r7, #20]
 801368e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8013692:	2320      	movs	r3, #32
 8013694:	2205      	movs	r2, #5
 8013696:	68f8      	ldr	r0, [r7, #12]
 8013698:	f7ff fd9d 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 801369c:	f04f 33ff 	mov.w	r3, #4294967295
 80136a0:	e094      	b.n	80137cc <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80136a8:	68fa      	ldr	r2, [r7, #12]
 80136aa:	33b0      	adds	r3, #176	@ 0xb0
 80136ac:	009b      	lsls	r3, r3, #2
 80136ae:	4413      	add	r3, r2
 80136b0:	685b      	ldr	r3, [r3, #4]
 80136b2:	689b      	ldr	r3, [r3, #8]
 80136b4:	7afa      	ldrb	r2, [r7, #11]
 80136b6:	4610      	mov	r0, r2
 80136b8:	4798      	blx	r3
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d008      	beq.n	80136d2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80136c0:	7af9      	ldrb	r1, [r7, #11]
 80136c2:	233a      	movs	r3, #58	@ 0x3a
 80136c4:	2202      	movs	r2, #2
 80136c6:	68f8      	ldr	r0, [r7, #12]
 80136c8:	f7ff fd85 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 80136cc:	f04f 33ff 	mov.w	r3, #4294967295
 80136d0:	e07c      	b.n	80137cc <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80136d8:	68fa      	ldr	r2, [r7, #12]
 80136da:	33b0      	adds	r3, #176	@ 0xb0
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	4413      	add	r3, r2
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	68db      	ldr	r3, [r3, #12]
 80136e4:	7afa      	ldrb	r2, [r7, #11]
 80136e6:	4610      	mov	r0, r2
 80136e8:	4798      	blx	r3
 80136ea:	4603      	mov	r3, r0
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d008      	beq.n	8013702 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80136f0:	7af9      	ldrb	r1, [r7, #11]
 80136f2:	2327      	movs	r3, #39	@ 0x27
 80136f4:	2202      	movs	r2, #2
 80136f6:	68f8      	ldr	r0, [r7, #12]
 80136f8:	f7ff fd6d 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 80136fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013700:	e064      	b.n	80137cc <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	3302      	adds	r3, #2
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	3303      	adds	r3, #3
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013712:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	3304      	adds	r3, #4
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801371c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	3205      	adds	r2, #5
 8013722:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013724:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	3307      	adds	r3, #7
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013734:	687a      	ldr	r2, [r7, #4]
 8013736:	3208      	adds	r2, #8
 8013738:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801373a:	431a      	orrs	r2, r3
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 801374e:	7af9      	ldrb	r1, [r7, #11]
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	f000 f964 	bl	8013a1e <SCSI_CheckAddressRange>
 8013756:	4603      	mov	r3, r0
 8013758:	2b00      	cmp	r3, #0
 801375a:	da02      	bge.n	8013762 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801375c:	f04f 33ff 	mov.w	r3, #4294967295
 8013760:	e034      	b.n	80137cc <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8013768:	697a      	ldr	r2, [r7, #20]
 801376a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 801376e:	fb02 f303 	mul.w	r3, r2, r3
 8013772:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801377a:	693a      	ldr	r2, [r7, #16]
 801377c:	429a      	cmp	r2, r3
 801377e:	d00a      	beq.n	8013796 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8013786:	2320      	movs	r3, #32
 8013788:	2205      	movs	r2, #5
 801378a:	68f8      	ldr	r0, [r7, #12]
 801378c:	f7ff fd23 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 8013790:	f04f 33ff 	mov.w	r3, #4294967295
 8013794:	e01a      	b.n	80137cc <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801379c:	bf28      	it	cs
 801379e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80137a2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	2201      	movs	r2, #1
 80137a8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80137aa:	4b0a      	ldr	r3, [pc, #40]	@ (80137d4 <SCSI_Write10+0x1a8>)
 80137ac:	7819      	ldrb	r1, [r3, #0]
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	f103 0210 	add.w	r2, r3, #16
 80137b4:	693b      	ldr	r3, [r7, #16]
 80137b6:	68f8      	ldr	r0, [r7, #12]
 80137b8:	f002 facd 	bl	8015d56 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80137bc:	2300      	movs	r3, #0
 80137be:	e005      	b.n	80137cc <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80137c0:	7afb      	ldrb	r3, [r7, #11]
 80137c2:	4619      	mov	r1, r3
 80137c4:	68f8      	ldr	r0, [r7, #12]
 80137c6:	f000 f9dd 	bl	8013b84 <SCSI_ProcessWrite>
 80137ca:	4603      	mov	r3, r0
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3718      	adds	r7, #24
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	24000097 	.word	0x24000097

080137d8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b086      	sub	sp, #24
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	460b      	mov	r3, r1
 80137e2:	607a      	str	r2, [r7, #4]
 80137e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	32b0      	adds	r2, #176	@ 0xb0
 80137f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137f4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d102      	bne.n	8013802 <SCSI_Write12+0x2a>
  {
    return -1;
 80137fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013800:	e0ca      	b.n	8013998 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013802:	697b      	ldr	r3, [r7, #20]
 8013804:	7a1b      	ldrb	r3, [r3, #8]
 8013806:	2b00      	cmp	r3, #0
 8013808:	f040 80c0 	bne.w	801398c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8013812:	2b00      	cmp	r3, #0
 8013814:	d10a      	bne.n	801382c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801381c:	2320      	movs	r3, #32
 801381e:	2205      	movs	r2, #5
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	f7ff fcd8 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 8013826:	f04f 33ff 	mov.w	r3, #4294967295
 801382a:	e0b5      	b.n	8013998 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8013832:	b25b      	sxtb	r3, r3
 8013834:	2b00      	cmp	r3, #0
 8013836:	da0a      	bge.n	801384e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013838:	697b      	ldr	r3, [r7, #20]
 801383a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801383e:	2320      	movs	r3, #32
 8013840:	2205      	movs	r2, #5
 8013842:	68f8      	ldr	r0, [r7, #12]
 8013844:	f7ff fcc7 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 8013848:	f04f 33ff 	mov.w	r3, #4294967295
 801384c:	e0a4      	b.n	8013998 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	33b0      	adds	r3, #176	@ 0xb0
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	4413      	add	r3, r2
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	7afa      	ldrb	r2, [r7, #11]
 8013862:	4610      	mov	r0, r2
 8013864:	4798      	blx	r3
 8013866:	4603      	mov	r3, r0
 8013868:	2b00      	cmp	r3, #0
 801386a:	d00b      	beq.n	8013884 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801386c:	7af9      	ldrb	r1, [r7, #11]
 801386e:	233a      	movs	r3, #58	@ 0x3a
 8013870:	2202      	movs	r2, #2
 8013872:	68f8      	ldr	r0, [r7, #12]
 8013874:	f7ff fcaf 	bl	80131d6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	2205      	movs	r2, #5
 801387c:	721a      	strb	r2, [r3, #8]
      return -1;
 801387e:	f04f 33ff 	mov.w	r3, #4294967295
 8013882:	e089      	b.n	8013998 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801388a:	68fa      	ldr	r2, [r7, #12]
 801388c:	33b0      	adds	r3, #176	@ 0xb0
 801388e:	009b      	lsls	r3, r3, #2
 8013890:	4413      	add	r3, r2
 8013892:	685b      	ldr	r3, [r3, #4]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	7afa      	ldrb	r2, [r7, #11]
 8013898:	4610      	mov	r0, r2
 801389a:	4798      	blx	r3
 801389c:	4603      	mov	r3, r0
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d00b      	beq.n	80138ba <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80138a2:	7af9      	ldrb	r1, [r7, #11]
 80138a4:	2327      	movs	r3, #39	@ 0x27
 80138a6:	2202      	movs	r2, #2
 80138a8:	68f8      	ldr	r0, [r7, #12]
 80138aa:	f7ff fc94 	bl	80131d6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	2205      	movs	r2, #5
 80138b2:	721a      	strb	r2, [r3, #8]
      return -1;
 80138b4:	f04f 33ff 	mov.w	r3, #4294967295
 80138b8:	e06e      	b.n	8013998 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	3302      	adds	r3, #2
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	3303      	adds	r3, #3
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80138ca:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	3304      	adds	r3, #4
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80138d4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	3205      	adds	r2, #5
 80138da:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80138dc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	3306      	adds	r3, #6
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	3307      	adds	r3, #7
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80138f4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	3308      	adds	r3, #8
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80138fe:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013900:	687a      	ldr	r2, [r7, #4]
 8013902:	3209      	adds	r2, #9
 8013904:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013906:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 801391a:	7af9      	ldrb	r1, [r7, #11]
 801391c:	68f8      	ldr	r0, [r7, #12]
 801391e:	f000 f87e 	bl	8013a1e <SCSI_CheckAddressRange>
 8013922:	4603      	mov	r3, r0
 8013924:	2b00      	cmp	r3, #0
 8013926:	da02      	bge.n	801392e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013928:	f04f 33ff 	mov.w	r3, #4294967295
 801392c:	e034      	b.n	8013998 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8013934:	697a      	ldr	r2, [r7, #20]
 8013936:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 801393a:	fb02 f303 	mul.w	r3, r2, r3
 801393e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8013946:	693a      	ldr	r2, [r7, #16]
 8013948:	429a      	cmp	r2, r3
 801394a:	d00a      	beq.n	8013962 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8013952:	2320      	movs	r3, #32
 8013954:	2205      	movs	r2, #5
 8013956:	68f8      	ldr	r0, [r7, #12]
 8013958:	f7ff fc3d 	bl	80131d6 <SCSI_SenseCode>
      return -1;
 801395c:	f04f 33ff 	mov.w	r3, #4294967295
 8013960:	e01a      	b.n	8013998 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013968:	bf28      	it	cs
 801396a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 801396e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	2201      	movs	r2, #1
 8013974:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8013976:	4b0a      	ldr	r3, [pc, #40]	@ (80139a0 <SCSI_Write12+0x1c8>)
 8013978:	7819      	ldrb	r1, [r3, #0]
 801397a:	697b      	ldr	r3, [r7, #20]
 801397c:	f103 0210 	add.w	r2, r3, #16
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	68f8      	ldr	r0, [r7, #12]
 8013984:	f002 f9e7 	bl	8015d56 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013988:	2300      	movs	r3, #0
 801398a:	e005      	b.n	8013998 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 801398c:	7afb      	ldrb	r3, [r7, #11]
 801398e:	4619      	mov	r1, r3
 8013990:	68f8      	ldr	r0, [r7, #12]
 8013992:	f000 f8f7 	bl	8013b84 <SCSI_ProcessWrite>
 8013996:	4603      	mov	r3, r0
}
 8013998:	4618      	mov	r0, r3
 801399a:	3718      	adds	r7, #24
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	24000097 	.word	0x24000097

080139a4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b086      	sub	sp, #24
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	60f8      	str	r0, [r7, #12]
 80139ac:	460b      	mov	r3, r1
 80139ae:	607a      	str	r2, [r7, #4]
 80139b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	32b0      	adds	r2, #176	@ 0xb0
 80139bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80139c2:	697b      	ldr	r3, [r7, #20]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d102      	bne.n	80139ce <SCSI_Verify10+0x2a>
  {
    return -1;
 80139c8:	f04f 33ff 	mov.w	r3, #4294967295
 80139cc:	e023      	b.n	8013a16 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	3301      	adds	r3, #1
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	f003 0302 	and.w	r3, r3, #2
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d008      	beq.n	80139ee <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80139dc:	7af9      	ldrb	r1, [r7, #11]
 80139de:	2324      	movs	r3, #36	@ 0x24
 80139e0:	2205      	movs	r2, #5
 80139e2:	68f8      	ldr	r0, [r7, #12]
 80139e4:	f7ff fbf7 	bl	80131d6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80139e8:	f04f 33ff 	mov.w	r3, #4294967295
 80139ec:	e013      	b.n	8013a16 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80139ee:	697b      	ldr	r3, [r7, #20]
 80139f0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80139fa:	7af9      	ldrb	r1, [r7, #11]
 80139fc:	68f8      	ldr	r0, [r7, #12]
 80139fe:	f000 f80e 	bl	8013a1e <SCSI_CheckAddressRange>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	da02      	bge.n	8013a0e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8013a08:	f04f 33ff 	mov.w	r3, #4294967295
 8013a0c:	e003      	b.n	8013a16 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	2200      	movs	r2, #0
 8013a12:	60da      	str	r2, [r3, #12]

  return 0;
 8013a14:	2300      	movs	r3, #0
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3718      	adds	r7, #24
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}

08013a1e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8013a1e:	b580      	push	{r7, lr}
 8013a20:	b086      	sub	sp, #24
 8013a22:	af00      	add	r7, sp, #0
 8013a24:	60f8      	str	r0, [r7, #12]
 8013a26:	607a      	str	r2, [r7, #4]
 8013a28:	603b      	str	r3, [r7, #0]
 8013a2a:	460b      	mov	r3, r1
 8013a2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	32b0      	adds	r2, #176	@ 0xb0
 8013a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a3c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d102      	bne.n	8013a4a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8013a44:	f04f 33ff 	mov.w	r3, #4294967295
 8013a48:	e011      	b.n	8013a6e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8013a4a:	687a      	ldr	r2, [r7, #4]
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	441a      	add	r2, r3
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d908      	bls.n	8013a6c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8013a5a:	7af9      	ldrb	r1, [r7, #11]
 8013a5c:	2321      	movs	r3, #33	@ 0x21
 8013a5e:	2205      	movs	r2, #5
 8013a60:	68f8      	ldr	r0, [r7, #12]
 8013a62:	f7ff fbb8 	bl	80131d6 <SCSI_SenseCode>
    return -1;
 8013a66:	f04f 33ff 	mov.w	r3, #4294967295
 8013a6a:	e000      	b.n	8013a6e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8013a6c:	2300      	movs	r3, #0
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3718      	adds	r7, #24
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
	...

08013a78 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013a78:	b590      	push	{r4, r7, lr}
 8013a7a:	b085      	sub	sp, #20
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	460b      	mov	r3, r1
 8013a82:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	32b0      	adds	r2, #176	@ 0xb0
 8013a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a92:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d102      	bne.n	8013aa0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8013a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a9e:	e06a      	b.n	8013b76 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8013aa6:	68fa      	ldr	r2, [r7, #12]
 8013aa8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8013aac:	fb02 f303 	mul.w	r3, r2, r3
 8013ab0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013ab8:	bf28      	it	cs
 8013aba:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8013abe:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013ac6:	687a      	ldr	r2, [r7, #4]
 8013ac8:	33b0      	adds	r3, #176	@ 0xb0
 8013aca:	009b      	lsls	r3, r3, #2
 8013acc:	4413      	add	r3, r2
 8013ace:	685b      	ldr	r3, [r3, #4]
 8013ad0:	691c      	ldr	r4, [r3, #16]
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	f103 0110 	add.w	r1, r3, #16
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	78f8      	ldrb	r0, [r7, #3]
 8013af0:	47a0      	blx	r4
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	da08      	bge.n	8013b0a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8013af8:	78f9      	ldrb	r1, [r7, #3]
 8013afa:	2311      	movs	r3, #17
 8013afc:	2204      	movs	r2, #4
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f7ff fb69 	bl	80131d6 <SCSI_SenseCode>
    return -1;
 8013b04:	f04f 33ff 	mov.w	r3, #4294967295
 8013b08:	e035      	b.n	8013b76 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8013b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8013b80 <SCSI_ProcessRead+0x108>)
 8013b0c:	7819      	ldrb	r1, [r3, #0]
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f103 0210 	add.w	r2, r3, #16
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f002 f8fc 	bl	8015d14 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8013b28:	4619      	mov	r1, r3
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b30:	441a      	add	r2, r3
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8013b44:	4619      	mov	r1, r3
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b4c:	1ad2      	subs	r2, r2, r3
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	1ad2      	subs	r2, r2, r3
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d102      	bne.n	8013b74 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2203      	movs	r2, #3
 8013b72:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8013b74:	2300      	movs	r3, #0
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3714      	adds	r7, #20
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd90      	pop	{r4, r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	24000096 	.word	0x24000096

08013b84 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013b84:	b590      	push	{r4, r7, lr}
 8013b86:	b085      	sub	sp, #20
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	460b      	mov	r3, r1
 8013b8e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	32b0      	adds	r2, #176	@ 0xb0
 8013b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b9e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d102      	bne.n	8013bac <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8013ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8013baa:	e07a      	b.n	8013ca2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8013bb2:	68fa      	ldr	r2, [r7, #12]
 8013bb4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8013bb8:	fb02 f303 	mul.w	r3, r2, r3
 8013bbc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013bc4:	bf28      	it	cs
 8013bc6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8013bca:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013bd2:	687a      	ldr	r2, [r7, #4]
 8013bd4:	33b0      	adds	r3, #176	@ 0xb0
 8013bd6:	009b      	lsls	r3, r3, #2
 8013bd8:	4413      	add	r3, r2
 8013bda:	685b      	ldr	r3, [r3, #4]
 8013bdc:	695c      	ldr	r4, [r3, #20]
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	f103 0110 	add.w	r1, r3, #16
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	78f8      	ldrb	r0, [r7, #3]
 8013bfc:	47a0      	blx	r4
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	da08      	bge.n	8013c16 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8013c04:	78f9      	ldrb	r1, [r7, #3]
 8013c06:	2303      	movs	r3, #3
 8013c08:	2204      	movs	r2, #4
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f7ff fae3 	bl	80131d6 <SCSI_SenseCode>
    return -1;
 8013c10:	f04f 33ff 	mov.w	r3, #4294967295
 8013c14:	e045      	b.n	8013ca2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8013c22:	4619      	mov	r1, r3
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8013c2a:	441a      	add	r2, r3
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8013c3e:	4619      	mov	r1, r3
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8013c46:	1ad2      	subs	r2, r2, r3
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	1ad2      	subs	r2, r2, r3
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d104      	bne.n	8013c72 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013c68:	2100      	movs	r1, #0
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f7fe fce8 	bl	8012640 <MSC_BOT_SendCSW>
 8013c70:	e016      	b.n	8013ca0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8013c78:	68fa      	ldr	r2, [r7, #12]
 8013c7a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8013c7e:	fb02 f303 	mul.w	r3, r2, r3
 8013c82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013c86:	bf28      	it	cs
 8013c88:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8013c8c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8013c8e:	4b07      	ldr	r3, [pc, #28]	@ (8013cac <SCSI_ProcessWrite+0x128>)
 8013c90:	7819      	ldrb	r1, [r3, #0]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	f103 0210 	add.w	r2, r3, #16
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f002 f85b 	bl	8015d56 <USBD_LL_PrepareReceive>
  }

  return 0;
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3714      	adds	r7, #20
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd90      	pop	{r4, r7, pc}
 8013caa:	bf00      	nop
 8013cac:	24000097 	.word	0x24000097

08013cb0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8013cb0:	b480      	push	{r7}
 8013cb2:	b087      	sub	sp, #28
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	60f8      	str	r0, [r7, #12]
 8013cb8:	60b9      	str	r1, [r7, #8]
 8013cba:	4613      	mov	r3, r2
 8013cbc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8013cbe:	88fb      	ldrh	r3, [r7, #6]
 8013cc0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d102      	bne.n	8013cce <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8013cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8013ccc:	e013      	b.n	8013cf6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8013cce:	8afa      	ldrh	r2, [r7, #22]
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8013cd4:	e00b      	b.n	8013cee <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8013cd6:	8afb      	ldrh	r3, [r7, #22]
 8013cd8:	3b01      	subs	r3, #1
 8013cda:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8013cdc:	8afb      	ldrh	r3, [r7, #22]
 8013cde:	68ba      	ldr	r2, [r7, #8]
 8013ce0:	441a      	add	r2, r3
 8013ce2:	8afb      	ldrh	r3, [r7, #22]
 8013ce4:	7811      	ldrb	r1, [r2, #0]
 8013ce6:	68fa      	ldr	r2, [r7, #12]
 8013ce8:	4413      	add	r3, r2
 8013cea:	460a      	mov	r2, r1
 8013cec:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8013cee:	8afb      	ldrh	r3, [r7, #22]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d1f0      	bne.n	8013cd6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8013cf4:	2300      	movs	r3, #0
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	371c      	adds	r7, #28
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr

08013d02 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013d02:	b580      	push	{r7, lr}
 8013d04:	b086      	sub	sp, #24
 8013d06:	af00      	add	r7, sp, #0
 8013d08:	60f8      	str	r0, [r7, #12]
 8013d0a:	60b9      	str	r1, [r7, #8]
 8013d0c:	4613      	mov	r3, r2
 8013d0e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d101      	bne.n	8013d1a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013d16:	2303      	movs	r3, #3
 8013d18:	e01f      	b.n	8013d5a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2200      	movs	r2, #0
 8013d26:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d003      	beq.n	8013d40 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	68ba      	ldr	r2, [r7, #8]
 8013d3c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	2201      	movs	r2, #1
 8013d44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	79fa      	ldrb	r2, [r7, #7]
 8013d4c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013d4e:	68f8      	ldr	r0, [r7, #12]
 8013d50:	f001 fe88 	bl	8015a64 <USBD_LL_Init>
 8013d54:	4603      	mov	r3, r0
 8013d56:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3718      	adds	r7, #24
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}

08013d62 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013d62:	b580      	push	{r7, lr}
 8013d64:	b084      	sub	sp, #16
 8013d66:	af00      	add	r7, sp, #0
 8013d68:	6078      	str	r0, [r7, #4]
 8013d6a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d101      	bne.n	8013d7a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013d76:	2303      	movs	r3, #3
 8013d78:	e025      	b.n	8013dc6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	683a      	ldr	r2, [r7, #0]
 8013d7e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	32ae      	adds	r2, #174	@ 0xae
 8013d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d00f      	beq.n	8013db6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	32ae      	adds	r2, #174	@ 0xae
 8013da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013da6:	f107 020e 	add.w	r2, r7, #14
 8013daa:	4610      	mov	r0, r2
 8013dac:	4798      	blx	r3
 8013dae:	4602      	mov	r2, r0
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013dbc:	1c5a      	adds	r2, r3, #1
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013dc4:	2300      	movs	r3, #0
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3710      	adds	r7, #16
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}

08013dce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013dce:	b580      	push	{r7, lr}
 8013dd0:	b082      	sub	sp, #8
 8013dd2:	af00      	add	r7, sp, #0
 8013dd4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f001 fe94 	bl	8015b04 <USBD_LL_Start>
 8013ddc:	4603      	mov	r3, r0
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3708      	adds	r7, #8
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}

08013de6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013de6:	b480      	push	{r7}
 8013de8:	b083      	sub	sp, #12
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013dee:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	370c      	adds	r7, #12
 8013df4:	46bd      	mov	sp, r7
 8013df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfa:	4770      	bx	lr

08013dfc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b084      	sub	sp, #16
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	460b      	mov	r3, r1
 8013e06:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e08:	2300      	movs	r3, #0
 8013e0a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d009      	beq.n	8013e2a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	78fa      	ldrb	r2, [r7, #3]
 8013e20:	4611      	mov	r1, r2
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	4798      	blx	r3
 8013e26:	4603      	mov	r3, r0
 8013e28:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3710      	adds	r7, #16
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b084      	sub	sp, #16
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	460b      	mov	r3, r1
 8013e3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e40:	2300      	movs	r3, #0
 8013e42:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e4a:	685b      	ldr	r3, [r3, #4]
 8013e4c:	78fa      	ldrb	r2, [r7, #3]
 8013e4e:	4611      	mov	r1, r2
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	4798      	blx	r3
 8013e54:	4603      	mov	r3, r0
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d001      	beq.n	8013e5e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013e5a:	2303      	movs	r3, #3
 8013e5c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	3710      	adds	r7, #16
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}

08013e68 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b084      	sub	sp, #16
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
 8013e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013e78:	6839      	ldr	r1, [r7, #0]
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f001 f935 	bl	80150ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2201      	movs	r2, #1
 8013e84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013e8e:	461a      	mov	r2, r3
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013e9c:	f003 031f 	and.w	r3, r3, #31
 8013ea0:	2b02      	cmp	r3, #2
 8013ea2:	d01a      	beq.n	8013eda <USBD_LL_SetupStage+0x72>
 8013ea4:	2b02      	cmp	r3, #2
 8013ea6:	d822      	bhi.n	8013eee <USBD_LL_SetupStage+0x86>
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d002      	beq.n	8013eb2 <USBD_LL_SetupStage+0x4a>
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d00a      	beq.n	8013ec6 <USBD_LL_SetupStage+0x5e>
 8013eb0:	e01d      	b.n	8013eee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013eb8:	4619      	mov	r1, r3
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f000 fb62 	bl	8014584 <USBD_StdDevReq>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8013ec4:	e020      	b.n	8013f08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013ecc:	4619      	mov	r1, r3
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f000 fbca 	bl	8014668 <USBD_StdItfReq>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8013ed8:	e016      	b.n	8013f08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 fc2c 	bl	8014740 <USBD_StdEPReq>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	73fb      	strb	r3, [r7, #15]
      break;
 8013eec:	e00c      	b.n	8013f08 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013ef4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013ef8:	b2db      	uxtb	r3, r3
 8013efa:	4619      	mov	r1, r3
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f001 fe80 	bl	8015c02 <USBD_LL_StallEP>
 8013f02:	4603      	mov	r3, r0
 8013f04:	73fb      	strb	r3, [r7, #15]
      break;
 8013f06:	bf00      	nop
  }

  return ret;
 8013f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3710      	adds	r7, #16
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}

08013f12 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013f12:	b580      	push	{r7, lr}
 8013f14:	b086      	sub	sp, #24
 8013f16:	af00      	add	r7, sp, #0
 8013f18:	60f8      	str	r0, [r7, #12]
 8013f1a:	460b      	mov	r3, r1
 8013f1c:	607a      	str	r2, [r7, #4]
 8013f1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013f20:	2300      	movs	r3, #0
 8013f22:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013f24:	7afb      	ldrb	r3, [r7, #11]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d16e      	bne.n	8014008 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013f30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013f38:	2b03      	cmp	r3, #3
 8013f3a:	f040 8098 	bne.w	801406e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	689a      	ldr	r2, [r3, #8]
 8013f42:	693b      	ldr	r3, [r7, #16]
 8013f44:	68db      	ldr	r3, [r3, #12]
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d913      	bls.n	8013f72 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	689a      	ldr	r2, [r3, #8]
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	68db      	ldr	r3, [r3, #12]
 8013f52:	1ad2      	subs	r2, r2, r3
 8013f54:	693b      	ldr	r3, [r7, #16]
 8013f56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	68da      	ldr	r2, [r3, #12]
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	4293      	cmp	r3, r2
 8013f62:	bf28      	it	cs
 8013f64:	4613      	movcs	r3, r2
 8013f66:	461a      	mov	r2, r3
 8013f68:	6879      	ldr	r1, [r7, #4]
 8013f6a:	68f8      	ldr	r0, [r7, #12]
 8013f6c:	f001 f9a0 	bl	80152b0 <USBD_CtlContinueRx>
 8013f70:	e07d      	b.n	801406e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013f78:	f003 031f 	and.w	r3, r3, #31
 8013f7c:	2b02      	cmp	r3, #2
 8013f7e:	d014      	beq.n	8013faa <USBD_LL_DataOutStage+0x98>
 8013f80:	2b02      	cmp	r3, #2
 8013f82:	d81d      	bhi.n	8013fc0 <USBD_LL_DataOutStage+0xae>
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d002      	beq.n	8013f8e <USBD_LL_DataOutStage+0x7c>
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d003      	beq.n	8013f94 <USBD_LL_DataOutStage+0x82>
 8013f8c:	e018      	b.n	8013fc0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	75bb      	strb	r3, [r7, #22]
            break;
 8013f92:	e018      	b.n	8013fc6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013f9a:	b2db      	uxtb	r3, r3
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	68f8      	ldr	r0, [r7, #12]
 8013fa0:	f000 fa64 	bl	801446c <USBD_CoreFindIF>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	75bb      	strb	r3, [r7, #22]
            break;
 8013fa8:	e00d      	b.n	8013fc6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	68f8      	ldr	r0, [r7, #12]
 8013fb6:	f000 fa66 	bl	8014486 <USBD_CoreFindEP>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	75bb      	strb	r3, [r7, #22]
            break;
 8013fbe:	e002      	b.n	8013fc6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	75bb      	strb	r3, [r7, #22]
            break;
 8013fc4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013fc6:	7dbb      	ldrb	r3, [r7, #22]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d119      	bne.n	8014000 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fd2:	b2db      	uxtb	r3, r3
 8013fd4:	2b03      	cmp	r3, #3
 8013fd6:	d113      	bne.n	8014000 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013fd8:	7dba      	ldrb	r2, [r7, #22]
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	32ae      	adds	r2, #174	@ 0xae
 8013fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fe2:	691b      	ldr	r3, [r3, #16]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00b      	beq.n	8014000 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013fe8:	7dba      	ldrb	r2, [r7, #22]
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013ff0:	7dba      	ldrb	r2, [r7, #22]
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	32ae      	adds	r2, #174	@ 0xae
 8013ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ffa:	691b      	ldr	r3, [r3, #16]
 8013ffc:	68f8      	ldr	r0, [r7, #12]
 8013ffe:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014000:	68f8      	ldr	r0, [r7, #12]
 8014002:	f001 f966 	bl	80152d2 <USBD_CtlSendStatus>
 8014006:	e032      	b.n	801406e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014008:	7afb      	ldrb	r3, [r7, #11]
 801400a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801400e:	b2db      	uxtb	r3, r3
 8014010:	4619      	mov	r1, r3
 8014012:	68f8      	ldr	r0, [r7, #12]
 8014014:	f000 fa37 	bl	8014486 <USBD_CoreFindEP>
 8014018:	4603      	mov	r3, r0
 801401a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801401c:	7dbb      	ldrb	r3, [r7, #22]
 801401e:	2bff      	cmp	r3, #255	@ 0xff
 8014020:	d025      	beq.n	801406e <USBD_LL_DataOutStage+0x15c>
 8014022:	7dbb      	ldrb	r3, [r7, #22]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d122      	bne.n	801406e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801402e:	b2db      	uxtb	r3, r3
 8014030:	2b03      	cmp	r3, #3
 8014032:	d117      	bne.n	8014064 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014034:	7dba      	ldrb	r2, [r7, #22]
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	32ae      	adds	r2, #174	@ 0xae
 801403a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801403e:	699b      	ldr	r3, [r3, #24]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d00f      	beq.n	8014064 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014044:	7dba      	ldrb	r2, [r7, #22]
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801404c:	7dba      	ldrb	r2, [r7, #22]
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	32ae      	adds	r2, #174	@ 0xae
 8014052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014056:	699b      	ldr	r3, [r3, #24]
 8014058:	7afa      	ldrb	r2, [r7, #11]
 801405a:	4611      	mov	r1, r2
 801405c:	68f8      	ldr	r0, [r7, #12]
 801405e:	4798      	blx	r3
 8014060:	4603      	mov	r3, r0
 8014062:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014064:	7dfb      	ldrb	r3, [r7, #23]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d001      	beq.n	801406e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801406a:	7dfb      	ldrb	r3, [r7, #23]
 801406c:	e000      	b.n	8014070 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801406e:	2300      	movs	r3, #0
}
 8014070:	4618      	mov	r0, r3
 8014072:	3718      	adds	r7, #24
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b086      	sub	sp, #24
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	460b      	mov	r3, r1
 8014082:	607a      	str	r2, [r7, #4]
 8014084:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014086:	7afb      	ldrb	r3, [r7, #11]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d16f      	bne.n	801416c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	3314      	adds	r3, #20
 8014090:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014098:	2b02      	cmp	r3, #2
 801409a:	d15a      	bne.n	8014152 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	689a      	ldr	r2, [r3, #8]
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	68db      	ldr	r3, [r3, #12]
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d914      	bls.n	80140d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	689a      	ldr	r2, [r3, #8]
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	68db      	ldr	r3, [r3, #12]
 80140b0:	1ad2      	subs	r2, r2, r3
 80140b2:	693b      	ldr	r3, [r7, #16]
 80140b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	689b      	ldr	r3, [r3, #8]
 80140ba:	461a      	mov	r2, r3
 80140bc:	6879      	ldr	r1, [r7, #4]
 80140be:	68f8      	ldr	r0, [r7, #12]
 80140c0:	f001 f8e5 	bl	801528e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80140c4:	2300      	movs	r3, #0
 80140c6:	2200      	movs	r2, #0
 80140c8:	2100      	movs	r1, #0
 80140ca:	68f8      	ldr	r0, [r7, #12]
 80140cc:	f001 fe43 	bl	8015d56 <USBD_LL_PrepareReceive>
 80140d0:	e03f      	b.n	8014152 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80140d2:	693b      	ldr	r3, [r7, #16]
 80140d4:	68da      	ldr	r2, [r3, #12]
 80140d6:	693b      	ldr	r3, [r7, #16]
 80140d8:	689b      	ldr	r3, [r3, #8]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d11c      	bne.n	8014118 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	685a      	ldr	r2, [r3, #4]
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d316      	bcc.n	8014118 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	685a      	ldr	r2, [r3, #4]
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d20f      	bcs.n	8014118 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80140f8:	2200      	movs	r2, #0
 80140fa:	2100      	movs	r1, #0
 80140fc:	68f8      	ldr	r0, [r7, #12]
 80140fe:	f001 f8c6 	bl	801528e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	2200      	movs	r2, #0
 8014106:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801410a:	2300      	movs	r3, #0
 801410c:	2200      	movs	r2, #0
 801410e:	2100      	movs	r1, #0
 8014110:	68f8      	ldr	r0, [r7, #12]
 8014112:	f001 fe20 	bl	8015d56 <USBD_LL_PrepareReceive>
 8014116:	e01c      	b.n	8014152 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801411e:	b2db      	uxtb	r3, r3
 8014120:	2b03      	cmp	r3, #3
 8014122:	d10f      	bne.n	8014144 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801412a:	68db      	ldr	r3, [r3, #12]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d009      	beq.n	8014144 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	2200      	movs	r2, #0
 8014134:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801413e:	68db      	ldr	r3, [r3, #12]
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014144:	2180      	movs	r1, #128	@ 0x80
 8014146:	68f8      	ldr	r0, [r7, #12]
 8014148:	f001 fd5b 	bl	8015c02 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801414c:	68f8      	ldr	r0, [r7, #12]
 801414e:	f001 f8d3 	bl	80152f8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d03a      	beq.n	80141d2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801415c:	68f8      	ldr	r0, [r7, #12]
 801415e:	f7ff fe42 	bl	8013de6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2200      	movs	r2, #0
 8014166:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801416a:	e032      	b.n	80141d2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801416c:	7afb      	ldrb	r3, [r7, #11]
 801416e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014172:	b2db      	uxtb	r3, r3
 8014174:	4619      	mov	r1, r3
 8014176:	68f8      	ldr	r0, [r7, #12]
 8014178:	f000 f985 	bl	8014486 <USBD_CoreFindEP>
 801417c:	4603      	mov	r3, r0
 801417e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014180:	7dfb      	ldrb	r3, [r7, #23]
 8014182:	2bff      	cmp	r3, #255	@ 0xff
 8014184:	d025      	beq.n	80141d2 <USBD_LL_DataInStage+0x15a>
 8014186:	7dfb      	ldrb	r3, [r7, #23]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d122      	bne.n	80141d2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014192:	b2db      	uxtb	r3, r3
 8014194:	2b03      	cmp	r3, #3
 8014196:	d11c      	bne.n	80141d2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014198:	7dfa      	ldrb	r2, [r7, #23]
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	32ae      	adds	r2, #174	@ 0xae
 801419e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141a2:	695b      	ldr	r3, [r3, #20]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d014      	beq.n	80141d2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80141a8:	7dfa      	ldrb	r2, [r7, #23]
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80141b0:	7dfa      	ldrb	r2, [r7, #23]
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	32ae      	adds	r2, #174	@ 0xae
 80141b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141ba:	695b      	ldr	r3, [r3, #20]
 80141bc:	7afa      	ldrb	r2, [r7, #11]
 80141be:	4611      	mov	r1, r2
 80141c0:	68f8      	ldr	r0, [r7, #12]
 80141c2:	4798      	blx	r3
 80141c4:	4603      	mov	r3, r0
 80141c6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80141c8:	7dbb      	ldrb	r3, [r7, #22]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d001      	beq.n	80141d2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80141ce:	7dbb      	ldrb	r3, [r7, #22]
 80141d0:	e000      	b.n	80141d4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80141d2:	2300      	movs	r3, #0
}
 80141d4:	4618      	mov	r0, r3
 80141d6:	3718      	adds	r7, #24
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}

080141dc <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b084      	sub	sp, #16
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80141e4:	2300      	movs	r3, #0
 80141e6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2201      	movs	r2, #1
 80141ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2200      	movs	r2, #0
 80141f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2200      	movs	r2, #0
 80141fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2200      	movs	r2, #0
 8014202:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	2200      	movs	r2, #0
 801420a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014214:	2b00      	cmp	r3, #0
 8014216:	d014      	beq.n	8014242 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801421e:	685b      	ldr	r3, [r3, #4]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d00e      	beq.n	8014242 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	687a      	ldr	r2, [r7, #4]
 801422e:	6852      	ldr	r2, [r2, #4]
 8014230:	b2d2      	uxtb	r2, r2
 8014232:	4611      	mov	r1, r2
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	4798      	blx	r3
 8014238:	4603      	mov	r3, r0
 801423a:	2b00      	cmp	r3, #0
 801423c:	d001      	beq.n	8014242 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801423e:	2303      	movs	r3, #3
 8014240:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014242:	2340      	movs	r3, #64	@ 0x40
 8014244:	2200      	movs	r2, #0
 8014246:	2100      	movs	r1, #0
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f001 fc76 	bl	8015b3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2201      	movs	r2, #1
 8014252:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2240      	movs	r2, #64	@ 0x40
 801425a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801425e:	2340      	movs	r3, #64	@ 0x40
 8014260:	2200      	movs	r2, #0
 8014262:	2180      	movs	r1, #128	@ 0x80
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f001 fc68 	bl	8015b3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2201      	movs	r2, #1
 801426e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2240      	movs	r2, #64	@ 0x40
 8014274:	621a      	str	r2, [r3, #32]

  return ret;
 8014276:	7bfb      	ldrb	r3, [r7, #15]
}
 8014278:	4618      	mov	r0, r3
 801427a:	3710      	adds	r7, #16
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014280:	b480      	push	{r7}
 8014282:	b083      	sub	sp, #12
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	460b      	mov	r3, r1
 801428a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	78fa      	ldrb	r2, [r7, #3]
 8014290:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014292:	2300      	movs	r3, #0
}
 8014294:	4618      	mov	r0, r3
 8014296:	370c      	adds	r7, #12
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr

080142a0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80142a0:	b480      	push	{r7}
 80142a2:	b083      	sub	sp, #12
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142ae:	b2db      	uxtb	r3, r3
 80142b0:	2b04      	cmp	r3, #4
 80142b2:	d006      	beq.n	80142c2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142ba:	b2da      	uxtb	r2, r3
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2204      	movs	r2, #4
 80142c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80142ca:	2300      	movs	r3, #0
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	370c      	adds	r7, #12
 80142d0:	46bd      	mov	sp, r7
 80142d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d6:	4770      	bx	lr

080142d8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80142d8:	b480      	push	{r7}
 80142da:	b083      	sub	sp, #12
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	2b04      	cmp	r3, #4
 80142ea:	d106      	bne.n	80142fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80142f2:	b2da      	uxtb	r2, r3
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80142fa:	2300      	movs	r3, #0
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	370c      	adds	r7, #12
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr

08014308 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014316:	b2db      	uxtb	r3, r3
 8014318:	2b03      	cmp	r3, #3
 801431a:	d110      	bne.n	801433e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014322:	2b00      	cmp	r3, #0
 8014324:	d00b      	beq.n	801433e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801432c:	69db      	ldr	r3, [r3, #28]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d005      	beq.n	801433e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014338:	69db      	ldr	r3, [r3, #28]
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801433e:	2300      	movs	r3, #0
}
 8014340:	4618      	mov	r0, r3
 8014342:	3708      	adds	r7, #8
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b082      	sub	sp, #8
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	460b      	mov	r3, r1
 8014352:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	32ae      	adds	r2, #174	@ 0xae
 801435e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d101      	bne.n	801436a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014366:	2303      	movs	r3, #3
 8014368:	e01c      	b.n	80143a4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014370:	b2db      	uxtb	r3, r3
 8014372:	2b03      	cmp	r3, #3
 8014374:	d115      	bne.n	80143a2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	32ae      	adds	r2, #174	@ 0xae
 8014380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014384:	6a1b      	ldr	r3, [r3, #32]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d00b      	beq.n	80143a2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	32ae      	adds	r2, #174	@ 0xae
 8014394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014398:	6a1b      	ldr	r3, [r3, #32]
 801439a:	78fa      	ldrb	r2, [r7, #3]
 801439c:	4611      	mov	r1, r2
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80143a2:	2300      	movs	r3, #0
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	3708      	adds	r7, #8
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}

080143ac <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	460b      	mov	r3, r1
 80143b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	32ae      	adds	r2, #174	@ 0xae
 80143c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d101      	bne.n	80143ce <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80143ca:	2303      	movs	r3, #3
 80143cc:	e01c      	b.n	8014408 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80143d4:	b2db      	uxtb	r3, r3
 80143d6:	2b03      	cmp	r3, #3
 80143d8:	d115      	bne.n	8014406 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	32ae      	adds	r2, #174	@ 0xae
 80143e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d00b      	beq.n	8014406 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	32ae      	adds	r2, #174	@ 0xae
 80143f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143fe:	78fa      	ldrb	r2, [r7, #3]
 8014400:	4611      	mov	r1, r2
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014406:	2300      	movs	r3, #0
}
 8014408:	4618      	mov	r0, r3
 801440a:	3708      	adds	r7, #8
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}

08014410 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014410:	b480      	push	{r7}
 8014412:	b083      	sub	sp, #12
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014418:	2300      	movs	r3, #0
}
 801441a:	4618      	mov	r0, r3
 801441c:	370c      	adds	r7, #12
 801441e:	46bd      	mov	sp, r7
 8014420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014424:	4770      	bx	lr

08014426 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014426:	b580      	push	{r7, lr}
 8014428:	b084      	sub	sp, #16
 801442a:	af00      	add	r7, sp, #0
 801442c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801442e:	2300      	movs	r3, #0
 8014430:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	2201      	movs	r2, #1
 8014436:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014440:	2b00      	cmp	r3, #0
 8014442:	d00e      	beq.n	8014462 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	6852      	ldr	r2, [r2, #4]
 8014450:	b2d2      	uxtb	r2, r2
 8014452:	4611      	mov	r1, r2
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	4798      	blx	r3
 8014458:	4603      	mov	r3, r0
 801445a:	2b00      	cmp	r3, #0
 801445c:	d001      	beq.n	8014462 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801445e:	2303      	movs	r3, #3
 8014460:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014462:	7bfb      	ldrb	r3, [r7, #15]
}
 8014464:	4618      	mov	r0, r3
 8014466:	3710      	adds	r7, #16
 8014468:	46bd      	mov	sp, r7
 801446a:	bd80      	pop	{r7, pc}

0801446c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801446c:	b480      	push	{r7}
 801446e:	b083      	sub	sp, #12
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
 8014474:	460b      	mov	r3, r1
 8014476:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014478:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801447a:	4618      	mov	r0, r3
 801447c:	370c      	adds	r7, #12
 801447e:	46bd      	mov	sp, r7
 8014480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014484:	4770      	bx	lr

08014486 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014486:	b480      	push	{r7}
 8014488:	b083      	sub	sp, #12
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]
 801448e:	460b      	mov	r3, r1
 8014490:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014492:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014494:	4618      	mov	r0, r3
 8014496:	370c      	adds	r7, #12
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr

080144a0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b086      	sub	sp, #24
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	460b      	mov	r3, r1
 80144aa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80144b4:	2300      	movs	r3, #0
 80144b6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	885b      	ldrh	r3, [r3, #2]
 80144bc:	b29b      	uxth	r3, r3
 80144be:	68fa      	ldr	r2, [r7, #12]
 80144c0:	7812      	ldrb	r2, [r2, #0]
 80144c2:	4293      	cmp	r3, r2
 80144c4:	d91f      	bls.n	8014506 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80144cc:	e013      	b.n	80144f6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80144ce:	f107 030a 	add.w	r3, r7, #10
 80144d2:	4619      	mov	r1, r3
 80144d4:	6978      	ldr	r0, [r7, #20]
 80144d6:	f000 f81b 	bl	8014510 <USBD_GetNextDesc>
 80144da:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80144dc:	697b      	ldr	r3, [r7, #20]
 80144de:	785b      	ldrb	r3, [r3, #1]
 80144e0:	2b05      	cmp	r3, #5
 80144e2:	d108      	bne.n	80144f6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	789b      	ldrb	r3, [r3, #2]
 80144ec:	78fa      	ldrb	r2, [r7, #3]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d008      	beq.n	8014504 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80144f2:	2300      	movs	r3, #0
 80144f4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	885b      	ldrh	r3, [r3, #2]
 80144fa:	b29a      	uxth	r2, r3
 80144fc:	897b      	ldrh	r3, [r7, #10]
 80144fe:	429a      	cmp	r2, r3
 8014500:	d8e5      	bhi.n	80144ce <USBD_GetEpDesc+0x2e>
 8014502:	e000      	b.n	8014506 <USBD_GetEpDesc+0x66>
          break;
 8014504:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014506:	693b      	ldr	r3, [r7, #16]
}
 8014508:	4618      	mov	r0, r3
 801450a:	3718      	adds	r7, #24
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}

08014510 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014510:	b480      	push	{r7}
 8014512:	b085      	sub	sp, #20
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	881b      	ldrh	r3, [r3, #0]
 8014522:	68fa      	ldr	r2, [r7, #12]
 8014524:	7812      	ldrb	r2, [r2, #0]
 8014526:	4413      	add	r3, r2
 8014528:	b29a      	uxth	r2, r3
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	461a      	mov	r2, r3
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	4413      	add	r3, r2
 8014538:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801453a:	68fb      	ldr	r3, [r7, #12]
}
 801453c:	4618      	mov	r0, r3
 801453e:	3714      	adds	r7, #20
 8014540:	46bd      	mov	sp, r7
 8014542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014546:	4770      	bx	lr

08014548 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014548:	b480      	push	{r7}
 801454a:	b087      	sub	sp, #28
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	3301      	adds	r3, #1
 801455e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014566:	8a3b      	ldrh	r3, [r7, #16]
 8014568:	021b      	lsls	r3, r3, #8
 801456a:	b21a      	sxth	r2, r3
 801456c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014570:	4313      	orrs	r3, r2
 8014572:	b21b      	sxth	r3, r3
 8014574:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014576:	89fb      	ldrh	r3, [r7, #14]
}
 8014578:	4618      	mov	r0, r3
 801457a:	371c      	adds	r7, #28
 801457c:	46bd      	mov	sp, r7
 801457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014582:	4770      	bx	lr

08014584 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801458e:	2300      	movs	r3, #0
 8014590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801459a:	2b40      	cmp	r3, #64	@ 0x40
 801459c:	d005      	beq.n	80145aa <USBD_StdDevReq+0x26>
 801459e:	2b40      	cmp	r3, #64	@ 0x40
 80145a0:	d857      	bhi.n	8014652 <USBD_StdDevReq+0xce>
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d00f      	beq.n	80145c6 <USBD_StdDevReq+0x42>
 80145a6:	2b20      	cmp	r3, #32
 80145a8:	d153      	bne.n	8014652 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	32ae      	adds	r2, #174	@ 0xae
 80145b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145b8:	689b      	ldr	r3, [r3, #8]
 80145ba:	6839      	ldr	r1, [r7, #0]
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	4798      	blx	r3
 80145c0:	4603      	mov	r3, r0
 80145c2:	73fb      	strb	r3, [r7, #15]
      break;
 80145c4:	e04a      	b.n	801465c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	785b      	ldrb	r3, [r3, #1]
 80145ca:	2b09      	cmp	r3, #9
 80145cc:	d83b      	bhi.n	8014646 <USBD_StdDevReq+0xc2>
 80145ce:	a201      	add	r2, pc, #4	@ (adr r2, 80145d4 <USBD_StdDevReq+0x50>)
 80145d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145d4:	08014629 	.word	0x08014629
 80145d8:	0801463d 	.word	0x0801463d
 80145dc:	08014647 	.word	0x08014647
 80145e0:	08014633 	.word	0x08014633
 80145e4:	08014647 	.word	0x08014647
 80145e8:	08014607 	.word	0x08014607
 80145ec:	080145fd 	.word	0x080145fd
 80145f0:	08014647 	.word	0x08014647
 80145f4:	0801461f 	.word	0x0801461f
 80145f8:	08014611 	.word	0x08014611
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80145fc:	6839      	ldr	r1, [r7, #0]
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f000 fa3c 	bl	8014a7c <USBD_GetDescriptor>
          break;
 8014604:	e024      	b.n	8014650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014606:	6839      	ldr	r1, [r7, #0]
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f000 fbcb 	bl	8014da4 <USBD_SetAddress>
          break;
 801460e:	e01f      	b.n	8014650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014610:	6839      	ldr	r1, [r7, #0]
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f000 fc0a 	bl	8014e2c <USBD_SetConfig>
 8014618:	4603      	mov	r3, r0
 801461a:	73fb      	strb	r3, [r7, #15]
          break;
 801461c:	e018      	b.n	8014650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801461e:	6839      	ldr	r1, [r7, #0]
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	f000 fcad 	bl	8014f80 <USBD_GetConfig>
          break;
 8014626:	e013      	b.n	8014650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014628:	6839      	ldr	r1, [r7, #0]
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f000 fcde 	bl	8014fec <USBD_GetStatus>
          break;
 8014630:	e00e      	b.n	8014650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014632:	6839      	ldr	r1, [r7, #0]
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f000 fd0d 	bl	8015054 <USBD_SetFeature>
          break;
 801463a:	e009      	b.n	8014650 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801463c:	6839      	ldr	r1, [r7, #0]
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f000 fd31 	bl	80150a6 <USBD_ClrFeature>
          break;
 8014644:	e004      	b.n	8014650 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014646:	6839      	ldr	r1, [r7, #0]
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f000 fd88 	bl	801515e <USBD_CtlError>
          break;
 801464e:	bf00      	nop
      }
      break;
 8014650:	e004      	b.n	801465c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014652:	6839      	ldr	r1, [r7, #0]
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f000 fd82 	bl	801515e <USBD_CtlError>
      break;
 801465a:	bf00      	nop
  }

  return ret;
 801465c:	7bfb      	ldrb	r3, [r7, #15]
}
 801465e:	4618      	mov	r0, r3
 8014660:	3710      	adds	r7, #16
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}
 8014666:	bf00      	nop

08014668 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014672:	2300      	movs	r3, #0
 8014674:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801467e:	2b40      	cmp	r3, #64	@ 0x40
 8014680:	d005      	beq.n	801468e <USBD_StdItfReq+0x26>
 8014682:	2b40      	cmp	r3, #64	@ 0x40
 8014684:	d852      	bhi.n	801472c <USBD_StdItfReq+0xc4>
 8014686:	2b00      	cmp	r3, #0
 8014688:	d001      	beq.n	801468e <USBD_StdItfReq+0x26>
 801468a:	2b20      	cmp	r3, #32
 801468c:	d14e      	bne.n	801472c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014694:	b2db      	uxtb	r3, r3
 8014696:	3b01      	subs	r3, #1
 8014698:	2b02      	cmp	r3, #2
 801469a:	d840      	bhi.n	801471e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	889b      	ldrh	r3, [r3, #4]
 80146a0:	b2db      	uxtb	r3, r3
 80146a2:	2b01      	cmp	r3, #1
 80146a4:	d836      	bhi.n	8014714 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	889b      	ldrh	r3, [r3, #4]
 80146aa:	b2db      	uxtb	r3, r3
 80146ac:	4619      	mov	r1, r3
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f7ff fedc 	bl	801446c <USBD_CoreFindIF>
 80146b4:	4603      	mov	r3, r0
 80146b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80146b8:	7bbb      	ldrb	r3, [r7, #14]
 80146ba:	2bff      	cmp	r3, #255	@ 0xff
 80146bc:	d01d      	beq.n	80146fa <USBD_StdItfReq+0x92>
 80146be:	7bbb      	ldrb	r3, [r7, #14]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d11a      	bne.n	80146fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80146c4:	7bba      	ldrb	r2, [r7, #14]
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	32ae      	adds	r2, #174	@ 0xae
 80146ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146ce:	689b      	ldr	r3, [r3, #8]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d00f      	beq.n	80146f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80146d4:	7bba      	ldrb	r2, [r7, #14]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80146dc:	7bba      	ldrb	r2, [r7, #14]
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	32ae      	adds	r2, #174	@ 0xae
 80146e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146e6:	689b      	ldr	r3, [r3, #8]
 80146e8:	6839      	ldr	r1, [r7, #0]
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	4798      	blx	r3
 80146ee:	4603      	mov	r3, r0
 80146f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80146f2:	e004      	b.n	80146fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80146f4:	2303      	movs	r3, #3
 80146f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80146f8:	e001      	b.n	80146fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80146fa:	2303      	movs	r3, #3
 80146fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	88db      	ldrh	r3, [r3, #6]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d110      	bne.n	8014728 <USBD_StdItfReq+0xc0>
 8014706:	7bfb      	ldrb	r3, [r7, #15]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d10d      	bne.n	8014728 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f000 fde0 	bl	80152d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014712:	e009      	b.n	8014728 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014714:	6839      	ldr	r1, [r7, #0]
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	f000 fd21 	bl	801515e <USBD_CtlError>
          break;
 801471c:	e004      	b.n	8014728 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801471e:	6839      	ldr	r1, [r7, #0]
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f000 fd1c 	bl	801515e <USBD_CtlError>
          break;
 8014726:	e000      	b.n	801472a <USBD_StdItfReq+0xc2>
          break;
 8014728:	bf00      	nop
      }
      break;
 801472a:	e004      	b.n	8014736 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801472c:	6839      	ldr	r1, [r7, #0]
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f000 fd15 	bl	801515e <USBD_CtlError>
      break;
 8014734:	bf00      	nop
  }

  return ret;
 8014736:	7bfb      	ldrb	r3, [r7, #15]
}
 8014738:	4618      	mov	r0, r3
 801473a:	3710      	adds	r7, #16
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}

08014740 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b084      	sub	sp, #16
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801474a:	2300      	movs	r3, #0
 801474c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	889b      	ldrh	r3, [r3, #4]
 8014752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801475c:	2b40      	cmp	r3, #64	@ 0x40
 801475e:	d007      	beq.n	8014770 <USBD_StdEPReq+0x30>
 8014760:	2b40      	cmp	r3, #64	@ 0x40
 8014762:	f200 817f 	bhi.w	8014a64 <USBD_StdEPReq+0x324>
 8014766:	2b00      	cmp	r3, #0
 8014768:	d02a      	beq.n	80147c0 <USBD_StdEPReq+0x80>
 801476a:	2b20      	cmp	r3, #32
 801476c:	f040 817a 	bne.w	8014a64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014770:	7bbb      	ldrb	r3, [r7, #14]
 8014772:	4619      	mov	r1, r3
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f7ff fe86 	bl	8014486 <USBD_CoreFindEP>
 801477a:	4603      	mov	r3, r0
 801477c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801477e:	7b7b      	ldrb	r3, [r7, #13]
 8014780:	2bff      	cmp	r3, #255	@ 0xff
 8014782:	f000 8174 	beq.w	8014a6e <USBD_StdEPReq+0x32e>
 8014786:	7b7b      	ldrb	r3, [r7, #13]
 8014788:	2b00      	cmp	r3, #0
 801478a:	f040 8170 	bne.w	8014a6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801478e:	7b7a      	ldrb	r2, [r7, #13]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014796:	7b7a      	ldrb	r2, [r7, #13]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	32ae      	adds	r2, #174	@ 0xae
 801479c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147a0:	689b      	ldr	r3, [r3, #8]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	f000 8163 	beq.w	8014a6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80147a8:	7b7a      	ldrb	r2, [r7, #13]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	32ae      	adds	r2, #174	@ 0xae
 80147ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147b2:	689b      	ldr	r3, [r3, #8]
 80147b4:	6839      	ldr	r1, [r7, #0]
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	4798      	blx	r3
 80147ba:	4603      	mov	r3, r0
 80147bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80147be:	e156      	b.n	8014a6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	785b      	ldrb	r3, [r3, #1]
 80147c4:	2b03      	cmp	r3, #3
 80147c6:	d008      	beq.n	80147da <USBD_StdEPReq+0x9a>
 80147c8:	2b03      	cmp	r3, #3
 80147ca:	f300 8145 	bgt.w	8014a58 <USBD_StdEPReq+0x318>
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	f000 809b 	beq.w	801490a <USBD_StdEPReq+0x1ca>
 80147d4:	2b01      	cmp	r3, #1
 80147d6:	d03c      	beq.n	8014852 <USBD_StdEPReq+0x112>
 80147d8:	e13e      	b.n	8014a58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147e0:	b2db      	uxtb	r3, r3
 80147e2:	2b02      	cmp	r3, #2
 80147e4:	d002      	beq.n	80147ec <USBD_StdEPReq+0xac>
 80147e6:	2b03      	cmp	r3, #3
 80147e8:	d016      	beq.n	8014818 <USBD_StdEPReq+0xd8>
 80147ea:	e02c      	b.n	8014846 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147ec:	7bbb      	ldrb	r3, [r7, #14]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d00d      	beq.n	801480e <USBD_StdEPReq+0xce>
 80147f2:	7bbb      	ldrb	r3, [r7, #14]
 80147f4:	2b80      	cmp	r3, #128	@ 0x80
 80147f6:	d00a      	beq.n	801480e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80147f8:	7bbb      	ldrb	r3, [r7, #14]
 80147fa:	4619      	mov	r1, r3
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f001 fa00 	bl	8015c02 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014802:	2180      	movs	r1, #128	@ 0x80
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f001 f9fc 	bl	8015c02 <USBD_LL_StallEP>
 801480a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801480c:	e020      	b.n	8014850 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801480e:	6839      	ldr	r1, [r7, #0]
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f000 fca4 	bl	801515e <USBD_CtlError>
              break;
 8014816:	e01b      	b.n	8014850 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	885b      	ldrh	r3, [r3, #2]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d10e      	bne.n	801483e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014820:	7bbb      	ldrb	r3, [r7, #14]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d00b      	beq.n	801483e <USBD_StdEPReq+0xfe>
 8014826:	7bbb      	ldrb	r3, [r7, #14]
 8014828:	2b80      	cmp	r3, #128	@ 0x80
 801482a:	d008      	beq.n	801483e <USBD_StdEPReq+0xfe>
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	88db      	ldrh	r3, [r3, #6]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d104      	bne.n	801483e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014834:	7bbb      	ldrb	r3, [r7, #14]
 8014836:	4619      	mov	r1, r3
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f001 f9e2 	bl	8015c02 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f000 fd47 	bl	80152d2 <USBD_CtlSendStatus>

              break;
 8014844:	e004      	b.n	8014850 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014846:	6839      	ldr	r1, [r7, #0]
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f000 fc88 	bl	801515e <USBD_CtlError>
              break;
 801484e:	bf00      	nop
          }
          break;
 8014850:	e107      	b.n	8014a62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014858:	b2db      	uxtb	r3, r3
 801485a:	2b02      	cmp	r3, #2
 801485c:	d002      	beq.n	8014864 <USBD_StdEPReq+0x124>
 801485e:	2b03      	cmp	r3, #3
 8014860:	d016      	beq.n	8014890 <USBD_StdEPReq+0x150>
 8014862:	e04b      	b.n	80148fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014864:	7bbb      	ldrb	r3, [r7, #14]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d00d      	beq.n	8014886 <USBD_StdEPReq+0x146>
 801486a:	7bbb      	ldrb	r3, [r7, #14]
 801486c:	2b80      	cmp	r3, #128	@ 0x80
 801486e:	d00a      	beq.n	8014886 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014870:	7bbb      	ldrb	r3, [r7, #14]
 8014872:	4619      	mov	r1, r3
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f001 f9c4 	bl	8015c02 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801487a:	2180      	movs	r1, #128	@ 0x80
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f001 f9c0 	bl	8015c02 <USBD_LL_StallEP>
 8014882:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014884:	e040      	b.n	8014908 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014886:	6839      	ldr	r1, [r7, #0]
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f000 fc68 	bl	801515e <USBD_CtlError>
              break;
 801488e:	e03b      	b.n	8014908 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	885b      	ldrh	r3, [r3, #2]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d136      	bne.n	8014906 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014898:	7bbb      	ldrb	r3, [r7, #14]
 801489a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d004      	beq.n	80148ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80148a2:	7bbb      	ldrb	r3, [r7, #14]
 80148a4:	4619      	mov	r1, r3
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f001 f9ca 	bl	8015c40 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f000 fd10 	bl	80152d2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80148b2:	7bbb      	ldrb	r3, [r7, #14]
 80148b4:	4619      	mov	r1, r3
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f7ff fde5 	bl	8014486 <USBD_CoreFindEP>
 80148bc:	4603      	mov	r3, r0
 80148be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80148c0:	7b7b      	ldrb	r3, [r7, #13]
 80148c2:	2bff      	cmp	r3, #255	@ 0xff
 80148c4:	d01f      	beq.n	8014906 <USBD_StdEPReq+0x1c6>
 80148c6:	7b7b      	ldrb	r3, [r7, #13]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d11c      	bne.n	8014906 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80148cc:	7b7a      	ldrb	r2, [r7, #13]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80148d4:	7b7a      	ldrb	r2, [r7, #13]
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	32ae      	adds	r2, #174	@ 0xae
 80148da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148de:	689b      	ldr	r3, [r3, #8]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d010      	beq.n	8014906 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80148e4:	7b7a      	ldrb	r2, [r7, #13]
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	32ae      	adds	r2, #174	@ 0xae
 80148ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ee:	689b      	ldr	r3, [r3, #8]
 80148f0:	6839      	ldr	r1, [r7, #0]
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	4798      	blx	r3
 80148f6:	4603      	mov	r3, r0
 80148f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80148fa:	e004      	b.n	8014906 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80148fc:	6839      	ldr	r1, [r7, #0]
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f000 fc2d 	bl	801515e <USBD_CtlError>
              break;
 8014904:	e000      	b.n	8014908 <USBD_StdEPReq+0x1c8>
              break;
 8014906:	bf00      	nop
          }
          break;
 8014908:	e0ab      	b.n	8014a62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2b02      	cmp	r3, #2
 8014914:	d002      	beq.n	801491c <USBD_StdEPReq+0x1dc>
 8014916:	2b03      	cmp	r3, #3
 8014918:	d032      	beq.n	8014980 <USBD_StdEPReq+0x240>
 801491a:	e097      	b.n	8014a4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801491c:	7bbb      	ldrb	r3, [r7, #14]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d007      	beq.n	8014932 <USBD_StdEPReq+0x1f2>
 8014922:	7bbb      	ldrb	r3, [r7, #14]
 8014924:	2b80      	cmp	r3, #128	@ 0x80
 8014926:	d004      	beq.n	8014932 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014928:	6839      	ldr	r1, [r7, #0]
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	f000 fc17 	bl	801515e <USBD_CtlError>
                break;
 8014930:	e091      	b.n	8014a56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014936:	2b00      	cmp	r3, #0
 8014938:	da0b      	bge.n	8014952 <USBD_StdEPReq+0x212>
 801493a:	7bbb      	ldrb	r3, [r7, #14]
 801493c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014940:	4613      	mov	r3, r2
 8014942:	009b      	lsls	r3, r3, #2
 8014944:	4413      	add	r3, r2
 8014946:	009b      	lsls	r3, r3, #2
 8014948:	3310      	adds	r3, #16
 801494a:	687a      	ldr	r2, [r7, #4]
 801494c:	4413      	add	r3, r2
 801494e:	3304      	adds	r3, #4
 8014950:	e00b      	b.n	801496a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014952:	7bbb      	ldrb	r3, [r7, #14]
 8014954:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014958:	4613      	mov	r3, r2
 801495a:	009b      	lsls	r3, r3, #2
 801495c:	4413      	add	r3, r2
 801495e:	009b      	lsls	r3, r3, #2
 8014960:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	4413      	add	r3, r2
 8014968:	3304      	adds	r3, #4
 801496a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	2200      	movs	r2, #0
 8014970:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	2202      	movs	r2, #2
 8014976:	4619      	mov	r1, r3
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f000 fc6d 	bl	8015258 <USBD_CtlSendData>
              break;
 801497e:	e06a      	b.n	8014a56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014984:	2b00      	cmp	r3, #0
 8014986:	da11      	bge.n	80149ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014988:	7bbb      	ldrb	r3, [r7, #14]
 801498a:	f003 020f 	and.w	r2, r3, #15
 801498e:	6879      	ldr	r1, [r7, #4]
 8014990:	4613      	mov	r3, r2
 8014992:	009b      	lsls	r3, r3, #2
 8014994:	4413      	add	r3, r2
 8014996:	009b      	lsls	r3, r3, #2
 8014998:	440b      	add	r3, r1
 801499a:	3324      	adds	r3, #36	@ 0x24
 801499c:	881b      	ldrh	r3, [r3, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d117      	bne.n	80149d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80149a2:	6839      	ldr	r1, [r7, #0]
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f000 fbda 	bl	801515e <USBD_CtlError>
                  break;
 80149aa:	e054      	b.n	8014a56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80149ac:	7bbb      	ldrb	r3, [r7, #14]
 80149ae:	f003 020f 	and.w	r2, r3, #15
 80149b2:	6879      	ldr	r1, [r7, #4]
 80149b4:	4613      	mov	r3, r2
 80149b6:	009b      	lsls	r3, r3, #2
 80149b8:	4413      	add	r3, r2
 80149ba:	009b      	lsls	r3, r3, #2
 80149bc:	440b      	add	r3, r1
 80149be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80149c2:	881b      	ldrh	r3, [r3, #0]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d104      	bne.n	80149d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80149c8:	6839      	ldr	r1, [r7, #0]
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f000 fbc7 	bl	801515e <USBD_CtlError>
                  break;
 80149d0:	e041      	b.n	8014a56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	da0b      	bge.n	80149f2 <USBD_StdEPReq+0x2b2>
 80149da:	7bbb      	ldrb	r3, [r7, #14]
 80149dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80149e0:	4613      	mov	r3, r2
 80149e2:	009b      	lsls	r3, r3, #2
 80149e4:	4413      	add	r3, r2
 80149e6:	009b      	lsls	r3, r3, #2
 80149e8:	3310      	adds	r3, #16
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	4413      	add	r3, r2
 80149ee:	3304      	adds	r3, #4
 80149f0:	e00b      	b.n	8014a0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80149f2:	7bbb      	ldrb	r3, [r7, #14]
 80149f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149f8:	4613      	mov	r3, r2
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	4413      	add	r3, r2
 80149fe:	009b      	lsls	r3, r3, #2
 8014a00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	4413      	add	r3, r2
 8014a08:	3304      	adds	r3, #4
 8014a0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014a0c:	7bbb      	ldrb	r3, [r7, #14]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d002      	beq.n	8014a18 <USBD_StdEPReq+0x2d8>
 8014a12:	7bbb      	ldrb	r3, [r7, #14]
 8014a14:	2b80      	cmp	r3, #128	@ 0x80
 8014a16:	d103      	bne.n	8014a20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	601a      	str	r2, [r3, #0]
 8014a1e:	e00e      	b.n	8014a3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014a20:	7bbb      	ldrb	r3, [r7, #14]
 8014a22:	4619      	mov	r1, r3
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f001 f92a 	bl	8015c7e <USBD_LL_IsStallEP>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d003      	beq.n	8014a38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	2201      	movs	r2, #1
 8014a34:	601a      	str	r2, [r3, #0]
 8014a36:	e002      	b.n	8014a3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	2202      	movs	r2, #2
 8014a42:	4619      	mov	r1, r3
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f000 fc07 	bl	8015258 <USBD_CtlSendData>
              break;
 8014a4a:	e004      	b.n	8014a56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014a4c:	6839      	ldr	r1, [r7, #0]
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 fb85 	bl	801515e <USBD_CtlError>
              break;
 8014a54:	bf00      	nop
          }
          break;
 8014a56:	e004      	b.n	8014a62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014a58:	6839      	ldr	r1, [r7, #0]
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f000 fb7f 	bl	801515e <USBD_CtlError>
          break;
 8014a60:	bf00      	nop
      }
      break;
 8014a62:	e005      	b.n	8014a70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014a64:	6839      	ldr	r1, [r7, #0]
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f000 fb79 	bl	801515e <USBD_CtlError>
      break;
 8014a6c:	e000      	b.n	8014a70 <USBD_StdEPReq+0x330>
      break;
 8014a6e:	bf00      	nop
  }

  return ret;
 8014a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3710      	adds	r7, #16
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
	...

08014a7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014a86:	2300      	movs	r3, #0
 8014a88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	885b      	ldrh	r3, [r3, #2]
 8014a96:	0a1b      	lsrs	r3, r3, #8
 8014a98:	b29b      	uxth	r3, r3
 8014a9a:	3b01      	subs	r3, #1
 8014a9c:	2b0e      	cmp	r3, #14
 8014a9e:	f200 8152 	bhi.w	8014d46 <USBD_GetDescriptor+0x2ca>
 8014aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8014aa8 <USBD_GetDescriptor+0x2c>)
 8014aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014aa8:	08014b19 	.word	0x08014b19
 8014aac:	08014b31 	.word	0x08014b31
 8014ab0:	08014b71 	.word	0x08014b71
 8014ab4:	08014d47 	.word	0x08014d47
 8014ab8:	08014d47 	.word	0x08014d47
 8014abc:	08014ce7 	.word	0x08014ce7
 8014ac0:	08014d13 	.word	0x08014d13
 8014ac4:	08014d47 	.word	0x08014d47
 8014ac8:	08014d47 	.word	0x08014d47
 8014acc:	08014d47 	.word	0x08014d47
 8014ad0:	08014d47 	.word	0x08014d47
 8014ad4:	08014d47 	.word	0x08014d47
 8014ad8:	08014d47 	.word	0x08014d47
 8014adc:	08014d47 	.word	0x08014d47
 8014ae0:	08014ae5 	.word	0x08014ae5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014aea:	69db      	ldr	r3, [r3, #28]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d00b      	beq.n	8014b08 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014af6:	69db      	ldr	r3, [r3, #28]
 8014af8:	687a      	ldr	r2, [r7, #4]
 8014afa:	7c12      	ldrb	r2, [r2, #16]
 8014afc:	f107 0108 	add.w	r1, r7, #8
 8014b00:	4610      	mov	r0, r2
 8014b02:	4798      	blx	r3
 8014b04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b06:	e126      	b.n	8014d56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014b08:	6839      	ldr	r1, [r7, #0]
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f000 fb27 	bl	801515e <USBD_CtlError>
        err++;
 8014b10:	7afb      	ldrb	r3, [r7, #11]
 8014b12:	3301      	adds	r3, #1
 8014b14:	72fb      	strb	r3, [r7, #11]
      break;
 8014b16:	e11e      	b.n	8014d56 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	687a      	ldr	r2, [r7, #4]
 8014b22:	7c12      	ldrb	r2, [r2, #16]
 8014b24:	f107 0108 	add.w	r1, r7, #8
 8014b28:	4610      	mov	r0, r2
 8014b2a:	4798      	blx	r3
 8014b2c:	60f8      	str	r0, [r7, #12]
      break;
 8014b2e:	e112      	b.n	8014d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	7c1b      	ldrb	r3, [r3, #16]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d10d      	bne.n	8014b54 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b40:	f107 0208 	add.w	r2, r7, #8
 8014b44:	4610      	mov	r0, r2
 8014b46:	4798      	blx	r3
 8014b48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	2202      	movs	r2, #2
 8014b50:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014b52:	e100      	b.n	8014d56 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b5c:	f107 0208 	add.w	r2, r7, #8
 8014b60:	4610      	mov	r0, r2
 8014b62:	4798      	blx	r3
 8014b64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	3301      	adds	r3, #1
 8014b6a:	2202      	movs	r2, #2
 8014b6c:	701a      	strb	r2, [r3, #0]
      break;
 8014b6e:	e0f2      	b.n	8014d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	885b      	ldrh	r3, [r3, #2]
 8014b74:	b2db      	uxtb	r3, r3
 8014b76:	2b05      	cmp	r3, #5
 8014b78:	f200 80ac 	bhi.w	8014cd4 <USBD_GetDescriptor+0x258>
 8014b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8014b84 <USBD_GetDescriptor+0x108>)
 8014b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b82:	bf00      	nop
 8014b84:	08014b9d 	.word	0x08014b9d
 8014b88:	08014bd1 	.word	0x08014bd1
 8014b8c:	08014c05 	.word	0x08014c05
 8014b90:	08014c39 	.word	0x08014c39
 8014b94:	08014c6d 	.word	0x08014c6d
 8014b98:	08014ca1 	.word	0x08014ca1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014ba2:	685b      	ldr	r3, [r3, #4]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d00b      	beq.n	8014bc0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bae:	685b      	ldr	r3, [r3, #4]
 8014bb0:	687a      	ldr	r2, [r7, #4]
 8014bb2:	7c12      	ldrb	r2, [r2, #16]
 8014bb4:	f107 0108 	add.w	r1, r7, #8
 8014bb8:	4610      	mov	r0, r2
 8014bba:	4798      	blx	r3
 8014bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bbe:	e091      	b.n	8014ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014bc0:	6839      	ldr	r1, [r7, #0]
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f000 facb 	bl	801515e <USBD_CtlError>
            err++;
 8014bc8:	7afb      	ldrb	r3, [r7, #11]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8014bce:	e089      	b.n	8014ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bd6:	689b      	ldr	r3, [r3, #8]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d00b      	beq.n	8014bf4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014be2:	689b      	ldr	r3, [r3, #8]
 8014be4:	687a      	ldr	r2, [r7, #4]
 8014be6:	7c12      	ldrb	r2, [r2, #16]
 8014be8:	f107 0108 	add.w	r1, r7, #8
 8014bec:	4610      	mov	r0, r2
 8014bee:	4798      	blx	r3
 8014bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bf2:	e077      	b.n	8014ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014bf4:	6839      	ldr	r1, [r7, #0]
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f000 fab1 	bl	801515e <USBD_CtlError>
            err++;
 8014bfc:	7afb      	ldrb	r3, [r7, #11]
 8014bfe:	3301      	adds	r3, #1
 8014c00:	72fb      	strb	r3, [r7, #11]
          break;
 8014c02:	e06f      	b.n	8014ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c0a:	68db      	ldr	r3, [r3, #12]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d00b      	beq.n	8014c28 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c16:	68db      	ldr	r3, [r3, #12]
 8014c18:	687a      	ldr	r2, [r7, #4]
 8014c1a:	7c12      	ldrb	r2, [r2, #16]
 8014c1c:	f107 0108 	add.w	r1, r7, #8
 8014c20:	4610      	mov	r0, r2
 8014c22:	4798      	blx	r3
 8014c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c26:	e05d      	b.n	8014ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c28:	6839      	ldr	r1, [r7, #0]
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f000 fa97 	bl	801515e <USBD_CtlError>
            err++;
 8014c30:	7afb      	ldrb	r3, [r7, #11]
 8014c32:	3301      	adds	r3, #1
 8014c34:	72fb      	strb	r3, [r7, #11]
          break;
 8014c36:	e055      	b.n	8014ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c3e:	691b      	ldr	r3, [r3, #16]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d00b      	beq.n	8014c5c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c4a:	691b      	ldr	r3, [r3, #16]
 8014c4c:	687a      	ldr	r2, [r7, #4]
 8014c4e:	7c12      	ldrb	r2, [r2, #16]
 8014c50:	f107 0108 	add.w	r1, r7, #8
 8014c54:	4610      	mov	r0, r2
 8014c56:	4798      	blx	r3
 8014c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c5a:	e043      	b.n	8014ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c5c:	6839      	ldr	r1, [r7, #0]
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f000 fa7d 	bl	801515e <USBD_CtlError>
            err++;
 8014c64:	7afb      	ldrb	r3, [r7, #11]
 8014c66:	3301      	adds	r3, #1
 8014c68:	72fb      	strb	r3, [r7, #11]
          break;
 8014c6a:	e03b      	b.n	8014ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c72:	695b      	ldr	r3, [r3, #20]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d00b      	beq.n	8014c90 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c7e:	695b      	ldr	r3, [r3, #20]
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	7c12      	ldrb	r2, [r2, #16]
 8014c84:	f107 0108 	add.w	r1, r7, #8
 8014c88:	4610      	mov	r0, r2
 8014c8a:	4798      	blx	r3
 8014c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c8e:	e029      	b.n	8014ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c90:	6839      	ldr	r1, [r7, #0]
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f000 fa63 	bl	801515e <USBD_CtlError>
            err++;
 8014c98:	7afb      	ldrb	r3, [r7, #11]
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8014c9e:	e021      	b.n	8014ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014ca6:	699b      	ldr	r3, [r3, #24]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d00b      	beq.n	8014cc4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014cb2:	699b      	ldr	r3, [r3, #24]
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	7c12      	ldrb	r2, [r2, #16]
 8014cb8:	f107 0108 	add.w	r1, r7, #8
 8014cbc:	4610      	mov	r0, r2
 8014cbe:	4798      	blx	r3
 8014cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014cc2:	e00f      	b.n	8014ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014cc4:	6839      	ldr	r1, [r7, #0]
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f000 fa49 	bl	801515e <USBD_CtlError>
            err++;
 8014ccc:	7afb      	ldrb	r3, [r7, #11]
 8014cce:	3301      	adds	r3, #1
 8014cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8014cd2:	e007      	b.n	8014ce4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014cd4:	6839      	ldr	r1, [r7, #0]
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f000 fa41 	bl	801515e <USBD_CtlError>
          err++;
 8014cdc:	7afb      	ldrb	r3, [r7, #11]
 8014cde:	3301      	adds	r3, #1
 8014ce0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014ce2:	bf00      	nop
      }
      break;
 8014ce4:	e037      	b.n	8014d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	7c1b      	ldrb	r3, [r3, #16]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d109      	bne.n	8014d02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014cf6:	f107 0208 	add.w	r2, r7, #8
 8014cfa:	4610      	mov	r0, r2
 8014cfc:	4798      	blx	r3
 8014cfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d00:	e029      	b.n	8014d56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014d02:	6839      	ldr	r1, [r7, #0]
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f000 fa2a 	bl	801515e <USBD_CtlError>
        err++;
 8014d0a:	7afb      	ldrb	r3, [r7, #11]
 8014d0c:	3301      	adds	r3, #1
 8014d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8014d10:	e021      	b.n	8014d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	7c1b      	ldrb	r3, [r3, #16]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d10d      	bne.n	8014d36 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d22:	f107 0208 	add.w	r2, r7, #8
 8014d26:	4610      	mov	r0, r2
 8014d28:	4798      	blx	r3
 8014d2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	3301      	adds	r3, #1
 8014d30:	2207      	movs	r2, #7
 8014d32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d34:	e00f      	b.n	8014d56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014d36:	6839      	ldr	r1, [r7, #0]
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f000 fa10 	bl	801515e <USBD_CtlError>
        err++;
 8014d3e:	7afb      	ldrb	r3, [r7, #11]
 8014d40:	3301      	adds	r3, #1
 8014d42:	72fb      	strb	r3, [r7, #11]
      break;
 8014d44:	e007      	b.n	8014d56 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014d46:	6839      	ldr	r1, [r7, #0]
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f000 fa08 	bl	801515e <USBD_CtlError>
      err++;
 8014d4e:	7afb      	ldrb	r3, [r7, #11]
 8014d50:	3301      	adds	r3, #1
 8014d52:	72fb      	strb	r3, [r7, #11]
      break;
 8014d54:	bf00      	nop
  }

  if (err != 0U)
 8014d56:	7afb      	ldrb	r3, [r7, #11]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d11e      	bne.n	8014d9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014d5c:	683b      	ldr	r3, [r7, #0]
 8014d5e:	88db      	ldrh	r3, [r3, #6]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d016      	beq.n	8014d92 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014d64:	893b      	ldrh	r3, [r7, #8]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d00e      	beq.n	8014d88 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	88da      	ldrh	r2, [r3, #6]
 8014d6e:	893b      	ldrh	r3, [r7, #8]
 8014d70:	4293      	cmp	r3, r2
 8014d72:	bf28      	it	cs
 8014d74:	4613      	movcs	r3, r2
 8014d76:	b29b      	uxth	r3, r3
 8014d78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014d7a:	893b      	ldrh	r3, [r7, #8]
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	68f9      	ldr	r1, [r7, #12]
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f000 fa69 	bl	8015258 <USBD_CtlSendData>
 8014d86:	e009      	b.n	8014d9c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014d88:	6839      	ldr	r1, [r7, #0]
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	f000 f9e7 	bl	801515e <USBD_CtlError>
 8014d90:	e004      	b.n	8014d9c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014d92:	6878      	ldr	r0, [r7, #4]
 8014d94:	f000 fa9d 	bl	80152d2 <USBD_CtlSendStatus>
 8014d98:	e000      	b.n	8014d9c <USBD_GetDescriptor+0x320>
    return;
 8014d9a:	bf00      	nop
  }
}
 8014d9c:	3710      	adds	r7, #16
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}
 8014da2:	bf00      	nop

08014da4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b084      	sub	sp, #16
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	889b      	ldrh	r3, [r3, #4]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d131      	bne.n	8014e1a <USBD_SetAddress+0x76>
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	88db      	ldrh	r3, [r3, #6]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d12d      	bne.n	8014e1a <USBD_SetAddress+0x76>
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	885b      	ldrh	r3, [r3, #2]
 8014dc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8014dc4:	d829      	bhi.n	8014e1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	885b      	ldrh	r3, [r3, #2]
 8014dca:	b2db      	uxtb	r3, r3
 8014dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014dd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014dd8:	b2db      	uxtb	r3, r3
 8014dda:	2b03      	cmp	r3, #3
 8014ddc:	d104      	bne.n	8014de8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014dde:	6839      	ldr	r1, [r7, #0]
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f000 f9bc 	bl	801515e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014de6:	e01d      	b.n	8014e24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	7bfa      	ldrb	r2, [r7, #15]
 8014dec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014df0:	7bfb      	ldrb	r3, [r7, #15]
 8014df2:	4619      	mov	r1, r3
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f000 ff6e 	bl	8015cd6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f000 fa69 	bl	80152d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014e00:	7bfb      	ldrb	r3, [r7, #15]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d004      	beq.n	8014e10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	2202      	movs	r2, #2
 8014e0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e0e:	e009      	b.n	8014e24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2201      	movs	r2, #1
 8014e14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e18:	e004      	b.n	8014e24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014e1a:	6839      	ldr	r1, [r7, #0]
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f000 f99e 	bl	801515e <USBD_CtlError>
  }
}
 8014e22:	bf00      	nop
 8014e24:	bf00      	nop
 8014e26:	3710      	adds	r7, #16
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}

08014e2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b084      	sub	sp, #16
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e36:	2300      	movs	r3, #0
 8014e38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	885b      	ldrh	r3, [r3, #2]
 8014e3e:	b2da      	uxtb	r2, r3
 8014e40:	4b4e      	ldr	r3, [pc, #312]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014e42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014e44:	4b4d      	ldr	r3, [pc, #308]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014e46:	781b      	ldrb	r3, [r3, #0]
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d905      	bls.n	8014e58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014e4c:	6839      	ldr	r1, [r7, #0]
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f000 f985 	bl	801515e <USBD_CtlError>
    return USBD_FAIL;
 8014e54:	2303      	movs	r3, #3
 8014e56:	e08c      	b.n	8014f72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e5e:	b2db      	uxtb	r3, r3
 8014e60:	2b02      	cmp	r3, #2
 8014e62:	d002      	beq.n	8014e6a <USBD_SetConfig+0x3e>
 8014e64:	2b03      	cmp	r3, #3
 8014e66:	d029      	beq.n	8014ebc <USBD_SetConfig+0x90>
 8014e68:	e075      	b.n	8014f56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014e6a:	4b44      	ldr	r3, [pc, #272]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014e6c:	781b      	ldrb	r3, [r3, #0]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d020      	beq.n	8014eb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014e72:	4b42      	ldr	r3, [pc, #264]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014e74:	781b      	ldrb	r3, [r3, #0]
 8014e76:	461a      	mov	r2, r3
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014e7e:	781b      	ldrb	r3, [r3, #0]
 8014e80:	4619      	mov	r1, r3
 8014e82:	6878      	ldr	r0, [r7, #4]
 8014e84:	f7fe ffba 	bl	8013dfc <USBD_SetClassConfig>
 8014e88:	4603      	mov	r3, r0
 8014e8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014e8c:	7bfb      	ldrb	r3, [r7, #15]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d008      	beq.n	8014ea4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014e92:	6839      	ldr	r1, [r7, #0]
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f000 f962 	bl	801515e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2202      	movs	r2, #2
 8014e9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014ea2:	e065      	b.n	8014f70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014ea4:	6878      	ldr	r0, [r7, #4]
 8014ea6:	f000 fa14 	bl	80152d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2203      	movs	r2, #3
 8014eae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014eb2:	e05d      	b.n	8014f70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f000 fa0c 	bl	80152d2 <USBD_CtlSendStatus>
      break;
 8014eba:	e059      	b.n	8014f70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d112      	bne.n	8014eea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2202      	movs	r2, #2
 8014ec8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014ece:	781b      	ldrb	r3, [r3, #0]
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014ed6:	4b29      	ldr	r3, [pc, #164]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	4619      	mov	r1, r3
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f7fe ffa9 	bl	8013e34 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f000 f9f5 	bl	80152d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014ee8:	e042      	b.n	8014f70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014eea:	4b24      	ldr	r3, [pc, #144]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014eec:	781b      	ldrb	r3, [r3, #0]
 8014eee:	461a      	mov	r2, r3
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d02a      	beq.n	8014f4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	b2db      	uxtb	r3, r3
 8014efe:	4619      	mov	r1, r3
 8014f00:	6878      	ldr	r0, [r7, #4]
 8014f02:	f7fe ff97 	bl	8013e34 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014f06:	4b1d      	ldr	r3, [pc, #116]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014f08:	781b      	ldrb	r3, [r3, #0]
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014f10:	4b1a      	ldr	r3, [pc, #104]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	4619      	mov	r1, r3
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f7fe ff70 	bl	8013dfc <USBD_SetClassConfig>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014f20:	7bfb      	ldrb	r3, [r7, #15]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d00f      	beq.n	8014f46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014f26:	6839      	ldr	r1, [r7, #0]
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f000 f918 	bl	801515e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	685b      	ldr	r3, [r3, #4]
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	4619      	mov	r1, r3
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f7fe ff7c 	bl	8013e34 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2202      	movs	r2, #2
 8014f40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014f44:	e014      	b.n	8014f70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f000 f9c3 	bl	80152d2 <USBD_CtlSendStatus>
      break;
 8014f4c:	e010      	b.n	8014f70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f000 f9bf 	bl	80152d2 <USBD_CtlSendStatus>
      break;
 8014f54:	e00c      	b.n	8014f70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014f56:	6839      	ldr	r1, [r7, #0]
 8014f58:	6878      	ldr	r0, [r7, #4]
 8014f5a:	f000 f900 	bl	801515e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014f5e:	4b07      	ldr	r3, [pc, #28]	@ (8014f7c <USBD_SetConfig+0x150>)
 8014f60:	781b      	ldrb	r3, [r3, #0]
 8014f62:	4619      	mov	r1, r3
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f7fe ff65 	bl	8013e34 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014f6a:	2303      	movs	r3, #3
 8014f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8014f6e:	bf00      	nop
  }

  return ret;
 8014f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3710      	adds	r7, #16
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	240009e0 	.word	0x240009e0

08014f80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b082      	sub	sp, #8
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	88db      	ldrh	r3, [r3, #6]
 8014f8e:	2b01      	cmp	r3, #1
 8014f90:	d004      	beq.n	8014f9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014f92:	6839      	ldr	r1, [r7, #0]
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f000 f8e2 	bl	801515e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014f9a:	e023      	b.n	8014fe4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014fa2:	b2db      	uxtb	r3, r3
 8014fa4:	2b02      	cmp	r3, #2
 8014fa6:	dc02      	bgt.n	8014fae <USBD_GetConfig+0x2e>
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	dc03      	bgt.n	8014fb4 <USBD_GetConfig+0x34>
 8014fac:	e015      	b.n	8014fda <USBD_GetConfig+0x5a>
 8014fae:	2b03      	cmp	r3, #3
 8014fb0:	d00b      	beq.n	8014fca <USBD_GetConfig+0x4a>
 8014fb2:	e012      	b.n	8014fda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	3308      	adds	r3, #8
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f000 f948 	bl	8015258 <USBD_CtlSendData>
        break;
 8014fc8:	e00c      	b.n	8014fe4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	3304      	adds	r3, #4
 8014fce:	2201      	movs	r2, #1
 8014fd0:	4619      	mov	r1, r3
 8014fd2:	6878      	ldr	r0, [r7, #4]
 8014fd4:	f000 f940 	bl	8015258 <USBD_CtlSendData>
        break;
 8014fd8:	e004      	b.n	8014fe4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014fda:	6839      	ldr	r1, [r7, #0]
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f000 f8be 	bl	801515e <USBD_CtlError>
        break;
 8014fe2:	bf00      	nop
}
 8014fe4:	bf00      	nop
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014ffc:	b2db      	uxtb	r3, r3
 8014ffe:	3b01      	subs	r3, #1
 8015000:	2b02      	cmp	r3, #2
 8015002:	d81e      	bhi.n	8015042 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	88db      	ldrh	r3, [r3, #6]
 8015008:	2b02      	cmp	r3, #2
 801500a:	d004      	beq.n	8015016 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801500c:	6839      	ldr	r1, [r7, #0]
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f000 f8a5 	bl	801515e <USBD_CtlError>
        break;
 8015014:	e01a      	b.n	801504c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2201      	movs	r2, #1
 801501a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8015022:	2b00      	cmp	r3, #0
 8015024:	d005      	beq.n	8015032 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	68db      	ldr	r3, [r3, #12]
 801502a:	f043 0202 	orr.w	r2, r3, #2
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	330c      	adds	r3, #12
 8015036:	2202      	movs	r2, #2
 8015038:	4619      	mov	r1, r3
 801503a:	6878      	ldr	r0, [r7, #4]
 801503c:	f000 f90c 	bl	8015258 <USBD_CtlSendData>
      break;
 8015040:	e004      	b.n	801504c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015042:	6839      	ldr	r1, [r7, #0]
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f000 f88a 	bl	801515e <USBD_CtlError>
      break;
 801504a:	bf00      	nop
  }
}
 801504c:	bf00      	nop
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
 801505c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	885b      	ldrh	r3, [r3, #2]
 8015062:	2b01      	cmp	r3, #1
 8015064:	d107      	bne.n	8015076 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	2201      	movs	r2, #1
 801506a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f000 f92f 	bl	80152d2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015074:	e013      	b.n	801509e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	885b      	ldrh	r3, [r3, #2]
 801507a:	2b02      	cmp	r3, #2
 801507c:	d10b      	bne.n	8015096 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	889b      	ldrh	r3, [r3, #4]
 8015082:	0a1b      	lsrs	r3, r3, #8
 8015084:	b29b      	uxth	r3, r3
 8015086:	b2da      	uxtb	r2, r3
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f000 f91f 	bl	80152d2 <USBD_CtlSendStatus>
}
 8015094:	e003      	b.n	801509e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015096:	6839      	ldr	r1, [r7, #0]
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f000 f860 	bl	801515e <USBD_CtlError>
}
 801509e:	bf00      	nop
 80150a0:	3708      	adds	r7, #8
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}

080150a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150a6:	b580      	push	{r7, lr}
 80150a8:	b082      	sub	sp, #8
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	6078      	str	r0, [r7, #4]
 80150ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80150b6:	b2db      	uxtb	r3, r3
 80150b8:	3b01      	subs	r3, #1
 80150ba:	2b02      	cmp	r3, #2
 80150bc:	d80b      	bhi.n	80150d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	885b      	ldrh	r3, [r3, #2]
 80150c2:	2b01      	cmp	r3, #1
 80150c4:	d10c      	bne.n	80150e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	2200      	movs	r2, #0
 80150ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f000 f8ff 	bl	80152d2 <USBD_CtlSendStatus>
      }
      break;
 80150d4:	e004      	b.n	80150e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80150d6:	6839      	ldr	r1, [r7, #0]
 80150d8:	6878      	ldr	r0, [r7, #4]
 80150da:	f000 f840 	bl	801515e <USBD_CtlError>
      break;
 80150de:	e000      	b.n	80150e2 <USBD_ClrFeature+0x3c>
      break;
 80150e0:	bf00      	nop
  }
}
 80150e2:	bf00      	nop
 80150e4:	3708      	adds	r7, #8
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}

080150ea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80150ea:	b580      	push	{r7, lr}
 80150ec:	b084      	sub	sp, #16
 80150ee:	af00      	add	r7, sp, #0
 80150f0:	6078      	str	r0, [r7, #4]
 80150f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	781a      	ldrb	r2, [r3, #0]
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	3301      	adds	r3, #1
 8015104:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	781a      	ldrb	r2, [r3, #0]
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	3301      	adds	r3, #1
 8015112:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015114:	68f8      	ldr	r0, [r7, #12]
 8015116:	f7ff fa17 	bl	8014548 <SWAPBYTE>
 801511a:	4603      	mov	r3, r0
 801511c:	461a      	mov	r2, r3
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	3301      	adds	r3, #1
 8015126:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	3301      	adds	r3, #1
 801512c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	f7ff fa0a 	bl	8014548 <SWAPBYTE>
 8015134:	4603      	mov	r3, r0
 8015136:	461a      	mov	r2, r3
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	3301      	adds	r3, #1
 8015140:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	3301      	adds	r3, #1
 8015146:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015148:	68f8      	ldr	r0, [r7, #12]
 801514a:	f7ff f9fd 	bl	8014548 <SWAPBYTE>
 801514e:	4603      	mov	r3, r0
 8015150:	461a      	mov	r2, r3
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	80da      	strh	r2, [r3, #6]
}
 8015156:	bf00      	nop
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}

0801515e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801515e:	b580      	push	{r7, lr}
 8015160:	b082      	sub	sp, #8
 8015162:	af00      	add	r7, sp, #0
 8015164:	6078      	str	r0, [r7, #4]
 8015166:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015168:	2180      	movs	r1, #128	@ 0x80
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f000 fd49 	bl	8015c02 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015170:	2100      	movs	r1, #0
 8015172:	6878      	ldr	r0, [r7, #4]
 8015174:	f000 fd45 	bl	8015c02 <USBD_LL_StallEP>
}
 8015178:	bf00      	nop
 801517a:	3708      	adds	r7, #8
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}

08015180 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b086      	sub	sp, #24
 8015184:	af00      	add	r7, sp, #0
 8015186:	60f8      	str	r0, [r7, #12]
 8015188:	60b9      	str	r1, [r7, #8]
 801518a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801518c:	2300      	movs	r3, #0
 801518e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d042      	beq.n	801521c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801519a:	6938      	ldr	r0, [r7, #16]
 801519c:	f000 f842 	bl	8015224 <USBD_GetLen>
 80151a0:	4603      	mov	r3, r0
 80151a2:	3301      	adds	r3, #1
 80151a4:	005b      	lsls	r3, r3, #1
 80151a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80151aa:	d808      	bhi.n	80151be <USBD_GetString+0x3e>
 80151ac:	6938      	ldr	r0, [r7, #16]
 80151ae:	f000 f839 	bl	8015224 <USBD_GetLen>
 80151b2:	4603      	mov	r3, r0
 80151b4:	3301      	adds	r3, #1
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	005b      	lsls	r3, r3, #1
 80151ba:	b29a      	uxth	r2, r3
 80151bc:	e001      	b.n	80151c2 <USBD_GetString+0x42>
 80151be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80151c6:	7dfb      	ldrb	r3, [r7, #23]
 80151c8:	68ba      	ldr	r2, [r7, #8]
 80151ca:	4413      	add	r3, r2
 80151cc:	687a      	ldr	r2, [r7, #4]
 80151ce:	7812      	ldrb	r2, [r2, #0]
 80151d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80151d2:	7dfb      	ldrb	r3, [r7, #23]
 80151d4:	3301      	adds	r3, #1
 80151d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80151d8:	7dfb      	ldrb	r3, [r7, #23]
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	4413      	add	r3, r2
 80151de:	2203      	movs	r2, #3
 80151e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80151e2:	7dfb      	ldrb	r3, [r7, #23]
 80151e4:	3301      	adds	r3, #1
 80151e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80151e8:	e013      	b.n	8015212 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80151ea:	7dfb      	ldrb	r3, [r7, #23]
 80151ec:	68ba      	ldr	r2, [r7, #8]
 80151ee:	4413      	add	r3, r2
 80151f0:	693a      	ldr	r2, [r7, #16]
 80151f2:	7812      	ldrb	r2, [r2, #0]
 80151f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80151f6:	693b      	ldr	r3, [r7, #16]
 80151f8:	3301      	adds	r3, #1
 80151fa:	613b      	str	r3, [r7, #16]
    idx++;
 80151fc:	7dfb      	ldrb	r3, [r7, #23]
 80151fe:	3301      	adds	r3, #1
 8015200:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015202:	7dfb      	ldrb	r3, [r7, #23]
 8015204:	68ba      	ldr	r2, [r7, #8]
 8015206:	4413      	add	r3, r2
 8015208:	2200      	movs	r2, #0
 801520a:	701a      	strb	r2, [r3, #0]
    idx++;
 801520c:	7dfb      	ldrb	r3, [r7, #23]
 801520e:	3301      	adds	r3, #1
 8015210:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d1e7      	bne.n	80151ea <USBD_GetString+0x6a>
 801521a:	e000      	b.n	801521e <USBD_GetString+0x9e>
    return;
 801521c:	bf00      	nop
  }
}
 801521e:	3718      	adds	r7, #24
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}

08015224 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015224:	b480      	push	{r7}
 8015226:	b085      	sub	sp, #20
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801522c:	2300      	movs	r3, #0
 801522e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015234:	e005      	b.n	8015242 <USBD_GetLen+0x1e>
  {
    len++;
 8015236:	7bfb      	ldrb	r3, [r7, #15]
 8015238:	3301      	adds	r3, #1
 801523a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801523c:	68bb      	ldr	r3, [r7, #8]
 801523e:	3301      	adds	r3, #1
 8015240:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d1f5      	bne.n	8015236 <USBD_GetLen+0x12>
  }

  return len;
 801524a:	7bfb      	ldrb	r3, [r7, #15]
}
 801524c:	4618      	mov	r0, r3
 801524e:	3714      	adds	r7, #20
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr

08015258 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b084      	sub	sp, #16
 801525c:	af00      	add	r7, sp, #0
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	60b9      	str	r1, [r7, #8]
 8015262:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2202      	movs	r2, #2
 8015268:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	687a      	ldr	r2, [r7, #4]
 8015270:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	687a      	ldr	r2, [r7, #4]
 8015276:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	68ba      	ldr	r2, [r7, #8]
 801527c:	2100      	movs	r1, #0
 801527e:	68f8      	ldr	r0, [r7, #12]
 8015280:	f000 fd48 	bl	8015d14 <USBD_LL_Transmit>

  return USBD_OK;
 8015284:	2300      	movs	r3, #0
}
 8015286:	4618      	mov	r0, r3
 8015288:	3710      	adds	r7, #16
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}

0801528e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801528e:	b580      	push	{r7, lr}
 8015290:	b084      	sub	sp, #16
 8015292:	af00      	add	r7, sp, #0
 8015294:	60f8      	str	r0, [r7, #12]
 8015296:	60b9      	str	r1, [r7, #8]
 8015298:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	68ba      	ldr	r2, [r7, #8]
 801529e:	2100      	movs	r1, #0
 80152a0:	68f8      	ldr	r0, [r7, #12]
 80152a2:	f000 fd37 	bl	8015d14 <USBD_LL_Transmit>

  return USBD_OK;
 80152a6:	2300      	movs	r3, #0
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3710      	adds	r7, #16
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	60f8      	str	r0, [r7, #12]
 80152b8:	60b9      	str	r1, [r7, #8]
 80152ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	68ba      	ldr	r2, [r7, #8]
 80152c0:	2100      	movs	r1, #0
 80152c2:	68f8      	ldr	r0, [r7, #12]
 80152c4:	f000 fd47 	bl	8015d56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80152c8:	2300      	movs	r3, #0
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3710      	adds	r7, #16
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}

080152d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80152d2:	b580      	push	{r7, lr}
 80152d4:	b082      	sub	sp, #8
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2204      	movs	r2, #4
 80152de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80152e2:	2300      	movs	r3, #0
 80152e4:	2200      	movs	r2, #0
 80152e6:	2100      	movs	r1, #0
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f000 fd13 	bl	8015d14 <USBD_LL_Transmit>

  return USBD_OK;
 80152ee:	2300      	movs	r3, #0
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2205      	movs	r2, #5
 8015304:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015308:	2300      	movs	r3, #0
 801530a:	2200      	movs	r2, #0
 801530c:	2100      	movs	r1, #0
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f000 fd21 	bl	8015d56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015314:	2300      	movs	r3, #0
}
 8015316:	4618      	mov	r0, r3
 8015318:	3708      	adds	r7, #8
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
	...

08015320 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015320:	b480      	push	{r7}
 8015322:	b087      	sub	sp, #28
 8015324:	af00      	add	r7, sp, #0
 8015326:	60f8      	str	r0, [r7, #12]
 8015328:	60b9      	str	r1, [r7, #8]
 801532a:	4613      	mov	r3, r2
 801532c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801532e:	2301      	movs	r3, #1
 8015330:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015332:	2300      	movs	r3, #0
 8015334:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015336:	4b1f      	ldr	r3, [pc, #124]	@ (80153b4 <FATFS_LinkDriverEx+0x94>)
 8015338:	7a5b      	ldrb	r3, [r3, #9]
 801533a:	b2db      	uxtb	r3, r3
 801533c:	2b00      	cmp	r3, #0
 801533e:	d131      	bne.n	80153a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015340:	4b1c      	ldr	r3, [pc, #112]	@ (80153b4 <FATFS_LinkDriverEx+0x94>)
 8015342:	7a5b      	ldrb	r3, [r3, #9]
 8015344:	b2db      	uxtb	r3, r3
 8015346:	461a      	mov	r2, r3
 8015348:	4b1a      	ldr	r3, [pc, #104]	@ (80153b4 <FATFS_LinkDriverEx+0x94>)
 801534a:	2100      	movs	r1, #0
 801534c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801534e:	4b19      	ldr	r3, [pc, #100]	@ (80153b4 <FATFS_LinkDriverEx+0x94>)
 8015350:	7a5b      	ldrb	r3, [r3, #9]
 8015352:	b2db      	uxtb	r3, r3
 8015354:	4a17      	ldr	r2, [pc, #92]	@ (80153b4 <FATFS_LinkDriverEx+0x94>)
 8015356:	009b      	lsls	r3, r3, #2
 8015358:	4413      	add	r3, r2
 801535a:	68fa      	ldr	r2, [r7, #12]
 801535c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801535e:	4b15      	ldr	r3, [pc, #84]	@ (80153b4 <FATFS_LinkDriverEx+0x94>)
 8015360:	7a5b      	ldrb	r3, [r3, #9]
 8015362:	b2db      	uxtb	r3, r3
 8015364:	461a      	mov	r2, r3
 8015366:	4b13      	ldr	r3, [pc, #76]	@ (80153b4 <FATFS_LinkDriverEx+0x94>)
 8015368:	4413      	add	r3, r2
 801536a:	79fa      	ldrb	r2, [r7, #7]
 801536c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801536e:	4b11      	ldr	r3, [pc, #68]	@ (80153b4 <FATFS_LinkDriverEx+0x94>)
 8015370:	7a5b      	ldrb	r3, [r3, #9]
 8015372:	b2db      	uxtb	r3, r3
 8015374:	1c5a      	adds	r2, r3, #1
 8015376:	b2d1      	uxtb	r1, r2
 8015378:	4a0e      	ldr	r2, [pc, #56]	@ (80153b4 <FATFS_LinkDriverEx+0x94>)
 801537a:	7251      	strb	r1, [r2, #9]
 801537c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801537e:	7dbb      	ldrb	r3, [r7, #22]
 8015380:	3330      	adds	r3, #48	@ 0x30
 8015382:	b2da      	uxtb	r2, r3
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015388:	68bb      	ldr	r3, [r7, #8]
 801538a:	3301      	adds	r3, #1
 801538c:	223a      	movs	r2, #58	@ 0x3a
 801538e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	3302      	adds	r3, #2
 8015394:	222f      	movs	r2, #47	@ 0x2f
 8015396:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	3303      	adds	r3, #3
 801539c:	2200      	movs	r2, #0
 801539e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80153a0:	2300      	movs	r3, #0
 80153a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80153a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	371c      	adds	r7, #28
 80153aa:	46bd      	mov	sp, r7
 80153ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b0:	4770      	bx	lr
 80153b2:	bf00      	nop
 80153b4:	240009e4 	.word	0x240009e4

080153b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b082      	sub	sp, #8
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80153c2:	2200      	movs	r2, #0
 80153c4:	6839      	ldr	r1, [r7, #0]
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f7ff ffaa 	bl	8015320 <FATFS_LinkDriverEx>
 80153cc:	4603      	mov	r3, r0
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
	...

080153d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80153dc:	2200      	movs	r2, #0
 80153de:	4913      	ldr	r1, [pc, #76]	@ (801542c <MX_USB_DEVICE_Init+0x54>)
 80153e0:	4813      	ldr	r0, [pc, #76]	@ (8015430 <MX_USB_DEVICE_Init+0x58>)
 80153e2:	f7fe fc8e 	bl	8013d02 <USBD_Init>
 80153e6:	4603      	mov	r3, r0
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d001      	beq.n	80153f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80153ec:	f7ee fd70 	bl	8003ed0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80153f0:	4910      	ldr	r1, [pc, #64]	@ (8015434 <MX_USB_DEVICE_Init+0x5c>)
 80153f2:	480f      	ldr	r0, [pc, #60]	@ (8015430 <MX_USB_DEVICE_Init+0x58>)
 80153f4:	f7fe fcb5 	bl	8013d62 <USBD_RegisterClass>
 80153f8:	4603      	mov	r3, r0
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d001      	beq.n	8015402 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80153fe:	f7ee fd67 	bl	8003ed0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8015402:	490d      	ldr	r1, [pc, #52]	@ (8015438 <MX_USB_DEVICE_Init+0x60>)
 8015404:	480a      	ldr	r0, [pc, #40]	@ (8015430 <MX_USB_DEVICE_Init+0x58>)
 8015406:	f7fc ff33 	bl	8012270 <USBD_MSC_RegisterStorage>
 801540a:	4603      	mov	r3, r0
 801540c:	2b00      	cmp	r3, #0
 801540e:	d001      	beq.n	8015414 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015410:	f7ee fd5e 	bl	8003ed0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015414:	4806      	ldr	r0, [pc, #24]	@ (8015430 <MX_USB_DEVICE_Init+0x58>)
 8015416:	f7fe fcda 	bl	8013dce <USBD_Start>
 801541a:	4603      	mov	r3, r0
 801541c:	2b00      	cmp	r3, #0
 801541e:	d001      	beq.n	8015424 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015420:	f7ee fd56 	bl	8003ed0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015424:	f7f2 fa40 	bl	80078a8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015428:	bf00      	nop
 801542a:	bd80      	pop	{r7, pc}
 801542c:	240000b4 	.word	0x240000b4
 8015430:	240009f0 	.word	0x240009f0
 8015434:	24000034 	.word	0x24000034
 8015438:	24000108 	.word	0x24000108

0801543c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801543c:	b480      	push	{r7}
 801543e:	b083      	sub	sp, #12
 8015440:	af00      	add	r7, sp, #0
 8015442:	4603      	mov	r3, r0
 8015444:	6039      	str	r1, [r7, #0]
 8015446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	2212      	movs	r2, #18
 801544c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801544e:	4b03      	ldr	r3, [pc, #12]	@ (801545c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015450:	4618      	mov	r0, r3
 8015452:	370c      	adds	r7, #12
 8015454:	46bd      	mov	sp, r7
 8015456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545a:	4770      	bx	lr
 801545c:	240000d4 	.word	0x240000d4

08015460 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015460:	b480      	push	{r7}
 8015462:	b083      	sub	sp, #12
 8015464:	af00      	add	r7, sp, #0
 8015466:	4603      	mov	r3, r0
 8015468:	6039      	str	r1, [r7, #0]
 801546a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	2204      	movs	r2, #4
 8015470:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015472:	4b03      	ldr	r3, [pc, #12]	@ (8015480 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015474:	4618      	mov	r0, r3
 8015476:	370c      	adds	r7, #12
 8015478:	46bd      	mov	sp, r7
 801547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547e:	4770      	bx	lr
 8015480:	240000e8 	.word	0x240000e8

08015484 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	4603      	mov	r3, r0
 801548c:	6039      	str	r1, [r7, #0]
 801548e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015490:	79fb      	ldrb	r3, [r7, #7]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d105      	bne.n	80154a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015496:	683a      	ldr	r2, [r7, #0]
 8015498:	4907      	ldr	r1, [pc, #28]	@ (80154b8 <USBD_FS_ProductStrDescriptor+0x34>)
 801549a:	4808      	ldr	r0, [pc, #32]	@ (80154bc <USBD_FS_ProductStrDescriptor+0x38>)
 801549c:	f7ff fe70 	bl	8015180 <USBD_GetString>
 80154a0:	e004      	b.n	80154ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80154a2:	683a      	ldr	r2, [r7, #0]
 80154a4:	4904      	ldr	r1, [pc, #16]	@ (80154b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80154a6:	4805      	ldr	r0, [pc, #20]	@ (80154bc <USBD_FS_ProductStrDescriptor+0x38>)
 80154a8:	f7ff fe6a 	bl	8015180 <USBD_GetString>
  }
  return USBD_StrDesc;
 80154ac:	4b02      	ldr	r3, [pc, #8]	@ (80154b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3708      	adds	r7, #8
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}
 80154b6:	bf00      	nop
 80154b8:	24000ccc 	.word	0x24000ccc
 80154bc:	08019138 	.word	0x08019138

080154c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	4603      	mov	r3, r0
 80154c8:	6039      	str	r1, [r7, #0]
 80154ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80154cc:	683a      	ldr	r2, [r7, #0]
 80154ce:	4904      	ldr	r1, [pc, #16]	@ (80154e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80154d0:	4804      	ldr	r0, [pc, #16]	@ (80154e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80154d2:	f7ff fe55 	bl	8015180 <USBD_GetString>
  return USBD_StrDesc;
 80154d6:	4b02      	ldr	r3, [pc, #8]	@ (80154e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3708      	adds	r7, #8
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}
 80154e0:	24000ccc 	.word	0x24000ccc
 80154e4:	0801914c 	.word	0x0801914c

080154e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	4603      	mov	r3, r0
 80154f0:	6039      	str	r1, [r7, #0]
 80154f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	221a      	movs	r2, #26
 80154f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80154fa:	f000 f843 	bl	8015584 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80154fe:	4b02      	ldr	r3, [pc, #8]	@ (8015508 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015500:	4618      	mov	r0, r3
 8015502:	3708      	adds	r7, #8
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	240000ec 	.word	0x240000ec

0801550c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b082      	sub	sp, #8
 8015510:	af00      	add	r7, sp, #0
 8015512:	4603      	mov	r3, r0
 8015514:	6039      	str	r1, [r7, #0]
 8015516:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015518:	79fb      	ldrb	r3, [r7, #7]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d105      	bne.n	801552a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801551e:	683a      	ldr	r2, [r7, #0]
 8015520:	4907      	ldr	r1, [pc, #28]	@ (8015540 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015522:	4808      	ldr	r0, [pc, #32]	@ (8015544 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015524:	f7ff fe2c 	bl	8015180 <USBD_GetString>
 8015528:	e004      	b.n	8015534 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801552a:	683a      	ldr	r2, [r7, #0]
 801552c:	4904      	ldr	r1, [pc, #16]	@ (8015540 <USBD_FS_ConfigStrDescriptor+0x34>)
 801552e:	4805      	ldr	r0, [pc, #20]	@ (8015544 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015530:	f7ff fe26 	bl	8015180 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015534:	4b02      	ldr	r3, [pc, #8]	@ (8015540 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015536:	4618      	mov	r0, r3
 8015538:	3708      	adds	r7, #8
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}
 801553e:	bf00      	nop
 8015540:	24000ccc 	.word	0x24000ccc
 8015544:	08019160 	.word	0x08019160

08015548 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b082      	sub	sp, #8
 801554c:	af00      	add	r7, sp, #0
 801554e:	4603      	mov	r3, r0
 8015550:	6039      	str	r1, [r7, #0]
 8015552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015554:	79fb      	ldrb	r3, [r7, #7]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d105      	bne.n	8015566 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801555a:	683a      	ldr	r2, [r7, #0]
 801555c:	4907      	ldr	r1, [pc, #28]	@ (801557c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801555e:	4808      	ldr	r0, [pc, #32]	@ (8015580 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015560:	f7ff fe0e 	bl	8015180 <USBD_GetString>
 8015564:	e004      	b.n	8015570 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015566:	683a      	ldr	r2, [r7, #0]
 8015568:	4904      	ldr	r1, [pc, #16]	@ (801557c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801556a:	4805      	ldr	r0, [pc, #20]	@ (8015580 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801556c:	f7ff fe08 	bl	8015180 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015570:	4b02      	ldr	r3, [pc, #8]	@ (801557c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015572:	4618      	mov	r0, r3
 8015574:	3708      	adds	r7, #8
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}
 801557a:	bf00      	nop
 801557c:	24000ccc 	.word	0x24000ccc
 8015580:	0801916c 	.word	0x0801916c

08015584 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801558a:	4b0f      	ldr	r3, [pc, #60]	@ (80155c8 <Get_SerialNum+0x44>)
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015590:	4b0e      	ldr	r3, [pc, #56]	@ (80155cc <Get_SerialNum+0x48>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015596:	4b0e      	ldr	r3, [pc, #56]	@ (80155d0 <Get_SerialNum+0x4c>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801559c:	68fa      	ldr	r2, [r7, #12]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	4413      	add	r3, r2
 80155a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d009      	beq.n	80155be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80155aa:	2208      	movs	r2, #8
 80155ac:	4909      	ldr	r1, [pc, #36]	@ (80155d4 <Get_SerialNum+0x50>)
 80155ae:	68f8      	ldr	r0, [r7, #12]
 80155b0:	f000 f814 	bl	80155dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80155b4:	2204      	movs	r2, #4
 80155b6:	4908      	ldr	r1, [pc, #32]	@ (80155d8 <Get_SerialNum+0x54>)
 80155b8:	68b8      	ldr	r0, [r7, #8]
 80155ba:	f000 f80f 	bl	80155dc <IntToUnicode>
  }
}
 80155be:	bf00      	nop
 80155c0:	3710      	adds	r7, #16
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	bf00      	nop
 80155c8:	1ff1e800 	.word	0x1ff1e800
 80155cc:	1ff1e804 	.word	0x1ff1e804
 80155d0:	1ff1e808 	.word	0x1ff1e808
 80155d4:	240000ee 	.word	0x240000ee
 80155d8:	240000fe 	.word	0x240000fe

080155dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80155dc:	b480      	push	{r7}
 80155de:	b087      	sub	sp, #28
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	60f8      	str	r0, [r7, #12]
 80155e4:	60b9      	str	r1, [r7, #8]
 80155e6:	4613      	mov	r3, r2
 80155e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80155ea:	2300      	movs	r3, #0
 80155ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80155ee:	2300      	movs	r3, #0
 80155f0:	75fb      	strb	r3, [r7, #23]
 80155f2:	e027      	b.n	8015644 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	0f1b      	lsrs	r3, r3, #28
 80155f8:	2b09      	cmp	r3, #9
 80155fa:	d80b      	bhi.n	8015614 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	0f1b      	lsrs	r3, r3, #28
 8015600:	b2da      	uxtb	r2, r3
 8015602:	7dfb      	ldrb	r3, [r7, #23]
 8015604:	005b      	lsls	r3, r3, #1
 8015606:	4619      	mov	r1, r3
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	440b      	add	r3, r1
 801560c:	3230      	adds	r2, #48	@ 0x30
 801560e:	b2d2      	uxtb	r2, r2
 8015610:	701a      	strb	r2, [r3, #0]
 8015612:	e00a      	b.n	801562a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	0f1b      	lsrs	r3, r3, #28
 8015618:	b2da      	uxtb	r2, r3
 801561a:	7dfb      	ldrb	r3, [r7, #23]
 801561c:	005b      	lsls	r3, r3, #1
 801561e:	4619      	mov	r1, r3
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	440b      	add	r3, r1
 8015624:	3237      	adds	r2, #55	@ 0x37
 8015626:	b2d2      	uxtb	r2, r2
 8015628:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	011b      	lsls	r3, r3, #4
 801562e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015630:	7dfb      	ldrb	r3, [r7, #23]
 8015632:	005b      	lsls	r3, r3, #1
 8015634:	3301      	adds	r3, #1
 8015636:	68ba      	ldr	r2, [r7, #8]
 8015638:	4413      	add	r3, r2
 801563a:	2200      	movs	r2, #0
 801563c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801563e:	7dfb      	ldrb	r3, [r7, #23]
 8015640:	3301      	adds	r3, #1
 8015642:	75fb      	strb	r3, [r7, #23]
 8015644:	7dfa      	ldrb	r2, [r7, #23]
 8015646:	79fb      	ldrb	r3, [r7, #7]
 8015648:	429a      	cmp	r2, r3
 801564a:	d3d3      	bcc.n	80155f4 <IntToUnicode+0x18>
  }
}
 801564c:	bf00      	nop
 801564e:	bf00      	nop
 8015650:	371c      	adds	r7, #28
 8015652:	46bd      	mov	sp, r7
 8015654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015658:	4770      	bx	lr

0801565a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801565a:	b480      	push	{r7}
 801565c:	b083      	sub	sp, #12
 801565e:	af00      	add	r7, sp, #0
 8015660:	4603      	mov	r3, r0
 8015662:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8015664:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8015666:	4618      	mov	r0, r3
 8015668:	370c      	adds	r7, #12
 801566a:	46bd      	mov	sp, r7
 801566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015670:	4770      	bx	lr
	...

08015674 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b08e      	sub	sp, #56	@ 0x38
 8015678:	af00      	add	r7, sp, #0
 801567a:	4603      	mov	r3, r0
 801567c:	60b9      	str	r1, [r7, #8]
 801567e:	607a      	str	r2, [r7, #4]
 8015680:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
    HAL_SD_CardInfoTypeDef info;
    int8_t ret = -1;
 8015682:	23ff      	movs	r3, #255	@ 0xff
 8015684:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Retrieve the card info
    if (HAL_SD_GetCardInfo(&hsd1, &info) == HAL_OK)
 8015688:	f107 0310 	add.w	r3, r7, #16
 801568c:	4619      	mov	r1, r3
 801568e:	480b      	ldr	r0, [pc, #44]	@ (80156bc <STORAGE_GetCapacity_FS+0x48>)
 8015690:	f7f6 fcc4 	bl	800c01c <HAL_SD_GetCardInfo>
 8015694:	4603      	mov	r3, r0
 8015696:	2b00      	cmp	r3, #0
 8015698:	d10a      	bne.n	80156b0 <STORAGE_GetCapacity_FS+0x3c>
    {
        // Ensure the correct values are returned
        *block_num = info.LogBlockNbr - 1;
 801569a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801569c:	1e5a      	subs	r2, r3, #1
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	601a      	str	r2, [r3, #0]
        *block_size = info.LogBlockSize;
 80156a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156a4:	b29a      	uxth	r2, r3
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	801a      	strh	r2, [r3, #0]
        ret = USBD_OK;
 80156aa:	2300      	movs	r3, #0
 80156ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return ret;
 80156b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3738      	adds	r7, #56	@ 0x38
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}
 80156bc:	24000750 	.word	0x24000750

080156c0 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b083      	sub	sp, #12
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	4603      	mov	r3, r0
 80156c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80156ca:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	370c      	adds	r7, #12
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr

080156d8 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	4603      	mov	r3, r0
 80156e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 80156e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	370c      	adds	r7, #12
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr

080156f0 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b088      	sub	sp, #32
 80156f4:	af02      	add	r7, sp, #8
 80156f6:	60b9      	str	r1, [r7, #8]
 80156f8:	607a      	str	r2, [r7, #4]
 80156fa:	461a      	mov	r2, r3
 80156fc:	4603      	mov	r3, r0
 80156fe:	73fb      	strb	r3, [r7, #15]
 8015700:	4613      	mov	r3, r2
 8015702:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 8015704:	23ff      	movs	r3, #255	@ 0xff
 8015706:	75fb      	strb	r3, [r7, #23]

	  HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8015708:	89bb      	ldrh	r3, [r7, #12]
 801570a:	f04f 32ff 	mov.w	r2, #4294967295
 801570e:	9200      	str	r2, [sp, #0]
 8015710:	687a      	ldr	r2, [r7, #4]
 8015712:	68b9      	ldr	r1, [r7, #8]
 8015714:	4808      	ldr	r0, [pc, #32]	@ (8015738 <STORAGE_Read_FS+0x48>)
 8015716:	f7f5 ff07 	bl	800b528 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 801571a:	bf00      	nop
 801571c:	4806      	ldr	r0, [pc, #24]	@ (8015738 <STORAGE_Read_FS+0x48>)
 801571e:	f7f6 fdbb 	bl	800c298 <HAL_SD_GetCardState>
 8015722:	4603      	mov	r3, r0
 8015724:	2b04      	cmp	r3, #4
 8015726:	d1f9      	bne.n	801571c <STORAGE_Read_FS+0x2c>
	  ret = 0;
 8015728:	2300      	movs	r3, #0
 801572a:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801572c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8015730:	4618      	mov	r0, r3
 8015732:	3718      	adds	r7, #24
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}
 8015738:	24000750 	.word	0x24000750

0801573c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b088      	sub	sp, #32
 8015740:	af02      	add	r7, sp, #8
 8015742:	60b9      	str	r1, [r7, #8]
 8015744:	607a      	str	r2, [r7, #4]
 8015746:	461a      	mov	r2, r3
 8015748:	4603      	mov	r3, r0
 801574a:	73fb      	strb	r3, [r7, #15]
 801574c:	4613      	mov	r3, r2
 801574e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	  int8_t ret = -1;
 8015750:	23ff      	movs	r3, #255	@ 0xff
 8015752:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8015754:	89bb      	ldrh	r3, [r7, #12]
 8015756:	f04f 32ff 	mov.w	r2, #4294967295
 801575a:	9200      	str	r2, [sp, #0]
 801575c:	687a      	ldr	r2, [r7, #4]
 801575e:	68b9      	ldr	r1, [r7, #8]
 8015760:	4808      	ldr	r0, [pc, #32]	@ (8015784 <STORAGE_Write_FS+0x48>)
 8015762:	f7f6 f86b 	bl	800b83c <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8015766:	bf00      	nop
 8015768:	4806      	ldr	r0, [pc, #24]	@ (8015784 <STORAGE_Write_FS+0x48>)
 801576a:	f7f6 fd95 	bl	800c298 <HAL_SD_GetCardState>
 801576e:	4603      	mov	r3, r0
 8015770:	2b04      	cmp	r3, #4
 8015772:	d1f9      	bne.n	8015768 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 8015774:	2300      	movs	r3, #0
 8015776:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8015778:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801577c:	4618      	mov	r0, r3
 801577e:	3718      	adds	r7, #24
 8015780:	46bd      	mov	sp, r7
 8015782:	bd80      	pop	{r7, pc}
 8015784:	24000750 	.word	0x24000750

08015788 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8015788:	b480      	push	{r7}
 801578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801578c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801578e:	4618      	mov	r0, r3
 8015790:	46bd      	mov	sp, r7
 8015792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015796:	4770      	bx	lr

08015798 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b0ba      	sub	sp, #232	@ 0xe8
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80157a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80157a4:	2200      	movs	r2, #0
 80157a6:	601a      	str	r2, [r3, #0]
 80157a8:	605a      	str	r2, [r3, #4]
 80157aa:	609a      	str	r2, [r3, #8]
 80157ac:	60da      	str	r2, [r3, #12]
 80157ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80157b0:	f107 0310 	add.w	r3, r7, #16
 80157b4:	22c0      	movs	r2, #192	@ 0xc0
 80157b6:	2100      	movs	r1, #0
 80157b8:	4618      	mov	r0, r3
 80157ba:	f001 f987 	bl	8016acc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	4a2c      	ldr	r2, [pc, #176]	@ (8015874 <HAL_PCD_MspInit+0xdc>)
 80157c4:	4293      	cmp	r3, r2
 80157c6:	d151      	bne.n	801586c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80157c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80157cc:	f04f 0300 	mov.w	r3, #0
 80157d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80157d4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80157d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80157dc:	f107 0310 	add.w	r3, r7, #16
 80157e0:	4618      	mov	r0, r3
 80157e2:	f7f3 f883 	bl	80088ec <HAL_RCCEx_PeriphCLKConfig>
 80157e6:	4603      	mov	r3, r0
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d001      	beq.n	80157f0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80157ec:	f7ee fb70 	bl	8003ed0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80157f0:	f7f2 f85a 	bl	80078a8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80157f4:	4b20      	ldr	r3, [pc, #128]	@ (8015878 <HAL_PCD_MspInit+0xe0>)
 80157f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80157fa:	4a1f      	ldr	r2, [pc, #124]	@ (8015878 <HAL_PCD_MspInit+0xe0>)
 80157fc:	f043 0301 	orr.w	r3, r3, #1
 8015800:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015804:	4b1c      	ldr	r3, [pc, #112]	@ (8015878 <HAL_PCD_MspInit+0xe0>)
 8015806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801580a:	f003 0301 	and.w	r3, r3, #1
 801580e:	60fb      	str	r3, [r7, #12]
 8015810:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015812:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015816:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801581a:	2302      	movs	r3, #2
 801581c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015820:	2300      	movs	r3, #0
 8015822:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015826:	2300      	movs	r3, #0
 8015828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801582c:	230a      	movs	r3, #10
 801582e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015832:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015836:	4619      	mov	r1, r3
 8015838:	4810      	ldr	r0, [pc, #64]	@ (801587c <HAL_PCD_MspInit+0xe4>)
 801583a:	f7ef fa91 	bl	8004d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801583e:	4b0e      	ldr	r3, [pc, #56]	@ (8015878 <HAL_PCD_MspInit+0xe0>)
 8015840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015844:	4a0c      	ldr	r2, [pc, #48]	@ (8015878 <HAL_PCD_MspInit+0xe0>)
 8015846:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801584a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801584e:	4b0a      	ldr	r3, [pc, #40]	@ (8015878 <HAL_PCD_MspInit+0xe0>)
 8015850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015854:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015858:	60bb      	str	r3, [r7, #8]
 801585a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801585c:	2200      	movs	r2, #0
 801585e:	2100      	movs	r1, #0
 8015860:	2065      	movs	r0, #101	@ 0x65
 8015862:	f7ef f9d0 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015866:	2065      	movs	r0, #101	@ 0x65
 8015868:	f7ef f9e7 	bl	8004c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801586c:	bf00      	nop
 801586e:	37e8      	adds	r7, #232	@ 0xe8
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}
 8015874:	40080000 	.word	0x40080000
 8015878:	58024400 	.word	0x58024400
 801587c:	58020000 	.word	0x58020000

08015880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b082      	sub	sp, #8
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015894:	4619      	mov	r1, r3
 8015896:	4610      	mov	r0, r2
 8015898:	f7fe fae6 	bl	8013e68 <USBD_LL_SetupStage>
}
 801589c:	bf00      	nop
 801589e:	3708      	adds	r7, #8
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}

080158a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
 80158ac:	460b      	mov	r3, r1
 80158ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80158b6:	78fa      	ldrb	r2, [r7, #3]
 80158b8:	6879      	ldr	r1, [r7, #4]
 80158ba:	4613      	mov	r3, r2
 80158bc:	00db      	lsls	r3, r3, #3
 80158be:	4413      	add	r3, r2
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	440b      	add	r3, r1
 80158c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80158c8:	681a      	ldr	r2, [r3, #0]
 80158ca:	78fb      	ldrb	r3, [r7, #3]
 80158cc:	4619      	mov	r1, r3
 80158ce:	f7fe fb20 	bl	8013f12 <USBD_LL_DataOutStage>
}
 80158d2:	bf00      	nop
 80158d4:	3708      	adds	r7, #8
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}

080158da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158da:	b580      	push	{r7, lr}
 80158dc:	b082      	sub	sp, #8
 80158de:	af00      	add	r7, sp, #0
 80158e0:	6078      	str	r0, [r7, #4]
 80158e2:	460b      	mov	r3, r1
 80158e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80158ec:	78fa      	ldrb	r2, [r7, #3]
 80158ee:	6879      	ldr	r1, [r7, #4]
 80158f0:	4613      	mov	r3, r2
 80158f2:	00db      	lsls	r3, r3, #3
 80158f4:	4413      	add	r3, r2
 80158f6:	009b      	lsls	r3, r3, #2
 80158f8:	440b      	add	r3, r1
 80158fa:	3320      	adds	r3, #32
 80158fc:	681a      	ldr	r2, [r3, #0]
 80158fe:	78fb      	ldrb	r3, [r7, #3]
 8015900:	4619      	mov	r1, r3
 8015902:	f7fe fbb9 	bl	8014078 <USBD_LL_DataInStage>
}
 8015906:	bf00      	nop
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}

0801590e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801590e:	b580      	push	{r7, lr}
 8015910:	b082      	sub	sp, #8
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801591c:	4618      	mov	r0, r3
 801591e:	f7fe fcf3 	bl	8014308 <USBD_LL_SOF>
}
 8015922:	bf00      	nop
 8015924:	3708      	adds	r7, #8
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}

0801592a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801592a:	b580      	push	{r7, lr}
 801592c:	b084      	sub	sp, #16
 801592e:	af00      	add	r7, sp, #0
 8015930:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015932:	2301      	movs	r3, #1
 8015934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	79db      	ldrb	r3, [r3, #7]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d102      	bne.n	8015944 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801593e:	2300      	movs	r3, #0
 8015940:	73fb      	strb	r3, [r7, #15]
 8015942:	e008      	b.n	8015956 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	79db      	ldrb	r3, [r3, #7]
 8015948:	2b02      	cmp	r3, #2
 801594a:	d102      	bne.n	8015952 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801594c:	2301      	movs	r3, #1
 801594e:	73fb      	strb	r3, [r7, #15]
 8015950:	e001      	b.n	8015956 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015952:	f7ee fabd 	bl	8003ed0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801595c:	7bfa      	ldrb	r2, [r7, #15]
 801595e:	4611      	mov	r1, r2
 8015960:	4618      	mov	r0, r3
 8015962:	f7fe fc8d 	bl	8014280 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801596c:	4618      	mov	r0, r3
 801596e:	f7fe fc35 	bl	80141dc <USBD_LL_Reset>
}
 8015972:	bf00      	nop
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
	...

0801597c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b082      	sub	sp, #8
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801598a:	4618      	mov	r0, r3
 801598c:	f7fe fc88 	bl	80142a0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	687a      	ldr	r2, [r7, #4]
 801599c:	6812      	ldr	r2, [r2, #0]
 801599e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80159a2:	f043 0301 	orr.w	r3, r3, #1
 80159a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	7adb      	ldrb	r3, [r3, #11]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d005      	beq.n	80159bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80159b0:	4b04      	ldr	r3, [pc, #16]	@ (80159c4 <HAL_PCD_SuspendCallback+0x48>)
 80159b2:	691b      	ldr	r3, [r3, #16]
 80159b4:	4a03      	ldr	r2, [pc, #12]	@ (80159c4 <HAL_PCD_SuspendCallback+0x48>)
 80159b6:	f043 0306 	orr.w	r3, r3, #6
 80159ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80159bc:	bf00      	nop
 80159be:	3708      	adds	r7, #8
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	e000ed00 	.word	0xe000ed00

080159c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b082      	sub	sp, #8
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80159d6:	4618      	mov	r0, r3
 80159d8:	f7fe fc7e 	bl	80142d8 <USBD_LL_Resume>
}
 80159dc:	bf00      	nop
 80159de:	3708      	adds	r7, #8
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd80      	pop	{r7, pc}

080159e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b082      	sub	sp, #8
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
 80159ec:	460b      	mov	r3, r1
 80159ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80159f6:	78fa      	ldrb	r2, [r7, #3]
 80159f8:	4611      	mov	r1, r2
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7fe fcd6 	bl	80143ac <USBD_LL_IsoOUTIncomplete>
}
 8015a00:	bf00      	nop
 8015a02:	3708      	adds	r7, #8
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}

08015a08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b082      	sub	sp, #8
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
 8015a10:	460b      	mov	r3, r1
 8015a12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015a1a:	78fa      	ldrb	r2, [r7, #3]
 8015a1c:	4611      	mov	r1, r2
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f7fe fc92 	bl	8014348 <USBD_LL_IsoINIncomplete>
}
 8015a24:	bf00      	nop
 8015a26:	3708      	adds	r7, #8
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}

08015a2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b082      	sub	sp, #8
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f7fe fce8 	bl	8014410 <USBD_LL_DevConnected>
}
 8015a40:	bf00      	nop
 8015a42:	3708      	adds	r7, #8
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bd80      	pop	{r7, pc}

08015a48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7fe fce5 	bl	8014426 <USBD_LL_DevDisconnected>
}
 8015a5c:	bf00      	nop
 8015a5e:	3708      	adds	r7, #8
 8015a60:	46bd      	mov	sp, r7
 8015a62:	bd80      	pop	{r7, pc}

08015a64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	781b      	ldrb	r3, [r3, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d13e      	bne.n	8015af2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015a74:	4a21      	ldr	r2, [pc, #132]	@ (8015afc <USBD_LL_Init+0x98>)
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8015afc <USBD_LL_Init+0x98>)
 8015a80:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015a84:	4b1d      	ldr	r3, [pc, #116]	@ (8015afc <USBD_LL_Init+0x98>)
 8015a86:	4a1e      	ldr	r2, [pc, #120]	@ (8015b00 <USBD_LL_Init+0x9c>)
 8015a88:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8015afc <USBD_LL_Init+0x98>)
 8015a8c:	2209      	movs	r2, #9
 8015a8e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015a90:	4b1a      	ldr	r3, [pc, #104]	@ (8015afc <USBD_LL_Init+0x98>)
 8015a92:	2202      	movs	r2, #2
 8015a94:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015a96:	4b19      	ldr	r3, [pc, #100]	@ (8015afc <USBD_LL_Init+0x98>)
 8015a98:	2200      	movs	r2, #0
 8015a9a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015a9c:	4b17      	ldr	r3, [pc, #92]	@ (8015afc <USBD_LL_Init+0x98>)
 8015a9e:	2202      	movs	r2, #2
 8015aa0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015aa2:	4b16      	ldr	r3, [pc, #88]	@ (8015afc <USBD_LL_Init+0x98>)
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015aa8:	4b14      	ldr	r3, [pc, #80]	@ (8015afc <USBD_LL_Init+0x98>)
 8015aaa:	2200      	movs	r2, #0
 8015aac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015aae:	4b13      	ldr	r3, [pc, #76]	@ (8015afc <USBD_LL_Init+0x98>)
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8015ab4:	4b11      	ldr	r3, [pc, #68]	@ (8015afc <USBD_LL_Init+0x98>)
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015aba:	4b10      	ldr	r3, [pc, #64]	@ (8015afc <USBD_LL_Init+0x98>)
 8015abc:	2200      	movs	r2, #0
 8015abe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8015afc <USBD_LL_Init+0x98>)
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015ac6:	480d      	ldr	r0, [pc, #52]	@ (8015afc <USBD_LL_Init+0x98>)
 8015ac8:	f7f0 fbe9 	bl	800629e <HAL_PCD_Init>
 8015acc:	4603      	mov	r3, r0
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d001      	beq.n	8015ad6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015ad2:	f7ee f9fd 	bl	8003ed0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015ad6:	2180      	movs	r1, #128	@ 0x80
 8015ad8:	4808      	ldr	r0, [pc, #32]	@ (8015afc <USBD_LL_Init+0x98>)
 8015ada:	f7f1 fe6a 	bl	80077b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015ade:	2240      	movs	r2, #64	@ 0x40
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	4806      	ldr	r0, [pc, #24]	@ (8015afc <USBD_LL_Init+0x98>)
 8015ae4:	f7f1 fe1e 	bl	8007724 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015ae8:	2280      	movs	r2, #128	@ 0x80
 8015aea:	2101      	movs	r1, #1
 8015aec:	4803      	ldr	r0, [pc, #12]	@ (8015afc <USBD_LL_Init+0x98>)
 8015aee:	f7f1 fe19 	bl	8007724 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8015af2:	2300      	movs	r3, #0
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3708      	adds	r7, #8
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}
 8015afc:	24000ecc 	.word	0x24000ecc
 8015b00:	40080000 	.word	0x40080000

08015b04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b10:	2300      	movs	r3, #0
 8015b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7f0 fccb 	bl	80064b6 <HAL_PCD_Start>
 8015b20:	4603      	mov	r3, r0
 8015b22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b24:	7bfb      	ldrb	r3, [r7, #15]
 8015b26:	4618      	mov	r0, r3
 8015b28:	f000 f962 	bl	8015df0 <USBD_Get_USB_Status>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3710      	adds	r7, #16
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}

08015b3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015b3a:	b580      	push	{r7, lr}
 8015b3c:	b084      	sub	sp, #16
 8015b3e:	af00      	add	r7, sp, #0
 8015b40:	6078      	str	r0, [r7, #4]
 8015b42:	4608      	mov	r0, r1
 8015b44:	4611      	mov	r1, r2
 8015b46:	461a      	mov	r2, r3
 8015b48:	4603      	mov	r3, r0
 8015b4a:	70fb      	strb	r3, [r7, #3]
 8015b4c:	460b      	mov	r3, r1
 8015b4e:	70bb      	strb	r3, [r7, #2]
 8015b50:	4613      	mov	r3, r2
 8015b52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b54:	2300      	movs	r3, #0
 8015b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015b62:	78bb      	ldrb	r3, [r7, #2]
 8015b64:	883a      	ldrh	r2, [r7, #0]
 8015b66:	78f9      	ldrb	r1, [r7, #3]
 8015b68:	f7f1 f9cc 	bl	8006f04 <HAL_PCD_EP_Open>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b70:	7bfb      	ldrb	r3, [r7, #15]
 8015b72:	4618      	mov	r0, r3
 8015b74:	f000 f93c 	bl	8015df0 <USBD_Get_USB_Status>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}

08015b86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b86:	b580      	push	{r7, lr}
 8015b88:	b084      	sub	sp, #16
 8015b8a:	af00      	add	r7, sp, #0
 8015b8c:	6078      	str	r0, [r7, #4]
 8015b8e:	460b      	mov	r3, r1
 8015b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b92:	2300      	movs	r3, #0
 8015b94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b96:	2300      	movs	r3, #0
 8015b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015ba0:	78fa      	ldrb	r2, [r7, #3]
 8015ba2:	4611      	mov	r1, r2
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7f1 fa15 	bl	8006fd4 <HAL_PCD_EP_Close>
 8015baa:	4603      	mov	r3, r0
 8015bac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bae:	7bfb      	ldrb	r3, [r7, #15]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f000 f91d 	bl	8015df0 <USBD_Get_USB_Status>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3710      	adds	r7, #16
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}

08015bc4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b084      	sub	sp, #16
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	460b      	mov	r3, r1
 8015bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015bde:	78fa      	ldrb	r2, [r7, #3]
 8015be0:	4611      	mov	r1, r2
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7f1 fbb7 	bl	8007356 <HAL_PCD_EP_Flush>
 8015be8:	4603      	mov	r3, r0
 8015bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bec:	7bfb      	ldrb	r3, [r7, #15]
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f000 f8fe 	bl	8015df0 <USBD_Get_USB_Status>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}

08015c02 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c02:	b580      	push	{r7, lr}
 8015c04:	b084      	sub	sp, #16
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	6078      	str	r0, [r7, #4]
 8015c0a:	460b      	mov	r3, r1
 8015c0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c12:	2300      	movs	r3, #0
 8015c14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015c1c:	78fa      	ldrb	r2, [r7, #3]
 8015c1e:	4611      	mov	r1, r2
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7f1 faae 	bl	8007182 <HAL_PCD_EP_SetStall>
 8015c26:	4603      	mov	r3, r0
 8015c28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c2a:	7bfb      	ldrb	r3, [r7, #15]
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f000 f8df 	bl	8015df0 <USBD_Get_USB_Status>
 8015c32:	4603      	mov	r3, r0
 8015c34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	3710      	adds	r7, #16
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}

08015c40 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b084      	sub	sp, #16
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
 8015c48:	460b      	mov	r3, r1
 8015c4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c50:	2300      	movs	r3, #0
 8015c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015c5a:	78fa      	ldrb	r2, [r7, #3]
 8015c5c:	4611      	mov	r1, r2
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f7f1 faf2 	bl	8007248 <HAL_PCD_EP_ClrStall>
 8015c64:	4603      	mov	r3, r0
 8015c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c68:	7bfb      	ldrb	r3, [r7, #15]
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	f000 f8c0 	bl	8015df0 <USBD_Get_USB_Status>
 8015c70:	4603      	mov	r3, r0
 8015c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3710      	adds	r7, #16
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}

08015c7e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c7e:	b480      	push	{r7}
 8015c80:	b085      	sub	sp, #20
 8015c82:	af00      	add	r7, sp, #0
 8015c84:	6078      	str	r0, [r7, #4]
 8015c86:	460b      	mov	r3, r1
 8015c88:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015c90:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	da0b      	bge.n	8015cb2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015c9a:	78fb      	ldrb	r3, [r7, #3]
 8015c9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015ca0:	68f9      	ldr	r1, [r7, #12]
 8015ca2:	4613      	mov	r3, r2
 8015ca4:	00db      	lsls	r3, r3, #3
 8015ca6:	4413      	add	r3, r2
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	440b      	add	r3, r1
 8015cac:	3316      	adds	r3, #22
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	e00b      	b.n	8015cca <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015cb2:	78fb      	ldrb	r3, [r7, #3]
 8015cb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015cb8:	68f9      	ldr	r1, [r7, #12]
 8015cba:	4613      	mov	r3, r2
 8015cbc:	00db      	lsls	r3, r3, #3
 8015cbe:	4413      	add	r3, r2
 8015cc0:	009b      	lsls	r3, r3, #2
 8015cc2:	440b      	add	r3, r1
 8015cc4:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8015cc8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015cca:	4618      	mov	r0, r3
 8015ccc:	3714      	adds	r7, #20
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd4:	4770      	bx	lr

08015cd6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015cd6:	b580      	push	{r7, lr}
 8015cd8:	b084      	sub	sp, #16
 8015cda:	af00      	add	r7, sp, #0
 8015cdc:	6078      	str	r0, [r7, #4]
 8015cde:	460b      	mov	r3, r1
 8015ce0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015cf0:	78fa      	ldrb	r2, [r7, #3]
 8015cf2:	4611      	mov	r1, r2
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7f1 f8e1 	bl	8006ebc <HAL_PCD_SetAddress>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cfe:	7bfb      	ldrb	r3, [r7, #15]
 8015d00:	4618      	mov	r0, r3
 8015d02:	f000 f875 	bl	8015df0 <USBD_Get_USB_Status>
 8015d06:	4603      	mov	r3, r0
 8015d08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	3710      	adds	r7, #16
 8015d10:	46bd      	mov	sp, r7
 8015d12:	bd80      	pop	{r7, pc}

08015d14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b086      	sub	sp, #24
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	60f8      	str	r0, [r7, #12]
 8015d1c:	607a      	str	r2, [r7, #4]
 8015d1e:	603b      	str	r3, [r7, #0]
 8015d20:	460b      	mov	r3, r1
 8015d22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d24:	2300      	movs	r3, #0
 8015d26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015d32:	7af9      	ldrb	r1, [r7, #11]
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	687a      	ldr	r2, [r7, #4]
 8015d38:	f7f1 f9e9 	bl	800710e <HAL_PCD_EP_Transmit>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d40:	7dfb      	ldrb	r3, [r7, #23]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f000 f854 	bl	8015df0 <USBD_Get_USB_Status>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015d4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3718      	adds	r7, #24
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}

08015d56 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015d56:	b580      	push	{r7, lr}
 8015d58:	b086      	sub	sp, #24
 8015d5a:	af00      	add	r7, sp, #0
 8015d5c:	60f8      	str	r0, [r7, #12]
 8015d5e:	607a      	str	r2, [r7, #4]
 8015d60:	603b      	str	r3, [r7, #0]
 8015d62:	460b      	mov	r3, r1
 8015d64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d66:	2300      	movs	r3, #0
 8015d68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015d74:	7af9      	ldrb	r1, [r7, #11]
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	687a      	ldr	r2, [r7, #4]
 8015d7a:	f7f1 f975 	bl	8007068 <HAL_PCD_EP_Receive>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d82:	7dfb      	ldrb	r3, [r7, #23]
 8015d84:	4618      	mov	r0, r3
 8015d86:	f000 f833 	bl	8015df0 <USBD_Get_USB_Status>
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015d8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015d90:	4618      	mov	r0, r3
 8015d92:	3718      	adds	r7, #24
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}

08015d98 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b082      	sub	sp, #8
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
 8015da0:	460b      	mov	r3, r1
 8015da2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015daa:	78fa      	ldrb	r2, [r7, #3]
 8015dac:	4611      	mov	r1, r2
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7f1 f995 	bl	80070de <HAL_PCD_EP_GetRxCount>
 8015db4:	4603      	mov	r3, r0
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3708      	adds	r7, #8
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
	...

08015dc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015dc0:	b480      	push	{r7}
 8015dc2:	b083      	sub	sp, #12
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015dc8:	4b03      	ldr	r3, [pc, #12]	@ (8015dd8 <USBD_static_malloc+0x18>)
}
 8015dca:	4618      	mov	r0, r3
 8015dcc:	370c      	adds	r7, #12
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd4:	4770      	bx	lr
 8015dd6:	bf00      	nop
 8015dd8:	240013b0 	.word	0x240013b0

08015ddc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015ddc:	b480      	push	{r7}
 8015dde:	b083      	sub	sp, #12
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015de4:	bf00      	nop
 8015de6:	370c      	adds	r7, #12
 8015de8:	46bd      	mov	sp, r7
 8015dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dee:	4770      	bx	lr

08015df0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015df0:	b480      	push	{r7}
 8015df2:	b085      	sub	sp, #20
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	4603      	mov	r3, r0
 8015df8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015dfe:	79fb      	ldrb	r3, [r7, #7]
 8015e00:	2b03      	cmp	r3, #3
 8015e02:	d817      	bhi.n	8015e34 <USBD_Get_USB_Status+0x44>
 8015e04:	a201      	add	r2, pc, #4	@ (adr r2, 8015e0c <USBD_Get_USB_Status+0x1c>)
 8015e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e0a:	bf00      	nop
 8015e0c:	08015e1d 	.word	0x08015e1d
 8015e10:	08015e23 	.word	0x08015e23
 8015e14:	08015e29 	.word	0x08015e29
 8015e18:	08015e2f 	.word	0x08015e2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8015e20:	e00b      	b.n	8015e3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015e22:	2303      	movs	r3, #3
 8015e24:	73fb      	strb	r3, [r7, #15]
    break;
 8015e26:	e008      	b.n	8015e3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015e28:	2301      	movs	r3, #1
 8015e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8015e2c:	e005      	b.n	8015e3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015e2e:	2303      	movs	r3, #3
 8015e30:	73fb      	strb	r3, [r7, #15]
    break;
 8015e32:	e002      	b.n	8015e3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015e34:	2303      	movs	r3, #3
 8015e36:	73fb      	strb	r3, [r7, #15]
    break;
 8015e38:	bf00      	nop
  }
  return usb_status;
 8015e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3714      	adds	r7, #20
 8015e40:	46bd      	mov	sp, r7
 8015e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e46:	4770      	bx	lr

08015e48 <__cvt>:
 8015e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e4a:	ed2d 8b02 	vpush	{d8}
 8015e4e:	eeb0 8b40 	vmov.f64	d8, d0
 8015e52:	b085      	sub	sp, #20
 8015e54:	4617      	mov	r7, r2
 8015e56:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015e58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015e5a:	ee18 2a90 	vmov	r2, s17
 8015e5e:	f025 0520 	bic.w	r5, r5, #32
 8015e62:	2a00      	cmp	r2, #0
 8015e64:	bfb6      	itet	lt
 8015e66:	222d      	movlt	r2, #45	@ 0x2d
 8015e68:	2200      	movge	r2, #0
 8015e6a:	eeb1 8b40 	vneglt.f64	d8, d0
 8015e6e:	2d46      	cmp	r5, #70	@ 0x46
 8015e70:	460c      	mov	r4, r1
 8015e72:	701a      	strb	r2, [r3, #0]
 8015e74:	d004      	beq.n	8015e80 <__cvt+0x38>
 8015e76:	2d45      	cmp	r5, #69	@ 0x45
 8015e78:	d100      	bne.n	8015e7c <__cvt+0x34>
 8015e7a:	3401      	adds	r4, #1
 8015e7c:	2102      	movs	r1, #2
 8015e7e:	e000      	b.n	8015e82 <__cvt+0x3a>
 8015e80:	2103      	movs	r1, #3
 8015e82:	ab03      	add	r3, sp, #12
 8015e84:	9301      	str	r3, [sp, #4]
 8015e86:	ab02      	add	r3, sp, #8
 8015e88:	9300      	str	r3, [sp, #0]
 8015e8a:	4622      	mov	r2, r4
 8015e8c:	4633      	mov	r3, r6
 8015e8e:	eeb0 0b48 	vmov.f64	d0, d8
 8015e92:	f000 ff31 	bl	8016cf8 <_dtoa_r>
 8015e96:	2d47      	cmp	r5, #71	@ 0x47
 8015e98:	d114      	bne.n	8015ec4 <__cvt+0x7c>
 8015e9a:	07fb      	lsls	r3, r7, #31
 8015e9c:	d50a      	bpl.n	8015eb4 <__cvt+0x6c>
 8015e9e:	1902      	adds	r2, r0, r4
 8015ea0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea8:	bf08      	it	eq
 8015eaa:	9203      	streq	r2, [sp, #12]
 8015eac:	2130      	movs	r1, #48	@ 0x30
 8015eae:	9b03      	ldr	r3, [sp, #12]
 8015eb0:	4293      	cmp	r3, r2
 8015eb2:	d319      	bcc.n	8015ee8 <__cvt+0xa0>
 8015eb4:	9b03      	ldr	r3, [sp, #12]
 8015eb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015eb8:	1a1b      	subs	r3, r3, r0
 8015eba:	6013      	str	r3, [r2, #0]
 8015ebc:	b005      	add	sp, #20
 8015ebe:	ecbd 8b02 	vpop	{d8}
 8015ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ec4:	2d46      	cmp	r5, #70	@ 0x46
 8015ec6:	eb00 0204 	add.w	r2, r0, r4
 8015eca:	d1e9      	bne.n	8015ea0 <__cvt+0x58>
 8015ecc:	7803      	ldrb	r3, [r0, #0]
 8015ece:	2b30      	cmp	r3, #48	@ 0x30
 8015ed0:	d107      	bne.n	8015ee2 <__cvt+0x9a>
 8015ed2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eda:	bf1c      	itt	ne
 8015edc:	f1c4 0401 	rsbne	r4, r4, #1
 8015ee0:	6034      	strne	r4, [r6, #0]
 8015ee2:	6833      	ldr	r3, [r6, #0]
 8015ee4:	441a      	add	r2, r3
 8015ee6:	e7db      	b.n	8015ea0 <__cvt+0x58>
 8015ee8:	1c5c      	adds	r4, r3, #1
 8015eea:	9403      	str	r4, [sp, #12]
 8015eec:	7019      	strb	r1, [r3, #0]
 8015eee:	e7de      	b.n	8015eae <__cvt+0x66>

08015ef0 <__exponent>:
 8015ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ef2:	2900      	cmp	r1, #0
 8015ef4:	bfba      	itte	lt
 8015ef6:	4249      	neglt	r1, r1
 8015ef8:	232d      	movlt	r3, #45	@ 0x2d
 8015efa:	232b      	movge	r3, #43	@ 0x2b
 8015efc:	2909      	cmp	r1, #9
 8015efe:	7002      	strb	r2, [r0, #0]
 8015f00:	7043      	strb	r3, [r0, #1]
 8015f02:	dd29      	ble.n	8015f58 <__exponent+0x68>
 8015f04:	f10d 0307 	add.w	r3, sp, #7
 8015f08:	461d      	mov	r5, r3
 8015f0a:	270a      	movs	r7, #10
 8015f0c:	461a      	mov	r2, r3
 8015f0e:	fbb1 f6f7 	udiv	r6, r1, r7
 8015f12:	fb07 1416 	mls	r4, r7, r6, r1
 8015f16:	3430      	adds	r4, #48	@ 0x30
 8015f18:	f802 4c01 	strb.w	r4, [r2, #-1]
 8015f1c:	460c      	mov	r4, r1
 8015f1e:	2c63      	cmp	r4, #99	@ 0x63
 8015f20:	f103 33ff 	add.w	r3, r3, #4294967295
 8015f24:	4631      	mov	r1, r6
 8015f26:	dcf1      	bgt.n	8015f0c <__exponent+0x1c>
 8015f28:	3130      	adds	r1, #48	@ 0x30
 8015f2a:	1e94      	subs	r4, r2, #2
 8015f2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015f30:	1c41      	adds	r1, r0, #1
 8015f32:	4623      	mov	r3, r4
 8015f34:	42ab      	cmp	r3, r5
 8015f36:	d30a      	bcc.n	8015f4e <__exponent+0x5e>
 8015f38:	f10d 0309 	add.w	r3, sp, #9
 8015f3c:	1a9b      	subs	r3, r3, r2
 8015f3e:	42ac      	cmp	r4, r5
 8015f40:	bf88      	it	hi
 8015f42:	2300      	movhi	r3, #0
 8015f44:	3302      	adds	r3, #2
 8015f46:	4403      	add	r3, r0
 8015f48:	1a18      	subs	r0, r3, r0
 8015f4a:	b003      	add	sp, #12
 8015f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f4e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015f52:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015f56:	e7ed      	b.n	8015f34 <__exponent+0x44>
 8015f58:	2330      	movs	r3, #48	@ 0x30
 8015f5a:	3130      	adds	r1, #48	@ 0x30
 8015f5c:	7083      	strb	r3, [r0, #2]
 8015f5e:	70c1      	strb	r1, [r0, #3]
 8015f60:	1d03      	adds	r3, r0, #4
 8015f62:	e7f1      	b.n	8015f48 <__exponent+0x58>
 8015f64:	0000      	movs	r0, r0
	...

08015f68 <_printf_float>:
 8015f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f6c:	b08d      	sub	sp, #52	@ 0x34
 8015f6e:	460c      	mov	r4, r1
 8015f70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8015f74:	4616      	mov	r6, r2
 8015f76:	461f      	mov	r7, r3
 8015f78:	4605      	mov	r5, r0
 8015f7a:	f000 fdaf 	bl	8016adc <_localeconv_r>
 8015f7e:	f8d0 b000 	ldr.w	fp, [r0]
 8015f82:	4658      	mov	r0, fp
 8015f84:	f7ea f9fc 	bl	8000380 <strlen>
 8015f88:	2300      	movs	r3, #0
 8015f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8015f90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8015f94:	6822      	ldr	r2, [r4, #0]
 8015f96:	9005      	str	r0, [sp, #20]
 8015f98:	3307      	adds	r3, #7
 8015f9a:	f023 0307 	bic.w	r3, r3, #7
 8015f9e:	f103 0108 	add.w	r1, r3, #8
 8015fa2:	f8c8 1000 	str.w	r1, [r8]
 8015fa6:	ed93 0b00 	vldr	d0, [r3]
 8015faa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8016208 <_printf_float+0x2a0>
 8015fae:	eeb0 7bc0 	vabs.f64	d7, d0
 8015fb2:	eeb4 7b46 	vcmp.f64	d7, d6
 8015fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8015fbe:	dd24      	ble.n	801600a <_printf_float+0xa2>
 8015fc0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fc8:	d502      	bpl.n	8015fd0 <_printf_float+0x68>
 8015fca:	232d      	movs	r3, #45	@ 0x2d
 8015fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015fd0:	498f      	ldr	r1, [pc, #572]	@ (8016210 <_printf_float+0x2a8>)
 8015fd2:	4b90      	ldr	r3, [pc, #576]	@ (8016214 <_printf_float+0x2ac>)
 8015fd4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8015fd8:	bf94      	ite	ls
 8015fda:	4688      	movls	r8, r1
 8015fdc:	4698      	movhi	r8, r3
 8015fde:	f022 0204 	bic.w	r2, r2, #4
 8015fe2:	2303      	movs	r3, #3
 8015fe4:	6123      	str	r3, [r4, #16]
 8015fe6:	6022      	str	r2, [r4, #0]
 8015fe8:	f04f 0a00 	mov.w	sl, #0
 8015fec:	9700      	str	r7, [sp, #0]
 8015fee:	4633      	mov	r3, r6
 8015ff0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015ff2:	4621      	mov	r1, r4
 8015ff4:	4628      	mov	r0, r5
 8015ff6:	f000 f9d1 	bl	801639c <_printf_common>
 8015ffa:	3001      	adds	r0, #1
 8015ffc:	f040 8089 	bne.w	8016112 <_printf_float+0x1aa>
 8016000:	f04f 30ff 	mov.w	r0, #4294967295
 8016004:	b00d      	add	sp, #52	@ 0x34
 8016006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801600a:	eeb4 0b40 	vcmp.f64	d0, d0
 801600e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016012:	d709      	bvc.n	8016028 <_printf_float+0xc0>
 8016014:	ee10 3a90 	vmov	r3, s1
 8016018:	2b00      	cmp	r3, #0
 801601a:	bfbc      	itt	lt
 801601c:	232d      	movlt	r3, #45	@ 0x2d
 801601e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8016022:	497d      	ldr	r1, [pc, #500]	@ (8016218 <_printf_float+0x2b0>)
 8016024:	4b7d      	ldr	r3, [pc, #500]	@ (801621c <_printf_float+0x2b4>)
 8016026:	e7d5      	b.n	8015fd4 <_printf_float+0x6c>
 8016028:	6863      	ldr	r3, [r4, #4]
 801602a:	1c59      	adds	r1, r3, #1
 801602c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8016030:	d139      	bne.n	80160a6 <_printf_float+0x13e>
 8016032:	2306      	movs	r3, #6
 8016034:	6063      	str	r3, [r4, #4]
 8016036:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801603a:	2300      	movs	r3, #0
 801603c:	6022      	str	r2, [r4, #0]
 801603e:	9303      	str	r3, [sp, #12]
 8016040:	ab0a      	add	r3, sp, #40	@ 0x28
 8016042:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8016046:	ab09      	add	r3, sp, #36	@ 0x24
 8016048:	9300      	str	r3, [sp, #0]
 801604a:	6861      	ldr	r1, [r4, #4]
 801604c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8016050:	4628      	mov	r0, r5
 8016052:	f7ff fef9 	bl	8015e48 <__cvt>
 8016056:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801605a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801605c:	4680      	mov	r8, r0
 801605e:	d129      	bne.n	80160b4 <_printf_float+0x14c>
 8016060:	1cc8      	adds	r0, r1, #3
 8016062:	db02      	blt.n	801606a <_printf_float+0x102>
 8016064:	6863      	ldr	r3, [r4, #4]
 8016066:	4299      	cmp	r1, r3
 8016068:	dd41      	ble.n	80160ee <_printf_float+0x186>
 801606a:	f1a9 0902 	sub.w	r9, r9, #2
 801606e:	fa5f f989 	uxtb.w	r9, r9
 8016072:	3901      	subs	r1, #1
 8016074:	464a      	mov	r2, r9
 8016076:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801607a:	9109      	str	r1, [sp, #36]	@ 0x24
 801607c:	f7ff ff38 	bl	8015ef0 <__exponent>
 8016080:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016082:	1813      	adds	r3, r2, r0
 8016084:	2a01      	cmp	r2, #1
 8016086:	4682      	mov	sl, r0
 8016088:	6123      	str	r3, [r4, #16]
 801608a:	dc02      	bgt.n	8016092 <_printf_float+0x12a>
 801608c:	6822      	ldr	r2, [r4, #0]
 801608e:	07d2      	lsls	r2, r2, #31
 8016090:	d501      	bpl.n	8016096 <_printf_float+0x12e>
 8016092:	3301      	adds	r3, #1
 8016094:	6123      	str	r3, [r4, #16]
 8016096:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801609a:	2b00      	cmp	r3, #0
 801609c:	d0a6      	beq.n	8015fec <_printf_float+0x84>
 801609e:	232d      	movs	r3, #45	@ 0x2d
 80160a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80160a4:	e7a2      	b.n	8015fec <_printf_float+0x84>
 80160a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80160aa:	d1c4      	bne.n	8016036 <_printf_float+0xce>
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d1c2      	bne.n	8016036 <_printf_float+0xce>
 80160b0:	2301      	movs	r3, #1
 80160b2:	e7bf      	b.n	8016034 <_printf_float+0xcc>
 80160b4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80160b8:	d9db      	bls.n	8016072 <_printf_float+0x10a>
 80160ba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80160be:	d118      	bne.n	80160f2 <_printf_float+0x18a>
 80160c0:	2900      	cmp	r1, #0
 80160c2:	6863      	ldr	r3, [r4, #4]
 80160c4:	dd0b      	ble.n	80160de <_printf_float+0x176>
 80160c6:	6121      	str	r1, [r4, #16]
 80160c8:	b913      	cbnz	r3, 80160d0 <_printf_float+0x168>
 80160ca:	6822      	ldr	r2, [r4, #0]
 80160cc:	07d0      	lsls	r0, r2, #31
 80160ce:	d502      	bpl.n	80160d6 <_printf_float+0x16e>
 80160d0:	3301      	adds	r3, #1
 80160d2:	440b      	add	r3, r1
 80160d4:	6123      	str	r3, [r4, #16]
 80160d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80160d8:	f04f 0a00 	mov.w	sl, #0
 80160dc:	e7db      	b.n	8016096 <_printf_float+0x12e>
 80160de:	b913      	cbnz	r3, 80160e6 <_printf_float+0x17e>
 80160e0:	6822      	ldr	r2, [r4, #0]
 80160e2:	07d2      	lsls	r2, r2, #31
 80160e4:	d501      	bpl.n	80160ea <_printf_float+0x182>
 80160e6:	3302      	adds	r3, #2
 80160e8:	e7f4      	b.n	80160d4 <_printf_float+0x16c>
 80160ea:	2301      	movs	r3, #1
 80160ec:	e7f2      	b.n	80160d4 <_printf_float+0x16c>
 80160ee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80160f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80160f4:	4299      	cmp	r1, r3
 80160f6:	db05      	blt.n	8016104 <_printf_float+0x19c>
 80160f8:	6823      	ldr	r3, [r4, #0]
 80160fa:	6121      	str	r1, [r4, #16]
 80160fc:	07d8      	lsls	r0, r3, #31
 80160fe:	d5ea      	bpl.n	80160d6 <_printf_float+0x16e>
 8016100:	1c4b      	adds	r3, r1, #1
 8016102:	e7e7      	b.n	80160d4 <_printf_float+0x16c>
 8016104:	2900      	cmp	r1, #0
 8016106:	bfd4      	ite	le
 8016108:	f1c1 0202 	rsble	r2, r1, #2
 801610c:	2201      	movgt	r2, #1
 801610e:	4413      	add	r3, r2
 8016110:	e7e0      	b.n	80160d4 <_printf_float+0x16c>
 8016112:	6823      	ldr	r3, [r4, #0]
 8016114:	055a      	lsls	r2, r3, #21
 8016116:	d407      	bmi.n	8016128 <_printf_float+0x1c0>
 8016118:	6923      	ldr	r3, [r4, #16]
 801611a:	4642      	mov	r2, r8
 801611c:	4631      	mov	r1, r6
 801611e:	4628      	mov	r0, r5
 8016120:	47b8      	blx	r7
 8016122:	3001      	adds	r0, #1
 8016124:	d12a      	bne.n	801617c <_printf_float+0x214>
 8016126:	e76b      	b.n	8016000 <_printf_float+0x98>
 8016128:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801612c:	f240 80e0 	bls.w	80162f0 <_printf_float+0x388>
 8016130:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8016134:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801613c:	d133      	bne.n	80161a6 <_printf_float+0x23e>
 801613e:	4a38      	ldr	r2, [pc, #224]	@ (8016220 <_printf_float+0x2b8>)
 8016140:	2301      	movs	r3, #1
 8016142:	4631      	mov	r1, r6
 8016144:	4628      	mov	r0, r5
 8016146:	47b8      	blx	r7
 8016148:	3001      	adds	r0, #1
 801614a:	f43f af59 	beq.w	8016000 <_printf_float+0x98>
 801614e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016152:	4543      	cmp	r3, r8
 8016154:	db02      	blt.n	801615c <_printf_float+0x1f4>
 8016156:	6823      	ldr	r3, [r4, #0]
 8016158:	07d8      	lsls	r0, r3, #31
 801615a:	d50f      	bpl.n	801617c <_printf_float+0x214>
 801615c:	9b05      	ldr	r3, [sp, #20]
 801615e:	465a      	mov	r2, fp
 8016160:	4631      	mov	r1, r6
 8016162:	4628      	mov	r0, r5
 8016164:	47b8      	blx	r7
 8016166:	3001      	adds	r0, #1
 8016168:	f43f af4a 	beq.w	8016000 <_printf_float+0x98>
 801616c:	f04f 0900 	mov.w	r9, #0
 8016170:	f108 38ff 	add.w	r8, r8, #4294967295
 8016174:	f104 0a1a 	add.w	sl, r4, #26
 8016178:	45c8      	cmp	r8, r9
 801617a:	dc09      	bgt.n	8016190 <_printf_float+0x228>
 801617c:	6823      	ldr	r3, [r4, #0]
 801617e:	079b      	lsls	r3, r3, #30
 8016180:	f100 8107 	bmi.w	8016392 <_printf_float+0x42a>
 8016184:	68e0      	ldr	r0, [r4, #12]
 8016186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016188:	4298      	cmp	r0, r3
 801618a:	bfb8      	it	lt
 801618c:	4618      	movlt	r0, r3
 801618e:	e739      	b.n	8016004 <_printf_float+0x9c>
 8016190:	2301      	movs	r3, #1
 8016192:	4652      	mov	r2, sl
 8016194:	4631      	mov	r1, r6
 8016196:	4628      	mov	r0, r5
 8016198:	47b8      	blx	r7
 801619a:	3001      	adds	r0, #1
 801619c:	f43f af30 	beq.w	8016000 <_printf_float+0x98>
 80161a0:	f109 0901 	add.w	r9, r9, #1
 80161a4:	e7e8      	b.n	8016178 <_printf_float+0x210>
 80161a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	dc3b      	bgt.n	8016224 <_printf_float+0x2bc>
 80161ac:	4a1c      	ldr	r2, [pc, #112]	@ (8016220 <_printf_float+0x2b8>)
 80161ae:	2301      	movs	r3, #1
 80161b0:	4631      	mov	r1, r6
 80161b2:	4628      	mov	r0, r5
 80161b4:	47b8      	blx	r7
 80161b6:	3001      	adds	r0, #1
 80161b8:	f43f af22 	beq.w	8016000 <_printf_float+0x98>
 80161bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80161c0:	ea59 0303 	orrs.w	r3, r9, r3
 80161c4:	d102      	bne.n	80161cc <_printf_float+0x264>
 80161c6:	6823      	ldr	r3, [r4, #0]
 80161c8:	07d9      	lsls	r1, r3, #31
 80161ca:	d5d7      	bpl.n	801617c <_printf_float+0x214>
 80161cc:	9b05      	ldr	r3, [sp, #20]
 80161ce:	465a      	mov	r2, fp
 80161d0:	4631      	mov	r1, r6
 80161d2:	4628      	mov	r0, r5
 80161d4:	47b8      	blx	r7
 80161d6:	3001      	adds	r0, #1
 80161d8:	f43f af12 	beq.w	8016000 <_printf_float+0x98>
 80161dc:	f04f 0a00 	mov.w	sl, #0
 80161e0:	f104 0b1a 	add.w	fp, r4, #26
 80161e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161e6:	425b      	negs	r3, r3
 80161e8:	4553      	cmp	r3, sl
 80161ea:	dc01      	bgt.n	80161f0 <_printf_float+0x288>
 80161ec:	464b      	mov	r3, r9
 80161ee:	e794      	b.n	801611a <_printf_float+0x1b2>
 80161f0:	2301      	movs	r3, #1
 80161f2:	465a      	mov	r2, fp
 80161f4:	4631      	mov	r1, r6
 80161f6:	4628      	mov	r0, r5
 80161f8:	47b8      	blx	r7
 80161fa:	3001      	adds	r0, #1
 80161fc:	f43f af00 	beq.w	8016000 <_printf_float+0x98>
 8016200:	f10a 0a01 	add.w	sl, sl, #1
 8016204:	e7ee      	b.n	80161e4 <_printf_float+0x27c>
 8016206:	bf00      	nop
 8016208:	ffffffff 	.word	0xffffffff
 801620c:	7fefffff 	.word	0x7fefffff
 8016210:	080191fc 	.word	0x080191fc
 8016214:	08019200 	.word	0x08019200
 8016218:	08019204 	.word	0x08019204
 801621c:	08019208 	.word	0x08019208
 8016220:	0801920c 	.word	0x0801920c
 8016224:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016226:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801622a:	4553      	cmp	r3, sl
 801622c:	bfa8      	it	ge
 801622e:	4653      	movge	r3, sl
 8016230:	2b00      	cmp	r3, #0
 8016232:	4699      	mov	r9, r3
 8016234:	dc37      	bgt.n	80162a6 <_printf_float+0x33e>
 8016236:	2300      	movs	r3, #0
 8016238:	9307      	str	r3, [sp, #28]
 801623a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801623e:	f104 021a 	add.w	r2, r4, #26
 8016242:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016244:	9907      	ldr	r1, [sp, #28]
 8016246:	9306      	str	r3, [sp, #24]
 8016248:	eba3 0309 	sub.w	r3, r3, r9
 801624c:	428b      	cmp	r3, r1
 801624e:	dc31      	bgt.n	80162b4 <_printf_float+0x34c>
 8016250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016252:	459a      	cmp	sl, r3
 8016254:	dc3b      	bgt.n	80162ce <_printf_float+0x366>
 8016256:	6823      	ldr	r3, [r4, #0]
 8016258:	07da      	lsls	r2, r3, #31
 801625a:	d438      	bmi.n	80162ce <_printf_float+0x366>
 801625c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801625e:	ebaa 0903 	sub.w	r9, sl, r3
 8016262:	9b06      	ldr	r3, [sp, #24]
 8016264:	ebaa 0303 	sub.w	r3, sl, r3
 8016268:	4599      	cmp	r9, r3
 801626a:	bfa8      	it	ge
 801626c:	4699      	movge	r9, r3
 801626e:	f1b9 0f00 	cmp.w	r9, #0
 8016272:	dc34      	bgt.n	80162de <_printf_float+0x376>
 8016274:	f04f 0800 	mov.w	r8, #0
 8016278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801627c:	f104 0b1a 	add.w	fp, r4, #26
 8016280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016282:	ebaa 0303 	sub.w	r3, sl, r3
 8016286:	eba3 0309 	sub.w	r3, r3, r9
 801628a:	4543      	cmp	r3, r8
 801628c:	f77f af76 	ble.w	801617c <_printf_float+0x214>
 8016290:	2301      	movs	r3, #1
 8016292:	465a      	mov	r2, fp
 8016294:	4631      	mov	r1, r6
 8016296:	4628      	mov	r0, r5
 8016298:	47b8      	blx	r7
 801629a:	3001      	adds	r0, #1
 801629c:	f43f aeb0 	beq.w	8016000 <_printf_float+0x98>
 80162a0:	f108 0801 	add.w	r8, r8, #1
 80162a4:	e7ec      	b.n	8016280 <_printf_float+0x318>
 80162a6:	4642      	mov	r2, r8
 80162a8:	4631      	mov	r1, r6
 80162aa:	4628      	mov	r0, r5
 80162ac:	47b8      	blx	r7
 80162ae:	3001      	adds	r0, #1
 80162b0:	d1c1      	bne.n	8016236 <_printf_float+0x2ce>
 80162b2:	e6a5      	b.n	8016000 <_printf_float+0x98>
 80162b4:	2301      	movs	r3, #1
 80162b6:	4631      	mov	r1, r6
 80162b8:	4628      	mov	r0, r5
 80162ba:	9206      	str	r2, [sp, #24]
 80162bc:	47b8      	blx	r7
 80162be:	3001      	adds	r0, #1
 80162c0:	f43f ae9e 	beq.w	8016000 <_printf_float+0x98>
 80162c4:	9b07      	ldr	r3, [sp, #28]
 80162c6:	9a06      	ldr	r2, [sp, #24]
 80162c8:	3301      	adds	r3, #1
 80162ca:	9307      	str	r3, [sp, #28]
 80162cc:	e7b9      	b.n	8016242 <_printf_float+0x2da>
 80162ce:	9b05      	ldr	r3, [sp, #20]
 80162d0:	465a      	mov	r2, fp
 80162d2:	4631      	mov	r1, r6
 80162d4:	4628      	mov	r0, r5
 80162d6:	47b8      	blx	r7
 80162d8:	3001      	adds	r0, #1
 80162da:	d1bf      	bne.n	801625c <_printf_float+0x2f4>
 80162dc:	e690      	b.n	8016000 <_printf_float+0x98>
 80162de:	9a06      	ldr	r2, [sp, #24]
 80162e0:	464b      	mov	r3, r9
 80162e2:	4442      	add	r2, r8
 80162e4:	4631      	mov	r1, r6
 80162e6:	4628      	mov	r0, r5
 80162e8:	47b8      	blx	r7
 80162ea:	3001      	adds	r0, #1
 80162ec:	d1c2      	bne.n	8016274 <_printf_float+0x30c>
 80162ee:	e687      	b.n	8016000 <_printf_float+0x98>
 80162f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80162f4:	f1b9 0f01 	cmp.w	r9, #1
 80162f8:	dc01      	bgt.n	80162fe <_printf_float+0x396>
 80162fa:	07db      	lsls	r3, r3, #31
 80162fc:	d536      	bpl.n	801636c <_printf_float+0x404>
 80162fe:	2301      	movs	r3, #1
 8016300:	4642      	mov	r2, r8
 8016302:	4631      	mov	r1, r6
 8016304:	4628      	mov	r0, r5
 8016306:	47b8      	blx	r7
 8016308:	3001      	adds	r0, #1
 801630a:	f43f ae79 	beq.w	8016000 <_printf_float+0x98>
 801630e:	9b05      	ldr	r3, [sp, #20]
 8016310:	465a      	mov	r2, fp
 8016312:	4631      	mov	r1, r6
 8016314:	4628      	mov	r0, r5
 8016316:	47b8      	blx	r7
 8016318:	3001      	adds	r0, #1
 801631a:	f43f ae71 	beq.w	8016000 <_printf_float+0x98>
 801631e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8016322:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801632a:	f109 39ff 	add.w	r9, r9, #4294967295
 801632e:	d018      	beq.n	8016362 <_printf_float+0x3fa>
 8016330:	464b      	mov	r3, r9
 8016332:	f108 0201 	add.w	r2, r8, #1
 8016336:	4631      	mov	r1, r6
 8016338:	4628      	mov	r0, r5
 801633a:	47b8      	blx	r7
 801633c:	3001      	adds	r0, #1
 801633e:	d10c      	bne.n	801635a <_printf_float+0x3f2>
 8016340:	e65e      	b.n	8016000 <_printf_float+0x98>
 8016342:	2301      	movs	r3, #1
 8016344:	465a      	mov	r2, fp
 8016346:	4631      	mov	r1, r6
 8016348:	4628      	mov	r0, r5
 801634a:	47b8      	blx	r7
 801634c:	3001      	adds	r0, #1
 801634e:	f43f ae57 	beq.w	8016000 <_printf_float+0x98>
 8016352:	f108 0801 	add.w	r8, r8, #1
 8016356:	45c8      	cmp	r8, r9
 8016358:	dbf3      	blt.n	8016342 <_printf_float+0x3da>
 801635a:	4653      	mov	r3, sl
 801635c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016360:	e6dc      	b.n	801611c <_printf_float+0x1b4>
 8016362:	f04f 0800 	mov.w	r8, #0
 8016366:	f104 0b1a 	add.w	fp, r4, #26
 801636a:	e7f4      	b.n	8016356 <_printf_float+0x3ee>
 801636c:	2301      	movs	r3, #1
 801636e:	4642      	mov	r2, r8
 8016370:	e7e1      	b.n	8016336 <_printf_float+0x3ce>
 8016372:	2301      	movs	r3, #1
 8016374:	464a      	mov	r2, r9
 8016376:	4631      	mov	r1, r6
 8016378:	4628      	mov	r0, r5
 801637a:	47b8      	blx	r7
 801637c:	3001      	adds	r0, #1
 801637e:	f43f ae3f 	beq.w	8016000 <_printf_float+0x98>
 8016382:	f108 0801 	add.w	r8, r8, #1
 8016386:	68e3      	ldr	r3, [r4, #12]
 8016388:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801638a:	1a5b      	subs	r3, r3, r1
 801638c:	4543      	cmp	r3, r8
 801638e:	dcf0      	bgt.n	8016372 <_printf_float+0x40a>
 8016390:	e6f8      	b.n	8016184 <_printf_float+0x21c>
 8016392:	f04f 0800 	mov.w	r8, #0
 8016396:	f104 0919 	add.w	r9, r4, #25
 801639a:	e7f4      	b.n	8016386 <_printf_float+0x41e>

0801639c <_printf_common>:
 801639c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163a0:	4616      	mov	r6, r2
 80163a2:	4698      	mov	r8, r3
 80163a4:	688a      	ldr	r2, [r1, #8]
 80163a6:	690b      	ldr	r3, [r1, #16]
 80163a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80163ac:	4293      	cmp	r3, r2
 80163ae:	bfb8      	it	lt
 80163b0:	4613      	movlt	r3, r2
 80163b2:	6033      	str	r3, [r6, #0]
 80163b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80163b8:	4607      	mov	r7, r0
 80163ba:	460c      	mov	r4, r1
 80163bc:	b10a      	cbz	r2, 80163c2 <_printf_common+0x26>
 80163be:	3301      	adds	r3, #1
 80163c0:	6033      	str	r3, [r6, #0]
 80163c2:	6823      	ldr	r3, [r4, #0]
 80163c4:	0699      	lsls	r1, r3, #26
 80163c6:	bf42      	ittt	mi
 80163c8:	6833      	ldrmi	r3, [r6, #0]
 80163ca:	3302      	addmi	r3, #2
 80163cc:	6033      	strmi	r3, [r6, #0]
 80163ce:	6825      	ldr	r5, [r4, #0]
 80163d0:	f015 0506 	ands.w	r5, r5, #6
 80163d4:	d106      	bne.n	80163e4 <_printf_common+0x48>
 80163d6:	f104 0a19 	add.w	sl, r4, #25
 80163da:	68e3      	ldr	r3, [r4, #12]
 80163dc:	6832      	ldr	r2, [r6, #0]
 80163de:	1a9b      	subs	r3, r3, r2
 80163e0:	42ab      	cmp	r3, r5
 80163e2:	dc26      	bgt.n	8016432 <_printf_common+0x96>
 80163e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80163e8:	6822      	ldr	r2, [r4, #0]
 80163ea:	3b00      	subs	r3, #0
 80163ec:	bf18      	it	ne
 80163ee:	2301      	movne	r3, #1
 80163f0:	0692      	lsls	r2, r2, #26
 80163f2:	d42b      	bmi.n	801644c <_printf_common+0xb0>
 80163f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80163f8:	4641      	mov	r1, r8
 80163fa:	4638      	mov	r0, r7
 80163fc:	47c8      	blx	r9
 80163fe:	3001      	adds	r0, #1
 8016400:	d01e      	beq.n	8016440 <_printf_common+0xa4>
 8016402:	6823      	ldr	r3, [r4, #0]
 8016404:	6922      	ldr	r2, [r4, #16]
 8016406:	f003 0306 	and.w	r3, r3, #6
 801640a:	2b04      	cmp	r3, #4
 801640c:	bf02      	ittt	eq
 801640e:	68e5      	ldreq	r5, [r4, #12]
 8016410:	6833      	ldreq	r3, [r6, #0]
 8016412:	1aed      	subeq	r5, r5, r3
 8016414:	68a3      	ldr	r3, [r4, #8]
 8016416:	bf0c      	ite	eq
 8016418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801641c:	2500      	movne	r5, #0
 801641e:	4293      	cmp	r3, r2
 8016420:	bfc4      	itt	gt
 8016422:	1a9b      	subgt	r3, r3, r2
 8016424:	18ed      	addgt	r5, r5, r3
 8016426:	2600      	movs	r6, #0
 8016428:	341a      	adds	r4, #26
 801642a:	42b5      	cmp	r5, r6
 801642c:	d11a      	bne.n	8016464 <_printf_common+0xc8>
 801642e:	2000      	movs	r0, #0
 8016430:	e008      	b.n	8016444 <_printf_common+0xa8>
 8016432:	2301      	movs	r3, #1
 8016434:	4652      	mov	r2, sl
 8016436:	4641      	mov	r1, r8
 8016438:	4638      	mov	r0, r7
 801643a:	47c8      	blx	r9
 801643c:	3001      	adds	r0, #1
 801643e:	d103      	bne.n	8016448 <_printf_common+0xac>
 8016440:	f04f 30ff 	mov.w	r0, #4294967295
 8016444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016448:	3501      	adds	r5, #1
 801644a:	e7c6      	b.n	80163da <_printf_common+0x3e>
 801644c:	18e1      	adds	r1, r4, r3
 801644e:	1c5a      	adds	r2, r3, #1
 8016450:	2030      	movs	r0, #48	@ 0x30
 8016452:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016456:	4422      	add	r2, r4
 8016458:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801645c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016460:	3302      	adds	r3, #2
 8016462:	e7c7      	b.n	80163f4 <_printf_common+0x58>
 8016464:	2301      	movs	r3, #1
 8016466:	4622      	mov	r2, r4
 8016468:	4641      	mov	r1, r8
 801646a:	4638      	mov	r0, r7
 801646c:	47c8      	blx	r9
 801646e:	3001      	adds	r0, #1
 8016470:	d0e6      	beq.n	8016440 <_printf_common+0xa4>
 8016472:	3601      	adds	r6, #1
 8016474:	e7d9      	b.n	801642a <_printf_common+0x8e>
	...

08016478 <_printf_i>:
 8016478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801647c:	7e0f      	ldrb	r7, [r1, #24]
 801647e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016480:	2f78      	cmp	r7, #120	@ 0x78
 8016482:	4691      	mov	r9, r2
 8016484:	4680      	mov	r8, r0
 8016486:	460c      	mov	r4, r1
 8016488:	469a      	mov	sl, r3
 801648a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801648e:	d807      	bhi.n	80164a0 <_printf_i+0x28>
 8016490:	2f62      	cmp	r7, #98	@ 0x62
 8016492:	d80a      	bhi.n	80164aa <_printf_i+0x32>
 8016494:	2f00      	cmp	r7, #0
 8016496:	f000 80d2 	beq.w	801663e <_printf_i+0x1c6>
 801649a:	2f58      	cmp	r7, #88	@ 0x58
 801649c:	f000 80b9 	beq.w	8016612 <_printf_i+0x19a>
 80164a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80164a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80164a8:	e03a      	b.n	8016520 <_printf_i+0xa8>
 80164aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80164ae:	2b15      	cmp	r3, #21
 80164b0:	d8f6      	bhi.n	80164a0 <_printf_i+0x28>
 80164b2:	a101      	add	r1, pc, #4	@ (adr r1, 80164b8 <_printf_i+0x40>)
 80164b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80164b8:	08016511 	.word	0x08016511
 80164bc:	08016525 	.word	0x08016525
 80164c0:	080164a1 	.word	0x080164a1
 80164c4:	080164a1 	.word	0x080164a1
 80164c8:	080164a1 	.word	0x080164a1
 80164cc:	080164a1 	.word	0x080164a1
 80164d0:	08016525 	.word	0x08016525
 80164d4:	080164a1 	.word	0x080164a1
 80164d8:	080164a1 	.word	0x080164a1
 80164dc:	080164a1 	.word	0x080164a1
 80164e0:	080164a1 	.word	0x080164a1
 80164e4:	08016625 	.word	0x08016625
 80164e8:	0801654f 	.word	0x0801654f
 80164ec:	080165df 	.word	0x080165df
 80164f0:	080164a1 	.word	0x080164a1
 80164f4:	080164a1 	.word	0x080164a1
 80164f8:	08016647 	.word	0x08016647
 80164fc:	080164a1 	.word	0x080164a1
 8016500:	0801654f 	.word	0x0801654f
 8016504:	080164a1 	.word	0x080164a1
 8016508:	080164a1 	.word	0x080164a1
 801650c:	080165e7 	.word	0x080165e7
 8016510:	6833      	ldr	r3, [r6, #0]
 8016512:	1d1a      	adds	r2, r3, #4
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	6032      	str	r2, [r6, #0]
 8016518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801651c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016520:	2301      	movs	r3, #1
 8016522:	e09d      	b.n	8016660 <_printf_i+0x1e8>
 8016524:	6833      	ldr	r3, [r6, #0]
 8016526:	6820      	ldr	r0, [r4, #0]
 8016528:	1d19      	adds	r1, r3, #4
 801652a:	6031      	str	r1, [r6, #0]
 801652c:	0606      	lsls	r6, r0, #24
 801652e:	d501      	bpl.n	8016534 <_printf_i+0xbc>
 8016530:	681d      	ldr	r5, [r3, #0]
 8016532:	e003      	b.n	801653c <_printf_i+0xc4>
 8016534:	0645      	lsls	r5, r0, #25
 8016536:	d5fb      	bpl.n	8016530 <_printf_i+0xb8>
 8016538:	f9b3 5000 	ldrsh.w	r5, [r3]
 801653c:	2d00      	cmp	r5, #0
 801653e:	da03      	bge.n	8016548 <_printf_i+0xd0>
 8016540:	232d      	movs	r3, #45	@ 0x2d
 8016542:	426d      	negs	r5, r5
 8016544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016548:	4859      	ldr	r0, [pc, #356]	@ (80166b0 <_printf_i+0x238>)
 801654a:	230a      	movs	r3, #10
 801654c:	e011      	b.n	8016572 <_printf_i+0xfa>
 801654e:	6821      	ldr	r1, [r4, #0]
 8016550:	6833      	ldr	r3, [r6, #0]
 8016552:	0608      	lsls	r0, r1, #24
 8016554:	f853 5b04 	ldr.w	r5, [r3], #4
 8016558:	d402      	bmi.n	8016560 <_printf_i+0xe8>
 801655a:	0649      	lsls	r1, r1, #25
 801655c:	bf48      	it	mi
 801655e:	b2ad      	uxthmi	r5, r5
 8016560:	2f6f      	cmp	r7, #111	@ 0x6f
 8016562:	4853      	ldr	r0, [pc, #332]	@ (80166b0 <_printf_i+0x238>)
 8016564:	6033      	str	r3, [r6, #0]
 8016566:	bf14      	ite	ne
 8016568:	230a      	movne	r3, #10
 801656a:	2308      	moveq	r3, #8
 801656c:	2100      	movs	r1, #0
 801656e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016572:	6866      	ldr	r6, [r4, #4]
 8016574:	60a6      	str	r6, [r4, #8]
 8016576:	2e00      	cmp	r6, #0
 8016578:	bfa2      	ittt	ge
 801657a:	6821      	ldrge	r1, [r4, #0]
 801657c:	f021 0104 	bicge.w	r1, r1, #4
 8016580:	6021      	strge	r1, [r4, #0]
 8016582:	b90d      	cbnz	r5, 8016588 <_printf_i+0x110>
 8016584:	2e00      	cmp	r6, #0
 8016586:	d04b      	beq.n	8016620 <_printf_i+0x1a8>
 8016588:	4616      	mov	r6, r2
 801658a:	fbb5 f1f3 	udiv	r1, r5, r3
 801658e:	fb03 5711 	mls	r7, r3, r1, r5
 8016592:	5dc7      	ldrb	r7, [r0, r7]
 8016594:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016598:	462f      	mov	r7, r5
 801659a:	42bb      	cmp	r3, r7
 801659c:	460d      	mov	r5, r1
 801659e:	d9f4      	bls.n	801658a <_printf_i+0x112>
 80165a0:	2b08      	cmp	r3, #8
 80165a2:	d10b      	bne.n	80165bc <_printf_i+0x144>
 80165a4:	6823      	ldr	r3, [r4, #0]
 80165a6:	07df      	lsls	r7, r3, #31
 80165a8:	d508      	bpl.n	80165bc <_printf_i+0x144>
 80165aa:	6923      	ldr	r3, [r4, #16]
 80165ac:	6861      	ldr	r1, [r4, #4]
 80165ae:	4299      	cmp	r1, r3
 80165b0:	bfde      	ittt	le
 80165b2:	2330      	movle	r3, #48	@ 0x30
 80165b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80165b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80165bc:	1b92      	subs	r2, r2, r6
 80165be:	6122      	str	r2, [r4, #16]
 80165c0:	f8cd a000 	str.w	sl, [sp]
 80165c4:	464b      	mov	r3, r9
 80165c6:	aa03      	add	r2, sp, #12
 80165c8:	4621      	mov	r1, r4
 80165ca:	4640      	mov	r0, r8
 80165cc:	f7ff fee6 	bl	801639c <_printf_common>
 80165d0:	3001      	adds	r0, #1
 80165d2:	d14a      	bne.n	801666a <_printf_i+0x1f2>
 80165d4:	f04f 30ff 	mov.w	r0, #4294967295
 80165d8:	b004      	add	sp, #16
 80165da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165de:	6823      	ldr	r3, [r4, #0]
 80165e0:	f043 0320 	orr.w	r3, r3, #32
 80165e4:	6023      	str	r3, [r4, #0]
 80165e6:	4833      	ldr	r0, [pc, #204]	@ (80166b4 <_printf_i+0x23c>)
 80165e8:	2778      	movs	r7, #120	@ 0x78
 80165ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80165ee:	6823      	ldr	r3, [r4, #0]
 80165f0:	6831      	ldr	r1, [r6, #0]
 80165f2:	061f      	lsls	r7, r3, #24
 80165f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80165f8:	d402      	bmi.n	8016600 <_printf_i+0x188>
 80165fa:	065f      	lsls	r7, r3, #25
 80165fc:	bf48      	it	mi
 80165fe:	b2ad      	uxthmi	r5, r5
 8016600:	6031      	str	r1, [r6, #0]
 8016602:	07d9      	lsls	r1, r3, #31
 8016604:	bf44      	itt	mi
 8016606:	f043 0320 	orrmi.w	r3, r3, #32
 801660a:	6023      	strmi	r3, [r4, #0]
 801660c:	b11d      	cbz	r5, 8016616 <_printf_i+0x19e>
 801660e:	2310      	movs	r3, #16
 8016610:	e7ac      	b.n	801656c <_printf_i+0xf4>
 8016612:	4827      	ldr	r0, [pc, #156]	@ (80166b0 <_printf_i+0x238>)
 8016614:	e7e9      	b.n	80165ea <_printf_i+0x172>
 8016616:	6823      	ldr	r3, [r4, #0]
 8016618:	f023 0320 	bic.w	r3, r3, #32
 801661c:	6023      	str	r3, [r4, #0]
 801661e:	e7f6      	b.n	801660e <_printf_i+0x196>
 8016620:	4616      	mov	r6, r2
 8016622:	e7bd      	b.n	80165a0 <_printf_i+0x128>
 8016624:	6833      	ldr	r3, [r6, #0]
 8016626:	6825      	ldr	r5, [r4, #0]
 8016628:	6961      	ldr	r1, [r4, #20]
 801662a:	1d18      	adds	r0, r3, #4
 801662c:	6030      	str	r0, [r6, #0]
 801662e:	062e      	lsls	r6, r5, #24
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	d501      	bpl.n	8016638 <_printf_i+0x1c0>
 8016634:	6019      	str	r1, [r3, #0]
 8016636:	e002      	b.n	801663e <_printf_i+0x1c6>
 8016638:	0668      	lsls	r0, r5, #25
 801663a:	d5fb      	bpl.n	8016634 <_printf_i+0x1bc>
 801663c:	8019      	strh	r1, [r3, #0]
 801663e:	2300      	movs	r3, #0
 8016640:	6123      	str	r3, [r4, #16]
 8016642:	4616      	mov	r6, r2
 8016644:	e7bc      	b.n	80165c0 <_printf_i+0x148>
 8016646:	6833      	ldr	r3, [r6, #0]
 8016648:	1d1a      	adds	r2, r3, #4
 801664a:	6032      	str	r2, [r6, #0]
 801664c:	681e      	ldr	r6, [r3, #0]
 801664e:	6862      	ldr	r2, [r4, #4]
 8016650:	2100      	movs	r1, #0
 8016652:	4630      	mov	r0, r6
 8016654:	f7e9 fe44 	bl	80002e0 <memchr>
 8016658:	b108      	cbz	r0, 801665e <_printf_i+0x1e6>
 801665a:	1b80      	subs	r0, r0, r6
 801665c:	6060      	str	r0, [r4, #4]
 801665e:	6863      	ldr	r3, [r4, #4]
 8016660:	6123      	str	r3, [r4, #16]
 8016662:	2300      	movs	r3, #0
 8016664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016668:	e7aa      	b.n	80165c0 <_printf_i+0x148>
 801666a:	6923      	ldr	r3, [r4, #16]
 801666c:	4632      	mov	r2, r6
 801666e:	4649      	mov	r1, r9
 8016670:	4640      	mov	r0, r8
 8016672:	47d0      	blx	sl
 8016674:	3001      	adds	r0, #1
 8016676:	d0ad      	beq.n	80165d4 <_printf_i+0x15c>
 8016678:	6823      	ldr	r3, [r4, #0]
 801667a:	079b      	lsls	r3, r3, #30
 801667c:	d413      	bmi.n	80166a6 <_printf_i+0x22e>
 801667e:	68e0      	ldr	r0, [r4, #12]
 8016680:	9b03      	ldr	r3, [sp, #12]
 8016682:	4298      	cmp	r0, r3
 8016684:	bfb8      	it	lt
 8016686:	4618      	movlt	r0, r3
 8016688:	e7a6      	b.n	80165d8 <_printf_i+0x160>
 801668a:	2301      	movs	r3, #1
 801668c:	4632      	mov	r2, r6
 801668e:	4649      	mov	r1, r9
 8016690:	4640      	mov	r0, r8
 8016692:	47d0      	blx	sl
 8016694:	3001      	adds	r0, #1
 8016696:	d09d      	beq.n	80165d4 <_printf_i+0x15c>
 8016698:	3501      	adds	r5, #1
 801669a:	68e3      	ldr	r3, [r4, #12]
 801669c:	9903      	ldr	r1, [sp, #12]
 801669e:	1a5b      	subs	r3, r3, r1
 80166a0:	42ab      	cmp	r3, r5
 80166a2:	dcf2      	bgt.n	801668a <_printf_i+0x212>
 80166a4:	e7eb      	b.n	801667e <_printf_i+0x206>
 80166a6:	2500      	movs	r5, #0
 80166a8:	f104 0619 	add.w	r6, r4, #25
 80166ac:	e7f5      	b.n	801669a <_printf_i+0x222>
 80166ae:	bf00      	nop
 80166b0:	0801920e 	.word	0x0801920e
 80166b4:	0801921f 	.word	0x0801921f

080166b8 <std>:
 80166b8:	2300      	movs	r3, #0
 80166ba:	b510      	push	{r4, lr}
 80166bc:	4604      	mov	r4, r0
 80166be:	e9c0 3300 	strd	r3, r3, [r0]
 80166c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80166c6:	6083      	str	r3, [r0, #8]
 80166c8:	8181      	strh	r1, [r0, #12]
 80166ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80166cc:	81c2      	strh	r2, [r0, #14]
 80166ce:	6183      	str	r3, [r0, #24]
 80166d0:	4619      	mov	r1, r3
 80166d2:	2208      	movs	r2, #8
 80166d4:	305c      	adds	r0, #92	@ 0x5c
 80166d6:	f000 f9f9 	bl	8016acc <memset>
 80166da:	4b0d      	ldr	r3, [pc, #52]	@ (8016710 <std+0x58>)
 80166dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80166de:	4b0d      	ldr	r3, [pc, #52]	@ (8016714 <std+0x5c>)
 80166e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80166e2:	4b0d      	ldr	r3, [pc, #52]	@ (8016718 <std+0x60>)
 80166e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80166e6:	4b0d      	ldr	r3, [pc, #52]	@ (801671c <std+0x64>)
 80166e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80166ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016720 <std+0x68>)
 80166ec:	6224      	str	r4, [r4, #32]
 80166ee:	429c      	cmp	r4, r3
 80166f0:	d006      	beq.n	8016700 <std+0x48>
 80166f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80166f6:	4294      	cmp	r4, r2
 80166f8:	d002      	beq.n	8016700 <std+0x48>
 80166fa:	33d0      	adds	r3, #208	@ 0xd0
 80166fc:	429c      	cmp	r4, r3
 80166fe:	d105      	bne.n	801670c <std+0x54>
 8016700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016708:	f000 ba5c 	b.w	8016bc4 <__retarget_lock_init_recursive>
 801670c:	bd10      	pop	{r4, pc}
 801670e:	bf00      	nop
 8016710:	0801691d 	.word	0x0801691d
 8016714:	0801693f 	.word	0x0801693f
 8016718:	08016977 	.word	0x08016977
 801671c:	0801699b 	.word	0x0801699b
 8016720:	24001628 	.word	0x24001628

08016724 <stdio_exit_handler>:
 8016724:	4a02      	ldr	r2, [pc, #8]	@ (8016730 <stdio_exit_handler+0xc>)
 8016726:	4903      	ldr	r1, [pc, #12]	@ (8016734 <stdio_exit_handler+0x10>)
 8016728:	4803      	ldr	r0, [pc, #12]	@ (8016738 <stdio_exit_handler+0x14>)
 801672a:	f000 b869 	b.w	8016800 <_fwalk_sglue>
 801672e:	bf00      	nop
 8016730:	24000128 	.word	0x24000128
 8016734:	08018435 	.word	0x08018435
 8016738:	24000138 	.word	0x24000138

0801673c <cleanup_stdio>:
 801673c:	6841      	ldr	r1, [r0, #4]
 801673e:	4b0c      	ldr	r3, [pc, #48]	@ (8016770 <cleanup_stdio+0x34>)
 8016740:	4299      	cmp	r1, r3
 8016742:	b510      	push	{r4, lr}
 8016744:	4604      	mov	r4, r0
 8016746:	d001      	beq.n	801674c <cleanup_stdio+0x10>
 8016748:	f001 fe74 	bl	8018434 <_fflush_r>
 801674c:	68a1      	ldr	r1, [r4, #8]
 801674e:	4b09      	ldr	r3, [pc, #36]	@ (8016774 <cleanup_stdio+0x38>)
 8016750:	4299      	cmp	r1, r3
 8016752:	d002      	beq.n	801675a <cleanup_stdio+0x1e>
 8016754:	4620      	mov	r0, r4
 8016756:	f001 fe6d 	bl	8018434 <_fflush_r>
 801675a:	68e1      	ldr	r1, [r4, #12]
 801675c:	4b06      	ldr	r3, [pc, #24]	@ (8016778 <cleanup_stdio+0x3c>)
 801675e:	4299      	cmp	r1, r3
 8016760:	d004      	beq.n	801676c <cleanup_stdio+0x30>
 8016762:	4620      	mov	r0, r4
 8016764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016768:	f001 be64 	b.w	8018434 <_fflush_r>
 801676c:	bd10      	pop	{r4, pc}
 801676e:	bf00      	nop
 8016770:	24001628 	.word	0x24001628
 8016774:	24001690 	.word	0x24001690
 8016778:	240016f8 	.word	0x240016f8

0801677c <global_stdio_init.part.0>:
 801677c:	b510      	push	{r4, lr}
 801677e:	4b0b      	ldr	r3, [pc, #44]	@ (80167ac <global_stdio_init.part.0+0x30>)
 8016780:	4c0b      	ldr	r4, [pc, #44]	@ (80167b0 <global_stdio_init.part.0+0x34>)
 8016782:	4a0c      	ldr	r2, [pc, #48]	@ (80167b4 <global_stdio_init.part.0+0x38>)
 8016784:	601a      	str	r2, [r3, #0]
 8016786:	4620      	mov	r0, r4
 8016788:	2200      	movs	r2, #0
 801678a:	2104      	movs	r1, #4
 801678c:	f7ff ff94 	bl	80166b8 <std>
 8016790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016794:	2201      	movs	r2, #1
 8016796:	2109      	movs	r1, #9
 8016798:	f7ff ff8e 	bl	80166b8 <std>
 801679c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80167a0:	2202      	movs	r2, #2
 80167a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167a6:	2112      	movs	r1, #18
 80167a8:	f7ff bf86 	b.w	80166b8 <std>
 80167ac:	24001760 	.word	0x24001760
 80167b0:	24001628 	.word	0x24001628
 80167b4:	08016725 	.word	0x08016725

080167b8 <__sfp_lock_acquire>:
 80167b8:	4801      	ldr	r0, [pc, #4]	@ (80167c0 <__sfp_lock_acquire+0x8>)
 80167ba:	f000 ba04 	b.w	8016bc6 <__retarget_lock_acquire_recursive>
 80167be:	bf00      	nop
 80167c0:	24001769 	.word	0x24001769

080167c4 <__sfp_lock_release>:
 80167c4:	4801      	ldr	r0, [pc, #4]	@ (80167cc <__sfp_lock_release+0x8>)
 80167c6:	f000 b9ff 	b.w	8016bc8 <__retarget_lock_release_recursive>
 80167ca:	bf00      	nop
 80167cc:	24001769 	.word	0x24001769

080167d0 <__sinit>:
 80167d0:	b510      	push	{r4, lr}
 80167d2:	4604      	mov	r4, r0
 80167d4:	f7ff fff0 	bl	80167b8 <__sfp_lock_acquire>
 80167d8:	6a23      	ldr	r3, [r4, #32]
 80167da:	b11b      	cbz	r3, 80167e4 <__sinit+0x14>
 80167dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167e0:	f7ff bff0 	b.w	80167c4 <__sfp_lock_release>
 80167e4:	4b04      	ldr	r3, [pc, #16]	@ (80167f8 <__sinit+0x28>)
 80167e6:	6223      	str	r3, [r4, #32]
 80167e8:	4b04      	ldr	r3, [pc, #16]	@ (80167fc <__sinit+0x2c>)
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d1f5      	bne.n	80167dc <__sinit+0xc>
 80167f0:	f7ff ffc4 	bl	801677c <global_stdio_init.part.0>
 80167f4:	e7f2      	b.n	80167dc <__sinit+0xc>
 80167f6:	bf00      	nop
 80167f8:	0801673d 	.word	0x0801673d
 80167fc:	24001760 	.word	0x24001760

08016800 <_fwalk_sglue>:
 8016800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016804:	4607      	mov	r7, r0
 8016806:	4688      	mov	r8, r1
 8016808:	4614      	mov	r4, r2
 801680a:	2600      	movs	r6, #0
 801680c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016810:	f1b9 0901 	subs.w	r9, r9, #1
 8016814:	d505      	bpl.n	8016822 <_fwalk_sglue+0x22>
 8016816:	6824      	ldr	r4, [r4, #0]
 8016818:	2c00      	cmp	r4, #0
 801681a:	d1f7      	bne.n	801680c <_fwalk_sglue+0xc>
 801681c:	4630      	mov	r0, r6
 801681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016822:	89ab      	ldrh	r3, [r5, #12]
 8016824:	2b01      	cmp	r3, #1
 8016826:	d907      	bls.n	8016838 <_fwalk_sglue+0x38>
 8016828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801682c:	3301      	adds	r3, #1
 801682e:	d003      	beq.n	8016838 <_fwalk_sglue+0x38>
 8016830:	4629      	mov	r1, r5
 8016832:	4638      	mov	r0, r7
 8016834:	47c0      	blx	r8
 8016836:	4306      	orrs	r6, r0
 8016838:	3568      	adds	r5, #104	@ 0x68
 801683a:	e7e9      	b.n	8016810 <_fwalk_sglue+0x10>

0801683c <iprintf>:
 801683c:	b40f      	push	{r0, r1, r2, r3}
 801683e:	b507      	push	{r0, r1, r2, lr}
 8016840:	4906      	ldr	r1, [pc, #24]	@ (801685c <iprintf+0x20>)
 8016842:	ab04      	add	r3, sp, #16
 8016844:	6808      	ldr	r0, [r1, #0]
 8016846:	f853 2b04 	ldr.w	r2, [r3], #4
 801684a:	6881      	ldr	r1, [r0, #8]
 801684c:	9301      	str	r3, [sp, #4]
 801684e:	f001 fc55 	bl	80180fc <_vfiprintf_r>
 8016852:	b003      	add	sp, #12
 8016854:	f85d eb04 	ldr.w	lr, [sp], #4
 8016858:	b004      	add	sp, #16
 801685a:	4770      	bx	lr
 801685c:	24000134 	.word	0x24000134

08016860 <_puts_r>:
 8016860:	6a03      	ldr	r3, [r0, #32]
 8016862:	b570      	push	{r4, r5, r6, lr}
 8016864:	6884      	ldr	r4, [r0, #8]
 8016866:	4605      	mov	r5, r0
 8016868:	460e      	mov	r6, r1
 801686a:	b90b      	cbnz	r3, 8016870 <_puts_r+0x10>
 801686c:	f7ff ffb0 	bl	80167d0 <__sinit>
 8016870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016872:	07db      	lsls	r3, r3, #31
 8016874:	d405      	bmi.n	8016882 <_puts_r+0x22>
 8016876:	89a3      	ldrh	r3, [r4, #12]
 8016878:	0598      	lsls	r0, r3, #22
 801687a:	d402      	bmi.n	8016882 <_puts_r+0x22>
 801687c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801687e:	f000 f9a2 	bl	8016bc6 <__retarget_lock_acquire_recursive>
 8016882:	89a3      	ldrh	r3, [r4, #12]
 8016884:	0719      	lsls	r1, r3, #28
 8016886:	d502      	bpl.n	801688e <_puts_r+0x2e>
 8016888:	6923      	ldr	r3, [r4, #16]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d135      	bne.n	80168fa <_puts_r+0x9a>
 801688e:	4621      	mov	r1, r4
 8016890:	4628      	mov	r0, r5
 8016892:	f000 f8c5 	bl	8016a20 <__swsetup_r>
 8016896:	b380      	cbz	r0, 80168fa <_puts_r+0x9a>
 8016898:	f04f 35ff 	mov.w	r5, #4294967295
 801689c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801689e:	07da      	lsls	r2, r3, #31
 80168a0:	d405      	bmi.n	80168ae <_puts_r+0x4e>
 80168a2:	89a3      	ldrh	r3, [r4, #12]
 80168a4:	059b      	lsls	r3, r3, #22
 80168a6:	d402      	bmi.n	80168ae <_puts_r+0x4e>
 80168a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168aa:	f000 f98d 	bl	8016bc8 <__retarget_lock_release_recursive>
 80168ae:	4628      	mov	r0, r5
 80168b0:	bd70      	pop	{r4, r5, r6, pc}
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	da04      	bge.n	80168c0 <_puts_r+0x60>
 80168b6:	69a2      	ldr	r2, [r4, #24]
 80168b8:	429a      	cmp	r2, r3
 80168ba:	dc17      	bgt.n	80168ec <_puts_r+0x8c>
 80168bc:	290a      	cmp	r1, #10
 80168be:	d015      	beq.n	80168ec <_puts_r+0x8c>
 80168c0:	6823      	ldr	r3, [r4, #0]
 80168c2:	1c5a      	adds	r2, r3, #1
 80168c4:	6022      	str	r2, [r4, #0]
 80168c6:	7019      	strb	r1, [r3, #0]
 80168c8:	68a3      	ldr	r3, [r4, #8]
 80168ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80168ce:	3b01      	subs	r3, #1
 80168d0:	60a3      	str	r3, [r4, #8]
 80168d2:	2900      	cmp	r1, #0
 80168d4:	d1ed      	bne.n	80168b2 <_puts_r+0x52>
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	da11      	bge.n	80168fe <_puts_r+0x9e>
 80168da:	4622      	mov	r2, r4
 80168dc:	210a      	movs	r1, #10
 80168de:	4628      	mov	r0, r5
 80168e0:	f000 f85f 	bl	80169a2 <__swbuf_r>
 80168e4:	3001      	adds	r0, #1
 80168e6:	d0d7      	beq.n	8016898 <_puts_r+0x38>
 80168e8:	250a      	movs	r5, #10
 80168ea:	e7d7      	b.n	801689c <_puts_r+0x3c>
 80168ec:	4622      	mov	r2, r4
 80168ee:	4628      	mov	r0, r5
 80168f0:	f000 f857 	bl	80169a2 <__swbuf_r>
 80168f4:	3001      	adds	r0, #1
 80168f6:	d1e7      	bne.n	80168c8 <_puts_r+0x68>
 80168f8:	e7ce      	b.n	8016898 <_puts_r+0x38>
 80168fa:	3e01      	subs	r6, #1
 80168fc:	e7e4      	b.n	80168c8 <_puts_r+0x68>
 80168fe:	6823      	ldr	r3, [r4, #0]
 8016900:	1c5a      	adds	r2, r3, #1
 8016902:	6022      	str	r2, [r4, #0]
 8016904:	220a      	movs	r2, #10
 8016906:	701a      	strb	r2, [r3, #0]
 8016908:	e7ee      	b.n	80168e8 <_puts_r+0x88>
	...

0801690c <puts>:
 801690c:	4b02      	ldr	r3, [pc, #8]	@ (8016918 <puts+0xc>)
 801690e:	4601      	mov	r1, r0
 8016910:	6818      	ldr	r0, [r3, #0]
 8016912:	f7ff bfa5 	b.w	8016860 <_puts_r>
 8016916:	bf00      	nop
 8016918:	24000134 	.word	0x24000134

0801691c <__sread>:
 801691c:	b510      	push	{r4, lr}
 801691e:	460c      	mov	r4, r1
 8016920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016924:	f000 f900 	bl	8016b28 <_read_r>
 8016928:	2800      	cmp	r0, #0
 801692a:	bfab      	itete	ge
 801692c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801692e:	89a3      	ldrhlt	r3, [r4, #12]
 8016930:	181b      	addge	r3, r3, r0
 8016932:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016936:	bfac      	ite	ge
 8016938:	6563      	strge	r3, [r4, #84]	@ 0x54
 801693a:	81a3      	strhlt	r3, [r4, #12]
 801693c:	bd10      	pop	{r4, pc}

0801693e <__swrite>:
 801693e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016942:	461f      	mov	r7, r3
 8016944:	898b      	ldrh	r3, [r1, #12]
 8016946:	05db      	lsls	r3, r3, #23
 8016948:	4605      	mov	r5, r0
 801694a:	460c      	mov	r4, r1
 801694c:	4616      	mov	r6, r2
 801694e:	d505      	bpl.n	801695c <__swrite+0x1e>
 8016950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016954:	2302      	movs	r3, #2
 8016956:	2200      	movs	r2, #0
 8016958:	f000 f8d4 	bl	8016b04 <_lseek_r>
 801695c:	89a3      	ldrh	r3, [r4, #12]
 801695e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016962:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016966:	81a3      	strh	r3, [r4, #12]
 8016968:	4632      	mov	r2, r6
 801696a:	463b      	mov	r3, r7
 801696c:	4628      	mov	r0, r5
 801696e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016972:	f000 b8eb 	b.w	8016b4c <_write_r>

08016976 <__sseek>:
 8016976:	b510      	push	{r4, lr}
 8016978:	460c      	mov	r4, r1
 801697a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801697e:	f000 f8c1 	bl	8016b04 <_lseek_r>
 8016982:	1c43      	adds	r3, r0, #1
 8016984:	89a3      	ldrh	r3, [r4, #12]
 8016986:	bf15      	itete	ne
 8016988:	6560      	strne	r0, [r4, #84]	@ 0x54
 801698a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801698e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016992:	81a3      	strheq	r3, [r4, #12]
 8016994:	bf18      	it	ne
 8016996:	81a3      	strhne	r3, [r4, #12]
 8016998:	bd10      	pop	{r4, pc}

0801699a <__sclose>:
 801699a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801699e:	f000 b8a1 	b.w	8016ae4 <_close_r>

080169a2 <__swbuf_r>:
 80169a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169a4:	460e      	mov	r6, r1
 80169a6:	4614      	mov	r4, r2
 80169a8:	4605      	mov	r5, r0
 80169aa:	b118      	cbz	r0, 80169b4 <__swbuf_r+0x12>
 80169ac:	6a03      	ldr	r3, [r0, #32]
 80169ae:	b90b      	cbnz	r3, 80169b4 <__swbuf_r+0x12>
 80169b0:	f7ff ff0e 	bl	80167d0 <__sinit>
 80169b4:	69a3      	ldr	r3, [r4, #24]
 80169b6:	60a3      	str	r3, [r4, #8]
 80169b8:	89a3      	ldrh	r3, [r4, #12]
 80169ba:	071a      	lsls	r2, r3, #28
 80169bc:	d501      	bpl.n	80169c2 <__swbuf_r+0x20>
 80169be:	6923      	ldr	r3, [r4, #16]
 80169c0:	b943      	cbnz	r3, 80169d4 <__swbuf_r+0x32>
 80169c2:	4621      	mov	r1, r4
 80169c4:	4628      	mov	r0, r5
 80169c6:	f000 f82b 	bl	8016a20 <__swsetup_r>
 80169ca:	b118      	cbz	r0, 80169d4 <__swbuf_r+0x32>
 80169cc:	f04f 37ff 	mov.w	r7, #4294967295
 80169d0:	4638      	mov	r0, r7
 80169d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169d4:	6823      	ldr	r3, [r4, #0]
 80169d6:	6922      	ldr	r2, [r4, #16]
 80169d8:	1a98      	subs	r0, r3, r2
 80169da:	6963      	ldr	r3, [r4, #20]
 80169dc:	b2f6      	uxtb	r6, r6
 80169de:	4283      	cmp	r3, r0
 80169e0:	4637      	mov	r7, r6
 80169e2:	dc05      	bgt.n	80169f0 <__swbuf_r+0x4e>
 80169e4:	4621      	mov	r1, r4
 80169e6:	4628      	mov	r0, r5
 80169e8:	f001 fd24 	bl	8018434 <_fflush_r>
 80169ec:	2800      	cmp	r0, #0
 80169ee:	d1ed      	bne.n	80169cc <__swbuf_r+0x2a>
 80169f0:	68a3      	ldr	r3, [r4, #8]
 80169f2:	3b01      	subs	r3, #1
 80169f4:	60a3      	str	r3, [r4, #8]
 80169f6:	6823      	ldr	r3, [r4, #0]
 80169f8:	1c5a      	adds	r2, r3, #1
 80169fa:	6022      	str	r2, [r4, #0]
 80169fc:	701e      	strb	r6, [r3, #0]
 80169fe:	6962      	ldr	r2, [r4, #20]
 8016a00:	1c43      	adds	r3, r0, #1
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d004      	beq.n	8016a10 <__swbuf_r+0x6e>
 8016a06:	89a3      	ldrh	r3, [r4, #12]
 8016a08:	07db      	lsls	r3, r3, #31
 8016a0a:	d5e1      	bpl.n	80169d0 <__swbuf_r+0x2e>
 8016a0c:	2e0a      	cmp	r6, #10
 8016a0e:	d1df      	bne.n	80169d0 <__swbuf_r+0x2e>
 8016a10:	4621      	mov	r1, r4
 8016a12:	4628      	mov	r0, r5
 8016a14:	f001 fd0e 	bl	8018434 <_fflush_r>
 8016a18:	2800      	cmp	r0, #0
 8016a1a:	d0d9      	beq.n	80169d0 <__swbuf_r+0x2e>
 8016a1c:	e7d6      	b.n	80169cc <__swbuf_r+0x2a>
	...

08016a20 <__swsetup_r>:
 8016a20:	b538      	push	{r3, r4, r5, lr}
 8016a22:	4b29      	ldr	r3, [pc, #164]	@ (8016ac8 <__swsetup_r+0xa8>)
 8016a24:	4605      	mov	r5, r0
 8016a26:	6818      	ldr	r0, [r3, #0]
 8016a28:	460c      	mov	r4, r1
 8016a2a:	b118      	cbz	r0, 8016a34 <__swsetup_r+0x14>
 8016a2c:	6a03      	ldr	r3, [r0, #32]
 8016a2e:	b90b      	cbnz	r3, 8016a34 <__swsetup_r+0x14>
 8016a30:	f7ff fece 	bl	80167d0 <__sinit>
 8016a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a38:	0719      	lsls	r1, r3, #28
 8016a3a:	d422      	bmi.n	8016a82 <__swsetup_r+0x62>
 8016a3c:	06da      	lsls	r2, r3, #27
 8016a3e:	d407      	bmi.n	8016a50 <__swsetup_r+0x30>
 8016a40:	2209      	movs	r2, #9
 8016a42:	602a      	str	r2, [r5, #0]
 8016a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a48:	81a3      	strh	r3, [r4, #12]
 8016a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a4e:	e033      	b.n	8016ab8 <__swsetup_r+0x98>
 8016a50:	0758      	lsls	r0, r3, #29
 8016a52:	d512      	bpl.n	8016a7a <__swsetup_r+0x5a>
 8016a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a56:	b141      	cbz	r1, 8016a6a <__swsetup_r+0x4a>
 8016a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016a5c:	4299      	cmp	r1, r3
 8016a5e:	d002      	beq.n	8016a66 <__swsetup_r+0x46>
 8016a60:	4628      	mov	r0, r5
 8016a62:	f000 fe9f 	bl	80177a4 <_free_r>
 8016a66:	2300      	movs	r3, #0
 8016a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8016a6a:	89a3      	ldrh	r3, [r4, #12]
 8016a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016a70:	81a3      	strh	r3, [r4, #12]
 8016a72:	2300      	movs	r3, #0
 8016a74:	6063      	str	r3, [r4, #4]
 8016a76:	6923      	ldr	r3, [r4, #16]
 8016a78:	6023      	str	r3, [r4, #0]
 8016a7a:	89a3      	ldrh	r3, [r4, #12]
 8016a7c:	f043 0308 	orr.w	r3, r3, #8
 8016a80:	81a3      	strh	r3, [r4, #12]
 8016a82:	6923      	ldr	r3, [r4, #16]
 8016a84:	b94b      	cbnz	r3, 8016a9a <__swsetup_r+0x7a>
 8016a86:	89a3      	ldrh	r3, [r4, #12]
 8016a88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016a90:	d003      	beq.n	8016a9a <__swsetup_r+0x7a>
 8016a92:	4621      	mov	r1, r4
 8016a94:	4628      	mov	r0, r5
 8016a96:	f001 fd1b 	bl	80184d0 <__smakebuf_r>
 8016a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a9e:	f013 0201 	ands.w	r2, r3, #1
 8016aa2:	d00a      	beq.n	8016aba <__swsetup_r+0x9a>
 8016aa4:	2200      	movs	r2, #0
 8016aa6:	60a2      	str	r2, [r4, #8]
 8016aa8:	6962      	ldr	r2, [r4, #20]
 8016aaa:	4252      	negs	r2, r2
 8016aac:	61a2      	str	r2, [r4, #24]
 8016aae:	6922      	ldr	r2, [r4, #16]
 8016ab0:	b942      	cbnz	r2, 8016ac4 <__swsetup_r+0xa4>
 8016ab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016ab6:	d1c5      	bne.n	8016a44 <__swsetup_r+0x24>
 8016ab8:	bd38      	pop	{r3, r4, r5, pc}
 8016aba:	0799      	lsls	r1, r3, #30
 8016abc:	bf58      	it	pl
 8016abe:	6962      	ldrpl	r2, [r4, #20]
 8016ac0:	60a2      	str	r2, [r4, #8]
 8016ac2:	e7f4      	b.n	8016aae <__swsetup_r+0x8e>
 8016ac4:	2000      	movs	r0, #0
 8016ac6:	e7f7      	b.n	8016ab8 <__swsetup_r+0x98>
 8016ac8:	24000134 	.word	0x24000134

08016acc <memset>:
 8016acc:	4402      	add	r2, r0
 8016ace:	4603      	mov	r3, r0
 8016ad0:	4293      	cmp	r3, r2
 8016ad2:	d100      	bne.n	8016ad6 <memset+0xa>
 8016ad4:	4770      	bx	lr
 8016ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8016ada:	e7f9      	b.n	8016ad0 <memset+0x4>

08016adc <_localeconv_r>:
 8016adc:	4800      	ldr	r0, [pc, #0]	@ (8016ae0 <_localeconv_r+0x4>)
 8016ade:	4770      	bx	lr
 8016ae0:	24000274 	.word	0x24000274

08016ae4 <_close_r>:
 8016ae4:	b538      	push	{r3, r4, r5, lr}
 8016ae6:	4d06      	ldr	r5, [pc, #24]	@ (8016b00 <_close_r+0x1c>)
 8016ae8:	2300      	movs	r3, #0
 8016aea:	4604      	mov	r4, r0
 8016aec:	4608      	mov	r0, r1
 8016aee:	602b      	str	r3, [r5, #0]
 8016af0:	f7ed fdd0 	bl	8004694 <_close>
 8016af4:	1c43      	adds	r3, r0, #1
 8016af6:	d102      	bne.n	8016afe <_close_r+0x1a>
 8016af8:	682b      	ldr	r3, [r5, #0]
 8016afa:	b103      	cbz	r3, 8016afe <_close_r+0x1a>
 8016afc:	6023      	str	r3, [r4, #0]
 8016afe:	bd38      	pop	{r3, r4, r5, pc}
 8016b00:	24001764 	.word	0x24001764

08016b04 <_lseek_r>:
 8016b04:	b538      	push	{r3, r4, r5, lr}
 8016b06:	4d07      	ldr	r5, [pc, #28]	@ (8016b24 <_lseek_r+0x20>)
 8016b08:	4604      	mov	r4, r0
 8016b0a:	4608      	mov	r0, r1
 8016b0c:	4611      	mov	r1, r2
 8016b0e:	2200      	movs	r2, #0
 8016b10:	602a      	str	r2, [r5, #0]
 8016b12:	461a      	mov	r2, r3
 8016b14:	f7ed fde5 	bl	80046e2 <_lseek>
 8016b18:	1c43      	adds	r3, r0, #1
 8016b1a:	d102      	bne.n	8016b22 <_lseek_r+0x1e>
 8016b1c:	682b      	ldr	r3, [r5, #0]
 8016b1e:	b103      	cbz	r3, 8016b22 <_lseek_r+0x1e>
 8016b20:	6023      	str	r3, [r4, #0]
 8016b22:	bd38      	pop	{r3, r4, r5, pc}
 8016b24:	24001764 	.word	0x24001764

08016b28 <_read_r>:
 8016b28:	b538      	push	{r3, r4, r5, lr}
 8016b2a:	4d07      	ldr	r5, [pc, #28]	@ (8016b48 <_read_r+0x20>)
 8016b2c:	4604      	mov	r4, r0
 8016b2e:	4608      	mov	r0, r1
 8016b30:	4611      	mov	r1, r2
 8016b32:	2200      	movs	r2, #0
 8016b34:	602a      	str	r2, [r5, #0]
 8016b36:	461a      	mov	r2, r3
 8016b38:	f7ed fd8f 	bl	800465a <_read>
 8016b3c:	1c43      	adds	r3, r0, #1
 8016b3e:	d102      	bne.n	8016b46 <_read_r+0x1e>
 8016b40:	682b      	ldr	r3, [r5, #0]
 8016b42:	b103      	cbz	r3, 8016b46 <_read_r+0x1e>
 8016b44:	6023      	str	r3, [r4, #0]
 8016b46:	bd38      	pop	{r3, r4, r5, pc}
 8016b48:	24001764 	.word	0x24001764

08016b4c <_write_r>:
 8016b4c:	b538      	push	{r3, r4, r5, lr}
 8016b4e:	4d07      	ldr	r5, [pc, #28]	@ (8016b6c <_write_r+0x20>)
 8016b50:	4604      	mov	r4, r0
 8016b52:	4608      	mov	r0, r1
 8016b54:	4611      	mov	r1, r2
 8016b56:	2200      	movs	r2, #0
 8016b58:	602a      	str	r2, [r5, #0]
 8016b5a:	461a      	mov	r2, r3
 8016b5c:	f7ec fd6b 	bl	8003636 <_write>
 8016b60:	1c43      	adds	r3, r0, #1
 8016b62:	d102      	bne.n	8016b6a <_write_r+0x1e>
 8016b64:	682b      	ldr	r3, [r5, #0]
 8016b66:	b103      	cbz	r3, 8016b6a <_write_r+0x1e>
 8016b68:	6023      	str	r3, [r4, #0]
 8016b6a:	bd38      	pop	{r3, r4, r5, pc}
 8016b6c:	24001764 	.word	0x24001764

08016b70 <__errno>:
 8016b70:	4b01      	ldr	r3, [pc, #4]	@ (8016b78 <__errno+0x8>)
 8016b72:	6818      	ldr	r0, [r3, #0]
 8016b74:	4770      	bx	lr
 8016b76:	bf00      	nop
 8016b78:	24000134 	.word	0x24000134

08016b7c <__libc_init_array>:
 8016b7c:	b570      	push	{r4, r5, r6, lr}
 8016b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8016bb4 <__libc_init_array+0x38>)
 8016b80:	4c0d      	ldr	r4, [pc, #52]	@ (8016bb8 <__libc_init_array+0x3c>)
 8016b82:	1b64      	subs	r4, r4, r5
 8016b84:	10a4      	asrs	r4, r4, #2
 8016b86:	2600      	movs	r6, #0
 8016b88:	42a6      	cmp	r6, r4
 8016b8a:	d109      	bne.n	8016ba0 <__libc_init_array+0x24>
 8016b8c:	4d0b      	ldr	r5, [pc, #44]	@ (8016bbc <__libc_init_array+0x40>)
 8016b8e:	4c0c      	ldr	r4, [pc, #48]	@ (8016bc0 <__libc_init_array+0x44>)
 8016b90:	f002 f8b6 	bl	8018d00 <_init>
 8016b94:	1b64      	subs	r4, r4, r5
 8016b96:	10a4      	asrs	r4, r4, #2
 8016b98:	2600      	movs	r6, #0
 8016b9a:	42a6      	cmp	r6, r4
 8016b9c:	d105      	bne.n	8016baa <__libc_init_array+0x2e>
 8016b9e:	bd70      	pop	{r4, r5, r6, pc}
 8016ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ba4:	4798      	blx	r3
 8016ba6:	3601      	adds	r6, #1
 8016ba8:	e7ee      	b.n	8016b88 <__libc_init_array+0xc>
 8016baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8016bae:	4798      	blx	r3
 8016bb0:	3601      	adds	r6, #1
 8016bb2:	e7f2      	b.n	8016b9a <__libc_init_array+0x1e>
 8016bb4:	0801ae30 	.word	0x0801ae30
 8016bb8:	0801ae30 	.word	0x0801ae30
 8016bbc:	0801ae30 	.word	0x0801ae30
 8016bc0:	0801ae34 	.word	0x0801ae34

08016bc4 <__retarget_lock_init_recursive>:
 8016bc4:	4770      	bx	lr

08016bc6 <__retarget_lock_acquire_recursive>:
 8016bc6:	4770      	bx	lr

08016bc8 <__retarget_lock_release_recursive>:
 8016bc8:	4770      	bx	lr

08016bca <memcpy>:
 8016bca:	440a      	add	r2, r1
 8016bcc:	4291      	cmp	r1, r2
 8016bce:	f100 33ff 	add.w	r3, r0, #4294967295
 8016bd2:	d100      	bne.n	8016bd6 <memcpy+0xc>
 8016bd4:	4770      	bx	lr
 8016bd6:	b510      	push	{r4, lr}
 8016bd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016bdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016be0:	4291      	cmp	r1, r2
 8016be2:	d1f9      	bne.n	8016bd8 <memcpy+0xe>
 8016be4:	bd10      	pop	{r4, pc}

08016be6 <quorem>:
 8016be6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bea:	6903      	ldr	r3, [r0, #16]
 8016bec:	690c      	ldr	r4, [r1, #16]
 8016bee:	42a3      	cmp	r3, r4
 8016bf0:	4607      	mov	r7, r0
 8016bf2:	db7e      	blt.n	8016cf2 <quorem+0x10c>
 8016bf4:	3c01      	subs	r4, #1
 8016bf6:	f101 0814 	add.w	r8, r1, #20
 8016bfa:	00a3      	lsls	r3, r4, #2
 8016bfc:	f100 0514 	add.w	r5, r0, #20
 8016c00:	9300      	str	r3, [sp, #0]
 8016c02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016c06:	9301      	str	r3, [sp, #4]
 8016c08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016c0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016c10:	3301      	adds	r3, #1
 8016c12:	429a      	cmp	r2, r3
 8016c14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016c18:	fbb2 f6f3 	udiv	r6, r2, r3
 8016c1c:	d32e      	bcc.n	8016c7c <quorem+0x96>
 8016c1e:	f04f 0a00 	mov.w	sl, #0
 8016c22:	46c4      	mov	ip, r8
 8016c24:	46ae      	mov	lr, r5
 8016c26:	46d3      	mov	fp, sl
 8016c28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016c2c:	b298      	uxth	r0, r3
 8016c2e:	fb06 a000 	mla	r0, r6, r0, sl
 8016c32:	0c02      	lsrs	r2, r0, #16
 8016c34:	0c1b      	lsrs	r3, r3, #16
 8016c36:	fb06 2303 	mla	r3, r6, r3, r2
 8016c3a:	f8de 2000 	ldr.w	r2, [lr]
 8016c3e:	b280      	uxth	r0, r0
 8016c40:	b292      	uxth	r2, r2
 8016c42:	1a12      	subs	r2, r2, r0
 8016c44:	445a      	add	r2, fp
 8016c46:	f8de 0000 	ldr.w	r0, [lr]
 8016c4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016c4e:	b29b      	uxth	r3, r3
 8016c50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8016c54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016c58:	b292      	uxth	r2, r2
 8016c5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016c5e:	45e1      	cmp	r9, ip
 8016c60:	f84e 2b04 	str.w	r2, [lr], #4
 8016c64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016c68:	d2de      	bcs.n	8016c28 <quorem+0x42>
 8016c6a:	9b00      	ldr	r3, [sp, #0]
 8016c6c:	58eb      	ldr	r3, [r5, r3]
 8016c6e:	b92b      	cbnz	r3, 8016c7c <quorem+0x96>
 8016c70:	9b01      	ldr	r3, [sp, #4]
 8016c72:	3b04      	subs	r3, #4
 8016c74:	429d      	cmp	r5, r3
 8016c76:	461a      	mov	r2, r3
 8016c78:	d32f      	bcc.n	8016cda <quorem+0xf4>
 8016c7a:	613c      	str	r4, [r7, #16]
 8016c7c:	4638      	mov	r0, r7
 8016c7e:	f001 f90b 	bl	8017e98 <__mcmp>
 8016c82:	2800      	cmp	r0, #0
 8016c84:	db25      	blt.n	8016cd2 <quorem+0xec>
 8016c86:	4629      	mov	r1, r5
 8016c88:	2000      	movs	r0, #0
 8016c8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8016c8e:	f8d1 c000 	ldr.w	ip, [r1]
 8016c92:	fa1f fe82 	uxth.w	lr, r2
 8016c96:	fa1f f38c 	uxth.w	r3, ip
 8016c9a:	eba3 030e 	sub.w	r3, r3, lr
 8016c9e:	4403      	add	r3, r0
 8016ca0:	0c12      	lsrs	r2, r2, #16
 8016ca2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016ca6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8016caa:	b29b      	uxth	r3, r3
 8016cac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cb0:	45c1      	cmp	r9, r8
 8016cb2:	f841 3b04 	str.w	r3, [r1], #4
 8016cb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016cba:	d2e6      	bcs.n	8016c8a <quorem+0xa4>
 8016cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016cc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016cc4:	b922      	cbnz	r2, 8016cd0 <quorem+0xea>
 8016cc6:	3b04      	subs	r3, #4
 8016cc8:	429d      	cmp	r5, r3
 8016cca:	461a      	mov	r2, r3
 8016ccc:	d30b      	bcc.n	8016ce6 <quorem+0x100>
 8016cce:	613c      	str	r4, [r7, #16]
 8016cd0:	3601      	adds	r6, #1
 8016cd2:	4630      	mov	r0, r6
 8016cd4:	b003      	add	sp, #12
 8016cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cda:	6812      	ldr	r2, [r2, #0]
 8016cdc:	3b04      	subs	r3, #4
 8016cde:	2a00      	cmp	r2, #0
 8016ce0:	d1cb      	bne.n	8016c7a <quorem+0x94>
 8016ce2:	3c01      	subs	r4, #1
 8016ce4:	e7c6      	b.n	8016c74 <quorem+0x8e>
 8016ce6:	6812      	ldr	r2, [r2, #0]
 8016ce8:	3b04      	subs	r3, #4
 8016cea:	2a00      	cmp	r2, #0
 8016cec:	d1ef      	bne.n	8016cce <quorem+0xe8>
 8016cee:	3c01      	subs	r4, #1
 8016cf0:	e7ea      	b.n	8016cc8 <quorem+0xe2>
 8016cf2:	2000      	movs	r0, #0
 8016cf4:	e7ee      	b.n	8016cd4 <quorem+0xee>
	...

08016cf8 <_dtoa_r>:
 8016cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cfc:	ed2d 8b02 	vpush	{d8}
 8016d00:	69c7      	ldr	r7, [r0, #28]
 8016d02:	b091      	sub	sp, #68	@ 0x44
 8016d04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016d08:	ec55 4b10 	vmov	r4, r5, d0
 8016d0c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8016d0e:	9107      	str	r1, [sp, #28]
 8016d10:	4681      	mov	r9, r0
 8016d12:	9209      	str	r2, [sp, #36]	@ 0x24
 8016d14:	930d      	str	r3, [sp, #52]	@ 0x34
 8016d16:	b97f      	cbnz	r7, 8016d38 <_dtoa_r+0x40>
 8016d18:	2010      	movs	r0, #16
 8016d1a:	f000 fd8d 	bl	8017838 <malloc>
 8016d1e:	4602      	mov	r2, r0
 8016d20:	f8c9 001c 	str.w	r0, [r9, #28]
 8016d24:	b920      	cbnz	r0, 8016d30 <_dtoa_r+0x38>
 8016d26:	4ba0      	ldr	r3, [pc, #640]	@ (8016fa8 <_dtoa_r+0x2b0>)
 8016d28:	21ef      	movs	r1, #239	@ 0xef
 8016d2a:	48a0      	ldr	r0, [pc, #640]	@ (8016fac <_dtoa_r+0x2b4>)
 8016d2c:	f001 fc3e 	bl	80185ac <__assert_func>
 8016d30:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016d34:	6007      	str	r7, [r0, #0]
 8016d36:	60c7      	str	r7, [r0, #12]
 8016d38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016d3c:	6819      	ldr	r1, [r3, #0]
 8016d3e:	b159      	cbz	r1, 8016d58 <_dtoa_r+0x60>
 8016d40:	685a      	ldr	r2, [r3, #4]
 8016d42:	604a      	str	r2, [r1, #4]
 8016d44:	2301      	movs	r3, #1
 8016d46:	4093      	lsls	r3, r2
 8016d48:	608b      	str	r3, [r1, #8]
 8016d4a:	4648      	mov	r0, r9
 8016d4c:	f000 fe6a 	bl	8017a24 <_Bfree>
 8016d50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016d54:	2200      	movs	r2, #0
 8016d56:	601a      	str	r2, [r3, #0]
 8016d58:	1e2b      	subs	r3, r5, #0
 8016d5a:	bfbb      	ittet	lt
 8016d5c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016d60:	9303      	strlt	r3, [sp, #12]
 8016d62:	2300      	movge	r3, #0
 8016d64:	2201      	movlt	r2, #1
 8016d66:	bfac      	ite	ge
 8016d68:	6033      	strge	r3, [r6, #0]
 8016d6a:	6032      	strlt	r2, [r6, #0]
 8016d6c:	4b90      	ldr	r3, [pc, #576]	@ (8016fb0 <_dtoa_r+0x2b8>)
 8016d6e:	9e03      	ldr	r6, [sp, #12]
 8016d70:	43b3      	bics	r3, r6
 8016d72:	d110      	bne.n	8016d96 <_dtoa_r+0x9e>
 8016d74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016d76:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016d7a:	6013      	str	r3, [r2, #0]
 8016d7c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8016d80:	4323      	orrs	r3, r4
 8016d82:	f000 84de 	beq.w	8017742 <_dtoa_r+0xa4a>
 8016d86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016d88:	4f8a      	ldr	r7, [pc, #552]	@ (8016fb4 <_dtoa_r+0x2bc>)
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	f000 84e0 	beq.w	8017750 <_dtoa_r+0xa58>
 8016d90:	1cfb      	adds	r3, r7, #3
 8016d92:	f000 bcdb 	b.w	801774c <_dtoa_r+0xa54>
 8016d96:	ed9d 8b02 	vldr	d8, [sp, #8]
 8016d9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016da2:	d10a      	bne.n	8016dba <_dtoa_r+0xc2>
 8016da4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016da6:	2301      	movs	r3, #1
 8016da8:	6013      	str	r3, [r2, #0]
 8016daa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016dac:	b113      	cbz	r3, 8016db4 <_dtoa_r+0xbc>
 8016dae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016db0:	4b81      	ldr	r3, [pc, #516]	@ (8016fb8 <_dtoa_r+0x2c0>)
 8016db2:	6013      	str	r3, [r2, #0]
 8016db4:	4f81      	ldr	r7, [pc, #516]	@ (8016fbc <_dtoa_r+0x2c4>)
 8016db6:	f000 bccb 	b.w	8017750 <_dtoa_r+0xa58>
 8016dba:	aa0e      	add	r2, sp, #56	@ 0x38
 8016dbc:	a90f      	add	r1, sp, #60	@ 0x3c
 8016dbe:	4648      	mov	r0, r9
 8016dc0:	eeb0 0b48 	vmov.f64	d0, d8
 8016dc4:	f001 f918 	bl	8017ff8 <__d2b>
 8016dc8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8016dcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016dce:	9001      	str	r0, [sp, #4]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d045      	beq.n	8016e60 <_dtoa_r+0x168>
 8016dd4:	eeb0 7b48 	vmov.f64	d7, d8
 8016dd8:	ee18 1a90 	vmov	r1, s17
 8016ddc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016de0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8016de4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8016de8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016dec:	2500      	movs	r5, #0
 8016dee:	ee07 1a90 	vmov	s15, r1
 8016df2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8016df6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016f90 <_dtoa_r+0x298>
 8016dfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016dfe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8016f98 <_dtoa_r+0x2a0>
 8016e02:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016e06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016fa0 <_dtoa_r+0x2a8>
 8016e0a:	ee07 3a90 	vmov	s15, r3
 8016e0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8016e12:	eeb0 7b46 	vmov.f64	d7, d6
 8016e16:	eea4 7b05 	vfma.f64	d7, d4, d5
 8016e1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8016e1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8016e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e26:	ee16 8a90 	vmov	r8, s13
 8016e2a:	d508      	bpl.n	8016e3e <_dtoa_r+0x146>
 8016e2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016e30:	eeb4 6b47 	vcmp.f64	d6, d7
 8016e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e38:	bf18      	it	ne
 8016e3a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8016e3e:	f1b8 0f16 	cmp.w	r8, #22
 8016e42:	d82b      	bhi.n	8016e9c <_dtoa_r+0x1a4>
 8016e44:	495e      	ldr	r1, [pc, #376]	@ (8016fc0 <_dtoa_r+0x2c8>)
 8016e46:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8016e4a:	ed91 7b00 	vldr	d7, [r1]
 8016e4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e56:	d501      	bpl.n	8016e5c <_dtoa_r+0x164>
 8016e58:	f108 38ff 	add.w	r8, r8, #4294967295
 8016e5c:	2100      	movs	r1, #0
 8016e5e:	e01e      	b.n	8016e9e <_dtoa_r+0x1a6>
 8016e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e62:	4413      	add	r3, r2
 8016e64:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8016e68:	2920      	cmp	r1, #32
 8016e6a:	bfc1      	itttt	gt
 8016e6c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8016e70:	408e      	lslgt	r6, r1
 8016e72:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8016e76:	fa24 f101 	lsrgt.w	r1, r4, r1
 8016e7a:	bfd6      	itet	le
 8016e7c:	f1c1 0120 	rsble	r1, r1, #32
 8016e80:	4331      	orrgt	r1, r6
 8016e82:	fa04 f101 	lslle.w	r1, r4, r1
 8016e86:	ee07 1a90 	vmov	s15, r1
 8016e8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016e8e:	3b01      	subs	r3, #1
 8016e90:	ee17 1a90 	vmov	r1, s15
 8016e94:	2501      	movs	r5, #1
 8016e96:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8016e9a:	e7a8      	b.n	8016dee <_dtoa_r+0xf6>
 8016e9c:	2101      	movs	r1, #1
 8016e9e:	1ad2      	subs	r2, r2, r3
 8016ea0:	1e53      	subs	r3, r2, #1
 8016ea2:	9306      	str	r3, [sp, #24]
 8016ea4:	bf45      	ittet	mi
 8016ea6:	f1c2 0301 	rsbmi	r3, r2, #1
 8016eaa:	9305      	strmi	r3, [sp, #20]
 8016eac:	2300      	movpl	r3, #0
 8016eae:	2300      	movmi	r3, #0
 8016eb0:	bf4c      	ite	mi
 8016eb2:	9306      	strmi	r3, [sp, #24]
 8016eb4:	9305      	strpl	r3, [sp, #20]
 8016eb6:	f1b8 0f00 	cmp.w	r8, #0
 8016eba:	910c      	str	r1, [sp, #48]	@ 0x30
 8016ebc:	db18      	blt.n	8016ef0 <_dtoa_r+0x1f8>
 8016ebe:	9b06      	ldr	r3, [sp, #24]
 8016ec0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8016ec4:	4443      	add	r3, r8
 8016ec6:	9306      	str	r3, [sp, #24]
 8016ec8:	2300      	movs	r3, #0
 8016eca:	9a07      	ldr	r2, [sp, #28]
 8016ecc:	2a09      	cmp	r2, #9
 8016ece:	d849      	bhi.n	8016f64 <_dtoa_r+0x26c>
 8016ed0:	2a05      	cmp	r2, #5
 8016ed2:	bfc4      	itt	gt
 8016ed4:	3a04      	subgt	r2, #4
 8016ed6:	9207      	strgt	r2, [sp, #28]
 8016ed8:	9a07      	ldr	r2, [sp, #28]
 8016eda:	f1a2 0202 	sub.w	r2, r2, #2
 8016ede:	bfcc      	ite	gt
 8016ee0:	2400      	movgt	r4, #0
 8016ee2:	2401      	movle	r4, #1
 8016ee4:	2a03      	cmp	r2, #3
 8016ee6:	d848      	bhi.n	8016f7a <_dtoa_r+0x282>
 8016ee8:	e8df f002 	tbb	[pc, r2]
 8016eec:	3a2c2e0b 	.word	0x3a2c2e0b
 8016ef0:	9b05      	ldr	r3, [sp, #20]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	eba3 0308 	sub.w	r3, r3, r8
 8016ef8:	9305      	str	r3, [sp, #20]
 8016efa:	920a      	str	r2, [sp, #40]	@ 0x28
 8016efc:	f1c8 0300 	rsb	r3, r8, #0
 8016f00:	e7e3      	b.n	8016eca <_dtoa_r+0x1d2>
 8016f02:	2200      	movs	r2, #0
 8016f04:	9208      	str	r2, [sp, #32]
 8016f06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016f08:	2a00      	cmp	r2, #0
 8016f0a:	dc39      	bgt.n	8016f80 <_dtoa_r+0x288>
 8016f0c:	f04f 0b01 	mov.w	fp, #1
 8016f10:	46da      	mov	sl, fp
 8016f12:	465a      	mov	r2, fp
 8016f14:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016f18:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8016f1c:	2100      	movs	r1, #0
 8016f1e:	2004      	movs	r0, #4
 8016f20:	f100 0614 	add.w	r6, r0, #20
 8016f24:	4296      	cmp	r6, r2
 8016f26:	d930      	bls.n	8016f8a <_dtoa_r+0x292>
 8016f28:	6079      	str	r1, [r7, #4]
 8016f2a:	4648      	mov	r0, r9
 8016f2c:	9304      	str	r3, [sp, #16]
 8016f2e:	f000 fd39 	bl	80179a4 <_Balloc>
 8016f32:	9b04      	ldr	r3, [sp, #16]
 8016f34:	4607      	mov	r7, r0
 8016f36:	2800      	cmp	r0, #0
 8016f38:	d146      	bne.n	8016fc8 <_dtoa_r+0x2d0>
 8016f3a:	4b22      	ldr	r3, [pc, #136]	@ (8016fc4 <_dtoa_r+0x2cc>)
 8016f3c:	4602      	mov	r2, r0
 8016f3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8016f42:	e6f2      	b.n	8016d2a <_dtoa_r+0x32>
 8016f44:	2201      	movs	r2, #1
 8016f46:	e7dd      	b.n	8016f04 <_dtoa_r+0x20c>
 8016f48:	2200      	movs	r2, #0
 8016f4a:	9208      	str	r2, [sp, #32]
 8016f4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016f4e:	eb08 0b02 	add.w	fp, r8, r2
 8016f52:	f10b 0a01 	add.w	sl, fp, #1
 8016f56:	4652      	mov	r2, sl
 8016f58:	2a01      	cmp	r2, #1
 8016f5a:	bfb8      	it	lt
 8016f5c:	2201      	movlt	r2, #1
 8016f5e:	e7db      	b.n	8016f18 <_dtoa_r+0x220>
 8016f60:	2201      	movs	r2, #1
 8016f62:	e7f2      	b.n	8016f4a <_dtoa_r+0x252>
 8016f64:	2401      	movs	r4, #1
 8016f66:	2200      	movs	r2, #0
 8016f68:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8016f6c:	f04f 3bff 	mov.w	fp, #4294967295
 8016f70:	2100      	movs	r1, #0
 8016f72:	46da      	mov	sl, fp
 8016f74:	2212      	movs	r2, #18
 8016f76:	9109      	str	r1, [sp, #36]	@ 0x24
 8016f78:	e7ce      	b.n	8016f18 <_dtoa_r+0x220>
 8016f7a:	2201      	movs	r2, #1
 8016f7c:	9208      	str	r2, [sp, #32]
 8016f7e:	e7f5      	b.n	8016f6c <_dtoa_r+0x274>
 8016f80:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8016f84:	46da      	mov	sl, fp
 8016f86:	465a      	mov	r2, fp
 8016f88:	e7c6      	b.n	8016f18 <_dtoa_r+0x220>
 8016f8a:	3101      	adds	r1, #1
 8016f8c:	0040      	lsls	r0, r0, #1
 8016f8e:	e7c7      	b.n	8016f20 <_dtoa_r+0x228>
 8016f90:	636f4361 	.word	0x636f4361
 8016f94:	3fd287a7 	.word	0x3fd287a7
 8016f98:	8b60c8b3 	.word	0x8b60c8b3
 8016f9c:	3fc68a28 	.word	0x3fc68a28
 8016fa0:	509f79fb 	.word	0x509f79fb
 8016fa4:	3fd34413 	.word	0x3fd34413
 8016fa8:	0801923d 	.word	0x0801923d
 8016fac:	08019254 	.word	0x08019254
 8016fb0:	7ff00000 	.word	0x7ff00000
 8016fb4:	08019239 	.word	0x08019239
 8016fb8:	0801920d 	.word	0x0801920d
 8016fbc:	0801920c 	.word	0x0801920c
 8016fc0:	08019350 	.word	0x08019350
 8016fc4:	080192ac 	.word	0x080192ac
 8016fc8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8016fcc:	f1ba 0f0e 	cmp.w	sl, #14
 8016fd0:	6010      	str	r0, [r2, #0]
 8016fd2:	d86f      	bhi.n	80170b4 <_dtoa_r+0x3bc>
 8016fd4:	2c00      	cmp	r4, #0
 8016fd6:	d06d      	beq.n	80170b4 <_dtoa_r+0x3bc>
 8016fd8:	f1b8 0f00 	cmp.w	r8, #0
 8016fdc:	f340 80c2 	ble.w	8017164 <_dtoa_r+0x46c>
 8016fe0:	4aca      	ldr	r2, [pc, #808]	@ (801730c <_dtoa_r+0x614>)
 8016fe2:	f008 010f 	and.w	r1, r8, #15
 8016fe6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016fea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8016fee:	ed92 7b00 	vldr	d7, [r2]
 8016ff2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8016ff6:	f000 80a9 	beq.w	801714c <_dtoa_r+0x454>
 8016ffa:	4ac5      	ldr	r2, [pc, #788]	@ (8017310 <_dtoa_r+0x618>)
 8016ffc:	ed92 6b08 	vldr	d6, [r2, #32]
 8017000:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8017004:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017008:	f001 010f 	and.w	r1, r1, #15
 801700c:	2203      	movs	r2, #3
 801700e:	48c0      	ldr	r0, [pc, #768]	@ (8017310 <_dtoa_r+0x618>)
 8017010:	2900      	cmp	r1, #0
 8017012:	f040 809d 	bne.w	8017150 <_dtoa_r+0x458>
 8017016:	ed9d 6b02 	vldr	d6, [sp, #8]
 801701a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801701e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017022:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017024:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017028:	2900      	cmp	r1, #0
 801702a:	f000 80c1 	beq.w	80171b0 <_dtoa_r+0x4b8>
 801702e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8017032:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801703a:	f140 80b9 	bpl.w	80171b0 <_dtoa_r+0x4b8>
 801703e:	f1ba 0f00 	cmp.w	sl, #0
 8017042:	f000 80b5 	beq.w	80171b0 <_dtoa_r+0x4b8>
 8017046:	f1bb 0f00 	cmp.w	fp, #0
 801704a:	dd31      	ble.n	80170b0 <_dtoa_r+0x3b8>
 801704c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8017050:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017054:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017058:	f108 31ff 	add.w	r1, r8, #4294967295
 801705c:	9104      	str	r1, [sp, #16]
 801705e:	3201      	adds	r2, #1
 8017060:	465c      	mov	r4, fp
 8017062:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017066:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801706a:	ee07 2a90 	vmov	s15, r2
 801706e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017072:	eea7 5b06 	vfma.f64	d5, d7, d6
 8017076:	ee15 2a90 	vmov	r2, s11
 801707a:	ec51 0b15 	vmov	r0, r1, d5
 801707e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8017082:	2c00      	cmp	r4, #0
 8017084:	f040 8098 	bne.w	80171b8 <_dtoa_r+0x4c0>
 8017088:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801708c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017090:	ec41 0b17 	vmov	d7, r0, r1
 8017094:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801709c:	f300 8261 	bgt.w	8017562 <_dtoa_r+0x86a>
 80170a0:	eeb1 7b47 	vneg.f64	d7, d7
 80170a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80170a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ac:	f100 80f5 	bmi.w	801729a <_dtoa_r+0x5a2>
 80170b0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80170b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80170b6:	2a00      	cmp	r2, #0
 80170b8:	f2c0 812c 	blt.w	8017314 <_dtoa_r+0x61c>
 80170bc:	f1b8 0f0e 	cmp.w	r8, #14
 80170c0:	f300 8128 	bgt.w	8017314 <_dtoa_r+0x61c>
 80170c4:	4b91      	ldr	r3, [pc, #580]	@ (801730c <_dtoa_r+0x614>)
 80170c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80170ca:	ed93 6b00 	vldr	d6, [r3]
 80170ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	da03      	bge.n	80170dc <_dtoa_r+0x3e4>
 80170d4:	f1ba 0f00 	cmp.w	sl, #0
 80170d8:	f340 80d2 	ble.w	8017280 <_dtoa_r+0x588>
 80170dc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80170e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80170e4:	463e      	mov	r6, r7
 80170e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80170ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80170ee:	ee15 3a10 	vmov	r3, s10
 80170f2:	3330      	adds	r3, #48	@ 0x30
 80170f4:	f806 3b01 	strb.w	r3, [r6], #1
 80170f8:	1bf3      	subs	r3, r6, r7
 80170fa:	459a      	cmp	sl, r3
 80170fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8017100:	eea3 7b46 	vfms.f64	d7, d3, d6
 8017104:	f040 80f8 	bne.w	80172f8 <_dtoa_r+0x600>
 8017108:	ee37 7b07 	vadd.f64	d7, d7, d7
 801710c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017114:	f300 80dd 	bgt.w	80172d2 <_dtoa_r+0x5da>
 8017118:	eeb4 7b46 	vcmp.f64	d7, d6
 801711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017120:	d104      	bne.n	801712c <_dtoa_r+0x434>
 8017122:	ee15 3a10 	vmov	r3, s10
 8017126:	07db      	lsls	r3, r3, #31
 8017128:	f100 80d3 	bmi.w	80172d2 <_dtoa_r+0x5da>
 801712c:	9901      	ldr	r1, [sp, #4]
 801712e:	4648      	mov	r0, r9
 8017130:	f000 fc78 	bl	8017a24 <_Bfree>
 8017134:	2300      	movs	r3, #0
 8017136:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017138:	7033      	strb	r3, [r6, #0]
 801713a:	f108 0301 	add.w	r3, r8, #1
 801713e:	6013      	str	r3, [r2, #0]
 8017140:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017142:	2b00      	cmp	r3, #0
 8017144:	f000 8304 	beq.w	8017750 <_dtoa_r+0xa58>
 8017148:	601e      	str	r6, [r3, #0]
 801714a:	e301      	b.n	8017750 <_dtoa_r+0xa58>
 801714c:	2202      	movs	r2, #2
 801714e:	e75e      	b.n	801700e <_dtoa_r+0x316>
 8017150:	07cc      	lsls	r4, r1, #31
 8017152:	d504      	bpl.n	801715e <_dtoa_r+0x466>
 8017154:	ed90 6b00 	vldr	d6, [r0]
 8017158:	3201      	adds	r2, #1
 801715a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801715e:	1049      	asrs	r1, r1, #1
 8017160:	3008      	adds	r0, #8
 8017162:	e755      	b.n	8017010 <_dtoa_r+0x318>
 8017164:	d022      	beq.n	80171ac <_dtoa_r+0x4b4>
 8017166:	f1c8 0100 	rsb	r1, r8, #0
 801716a:	4a68      	ldr	r2, [pc, #416]	@ (801730c <_dtoa_r+0x614>)
 801716c:	f001 000f 	and.w	r0, r1, #15
 8017170:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017174:	ed92 7b00 	vldr	d7, [r2]
 8017178:	ee28 7b07 	vmul.f64	d7, d8, d7
 801717c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017180:	4863      	ldr	r0, [pc, #396]	@ (8017310 <_dtoa_r+0x618>)
 8017182:	1109      	asrs	r1, r1, #4
 8017184:	2400      	movs	r4, #0
 8017186:	2202      	movs	r2, #2
 8017188:	b929      	cbnz	r1, 8017196 <_dtoa_r+0x49e>
 801718a:	2c00      	cmp	r4, #0
 801718c:	f43f af49 	beq.w	8017022 <_dtoa_r+0x32a>
 8017190:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017194:	e745      	b.n	8017022 <_dtoa_r+0x32a>
 8017196:	07ce      	lsls	r6, r1, #31
 8017198:	d505      	bpl.n	80171a6 <_dtoa_r+0x4ae>
 801719a:	ed90 6b00 	vldr	d6, [r0]
 801719e:	3201      	adds	r2, #1
 80171a0:	2401      	movs	r4, #1
 80171a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80171a6:	1049      	asrs	r1, r1, #1
 80171a8:	3008      	adds	r0, #8
 80171aa:	e7ed      	b.n	8017188 <_dtoa_r+0x490>
 80171ac:	2202      	movs	r2, #2
 80171ae:	e738      	b.n	8017022 <_dtoa_r+0x32a>
 80171b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80171b4:	4654      	mov	r4, sl
 80171b6:	e754      	b.n	8017062 <_dtoa_r+0x36a>
 80171b8:	4a54      	ldr	r2, [pc, #336]	@ (801730c <_dtoa_r+0x614>)
 80171ba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80171be:	ed12 4b02 	vldr	d4, [r2, #-8]
 80171c2:	9a08      	ldr	r2, [sp, #32]
 80171c4:	ec41 0b17 	vmov	d7, r0, r1
 80171c8:	443c      	add	r4, r7
 80171ca:	b34a      	cbz	r2, 8017220 <_dtoa_r+0x528>
 80171cc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80171d0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80171d4:	463e      	mov	r6, r7
 80171d6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80171da:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80171de:	ee35 7b47 	vsub.f64	d7, d5, d7
 80171e2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80171e6:	ee14 2a90 	vmov	r2, s9
 80171ea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80171ee:	3230      	adds	r2, #48	@ 0x30
 80171f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80171f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80171f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171fc:	f806 2b01 	strb.w	r2, [r6], #1
 8017200:	d438      	bmi.n	8017274 <_dtoa_r+0x57c>
 8017202:	ee32 5b46 	vsub.f64	d5, d2, d6
 8017206:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801720a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801720e:	d462      	bmi.n	80172d6 <_dtoa_r+0x5de>
 8017210:	42a6      	cmp	r6, r4
 8017212:	f43f af4d 	beq.w	80170b0 <_dtoa_r+0x3b8>
 8017216:	ee27 7b03 	vmul.f64	d7, d7, d3
 801721a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801721e:	e7e0      	b.n	80171e2 <_dtoa_r+0x4ea>
 8017220:	4621      	mov	r1, r4
 8017222:	463e      	mov	r6, r7
 8017224:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017228:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801722c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017230:	ee14 2a90 	vmov	r2, s9
 8017234:	3230      	adds	r2, #48	@ 0x30
 8017236:	f806 2b01 	strb.w	r2, [r6], #1
 801723a:	42a6      	cmp	r6, r4
 801723c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017240:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017244:	d119      	bne.n	801727a <_dtoa_r+0x582>
 8017246:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801724a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801724e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8017252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017256:	dc3e      	bgt.n	80172d6 <_dtoa_r+0x5de>
 8017258:	ee35 5b47 	vsub.f64	d5, d5, d7
 801725c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8017260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017264:	f57f af24 	bpl.w	80170b0 <_dtoa_r+0x3b8>
 8017268:	460e      	mov	r6, r1
 801726a:	3901      	subs	r1, #1
 801726c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017270:	2b30      	cmp	r3, #48	@ 0x30
 8017272:	d0f9      	beq.n	8017268 <_dtoa_r+0x570>
 8017274:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017278:	e758      	b.n	801712c <_dtoa_r+0x434>
 801727a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801727e:	e7d5      	b.n	801722c <_dtoa_r+0x534>
 8017280:	d10b      	bne.n	801729a <_dtoa_r+0x5a2>
 8017282:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8017286:	ee26 6b07 	vmul.f64	d6, d6, d7
 801728a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801728e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017296:	f2c0 8161 	blt.w	801755c <_dtoa_r+0x864>
 801729a:	2400      	movs	r4, #0
 801729c:	4625      	mov	r5, r4
 801729e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172a0:	43db      	mvns	r3, r3
 80172a2:	9304      	str	r3, [sp, #16]
 80172a4:	463e      	mov	r6, r7
 80172a6:	f04f 0800 	mov.w	r8, #0
 80172aa:	4621      	mov	r1, r4
 80172ac:	4648      	mov	r0, r9
 80172ae:	f000 fbb9 	bl	8017a24 <_Bfree>
 80172b2:	2d00      	cmp	r5, #0
 80172b4:	d0de      	beq.n	8017274 <_dtoa_r+0x57c>
 80172b6:	f1b8 0f00 	cmp.w	r8, #0
 80172ba:	d005      	beq.n	80172c8 <_dtoa_r+0x5d0>
 80172bc:	45a8      	cmp	r8, r5
 80172be:	d003      	beq.n	80172c8 <_dtoa_r+0x5d0>
 80172c0:	4641      	mov	r1, r8
 80172c2:	4648      	mov	r0, r9
 80172c4:	f000 fbae 	bl	8017a24 <_Bfree>
 80172c8:	4629      	mov	r1, r5
 80172ca:	4648      	mov	r0, r9
 80172cc:	f000 fbaa 	bl	8017a24 <_Bfree>
 80172d0:	e7d0      	b.n	8017274 <_dtoa_r+0x57c>
 80172d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80172d6:	4633      	mov	r3, r6
 80172d8:	461e      	mov	r6, r3
 80172da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80172de:	2a39      	cmp	r2, #57	@ 0x39
 80172e0:	d106      	bne.n	80172f0 <_dtoa_r+0x5f8>
 80172e2:	429f      	cmp	r7, r3
 80172e4:	d1f8      	bne.n	80172d8 <_dtoa_r+0x5e0>
 80172e6:	9a04      	ldr	r2, [sp, #16]
 80172e8:	3201      	adds	r2, #1
 80172ea:	9204      	str	r2, [sp, #16]
 80172ec:	2230      	movs	r2, #48	@ 0x30
 80172ee:	703a      	strb	r2, [r7, #0]
 80172f0:	781a      	ldrb	r2, [r3, #0]
 80172f2:	3201      	adds	r2, #1
 80172f4:	701a      	strb	r2, [r3, #0]
 80172f6:	e7bd      	b.n	8017274 <_dtoa_r+0x57c>
 80172f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80172fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017304:	f47f aeef 	bne.w	80170e6 <_dtoa_r+0x3ee>
 8017308:	e710      	b.n	801712c <_dtoa_r+0x434>
 801730a:	bf00      	nop
 801730c:	08019350 	.word	0x08019350
 8017310:	08019328 	.word	0x08019328
 8017314:	9908      	ldr	r1, [sp, #32]
 8017316:	2900      	cmp	r1, #0
 8017318:	f000 80e3 	beq.w	80174e2 <_dtoa_r+0x7ea>
 801731c:	9907      	ldr	r1, [sp, #28]
 801731e:	2901      	cmp	r1, #1
 8017320:	f300 80c8 	bgt.w	80174b4 <_dtoa_r+0x7bc>
 8017324:	2d00      	cmp	r5, #0
 8017326:	f000 80c1 	beq.w	80174ac <_dtoa_r+0x7b4>
 801732a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801732e:	9e05      	ldr	r6, [sp, #20]
 8017330:	461c      	mov	r4, r3
 8017332:	9304      	str	r3, [sp, #16]
 8017334:	9b05      	ldr	r3, [sp, #20]
 8017336:	4413      	add	r3, r2
 8017338:	9305      	str	r3, [sp, #20]
 801733a:	9b06      	ldr	r3, [sp, #24]
 801733c:	2101      	movs	r1, #1
 801733e:	4413      	add	r3, r2
 8017340:	4648      	mov	r0, r9
 8017342:	9306      	str	r3, [sp, #24]
 8017344:	f000 fc22 	bl	8017b8c <__i2b>
 8017348:	9b04      	ldr	r3, [sp, #16]
 801734a:	4605      	mov	r5, r0
 801734c:	b166      	cbz	r6, 8017368 <_dtoa_r+0x670>
 801734e:	9a06      	ldr	r2, [sp, #24]
 8017350:	2a00      	cmp	r2, #0
 8017352:	dd09      	ble.n	8017368 <_dtoa_r+0x670>
 8017354:	42b2      	cmp	r2, r6
 8017356:	9905      	ldr	r1, [sp, #20]
 8017358:	bfa8      	it	ge
 801735a:	4632      	movge	r2, r6
 801735c:	1a89      	subs	r1, r1, r2
 801735e:	9105      	str	r1, [sp, #20]
 8017360:	9906      	ldr	r1, [sp, #24]
 8017362:	1ab6      	subs	r6, r6, r2
 8017364:	1a8a      	subs	r2, r1, r2
 8017366:	9206      	str	r2, [sp, #24]
 8017368:	b1fb      	cbz	r3, 80173aa <_dtoa_r+0x6b2>
 801736a:	9a08      	ldr	r2, [sp, #32]
 801736c:	2a00      	cmp	r2, #0
 801736e:	f000 80bc 	beq.w	80174ea <_dtoa_r+0x7f2>
 8017372:	b19c      	cbz	r4, 801739c <_dtoa_r+0x6a4>
 8017374:	4629      	mov	r1, r5
 8017376:	4622      	mov	r2, r4
 8017378:	4648      	mov	r0, r9
 801737a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801737c:	f000 fcc6 	bl	8017d0c <__pow5mult>
 8017380:	9a01      	ldr	r2, [sp, #4]
 8017382:	4601      	mov	r1, r0
 8017384:	4605      	mov	r5, r0
 8017386:	4648      	mov	r0, r9
 8017388:	f000 fc16 	bl	8017bb8 <__multiply>
 801738c:	9901      	ldr	r1, [sp, #4]
 801738e:	9004      	str	r0, [sp, #16]
 8017390:	4648      	mov	r0, r9
 8017392:	f000 fb47 	bl	8017a24 <_Bfree>
 8017396:	9a04      	ldr	r2, [sp, #16]
 8017398:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801739a:	9201      	str	r2, [sp, #4]
 801739c:	1b1a      	subs	r2, r3, r4
 801739e:	d004      	beq.n	80173aa <_dtoa_r+0x6b2>
 80173a0:	9901      	ldr	r1, [sp, #4]
 80173a2:	4648      	mov	r0, r9
 80173a4:	f000 fcb2 	bl	8017d0c <__pow5mult>
 80173a8:	9001      	str	r0, [sp, #4]
 80173aa:	2101      	movs	r1, #1
 80173ac:	4648      	mov	r0, r9
 80173ae:	f000 fbed 	bl	8017b8c <__i2b>
 80173b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80173b4:	4604      	mov	r4, r0
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	f000 81d0 	beq.w	801775c <_dtoa_r+0xa64>
 80173bc:	461a      	mov	r2, r3
 80173be:	4601      	mov	r1, r0
 80173c0:	4648      	mov	r0, r9
 80173c2:	f000 fca3 	bl	8017d0c <__pow5mult>
 80173c6:	9b07      	ldr	r3, [sp, #28]
 80173c8:	2b01      	cmp	r3, #1
 80173ca:	4604      	mov	r4, r0
 80173cc:	f300 8095 	bgt.w	80174fa <_dtoa_r+0x802>
 80173d0:	9b02      	ldr	r3, [sp, #8]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	f040 808b 	bne.w	80174ee <_dtoa_r+0x7f6>
 80173d8:	9b03      	ldr	r3, [sp, #12]
 80173da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80173de:	2a00      	cmp	r2, #0
 80173e0:	f040 8087 	bne.w	80174f2 <_dtoa_r+0x7fa>
 80173e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80173e8:	0d12      	lsrs	r2, r2, #20
 80173ea:	0512      	lsls	r2, r2, #20
 80173ec:	2a00      	cmp	r2, #0
 80173ee:	f000 8082 	beq.w	80174f6 <_dtoa_r+0x7fe>
 80173f2:	9b05      	ldr	r3, [sp, #20]
 80173f4:	3301      	adds	r3, #1
 80173f6:	9305      	str	r3, [sp, #20]
 80173f8:	9b06      	ldr	r3, [sp, #24]
 80173fa:	3301      	adds	r3, #1
 80173fc:	9306      	str	r3, [sp, #24]
 80173fe:	2301      	movs	r3, #1
 8017400:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017404:	2b00      	cmp	r3, #0
 8017406:	f000 81af 	beq.w	8017768 <_dtoa_r+0xa70>
 801740a:	6922      	ldr	r2, [r4, #16]
 801740c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017410:	6910      	ldr	r0, [r2, #16]
 8017412:	f000 fb6f 	bl	8017af4 <__hi0bits>
 8017416:	f1c0 0020 	rsb	r0, r0, #32
 801741a:	9b06      	ldr	r3, [sp, #24]
 801741c:	4418      	add	r0, r3
 801741e:	f010 001f 	ands.w	r0, r0, #31
 8017422:	d076      	beq.n	8017512 <_dtoa_r+0x81a>
 8017424:	f1c0 0220 	rsb	r2, r0, #32
 8017428:	2a04      	cmp	r2, #4
 801742a:	dd69      	ble.n	8017500 <_dtoa_r+0x808>
 801742c:	9b05      	ldr	r3, [sp, #20]
 801742e:	f1c0 001c 	rsb	r0, r0, #28
 8017432:	4403      	add	r3, r0
 8017434:	9305      	str	r3, [sp, #20]
 8017436:	9b06      	ldr	r3, [sp, #24]
 8017438:	4406      	add	r6, r0
 801743a:	4403      	add	r3, r0
 801743c:	9306      	str	r3, [sp, #24]
 801743e:	9b05      	ldr	r3, [sp, #20]
 8017440:	2b00      	cmp	r3, #0
 8017442:	dd05      	ble.n	8017450 <_dtoa_r+0x758>
 8017444:	9901      	ldr	r1, [sp, #4]
 8017446:	461a      	mov	r2, r3
 8017448:	4648      	mov	r0, r9
 801744a:	f000 fcb9 	bl	8017dc0 <__lshift>
 801744e:	9001      	str	r0, [sp, #4]
 8017450:	9b06      	ldr	r3, [sp, #24]
 8017452:	2b00      	cmp	r3, #0
 8017454:	dd05      	ble.n	8017462 <_dtoa_r+0x76a>
 8017456:	4621      	mov	r1, r4
 8017458:	461a      	mov	r2, r3
 801745a:	4648      	mov	r0, r9
 801745c:	f000 fcb0 	bl	8017dc0 <__lshift>
 8017460:	4604      	mov	r4, r0
 8017462:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017464:	2b00      	cmp	r3, #0
 8017466:	d056      	beq.n	8017516 <_dtoa_r+0x81e>
 8017468:	9801      	ldr	r0, [sp, #4]
 801746a:	4621      	mov	r1, r4
 801746c:	f000 fd14 	bl	8017e98 <__mcmp>
 8017470:	2800      	cmp	r0, #0
 8017472:	da50      	bge.n	8017516 <_dtoa_r+0x81e>
 8017474:	f108 33ff 	add.w	r3, r8, #4294967295
 8017478:	9304      	str	r3, [sp, #16]
 801747a:	9901      	ldr	r1, [sp, #4]
 801747c:	2300      	movs	r3, #0
 801747e:	220a      	movs	r2, #10
 8017480:	4648      	mov	r0, r9
 8017482:	f000 faf1 	bl	8017a68 <__multadd>
 8017486:	9b08      	ldr	r3, [sp, #32]
 8017488:	9001      	str	r0, [sp, #4]
 801748a:	2b00      	cmp	r3, #0
 801748c:	f000 816e 	beq.w	801776c <_dtoa_r+0xa74>
 8017490:	4629      	mov	r1, r5
 8017492:	2300      	movs	r3, #0
 8017494:	220a      	movs	r2, #10
 8017496:	4648      	mov	r0, r9
 8017498:	f000 fae6 	bl	8017a68 <__multadd>
 801749c:	f1bb 0f00 	cmp.w	fp, #0
 80174a0:	4605      	mov	r5, r0
 80174a2:	dc64      	bgt.n	801756e <_dtoa_r+0x876>
 80174a4:	9b07      	ldr	r3, [sp, #28]
 80174a6:	2b02      	cmp	r3, #2
 80174a8:	dc3e      	bgt.n	8017528 <_dtoa_r+0x830>
 80174aa:	e060      	b.n	801756e <_dtoa_r+0x876>
 80174ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80174ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80174b2:	e73c      	b.n	801732e <_dtoa_r+0x636>
 80174b4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80174b8:	42a3      	cmp	r3, r4
 80174ba:	bfbf      	itttt	lt
 80174bc:	1ae2      	sublt	r2, r4, r3
 80174be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80174c0:	189b      	addlt	r3, r3, r2
 80174c2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80174c4:	bfae      	itee	ge
 80174c6:	1b1c      	subge	r4, r3, r4
 80174c8:	4623      	movlt	r3, r4
 80174ca:	2400      	movlt	r4, #0
 80174cc:	f1ba 0f00 	cmp.w	sl, #0
 80174d0:	bfb5      	itete	lt
 80174d2:	9a05      	ldrlt	r2, [sp, #20]
 80174d4:	9e05      	ldrge	r6, [sp, #20]
 80174d6:	eba2 060a 	sublt.w	r6, r2, sl
 80174da:	4652      	movge	r2, sl
 80174dc:	bfb8      	it	lt
 80174de:	2200      	movlt	r2, #0
 80174e0:	e727      	b.n	8017332 <_dtoa_r+0x63a>
 80174e2:	9e05      	ldr	r6, [sp, #20]
 80174e4:	9d08      	ldr	r5, [sp, #32]
 80174e6:	461c      	mov	r4, r3
 80174e8:	e730      	b.n	801734c <_dtoa_r+0x654>
 80174ea:	461a      	mov	r2, r3
 80174ec:	e758      	b.n	80173a0 <_dtoa_r+0x6a8>
 80174ee:	2300      	movs	r3, #0
 80174f0:	e786      	b.n	8017400 <_dtoa_r+0x708>
 80174f2:	9b02      	ldr	r3, [sp, #8]
 80174f4:	e784      	b.n	8017400 <_dtoa_r+0x708>
 80174f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80174f8:	e783      	b.n	8017402 <_dtoa_r+0x70a>
 80174fa:	2300      	movs	r3, #0
 80174fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80174fe:	e784      	b.n	801740a <_dtoa_r+0x712>
 8017500:	d09d      	beq.n	801743e <_dtoa_r+0x746>
 8017502:	9b05      	ldr	r3, [sp, #20]
 8017504:	321c      	adds	r2, #28
 8017506:	4413      	add	r3, r2
 8017508:	9305      	str	r3, [sp, #20]
 801750a:	9b06      	ldr	r3, [sp, #24]
 801750c:	4416      	add	r6, r2
 801750e:	4413      	add	r3, r2
 8017510:	e794      	b.n	801743c <_dtoa_r+0x744>
 8017512:	4602      	mov	r2, r0
 8017514:	e7f5      	b.n	8017502 <_dtoa_r+0x80a>
 8017516:	f1ba 0f00 	cmp.w	sl, #0
 801751a:	f8cd 8010 	str.w	r8, [sp, #16]
 801751e:	46d3      	mov	fp, sl
 8017520:	dc21      	bgt.n	8017566 <_dtoa_r+0x86e>
 8017522:	9b07      	ldr	r3, [sp, #28]
 8017524:	2b02      	cmp	r3, #2
 8017526:	dd1e      	ble.n	8017566 <_dtoa_r+0x86e>
 8017528:	f1bb 0f00 	cmp.w	fp, #0
 801752c:	f47f aeb7 	bne.w	801729e <_dtoa_r+0x5a6>
 8017530:	4621      	mov	r1, r4
 8017532:	465b      	mov	r3, fp
 8017534:	2205      	movs	r2, #5
 8017536:	4648      	mov	r0, r9
 8017538:	f000 fa96 	bl	8017a68 <__multadd>
 801753c:	4601      	mov	r1, r0
 801753e:	4604      	mov	r4, r0
 8017540:	9801      	ldr	r0, [sp, #4]
 8017542:	f000 fca9 	bl	8017e98 <__mcmp>
 8017546:	2800      	cmp	r0, #0
 8017548:	f77f aea9 	ble.w	801729e <_dtoa_r+0x5a6>
 801754c:	463e      	mov	r6, r7
 801754e:	2331      	movs	r3, #49	@ 0x31
 8017550:	f806 3b01 	strb.w	r3, [r6], #1
 8017554:	9b04      	ldr	r3, [sp, #16]
 8017556:	3301      	adds	r3, #1
 8017558:	9304      	str	r3, [sp, #16]
 801755a:	e6a4      	b.n	80172a6 <_dtoa_r+0x5ae>
 801755c:	f8cd 8010 	str.w	r8, [sp, #16]
 8017560:	4654      	mov	r4, sl
 8017562:	4625      	mov	r5, r4
 8017564:	e7f2      	b.n	801754c <_dtoa_r+0x854>
 8017566:	9b08      	ldr	r3, [sp, #32]
 8017568:	2b00      	cmp	r3, #0
 801756a:	f000 8103 	beq.w	8017774 <_dtoa_r+0xa7c>
 801756e:	2e00      	cmp	r6, #0
 8017570:	dd05      	ble.n	801757e <_dtoa_r+0x886>
 8017572:	4629      	mov	r1, r5
 8017574:	4632      	mov	r2, r6
 8017576:	4648      	mov	r0, r9
 8017578:	f000 fc22 	bl	8017dc0 <__lshift>
 801757c:	4605      	mov	r5, r0
 801757e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017580:	2b00      	cmp	r3, #0
 8017582:	d058      	beq.n	8017636 <_dtoa_r+0x93e>
 8017584:	6869      	ldr	r1, [r5, #4]
 8017586:	4648      	mov	r0, r9
 8017588:	f000 fa0c 	bl	80179a4 <_Balloc>
 801758c:	4606      	mov	r6, r0
 801758e:	b928      	cbnz	r0, 801759c <_dtoa_r+0x8a4>
 8017590:	4b82      	ldr	r3, [pc, #520]	@ (801779c <_dtoa_r+0xaa4>)
 8017592:	4602      	mov	r2, r0
 8017594:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017598:	f7ff bbc7 	b.w	8016d2a <_dtoa_r+0x32>
 801759c:	692a      	ldr	r2, [r5, #16]
 801759e:	3202      	adds	r2, #2
 80175a0:	0092      	lsls	r2, r2, #2
 80175a2:	f105 010c 	add.w	r1, r5, #12
 80175a6:	300c      	adds	r0, #12
 80175a8:	f7ff fb0f 	bl	8016bca <memcpy>
 80175ac:	2201      	movs	r2, #1
 80175ae:	4631      	mov	r1, r6
 80175b0:	4648      	mov	r0, r9
 80175b2:	f000 fc05 	bl	8017dc0 <__lshift>
 80175b6:	1c7b      	adds	r3, r7, #1
 80175b8:	9305      	str	r3, [sp, #20]
 80175ba:	eb07 030b 	add.w	r3, r7, fp
 80175be:	9309      	str	r3, [sp, #36]	@ 0x24
 80175c0:	9b02      	ldr	r3, [sp, #8]
 80175c2:	f003 0301 	and.w	r3, r3, #1
 80175c6:	46a8      	mov	r8, r5
 80175c8:	9308      	str	r3, [sp, #32]
 80175ca:	4605      	mov	r5, r0
 80175cc:	9b05      	ldr	r3, [sp, #20]
 80175ce:	9801      	ldr	r0, [sp, #4]
 80175d0:	4621      	mov	r1, r4
 80175d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80175d6:	f7ff fb06 	bl	8016be6 <quorem>
 80175da:	4641      	mov	r1, r8
 80175dc:	9002      	str	r0, [sp, #8]
 80175de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80175e2:	9801      	ldr	r0, [sp, #4]
 80175e4:	f000 fc58 	bl	8017e98 <__mcmp>
 80175e8:	462a      	mov	r2, r5
 80175ea:	9006      	str	r0, [sp, #24]
 80175ec:	4621      	mov	r1, r4
 80175ee:	4648      	mov	r0, r9
 80175f0:	f000 fc6e 	bl	8017ed0 <__mdiff>
 80175f4:	68c2      	ldr	r2, [r0, #12]
 80175f6:	4606      	mov	r6, r0
 80175f8:	b9fa      	cbnz	r2, 801763a <_dtoa_r+0x942>
 80175fa:	4601      	mov	r1, r0
 80175fc:	9801      	ldr	r0, [sp, #4]
 80175fe:	f000 fc4b 	bl	8017e98 <__mcmp>
 8017602:	4602      	mov	r2, r0
 8017604:	4631      	mov	r1, r6
 8017606:	4648      	mov	r0, r9
 8017608:	920a      	str	r2, [sp, #40]	@ 0x28
 801760a:	f000 fa0b 	bl	8017a24 <_Bfree>
 801760e:	9b07      	ldr	r3, [sp, #28]
 8017610:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017612:	9e05      	ldr	r6, [sp, #20]
 8017614:	ea43 0102 	orr.w	r1, r3, r2
 8017618:	9b08      	ldr	r3, [sp, #32]
 801761a:	4319      	orrs	r1, r3
 801761c:	d10f      	bne.n	801763e <_dtoa_r+0x946>
 801761e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8017622:	d028      	beq.n	8017676 <_dtoa_r+0x97e>
 8017624:	9b06      	ldr	r3, [sp, #24]
 8017626:	2b00      	cmp	r3, #0
 8017628:	dd02      	ble.n	8017630 <_dtoa_r+0x938>
 801762a:	9b02      	ldr	r3, [sp, #8]
 801762c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8017630:	f88b a000 	strb.w	sl, [fp]
 8017634:	e639      	b.n	80172aa <_dtoa_r+0x5b2>
 8017636:	4628      	mov	r0, r5
 8017638:	e7bd      	b.n	80175b6 <_dtoa_r+0x8be>
 801763a:	2201      	movs	r2, #1
 801763c:	e7e2      	b.n	8017604 <_dtoa_r+0x90c>
 801763e:	9b06      	ldr	r3, [sp, #24]
 8017640:	2b00      	cmp	r3, #0
 8017642:	db04      	blt.n	801764e <_dtoa_r+0x956>
 8017644:	9907      	ldr	r1, [sp, #28]
 8017646:	430b      	orrs	r3, r1
 8017648:	9908      	ldr	r1, [sp, #32]
 801764a:	430b      	orrs	r3, r1
 801764c:	d120      	bne.n	8017690 <_dtoa_r+0x998>
 801764e:	2a00      	cmp	r2, #0
 8017650:	ddee      	ble.n	8017630 <_dtoa_r+0x938>
 8017652:	9901      	ldr	r1, [sp, #4]
 8017654:	2201      	movs	r2, #1
 8017656:	4648      	mov	r0, r9
 8017658:	f000 fbb2 	bl	8017dc0 <__lshift>
 801765c:	4621      	mov	r1, r4
 801765e:	9001      	str	r0, [sp, #4]
 8017660:	f000 fc1a 	bl	8017e98 <__mcmp>
 8017664:	2800      	cmp	r0, #0
 8017666:	dc03      	bgt.n	8017670 <_dtoa_r+0x978>
 8017668:	d1e2      	bne.n	8017630 <_dtoa_r+0x938>
 801766a:	f01a 0f01 	tst.w	sl, #1
 801766e:	d0df      	beq.n	8017630 <_dtoa_r+0x938>
 8017670:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8017674:	d1d9      	bne.n	801762a <_dtoa_r+0x932>
 8017676:	2339      	movs	r3, #57	@ 0x39
 8017678:	f88b 3000 	strb.w	r3, [fp]
 801767c:	4633      	mov	r3, r6
 801767e:	461e      	mov	r6, r3
 8017680:	3b01      	subs	r3, #1
 8017682:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017686:	2a39      	cmp	r2, #57	@ 0x39
 8017688:	d053      	beq.n	8017732 <_dtoa_r+0xa3a>
 801768a:	3201      	adds	r2, #1
 801768c:	701a      	strb	r2, [r3, #0]
 801768e:	e60c      	b.n	80172aa <_dtoa_r+0x5b2>
 8017690:	2a00      	cmp	r2, #0
 8017692:	dd07      	ble.n	80176a4 <_dtoa_r+0x9ac>
 8017694:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8017698:	d0ed      	beq.n	8017676 <_dtoa_r+0x97e>
 801769a:	f10a 0301 	add.w	r3, sl, #1
 801769e:	f88b 3000 	strb.w	r3, [fp]
 80176a2:	e602      	b.n	80172aa <_dtoa_r+0x5b2>
 80176a4:	9b05      	ldr	r3, [sp, #20]
 80176a6:	9a05      	ldr	r2, [sp, #20]
 80176a8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80176ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80176ae:	4293      	cmp	r3, r2
 80176b0:	d029      	beq.n	8017706 <_dtoa_r+0xa0e>
 80176b2:	9901      	ldr	r1, [sp, #4]
 80176b4:	2300      	movs	r3, #0
 80176b6:	220a      	movs	r2, #10
 80176b8:	4648      	mov	r0, r9
 80176ba:	f000 f9d5 	bl	8017a68 <__multadd>
 80176be:	45a8      	cmp	r8, r5
 80176c0:	9001      	str	r0, [sp, #4]
 80176c2:	f04f 0300 	mov.w	r3, #0
 80176c6:	f04f 020a 	mov.w	r2, #10
 80176ca:	4641      	mov	r1, r8
 80176cc:	4648      	mov	r0, r9
 80176ce:	d107      	bne.n	80176e0 <_dtoa_r+0x9e8>
 80176d0:	f000 f9ca 	bl	8017a68 <__multadd>
 80176d4:	4680      	mov	r8, r0
 80176d6:	4605      	mov	r5, r0
 80176d8:	9b05      	ldr	r3, [sp, #20]
 80176da:	3301      	adds	r3, #1
 80176dc:	9305      	str	r3, [sp, #20]
 80176de:	e775      	b.n	80175cc <_dtoa_r+0x8d4>
 80176e0:	f000 f9c2 	bl	8017a68 <__multadd>
 80176e4:	4629      	mov	r1, r5
 80176e6:	4680      	mov	r8, r0
 80176e8:	2300      	movs	r3, #0
 80176ea:	220a      	movs	r2, #10
 80176ec:	4648      	mov	r0, r9
 80176ee:	f000 f9bb 	bl	8017a68 <__multadd>
 80176f2:	4605      	mov	r5, r0
 80176f4:	e7f0      	b.n	80176d8 <_dtoa_r+0x9e0>
 80176f6:	f1bb 0f00 	cmp.w	fp, #0
 80176fa:	bfcc      	ite	gt
 80176fc:	465e      	movgt	r6, fp
 80176fe:	2601      	movle	r6, #1
 8017700:	443e      	add	r6, r7
 8017702:	f04f 0800 	mov.w	r8, #0
 8017706:	9901      	ldr	r1, [sp, #4]
 8017708:	2201      	movs	r2, #1
 801770a:	4648      	mov	r0, r9
 801770c:	f000 fb58 	bl	8017dc0 <__lshift>
 8017710:	4621      	mov	r1, r4
 8017712:	9001      	str	r0, [sp, #4]
 8017714:	f000 fbc0 	bl	8017e98 <__mcmp>
 8017718:	2800      	cmp	r0, #0
 801771a:	dcaf      	bgt.n	801767c <_dtoa_r+0x984>
 801771c:	d102      	bne.n	8017724 <_dtoa_r+0xa2c>
 801771e:	f01a 0f01 	tst.w	sl, #1
 8017722:	d1ab      	bne.n	801767c <_dtoa_r+0x984>
 8017724:	4633      	mov	r3, r6
 8017726:	461e      	mov	r6, r3
 8017728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801772c:	2a30      	cmp	r2, #48	@ 0x30
 801772e:	d0fa      	beq.n	8017726 <_dtoa_r+0xa2e>
 8017730:	e5bb      	b.n	80172aa <_dtoa_r+0x5b2>
 8017732:	429f      	cmp	r7, r3
 8017734:	d1a3      	bne.n	801767e <_dtoa_r+0x986>
 8017736:	9b04      	ldr	r3, [sp, #16]
 8017738:	3301      	adds	r3, #1
 801773a:	9304      	str	r3, [sp, #16]
 801773c:	2331      	movs	r3, #49	@ 0x31
 801773e:	703b      	strb	r3, [r7, #0]
 8017740:	e5b3      	b.n	80172aa <_dtoa_r+0x5b2>
 8017742:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017744:	4f16      	ldr	r7, [pc, #88]	@ (80177a0 <_dtoa_r+0xaa8>)
 8017746:	b11b      	cbz	r3, 8017750 <_dtoa_r+0xa58>
 8017748:	f107 0308 	add.w	r3, r7, #8
 801774c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801774e:	6013      	str	r3, [r2, #0]
 8017750:	4638      	mov	r0, r7
 8017752:	b011      	add	sp, #68	@ 0x44
 8017754:	ecbd 8b02 	vpop	{d8}
 8017758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801775c:	9b07      	ldr	r3, [sp, #28]
 801775e:	2b01      	cmp	r3, #1
 8017760:	f77f ae36 	ble.w	80173d0 <_dtoa_r+0x6d8>
 8017764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017766:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017768:	2001      	movs	r0, #1
 801776a:	e656      	b.n	801741a <_dtoa_r+0x722>
 801776c:	f1bb 0f00 	cmp.w	fp, #0
 8017770:	f77f aed7 	ble.w	8017522 <_dtoa_r+0x82a>
 8017774:	463e      	mov	r6, r7
 8017776:	9801      	ldr	r0, [sp, #4]
 8017778:	4621      	mov	r1, r4
 801777a:	f7ff fa34 	bl	8016be6 <quorem>
 801777e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8017782:	f806 ab01 	strb.w	sl, [r6], #1
 8017786:	1bf2      	subs	r2, r6, r7
 8017788:	4593      	cmp	fp, r2
 801778a:	ddb4      	ble.n	80176f6 <_dtoa_r+0x9fe>
 801778c:	9901      	ldr	r1, [sp, #4]
 801778e:	2300      	movs	r3, #0
 8017790:	220a      	movs	r2, #10
 8017792:	4648      	mov	r0, r9
 8017794:	f000 f968 	bl	8017a68 <__multadd>
 8017798:	9001      	str	r0, [sp, #4]
 801779a:	e7ec      	b.n	8017776 <_dtoa_r+0xa7e>
 801779c:	080192ac 	.word	0x080192ac
 80177a0:	08019230 	.word	0x08019230

080177a4 <_free_r>:
 80177a4:	b538      	push	{r3, r4, r5, lr}
 80177a6:	4605      	mov	r5, r0
 80177a8:	2900      	cmp	r1, #0
 80177aa:	d041      	beq.n	8017830 <_free_r+0x8c>
 80177ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177b0:	1f0c      	subs	r4, r1, #4
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	bfb8      	it	lt
 80177b6:	18e4      	addlt	r4, r4, r3
 80177b8:	f000 f8e8 	bl	801798c <__malloc_lock>
 80177bc:	4a1d      	ldr	r2, [pc, #116]	@ (8017834 <_free_r+0x90>)
 80177be:	6813      	ldr	r3, [r2, #0]
 80177c0:	b933      	cbnz	r3, 80177d0 <_free_r+0x2c>
 80177c2:	6063      	str	r3, [r4, #4]
 80177c4:	6014      	str	r4, [r2, #0]
 80177c6:	4628      	mov	r0, r5
 80177c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80177cc:	f000 b8e4 	b.w	8017998 <__malloc_unlock>
 80177d0:	42a3      	cmp	r3, r4
 80177d2:	d908      	bls.n	80177e6 <_free_r+0x42>
 80177d4:	6820      	ldr	r0, [r4, #0]
 80177d6:	1821      	adds	r1, r4, r0
 80177d8:	428b      	cmp	r3, r1
 80177da:	bf01      	itttt	eq
 80177dc:	6819      	ldreq	r1, [r3, #0]
 80177de:	685b      	ldreq	r3, [r3, #4]
 80177e0:	1809      	addeq	r1, r1, r0
 80177e2:	6021      	streq	r1, [r4, #0]
 80177e4:	e7ed      	b.n	80177c2 <_free_r+0x1e>
 80177e6:	461a      	mov	r2, r3
 80177e8:	685b      	ldr	r3, [r3, #4]
 80177ea:	b10b      	cbz	r3, 80177f0 <_free_r+0x4c>
 80177ec:	42a3      	cmp	r3, r4
 80177ee:	d9fa      	bls.n	80177e6 <_free_r+0x42>
 80177f0:	6811      	ldr	r1, [r2, #0]
 80177f2:	1850      	adds	r0, r2, r1
 80177f4:	42a0      	cmp	r0, r4
 80177f6:	d10b      	bne.n	8017810 <_free_r+0x6c>
 80177f8:	6820      	ldr	r0, [r4, #0]
 80177fa:	4401      	add	r1, r0
 80177fc:	1850      	adds	r0, r2, r1
 80177fe:	4283      	cmp	r3, r0
 8017800:	6011      	str	r1, [r2, #0]
 8017802:	d1e0      	bne.n	80177c6 <_free_r+0x22>
 8017804:	6818      	ldr	r0, [r3, #0]
 8017806:	685b      	ldr	r3, [r3, #4]
 8017808:	6053      	str	r3, [r2, #4]
 801780a:	4408      	add	r0, r1
 801780c:	6010      	str	r0, [r2, #0]
 801780e:	e7da      	b.n	80177c6 <_free_r+0x22>
 8017810:	d902      	bls.n	8017818 <_free_r+0x74>
 8017812:	230c      	movs	r3, #12
 8017814:	602b      	str	r3, [r5, #0]
 8017816:	e7d6      	b.n	80177c6 <_free_r+0x22>
 8017818:	6820      	ldr	r0, [r4, #0]
 801781a:	1821      	adds	r1, r4, r0
 801781c:	428b      	cmp	r3, r1
 801781e:	bf04      	itt	eq
 8017820:	6819      	ldreq	r1, [r3, #0]
 8017822:	685b      	ldreq	r3, [r3, #4]
 8017824:	6063      	str	r3, [r4, #4]
 8017826:	bf04      	itt	eq
 8017828:	1809      	addeq	r1, r1, r0
 801782a:	6021      	streq	r1, [r4, #0]
 801782c:	6054      	str	r4, [r2, #4]
 801782e:	e7ca      	b.n	80177c6 <_free_r+0x22>
 8017830:	bd38      	pop	{r3, r4, r5, pc}
 8017832:	bf00      	nop
 8017834:	24001770 	.word	0x24001770

08017838 <malloc>:
 8017838:	4b02      	ldr	r3, [pc, #8]	@ (8017844 <malloc+0xc>)
 801783a:	4601      	mov	r1, r0
 801783c:	6818      	ldr	r0, [r3, #0]
 801783e:	f000 b825 	b.w	801788c <_malloc_r>
 8017842:	bf00      	nop
 8017844:	24000134 	.word	0x24000134

08017848 <sbrk_aligned>:
 8017848:	b570      	push	{r4, r5, r6, lr}
 801784a:	4e0f      	ldr	r6, [pc, #60]	@ (8017888 <sbrk_aligned+0x40>)
 801784c:	460c      	mov	r4, r1
 801784e:	6831      	ldr	r1, [r6, #0]
 8017850:	4605      	mov	r5, r0
 8017852:	b911      	cbnz	r1, 801785a <sbrk_aligned+0x12>
 8017854:	f000 fe9a 	bl	801858c <_sbrk_r>
 8017858:	6030      	str	r0, [r6, #0]
 801785a:	4621      	mov	r1, r4
 801785c:	4628      	mov	r0, r5
 801785e:	f000 fe95 	bl	801858c <_sbrk_r>
 8017862:	1c43      	adds	r3, r0, #1
 8017864:	d103      	bne.n	801786e <sbrk_aligned+0x26>
 8017866:	f04f 34ff 	mov.w	r4, #4294967295
 801786a:	4620      	mov	r0, r4
 801786c:	bd70      	pop	{r4, r5, r6, pc}
 801786e:	1cc4      	adds	r4, r0, #3
 8017870:	f024 0403 	bic.w	r4, r4, #3
 8017874:	42a0      	cmp	r0, r4
 8017876:	d0f8      	beq.n	801786a <sbrk_aligned+0x22>
 8017878:	1a21      	subs	r1, r4, r0
 801787a:	4628      	mov	r0, r5
 801787c:	f000 fe86 	bl	801858c <_sbrk_r>
 8017880:	3001      	adds	r0, #1
 8017882:	d1f2      	bne.n	801786a <sbrk_aligned+0x22>
 8017884:	e7ef      	b.n	8017866 <sbrk_aligned+0x1e>
 8017886:	bf00      	nop
 8017888:	2400176c 	.word	0x2400176c

0801788c <_malloc_r>:
 801788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017890:	1ccd      	adds	r5, r1, #3
 8017892:	f025 0503 	bic.w	r5, r5, #3
 8017896:	3508      	adds	r5, #8
 8017898:	2d0c      	cmp	r5, #12
 801789a:	bf38      	it	cc
 801789c:	250c      	movcc	r5, #12
 801789e:	2d00      	cmp	r5, #0
 80178a0:	4606      	mov	r6, r0
 80178a2:	db01      	blt.n	80178a8 <_malloc_r+0x1c>
 80178a4:	42a9      	cmp	r1, r5
 80178a6:	d904      	bls.n	80178b2 <_malloc_r+0x26>
 80178a8:	230c      	movs	r3, #12
 80178aa:	6033      	str	r3, [r6, #0]
 80178ac:	2000      	movs	r0, #0
 80178ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017988 <_malloc_r+0xfc>
 80178b6:	f000 f869 	bl	801798c <__malloc_lock>
 80178ba:	f8d8 3000 	ldr.w	r3, [r8]
 80178be:	461c      	mov	r4, r3
 80178c0:	bb44      	cbnz	r4, 8017914 <_malloc_r+0x88>
 80178c2:	4629      	mov	r1, r5
 80178c4:	4630      	mov	r0, r6
 80178c6:	f7ff ffbf 	bl	8017848 <sbrk_aligned>
 80178ca:	1c43      	adds	r3, r0, #1
 80178cc:	4604      	mov	r4, r0
 80178ce:	d158      	bne.n	8017982 <_malloc_r+0xf6>
 80178d0:	f8d8 4000 	ldr.w	r4, [r8]
 80178d4:	4627      	mov	r7, r4
 80178d6:	2f00      	cmp	r7, #0
 80178d8:	d143      	bne.n	8017962 <_malloc_r+0xd6>
 80178da:	2c00      	cmp	r4, #0
 80178dc:	d04b      	beq.n	8017976 <_malloc_r+0xea>
 80178de:	6823      	ldr	r3, [r4, #0]
 80178e0:	4639      	mov	r1, r7
 80178e2:	4630      	mov	r0, r6
 80178e4:	eb04 0903 	add.w	r9, r4, r3
 80178e8:	f000 fe50 	bl	801858c <_sbrk_r>
 80178ec:	4581      	cmp	r9, r0
 80178ee:	d142      	bne.n	8017976 <_malloc_r+0xea>
 80178f0:	6821      	ldr	r1, [r4, #0]
 80178f2:	1a6d      	subs	r5, r5, r1
 80178f4:	4629      	mov	r1, r5
 80178f6:	4630      	mov	r0, r6
 80178f8:	f7ff ffa6 	bl	8017848 <sbrk_aligned>
 80178fc:	3001      	adds	r0, #1
 80178fe:	d03a      	beq.n	8017976 <_malloc_r+0xea>
 8017900:	6823      	ldr	r3, [r4, #0]
 8017902:	442b      	add	r3, r5
 8017904:	6023      	str	r3, [r4, #0]
 8017906:	f8d8 3000 	ldr.w	r3, [r8]
 801790a:	685a      	ldr	r2, [r3, #4]
 801790c:	bb62      	cbnz	r2, 8017968 <_malloc_r+0xdc>
 801790e:	f8c8 7000 	str.w	r7, [r8]
 8017912:	e00f      	b.n	8017934 <_malloc_r+0xa8>
 8017914:	6822      	ldr	r2, [r4, #0]
 8017916:	1b52      	subs	r2, r2, r5
 8017918:	d420      	bmi.n	801795c <_malloc_r+0xd0>
 801791a:	2a0b      	cmp	r2, #11
 801791c:	d917      	bls.n	801794e <_malloc_r+0xc2>
 801791e:	1961      	adds	r1, r4, r5
 8017920:	42a3      	cmp	r3, r4
 8017922:	6025      	str	r5, [r4, #0]
 8017924:	bf18      	it	ne
 8017926:	6059      	strne	r1, [r3, #4]
 8017928:	6863      	ldr	r3, [r4, #4]
 801792a:	bf08      	it	eq
 801792c:	f8c8 1000 	streq.w	r1, [r8]
 8017930:	5162      	str	r2, [r4, r5]
 8017932:	604b      	str	r3, [r1, #4]
 8017934:	4630      	mov	r0, r6
 8017936:	f000 f82f 	bl	8017998 <__malloc_unlock>
 801793a:	f104 000b 	add.w	r0, r4, #11
 801793e:	1d23      	adds	r3, r4, #4
 8017940:	f020 0007 	bic.w	r0, r0, #7
 8017944:	1ac2      	subs	r2, r0, r3
 8017946:	bf1c      	itt	ne
 8017948:	1a1b      	subne	r3, r3, r0
 801794a:	50a3      	strne	r3, [r4, r2]
 801794c:	e7af      	b.n	80178ae <_malloc_r+0x22>
 801794e:	6862      	ldr	r2, [r4, #4]
 8017950:	42a3      	cmp	r3, r4
 8017952:	bf0c      	ite	eq
 8017954:	f8c8 2000 	streq.w	r2, [r8]
 8017958:	605a      	strne	r2, [r3, #4]
 801795a:	e7eb      	b.n	8017934 <_malloc_r+0xa8>
 801795c:	4623      	mov	r3, r4
 801795e:	6864      	ldr	r4, [r4, #4]
 8017960:	e7ae      	b.n	80178c0 <_malloc_r+0x34>
 8017962:	463c      	mov	r4, r7
 8017964:	687f      	ldr	r7, [r7, #4]
 8017966:	e7b6      	b.n	80178d6 <_malloc_r+0x4a>
 8017968:	461a      	mov	r2, r3
 801796a:	685b      	ldr	r3, [r3, #4]
 801796c:	42a3      	cmp	r3, r4
 801796e:	d1fb      	bne.n	8017968 <_malloc_r+0xdc>
 8017970:	2300      	movs	r3, #0
 8017972:	6053      	str	r3, [r2, #4]
 8017974:	e7de      	b.n	8017934 <_malloc_r+0xa8>
 8017976:	230c      	movs	r3, #12
 8017978:	6033      	str	r3, [r6, #0]
 801797a:	4630      	mov	r0, r6
 801797c:	f000 f80c 	bl	8017998 <__malloc_unlock>
 8017980:	e794      	b.n	80178ac <_malloc_r+0x20>
 8017982:	6005      	str	r5, [r0, #0]
 8017984:	e7d6      	b.n	8017934 <_malloc_r+0xa8>
 8017986:	bf00      	nop
 8017988:	24001770 	.word	0x24001770

0801798c <__malloc_lock>:
 801798c:	4801      	ldr	r0, [pc, #4]	@ (8017994 <__malloc_lock+0x8>)
 801798e:	f7ff b91a 	b.w	8016bc6 <__retarget_lock_acquire_recursive>
 8017992:	bf00      	nop
 8017994:	24001768 	.word	0x24001768

08017998 <__malloc_unlock>:
 8017998:	4801      	ldr	r0, [pc, #4]	@ (80179a0 <__malloc_unlock+0x8>)
 801799a:	f7ff b915 	b.w	8016bc8 <__retarget_lock_release_recursive>
 801799e:	bf00      	nop
 80179a0:	24001768 	.word	0x24001768

080179a4 <_Balloc>:
 80179a4:	b570      	push	{r4, r5, r6, lr}
 80179a6:	69c6      	ldr	r6, [r0, #28]
 80179a8:	4604      	mov	r4, r0
 80179aa:	460d      	mov	r5, r1
 80179ac:	b976      	cbnz	r6, 80179cc <_Balloc+0x28>
 80179ae:	2010      	movs	r0, #16
 80179b0:	f7ff ff42 	bl	8017838 <malloc>
 80179b4:	4602      	mov	r2, r0
 80179b6:	61e0      	str	r0, [r4, #28]
 80179b8:	b920      	cbnz	r0, 80179c4 <_Balloc+0x20>
 80179ba:	4b18      	ldr	r3, [pc, #96]	@ (8017a1c <_Balloc+0x78>)
 80179bc:	4818      	ldr	r0, [pc, #96]	@ (8017a20 <_Balloc+0x7c>)
 80179be:	216b      	movs	r1, #107	@ 0x6b
 80179c0:	f000 fdf4 	bl	80185ac <__assert_func>
 80179c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80179c8:	6006      	str	r6, [r0, #0]
 80179ca:	60c6      	str	r6, [r0, #12]
 80179cc:	69e6      	ldr	r6, [r4, #28]
 80179ce:	68f3      	ldr	r3, [r6, #12]
 80179d0:	b183      	cbz	r3, 80179f4 <_Balloc+0x50>
 80179d2:	69e3      	ldr	r3, [r4, #28]
 80179d4:	68db      	ldr	r3, [r3, #12]
 80179d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80179da:	b9b8      	cbnz	r0, 8017a0c <_Balloc+0x68>
 80179dc:	2101      	movs	r1, #1
 80179de:	fa01 f605 	lsl.w	r6, r1, r5
 80179e2:	1d72      	adds	r2, r6, #5
 80179e4:	0092      	lsls	r2, r2, #2
 80179e6:	4620      	mov	r0, r4
 80179e8:	f000 fdfe 	bl	80185e8 <_calloc_r>
 80179ec:	b160      	cbz	r0, 8017a08 <_Balloc+0x64>
 80179ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80179f2:	e00e      	b.n	8017a12 <_Balloc+0x6e>
 80179f4:	2221      	movs	r2, #33	@ 0x21
 80179f6:	2104      	movs	r1, #4
 80179f8:	4620      	mov	r0, r4
 80179fa:	f000 fdf5 	bl	80185e8 <_calloc_r>
 80179fe:	69e3      	ldr	r3, [r4, #28]
 8017a00:	60f0      	str	r0, [r6, #12]
 8017a02:	68db      	ldr	r3, [r3, #12]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d1e4      	bne.n	80179d2 <_Balloc+0x2e>
 8017a08:	2000      	movs	r0, #0
 8017a0a:	bd70      	pop	{r4, r5, r6, pc}
 8017a0c:	6802      	ldr	r2, [r0, #0]
 8017a0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017a12:	2300      	movs	r3, #0
 8017a14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017a18:	e7f7      	b.n	8017a0a <_Balloc+0x66>
 8017a1a:	bf00      	nop
 8017a1c:	0801923d 	.word	0x0801923d
 8017a20:	080192bd 	.word	0x080192bd

08017a24 <_Bfree>:
 8017a24:	b570      	push	{r4, r5, r6, lr}
 8017a26:	69c6      	ldr	r6, [r0, #28]
 8017a28:	4605      	mov	r5, r0
 8017a2a:	460c      	mov	r4, r1
 8017a2c:	b976      	cbnz	r6, 8017a4c <_Bfree+0x28>
 8017a2e:	2010      	movs	r0, #16
 8017a30:	f7ff ff02 	bl	8017838 <malloc>
 8017a34:	4602      	mov	r2, r0
 8017a36:	61e8      	str	r0, [r5, #28]
 8017a38:	b920      	cbnz	r0, 8017a44 <_Bfree+0x20>
 8017a3a:	4b09      	ldr	r3, [pc, #36]	@ (8017a60 <_Bfree+0x3c>)
 8017a3c:	4809      	ldr	r0, [pc, #36]	@ (8017a64 <_Bfree+0x40>)
 8017a3e:	218f      	movs	r1, #143	@ 0x8f
 8017a40:	f000 fdb4 	bl	80185ac <__assert_func>
 8017a44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017a48:	6006      	str	r6, [r0, #0]
 8017a4a:	60c6      	str	r6, [r0, #12]
 8017a4c:	b13c      	cbz	r4, 8017a5e <_Bfree+0x3a>
 8017a4e:	69eb      	ldr	r3, [r5, #28]
 8017a50:	6862      	ldr	r2, [r4, #4]
 8017a52:	68db      	ldr	r3, [r3, #12]
 8017a54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017a58:	6021      	str	r1, [r4, #0]
 8017a5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017a5e:	bd70      	pop	{r4, r5, r6, pc}
 8017a60:	0801923d 	.word	0x0801923d
 8017a64:	080192bd 	.word	0x080192bd

08017a68 <__multadd>:
 8017a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a6c:	690d      	ldr	r5, [r1, #16]
 8017a6e:	4607      	mov	r7, r0
 8017a70:	460c      	mov	r4, r1
 8017a72:	461e      	mov	r6, r3
 8017a74:	f101 0c14 	add.w	ip, r1, #20
 8017a78:	2000      	movs	r0, #0
 8017a7a:	f8dc 3000 	ldr.w	r3, [ip]
 8017a7e:	b299      	uxth	r1, r3
 8017a80:	fb02 6101 	mla	r1, r2, r1, r6
 8017a84:	0c1e      	lsrs	r6, r3, #16
 8017a86:	0c0b      	lsrs	r3, r1, #16
 8017a88:	fb02 3306 	mla	r3, r2, r6, r3
 8017a8c:	b289      	uxth	r1, r1
 8017a8e:	3001      	adds	r0, #1
 8017a90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017a94:	4285      	cmp	r5, r0
 8017a96:	f84c 1b04 	str.w	r1, [ip], #4
 8017a9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017a9e:	dcec      	bgt.n	8017a7a <__multadd+0x12>
 8017aa0:	b30e      	cbz	r6, 8017ae6 <__multadd+0x7e>
 8017aa2:	68a3      	ldr	r3, [r4, #8]
 8017aa4:	42ab      	cmp	r3, r5
 8017aa6:	dc19      	bgt.n	8017adc <__multadd+0x74>
 8017aa8:	6861      	ldr	r1, [r4, #4]
 8017aaa:	4638      	mov	r0, r7
 8017aac:	3101      	adds	r1, #1
 8017aae:	f7ff ff79 	bl	80179a4 <_Balloc>
 8017ab2:	4680      	mov	r8, r0
 8017ab4:	b928      	cbnz	r0, 8017ac2 <__multadd+0x5a>
 8017ab6:	4602      	mov	r2, r0
 8017ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8017aec <__multadd+0x84>)
 8017aba:	480d      	ldr	r0, [pc, #52]	@ (8017af0 <__multadd+0x88>)
 8017abc:	21ba      	movs	r1, #186	@ 0xba
 8017abe:	f000 fd75 	bl	80185ac <__assert_func>
 8017ac2:	6922      	ldr	r2, [r4, #16]
 8017ac4:	3202      	adds	r2, #2
 8017ac6:	f104 010c 	add.w	r1, r4, #12
 8017aca:	0092      	lsls	r2, r2, #2
 8017acc:	300c      	adds	r0, #12
 8017ace:	f7ff f87c 	bl	8016bca <memcpy>
 8017ad2:	4621      	mov	r1, r4
 8017ad4:	4638      	mov	r0, r7
 8017ad6:	f7ff ffa5 	bl	8017a24 <_Bfree>
 8017ada:	4644      	mov	r4, r8
 8017adc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017ae0:	3501      	adds	r5, #1
 8017ae2:	615e      	str	r6, [r3, #20]
 8017ae4:	6125      	str	r5, [r4, #16]
 8017ae6:	4620      	mov	r0, r4
 8017ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aec:	080192ac 	.word	0x080192ac
 8017af0:	080192bd 	.word	0x080192bd

08017af4 <__hi0bits>:
 8017af4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017af8:	4603      	mov	r3, r0
 8017afa:	bf36      	itet	cc
 8017afc:	0403      	lslcc	r3, r0, #16
 8017afe:	2000      	movcs	r0, #0
 8017b00:	2010      	movcc	r0, #16
 8017b02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017b06:	bf3c      	itt	cc
 8017b08:	021b      	lslcc	r3, r3, #8
 8017b0a:	3008      	addcc	r0, #8
 8017b0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017b10:	bf3c      	itt	cc
 8017b12:	011b      	lslcc	r3, r3, #4
 8017b14:	3004      	addcc	r0, #4
 8017b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017b1a:	bf3c      	itt	cc
 8017b1c:	009b      	lslcc	r3, r3, #2
 8017b1e:	3002      	addcc	r0, #2
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	db05      	blt.n	8017b30 <__hi0bits+0x3c>
 8017b24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017b28:	f100 0001 	add.w	r0, r0, #1
 8017b2c:	bf08      	it	eq
 8017b2e:	2020      	moveq	r0, #32
 8017b30:	4770      	bx	lr

08017b32 <__lo0bits>:
 8017b32:	6803      	ldr	r3, [r0, #0]
 8017b34:	4602      	mov	r2, r0
 8017b36:	f013 0007 	ands.w	r0, r3, #7
 8017b3a:	d00b      	beq.n	8017b54 <__lo0bits+0x22>
 8017b3c:	07d9      	lsls	r1, r3, #31
 8017b3e:	d421      	bmi.n	8017b84 <__lo0bits+0x52>
 8017b40:	0798      	lsls	r0, r3, #30
 8017b42:	bf49      	itett	mi
 8017b44:	085b      	lsrmi	r3, r3, #1
 8017b46:	089b      	lsrpl	r3, r3, #2
 8017b48:	2001      	movmi	r0, #1
 8017b4a:	6013      	strmi	r3, [r2, #0]
 8017b4c:	bf5c      	itt	pl
 8017b4e:	6013      	strpl	r3, [r2, #0]
 8017b50:	2002      	movpl	r0, #2
 8017b52:	4770      	bx	lr
 8017b54:	b299      	uxth	r1, r3
 8017b56:	b909      	cbnz	r1, 8017b5c <__lo0bits+0x2a>
 8017b58:	0c1b      	lsrs	r3, r3, #16
 8017b5a:	2010      	movs	r0, #16
 8017b5c:	b2d9      	uxtb	r1, r3
 8017b5e:	b909      	cbnz	r1, 8017b64 <__lo0bits+0x32>
 8017b60:	3008      	adds	r0, #8
 8017b62:	0a1b      	lsrs	r3, r3, #8
 8017b64:	0719      	lsls	r1, r3, #28
 8017b66:	bf04      	itt	eq
 8017b68:	091b      	lsreq	r3, r3, #4
 8017b6a:	3004      	addeq	r0, #4
 8017b6c:	0799      	lsls	r1, r3, #30
 8017b6e:	bf04      	itt	eq
 8017b70:	089b      	lsreq	r3, r3, #2
 8017b72:	3002      	addeq	r0, #2
 8017b74:	07d9      	lsls	r1, r3, #31
 8017b76:	d403      	bmi.n	8017b80 <__lo0bits+0x4e>
 8017b78:	085b      	lsrs	r3, r3, #1
 8017b7a:	f100 0001 	add.w	r0, r0, #1
 8017b7e:	d003      	beq.n	8017b88 <__lo0bits+0x56>
 8017b80:	6013      	str	r3, [r2, #0]
 8017b82:	4770      	bx	lr
 8017b84:	2000      	movs	r0, #0
 8017b86:	4770      	bx	lr
 8017b88:	2020      	movs	r0, #32
 8017b8a:	4770      	bx	lr

08017b8c <__i2b>:
 8017b8c:	b510      	push	{r4, lr}
 8017b8e:	460c      	mov	r4, r1
 8017b90:	2101      	movs	r1, #1
 8017b92:	f7ff ff07 	bl	80179a4 <_Balloc>
 8017b96:	4602      	mov	r2, r0
 8017b98:	b928      	cbnz	r0, 8017ba6 <__i2b+0x1a>
 8017b9a:	4b05      	ldr	r3, [pc, #20]	@ (8017bb0 <__i2b+0x24>)
 8017b9c:	4805      	ldr	r0, [pc, #20]	@ (8017bb4 <__i2b+0x28>)
 8017b9e:	f240 1145 	movw	r1, #325	@ 0x145
 8017ba2:	f000 fd03 	bl	80185ac <__assert_func>
 8017ba6:	2301      	movs	r3, #1
 8017ba8:	6144      	str	r4, [r0, #20]
 8017baa:	6103      	str	r3, [r0, #16]
 8017bac:	bd10      	pop	{r4, pc}
 8017bae:	bf00      	nop
 8017bb0:	080192ac 	.word	0x080192ac
 8017bb4:	080192bd 	.word	0x080192bd

08017bb8 <__multiply>:
 8017bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bbc:	4614      	mov	r4, r2
 8017bbe:	690a      	ldr	r2, [r1, #16]
 8017bc0:	6923      	ldr	r3, [r4, #16]
 8017bc2:	429a      	cmp	r2, r3
 8017bc4:	bfa8      	it	ge
 8017bc6:	4623      	movge	r3, r4
 8017bc8:	460f      	mov	r7, r1
 8017bca:	bfa4      	itt	ge
 8017bcc:	460c      	movge	r4, r1
 8017bce:	461f      	movge	r7, r3
 8017bd0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017bd4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017bd8:	68a3      	ldr	r3, [r4, #8]
 8017bda:	6861      	ldr	r1, [r4, #4]
 8017bdc:	eb0a 0609 	add.w	r6, sl, r9
 8017be0:	42b3      	cmp	r3, r6
 8017be2:	b085      	sub	sp, #20
 8017be4:	bfb8      	it	lt
 8017be6:	3101      	addlt	r1, #1
 8017be8:	f7ff fedc 	bl	80179a4 <_Balloc>
 8017bec:	b930      	cbnz	r0, 8017bfc <__multiply+0x44>
 8017bee:	4602      	mov	r2, r0
 8017bf0:	4b44      	ldr	r3, [pc, #272]	@ (8017d04 <__multiply+0x14c>)
 8017bf2:	4845      	ldr	r0, [pc, #276]	@ (8017d08 <__multiply+0x150>)
 8017bf4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017bf8:	f000 fcd8 	bl	80185ac <__assert_func>
 8017bfc:	f100 0514 	add.w	r5, r0, #20
 8017c00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017c04:	462b      	mov	r3, r5
 8017c06:	2200      	movs	r2, #0
 8017c08:	4543      	cmp	r3, r8
 8017c0a:	d321      	bcc.n	8017c50 <__multiply+0x98>
 8017c0c:	f107 0114 	add.w	r1, r7, #20
 8017c10:	f104 0214 	add.w	r2, r4, #20
 8017c14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017c18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017c1c:	9302      	str	r3, [sp, #8]
 8017c1e:	1b13      	subs	r3, r2, r4
 8017c20:	3b15      	subs	r3, #21
 8017c22:	f023 0303 	bic.w	r3, r3, #3
 8017c26:	3304      	adds	r3, #4
 8017c28:	f104 0715 	add.w	r7, r4, #21
 8017c2c:	42ba      	cmp	r2, r7
 8017c2e:	bf38      	it	cc
 8017c30:	2304      	movcc	r3, #4
 8017c32:	9301      	str	r3, [sp, #4]
 8017c34:	9b02      	ldr	r3, [sp, #8]
 8017c36:	9103      	str	r1, [sp, #12]
 8017c38:	428b      	cmp	r3, r1
 8017c3a:	d80c      	bhi.n	8017c56 <__multiply+0x9e>
 8017c3c:	2e00      	cmp	r6, #0
 8017c3e:	dd03      	ble.n	8017c48 <__multiply+0x90>
 8017c40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d05b      	beq.n	8017d00 <__multiply+0x148>
 8017c48:	6106      	str	r6, [r0, #16]
 8017c4a:	b005      	add	sp, #20
 8017c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c50:	f843 2b04 	str.w	r2, [r3], #4
 8017c54:	e7d8      	b.n	8017c08 <__multiply+0x50>
 8017c56:	f8b1 a000 	ldrh.w	sl, [r1]
 8017c5a:	f1ba 0f00 	cmp.w	sl, #0
 8017c5e:	d024      	beq.n	8017caa <__multiply+0xf2>
 8017c60:	f104 0e14 	add.w	lr, r4, #20
 8017c64:	46a9      	mov	r9, r5
 8017c66:	f04f 0c00 	mov.w	ip, #0
 8017c6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017c6e:	f8d9 3000 	ldr.w	r3, [r9]
 8017c72:	fa1f fb87 	uxth.w	fp, r7
 8017c76:	b29b      	uxth	r3, r3
 8017c78:	fb0a 330b 	mla	r3, sl, fp, r3
 8017c7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017c80:	f8d9 7000 	ldr.w	r7, [r9]
 8017c84:	4463      	add	r3, ip
 8017c86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017c8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8017c8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8017c92:	b29b      	uxth	r3, r3
 8017c94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017c98:	4572      	cmp	r2, lr
 8017c9a:	f849 3b04 	str.w	r3, [r9], #4
 8017c9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017ca2:	d8e2      	bhi.n	8017c6a <__multiply+0xb2>
 8017ca4:	9b01      	ldr	r3, [sp, #4]
 8017ca6:	f845 c003 	str.w	ip, [r5, r3]
 8017caa:	9b03      	ldr	r3, [sp, #12]
 8017cac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017cb0:	3104      	adds	r1, #4
 8017cb2:	f1b9 0f00 	cmp.w	r9, #0
 8017cb6:	d021      	beq.n	8017cfc <__multiply+0x144>
 8017cb8:	682b      	ldr	r3, [r5, #0]
 8017cba:	f104 0c14 	add.w	ip, r4, #20
 8017cbe:	46ae      	mov	lr, r5
 8017cc0:	f04f 0a00 	mov.w	sl, #0
 8017cc4:	f8bc b000 	ldrh.w	fp, [ip]
 8017cc8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017ccc:	fb09 770b 	mla	r7, r9, fp, r7
 8017cd0:	4457      	add	r7, sl
 8017cd2:	b29b      	uxth	r3, r3
 8017cd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017cd8:	f84e 3b04 	str.w	r3, [lr], #4
 8017cdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017ce0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017ce4:	f8be 3000 	ldrh.w	r3, [lr]
 8017ce8:	fb09 330a 	mla	r3, r9, sl, r3
 8017cec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017cf0:	4562      	cmp	r2, ip
 8017cf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017cf6:	d8e5      	bhi.n	8017cc4 <__multiply+0x10c>
 8017cf8:	9f01      	ldr	r7, [sp, #4]
 8017cfa:	51eb      	str	r3, [r5, r7]
 8017cfc:	3504      	adds	r5, #4
 8017cfe:	e799      	b.n	8017c34 <__multiply+0x7c>
 8017d00:	3e01      	subs	r6, #1
 8017d02:	e79b      	b.n	8017c3c <__multiply+0x84>
 8017d04:	080192ac 	.word	0x080192ac
 8017d08:	080192bd 	.word	0x080192bd

08017d0c <__pow5mult>:
 8017d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d10:	4615      	mov	r5, r2
 8017d12:	f012 0203 	ands.w	r2, r2, #3
 8017d16:	4607      	mov	r7, r0
 8017d18:	460e      	mov	r6, r1
 8017d1a:	d007      	beq.n	8017d2c <__pow5mult+0x20>
 8017d1c:	4c25      	ldr	r4, [pc, #148]	@ (8017db4 <__pow5mult+0xa8>)
 8017d1e:	3a01      	subs	r2, #1
 8017d20:	2300      	movs	r3, #0
 8017d22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017d26:	f7ff fe9f 	bl	8017a68 <__multadd>
 8017d2a:	4606      	mov	r6, r0
 8017d2c:	10ad      	asrs	r5, r5, #2
 8017d2e:	d03d      	beq.n	8017dac <__pow5mult+0xa0>
 8017d30:	69fc      	ldr	r4, [r7, #28]
 8017d32:	b97c      	cbnz	r4, 8017d54 <__pow5mult+0x48>
 8017d34:	2010      	movs	r0, #16
 8017d36:	f7ff fd7f 	bl	8017838 <malloc>
 8017d3a:	4602      	mov	r2, r0
 8017d3c:	61f8      	str	r0, [r7, #28]
 8017d3e:	b928      	cbnz	r0, 8017d4c <__pow5mult+0x40>
 8017d40:	4b1d      	ldr	r3, [pc, #116]	@ (8017db8 <__pow5mult+0xac>)
 8017d42:	481e      	ldr	r0, [pc, #120]	@ (8017dbc <__pow5mult+0xb0>)
 8017d44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017d48:	f000 fc30 	bl	80185ac <__assert_func>
 8017d4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017d50:	6004      	str	r4, [r0, #0]
 8017d52:	60c4      	str	r4, [r0, #12]
 8017d54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017d58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017d5c:	b94c      	cbnz	r4, 8017d72 <__pow5mult+0x66>
 8017d5e:	f240 2171 	movw	r1, #625	@ 0x271
 8017d62:	4638      	mov	r0, r7
 8017d64:	f7ff ff12 	bl	8017b8c <__i2b>
 8017d68:	2300      	movs	r3, #0
 8017d6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8017d6e:	4604      	mov	r4, r0
 8017d70:	6003      	str	r3, [r0, #0]
 8017d72:	f04f 0900 	mov.w	r9, #0
 8017d76:	07eb      	lsls	r3, r5, #31
 8017d78:	d50a      	bpl.n	8017d90 <__pow5mult+0x84>
 8017d7a:	4631      	mov	r1, r6
 8017d7c:	4622      	mov	r2, r4
 8017d7e:	4638      	mov	r0, r7
 8017d80:	f7ff ff1a 	bl	8017bb8 <__multiply>
 8017d84:	4631      	mov	r1, r6
 8017d86:	4680      	mov	r8, r0
 8017d88:	4638      	mov	r0, r7
 8017d8a:	f7ff fe4b 	bl	8017a24 <_Bfree>
 8017d8e:	4646      	mov	r6, r8
 8017d90:	106d      	asrs	r5, r5, #1
 8017d92:	d00b      	beq.n	8017dac <__pow5mult+0xa0>
 8017d94:	6820      	ldr	r0, [r4, #0]
 8017d96:	b938      	cbnz	r0, 8017da8 <__pow5mult+0x9c>
 8017d98:	4622      	mov	r2, r4
 8017d9a:	4621      	mov	r1, r4
 8017d9c:	4638      	mov	r0, r7
 8017d9e:	f7ff ff0b 	bl	8017bb8 <__multiply>
 8017da2:	6020      	str	r0, [r4, #0]
 8017da4:	f8c0 9000 	str.w	r9, [r0]
 8017da8:	4604      	mov	r4, r0
 8017daa:	e7e4      	b.n	8017d76 <__pow5mult+0x6a>
 8017dac:	4630      	mov	r0, r6
 8017dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017db2:	bf00      	nop
 8017db4:	08019318 	.word	0x08019318
 8017db8:	0801923d 	.word	0x0801923d
 8017dbc:	080192bd 	.word	0x080192bd

08017dc0 <__lshift>:
 8017dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dc4:	460c      	mov	r4, r1
 8017dc6:	6849      	ldr	r1, [r1, #4]
 8017dc8:	6923      	ldr	r3, [r4, #16]
 8017dca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017dce:	68a3      	ldr	r3, [r4, #8]
 8017dd0:	4607      	mov	r7, r0
 8017dd2:	4691      	mov	r9, r2
 8017dd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017dd8:	f108 0601 	add.w	r6, r8, #1
 8017ddc:	42b3      	cmp	r3, r6
 8017dde:	db0b      	blt.n	8017df8 <__lshift+0x38>
 8017de0:	4638      	mov	r0, r7
 8017de2:	f7ff fddf 	bl	80179a4 <_Balloc>
 8017de6:	4605      	mov	r5, r0
 8017de8:	b948      	cbnz	r0, 8017dfe <__lshift+0x3e>
 8017dea:	4602      	mov	r2, r0
 8017dec:	4b28      	ldr	r3, [pc, #160]	@ (8017e90 <__lshift+0xd0>)
 8017dee:	4829      	ldr	r0, [pc, #164]	@ (8017e94 <__lshift+0xd4>)
 8017df0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017df4:	f000 fbda 	bl	80185ac <__assert_func>
 8017df8:	3101      	adds	r1, #1
 8017dfa:	005b      	lsls	r3, r3, #1
 8017dfc:	e7ee      	b.n	8017ddc <__lshift+0x1c>
 8017dfe:	2300      	movs	r3, #0
 8017e00:	f100 0114 	add.w	r1, r0, #20
 8017e04:	f100 0210 	add.w	r2, r0, #16
 8017e08:	4618      	mov	r0, r3
 8017e0a:	4553      	cmp	r3, sl
 8017e0c:	db33      	blt.n	8017e76 <__lshift+0xb6>
 8017e0e:	6920      	ldr	r0, [r4, #16]
 8017e10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017e14:	f104 0314 	add.w	r3, r4, #20
 8017e18:	f019 091f 	ands.w	r9, r9, #31
 8017e1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017e20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017e24:	d02b      	beq.n	8017e7e <__lshift+0xbe>
 8017e26:	f1c9 0e20 	rsb	lr, r9, #32
 8017e2a:	468a      	mov	sl, r1
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	6818      	ldr	r0, [r3, #0]
 8017e30:	fa00 f009 	lsl.w	r0, r0, r9
 8017e34:	4310      	orrs	r0, r2
 8017e36:	f84a 0b04 	str.w	r0, [sl], #4
 8017e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e3e:	459c      	cmp	ip, r3
 8017e40:	fa22 f20e 	lsr.w	r2, r2, lr
 8017e44:	d8f3      	bhi.n	8017e2e <__lshift+0x6e>
 8017e46:	ebac 0304 	sub.w	r3, ip, r4
 8017e4a:	3b15      	subs	r3, #21
 8017e4c:	f023 0303 	bic.w	r3, r3, #3
 8017e50:	3304      	adds	r3, #4
 8017e52:	f104 0015 	add.w	r0, r4, #21
 8017e56:	4584      	cmp	ip, r0
 8017e58:	bf38      	it	cc
 8017e5a:	2304      	movcc	r3, #4
 8017e5c:	50ca      	str	r2, [r1, r3]
 8017e5e:	b10a      	cbz	r2, 8017e64 <__lshift+0xa4>
 8017e60:	f108 0602 	add.w	r6, r8, #2
 8017e64:	3e01      	subs	r6, #1
 8017e66:	4638      	mov	r0, r7
 8017e68:	612e      	str	r6, [r5, #16]
 8017e6a:	4621      	mov	r1, r4
 8017e6c:	f7ff fdda 	bl	8017a24 <_Bfree>
 8017e70:	4628      	mov	r0, r5
 8017e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e76:	f842 0f04 	str.w	r0, [r2, #4]!
 8017e7a:	3301      	adds	r3, #1
 8017e7c:	e7c5      	b.n	8017e0a <__lshift+0x4a>
 8017e7e:	3904      	subs	r1, #4
 8017e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e84:	f841 2f04 	str.w	r2, [r1, #4]!
 8017e88:	459c      	cmp	ip, r3
 8017e8a:	d8f9      	bhi.n	8017e80 <__lshift+0xc0>
 8017e8c:	e7ea      	b.n	8017e64 <__lshift+0xa4>
 8017e8e:	bf00      	nop
 8017e90:	080192ac 	.word	0x080192ac
 8017e94:	080192bd 	.word	0x080192bd

08017e98 <__mcmp>:
 8017e98:	690a      	ldr	r2, [r1, #16]
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	6900      	ldr	r0, [r0, #16]
 8017e9e:	1a80      	subs	r0, r0, r2
 8017ea0:	b530      	push	{r4, r5, lr}
 8017ea2:	d10e      	bne.n	8017ec2 <__mcmp+0x2a>
 8017ea4:	3314      	adds	r3, #20
 8017ea6:	3114      	adds	r1, #20
 8017ea8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017eac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017eb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017eb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017eb8:	4295      	cmp	r5, r2
 8017eba:	d003      	beq.n	8017ec4 <__mcmp+0x2c>
 8017ebc:	d205      	bcs.n	8017eca <__mcmp+0x32>
 8017ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8017ec2:	bd30      	pop	{r4, r5, pc}
 8017ec4:	42a3      	cmp	r3, r4
 8017ec6:	d3f3      	bcc.n	8017eb0 <__mcmp+0x18>
 8017ec8:	e7fb      	b.n	8017ec2 <__mcmp+0x2a>
 8017eca:	2001      	movs	r0, #1
 8017ecc:	e7f9      	b.n	8017ec2 <__mcmp+0x2a>
	...

08017ed0 <__mdiff>:
 8017ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed4:	4689      	mov	r9, r1
 8017ed6:	4606      	mov	r6, r0
 8017ed8:	4611      	mov	r1, r2
 8017eda:	4648      	mov	r0, r9
 8017edc:	4614      	mov	r4, r2
 8017ede:	f7ff ffdb 	bl	8017e98 <__mcmp>
 8017ee2:	1e05      	subs	r5, r0, #0
 8017ee4:	d112      	bne.n	8017f0c <__mdiff+0x3c>
 8017ee6:	4629      	mov	r1, r5
 8017ee8:	4630      	mov	r0, r6
 8017eea:	f7ff fd5b 	bl	80179a4 <_Balloc>
 8017eee:	4602      	mov	r2, r0
 8017ef0:	b928      	cbnz	r0, 8017efe <__mdiff+0x2e>
 8017ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8017ff0 <__mdiff+0x120>)
 8017ef4:	f240 2137 	movw	r1, #567	@ 0x237
 8017ef8:	483e      	ldr	r0, [pc, #248]	@ (8017ff4 <__mdiff+0x124>)
 8017efa:	f000 fb57 	bl	80185ac <__assert_func>
 8017efe:	2301      	movs	r3, #1
 8017f00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017f04:	4610      	mov	r0, r2
 8017f06:	b003      	add	sp, #12
 8017f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f0c:	bfbc      	itt	lt
 8017f0e:	464b      	movlt	r3, r9
 8017f10:	46a1      	movlt	r9, r4
 8017f12:	4630      	mov	r0, r6
 8017f14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017f18:	bfba      	itte	lt
 8017f1a:	461c      	movlt	r4, r3
 8017f1c:	2501      	movlt	r5, #1
 8017f1e:	2500      	movge	r5, #0
 8017f20:	f7ff fd40 	bl	80179a4 <_Balloc>
 8017f24:	4602      	mov	r2, r0
 8017f26:	b918      	cbnz	r0, 8017f30 <__mdiff+0x60>
 8017f28:	4b31      	ldr	r3, [pc, #196]	@ (8017ff0 <__mdiff+0x120>)
 8017f2a:	f240 2145 	movw	r1, #581	@ 0x245
 8017f2e:	e7e3      	b.n	8017ef8 <__mdiff+0x28>
 8017f30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017f34:	6926      	ldr	r6, [r4, #16]
 8017f36:	60c5      	str	r5, [r0, #12]
 8017f38:	f109 0310 	add.w	r3, r9, #16
 8017f3c:	f109 0514 	add.w	r5, r9, #20
 8017f40:	f104 0e14 	add.w	lr, r4, #20
 8017f44:	f100 0b14 	add.w	fp, r0, #20
 8017f48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017f4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017f50:	9301      	str	r3, [sp, #4]
 8017f52:	46d9      	mov	r9, fp
 8017f54:	f04f 0c00 	mov.w	ip, #0
 8017f58:	9b01      	ldr	r3, [sp, #4]
 8017f5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017f5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017f62:	9301      	str	r3, [sp, #4]
 8017f64:	fa1f f38a 	uxth.w	r3, sl
 8017f68:	4619      	mov	r1, r3
 8017f6a:	b283      	uxth	r3, r0
 8017f6c:	1acb      	subs	r3, r1, r3
 8017f6e:	0c00      	lsrs	r0, r0, #16
 8017f70:	4463      	add	r3, ip
 8017f72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017f76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017f7a:	b29b      	uxth	r3, r3
 8017f7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017f80:	4576      	cmp	r6, lr
 8017f82:	f849 3b04 	str.w	r3, [r9], #4
 8017f86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017f8a:	d8e5      	bhi.n	8017f58 <__mdiff+0x88>
 8017f8c:	1b33      	subs	r3, r6, r4
 8017f8e:	3b15      	subs	r3, #21
 8017f90:	f023 0303 	bic.w	r3, r3, #3
 8017f94:	3415      	adds	r4, #21
 8017f96:	3304      	adds	r3, #4
 8017f98:	42a6      	cmp	r6, r4
 8017f9a:	bf38      	it	cc
 8017f9c:	2304      	movcc	r3, #4
 8017f9e:	441d      	add	r5, r3
 8017fa0:	445b      	add	r3, fp
 8017fa2:	461e      	mov	r6, r3
 8017fa4:	462c      	mov	r4, r5
 8017fa6:	4544      	cmp	r4, r8
 8017fa8:	d30e      	bcc.n	8017fc8 <__mdiff+0xf8>
 8017faa:	f108 0103 	add.w	r1, r8, #3
 8017fae:	1b49      	subs	r1, r1, r5
 8017fb0:	f021 0103 	bic.w	r1, r1, #3
 8017fb4:	3d03      	subs	r5, #3
 8017fb6:	45a8      	cmp	r8, r5
 8017fb8:	bf38      	it	cc
 8017fba:	2100      	movcc	r1, #0
 8017fbc:	440b      	add	r3, r1
 8017fbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017fc2:	b191      	cbz	r1, 8017fea <__mdiff+0x11a>
 8017fc4:	6117      	str	r7, [r2, #16]
 8017fc6:	e79d      	b.n	8017f04 <__mdiff+0x34>
 8017fc8:	f854 1b04 	ldr.w	r1, [r4], #4
 8017fcc:	46e6      	mov	lr, ip
 8017fce:	0c08      	lsrs	r0, r1, #16
 8017fd0:	fa1c fc81 	uxtah	ip, ip, r1
 8017fd4:	4471      	add	r1, lr
 8017fd6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017fda:	b289      	uxth	r1, r1
 8017fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017fe0:	f846 1b04 	str.w	r1, [r6], #4
 8017fe4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017fe8:	e7dd      	b.n	8017fa6 <__mdiff+0xd6>
 8017fea:	3f01      	subs	r7, #1
 8017fec:	e7e7      	b.n	8017fbe <__mdiff+0xee>
 8017fee:	bf00      	nop
 8017ff0:	080192ac 	.word	0x080192ac
 8017ff4:	080192bd 	.word	0x080192bd

08017ff8 <__d2b>:
 8017ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017ffc:	460f      	mov	r7, r1
 8017ffe:	2101      	movs	r1, #1
 8018000:	ec59 8b10 	vmov	r8, r9, d0
 8018004:	4616      	mov	r6, r2
 8018006:	f7ff fccd 	bl	80179a4 <_Balloc>
 801800a:	4604      	mov	r4, r0
 801800c:	b930      	cbnz	r0, 801801c <__d2b+0x24>
 801800e:	4602      	mov	r2, r0
 8018010:	4b23      	ldr	r3, [pc, #140]	@ (80180a0 <__d2b+0xa8>)
 8018012:	4824      	ldr	r0, [pc, #144]	@ (80180a4 <__d2b+0xac>)
 8018014:	f240 310f 	movw	r1, #783	@ 0x30f
 8018018:	f000 fac8 	bl	80185ac <__assert_func>
 801801c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018024:	b10d      	cbz	r5, 801802a <__d2b+0x32>
 8018026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801802a:	9301      	str	r3, [sp, #4]
 801802c:	f1b8 0300 	subs.w	r3, r8, #0
 8018030:	d023      	beq.n	801807a <__d2b+0x82>
 8018032:	4668      	mov	r0, sp
 8018034:	9300      	str	r3, [sp, #0]
 8018036:	f7ff fd7c 	bl	8017b32 <__lo0bits>
 801803a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801803e:	b1d0      	cbz	r0, 8018076 <__d2b+0x7e>
 8018040:	f1c0 0320 	rsb	r3, r0, #32
 8018044:	fa02 f303 	lsl.w	r3, r2, r3
 8018048:	430b      	orrs	r3, r1
 801804a:	40c2      	lsrs	r2, r0
 801804c:	6163      	str	r3, [r4, #20]
 801804e:	9201      	str	r2, [sp, #4]
 8018050:	9b01      	ldr	r3, [sp, #4]
 8018052:	61a3      	str	r3, [r4, #24]
 8018054:	2b00      	cmp	r3, #0
 8018056:	bf0c      	ite	eq
 8018058:	2201      	moveq	r2, #1
 801805a:	2202      	movne	r2, #2
 801805c:	6122      	str	r2, [r4, #16]
 801805e:	b1a5      	cbz	r5, 801808a <__d2b+0x92>
 8018060:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018064:	4405      	add	r5, r0
 8018066:	603d      	str	r5, [r7, #0]
 8018068:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801806c:	6030      	str	r0, [r6, #0]
 801806e:	4620      	mov	r0, r4
 8018070:	b003      	add	sp, #12
 8018072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018076:	6161      	str	r1, [r4, #20]
 8018078:	e7ea      	b.n	8018050 <__d2b+0x58>
 801807a:	a801      	add	r0, sp, #4
 801807c:	f7ff fd59 	bl	8017b32 <__lo0bits>
 8018080:	9b01      	ldr	r3, [sp, #4]
 8018082:	6163      	str	r3, [r4, #20]
 8018084:	3020      	adds	r0, #32
 8018086:	2201      	movs	r2, #1
 8018088:	e7e8      	b.n	801805c <__d2b+0x64>
 801808a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801808e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018092:	6038      	str	r0, [r7, #0]
 8018094:	6918      	ldr	r0, [r3, #16]
 8018096:	f7ff fd2d 	bl	8017af4 <__hi0bits>
 801809a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801809e:	e7e5      	b.n	801806c <__d2b+0x74>
 80180a0:	080192ac 	.word	0x080192ac
 80180a4:	080192bd 	.word	0x080192bd

080180a8 <__sfputc_r>:
 80180a8:	6893      	ldr	r3, [r2, #8]
 80180aa:	3b01      	subs	r3, #1
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	b410      	push	{r4}
 80180b0:	6093      	str	r3, [r2, #8]
 80180b2:	da08      	bge.n	80180c6 <__sfputc_r+0x1e>
 80180b4:	6994      	ldr	r4, [r2, #24]
 80180b6:	42a3      	cmp	r3, r4
 80180b8:	db01      	blt.n	80180be <__sfputc_r+0x16>
 80180ba:	290a      	cmp	r1, #10
 80180bc:	d103      	bne.n	80180c6 <__sfputc_r+0x1e>
 80180be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180c2:	f7fe bc6e 	b.w	80169a2 <__swbuf_r>
 80180c6:	6813      	ldr	r3, [r2, #0]
 80180c8:	1c58      	adds	r0, r3, #1
 80180ca:	6010      	str	r0, [r2, #0]
 80180cc:	7019      	strb	r1, [r3, #0]
 80180ce:	4608      	mov	r0, r1
 80180d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180d4:	4770      	bx	lr

080180d6 <__sfputs_r>:
 80180d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180d8:	4606      	mov	r6, r0
 80180da:	460f      	mov	r7, r1
 80180dc:	4614      	mov	r4, r2
 80180de:	18d5      	adds	r5, r2, r3
 80180e0:	42ac      	cmp	r4, r5
 80180e2:	d101      	bne.n	80180e8 <__sfputs_r+0x12>
 80180e4:	2000      	movs	r0, #0
 80180e6:	e007      	b.n	80180f8 <__sfputs_r+0x22>
 80180e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180ec:	463a      	mov	r2, r7
 80180ee:	4630      	mov	r0, r6
 80180f0:	f7ff ffda 	bl	80180a8 <__sfputc_r>
 80180f4:	1c43      	adds	r3, r0, #1
 80180f6:	d1f3      	bne.n	80180e0 <__sfputs_r+0xa>
 80180f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080180fc <_vfiprintf_r>:
 80180fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018100:	460d      	mov	r5, r1
 8018102:	b09d      	sub	sp, #116	@ 0x74
 8018104:	4614      	mov	r4, r2
 8018106:	4698      	mov	r8, r3
 8018108:	4606      	mov	r6, r0
 801810a:	b118      	cbz	r0, 8018114 <_vfiprintf_r+0x18>
 801810c:	6a03      	ldr	r3, [r0, #32]
 801810e:	b90b      	cbnz	r3, 8018114 <_vfiprintf_r+0x18>
 8018110:	f7fe fb5e 	bl	80167d0 <__sinit>
 8018114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018116:	07d9      	lsls	r1, r3, #31
 8018118:	d405      	bmi.n	8018126 <_vfiprintf_r+0x2a>
 801811a:	89ab      	ldrh	r3, [r5, #12]
 801811c:	059a      	lsls	r2, r3, #22
 801811e:	d402      	bmi.n	8018126 <_vfiprintf_r+0x2a>
 8018120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018122:	f7fe fd50 	bl	8016bc6 <__retarget_lock_acquire_recursive>
 8018126:	89ab      	ldrh	r3, [r5, #12]
 8018128:	071b      	lsls	r3, r3, #28
 801812a:	d501      	bpl.n	8018130 <_vfiprintf_r+0x34>
 801812c:	692b      	ldr	r3, [r5, #16]
 801812e:	b99b      	cbnz	r3, 8018158 <_vfiprintf_r+0x5c>
 8018130:	4629      	mov	r1, r5
 8018132:	4630      	mov	r0, r6
 8018134:	f7fe fc74 	bl	8016a20 <__swsetup_r>
 8018138:	b170      	cbz	r0, 8018158 <_vfiprintf_r+0x5c>
 801813a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801813c:	07dc      	lsls	r4, r3, #31
 801813e:	d504      	bpl.n	801814a <_vfiprintf_r+0x4e>
 8018140:	f04f 30ff 	mov.w	r0, #4294967295
 8018144:	b01d      	add	sp, #116	@ 0x74
 8018146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801814a:	89ab      	ldrh	r3, [r5, #12]
 801814c:	0598      	lsls	r0, r3, #22
 801814e:	d4f7      	bmi.n	8018140 <_vfiprintf_r+0x44>
 8018150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018152:	f7fe fd39 	bl	8016bc8 <__retarget_lock_release_recursive>
 8018156:	e7f3      	b.n	8018140 <_vfiprintf_r+0x44>
 8018158:	2300      	movs	r3, #0
 801815a:	9309      	str	r3, [sp, #36]	@ 0x24
 801815c:	2320      	movs	r3, #32
 801815e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018162:	f8cd 800c 	str.w	r8, [sp, #12]
 8018166:	2330      	movs	r3, #48	@ 0x30
 8018168:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018318 <_vfiprintf_r+0x21c>
 801816c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018170:	f04f 0901 	mov.w	r9, #1
 8018174:	4623      	mov	r3, r4
 8018176:	469a      	mov	sl, r3
 8018178:	f813 2b01 	ldrb.w	r2, [r3], #1
 801817c:	b10a      	cbz	r2, 8018182 <_vfiprintf_r+0x86>
 801817e:	2a25      	cmp	r2, #37	@ 0x25
 8018180:	d1f9      	bne.n	8018176 <_vfiprintf_r+0x7a>
 8018182:	ebba 0b04 	subs.w	fp, sl, r4
 8018186:	d00b      	beq.n	80181a0 <_vfiprintf_r+0xa4>
 8018188:	465b      	mov	r3, fp
 801818a:	4622      	mov	r2, r4
 801818c:	4629      	mov	r1, r5
 801818e:	4630      	mov	r0, r6
 8018190:	f7ff ffa1 	bl	80180d6 <__sfputs_r>
 8018194:	3001      	adds	r0, #1
 8018196:	f000 80a7 	beq.w	80182e8 <_vfiprintf_r+0x1ec>
 801819a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801819c:	445a      	add	r2, fp
 801819e:	9209      	str	r2, [sp, #36]	@ 0x24
 80181a0:	f89a 3000 	ldrb.w	r3, [sl]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	f000 809f 	beq.w	80182e8 <_vfiprintf_r+0x1ec>
 80181aa:	2300      	movs	r3, #0
 80181ac:	f04f 32ff 	mov.w	r2, #4294967295
 80181b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181b4:	f10a 0a01 	add.w	sl, sl, #1
 80181b8:	9304      	str	r3, [sp, #16]
 80181ba:	9307      	str	r3, [sp, #28]
 80181bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80181c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80181c2:	4654      	mov	r4, sl
 80181c4:	2205      	movs	r2, #5
 80181c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181ca:	4853      	ldr	r0, [pc, #332]	@ (8018318 <_vfiprintf_r+0x21c>)
 80181cc:	f7e8 f888 	bl	80002e0 <memchr>
 80181d0:	9a04      	ldr	r2, [sp, #16]
 80181d2:	b9d8      	cbnz	r0, 801820c <_vfiprintf_r+0x110>
 80181d4:	06d1      	lsls	r1, r2, #27
 80181d6:	bf44      	itt	mi
 80181d8:	2320      	movmi	r3, #32
 80181da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80181de:	0713      	lsls	r3, r2, #28
 80181e0:	bf44      	itt	mi
 80181e2:	232b      	movmi	r3, #43	@ 0x2b
 80181e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80181e8:	f89a 3000 	ldrb.w	r3, [sl]
 80181ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80181ee:	d015      	beq.n	801821c <_vfiprintf_r+0x120>
 80181f0:	9a07      	ldr	r2, [sp, #28]
 80181f2:	4654      	mov	r4, sl
 80181f4:	2000      	movs	r0, #0
 80181f6:	f04f 0c0a 	mov.w	ip, #10
 80181fa:	4621      	mov	r1, r4
 80181fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018200:	3b30      	subs	r3, #48	@ 0x30
 8018202:	2b09      	cmp	r3, #9
 8018204:	d94b      	bls.n	801829e <_vfiprintf_r+0x1a2>
 8018206:	b1b0      	cbz	r0, 8018236 <_vfiprintf_r+0x13a>
 8018208:	9207      	str	r2, [sp, #28]
 801820a:	e014      	b.n	8018236 <_vfiprintf_r+0x13a>
 801820c:	eba0 0308 	sub.w	r3, r0, r8
 8018210:	fa09 f303 	lsl.w	r3, r9, r3
 8018214:	4313      	orrs	r3, r2
 8018216:	9304      	str	r3, [sp, #16]
 8018218:	46a2      	mov	sl, r4
 801821a:	e7d2      	b.n	80181c2 <_vfiprintf_r+0xc6>
 801821c:	9b03      	ldr	r3, [sp, #12]
 801821e:	1d19      	adds	r1, r3, #4
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	9103      	str	r1, [sp, #12]
 8018224:	2b00      	cmp	r3, #0
 8018226:	bfbb      	ittet	lt
 8018228:	425b      	neglt	r3, r3
 801822a:	f042 0202 	orrlt.w	r2, r2, #2
 801822e:	9307      	strge	r3, [sp, #28]
 8018230:	9307      	strlt	r3, [sp, #28]
 8018232:	bfb8      	it	lt
 8018234:	9204      	strlt	r2, [sp, #16]
 8018236:	7823      	ldrb	r3, [r4, #0]
 8018238:	2b2e      	cmp	r3, #46	@ 0x2e
 801823a:	d10a      	bne.n	8018252 <_vfiprintf_r+0x156>
 801823c:	7863      	ldrb	r3, [r4, #1]
 801823e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018240:	d132      	bne.n	80182a8 <_vfiprintf_r+0x1ac>
 8018242:	9b03      	ldr	r3, [sp, #12]
 8018244:	1d1a      	adds	r2, r3, #4
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	9203      	str	r2, [sp, #12]
 801824a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801824e:	3402      	adds	r4, #2
 8018250:	9305      	str	r3, [sp, #20]
 8018252:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018328 <_vfiprintf_r+0x22c>
 8018256:	7821      	ldrb	r1, [r4, #0]
 8018258:	2203      	movs	r2, #3
 801825a:	4650      	mov	r0, sl
 801825c:	f7e8 f840 	bl	80002e0 <memchr>
 8018260:	b138      	cbz	r0, 8018272 <_vfiprintf_r+0x176>
 8018262:	9b04      	ldr	r3, [sp, #16]
 8018264:	eba0 000a 	sub.w	r0, r0, sl
 8018268:	2240      	movs	r2, #64	@ 0x40
 801826a:	4082      	lsls	r2, r0
 801826c:	4313      	orrs	r3, r2
 801826e:	3401      	adds	r4, #1
 8018270:	9304      	str	r3, [sp, #16]
 8018272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018276:	4829      	ldr	r0, [pc, #164]	@ (801831c <_vfiprintf_r+0x220>)
 8018278:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801827c:	2206      	movs	r2, #6
 801827e:	f7e8 f82f 	bl	80002e0 <memchr>
 8018282:	2800      	cmp	r0, #0
 8018284:	d03f      	beq.n	8018306 <_vfiprintf_r+0x20a>
 8018286:	4b26      	ldr	r3, [pc, #152]	@ (8018320 <_vfiprintf_r+0x224>)
 8018288:	bb1b      	cbnz	r3, 80182d2 <_vfiprintf_r+0x1d6>
 801828a:	9b03      	ldr	r3, [sp, #12]
 801828c:	3307      	adds	r3, #7
 801828e:	f023 0307 	bic.w	r3, r3, #7
 8018292:	3308      	adds	r3, #8
 8018294:	9303      	str	r3, [sp, #12]
 8018296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018298:	443b      	add	r3, r7
 801829a:	9309      	str	r3, [sp, #36]	@ 0x24
 801829c:	e76a      	b.n	8018174 <_vfiprintf_r+0x78>
 801829e:	fb0c 3202 	mla	r2, ip, r2, r3
 80182a2:	460c      	mov	r4, r1
 80182a4:	2001      	movs	r0, #1
 80182a6:	e7a8      	b.n	80181fa <_vfiprintf_r+0xfe>
 80182a8:	2300      	movs	r3, #0
 80182aa:	3401      	adds	r4, #1
 80182ac:	9305      	str	r3, [sp, #20]
 80182ae:	4619      	mov	r1, r3
 80182b0:	f04f 0c0a 	mov.w	ip, #10
 80182b4:	4620      	mov	r0, r4
 80182b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182ba:	3a30      	subs	r2, #48	@ 0x30
 80182bc:	2a09      	cmp	r2, #9
 80182be:	d903      	bls.n	80182c8 <_vfiprintf_r+0x1cc>
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d0c6      	beq.n	8018252 <_vfiprintf_r+0x156>
 80182c4:	9105      	str	r1, [sp, #20]
 80182c6:	e7c4      	b.n	8018252 <_vfiprintf_r+0x156>
 80182c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80182cc:	4604      	mov	r4, r0
 80182ce:	2301      	movs	r3, #1
 80182d0:	e7f0      	b.n	80182b4 <_vfiprintf_r+0x1b8>
 80182d2:	ab03      	add	r3, sp, #12
 80182d4:	9300      	str	r3, [sp, #0]
 80182d6:	462a      	mov	r2, r5
 80182d8:	4b12      	ldr	r3, [pc, #72]	@ (8018324 <_vfiprintf_r+0x228>)
 80182da:	a904      	add	r1, sp, #16
 80182dc:	4630      	mov	r0, r6
 80182de:	f7fd fe43 	bl	8015f68 <_printf_float>
 80182e2:	4607      	mov	r7, r0
 80182e4:	1c78      	adds	r0, r7, #1
 80182e6:	d1d6      	bne.n	8018296 <_vfiprintf_r+0x19a>
 80182e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80182ea:	07d9      	lsls	r1, r3, #31
 80182ec:	d405      	bmi.n	80182fa <_vfiprintf_r+0x1fe>
 80182ee:	89ab      	ldrh	r3, [r5, #12]
 80182f0:	059a      	lsls	r2, r3, #22
 80182f2:	d402      	bmi.n	80182fa <_vfiprintf_r+0x1fe>
 80182f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80182f6:	f7fe fc67 	bl	8016bc8 <__retarget_lock_release_recursive>
 80182fa:	89ab      	ldrh	r3, [r5, #12]
 80182fc:	065b      	lsls	r3, r3, #25
 80182fe:	f53f af1f 	bmi.w	8018140 <_vfiprintf_r+0x44>
 8018302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018304:	e71e      	b.n	8018144 <_vfiprintf_r+0x48>
 8018306:	ab03      	add	r3, sp, #12
 8018308:	9300      	str	r3, [sp, #0]
 801830a:	462a      	mov	r2, r5
 801830c:	4b05      	ldr	r3, [pc, #20]	@ (8018324 <_vfiprintf_r+0x228>)
 801830e:	a904      	add	r1, sp, #16
 8018310:	4630      	mov	r0, r6
 8018312:	f7fe f8b1 	bl	8016478 <_printf_i>
 8018316:	e7e4      	b.n	80182e2 <_vfiprintf_r+0x1e6>
 8018318:	08019418 	.word	0x08019418
 801831c:	08019422 	.word	0x08019422
 8018320:	08015f69 	.word	0x08015f69
 8018324:	080180d7 	.word	0x080180d7
 8018328:	0801941e 	.word	0x0801941e

0801832c <__sflush_r>:
 801832c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018334:	0716      	lsls	r6, r2, #28
 8018336:	4605      	mov	r5, r0
 8018338:	460c      	mov	r4, r1
 801833a:	d454      	bmi.n	80183e6 <__sflush_r+0xba>
 801833c:	684b      	ldr	r3, [r1, #4]
 801833e:	2b00      	cmp	r3, #0
 8018340:	dc02      	bgt.n	8018348 <__sflush_r+0x1c>
 8018342:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018344:	2b00      	cmp	r3, #0
 8018346:	dd48      	ble.n	80183da <__sflush_r+0xae>
 8018348:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801834a:	2e00      	cmp	r6, #0
 801834c:	d045      	beq.n	80183da <__sflush_r+0xae>
 801834e:	2300      	movs	r3, #0
 8018350:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018354:	682f      	ldr	r7, [r5, #0]
 8018356:	6a21      	ldr	r1, [r4, #32]
 8018358:	602b      	str	r3, [r5, #0]
 801835a:	d030      	beq.n	80183be <__sflush_r+0x92>
 801835c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801835e:	89a3      	ldrh	r3, [r4, #12]
 8018360:	0759      	lsls	r1, r3, #29
 8018362:	d505      	bpl.n	8018370 <__sflush_r+0x44>
 8018364:	6863      	ldr	r3, [r4, #4]
 8018366:	1ad2      	subs	r2, r2, r3
 8018368:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801836a:	b10b      	cbz	r3, 8018370 <__sflush_r+0x44>
 801836c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801836e:	1ad2      	subs	r2, r2, r3
 8018370:	2300      	movs	r3, #0
 8018372:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018374:	6a21      	ldr	r1, [r4, #32]
 8018376:	4628      	mov	r0, r5
 8018378:	47b0      	blx	r6
 801837a:	1c43      	adds	r3, r0, #1
 801837c:	89a3      	ldrh	r3, [r4, #12]
 801837e:	d106      	bne.n	801838e <__sflush_r+0x62>
 8018380:	6829      	ldr	r1, [r5, #0]
 8018382:	291d      	cmp	r1, #29
 8018384:	d82b      	bhi.n	80183de <__sflush_r+0xb2>
 8018386:	4a2a      	ldr	r2, [pc, #168]	@ (8018430 <__sflush_r+0x104>)
 8018388:	410a      	asrs	r2, r1
 801838a:	07d6      	lsls	r6, r2, #31
 801838c:	d427      	bmi.n	80183de <__sflush_r+0xb2>
 801838e:	2200      	movs	r2, #0
 8018390:	6062      	str	r2, [r4, #4]
 8018392:	04d9      	lsls	r1, r3, #19
 8018394:	6922      	ldr	r2, [r4, #16]
 8018396:	6022      	str	r2, [r4, #0]
 8018398:	d504      	bpl.n	80183a4 <__sflush_r+0x78>
 801839a:	1c42      	adds	r2, r0, #1
 801839c:	d101      	bne.n	80183a2 <__sflush_r+0x76>
 801839e:	682b      	ldr	r3, [r5, #0]
 80183a0:	b903      	cbnz	r3, 80183a4 <__sflush_r+0x78>
 80183a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80183a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80183a6:	602f      	str	r7, [r5, #0]
 80183a8:	b1b9      	cbz	r1, 80183da <__sflush_r+0xae>
 80183aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80183ae:	4299      	cmp	r1, r3
 80183b0:	d002      	beq.n	80183b8 <__sflush_r+0x8c>
 80183b2:	4628      	mov	r0, r5
 80183b4:	f7ff f9f6 	bl	80177a4 <_free_r>
 80183b8:	2300      	movs	r3, #0
 80183ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80183bc:	e00d      	b.n	80183da <__sflush_r+0xae>
 80183be:	2301      	movs	r3, #1
 80183c0:	4628      	mov	r0, r5
 80183c2:	47b0      	blx	r6
 80183c4:	4602      	mov	r2, r0
 80183c6:	1c50      	adds	r0, r2, #1
 80183c8:	d1c9      	bne.n	801835e <__sflush_r+0x32>
 80183ca:	682b      	ldr	r3, [r5, #0]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d0c6      	beq.n	801835e <__sflush_r+0x32>
 80183d0:	2b1d      	cmp	r3, #29
 80183d2:	d001      	beq.n	80183d8 <__sflush_r+0xac>
 80183d4:	2b16      	cmp	r3, #22
 80183d6:	d11e      	bne.n	8018416 <__sflush_r+0xea>
 80183d8:	602f      	str	r7, [r5, #0]
 80183da:	2000      	movs	r0, #0
 80183dc:	e022      	b.n	8018424 <__sflush_r+0xf8>
 80183de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80183e2:	b21b      	sxth	r3, r3
 80183e4:	e01b      	b.n	801841e <__sflush_r+0xf2>
 80183e6:	690f      	ldr	r7, [r1, #16]
 80183e8:	2f00      	cmp	r7, #0
 80183ea:	d0f6      	beq.n	80183da <__sflush_r+0xae>
 80183ec:	0793      	lsls	r3, r2, #30
 80183ee:	680e      	ldr	r6, [r1, #0]
 80183f0:	bf08      	it	eq
 80183f2:	694b      	ldreq	r3, [r1, #20]
 80183f4:	600f      	str	r7, [r1, #0]
 80183f6:	bf18      	it	ne
 80183f8:	2300      	movne	r3, #0
 80183fa:	eba6 0807 	sub.w	r8, r6, r7
 80183fe:	608b      	str	r3, [r1, #8]
 8018400:	f1b8 0f00 	cmp.w	r8, #0
 8018404:	dde9      	ble.n	80183da <__sflush_r+0xae>
 8018406:	6a21      	ldr	r1, [r4, #32]
 8018408:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801840a:	4643      	mov	r3, r8
 801840c:	463a      	mov	r2, r7
 801840e:	4628      	mov	r0, r5
 8018410:	47b0      	blx	r6
 8018412:	2800      	cmp	r0, #0
 8018414:	dc08      	bgt.n	8018428 <__sflush_r+0xfc>
 8018416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801841a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801841e:	81a3      	strh	r3, [r4, #12]
 8018420:	f04f 30ff 	mov.w	r0, #4294967295
 8018424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018428:	4407      	add	r7, r0
 801842a:	eba8 0800 	sub.w	r8, r8, r0
 801842e:	e7e7      	b.n	8018400 <__sflush_r+0xd4>
 8018430:	dfbffffe 	.word	0xdfbffffe

08018434 <_fflush_r>:
 8018434:	b538      	push	{r3, r4, r5, lr}
 8018436:	690b      	ldr	r3, [r1, #16]
 8018438:	4605      	mov	r5, r0
 801843a:	460c      	mov	r4, r1
 801843c:	b913      	cbnz	r3, 8018444 <_fflush_r+0x10>
 801843e:	2500      	movs	r5, #0
 8018440:	4628      	mov	r0, r5
 8018442:	bd38      	pop	{r3, r4, r5, pc}
 8018444:	b118      	cbz	r0, 801844e <_fflush_r+0x1a>
 8018446:	6a03      	ldr	r3, [r0, #32]
 8018448:	b90b      	cbnz	r3, 801844e <_fflush_r+0x1a>
 801844a:	f7fe f9c1 	bl	80167d0 <__sinit>
 801844e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d0f3      	beq.n	801843e <_fflush_r+0xa>
 8018456:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018458:	07d0      	lsls	r0, r2, #31
 801845a:	d404      	bmi.n	8018466 <_fflush_r+0x32>
 801845c:	0599      	lsls	r1, r3, #22
 801845e:	d402      	bmi.n	8018466 <_fflush_r+0x32>
 8018460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018462:	f7fe fbb0 	bl	8016bc6 <__retarget_lock_acquire_recursive>
 8018466:	4628      	mov	r0, r5
 8018468:	4621      	mov	r1, r4
 801846a:	f7ff ff5f 	bl	801832c <__sflush_r>
 801846e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018470:	07da      	lsls	r2, r3, #31
 8018472:	4605      	mov	r5, r0
 8018474:	d4e4      	bmi.n	8018440 <_fflush_r+0xc>
 8018476:	89a3      	ldrh	r3, [r4, #12]
 8018478:	059b      	lsls	r3, r3, #22
 801847a:	d4e1      	bmi.n	8018440 <_fflush_r+0xc>
 801847c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801847e:	f7fe fba3 	bl	8016bc8 <__retarget_lock_release_recursive>
 8018482:	e7dd      	b.n	8018440 <_fflush_r+0xc>

08018484 <__swhatbuf_r>:
 8018484:	b570      	push	{r4, r5, r6, lr}
 8018486:	460c      	mov	r4, r1
 8018488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801848c:	2900      	cmp	r1, #0
 801848e:	b096      	sub	sp, #88	@ 0x58
 8018490:	4615      	mov	r5, r2
 8018492:	461e      	mov	r6, r3
 8018494:	da0d      	bge.n	80184b2 <__swhatbuf_r+0x2e>
 8018496:	89a3      	ldrh	r3, [r4, #12]
 8018498:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801849c:	f04f 0100 	mov.w	r1, #0
 80184a0:	bf14      	ite	ne
 80184a2:	2340      	movne	r3, #64	@ 0x40
 80184a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80184a8:	2000      	movs	r0, #0
 80184aa:	6031      	str	r1, [r6, #0]
 80184ac:	602b      	str	r3, [r5, #0]
 80184ae:	b016      	add	sp, #88	@ 0x58
 80184b0:	bd70      	pop	{r4, r5, r6, pc}
 80184b2:	466a      	mov	r2, sp
 80184b4:	f000 f848 	bl	8018548 <_fstat_r>
 80184b8:	2800      	cmp	r0, #0
 80184ba:	dbec      	blt.n	8018496 <__swhatbuf_r+0x12>
 80184bc:	9901      	ldr	r1, [sp, #4]
 80184be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80184c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80184c6:	4259      	negs	r1, r3
 80184c8:	4159      	adcs	r1, r3
 80184ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80184ce:	e7eb      	b.n	80184a8 <__swhatbuf_r+0x24>

080184d0 <__smakebuf_r>:
 80184d0:	898b      	ldrh	r3, [r1, #12]
 80184d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80184d4:	079d      	lsls	r5, r3, #30
 80184d6:	4606      	mov	r6, r0
 80184d8:	460c      	mov	r4, r1
 80184da:	d507      	bpl.n	80184ec <__smakebuf_r+0x1c>
 80184dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80184e0:	6023      	str	r3, [r4, #0]
 80184e2:	6123      	str	r3, [r4, #16]
 80184e4:	2301      	movs	r3, #1
 80184e6:	6163      	str	r3, [r4, #20]
 80184e8:	b003      	add	sp, #12
 80184ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184ec:	ab01      	add	r3, sp, #4
 80184ee:	466a      	mov	r2, sp
 80184f0:	f7ff ffc8 	bl	8018484 <__swhatbuf_r>
 80184f4:	9f00      	ldr	r7, [sp, #0]
 80184f6:	4605      	mov	r5, r0
 80184f8:	4639      	mov	r1, r7
 80184fa:	4630      	mov	r0, r6
 80184fc:	f7ff f9c6 	bl	801788c <_malloc_r>
 8018500:	b948      	cbnz	r0, 8018516 <__smakebuf_r+0x46>
 8018502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018506:	059a      	lsls	r2, r3, #22
 8018508:	d4ee      	bmi.n	80184e8 <__smakebuf_r+0x18>
 801850a:	f023 0303 	bic.w	r3, r3, #3
 801850e:	f043 0302 	orr.w	r3, r3, #2
 8018512:	81a3      	strh	r3, [r4, #12]
 8018514:	e7e2      	b.n	80184dc <__smakebuf_r+0xc>
 8018516:	89a3      	ldrh	r3, [r4, #12]
 8018518:	6020      	str	r0, [r4, #0]
 801851a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801851e:	81a3      	strh	r3, [r4, #12]
 8018520:	9b01      	ldr	r3, [sp, #4]
 8018522:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018526:	b15b      	cbz	r3, 8018540 <__smakebuf_r+0x70>
 8018528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801852c:	4630      	mov	r0, r6
 801852e:	f000 f81d 	bl	801856c <_isatty_r>
 8018532:	b128      	cbz	r0, 8018540 <__smakebuf_r+0x70>
 8018534:	89a3      	ldrh	r3, [r4, #12]
 8018536:	f023 0303 	bic.w	r3, r3, #3
 801853a:	f043 0301 	orr.w	r3, r3, #1
 801853e:	81a3      	strh	r3, [r4, #12]
 8018540:	89a3      	ldrh	r3, [r4, #12]
 8018542:	431d      	orrs	r5, r3
 8018544:	81a5      	strh	r5, [r4, #12]
 8018546:	e7cf      	b.n	80184e8 <__smakebuf_r+0x18>

08018548 <_fstat_r>:
 8018548:	b538      	push	{r3, r4, r5, lr}
 801854a:	4d07      	ldr	r5, [pc, #28]	@ (8018568 <_fstat_r+0x20>)
 801854c:	2300      	movs	r3, #0
 801854e:	4604      	mov	r4, r0
 8018550:	4608      	mov	r0, r1
 8018552:	4611      	mov	r1, r2
 8018554:	602b      	str	r3, [r5, #0]
 8018556:	f7ec f8a9 	bl	80046ac <_fstat>
 801855a:	1c43      	adds	r3, r0, #1
 801855c:	d102      	bne.n	8018564 <_fstat_r+0x1c>
 801855e:	682b      	ldr	r3, [r5, #0]
 8018560:	b103      	cbz	r3, 8018564 <_fstat_r+0x1c>
 8018562:	6023      	str	r3, [r4, #0]
 8018564:	bd38      	pop	{r3, r4, r5, pc}
 8018566:	bf00      	nop
 8018568:	24001764 	.word	0x24001764

0801856c <_isatty_r>:
 801856c:	b538      	push	{r3, r4, r5, lr}
 801856e:	4d06      	ldr	r5, [pc, #24]	@ (8018588 <_isatty_r+0x1c>)
 8018570:	2300      	movs	r3, #0
 8018572:	4604      	mov	r4, r0
 8018574:	4608      	mov	r0, r1
 8018576:	602b      	str	r3, [r5, #0]
 8018578:	f7ec f8a8 	bl	80046cc <_isatty>
 801857c:	1c43      	adds	r3, r0, #1
 801857e:	d102      	bne.n	8018586 <_isatty_r+0x1a>
 8018580:	682b      	ldr	r3, [r5, #0]
 8018582:	b103      	cbz	r3, 8018586 <_isatty_r+0x1a>
 8018584:	6023      	str	r3, [r4, #0]
 8018586:	bd38      	pop	{r3, r4, r5, pc}
 8018588:	24001764 	.word	0x24001764

0801858c <_sbrk_r>:
 801858c:	b538      	push	{r3, r4, r5, lr}
 801858e:	4d06      	ldr	r5, [pc, #24]	@ (80185a8 <_sbrk_r+0x1c>)
 8018590:	2300      	movs	r3, #0
 8018592:	4604      	mov	r4, r0
 8018594:	4608      	mov	r0, r1
 8018596:	602b      	str	r3, [r5, #0]
 8018598:	f7ec f8b0 	bl	80046fc <_sbrk>
 801859c:	1c43      	adds	r3, r0, #1
 801859e:	d102      	bne.n	80185a6 <_sbrk_r+0x1a>
 80185a0:	682b      	ldr	r3, [r5, #0]
 80185a2:	b103      	cbz	r3, 80185a6 <_sbrk_r+0x1a>
 80185a4:	6023      	str	r3, [r4, #0]
 80185a6:	bd38      	pop	{r3, r4, r5, pc}
 80185a8:	24001764 	.word	0x24001764

080185ac <__assert_func>:
 80185ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80185ae:	4614      	mov	r4, r2
 80185b0:	461a      	mov	r2, r3
 80185b2:	4b09      	ldr	r3, [pc, #36]	@ (80185d8 <__assert_func+0x2c>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4605      	mov	r5, r0
 80185b8:	68d8      	ldr	r0, [r3, #12]
 80185ba:	b954      	cbnz	r4, 80185d2 <__assert_func+0x26>
 80185bc:	4b07      	ldr	r3, [pc, #28]	@ (80185dc <__assert_func+0x30>)
 80185be:	461c      	mov	r4, r3
 80185c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80185c4:	9100      	str	r1, [sp, #0]
 80185c6:	462b      	mov	r3, r5
 80185c8:	4905      	ldr	r1, [pc, #20]	@ (80185e0 <__assert_func+0x34>)
 80185ca:	f000 f841 	bl	8018650 <fiprintf>
 80185ce:	f000 f851 	bl	8018674 <abort>
 80185d2:	4b04      	ldr	r3, [pc, #16]	@ (80185e4 <__assert_func+0x38>)
 80185d4:	e7f4      	b.n	80185c0 <__assert_func+0x14>
 80185d6:	bf00      	nop
 80185d8:	24000134 	.word	0x24000134
 80185dc:	0801946e 	.word	0x0801946e
 80185e0:	08019440 	.word	0x08019440
 80185e4:	08019433 	.word	0x08019433

080185e8 <_calloc_r>:
 80185e8:	b570      	push	{r4, r5, r6, lr}
 80185ea:	fba1 5402 	umull	r5, r4, r1, r2
 80185ee:	b93c      	cbnz	r4, 8018600 <_calloc_r+0x18>
 80185f0:	4629      	mov	r1, r5
 80185f2:	f7ff f94b 	bl	801788c <_malloc_r>
 80185f6:	4606      	mov	r6, r0
 80185f8:	b928      	cbnz	r0, 8018606 <_calloc_r+0x1e>
 80185fa:	2600      	movs	r6, #0
 80185fc:	4630      	mov	r0, r6
 80185fe:	bd70      	pop	{r4, r5, r6, pc}
 8018600:	220c      	movs	r2, #12
 8018602:	6002      	str	r2, [r0, #0]
 8018604:	e7f9      	b.n	80185fa <_calloc_r+0x12>
 8018606:	462a      	mov	r2, r5
 8018608:	4621      	mov	r1, r4
 801860a:	f7fe fa5f 	bl	8016acc <memset>
 801860e:	e7f5      	b.n	80185fc <_calloc_r+0x14>

08018610 <__ascii_mbtowc>:
 8018610:	b082      	sub	sp, #8
 8018612:	b901      	cbnz	r1, 8018616 <__ascii_mbtowc+0x6>
 8018614:	a901      	add	r1, sp, #4
 8018616:	b142      	cbz	r2, 801862a <__ascii_mbtowc+0x1a>
 8018618:	b14b      	cbz	r3, 801862e <__ascii_mbtowc+0x1e>
 801861a:	7813      	ldrb	r3, [r2, #0]
 801861c:	600b      	str	r3, [r1, #0]
 801861e:	7812      	ldrb	r2, [r2, #0]
 8018620:	1e10      	subs	r0, r2, #0
 8018622:	bf18      	it	ne
 8018624:	2001      	movne	r0, #1
 8018626:	b002      	add	sp, #8
 8018628:	4770      	bx	lr
 801862a:	4610      	mov	r0, r2
 801862c:	e7fb      	b.n	8018626 <__ascii_mbtowc+0x16>
 801862e:	f06f 0001 	mvn.w	r0, #1
 8018632:	e7f8      	b.n	8018626 <__ascii_mbtowc+0x16>

08018634 <__ascii_wctomb>:
 8018634:	4603      	mov	r3, r0
 8018636:	4608      	mov	r0, r1
 8018638:	b141      	cbz	r1, 801864c <__ascii_wctomb+0x18>
 801863a:	2aff      	cmp	r2, #255	@ 0xff
 801863c:	d904      	bls.n	8018648 <__ascii_wctomb+0x14>
 801863e:	228a      	movs	r2, #138	@ 0x8a
 8018640:	601a      	str	r2, [r3, #0]
 8018642:	f04f 30ff 	mov.w	r0, #4294967295
 8018646:	4770      	bx	lr
 8018648:	700a      	strb	r2, [r1, #0]
 801864a:	2001      	movs	r0, #1
 801864c:	4770      	bx	lr
	...

08018650 <fiprintf>:
 8018650:	b40e      	push	{r1, r2, r3}
 8018652:	b503      	push	{r0, r1, lr}
 8018654:	4601      	mov	r1, r0
 8018656:	ab03      	add	r3, sp, #12
 8018658:	4805      	ldr	r0, [pc, #20]	@ (8018670 <fiprintf+0x20>)
 801865a:	f853 2b04 	ldr.w	r2, [r3], #4
 801865e:	6800      	ldr	r0, [r0, #0]
 8018660:	9301      	str	r3, [sp, #4]
 8018662:	f7ff fd4b 	bl	80180fc <_vfiprintf_r>
 8018666:	b002      	add	sp, #8
 8018668:	f85d eb04 	ldr.w	lr, [sp], #4
 801866c:	b003      	add	sp, #12
 801866e:	4770      	bx	lr
 8018670:	24000134 	.word	0x24000134

08018674 <abort>:
 8018674:	b508      	push	{r3, lr}
 8018676:	2006      	movs	r0, #6
 8018678:	f000 f82c 	bl	80186d4 <raise>
 801867c:	2001      	movs	r0, #1
 801867e:	f7eb ffe1 	bl	8004644 <_exit>

08018682 <_raise_r>:
 8018682:	291f      	cmp	r1, #31
 8018684:	b538      	push	{r3, r4, r5, lr}
 8018686:	4605      	mov	r5, r0
 8018688:	460c      	mov	r4, r1
 801868a:	d904      	bls.n	8018696 <_raise_r+0x14>
 801868c:	2316      	movs	r3, #22
 801868e:	6003      	str	r3, [r0, #0]
 8018690:	f04f 30ff 	mov.w	r0, #4294967295
 8018694:	bd38      	pop	{r3, r4, r5, pc}
 8018696:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018698:	b112      	cbz	r2, 80186a0 <_raise_r+0x1e>
 801869a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801869e:	b94b      	cbnz	r3, 80186b4 <_raise_r+0x32>
 80186a0:	4628      	mov	r0, r5
 80186a2:	f000 f831 	bl	8018708 <_getpid_r>
 80186a6:	4622      	mov	r2, r4
 80186a8:	4601      	mov	r1, r0
 80186aa:	4628      	mov	r0, r5
 80186ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186b0:	f000 b818 	b.w	80186e4 <_kill_r>
 80186b4:	2b01      	cmp	r3, #1
 80186b6:	d00a      	beq.n	80186ce <_raise_r+0x4c>
 80186b8:	1c59      	adds	r1, r3, #1
 80186ba:	d103      	bne.n	80186c4 <_raise_r+0x42>
 80186bc:	2316      	movs	r3, #22
 80186be:	6003      	str	r3, [r0, #0]
 80186c0:	2001      	movs	r0, #1
 80186c2:	e7e7      	b.n	8018694 <_raise_r+0x12>
 80186c4:	2100      	movs	r1, #0
 80186c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80186ca:	4620      	mov	r0, r4
 80186cc:	4798      	blx	r3
 80186ce:	2000      	movs	r0, #0
 80186d0:	e7e0      	b.n	8018694 <_raise_r+0x12>
	...

080186d4 <raise>:
 80186d4:	4b02      	ldr	r3, [pc, #8]	@ (80186e0 <raise+0xc>)
 80186d6:	4601      	mov	r1, r0
 80186d8:	6818      	ldr	r0, [r3, #0]
 80186da:	f7ff bfd2 	b.w	8018682 <_raise_r>
 80186de:	bf00      	nop
 80186e0:	24000134 	.word	0x24000134

080186e4 <_kill_r>:
 80186e4:	b538      	push	{r3, r4, r5, lr}
 80186e6:	4d07      	ldr	r5, [pc, #28]	@ (8018704 <_kill_r+0x20>)
 80186e8:	2300      	movs	r3, #0
 80186ea:	4604      	mov	r4, r0
 80186ec:	4608      	mov	r0, r1
 80186ee:	4611      	mov	r1, r2
 80186f0:	602b      	str	r3, [r5, #0]
 80186f2:	f7eb ff97 	bl	8004624 <_kill>
 80186f6:	1c43      	adds	r3, r0, #1
 80186f8:	d102      	bne.n	8018700 <_kill_r+0x1c>
 80186fa:	682b      	ldr	r3, [r5, #0]
 80186fc:	b103      	cbz	r3, 8018700 <_kill_r+0x1c>
 80186fe:	6023      	str	r3, [r4, #0]
 8018700:	bd38      	pop	{r3, r4, r5, pc}
 8018702:	bf00      	nop
 8018704:	24001764 	.word	0x24001764

08018708 <_getpid_r>:
 8018708:	f7eb bf84 	b.w	8004614 <_getpid>

0801870c <checkint>:
 801870c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018710:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8018714:	429a      	cmp	r2, r3
 8018716:	b570      	push	{r4, r5, r6, lr}
 8018718:	dd2a      	ble.n	8018770 <checkint+0x64>
 801871a:	f240 4333 	movw	r3, #1075	@ 0x433
 801871e:	429a      	cmp	r2, r3
 8018720:	dc24      	bgt.n	801876c <checkint+0x60>
 8018722:	1a9b      	subs	r3, r3, r2
 8018724:	f1a3 0620 	sub.w	r6, r3, #32
 8018728:	f04f 32ff 	mov.w	r2, #4294967295
 801872c:	fa02 f403 	lsl.w	r4, r2, r3
 8018730:	fa02 f606 	lsl.w	r6, r2, r6
 8018734:	f1c3 0520 	rsb	r5, r3, #32
 8018738:	fa22 f505 	lsr.w	r5, r2, r5
 801873c:	4334      	orrs	r4, r6
 801873e:	432c      	orrs	r4, r5
 8018740:	409a      	lsls	r2, r3
 8018742:	ea20 0202 	bic.w	r2, r0, r2
 8018746:	ea21 0404 	bic.w	r4, r1, r4
 801874a:	4322      	orrs	r2, r4
 801874c:	f1a3 0420 	sub.w	r4, r3, #32
 8018750:	f1c3 0220 	rsb	r2, r3, #32
 8018754:	d10c      	bne.n	8018770 <checkint+0x64>
 8018756:	40d8      	lsrs	r0, r3
 8018758:	fa01 f302 	lsl.w	r3, r1, r2
 801875c:	4318      	orrs	r0, r3
 801875e:	40e1      	lsrs	r1, r4
 8018760:	4308      	orrs	r0, r1
 8018762:	f000 0001 	and.w	r0, r0, #1
 8018766:	f1d0 0002 	rsbs	r0, r0, #2
 801876a:	bd70      	pop	{r4, r5, r6, pc}
 801876c:	2002      	movs	r0, #2
 801876e:	e7fc      	b.n	801876a <checkint+0x5e>
 8018770:	2000      	movs	r0, #0
 8018772:	e7fa      	b.n	801876a <checkint+0x5e>
 8018774:	0000      	movs	r0, r0
	...

08018778 <pow>:
 8018778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801877c:	ee10 4a90 	vmov	r4, s1
 8018780:	ed2d 8b0a 	vpush	{d8-d12}
 8018784:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8018788:	ee11 aa90 	vmov	sl, s3
 801878c:	f108 32ff 	add.w	r2, r8, #4294967295
 8018790:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8018794:	429a      	cmp	r2, r3
 8018796:	ee10 5a10 	vmov	r5, s0
 801879a:	ee11 0a10 	vmov	r0, s2
 801879e:	b087      	sub	sp, #28
 80187a0:	46c4      	mov	ip, r8
 80187a2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80187a6:	d806      	bhi.n	80187b6 <pow+0x3e>
 80187a8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 80187ac:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 80187b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80187b2:	f240 8157 	bls.w	8018a64 <pow+0x2ec>
 80187b6:	1802      	adds	r2, r0, r0
 80187b8:	eb4a 010a 	adc.w	r1, sl, sl
 80187bc:	f06f 0b01 	mvn.w	fp, #1
 80187c0:	1e57      	subs	r7, r2, #1
 80187c2:	f141 33ff 	adc.w	r3, r1, #4294967295
 80187c6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 80187ca:	45bb      	cmp	fp, r7
 80187cc:	eb7e 0303 	sbcs.w	r3, lr, r3
 80187d0:	d242      	bcs.n	8018858 <pow+0xe0>
 80187d2:	ea52 0301 	orrs.w	r3, r2, r1
 80187d6:	f04f 0300 	mov.w	r3, #0
 80187da:	d10c      	bne.n	80187f6 <pow+0x7e>
 80187dc:	196d      	adds	r5, r5, r5
 80187de:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 80187e2:	4164      	adcs	r4, r4
 80187e4:	42ab      	cmp	r3, r5
 80187e6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80187ea:	41a3      	sbcs	r3, r4
 80187ec:	f0c0 808f 	bcc.w	801890e <pow+0x196>
 80187f0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80187f4:	e02b      	b.n	801884e <pow+0xd6>
 80187f6:	4ed4      	ldr	r6, [pc, #848]	@ (8018b48 <pow+0x3d0>)
 80187f8:	42b4      	cmp	r4, r6
 80187fa:	bf08      	it	eq
 80187fc:	429d      	cmpeq	r5, r3
 80187fe:	d109      	bne.n	8018814 <pow+0x9c>
 8018800:	1800      	adds	r0, r0, r0
 8018802:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8018806:	eb4a 0a0a 	adc.w	sl, sl, sl
 801880a:	4283      	cmp	r3, r0
 801880c:	4bcf      	ldr	r3, [pc, #828]	@ (8018b4c <pow+0x3d4>)
 801880e:	eb73 030a 	sbcs.w	r3, r3, sl
 8018812:	e7eb      	b.n	80187ec <pow+0x74>
 8018814:	196d      	adds	r5, r5, r5
 8018816:	48ce      	ldr	r0, [pc, #824]	@ (8018b50 <pow+0x3d8>)
 8018818:	4164      	adcs	r4, r4
 801881a:	42ab      	cmp	r3, r5
 801881c:	eb70 0604 	sbcs.w	r6, r0, r4
 8018820:	d375      	bcc.n	801890e <pow+0x196>
 8018822:	4281      	cmp	r1, r0
 8018824:	bf08      	it	eq
 8018826:	429a      	cmpeq	r2, r3
 8018828:	d171      	bne.n	801890e <pow+0x196>
 801882a:	4aca      	ldr	r2, [pc, #808]	@ (8018b54 <pow+0x3dc>)
 801882c:	4294      	cmp	r4, r2
 801882e:	bf08      	it	eq
 8018830:	429d      	cmpeq	r5, r3
 8018832:	d0dd      	beq.n	80187f0 <pow+0x78>
 8018834:	4294      	cmp	r4, r2
 8018836:	ea6f 0a0a 	mvn.w	sl, sl
 801883a:	bf34      	ite	cc
 801883c:	2400      	movcc	r4, #0
 801883e:	2401      	movcs	r4, #1
 8018840:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8018844:	4554      	cmp	r4, sl
 8018846:	f040 81dc 	bne.w	8018c02 <pow+0x48a>
 801884a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801884e:	b007      	add	sp, #28
 8018850:	ecbd 8b0a 	vpop	{d8-d12}
 8018854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018858:	196f      	adds	r7, r5, r5
 801885a:	eb44 0904 	adc.w	r9, r4, r4
 801885e:	1e7a      	subs	r2, r7, #1
 8018860:	f169 0300 	sbc.w	r3, r9, #0
 8018864:	4593      	cmp	fp, r2
 8018866:	eb7e 0303 	sbcs.w	r3, lr, r3
 801886a:	d225      	bcs.n	80188b8 <pow+0x140>
 801886c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8018870:	2c00      	cmp	r4, #0
 8018872:	da13      	bge.n	801889c <pow+0x124>
 8018874:	4651      	mov	r1, sl
 8018876:	f7ff ff49 	bl	801870c <checkint>
 801887a:	2801      	cmp	r0, #1
 801887c:	d10e      	bne.n	801889c <pow+0x124>
 801887e:	eeb1 0b40 	vneg.f64	d0, d0
 8018882:	ea57 0909 	orrs.w	r9, r7, r9
 8018886:	d10b      	bne.n	80188a0 <pow+0x128>
 8018888:	f1ba 0f00 	cmp.w	sl, #0
 801888c:	dadf      	bge.n	801884e <pow+0xd6>
 801888e:	b007      	add	sp, #28
 8018890:	ecbd 8b0a 	vpop	{d8-d12}
 8018894:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018898:	f000 b9ee 	b.w	8018c78 <__math_divzero>
 801889c:	2000      	movs	r0, #0
 801889e:	e7f0      	b.n	8018882 <pow+0x10a>
 80188a0:	f1ba 0f00 	cmp.w	sl, #0
 80188a4:	dad3      	bge.n	801884e <pow+0xd6>
 80188a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80188aa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80188ae:	ed8d 7b00 	vstr	d7, [sp]
 80188b2:	ed9d 0b00 	vldr	d0, [sp]
 80188b6:	e7ca      	b.n	801884e <pow+0xd6>
 80188b8:	2c00      	cmp	r4, #0
 80188ba:	da2b      	bge.n	8018914 <pow+0x19c>
 80188bc:	4651      	mov	r1, sl
 80188be:	f7ff ff25 	bl	801870c <checkint>
 80188c2:	b930      	cbnz	r0, 80188d2 <pow+0x15a>
 80188c4:	b007      	add	sp, #28
 80188c6:	ecbd 8b0a 	vpop	{d8-d12}
 80188ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188ce:	f000 b9eb 	b.w	8018ca8 <__math_invalid>
 80188d2:	1e41      	subs	r1, r0, #1
 80188d4:	4248      	negs	r0, r1
 80188d6:	4148      	adcs	r0, r1
 80188d8:	0480      	lsls	r0, r0, #18
 80188da:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80188de:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80188e2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80188e6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 80188ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80188ec:	d92d      	bls.n	801894a <pow+0x1d2>
 80188ee:	4b96      	ldr	r3, [pc, #600]	@ (8018b48 <pow+0x3d0>)
 80188f0:	2000      	movs	r0, #0
 80188f2:	429c      	cmp	r4, r3
 80188f4:	bf08      	it	eq
 80188f6:	4285      	cmpeq	r5, r0
 80188f8:	f43f af7a 	beq.w	80187f0 <pow+0x78>
 80188fc:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8018900:	428a      	cmp	r2, r1
 8018902:	d80c      	bhi.n	801891e <pow+0x1a6>
 8018904:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8018908:	42a8      	cmp	r0, r5
 801890a:	41a3      	sbcs	r3, r4
 801890c:	d204      	bcs.n	8018918 <pow+0x1a0>
 801890e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8018912:	e79c      	b.n	801884e <pow+0xd6>
 8018914:	2000      	movs	r0, #0
 8018916:	e7e4      	b.n	80188e2 <pow+0x16a>
 8018918:	ee30 0b41 	vsub.f64	d0, d0, d1
 801891c:	e797      	b.n	801884e <pow+0xd6>
 801891e:	2d01      	cmp	r5, #1
 8018920:	eb74 0303 	sbcs.w	r3, r4, r3
 8018924:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8018928:	bf34      	ite	cc
 801892a:	2301      	movcc	r3, #1
 801892c:	2300      	movcs	r3, #0
 801892e:	4296      	cmp	r6, r2
 8018930:	bf8c      	ite	hi
 8018932:	2600      	movhi	r6, #0
 8018934:	2601      	movls	r6, #1
 8018936:	42b3      	cmp	r3, r6
 8018938:	f000 809c 	beq.w	8018a74 <pow+0x2fc>
 801893c:	b007      	add	sp, #28
 801893e:	ecbd 8b0a 	vpop	{d8-d12}
 8018942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018946:	f000 b98f 	b.w	8018c68 <__math_oflow>
 801894a:	f1bc 0f00 	cmp.w	ip, #0
 801894e:	d10a      	bne.n	8018966 <pow+0x1ee>
 8018950:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8018b38 <pow+0x3c0>
 8018954:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018958:	ec53 2b17 	vmov	r2, r3, d7
 801895c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8018960:	4615      	mov	r5, r2
 8018962:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8018966:	4a7c      	ldr	r2, [pc, #496]	@ (8018b58 <pow+0x3e0>)
 8018968:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801896c:	4422      	add	r2, r4
 801896e:	1513      	asrs	r3, r2, #20
 8018970:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8018974:	ee03 3a10 	vmov	s6, r3
 8018978:	0d12      	lsrs	r2, r2, #20
 801897a:	4b78      	ldr	r3, [pc, #480]	@ (8018b5c <pow+0x3e4>)
 801897c:	0512      	lsls	r2, r2, #20
 801897e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8018982:	1aa7      	subs	r7, r4, r2
 8018984:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8018988:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801898c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8018990:	1e2e      	subs	r6, r5, #0
 8018992:	ec47 6b14 	vmov	d4, r6, r7
 8018996:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801899a:	eea4 6b05 	vfma.f64	d6, d4, d5
 801899e:	ed93 5b00 	vldr	d5, [r3]
 80189a2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80189a6:	eea3 2b05 	vfma.f64	d2, d3, d5
 80189aa:	ed93 5b02 	vldr	d5, [r3, #8]
 80189ae:	ee36 4b02 	vadd.f64	d4, d6, d2
 80189b2:	ee32 2b44 	vsub.f64	d2, d2, d4
 80189b6:	eea3 7b05 	vfma.f64	d7, d3, d5
 80189ba:	ed93 5b04 	vldr	d5, [r3, #16]
 80189be:	ee32 2b06 	vadd.f64	d2, d2, d6
 80189c2:	ee37 7b02 	vadd.f64	d7, d7, d2
 80189c6:	ee26 5b05 	vmul.f64	d5, d6, d5
 80189ca:	ee26 0b05 	vmul.f64	d0, d6, d5
 80189ce:	ee34 8b00 	vadd.f64	d8, d4, d0
 80189d2:	eeb0 9b40 	vmov.f64	d9, d0
 80189d6:	ee34 4b48 	vsub.f64	d4, d4, d8
 80189da:	ee96 9b05 	vfnms.f64	d9, d6, d5
 80189de:	ee34 ab00 	vadd.f64	d10, d4, d0
 80189e2:	ed93 5b06 	vldr	d5, [r3, #24]
 80189e6:	ee26 bb00 	vmul.f64	d11, d6, d0
 80189ea:	ee37 7b09 	vadd.f64	d7, d7, d9
 80189ee:	ed93 4b08 	vldr	d4, [r3, #32]
 80189f2:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80189f6:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 80189fa:	eea6 5b04 	vfma.f64	d5, d6, d4
 80189fe:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8018a02:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8018a06:	eea6 4b03 	vfma.f64	d4, d6, d3
 8018a0a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8018a0e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8018a12:	eea0 4b03 	vfma.f64	d4, d0, d3
 8018a16:	eea0 5b04 	vfma.f64	d5, d0, d4
 8018a1a:	eeab 7b05 	vfma.f64	d7, d11, d5
 8018a1e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8018a22:	ee21 6b04 	vmul.f64	d6, d1, d4
 8018a26:	ee16 3a90 	vmov	r3, s13
 8018a2a:	eeb0 5b46 	vmov.f64	d5, d6
 8018a2e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8018a32:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8018a36:	18b2      	adds	r2, r6, r2
 8018a38:	2a3e      	cmp	r2, #62	@ 0x3e
 8018a3a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8018a3e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8018a42:	ee38 8b07 	vadd.f64	d8, d8, d7
 8018a46:	eea1 5b08 	vfma.f64	d5, d1, d8
 8018a4a:	d91b      	bls.n	8018a84 <pow+0x30c>
 8018a4c:	2a00      	cmp	r2, #0
 8018a4e:	da0b      	bge.n	8018a68 <pow+0x2f0>
 8018a50:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8018a54:	ee36 0b00 	vadd.f64	d0, d6, d0
 8018a58:	2800      	cmp	r0, #0
 8018a5a:	f43f aef8 	beq.w	801884e <pow+0xd6>
 8018a5e:	eeb1 0b40 	vneg.f64	d0, d0
 8018a62:	e6f4      	b.n	801884e <pow+0xd6>
 8018a64:	2000      	movs	r0, #0
 8018a66:	e77e      	b.n	8018966 <pow+0x1ee>
 8018a68:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8018a6c:	d909      	bls.n	8018a82 <pow+0x30a>
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	f6bf af64 	bge.w	801893c <pow+0x1c4>
 8018a74:	b007      	add	sp, #28
 8018a76:	ecbd 8b0a 	vpop	{d8-d12}
 8018a7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a7e:	f000 b8eb 	b.w	8018c58 <__math_uflow>
 8018a82:	2600      	movs	r6, #0
 8018a84:	4936      	ldr	r1, [pc, #216]	@ (8018b60 <pow+0x3e8>)
 8018a86:	ed91 4b02 	vldr	d4, [r1, #8]
 8018a8a:	ed91 3b00 	vldr	d3, [r1]
 8018a8e:	eeb0 7b44 	vmov.f64	d7, d4
 8018a92:	eea6 7b03 	vfma.f64	d7, d6, d3
 8018a96:	ee17 5a10 	vmov	r5, s14
 8018a9a:	ee37 7b44 	vsub.f64	d7, d7, d4
 8018a9e:	ed91 4b04 	vldr	d4, [r1, #16]
 8018aa2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8018aa6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8018aaa:	ed91 4b06 	vldr	d4, [r1, #24]
 8018aae:	18dc      	adds	r4, r3, r3
 8018ab0:	f104 030f 	add.w	r3, r4, #15
 8018ab4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8018ab8:	eea7 6b04 	vfma.f64	d6, d7, d4
 8018abc:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8018ac0:	ee35 5b06 	vadd.f64	d5, d5, d6
 8018ac4:	ee25 6b05 	vmul.f64	d6, d5, d5
 8018ac8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8018acc:	ed91 4b08 	vldr	d4, [r1, #32]
 8018ad0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8018ad4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8018ad8:	eea5 4b03 	vfma.f64	d4, d5, d3
 8018adc:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8018ae0:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018ae4:	ee26 6b06 	vmul.f64	d6, d6, d6
 8018ae8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8018aec:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8018af0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8018af4:	eea5 4b03 	vfma.f64	d4, d5, d3
 8018af8:	1940      	adds	r0, r0, r5
 8018afa:	2700      	movs	r7, #0
 8018afc:	eb17 020c 	adds.w	r2, r7, ip
 8018b00:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8018b04:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018b08:	2e00      	cmp	r6, #0
 8018b0a:	d175      	bne.n	8018bf8 <pow+0x480>
 8018b0c:	42bd      	cmp	r5, r7
 8018b0e:	db29      	blt.n	8018b64 <pow+0x3ec>
 8018b10:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8018b14:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8018b18:	4610      	mov	r0, r2
 8018b1a:	ec41 0b10 	vmov	d0, r0, r1
 8018b1e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8018b22:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8018b40 <pow+0x3c8>
 8018b26:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018b2a:	b007      	add	sp, #28
 8018b2c:	ecbd 8b0a 	vpop	{d8-d12}
 8018b30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b34:	f000 b8d0 	b.w	8018cd8 <__math_check_oflow>
 8018b38:	00000000 	.word	0x00000000
 8018b3c:	43300000 	.word	0x43300000
 8018b40:	00000000 	.word	0x00000000
 8018b44:	7f000000 	.word	0x7f000000
 8018b48:	3ff00000 	.word	0x3ff00000
 8018b4c:	fff00000 	.word	0xfff00000
 8018b50:	ffe00000 	.word	0xffe00000
 8018b54:	7fe00000 	.word	0x7fe00000
 8018b58:	c0196aab 	.word	0xc0196aab
 8018b5c:	08019570 	.word	0x08019570
 8018b60:	0801a5b8 	.word	0x0801a5b8
 8018b64:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8018b68:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8018b6c:	4610      	mov	r0, r2
 8018b6e:	ec41 0b15 	vmov	d5, r0, r1
 8018b72:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8018b76:	ee27 6b05 	vmul.f64	d6, d7, d5
 8018b7a:	ee35 7b06 	vadd.f64	d7, d5, d6
 8018b7e:	eeb0 4bc7 	vabs.f64	d4, d7
 8018b82:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8018b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b8a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8018c08 <pow+0x490>
 8018b8e:	d52a      	bpl.n	8018be6 <pow+0x46e>
 8018b90:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018b94:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b9c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8018ba0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8018ba4:	bf58      	it	pl
 8018ba6:	eeb0 4b43 	vmovpl.f64	d4, d3
 8018baa:	ee37 3b04 	vadd.f64	d3, d7, d4
 8018bae:	ee34 6b43 	vsub.f64	d6, d4, d3
 8018bb2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8018bb6:	ee36 6b05 	vadd.f64	d6, d6, d5
 8018bba:	ee36 6b03 	vadd.f64	d6, d6, d3
 8018bbe:	ee36 7b44 	vsub.f64	d7, d6, d4
 8018bc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bca:	d104      	bne.n	8018bd6 <pow+0x45e>
 8018bcc:	4632      	mov	r2, r6
 8018bce:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8018bd2:	ec43 2b17 	vmov	d7, r2, r3
 8018bd6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018bda:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018bde:	ee26 6b00 	vmul.f64	d6, d6, d0
 8018be2:	ed8d 6b04 	vstr	d6, [sp, #16]
 8018be6:	ee27 0b00 	vmul.f64	d0, d7, d0
 8018bea:	b007      	add	sp, #28
 8018bec:	ecbd 8b0a 	vpop	{d8-d12}
 8018bf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf4:	f000 b867 	b.w	8018cc6 <__math_check_uflow>
 8018bf8:	ec43 2b10 	vmov	d0, r2, r3
 8018bfc:	eea7 0b00 	vfma.f64	d0, d7, d0
 8018c00:	e625      	b.n	801884e <pow+0xd6>
 8018c02:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8018c10 <pow+0x498>
 8018c06:	e622      	b.n	801884e <pow+0xd6>
 8018c08:	00000000 	.word	0x00000000
 8018c0c:	00100000 	.word	0x00100000
	...

08018c18 <with_errno>:
 8018c18:	b510      	push	{r4, lr}
 8018c1a:	ed2d 8b02 	vpush	{d8}
 8018c1e:	eeb0 8b40 	vmov.f64	d8, d0
 8018c22:	4604      	mov	r4, r0
 8018c24:	f7fd ffa4 	bl	8016b70 <__errno>
 8018c28:	eeb0 0b48 	vmov.f64	d0, d8
 8018c2c:	ecbd 8b02 	vpop	{d8}
 8018c30:	6004      	str	r4, [r0, #0]
 8018c32:	bd10      	pop	{r4, pc}

08018c34 <xflow>:
 8018c34:	b082      	sub	sp, #8
 8018c36:	b158      	cbz	r0, 8018c50 <xflow+0x1c>
 8018c38:	eeb1 7b40 	vneg.f64	d7, d0
 8018c3c:	ed8d 7b00 	vstr	d7, [sp]
 8018c40:	ed9d 7b00 	vldr	d7, [sp]
 8018c44:	2022      	movs	r0, #34	@ 0x22
 8018c46:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018c4a:	b002      	add	sp, #8
 8018c4c:	f7ff bfe4 	b.w	8018c18 <with_errno>
 8018c50:	eeb0 7b40 	vmov.f64	d7, d0
 8018c54:	e7f2      	b.n	8018c3c <xflow+0x8>
	...

08018c58 <__math_uflow>:
 8018c58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018c60 <__math_uflow+0x8>
 8018c5c:	f7ff bfea 	b.w	8018c34 <xflow>
 8018c60:	00000000 	.word	0x00000000
 8018c64:	10000000 	.word	0x10000000

08018c68 <__math_oflow>:
 8018c68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018c70 <__math_oflow+0x8>
 8018c6c:	f7ff bfe2 	b.w	8018c34 <xflow>
 8018c70:	00000000 	.word	0x00000000
 8018c74:	70000000 	.word	0x70000000

08018c78 <__math_divzero>:
 8018c78:	b082      	sub	sp, #8
 8018c7a:	2800      	cmp	r0, #0
 8018c7c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8018c80:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018c84:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8018c88:	ed8d 7b00 	vstr	d7, [sp]
 8018c8c:	ed9d 0b00 	vldr	d0, [sp]
 8018c90:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8018ca0 <__math_divzero+0x28>
 8018c94:	2022      	movs	r0, #34	@ 0x22
 8018c96:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8018c9a:	b002      	add	sp, #8
 8018c9c:	f7ff bfbc 	b.w	8018c18 <with_errno>
	...

08018ca8 <__math_invalid>:
 8018ca8:	eeb0 7b40 	vmov.f64	d7, d0
 8018cac:	eeb4 7b47 	vcmp.f64	d7, d7
 8018cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cb4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018cb8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8018cbc:	d602      	bvs.n	8018cc4 <__math_invalid+0x1c>
 8018cbe:	2021      	movs	r0, #33	@ 0x21
 8018cc0:	f7ff bfaa 	b.w	8018c18 <with_errno>
 8018cc4:	4770      	bx	lr

08018cc6 <__math_check_uflow>:
 8018cc6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cce:	d102      	bne.n	8018cd6 <__math_check_uflow+0x10>
 8018cd0:	2022      	movs	r0, #34	@ 0x22
 8018cd2:	f7ff bfa1 	b.w	8018c18 <with_errno>
 8018cd6:	4770      	bx	lr

08018cd8 <__math_check_oflow>:
 8018cd8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8018cf8 <__math_check_oflow+0x20>
 8018cdc:	eeb0 7bc0 	vabs.f64	d7, d0
 8018ce0:	eeb4 7b46 	vcmp.f64	d7, d6
 8018ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce8:	dd02      	ble.n	8018cf0 <__math_check_oflow+0x18>
 8018cea:	2022      	movs	r0, #34	@ 0x22
 8018cec:	f7ff bf94 	b.w	8018c18 <with_errno>
 8018cf0:	4770      	bx	lr
 8018cf2:	bf00      	nop
 8018cf4:	f3af 8000 	nop.w
 8018cf8:	ffffffff 	.word	0xffffffff
 8018cfc:	7fefffff 	.word	0x7fefffff

08018d00 <_init>:
 8018d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d02:	bf00      	nop
 8018d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d06:	bc08      	pop	{r3}
 8018d08:	469e      	mov	lr, r3
 8018d0a:	4770      	bx	lr

08018d0c <_fini>:
 8018d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d0e:	bf00      	nop
 8018d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d12:	bc08      	pop	{r3}
 8018d14:	469e      	mov	lr, r3
 8018d16:	4770      	bx	lr
