
aerosentinel_argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000177b4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  08017a58  08017a58  00018a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080181d0  080181d0  000191d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080181d8  080181d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080181dc  080181dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  24000000  080181e0  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001580  24000300  080184dc  0001a300  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001880  080184dc  0001a880  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a2fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b73e  00000000  00000000  0001a32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000735a  00000000  00000000  00055a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003100  00000000  00000000  0005cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002681  00000000  00000000  0005fec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004496c  00000000  00000000  00062549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00041c63  00000000  00000000  000a6eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00189566  00000000  00000000  000e8b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0027207e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e198  00000000  00000000  002720c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000050  00000000  00000000  0028025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000300 	.word	0x24000300
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017a3c 	.word	0x08017a3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000304 	.word	0x24000304
 80002dc:	08017a3c 	.word	0x08017a3c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SensorManager_Init>:
	{MPL3115A2_Init, "MPL3115A2"},
	{BNO086_Init, "BNO086"}
};


telemetry_init_status SensorManager_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
    printf("Sensors Initialization routine started.\n");
 8000686:	4826      	ldr	r0, [pc, #152]	@ (8000720 <SensorManager_Init+0xa0>)
 8000688:	f015 fad8 	bl	8015c3c <puts>

    size_t num_sensors = sizeof(sensors) / sizeof(sensors[0]);
 800068c:	2305      	movs	r3, #5
 800068e:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	e024      	b.n	80006e8 <SensorManager_Init+0x68>
        int8_t status = sensors[i].init_function();
 800069e:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SensorManager_Init+0xa4>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006a6:	4798      	blx	r3
 80006a8:	4603      	mov	r3, r0
 80006aa:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 80006ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00b      	beq.n	80006cc <SensorManager_Init+0x4c>
            printf("%s initialization failed.\n", sensors[i].sensor_name);
 80006b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <SensorManager_Init+0xa4>)
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <SensorManager_Init+0xa8>)
 80006c2:	f015 fa53 	bl	8015b6c <iprintf>
            all_success = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e00a      	b.n	80006e2 <SensorManager_Init+0x62>
        } else {
            printf("[%s] device found! Initialization and calibration succeeded.\n", sensors[i].sensor_name);
 80006cc:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <SensorManager_Init+0xa4>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	4413      	add	r3, r2
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4814      	ldr	r0, [pc, #80]	@ (800072c <SensorManager_Init+0xac>)
 80006da:	f015 fa47 	bl	8015b6c <iprintf>
            any_success = true;
 80006de:	2301      	movs	r3, #1
 80006e0:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3d6      	bcc.n	800069e <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d004      	beq.n	8000700 <SensorManager_Init+0x80>
        printf("All sensors initialized successfully.\n");
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <SensorManager_Init+0xb0>)
 80006f8:	f015 faa0 	bl	8015c3c <puts>
        return TELEMETRY_INIT_SUCCESS;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e00b      	b.n	8000718 <SensorManager_Init+0x98>
    } else if (any_success) {
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <SensorManager_Init+0x90>
        printf("Partial initialization success.\n");
 8000706:	480b      	ldr	r0, [pc, #44]	@ (8000734 <SensorManager_Init+0xb4>)
 8000708:	f015 fa98 	bl	8015c3c <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 800070c:	2301      	movs	r3, #1
 800070e:	e003      	b.n	8000718 <SensorManager_Init+0x98>
    } else {
        printf("All sensors initialization failed.\n");
 8000710:	4809      	ldr	r0, [pc, #36]	@ (8000738 <SensorManager_Init+0xb8>)
 8000712:	f015 fa93 	bl	8015c3c <puts>
        return TELEMETRY_INIT_FAILURE;
 8000716:	2302      	movs	r3, #2
    }
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08017a84 	.word	0x08017a84
 8000724:	24000000 	.word	0x24000000
 8000728:	08017aac 	.word	0x08017aac
 800072c:	08017ac8 	.word	0x08017ac8
 8000730:	08017b08 	.word	0x08017b08
 8000734:	08017b30 	.word	0x08017b30
 8000738:	08017b50 	.word	0x08017b50

0800073c <ADXL375_Init>:

/*
 * INITIALISATION
 */

int8_t ADXL375_Init(){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
    ToggleCSHigh();
 8000742:	f000 f8a7 	bl	8000894 <ToggleCSHigh>

    /* Use the global variable 'hspi1' directly */
    dev.spiHandle = &hspi1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <ADXL375_Init+0x80>)
 8000748:	4a1d      	ldr	r2, [pc, #116]	@ (80007c0 <ADXL375_Init+0x84>)
 800074a:	601a      	str	r2, [r3, #0]

    HAL_StatusTypeDef status;

    int8_t errorNum = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	71fb      	strb	r3, [r7, #7]

    /* confirm device address as 0xE5 */
    uint8_t confirmID;
    while(1) {
        status = ReadData(ADXL375_DEVID, &confirmID, 1);
 8000750:	1d7b      	adds	r3, r7, #5
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f860 	bl	800081c <ReadData>
 800075c:	4603      	mov	r3, r0
 800075e:	71bb      	strb	r3, [r7, #6]
        if (status == HAL_OK) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1f4      	bne.n	8000750 <ADXL375_Init+0x14>
            if (confirmID == 0xE5)
 8000766:	797b      	ldrb	r3, [r7, #5]
 8000768:	2be5      	cmp	r3, #229	@ 0xe5
 800076a:	d000      	beq.n	800076e <ADXL375_Init+0x32>
        status = ReadData(ADXL375_DEVID, &confirmID, 1);
 800076c:	e7f0      	b.n	8000750 <ADXL375_Init+0x14>
                break;
 800076e:	bf00      	nop
        }
    }

    /* set the required data rate */
    status = WriteData(ADXL375_BW_RATE, BW_RATE_DATA_RATE, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	210f      	movs	r1, #15
 8000774:	202c      	movs	r0, #44	@ 0x2c
 8000776:	f000 f825 	bl	80007c4 <WriteData>
 800077a:	4603      	mov	r3, r0
 800077c:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK) {
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <ADXL375_Init+0x54>
        errorNum++;
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	3301      	adds	r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	71fb      	strb	r3, [r7, #7]
    }

    /* if all well till now, enable measurement mode */
    status = WriteData(ADXL375_POWER_CTL, POWER_CTL_MEASURE_MODE, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2108      	movs	r1, #8
 8000794:	202d      	movs	r0, #45	@ 0x2d
 8000796:	f000 f815 	bl	80007c4 <WriteData>
 800079a:	4603      	mov	r3, r0
 800079c:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK)
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <ADXL375_Init+0x74>
        errorNum++;
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	3301      	adds	r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	71fb      	strb	r3, [r7, #7]

    return errorNum;
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2400031c 	.word	0x2400031c
 80007c0:	2400088c 	.word	0x2400088c

080007c4 <WriteData>:
/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef WriteData(uint8_t address, uint8_t data, uint16_t len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	460b      	mov	r3, r1
 80007d0:	71bb      	strb	r3, [r7, #6]
 80007d2:	4613      	mov	r3, r2
 80007d4:	80bb      	strh	r3, [r7, #4]
    ToggleCSLow();
 80007d6:	f000 f869 	bl	80008ac <ToggleCSLow>

    /* Use the global 'dev' instance */
    HAL_StatusTypeDef status = HAL_SPI_Transmit(dev.spiHandle, &address, 1, HAL_MAX_DELAY);
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <WriteData+0x54>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	1df9      	adds	r1, r7, #7
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007e4:	2201      	movs	r2, #1
 80007e6:	f00a ff05 	bl	800b5f4 <HAL_SPI_Transmit>
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d109      	bne.n	8000808 <WriteData+0x44>
        status = HAL_SPI_Transmit(dev.spiHandle, &data, 1, HAL_MAX_DELAY);
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <WriteData+0x54>)
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	1db9      	adds	r1, r7, #6
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007fe:	2201      	movs	r2, #1
 8000800:	f00a fef8 	bl	800b5f4 <HAL_SPI_Transmit>
 8000804:	4603      	mov	r3, r0
 8000806:	73fb      	strb	r3, [r7, #15]

    ToggleCSHigh();
 8000808:	f000 f844 	bl	8000894 <ToggleCSHigh>

    return status;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2400031c 	.word	0x2400031c

0800081c <ReadData>:


HAL_StatusTypeDef ReadData(uint8_t address, uint8_t *data, uint16_t len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	80bb      	strh	r3, [r7, #4]
    ToggleCSLow();
 800082c:	f000 f83e 	bl	80008ac <ToggleCSLow>

    uint8_t txBuffer = (address | 0x80);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73bb      	strb	r3, [r7, #14]

    if (len > 1) {
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d904      	bls.n	800084a <ReadData+0x2e>
        txBuffer = (txBuffer | 0xC0);
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000846:	b2db      	uxtb	r3, r3
 8000848:	73bb      	strb	r3, [r7, #14]
    }

    /* Use the global 'dev' instance */
    HAL_StatusTypeDef status = HAL_SPI_Transmit(dev.spiHandle, &txBuffer, 1, HAL_MAX_DELAY);
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <ReadData+0x74>)
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	f107 010e 	add.w	r1, r7, #14
 8000852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000856:	2201      	movs	r2, #1
 8000858:	f00a fecc 	bl	800b5f4 <HAL_SPI_Transmit>
 800085c:	4603      	mov	r3, r0
 800085e:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(3);
 8000860:	2003      	movs	r0, #3
 8000862:	f002 fd5b 	bl	800331c <HAL_Delay>
    if (status == HAL_OK)
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d109      	bne.n	8000880 <ReadData+0x64>
        status = HAL_SPI_Receive(dev.spiHandle, data, len, HAL_MAX_DELAY);
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <ReadData+0x74>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	88ba      	ldrh	r2, [r7, #4]
 8000872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000876:	6839      	ldr	r1, [r7, #0]
 8000878:	f00b f8aa 	bl	800b9d0 <HAL_SPI_Receive>
 800087c:	4603      	mov	r3, r0
 800087e:	73fb      	strb	r3, [r7, #15]

    ToggleCSHigh();
 8000880:	f000 f808 	bl	8000894 <ToggleCSHigh>

    return status;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2400031c 	.word	0x2400031c

08000894 <ToggleCSHigh>:


void ToggleCSHigh()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2110      	movs	r1, #16
 800089c:	4802      	ldr	r0, [pc, #8]	@ (80008a8 <ToggleCSHigh+0x14>)
 800089e:	f003 f8bd 	bl	8003a1c <HAL_GPIO_WritePin>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	58020800 	.word	0x58020800

080008ac <ToggleCSLow>:

void ToggleCSLow()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2110      	movs	r1, #16
 80008b4:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <ToggleCSLow+0x14>)
 80008b6:	f003 f8b1 	bl	8003a1c <HAL_GPIO_WritePin>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	58020800 	.word	0x58020800

080008c4 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80008cc:	23ff      	movs	r3, #255	@ 0xff
 80008ce:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 80008d4:	2300      	movs	r3, #0
 80008d6:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80008d8:	2300      	movs	r3, #0
 80008da:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 80008dc:	4a58      	ldr	r2, [pc, #352]	@ (8000a40 <bno055_init+0x17c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80008e2:	4b57      	ldr	r3, [pc, #348]	@ (8000a40 <bno055_init+0x17c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68dc      	ldr	r4, [r3, #12]
 80008e8:	4b55      	ldr	r3, [pc, #340]	@ (8000a40 <bno055_init+0x17c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	7a58      	ldrb	r0, [r3, #9]
 80008ee:	f107 020d 	add.w	r2, r7, #13
 80008f2:	2301      	movs	r3, #1
 80008f4:	2107      	movs	r1, #7
 80008f6:	47a0      	blx	r4
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80008fc:	4b50      	ldr	r3, [pc, #320]	@ (8000a40 <bno055_init+0x17c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	691c      	ldr	r4, [r3, #16]
 8000902:	4b4f      	ldr	r3, [pc, #316]	@ (8000a40 <bno055_init+0x17c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	7a58      	ldrb	r0, [r3, #9]
 8000908:	f107 020e 	add.w	r2, r7, #14
 800090c:	2301      	movs	r3, #1
 800090e:	2100      	movs	r1, #0
 8000910:	47a0      	blx	r4
 8000912:	4603      	mov	r3, r0
 8000914:	b2da      	uxtb	r2, r3
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4413      	add	r3, r2
 800091a:	b2db      	uxtb	r3, r3
 800091c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 800091e:	4b48      	ldr	r3, [pc, #288]	@ (8000a40 <bno055_init+0x17c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	7bba      	ldrb	r2, [r7, #14]
 8000924:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000926:	4b46      	ldr	r3, [pc, #280]	@ (8000a40 <bno055_init+0x17c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	691c      	ldr	r4, [r3, #16]
 800092c:	4b44      	ldr	r3, [pc, #272]	@ (8000a40 <bno055_init+0x17c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	7a58      	ldrb	r0, [r3, #9]
 8000932:	f107 020e 	add.w	r2, r7, #14
 8000936:	2301      	movs	r3, #1
 8000938:	2101      	movs	r1, #1
 800093a:	47a0      	blx	r4
 800093c:	4603      	mov	r3, r0
 800093e:	b2da      	uxtb	r2, r3
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	4413      	add	r3, r2
 8000944:	b2db      	uxtb	r3, r3
 8000946:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000948:	4b3d      	ldr	r3, [pc, #244]	@ (8000a40 <bno055_init+0x17c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	7bba      	ldrb	r2, [r7, #14]
 800094e:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000950:	4b3b      	ldr	r3, [pc, #236]	@ (8000a40 <bno055_init+0x17c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	691c      	ldr	r4, [r3, #16]
 8000956:	4b3a      	ldr	r3, [pc, #232]	@ (8000a40 <bno055_init+0x17c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	7a58      	ldrb	r0, [r3, #9]
 800095c:	f107 020e 	add.w	r2, r7, #14
 8000960:	2301      	movs	r3, #1
 8000962:	2102      	movs	r1, #2
 8000964:	47a0      	blx	r4
 8000966:	4603      	mov	r3, r0
 8000968:	b2da      	uxtb	r2, r3
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	4413      	add	r3, r2
 800096e:	b2db      	uxtb	r3, r3
 8000970:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000972:	4b33      	ldr	r3, [pc, #204]	@ (8000a40 <bno055_init+0x17c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	7bba      	ldrb	r2, [r7, #14]
 8000978:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800097a:	4b31      	ldr	r3, [pc, #196]	@ (8000a40 <bno055_init+0x17c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	691c      	ldr	r4, [r3, #16]
 8000980:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <bno055_init+0x17c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	7a58      	ldrb	r0, [r3, #9]
 8000986:	f107 020e 	add.w	r2, r7, #14
 800098a:	2301      	movs	r3, #1
 800098c:	2103      	movs	r1, #3
 800098e:	47a0      	blx	r4
 8000990:	4603      	mov	r3, r0
 8000992:	b2da      	uxtb	r2, r3
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	4413      	add	r3, r2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 800099c:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <bno055_init+0x17c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	7bba      	ldrb	r2, [r7, #14]
 80009a2:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <bno055_init+0x17c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	691c      	ldr	r4, [r3, #16]
 80009aa:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <bno055_init+0x17c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	7a58      	ldrb	r0, [r3, #9]
 80009b0:	f107 020e 	add.w	r2, r7, #14
 80009b4:	2301      	movs	r3, #1
 80009b6:	2106      	movs	r1, #6
 80009b8:	47a0      	blx	r4
 80009ba:	4603      	mov	r3, r0
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	4413      	add	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <bno055_init+0x17c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	7bba      	ldrb	r2, [r7, #14]
 80009cc:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <bno055_init+0x17c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	691c      	ldr	r4, [r3, #16]
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <bno055_init+0x17c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	7a58      	ldrb	r0, [r3, #9]
 80009da:	f107 0208 	add.w	r2, r7, #8
 80009de:	2302      	movs	r3, #2
 80009e0:	2104      	movs	r1, #4
 80009e2:	47a0      	blx	r4
 80009e4:	4603      	mov	r3, r0
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	4413      	add	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 80009f0:	7a3b      	ldrb	r3, [r7, #8]
 80009f2:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80009f4:	7a7b      	ldrb	r3, [r7, #9]
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	7a3b      	ldrb	r3, [r7, #8]
 80009fc:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <bno055_init+0x17c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000a02:	430a      	orrs	r2, r1
 8000a04:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000a06:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <bno055_init+0x17c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	691c      	ldr	r4, [r3, #16]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <bno055_init+0x17c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7a58      	ldrb	r0, [r3, #9]
 8000a14:	f107 020e 	add.w	r2, r7, #14
 8000a18:	2301      	movs	r3, #1
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	47a0      	blx	r4
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	4413      	add	r3, r2
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000a2a:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <bno055_init+0x17c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	7bba      	ldrb	r2, [r7, #14]
 8000a30:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000334 	.word	0x24000334

08000a44 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	4613      	mov	r3, r2
 8000a52:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a54:	23ff      	movs	r3, #255	@ 0xff
 8000a56:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <bno055_write_register+0x48>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000a60:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000a64:	e00d      	b.n	8000a82 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <bno055_write_register+0x48>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68dc      	ldr	r4, [r3, #12]
 8000a6c:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <bno055_write_register+0x48>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	7a58      	ldrb	r0, [r3, #9]
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	79f9      	ldrb	r1, [r7, #7]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	47a0      	blx	r4
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24000334 	.word	0x24000334

08000a90 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a9a:	23ff      	movs	r3, #255	@ 0xff
 8000a9c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d102      	bne.n	8000ab0 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000aaa:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000aae:	e030      	b.n	8000b12 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	691c      	ldr	r4, [r3, #16]
 8000ab6:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	7a58      	ldrb	r0, [r3, #9]
 8000abc:	f107 020e 	add.w	r2, r7, #14
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	2107      	movs	r1, #7
 8000ac4:	47a0      	blx	r4
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d11b      	bne.n	8000b0a <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68dc      	ldr	r4, [r3, #12]
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	7a58      	ldrb	r0, [r3, #9]
 8000ae2:	f107 020e 	add.w	r2, r7, #14
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2107      	movs	r1, #7
 8000aea:	47a0      	blx	r4
 8000aec:	4603      	mov	r3, r0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	4413      	add	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d106      	bne.n	8000b0e <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	711a      	strb	r2, [r3, #4]
 8000b08:	e001      	b.n	8000b0e <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b0a:	23ff      	movs	r3, #255	@ 0xff
 8000b0c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	24000334 	.word	0x24000334

08000b20 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b28:	23ff      	movs	r3, #255	@ 0xff
 8000b2a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000b30:	23ff      	movs	r3, #255	@ 0xff
 8000b32:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000b3c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000b40:	e02a      	b.n	8000b98 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000b42:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff ff9f 	bl	8000a90 <bno055_write_page_id>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d004      	beq.n	8000b68 <bno055_get_operation_mode+0x48>
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d113      	bne.n	8000b90 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	691c      	ldr	r4, [r3, #16]
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	7a58      	ldrb	r0, [r3, #9]
 8000b74:	f107 020d 	add.w	r2, r7, #13
 8000b78:	2301      	movs	r3, #1
 8000b7a:	213d      	movs	r1, #61	@ 0x3d
 8000b7c:	47a0      	blx	r4
 8000b7e:	4603      	mov	r3, r0
 8000b80:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000b82:	7b7b      	ldrb	r3, [r7, #13]
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e001      	b.n	8000b94 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b90:	23ff      	movs	r3, #255	@ 0xff
 8000b92:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd90      	pop	{r4, r7, pc}
 8000ba0:	24000334 	.word	0x24000334

08000ba4 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000bae:	23ff      	movs	r3, #255	@ 0xff
 8000bb0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000bba:	23ff      	movs	r3, #255	@ 0xff
 8000bbc:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000bc6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000bca:	e0ac      	b.n	8000d26 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffa5 	bl	8000b20 <bno055_get_operation_mode>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 809d 	bne.w	8000d1e <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d137      	bne.n	8000c5a <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bea:	4b51      	ldr	r3, [pc, #324]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	691c      	ldr	r4, [r3, #16]
 8000bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	7a58      	ldrb	r0, [r3, #9]
 8000bf6:	f107 020d 	add.w	r2, r7, #13
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	213d      	movs	r1, #61	@ 0x3d
 8000bfe:	47a0      	blx	r4
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f040 808a 	bne.w	8000d22 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000c0e:	7b7b      	ldrb	r3, [r7, #13]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	f023 030f 	bic.w	r3, r3, #15
 8000c16:	b25a      	sxtb	r2, r3
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000c2a:	4b41      	ldr	r3, [pc, #260]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68dc      	ldr	r4, [r3, #12]
 8000c30:	4b3f      	ldr	r3, [pc, #252]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	7a58      	ldrb	r0, [r3, #9]
 8000c36:	f107 020d 	add.w	r2, r7, #13
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	213d      	movs	r1, #61	@ 0x3d
 8000c3e:	47a0      	blx	r4
 8000c40:	4603      	mov	r3, r0
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	4413      	add	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000c4c:	4b38      	ldr	r3, [pc, #224]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000c56:	4798      	blx	r3
 8000c58:	e063      	b.n	8000d22 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	691c      	ldr	r4, [r3, #16]
 8000c60:	4b33      	ldr	r3, [pc, #204]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	7a58      	ldrb	r0, [r3, #9]
 8000c66:	f107 020d 	add.w	r2, r7, #13
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	213d      	movs	r1, #61	@ 0x3d
 8000c6e:	47a0      	blx	r4
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d116      	bne.n	8000caa <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000c7c:	7b7b      	ldrb	r3, [r7, #13]
 8000c7e:	f023 030f 	bic.w	r3, r3, #15
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000c86:	f107 030d 	add.w	r3, r7, #13
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	203d      	movs	r0, #61	@ 0x3d
 8000c90:	f7ff fed8 	bl	8000a44 <bno055_write_register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000ca0:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	2014      	movs	r0, #20
 8000ca8:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d038      	beq.n	8000d22 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	691c      	ldr	r4, [r3, #16]
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	7a58      	ldrb	r0, [r3, #9]
 8000cbc:	f107 020d 	add.w	r2, r7, #13
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	213d      	movs	r1, #61	@ 0x3d
 8000cc4:	47a0      	blx	r4
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d127      	bne.n	8000d22 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000cd2:	7b7b      	ldrb	r3, [r7, #13]
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	f023 030f 	bic.w	r3, r3, #15
 8000cda:	b25a      	sxtb	r2, r3
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68dc      	ldr	r4, [r3, #12]
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	7a58      	ldrb	r0, [r3, #9]
 8000cfa:	f107 020d 	add.w	r2, r7, #13
 8000cfe:	2301      	movs	r3, #1
 8000d00:	213d      	movs	r1, #61	@ 0x3d
 8000d02:	47a0      	blx	r4
 8000d04:	4603      	mov	r3, r0
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000d1a:	4798      	blx	r3
 8000d1c:	e001      	b.n	8000d22 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000d1e:	23ff      	movs	r3, #255	@ 0xff
 8000d20:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	24000334 	.word	0x24000334

08000d34 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000d3e:	23ff      	movs	r3, #255	@ 0xff
 8000d40:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000d46:	2300      	movs	r3, #0
 8000d48:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000d4a:	23ff      	movs	r3, #255	@ 0xff
 8000d4c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d4e:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000d56:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000d5a:	e05f      	b.n	8000e1c <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fedd 	bl	8000b20 <bno055_get_operation_mode>
 8000d66:	4603      	mov	r3, r0
 8000d68:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d143      	bne.n	8000dfa <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff ff13 	bl	8000ba4 <bno055_set_operation_mode>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	4413      	add	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8000d8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d130      	bne.n	8000df4 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d92:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	691c      	ldr	r4, [r3, #16]
 8000d98:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	7a58      	ldrb	r0, [r3, #9]
 8000d9e:	f107 020d 	add.w	r2, r7, #13
 8000da2:	2301      	movs	r3, #1
 8000da4:	213e      	movs	r1, #62	@ 0x3e
 8000da6:	47a0      	blx	r4
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d124      	bne.n	8000dfe <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	f023 0303 	bic.w	r3, r3, #3
 8000dbc:	b25a      	sxtb	r2, r3
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68dc      	ldr	r4, [r3, #12]
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	7a58      	ldrb	r0, [r3, #9]
 8000ddc:	f107 020d 	add.w	r2, r7, #13
 8000de0:	2301      	movs	r3, #1
 8000de2:	213e      	movs	r1, #62	@ 0x3e
 8000de4:	47a0      	blx	r4
 8000de6:	4603      	mov	r3, r0
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	4413      	add	r3, r2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e004      	b.n	8000dfe <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000df4:	23ff      	movs	r3, #255	@ 0xff
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e001      	b.n	8000dfe <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000dfa:	23ff      	movs	r3, #255	@ 0xff
 8000dfc:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000dfe:	7b3b      	ldrb	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d009      	beq.n	8000e18 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000e04:	7b3b      	ldrb	r3, [r7, #12]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fecc 	bl	8000ba4 <bno055_set_operation_mode>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	4413      	add	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	24000334 	.word	0x24000334

08000e28 <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
signed char bno055_platform_read(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char ReadNumbr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	603a      	str	r2, [r7, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	460b      	mov	r3, r1
 8000e38:	71bb      	strb	r3, [r7, #6]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	81fb      	strh	r3, [r7, #14]

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8000e46:	1dba      	adds	r2, r7, #6
 8000e48:	89f9      	ldrh	r1, [r7, #14]
 8000e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <bno055_platform_read+0x50>)
 8000e54:	f002 feb2 	bl	8003bbc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BNO_I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8000e58:	797b      	ldrb	r3, [r7, #5]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	89f9      	ldrh	r1, [r7, #14]
 8000e5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e62:	9200      	str	r2, [sp, #0]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <bno055_platform_read+0x50>)
 8000e68:	f002 ffc0 	bl	8003dec <HAL_I2C_Master_Receive>
    return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	240007bc 	.word	0x240007bc

08000e7c <bno055_platform_write>:
  *
  */


signed char bno055_platform_write(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char WriteNumbr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	603a      	str	r2, [r7, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	71bb      	strb	r3, [r7, #6]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	81fb      	strh	r3, [r7, #14]

    BNO_GTXBuffer[0] = subaddress;
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <bno055_platform_write+0x54>)
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	7013      	strb	r3, [r2, #0]
    memcpy(&BNO_GTXBuffer[1], pBuffer, WriteNumbr);
 8000ea0:	797b      	ldrb	r3, [r7, #5]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <bno055_platform_write+0x58>)
 8000ea8:	f014 ff09 	bl	8015cbe <memcpy>

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, BNO_GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8000eac:	797b      	ldrb	r3, [r7, #5]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	89f9      	ldrh	r1, [r7, #14]
 8000eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <bno055_platform_write+0x54>)
 8000ebe:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <bno055_platform_write+0x5c>)
 8000ec0:	f002 fe7c 	bl	8003bbc <HAL_I2C_Master_Transmit>
    return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000350 	.word	0x24000350
 8000ed4:	24000351 	.word	0x24000351
 8000ed8:	240007bc 	.word	0x240007bc

08000edc <DelayUs>:
  *
  */


void DelayUs(unsigned int Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
//		{
//			;
//		}
//	}

	HAL_Delay(Delay);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f002 fa19 	bl	800331c <HAL_Delay>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 0 -> no Error)
  *
  */
int8_t BNO055_Init(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 8000efa:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <BNO055_Init+0xb0>)
 8000efc:	4a2a      	ldr	r2, [pc, #168]	@ (8000fa8 <BNO055_Init+0xb4>)
 8000efe:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 8000f00:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <BNO055_Init+0xb0>)
 8000f02:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <BNO055_Init+0xb8>)
 8000f04:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = &DelayUs;
 8000f06:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <BNO055_Init+0xb0>)
 8000f08:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <BNO055_Init+0xbc>)
 8000f0a:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <BNO055_Init+0xb0>)
 8000f0e:	2228      	movs	r2, #40	@ 0x28
 8000f10:	725a      	strb	r2, [r3, #9]

	uint8_t value;
	bno055_platform_read(BNO055_I2C_ADDR1, 0x00, &value, 1);
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	2301      	movs	r3, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	2028      	movs	r0, #40	@ 0x28
 8000f1a:	f7ff ff85 	bl	8000e28 <bno055_platform_read>

	comres = bno055_init(&bno055_dev);
 8000f1e:	4821      	ldr	r0, [pc, #132]	@ (8000fa4 <BNO055_Init+0xb0>)
 8000f20:	f7ff fcd0 	bl	80008c4 <bno055_init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f2a:	601a      	str	r2, [r3, #0]
//	{
//		printf("bno055_init failed, comres=%d\r\n", comres);
//	}

	/* set the power mode as NORMAL*/
	power_mode = BNO055_POWER_MODE_NORMAL;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <BNO055_Init+0xc4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
	comres += bno055_set_power_mode(power_mode);
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <BNO055_Init+0xc4>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fefc 	bl	8000d34 <bno055_set_power_mode>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f48:	6013      	str	r3, [r2, #0]
		* 0x0A - BNO055_OPERATION_MODE_M4G
		* 0x0B - BNO055_OPERATION_MODE_NDOF_FMC_OFF
		* 0x0C - BNO055_OPERATION_MODE_NDOF
		* based on the user need configure the operation mode*/
	    // Set the operation mode to NDOF
		printf("Trying to set BNO055 operational mode...");
 8000f4a:	481c      	ldr	r0, [pc, #112]	@ (8000fbc <BNO055_Init+0xc8>)
 8000f4c:	f014 fe0e 	bl	8015b6c <iprintf>
		while(op_mode_current != BNO055_OPERATION_MODE_NDOF){
 8000f50:	e016      	b.n	8000f80 <BNO055_Init+0x8c>
		    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8000f52:	200c      	movs	r0, #12
 8000f54:	f7ff fe26 	bl	8000ba4 <bno055_set_operation_mode>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f64:	6013      	str	r3, [r2, #0]
		    comres += bno055_get_operation_mode(&op_mode_current);
 8000f66:	4816      	ldr	r0, [pc, #88]	@ (8000fc0 <BNO055_Init+0xcc>)
 8000f68:	f7ff fdda 	bl	8000b20 <bno055_get_operation_mode>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f78:	6013      	str	r3, [r2, #0]
		    HAL_Delay(250);
 8000f7a:	20fa      	movs	r0, #250	@ 0xfa
 8000f7c:	f002 f9ce 	bl	800331c <HAL_Delay>
		while(op_mode_current != BNO055_OPERATION_MODE_NDOF){
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <BNO055_Init+0xcc>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	d1e4      	bne.n	8000f52 <BNO055_Init+0x5e>
		}

		printf("Success! \n");
 8000f88:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <BNO055_Init+0xd0>)
 8000f8a:	f014 fe57 	bl	8015c3c <puts>

	    HAL_Delay(1000);
 8000f8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f92:	f002 f9c3 	bl	800331c <HAL_Delay>
//			printf("BNO Units configuration failed\r\n", comres);
//		}



	return (int8_t)comres;
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b25b      	sxtb	r3, r3
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	24000338 	.word	0x24000338
 8000fa8:	08000e7d 	.word	0x08000e7d
 8000fac:	08000e29 	.word	0x08000e29
 8000fb0:	08000edd 	.word	0x08000edd
 8000fb4:	24000028 	.word	0x24000028
 8000fb8:	24000551 	.word	0x24000551
 8000fbc:	08017b74 	.word	0x08017b74
 8000fc0:	24000550 	.word	0x24000550
 8000fc4:	08017ba0 	.word	0x08017ba0

08000fc8 <waitInt>:
static BNO_Feature_t sensorFeartures = {0};
BNO_SensorValue_t sensorData = {0};


// Wait for an interrupt to occur or timeout in 200ms
static uint8_t waitInt(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	uint32_t timeOut = HAL_GetTick() + RESET_DELAY;
 8000fce:	f002 f999 	bl	8003304 <HAL_GetTick>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	33c8      	adds	r3, #200	@ 0xc8
 8000fd6:	607b      	str	r3, [r7, #4]
	while(timeOut > HAL_GetTick()) {
 8000fd8:	e009      	b.n	8000fee <waitInt+0x26>
		if(BNO_Ready) {
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <waitInt+0x3c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d004      	beq.n	8000fee <waitInt+0x26>
			BNO_Ready = 0;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <waitInt+0x3c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
			return 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e006      	b.n	8000ffc <waitInt+0x34>
	while(timeOut > HAL_GetTick()) {
 8000fee:	f002 f989 	bl	8003304 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d8ef      	bhi.n	8000fda <waitInt+0x12>
		}
	}
	return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	24000552 	.word	0x24000552

08001008 <start_timer>:

//// Timer 2 set to get microseconds
static void start_timer(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <start_timer+0x60>)
 8001010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001014:	4a14      	ldr	r2, [pc, #80]	@ (8001068 <start_timer+0x60>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <start_timer+0x60>)
 8001020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	683b      	ldr	r3, [r7, #0]
    // Prescale to get 1 count per microsecond
    uint16_t prescaler = 74;
 800102c:	234a      	movs	r3, #74	@ 0x4a
 800102e:	80fb      	strh	r3, [r7, #6]
    htim2.Instance = TIM2;
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <start_timer+0x64>)
 8001032:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001036:	601a      	str	r2, [r3, #0]
    htim2.Init.Period = 0xFFFFFFFF; // Max for 32-bit timer
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <start_timer+0x64>)
 800103a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800103e:	60da      	str	r2, [r3, #12]
    htim2.Init.Prescaler = prescaler;
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <start_timer+0x64>)
 8001044:	6053      	str	r3, [r2, #4]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <start_timer+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <start_timer+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
    HAL_TIM_Base_Init(&htim2);
 8001052:	4806      	ldr	r0, [pc, #24]	@ (800106c <start_timer+0x64>)
 8001054:	f00b f817 	bl	800c086 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&htim2);
 8001058:	4804      	ldr	r0, [pc, #16]	@ (800106c <start_timer+0x64>)
 800105a:	f00b f86b 	bl	800c134 <HAL_TIM_Base_Start>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	58024400 	.word	0x58024400
 800106c:	2400099c 	.word	0x2400099c

08001070 <timeNowUs>:

// Get microseconds
static uint32_t timeNowUs(void) {
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <timeNowUs+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	2400099c 	.word	0x2400099c

08001088 <delay_us>:

// Delay microseconds
static void delay_us(uint32_t t) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	uint32_t now = timeNowUs();
 8001090:	f7ff ffee 	bl	8001070 <timeNowUs>
 8001094:	60f8      	str	r0, [r7, #12]
	uint32_t start = now;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	60bb      	str	r3, [r7, #8]
	while ((now - start) < t) {
 800109a:	e002      	b.n	80010a2 <delay_us+0x1a>
		now = timeNowUs();
 800109c:	f7ff ffe8 	bl	8001070 <timeNowUs>
 80010a0:	60f8      	str	r0, [r7, #12]
	while ((now - start) < t) {
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8f6      	bhi.n	800109c <delay_us+0x14>
	}

}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <resetHeader>:
		rpy.Pitch = -(rpy.Pitch + 180.f);
}


// Sets to buffrIO first 21 bytes to 0
static void resetHeader(const uint8_t id) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	memset(bufferIO, 0, TX_PACKET_SIZE);
 80010c2:	2215      	movs	r2, #21
 80010c4:	2100      	movs	r1, #0
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <resetHeader+0x24>)
 80010c8:	f014 fdc0 	bl	8015c4c <memset>
	bufferIO[4] = id;
 80010cc:	4a03      	ldr	r2, [pc, #12]	@ (80010dc <resetHeader+0x24>)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	7113      	strb	r3, [r2, #4]
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	24000554 	.word	0x24000554

080010e0 <sendPacket>:

// Send a packet data to BNO
static HAL_StatusTypeDef sendPacket(const uint8_t channelNumber) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	// dataLength includes the SHTP_HEADER_SIZE
	uint8_t dataLength = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
	bufferIO[2] = channelNumber;
 80010ee:	4a35      	ldr	r2, [pc, #212]	@ (80011c4 <sendPacket+0xe4>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	7093      	strb	r3, [r2, #2]
	bufferIO[3] = sequenceNumber[channelNumber]++;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4a34      	ldr	r2, [pc, #208]	@ (80011c8 <sendPacket+0xe8>)
 80010f8:	5cd2      	ldrb	r2, [r2, r3]
 80010fa:	1c51      	adds	r1, r2, #1
 80010fc:	b2c8      	uxtb	r0, r1
 80010fe:	4932      	ldr	r1, [pc, #200]	@ (80011c8 <sendPacket+0xe8>)
 8001100:	54c8      	strb	r0, [r1, r3]
 8001102:	4b30      	ldr	r3, [pc, #192]	@ (80011c4 <sendPacket+0xe4>)
 8001104:	70da      	strb	r2, [r3, #3]
	if(bufferIO[2] == CHANNEL_EXECUTABLE) {
 8001106:	4b2f      	ldr	r3, [pc, #188]	@ (80011c4 <sendPacket+0xe4>)
 8001108:	789b      	ldrb	r3, [r3, #2]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d102      	bne.n	8001114 <sendPacket+0x34>
		dataLength = 5;
 800110e:	2305      	movs	r3, #5
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	e03d      	b.n	8001190 <sendPacket+0xb0>
	} else {
		switch(bufferIO[4]) {
 8001114:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <sendPacket+0xe4>)
 8001116:	791b      	ldrb	r3, [r3, #4]
 8001118:	2bfe      	cmp	r3, #254	@ 0xfe
 800111a:	dc39      	bgt.n	8001190 <sendPacket+0xb0>
 800111c:	2bf0      	cmp	r3, #240	@ 0xf0
 800111e:	da07      	bge.n	8001130 <sendPacket+0x50>
 8001120:	2b03      	cmp	r3, #3
 8001122:	d02f      	beq.n	8001184 <sendPacket+0xa4>
 8001124:	2b03      	cmp	r3, #3
 8001126:	db33      	blt.n	8001190 <sendPacket+0xb0>
 8001128:	3b06      	subs	r3, #6
 800112a:	2b01      	cmp	r3, #1
 800112c:	d830      	bhi.n	8001190 <sendPacket+0xb0>
 800112e:	e029      	b.n	8001184 <sendPacket+0xa4>
 8001130:	3bf0      	subs	r3, #240	@ 0xf0
 8001132:	2b0e      	cmp	r3, #14
 8001134:	d82c      	bhi.n	8001190 <sendPacket+0xb0>
 8001136:	a201      	add	r2, pc, #4	@ (adr r2, 800113c <sendPacket+0x5c>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	08001179 	.word	0x08001179
 8001140:	08001191 	.word	0x08001191
 8001144:	08001185 	.word	0x08001185
 8001148:	08001191 	.word	0x08001191
 800114c:	0800117f 	.word	0x0800117f
 8001150:	08001191 	.word	0x08001191
 8001154:	08001191 	.word	0x08001191
 8001158:	08001185 	.word	0x08001185
 800115c:	08001191 	.word	0x08001191
 8001160:	08001179 	.word	0x08001179
 8001164:	08001191 	.word	0x08001191
 8001168:	08001191 	.word	0x08001191
 800116c:	08001191 	.word	0x08001191
 8001170:	0800118b 	.word	0x0800118b
 8001174:	08001179 	.word	0x08001179
			case REPORT_SENSOR_FLUSH_REQUEST:
			case REPORT_GET_FEATURE_REQUEST:
			case REPORT_PRODUCT_ID_REQUEST:
				dataLength = 6;
 8001178:	2306      	movs	r3, #6
 800117a:	73fb      	strb	r3, [r7, #15]
			break;
 800117c:	e008      	b.n	8001190 <sendPacket+0xb0>
			case REPORT_FRS_READ_REQUEST:
				dataLength = 12;
 800117e:	230c      	movs	r3, #12
 8001180:	73fb      	strb	r3, [r7, #15]
			break;
 8001182:	e005      	b.n	8001190 <sendPacket+0xb0>
			case COMMAND_ME_CALIBRATE:
			case COMMAND_TARE:
			case COMMAND_SAVE_DCD:
			case REPORT_COMMAND_REQUEST:
			case REPORT_FRS_WRITE_REQUEST:
				dataLength = 16;
 8001184:	2310      	movs	r3, #16
 8001186:	73fb      	strb	r3, [r7, #15]
			break;
 8001188:	e002      	b.n	8001190 <sendPacket+0xb0>
			case REPORT_SET_FEATURE_COMMAND:
				dataLength = 21;
 800118a:	2315      	movs	r3, #21
 800118c:	73fb      	strb	r3, [r7, #15]
			break;
 800118e:	bf00      	nop
		}
	}
	bufferIO[0] = dataLength & 0xFF;
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <sendPacket+0xe4>)
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	7013      	strb	r3, [r2, #0]
	bufferIO[1] = (dataLength >> 8) & 0x7F;
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <sendPacket+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	705a      	strb	r2, [r3, #1]
	// Send packet to IMU
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, BNO_W_ADDR, bufferIO, dataLength, PORT_TIMEOUT);
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	4a07      	ldr	r2, [pc, #28]	@ (80011c4 <sendPacket+0xe4>)
 80011a8:	2196      	movs	r1, #150	@ 0x96
 80011aa:	4808      	ldr	r0, [pc, #32]	@ (80011cc <sendPacket+0xec>)
 80011ac:	f002 fd06 	bl	8003bbc <HAL_I2C_Master_Transmit>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73bb      	strb	r3, [r7, #14]
	delay_us(RESET_DELAY); // Delay 100 microsecs before next I2C
 80011b4:	20c8      	movs	r0, #200	@ 0xc8
 80011b6:	f7ff ff67 	bl	8001088 <delay_us>
	return ret;
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000554 	.word	0x24000554
 80011c8:	24000670 	.word	0x24000670
 80011cc:	24000714 	.word	0x24000714

080011d0 <receivePacket>:

// Get a data packet from BNO
static HAL_StatusTypeDef receivePacket(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af02      	add	r7, sp, #8
	// Reset Interrupt status
	BNO_Ready = 0;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <receivePacket+0x80>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	memset(bufferIO, 0, TX_PACKET_SIZE);
 80011dc:	2215      	movs	r2, #21
 80011de:	2100      	movs	r1, #0
 80011e0:	481c      	ldr	r0, [pc, #112]	@ (8001254 <receivePacket+0x84>)
 80011e2:	f014 fd33 	bl	8015c4c <memset>
	//Ask for 4 bytes to find out how much data we need to read
	if(HAL_I2C_Master_Receive(&hi2c1, BNO_R_ADDR, bufferIO, HEADER_SIZE, PORT_TIMEOUT) != HAL_OK) {
 80011e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2304      	movs	r3, #4
 80011ee:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <receivePacket+0x84>)
 80011f0:	2197      	movs	r1, #151	@ 0x97
 80011f2:	4819      	ldr	r0, [pc, #100]	@ (8001258 <receivePacket+0x88>)
 80011f4:	f002 fdfa 	bl	8003dec <HAL_I2C_Master_Receive>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <receivePacket+0x32>
		return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e022      	b.n	8001248 <receivePacket+0x78>
	}
	// Calculate the number of data bytes in packet
	uint16_t rxPacketLength = *(uint16_t *)&bufferIO;//getPacketLenghth();
 8001202:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <receivePacket+0x84>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	80fb      	strh	r3, [r7, #6]
	// No data received ?
	if(!rxPacketLength) {
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <receivePacket+0x42>
		return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e01a      	b.n	8001248 <receivePacket+0x78>
	}
	if(rxPacketLength > RX_PACKET_SIZE) {
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8001218:	d901      	bls.n	800121e <receivePacket+0x4e>
		return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e014      	b.n	8001248 <receivePacket+0x78>
	}
	// Wait 100us
	delay_us(RESET_DELAY); // Delay 100 microsecs before next I2C
 800121e:	20c8      	movs	r0, #200	@ 0xc8
 8001220:	f7ff ff32 	bl	8001088 <delay_us>
	if(HAL_I2C_Master_Receive(&hi2c1, BNO_R_ADDR, bufferIO, rxPacketLength, PORT_TIMEOUT) != HAL_OK) {
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <receivePacket+0x84>)
 800122e:	2197      	movs	r1, #151	@ 0x97
 8001230:	4809      	ldr	r0, [pc, #36]	@ (8001258 <receivePacket+0x88>)
 8001232:	f002 fddb 	bl	8003dec <HAL_I2C_Master_Receive>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <receivePacket+0x70>
		return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e003      	b.n	8001248 <receivePacket+0x78>
	}
	delay_us(RESET_DELAY); // Delay 100 microsecs before next I2C
 8001240:	20c8      	movs	r0, #200	@ 0xc8
 8001242:	f7ff ff21 	bl	8001088 <delay_us>
	return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	24000552 	.word	0x24000552
 8001254:	24000554 	.word	0x24000554
 8001258:	24000714 	.word	0x24000714

0800125c <sendExecutable>:

// Send a command on exe channel
static HAL_StatusTypeDef sendExecutable(const uint8_t cmd) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	resetHeader(cmd);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff25 	bl	80010b8 <resetHeader>
	return sendPacket(CHANNEL_EXECUTABLE);
 800126e:	2001      	movs	r0, #1
 8001270:	f7ff ff36 	bl	80010e0 <sendPacket>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <getSensorValue>:
//bufferIO - 0..3 Header
//bufferIO - 4..8 Time stamp
//bufferIO - 9 Which sensor produced this event
//bufferIO - 10 Sequence number increments once for each report sent. Gaps in the sequence numbers indicate missing or dropped reports.
//bufferIO - 11 Status bits 7-5: reserved, 4-2: exponent delay, 1-0: Accuracy
static void getSensorValue(void) {
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	//int16_t dataLength = *(uint16_t *)&bufferIO - 4;
	sensorData.sensorId = bufferIO[9];
 8001284:	499a      	ldr	r1, [pc, #616]	@ (80014f0 <getSensorValue+0x270>)
 8001286:	7a48      	ldrb	r0, [r1, #9]
 8001288:	499a      	ldr	r1, [pc, #616]	@ (80014f4 <getSensorValue+0x274>)
 800128a:	7008      	strb	r0, [r1, #0]
	sensorData.timestamp = *(uint32_t *)&bufferIO[5];
 800128c:	499a      	ldr	r1, [pc, #616]	@ (80014f8 <getSensorValue+0x278>)
 800128e:	6809      	ldr	r1, [r1, #0]
 8001290:	2000      	movs	r0, #0
 8001292:	460a      	mov	r2, r1
 8001294:	4603      	mov	r3, r0
 8001296:	4997      	ldr	r1, [pc, #604]	@ (80014f4 <getSensorValue+0x274>)
 8001298:	e9c1 2302 	strd	r2, r3, [r1, #8]
	} else {
		sensorData.sequence = 0;
		sensorData.status = 0; //Get status bits
	}
	#else
		sensorData.sequence = bufferIO[10];
 800129c:	4b94      	ldr	r3, [pc, #592]	@ (80014f0 <getSensorValue+0x270>)
 800129e:	7a9a      	ldrb	r2, [r3, #10]
 80012a0:	4b94      	ldr	r3, [pc, #592]	@ (80014f4 <getSensorValue+0x274>)
 80012a2:	705a      	strb	r2, [r3, #1]
		sensorData.status = bufferIO[11] & 0x03; //Get status bits
 80012a4:	4b92      	ldr	r3, [pc, #584]	@ (80014f0 <getSensorValue+0x270>)
 80012a6:	7adb      	ldrb	r3, [r3, #11]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b91      	ldr	r3, [pc, #580]	@ (80014f4 <getSensorValue+0x274>)
 80012b0:	709a      	strb	r2, [r3, #2]
	#endif


	switch(sensorData.sensorId)	{
 80012b2:	4b90      	ldr	r3, [pc, #576]	@ (80014f4 <getSensorValue+0x274>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	2b07      	cmp	r3, #7
 80012ba:	f200 8114 	bhi.w	80014e6 <getSensorValue+0x266>
 80012be:	a201      	add	r2, pc, #4	@ (adr r2, 80012c4 <getSensorValue+0x44>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	080012e5 	.word	0x080012e5
 80012c8:	0800133b 	.word	0x0800133b
 80012cc:	08001391 	.word	0x08001391
 80012d0:	080014e7 	.word	0x080014e7
 80012d4:	080013e7 	.word	0x080013e7
 80012d8:	080014e7 	.word	0x080014e7
 80012dc:	080014e7 	.word	0x080014e7
 80012e0:	08001475 	.word	0x08001475
			sensorData.SenVal.RawAccelerometer.TimeStamp = *(uint32_t *)&bufferIO[21];
		break;
		#endif
		#ifdef ACCELEROMETER
		case ACCELEROMETER:
			sensorData.SenVal.Accelerometer.X = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q8;
 80012e4:	4b85      	ldr	r3, [pc, #532]	@ (80014fc <getSensorValue+0x27c>)
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f2:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001500 <getSensorValue+0x280>
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fa:	4b7e      	ldr	r3, [pc, #504]	@ (80014f4 <getSensorValue+0x274>)
 80012fc:	edc3 7a05 	vstr	s15, [r3, #20]
			sensorData.SenVal.Accelerometer.Y = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q8;
 8001300:	4b7e      	ldr	r3, [pc, #504]	@ (80014fc <getSensorValue+0x27c>)
 8001302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130e:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8001500 <getSensorValue+0x280>
 8001312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001316:	4b77      	ldr	r3, [pc, #476]	@ (80014f4 <getSensorValue+0x274>)
 8001318:	edc3 7a06 	vstr	s15, [r3, #24]
			sensorData.SenVal.Accelerometer.Z = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q8;
 800131c:	4b77      	ldr	r3, [pc, #476]	@ (80014fc <getSensorValue+0x27c>)
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001500 <getSensorValue+0x280>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	4b70      	ldr	r3, [pc, #448]	@ (80014f4 <getSensorValue+0x274>)
 8001334:	edc3 7a07 	vstr	s15, [r3, #28]
		break;
 8001338:	e0d5      	b.n	80014e6 <getSensorValue+0x266>
			sensorData.SenVal.RawGyroscope.TimeStamp = *(uint32_t *)&bufferIO[21];
		break;
		#endif
		#ifdef GYROSCOPE_CALIBRATED
		case GYROSCOPE_CALIBRATED:
			sensorData.SenVal.Gyroscope.X = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q9;
 800133a:	4b70      	ldr	r3, [pc, #448]	@ (80014fc <getSensorValue+0x27c>)
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001348:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8001504 <getSensorValue+0x284>
 800134c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001350:	4b68      	ldr	r3, [pc, #416]	@ (80014f4 <getSensorValue+0x274>)
 8001352:	edc3 7a05 	vstr	s15, [r3, #20]
			sensorData.SenVal.Gyroscope.Y = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q9;
 8001356:	4b6c      	ldr	r3, [pc, #432]	@ (8001508 <getSensorValue+0x288>)
 8001358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001504 <getSensorValue+0x284>
 8001368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136c:	4b61      	ldr	r3, [pc, #388]	@ (80014f4 <getSensorValue+0x274>)
 800136e:	edc3 7a06 	vstr	s15, [r3, #24]
			sensorData.SenVal.Gyroscope.Z = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q9;
 8001372:	4b66      	ldr	r3, [pc, #408]	@ (800150c <getSensorValue+0x28c>)
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001380:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001504 <getSensorValue+0x284>
 8001384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001388:	4b5a      	ldr	r3, [pc, #360]	@ (80014f4 <getSensorValue+0x274>)
 800138a:	edc3 7a07 	vstr	s15, [r3, #28]
		break;
 800138e:	e0aa      	b.n	80014e6 <getSensorValue+0x266>
			sensorData.SenVal.RawMagnetometer.TimeStamp = *(uint32_t *)&bufferIO[21];
		break;
		#endif
		#ifdef MAGNETIC_FIELD_CALIBRATED
		case MAGNETIC_FIELD_CALIBRATED:
			sensorData.SenVal.MagneticField.X = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q4;
 8001390:	4b5a      	ldr	r3, [pc, #360]	@ (80014fc <getSensorValue+0x27c>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139e:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001510 <getSensorValue+0x290>
 80013a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a6:	4b53      	ldr	r3, [pc, #332]	@ (80014f4 <getSensorValue+0x274>)
 80013a8:	edc3 7a05 	vstr	s15, [r3, #20]
			sensorData.SenVal.MagneticField.Y = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q4;
 80013ac:	4b56      	ldr	r3, [pc, #344]	@ (8001508 <getSensorValue+0x288>)
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ba:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001510 <getSensorValue+0x290>
 80013be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c2:	4b4c      	ldr	r3, [pc, #304]	@ (80014f4 <getSensorValue+0x274>)
 80013c4:	edc3 7a06 	vstr	s15, [r3, #24]
			sensorData.SenVal.MagneticField.Z = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q4;
 80013c8:	4b50      	ldr	r3, [pc, #320]	@ (800150c <getSensorValue+0x28c>)
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d6:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001510 <getSensorValue+0x290>
 80013da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013de:	4b45      	ldr	r3, [pc, #276]	@ (80014f4 <getSensorValue+0x274>)
 80013e0:	edc3 7a07 	vstr	s15, [r3, #28]
		break;
 80013e4:	e07f      	b.n	80014e6 <getSensorValue+0x266>
		break;
		#endif
		#ifdef ROTATION_VECTOR
		case ROTATION_VECTOR:
			#ifdef USE_FOR_TELESCOPE
			sensorData.SenVal.RotationVector.I = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q14;
 80013e6:	4b45      	ldr	r3, [pc, #276]	@ (80014fc <getSensorValue+0x27c>)
 80013e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001514 <getSensorValue+0x294>
 80013f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013fc:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <getSensorValue+0x274>)
 80013fe:	edc3 7a05 	vstr	s15, [r3, #20]
			sensorData.SenVal.RotationVector.J = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q14;
 8001402:	4b41      	ldr	r3, [pc, #260]	@ (8001508 <getSensorValue+0x288>)
 8001404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001410:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001514 <getSensorValue+0x294>
 8001414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001418:	4b36      	ldr	r3, [pc, #216]	@ (80014f4 <getSensorValue+0x274>)
 800141a:	edc3 7a06 	vstr	s15, [r3, #24]
			sensorData.SenVal.RotationVector.K = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q14;
 800141e:	4b3b      	ldr	r3, [pc, #236]	@ (800150c <getSensorValue+0x28c>)
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001514 <getSensorValue+0x294>
 8001430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001434:	4b2f      	ldr	r3, [pc, #188]	@ (80014f4 <getSensorValue+0x274>)
 8001436:	edc3 7a07 	vstr	s15, [r3, #28]
			sensorData.SenVal.RotationVector.Real = (float)(*(int16_t *)&bufferIO[19]) * SCALE_Q14;
 800143a:	4b37      	ldr	r3, [pc, #220]	@ (8001518 <getSensorValue+0x298>)
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001514 <getSensorValue+0x294>
 800144c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <getSensorValue+0x274>)
 8001452:	edc3 7a08 	vstr	s15, [r3, #32]
			sensorData.SenVal.RotationVector.Accuracy = (float)(*(int16_t *)&bufferIO[21]) * SCALE_Q14;
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <getSensorValue+0x29c>)
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001514 <getSensorValue+0x294>
 8001468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146c:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <getSensorValue+0x274>)
 800146e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			sensorData.SenVal.RotationVector.J = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q14;
			sensorData.SenVal.RotationVector.K = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q14;
			sensorData.SenVal.RotationVector.Real = (float)(*(int16_t *)&bufferIO[19]) * SCALE_Q14;
			sensorData.SenVal.RotationVector.Accuracy = (float)(*(int16_t *)&bufferIO[21]) * SCALE_Q14;
			#endif
		break;
 8001472:	e038      	b.n	80014e6 <getSensorValue+0x266>
		#endif
		#ifdef GAME_ROTATION_VECTOR
			case GAME_ROTATION_VECTOR:
			sensorData.SenVal.GameRotationVector.I = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q14;
 8001474:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <getSensorValue+0x27c>)
 8001476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001482:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001514 <getSensorValue+0x294>
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148a:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <getSensorValue+0x274>)
 800148c:	edc3 7a05 	vstr	s15, [r3, #20]
			sensorData.SenVal.GameRotationVector.J = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q14;
 8001490:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <getSensorValue+0x288>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001514 <getSensorValue+0x294>
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <getSensorValue+0x274>)
 80014a8:	edc3 7a06 	vstr	s15, [r3, #24]
			sensorData.SenVal.GameRotationVector.K = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q14;
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <getSensorValue+0x28c>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ba:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001514 <getSensorValue+0x294>
 80014be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <getSensorValue+0x274>)
 80014c4:	edc3 7a07 	vstr	s15, [r3, #28]
			sensorData.SenVal.GameRotationVector.Real = (float)(*(int16_t *)&bufferIO[19]) * SCALE_Q14;
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <getSensorValue+0x298>)
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001514 <getSensorValue+0x294>
 80014da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014de:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <getSensorValue+0x274>)
 80014e0:	edc3 7a08 	vstr	s15, [r3, #32]
		break;
 80014e4:	bf00      	nop
			sensorData.SenVal.WheelEncoder.DataType = bufferIO[18];
			sensorData.SenVal.WheelEncoder.Data = *(int16_t *)&bufferIO[19];
		break;
		#endif
	}
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	24000554 	.word	0x24000554
 80014f4:	240006d0 	.word	0x240006d0
 80014f8:	24000559 	.word	0x24000559
 80014fc:	24000561 	.word	0x24000561
 8001500:	3b800000 	.word	0x3b800000
 8001504:	3b000000 	.word	0x3b000000
 8001508:	24000563 	.word	0x24000563
 800150c:	24000565 	.word	0x24000565
 8001510:	3d800000 	.word	0x3d800000
 8001514:	38800000 	.word	0x38800000
 8001518:	24000567 	.word	0x24000567
 800151c:	24000569 	.word	0x24000569

08001520 <processCommandResponse>:

// Process a command response
static HAL_StatusTypeDef processCommandResponse(void) {
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	// Reset complete
	switch(cmdResponse.command) {
 8001524:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <processCommandResponse+0xb0>)
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	2b0d      	cmp	r3, #13
 800152a:	dc1b      	bgt.n	8001564 <processCommandResponse+0x44>
 800152c:	2b04      	cmp	r3, #4
 800152e:	db48      	blt.n	80015c2 <processCommandResponse+0xa2>
 8001530:	3b04      	subs	r3, #4
 8001532:	2b09      	cmp	r3, #9
 8001534:	d845      	bhi.n	80015c2 <processCommandResponse+0xa2>
 8001536:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <processCommandResponse+0x1c>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	08001569 	.word	0x08001569
 8001540:	080015c3 	.word	0x080015c3
 8001544:	0800157b 	.word	0x0800157b
 8001548:	08001587 	.word	0x08001587
 800154c:	080015c3 	.word	0x080015c3
 8001550:	080015c3 	.word	0x080015c3
 8001554:	08001597 	.word	0x08001597
 8001558:	080015c3 	.word	0x080015c3
 800155c:	080015a3 	.word	0x080015a3
 8001560:	080015af 	.word	0x080015af
 8001564:	2b84      	cmp	r3, #132	@ 0x84
 8001566:	d12c      	bne.n	80015c2 <processCommandResponse+0xa2>
			return HAL_OK;
		break;
		#endif
		case COMMAND_UNSOLICITED_INITIALIZE: // 0x84 � Initialize (unsolicited)
		case COMMAND_INITIALIZE: // 0x04 � Initialize
			if (!bufferIO[9]) {
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <processCommandResponse+0xb4>)
 800156a:	7a5b      	ldrb	r3, [r3, #9]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d127      	bne.n	80015c0 <processCommandResponse+0xa0>
				resetOccurred = 1;
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <processCommandResponse+0xb8>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
				return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e024      	b.n	80015c4 <processCommandResponse+0xa4>
			}
		break;
		case COMMAND_SAVE_DCD: // 0x06 � Save DCD
			saveDcdStatus = bufferIO[9];
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <processCommandResponse+0xb4>)
 800157c:	7a5a      	ldrb	r2, [r3, #9]
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <processCommandResponse+0xbc>)
 8001580:	701a      	strb	r2, [r3, #0]
			return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e01e      	b.n	80015c4 <processCommandResponse+0xa4>
		break;
		case COMMAND_ME_CALIBRATE: // 0x07 � Configure ME Calibration
			calibrationStatus = *(BNO_calibrationStat_t *)&bufferIO[9];
 8001586:	4a16      	ldr	r2, [pc, #88]	@ (80015e0 <processCommandResponse+0xc0>)
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <processCommandResponse+0xc4>)
 800158a:	6810      	ldr	r0, [r2, #0]
 800158c:	6018      	str	r0, [r3, #0]
 800158e:	8892      	ldrh	r2, [r2, #4]
 8001590:	809a      	strh	r2, [r3, #4]
			return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e016      	b.n	80015c4 <processCommandResponse+0xa4>
		break;
		case COMMAND_OSCILLATOR: // 0x0A � Get Oscillator Type Command
			oscillatorType = bufferIO[9];
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <processCommandResponse+0xb4>)
 8001598:	7a5a      	ldrb	r2, [r3, #9]
 800159a:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <processCommandResponse+0xc8>)
 800159c:	701a      	strb	r2, [r3, #0]
			return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e010      	b.n	80015c4 <processCommandResponse+0xa4>
		break;
		case COMMAND_TURNTABLE_CAL: // 0x0C � Turntable Calibration
			calibrationStatus.Status = bufferIO[9];
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <processCommandResponse+0xb4>)
 80015a4:	7a5a      	ldrb	r2, [r3, #9]
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <processCommandResponse+0xc4>)
 80015a8:	701a      	strb	r2, [r3, #0]
			return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e00a      	b.n	80015c4 <processCommandResponse+0xa4>
		break;
		case COMMAND_BOOTLOADER:// 0x0D � Bootloader command
			bootLoader = *(BNO_Boot_t *)&bufferIO[10];
 80015ae:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <processCommandResponse+0xcc>)
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <processCommandResponse+0xd0>)
 80015b2:	6810      	ldr	r0, [r2, #0]
 80015b4:	6851      	ldr	r1, [r2, #4]
 80015b6:	c303      	stmia	r3!, {r0, r1}
 80015b8:	8912      	ldrh	r2, [r2, #8]
 80015ba:	801a      	strh	r2, [r3, #0]
			return HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	e001      	b.n	80015c4 <processCommandResponse+0xa4>
		break;
 80015c0:	bf00      	nop
		break;
	}
	return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	240006b0 	.word	0x240006b0
 80015d4:	24000554 	.word	0x24000554
 80015d8:	24000676 	.word	0x24000676
 80015dc:	2400002c 	.word	0x2400002c
 80015e0:	2400055d 	.word	0x2400055d
 80015e4:	24000688 	.word	0x24000688
 80015e8:	240006a1 	.word	0x240006a1
 80015ec:	2400055e 	.word	0x2400055e
 80015f0:	240006a4 	.word	0x240006a4

080015f4 <processResponse>:

// Process a response
static HAL_StatusTypeDef processResponse(void) {
 80015f4:	b598      	push	{r3, r4, r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	switch(bufferIO[4]) {
 80015f8:	4b44      	ldr	r3, [pc, #272]	@ (800170c <processResponse+0x118>)
 80015fa:	791b      	ldrb	r3, [r3, #4]
 80015fc:	2bfc      	cmp	r3, #252	@ 0xfc
 80015fe:	f300 8082 	bgt.w	8001706 <processResponse+0x112>
 8001602:	2bef      	cmp	r3, #239	@ 0xef
 8001604:	da04      	bge.n	8001610 <processResponse+0x1c>
 8001606:	2b00      	cmp	r3, #0
 8001608:	d024      	beq.n	8001654 <processResponse+0x60>
 800160a:	2b01      	cmp	r3, #1
 800160c:	d028      	beq.n	8001660 <processResponse+0x6c>
 800160e:	e07a      	b.n	8001706 <processResponse+0x112>
 8001610:	3bef      	subs	r3, #239	@ 0xef
 8001612:	2b0d      	cmp	r3, #13
 8001614:	d877      	bhi.n	8001706 <processResponse+0x112>
 8001616:	a201      	add	r2, pc, #4	@ (adr r2, 800161c <processResponse+0x28>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	080016f1 	.word	0x080016f1
 8001620:	08001707 	.word	0x08001707
 8001624:	0800166d 	.word	0x0800166d
 8001628:	08001707 	.word	0x08001707
 800162c:	0800168d 	.word	0x0800168d
 8001630:	08001707 	.word	0x08001707
 8001634:	080016a3 	.word	0x080016a3
 8001638:	08001707 	.word	0x08001707
 800163c:	08001707 	.word	0x08001707
 8001640:	080016b3 	.word	0x080016b3
 8001644:	08001707 	.word	0x08001707
 8001648:	08001707 	.word	0x08001707
 800164c:	080016c9 	.word	0x080016c9
 8001650:	080016dd 	.word	0x080016dd
		case REPORT_UNSOLICITED_RESPONSE: // 0x00
			if(bufferIO[2] == CHANNEL_COMMAND) return HAL_OK;
 8001654:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <processResponse+0x118>)
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d151      	bne.n	8001700 <processResponse+0x10c>
 800165c:	2300      	movs	r3, #0
 800165e:	e053      	b.n	8001708 <processResponse+0x114>
		break;
		case REPORT_UNSOLICITED_RESPONSE1: // 0x01
			if(bufferIO[2] == CHANNEL_EXECUTABLE) return HAL_OK;
 8001660:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <processResponse+0x118>)
 8001662:	789b      	ldrb	r3, [r3, #2]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d14d      	bne.n	8001704 <processResponse+0x110>
 8001668:	2300      	movs	r3, #0
 800166a:	e04d      	b.n	8001708 <processResponse+0x114>
		break;
		case REPORT_COMMAND_RESPONSE: // 0xF1
			cmdResponse = *(BNO_CommandResp_t *)&bufferIO[5];
 800166c:	4a28      	ldr	r2, [pc, #160]	@ (8001710 <processResponse+0x11c>)
 800166e:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <processResponse+0x120>)
 8001670:	4614      	mov	r4, r2
 8001672:	6820      	ldr	r0, [r4, #0]
 8001674:	6861      	ldr	r1, [r4, #4]
 8001676:	68a2      	ldr	r2, [r4, #8]
 8001678:	c307      	stmia	r3!, {r0, r1, r2}
 800167a:	89a2      	ldrh	r2, [r4, #12]
 800167c:	7ba1      	ldrb	r1, [r4, #14]
 800167e:	801a      	strh	r2, [r3, #0]
 8001680:	460a      	mov	r2, r1
 8001682:	709a      	strb	r2, [r3, #2]
			return processCommandResponse();
 8001684:	f7ff ff4c 	bl	8001520 <processCommandResponse>
 8001688:	4603      	mov	r3, r0
 800168a:	e03d      	b.n	8001708 <processResponse+0x114>
		break;
		case REPORT_FRS_READ_RESPONSE: // 0xF3
			frsReadResponse = *(BNO_FrsReadResp_t *)&bufferIO[5];
 800168c:	4a20      	ldr	r2, [pc, #128]	@ (8001710 <processResponse+0x11c>)
 800168e:	4b22      	ldr	r3, [pc, #136]	@ (8001718 <processResponse+0x124>)
 8001690:	4614      	mov	r4, r2
 8001692:	6820      	ldr	r0, [r4, #0]
 8001694:	6861      	ldr	r1, [r4, #4]
 8001696:	68a2      	ldr	r2, [r4, #8]
 8001698:	c307      	stmia	r3!, {r0, r1, r2}
 800169a:	7b22      	ldrb	r2, [r4, #12]
 800169c:	701a      	strb	r2, [r3, #0]
			return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e032      	b.n	8001708 <processResponse+0x114>
		break;
		case REPORT_FRS_WRITE_RESPONSE: // 0xF5
			frsWriteResponse = *(BNO_FrsWriteResp_t *)&bufferIO[5];
 80016a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001710 <processResponse+0x11c>)
 80016a4:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <processResponse+0x128>)
 80016a6:	8811      	ldrh	r1, [r2, #0]
 80016a8:	7892      	ldrb	r2, [r2, #2]
 80016aa:	8019      	strh	r1, [r3, #0]
 80016ac:	709a      	strb	r2, [r3, #2]
			return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e02a      	b.n	8001708 <processResponse+0x114>
		break;
		case REPORT_PRODUCT_ID_RESPONSE: // 0xF8
			myID = *(BNO_productID_t *)&bufferIO[5];
 80016b2:	4a17      	ldr	r2, [pc, #92]	@ (8001710 <processResponse+0x11c>)
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <processResponse+0x12c>)
 80016b6:	4614      	mov	r4, r2
 80016b8:	6820      	ldr	r0, [r4, #0]
 80016ba:	6861      	ldr	r1, [r4, #4]
 80016bc:	68a2      	ldr	r2, [r4, #8]
 80016be:	c307      	stmia	r3!, {r0, r1, r2}
 80016c0:	7b22      	ldrb	r2, [r4, #12]
 80016c2:	701a      	strb	r2, [r3, #0]
			return HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e01f      	b.n	8001708 <processResponse+0x114>
		break;
		case REPORT_BASE_TIMESTAMP_REF: // 0xFB
			if(bufferIO[2] == CHANNEL_REPORTS) {
 80016c8:	4b10      	ldr	r3, [pc, #64]	@ (800170c <processResponse+0x118>)
 80016ca:	789b      	ldrb	r3, [r3, #2]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d103      	bne.n	80016d8 <processResponse+0xe4>
				getSensorValue();
 80016d0:	f7ff fdd6 	bl	8001280 <getSensorValue>
				return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e017      	b.n	8001708 <processResponse+0x114>
			}
			return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e015      	b.n	8001708 <processResponse+0x114>
		break;
		case REPORT_GET_FEATURE_RESPONSE: // 0xFC
			sensorFeartures = *(BNO_Feature_t *)&bufferIO[5];
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <processResponse+0x11c>)
 80016de:	4a11      	ldr	r2, [pc, #68]	@ (8001724 <processResponse+0x130>)
 80016e0:	4614      	mov	r4, r2
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	6859      	ldr	r1, [r3, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			return HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e00b      	b.n	8001708 <processResponse+0x114>
		break;
		case REPORT_SENSOR_FLUSH_RESPONSE: // 0xEF
			if(bufferIO[2] == CHANNEL_REPORTS) {
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <processResponse+0x118>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d101      	bne.n	80016fc <processResponse+0x108>
				// Not using them, so....
				return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e005      	b.n	8001708 <processResponse+0x114>
			}
			return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e003      	b.n	8001708 <processResponse+0x114>
		break;
 8001700:	bf00      	nop
 8001702:	e000      	b.n	8001706 <processResponse+0x112>
		break;
 8001704:	bf00      	nop
		break;
	}
	return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd98      	pop	{r3, r4, r7, pc}
 800170c:	24000554 	.word	0x24000554
 8001710:	24000559 	.word	0x24000559
 8001714:	240006b0 	.word	0x240006b0
 8001718:	24000694 	.word	0x24000694
 800171c:	24000690 	.word	0x24000690
 8001720:	24000678 	.word	0x24000678
 8001724:	240006c0 	.word	0x240006c0

08001728 <waitForPacket>:

// Wait to receive a packet from BNO
static HAL_StatusTypeDef waitForPacket(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	if(waitInt()) {
 800172c:	f7ff fc4c 	bl	8000fc8 <waitInt>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <waitForPacket+0x16>
		return receivePacket();
 8001736:	f7ff fd4b 	bl	80011d0 <receivePacket>
 800173a:	4603      	mov	r3, r0
 800173c:	e000      	b.n	8001740 <waitForPacket+0x18>
	}
	return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}

08001744 <waitForCommandResponse>:

// Wait for a response from sensor
static HAL_StatusTypeDef waitForCommandResponse(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
	uint8_t sendChannel = CHANNEL_CONTROL;
 800174a:	2302      	movs	r3, #2
 800174c:	713b      	strb	r3, [r7, #4]
	uint8_t receiveChannel = CHANNEL_CONTROL;
 800174e:	2302      	movs	r3, #2
 8001750:	71fb      	strb	r3, [r7, #7]
	uint8_t expectedResponse = REPORT_COMMAND_RESPONSE;
 8001752:	23f1      	movs	r3, #241	@ 0xf1
 8001754:	71bb      	strb	r3, [r7, #6]
	switch(bufferIO[4]) {
 8001756:	4b30      	ldr	r3, [pc, #192]	@ (8001818 <waitForCommandResponse+0xd4>)
 8001758:	791b      	ldrb	r3, [r3, #4]
 800175a:	3bf0      	subs	r3, #240	@ 0xf0
 800175c:	2b0e      	cmp	r3, #14
 800175e:	d832      	bhi.n	80017c6 <waitForCommandResponse+0x82>
 8001760:	a201      	add	r2, pc, #4	@ (adr r2, 8001768 <waitForCommandResponse+0x24>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	080017ab 	.word	0x080017ab
 800176c:	080017c7 	.word	0x080017c7
 8001770:	080017c7 	.word	0x080017c7
 8001774:	080017c7 	.word	0x080017c7
 8001778:	080017c1 	.word	0x080017c1
 800177c:	080017c7 	.word	0x080017c7
 8001780:	080017c7 	.word	0x080017c7
 8001784:	080017bb 	.word	0x080017bb
 8001788:	080017c7 	.word	0x080017c7
 800178c:	080017a5 	.word	0x080017a5
 8001790:	080017c7 	.word	0x080017c7
 8001794:	080017c7 	.word	0x080017c7
 8001798:	080017c7 	.word	0x080017c7
 800179c:	080017c7 	.word	0x080017c7
 80017a0:	080017b5 	.word	0x080017b5
		case REPORT_PRODUCT_ID_REQUEST:
			expectedResponse = REPORT_PRODUCT_ID_RESPONSE;
 80017a4:	23f8      	movs	r3, #248	@ 0xf8
 80017a6:	71bb      	strb	r3, [r7, #6]
		break;
 80017a8:	e00d      	b.n	80017c6 <waitForCommandResponse+0x82>
		case REPORT_SENSOR_FLUSH_REQUEST:
			receiveChannel = CHANNEL_REPORTS;
 80017aa:	2303      	movs	r3, #3
 80017ac:	71fb      	strb	r3, [r7, #7]
			expectedResponse = REPORT_SENSOR_FLUSH_RESPONSE;
 80017ae:	23ef      	movs	r3, #239	@ 0xef
 80017b0:	71bb      	strb	r3, [r7, #6]
		break;
 80017b2:	e008      	b.n	80017c6 <waitForCommandResponse+0x82>
		case REPORT_GET_FEATURE_REQUEST:
			expectedResponse = REPORT_GET_FEATURE_RESPONSE;
 80017b4:	23fc      	movs	r3, #252	@ 0xfc
 80017b6:	71bb      	strb	r3, [r7, #6]
		break;
 80017b8:	e005      	b.n	80017c6 <waitForCommandResponse+0x82>
		case REPORT_FRS_WRITE_REQUEST:
			expectedResponse = REPORT_FRS_WRITE_RESPONSE;
 80017ba:	23f5      	movs	r3, #245	@ 0xf5
 80017bc:	71bb      	strb	r3, [r7, #6]
		break;
 80017be:	e002      	b.n	80017c6 <waitForCommandResponse+0x82>
		case REPORT_FRS_READ_REQUEST:
			expectedResponse = REPORT_FRS_READ_RESPONSE;
 80017c0:	23f3      	movs	r3, #243	@ 0xf3
 80017c2:	71bb      	strb	r3, [r7, #6]
		break;
 80017c4:	bf00      	nop
	}
	if(sendPacket(sendChannel) == HAL_OK) {
 80017c6:	793b      	ldrb	r3, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fc89 	bl	80010e0 <sendPacket>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d11b      	bne.n	800180c <waitForCommandResponse+0xc8>
		uint8_t retry = 5;
 80017d4:	2305      	movs	r3, #5
 80017d6:	717b      	strb	r3, [r7, #5]
		while(retry) {
 80017d8:	e015      	b.n	8001806 <waitForCommandResponse+0xc2>
			if(waitForPacket() == HAL_OK) {
 80017da:	f7ff ffa5 	bl	8001728 <waitForPacket>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10d      	bne.n	8001800 <waitForCommandResponse+0xbc>
				if((bufferIO[2] == receiveChannel)  && (bufferIO[4] == expectedResponse)) {
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <waitForCommandResponse+0xd4>)
 80017e6:	789b      	ldrb	r3, [r3, #2]
 80017e8:	79fa      	ldrb	r2, [r7, #7]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d108      	bne.n	8001800 <waitForCommandResponse+0xbc>
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <waitForCommandResponse+0xd4>)
 80017f0:	791b      	ldrb	r3, [r3, #4]
 80017f2:	79ba      	ldrb	r2, [r7, #6]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d103      	bne.n	8001800 <waitForCommandResponse+0xbc>
					return processResponse(); // Found correct packet!
 80017f8:	f7ff fefc 	bl	80015f4 <processResponse>
 80017fc:	4603      	mov	r3, r0
 80017fe:	e006      	b.n	800180e <waitForCommandResponse+0xca>
				}
			}
			retry--;
 8001800:	797b      	ldrb	r3, [r7, #5]
 8001802:	3b01      	subs	r3, #1
 8001804:	717b      	strb	r3, [r7, #5]
		while(retry) {
 8001806:	797b      	ldrb	r3, [r7, #5]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e6      	bne.n	80017da <waitForCommandResponse+0x96>
		}
	}
	return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	24000554 	.word	0x24000554

0800181c <getID>:

// Gets the sensor SW information
static HAL_StatusTypeDef getID(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	resetHeader(REPORT_PRODUCT_ID_REQUEST);
 8001820:	20f9      	movs	r0, #249	@ 0xf9
 8001822:	f7ff fc49 	bl	80010b8 <resetHeader>
	return waitForCommandResponse();
 8001826:	f7ff ff8d 	bl	8001744 <waitForCommandResponse>
 800182a:	4603      	mov	r3, r0
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}

08001830 <BNO_Init>:
//--------------------------------------------------------------------------------------------------------------------------
// Initialize the sesnor
// During reset or power-on sequence, the bootloader first checks the status of the BOOTN pin.
// If the pin is pulled low during reset or poweron, the BNO08X will enter the bootloader mode.
// If the BOOTN pin is pulled high, then the bootloader starts the application
HAL_StatusTypeDef BNO_Init(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	// Set reset pin low
	BNO_RST_Off;
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <BNO_Init+0x58>)
 8001836:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800183a:	619a      	str	r2, [r3, #24]
	HAL_Delay(RESET_DELAY);
 800183c:	20c8      	movs	r0, #200	@ 0xc8
 800183e:	f001 fd6d 	bl	800331c <HAL_Delay>
	// Start us timer
	start_timer();
 8001842:	f7ff fbe1 	bl	8001008 <start_timer>
	// Enable interrupt BNO_Ready
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001846:	200a      	movs	r0, #10
 8001848:	f001 fe8d 	bl	8003566 <HAL_NVIC_EnableIRQ>
	// Delay for RESET_DELAY_US to ensure reset takes effect
	BNO_RST_On;
 800184c:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <BNO_Init+0x58>)
 800184e:	2220      	movs	r2, #32
 8001850:	619a      	str	r2, [r3, #24]
	HAL_Delay(RESET_DELAY);
 8001852:	20c8      	movs	r0, #200	@ 0xc8
 8001854:	f001 fd62 	bl	800331c <HAL_Delay>
	// If we got the initial packet we make a soft reset
	//if(waitForPacket()) {
		if(processResponse() == HAL_OK) {
 8001858:	f7ff fecc 	bl	80015f4 <processResponse>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <BNO_Init+0x52>
			// Wait for interrupt
			if(waitInt()) {
 8001862:	f7ff fbb1 	bl	8000fc8 <waitInt>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <BNO_Init+0x52>
				if(BNO_Reset() == HAL_OK) {
 800186c:	f000 f80e 	bl	800188c <BNO_Reset>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <BNO_Init+0x52>
					// Finally, we want to interrogate the device about its model and version.
					BNO_On();
 8001876:	f000 f82b 	bl	80018d0 <BNO_On>
					return getID();
 800187a:	f7ff ffcf 	bl	800181c <getID>
 800187e:	4603      	mov	r3, r0
 8001880:	e000      	b.n	8001884 <BNO_Init+0x54>
				}
			}
		}
	//}
	return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}
 8001888:	58020400 	.word	0x58020400

0800188c <BNO_Reset>:
uint8_t BNO_getSensorEventID(void) {
	return sensorData.sensorId;
}

// Soft reset the sensor
HAL_StatusTypeDef BNO_Reset(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	if(sendExecutable(COMMAND_INITIALIZE_RESET) != HAL_OK) { // Write 1 byte to chan EXE
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fce3 	bl	800125c <sendExecutable>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <BNO_Reset+0x14>
		return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e013      	b.n	80018c8 <BNO_Reset+0x3c>
	}
	HAL_Delay(700); // 700 millisecs for reboot
 80018a0:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80018a4:	f001 fd3a 	bl	800331c <HAL_Delay>
	// 2 packet to be ignored after reset
	if(waitForCommandResponse() == HAL_OK) {
 80018a8:	f7ff ff4c 	bl	8001744 <waitForCommandResponse>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <BNO_Reset+0x3a>
		if(resetOccurred) {
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <BNO_Reset+0x40>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <BNO_Reset+0x36>
			resetOccurred = 0;
 80018ba:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <BNO_Reset+0x40>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	e001      	b.n	80018c6 <BNO_Reset+0x3a>
		} else {
			return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <BNO_Reset+0x3c>
		}
	}
	return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	24000676 	.word	0x24000676

080018d0 <BNO_On>:

// Turn sensor ON
HAL_StatusTypeDef BNO_On(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	return sendExecutable(COMMAND_INITIALIZE_ON);
 80018d4:	2002      	movs	r0, #2
 80018d6:	f7ff fcc1 	bl	800125c <sendExecutable>
 80018da:	4603      	mov	r3, r0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}

080018e0 <BNO_saveCalibration>:
	bufferIO[7] = COMMAND_INITIALIZE_RESET; //1 Reinitialize the entire sensor hub.
	return waitForCommandResponse();
}

// Save Dynamic Calibration Data (DCD) to flash
HAL_StatusTypeDef BNO_saveCalibration(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	resetHeader(REPORT_COMMAND_REQUEST);
 80018e4:	20f2      	movs	r0, #242	@ 0xf2
 80018e6:	f7ff fbe7 	bl	80010b8 <resetHeader>
	bufferIO[5] = cmdSeqNo++;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <BNO_saveCalibration+0x44>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	b2d1      	uxtb	r1, r2
 80018f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001924 <BNO_saveCalibration+0x44>)
 80018f4:	7011      	strb	r1, [r2, #0]
 80018f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001928 <BNO_saveCalibration+0x48>)
 80018f8:	7153      	strb	r3, [r2, #5]
	bufferIO[6] = COMMAND_SAVE_DCD; // 0x06 � Save DCD Command
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <BNO_saveCalibration+0x48>)
 80018fc:	2206      	movs	r2, #6
 80018fe:	719a      	strb	r2, [r3, #6]
	saveDcdStatus = 1; // Set it as non 0
 8001900:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <BNO_saveCalibration+0x4c>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
	if(waitForCommandResponse() == HAL_OK) {
 8001906:	f7ff ff1d 	bl	8001744 <waitForCommandResponse>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <BNO_saveCalibration+0x3c>
		if(!saveDcdStatus) return HAL_OK;
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <BNO_saveCalibration+0x4c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <BNO_saveCalibration+0x3c>
 8001918:	2300      	movs	r3, #0
 800191a:	e000      	b.n	800191e <BNO_saveCalibration+0x3e>
	}
	return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	24000553 	.word	0x24000553
 8001928:	24000554 	.word	0x24000554
 800192c:	2400002c 	.word	0x2400002c

08001930 <BNO_condigureCalibration>:

// This command is sent by the host to configure the ME calibration of the accelerometer, gyro and
// magnetometer giving the host the ability to control when calibration is performed.
HAL_StatusTypeDef BNO_condigureCalibration(const uint8_t sensors) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
	resetHeader(REPORT_COMMAND_REQUEST);
 800193a:	20f2      	movs	r0, #242	@ 0xf2
 800193c:	f7ff fbbc 	bl	80010b8 <resetHeader>
	bufferIO[5] = cmdSeqNo++;
 8001940:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <BNO_condigureCalibration+0xec>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	b2d1      	uxtb	r1, r2
 8001948:	4a34      	ldr	r2, [pc, #208]	@ (8001a1c <BNO_condigureCalibration+0xec>)
 800194a:	7011      	strb	r1, [r2, #0]
 800194c:	4a34      	ldr	r2, [pc, #208]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 800194e:	7153      	strb	r3, [r2, #5]
	bufferIO[6] = COMMAND_ME_CALIBRATE; // 0x07 � ME Calibration Command
 8001950:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 8001952:	2207      	movs	r2, #7
 8001954:	719a      	strb	r2, [r3, #6]
	//bufferIO[10] = 0; // 0x00 � Subcommand: Configure ME Calibration
	// Make the internal calStatus variable non-zero (fail)
	calibrationStatus.Status = 1;
 8001956:	4b33      	ldr	r3, [pc, #204]	@ (8001a24 <BNO_condigureCalibration+0xf4>)
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
	switch(sensors) {
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b06      	cmp	r3, #6
 8001960:	d844      	bhi.n	80019ec <BNO_condigureCalibration+0xbc>
 8001962:	a201      	add	r2, pc, #4	@ (adr r2, 8001968 <BNO_condigureCalibration+0x38>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	08001985 	.word	0x08001985
 800196c:	0800198d 	.word	0x0800198d
 8001970:	08001995 	.word	0x08001995
 8001974:	0800199d 	.word	0x0800199d
 8001978:	080019a5 	.word	0x080019a5
 800197c:	080019ad 	.word	0x080019ad
 8001980:	080019c5 	.word	0x080019c5
		case CALIBRATE_ACCEL:
			bufferIO[7] = 1; // Accel Cal Enable (1 � enabled, 0 � disabled)
 8001984:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 8001986:	2201      	movs	r2, #1
 8001988:	71da      	strb	r2, [r3, #7]
		break;
 800198a:	e02f      	b.n	80019ec <BNO_condigureCalibration+0xbc>
		case CALIBRATE_GYRO:
			bufferIO[8] = 1; // Gyro Cal Enable (1 � enabled, 0 � disabled)
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 800198e:	2201      	movs	r2, #1
 8001990:	721a      	strb	r2, [r3, #8]
		break;
 8001992:	e02b      	b.n	80019ec <BNO_condigureCalibration+0xbc>
		case CALIBRATE_MAG:
			bufferIO[9] = 1; // Mag Cal Enable (1 � enabled, 0 � disabled)
 8001994:	4b22      	ldr	r3, [pc, #136]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 8001996:	2201      	movs	r2, #1
 8001998:	725a      	strb	r2, [r3, #9]
		break;
 800199a:	e027      	b.n	80019ec <BNO_condigureCalibration+0xbc>
		case CALIBRATE_PLANAR_ACCEL:
			bufferIO[11] = 1; // Planar Accel Cal Enable (1 � enabled, 0 � disabled)
 800199c:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 800199e:	2201      	movs	r2, #1
 80019a0:	72da      	strb	r2, [r3, #11]
		break;
 80019a2:	e023      	b.n	80019ec <BNO_condigureCalibration+0xbc>
		case CALIBRATE_ON_TABLE:
			bufferIO[12] = 1; // On Table Cal Enable (1 � enabled, 0 � disabled)
 80019a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	731a      	strb	r2, [r3, #12]
		break;
 80019aa:	e01f      	b.n	80019ec <BNO_condigureCalibration+0xbc>
		case CALIBRATE_ACCEL_GYRO_MAG:
			bufferIO[7] = bufferIO[8] = bufferIO[9] = 1;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	725a      	strb	r2, [r3, #9]
 80019b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019b4:	7a5a      	ldrb	r2, [r3, #9]
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019b8:	721a      	strb	r2, [r3, #8]
 80019ba:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019bc:	7a1a      	ldrb	r2, [r3, #8]
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019c0:	71da      	strb	r2, [r3, #7]
		break;
 80019c2:	e013      	b.n	80019ec <BNO_condigureCalibration+0xbc>
		case CALIBRATE_ALL:
			bufferIO[7] = bufferIO[8] = bufferIO[9] = bufferIO[11] = bufferIO[12] = 1;
 80019c4:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	731a      	strb	r2, [r3, #12]
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019cc:	7b1a      	ldrb	r2, [r3, #12]
 80019ce:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019d0:	72da      	strb	r2, [r3, #11]
 80019d2:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019d4:	7ada      	ldrb	r2, [r3, #11]
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019d8:	725a      	strb	r2, [r3, #9]
 80019da:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019dc:	7a5a      	ldrb	r2, [r3, #9]
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019e0:	721a      	strb	r2, [r3, #8]
 80019e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019e4:	7a1a      	ldrb	r2, [r3, #8]
 80019e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019e8:	71da      	strb	r2, [r3, #7]
		break;
 80019ea:	bf00      	nop
	}
	bufferIO[13] = ((sensors & 0x60) >> 5);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	115b      	asrs	r3, r3, #5
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <BNO_condigureCalibration+0xf0>)
 80019fa:	735a      	strb	r2, [r3, #13]
	if(waitForCommandResponse() == HAL_OK) {
 80019fc:	f7ff fea2 	bl	8001744 <waitForCommandResponse>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <BNO_condigureCalibration+0xe2>
		if(!calibrationStatus.Status) {
 8001a06:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <BNO_condigureCalibration+0xf4>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <BNO_condigureCalibration+0xe2>
			return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <BNO_condigureCalibration+0xe4>
		}
	}
	return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	24000553 	.word	0x24000553
 8001a20:	24000554 	.word	0x24000554
 8001a24:	24000688 	.word	0x24000688

08001a28 <BNO_calibrateHighAccuracyAndReset>:


#endif

// Start the calibration for 20s or until accuracy is 3
HAL_StatusTypeDef BNO_calibrateHighAccuracyAndReset(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	const uint16_t calibrationTime = 26000;
 8001a2e:	f246 5390 	movw	r3, #26000	@ 0x6590
 8001a32:	80bb      	strh	r3, [r7, #4]
	if(BNO_condigureCalibration(CALIBRATE_ACCEL_GYRO_MAG) == HAL_OK) {
 8001a34:	2005      	movs	r0, #5
 8001a36:	f7ff ff7b 	bl	8001930 <BNO_condigureCalibration>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d149      	bne.n	8001ad4 <BNO_calibrateHighAccuracyAndReset+0xac>
		if(BNO_setFeature(MAGNETIC_FIELD_CALIBRATED, 100000, 0) == HAL_OK) {
 8001a40:	2200      	movs	r2, #0
 8001a42:	4927      	ldr	r1, [pc, #156]	@ (8001ae0 <BNO_calibrateHighAccuracyAndReset+0xb8>)
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 f85d 	bl	8001b04 <BNO_setFeature>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d141      	bne.n	8001ad4 <BNO_calibrateHighAccuracyAndReset+0xac>
			if(BNO_setFeature(GAME_ROTATION_VECTOR, 100000, 0) == HAL_OK) {
 8001a50:	2200      	movs	r2, #0
 8001a52:	4923      	ldr	r1, [pc, #140]	@ (8001ae0 <BNO_calibrateHighAccuracyAndReset+0xb8>)
 8001a54:	2008      	movs	r0, #8
 8001a56:	f000 f855 	bl	8001b04 <BNO_setFeature>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d139      	bne.n	8001ad4 <BNO_calibrateHighAccuracyAndReset+0xac>
				uint32_t startTime = HAL_GetTick() + calibrationTime;
 8001a60:	f001 fc50 	bl	8003304 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	88bb      	ldrh	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	603b      	str	r3, [r7, #0]
				uint8_t magA,grvA = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	71bb      	strb	r3, [r7, #6]
				while(HAL_GetTick() < startTime) {
 8001a70:	e01f      	b.n	8001ab2 <BNO_calibrateHighAccuracyAndReset+0x8a>
					if((BNO_dataAvailable() == HAL_OK) && sensorData.sensorId){
 8001a72:	f000 f839 	bl	8001ae8 <BNO_dataAvailable>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d114      	bne.n	8001aa6 <BNO_calibrateHighAccuracyAndReset+0x7e>
 8001a7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <BNO_calibrateHighAccuracyAndReset+0xbc>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d010      	beq.n	8001aa6 <BNO_calibrateHighAccuracyAndReset+0x7e>
						if(sensorData.sensorId == MAGNETIC_FIELD_CALIBRATED){
 8001a84:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <BNO_calibrateHighAccuracyAndReset+0xbc>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d102      	bne.n	8001a92 <BNO_calibrateHighAccuracyAndReset+0x6a>
							magA = sensorData.status;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <BNO_calibrateHighAccuracyAndReset+0xbc>)
 8001a8e:	789b      	ldrb	r3, [r3, #2]
 8001a90:	71fb      	strb	r3, [r7, #7]
							//printf("MagA=%d\r\n", magA);
						}
						if(sensorData.sensorId == GAME_ROTATION_VECTOR){
 8001a92:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <BNO_calibrateHighAccuracyAndReset+0xbc>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d102      	bne.n	8001aa0 <BNO_calibrateHighAccuracyAndReset+0x78>
							grvA = sensorData.status;
 8001a9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <BNO_calibrateHighAccuracyAndReset+0xbc>)
 8001a9c:	789b      	ldrb	r3, [r3, #2]
 8001a9e:	71bb      	strb	r3, [r7, #6]
							//printf("GrvA=%d\r\n", grvA);
						}
						sensorData.sensorId = 0;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <BNO_calibrateHighAccuracyAndReset+0xbc>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
					}
					// If we have maximum accuracy we stop
					if((magA == 3) && (grvA == 3))
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d102      	bne.n	8001ab2 <BNO_calibrateHighAccuracyAndReset+0x8a>
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d006      	beq.n	8001ac0 <BNO_calibrateHighAccuracyAndReset+0x98>
				while(HAL_GetTick() < startTime) {
 8001ab2:	f001 fc27 	bl	8003304 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d8d9      	bhi.n	8001a72 <BNO_calibrateHighAccuracyAndReset+0x4a>
 8001abe:	e000      	b.n	8001ac2 <BNO_calibrateHighAccuracyAndReset+0x9a>
						break;
 8001ac0:	bf00      	nop
				}
				if(BNO_saveCalibration() == HAL_OK){
 8001ac2:	f7ff ff0d 	bl	80018e0 <BNO_saveCalibration>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d103      	bne.n	8001ad4 <BNO_calibrateHighAccuracyAndReset+0xac>
					return BNO_Reset();
 8001acc:	f7ff fede 	bl	800188c <BNO_Reset>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	e000      	b.n	8001ad6 <BNO_calibrateHighAccuracyAndReset+0xae>
				}
			}
		}
	}
	return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	000186a0 	.word	0x000186a0
 8001ae4:	240006d0 	.word	0x240006d0

08001ae8 <BNO_dataAvailable>:

// Check if we have new data
HAL_StatusTypeDef BNO_dataAvailable(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	if(waitForPacket() == HAL_OK) {
 8001aec:	f7ff fe1c 	bl	8001728 <waitForPacket>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d103      	bne.n	8001afe <BNO_dataAvailable+0x16>
		return processResponse();
 8001af6:	f7ff fd7d 	bl	80015f4 <processResponse>
 8001afa:	4603      	mov	r3, r0
 8001afc:	e000      	b.n	8001b00 <BNO_dataAvailable+0x18>
	}
	return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <BNO_setFeature>:
	}
	return ret;
}

// Enable features an set report time in mili seconds
HAL_StatusTypeDef BNO_setFeature(const uint8_t sensorID, const uint32_t microsBetweenReports, const uint32_t specificConfig) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	73fb      	strb	r3, [r7, #15]
	resetHeader(REPORT_SET_FEATURE_COMMAND); // Set feature command. Reference page 55
 8001b12:	20fd      	movs	r0, #253	@ 0xfd
 8001b14:	f7ff fad0 	bl	80010b8 <resetHeader>
//	sensorFeartures.changeSensitivity = 0;
//	sensorFeartures.reportInterval_uS = microsBetweenReports;
//	sensorFeartures.batchInterval_uS = 0;
//	sensorFeartures.sensorSpecific = specificConfig;
//	*(BNO_Feature_t *)&bufferIO[5] = sensorFeartures;
	bufferIO[5] = sensorID; // Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001b18:	4a08      	ldr	r2, [pc, #32]	@ (8001b3c <BNO_setFeature+0x38>)
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	7153      	strb	r3, [r2, #5]
	//bufferIO[6] = 0; // Feature flags
	//*(uint16_t *)&bufferIO[7] = 0; // Change sensitivity [absolute | relative]
	*(uint32_t *)&bufferIO[9] = microsBetweenReports; // Report interval (LSB) in microseconds
 8001b1e:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <BNO_setFeature+0x3c>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	6013      	str	r3, [r2, #0]
	//*(uint32_t *)&bufferIO[13] = 0; // Batch Interval
	*(uint32_t *)&bufferIO[17] = specificConfig; // Sensor-specific config
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <BNO_setFeature+0x40>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
	//Transmit packet on channel 2, 17 bytes
	return sendPacket(CHANNEL_CONTROL);
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f7ff fad8 	bl	80010e0 <sendPacket>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	24000554 	.word	0x24000554
 8001b40:	2400055d 	.word	0x2400055d
 8001b44:	24000565 	.word	0x24000565

08001b48 <BNO086_Init>:
	return sensorData.SenVal.WheelEncoder;
}
#endif


int8_t BNO086_Init(){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	if(BNO_Init() == HAL_OK) {
 8001b4c:	f7ff fe70 	bl	8001830 <BNO_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d112      	bne.n	8001b7c <BNO086_Init+0x34>
		if(BNO_calibrateHighAccuracyAndReset() == HAL_OK) {
 8001b56:	f7ff ff67 	bl	8001a28 <BNO_calibrateHighAccuracyAndReset>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10b      	bne.n	8001b78 <BNO086_Init+0x30>
				if(BNO_setFeature(ROTATION_VECTOR, 100000, 0) == HAL_OK){
 8001b60:	2200      	movs	r2, #0
 8001b62:	4908      	ldr	r1, [pc, #32]	@ (8001b84 <BNO086_Init+0x3c>)
 8001b64:	2005      	movs	r0, #5
 8001b66:	f7ff ffcd 	bl	8001b04 <BNO_setFeature>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <BNO086_Init+0x2c>
					return 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e004      	b.n	8001b7e <BNO086_Init+0x36>
				} else {
					return 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e002      	b.n	8001b7e <BNO086_Init+0x36>
				}
		} else {
			return 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <BNO086_Init+0x36>
		}
	}
		return 1;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	000186a0 	.word	0x000186a0

08001b88 <MPL3115A2_Init>:
#include <stdio.h>

MPL3115A2 mpl311_dev;
extern I2C_HandleTypeDef hi2c2;

int8_t MPL3115A2_Init() {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af04      	add	r7, sp, #16
  mpl311_dev.hi2c = &hi2c2;
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <MPL3115A2_Init+0xb4>)
 8001b90:	4a2b      	ldr	r2, [pc, #172]	@ (8001c40 <MPL3115A2_Init+0xb8>)
 8001b92:	601a      	str	r2, [r3, #0]

  // Read WHOAMI register
  uint8_t whoami = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	71fb      	strb	r3, [r7, #7]
  if (HAL_I2C_Mem_Read(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_WHOAMI,
 8001b98:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <MPL3115A2_Init+0xb4>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ba0:	9302      	str	r3, [sp, #8]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2301      	movs	r3, #1
 8001bac:	220c      	movs	r2, #12
 8001bae:	21c0      	movs	r1, #192	@ 0xc0
 8001bb0:	f002 fb26 	bl	8004200 <HAL_I2C_Mem_Read>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <MPL3115A2_Init+0x38>
                       I2C_MEMADD_SIZE_8BIT, &whoami, 1, HAL_MAX_DELAY) != HAL_OK) {
    return -1; // I2C read error
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bbe:	e039      	b.n	8001c34 <MPL3115A2_Init+0xac>
  }
  if (whoami != 0xC4) {
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	2bc4      	cmp	r3, #196	@ 0xc4
 8001bc4:	d002      	beq.n	8001bcc <MPL3115A2_Init+0x44>
    return -2; // WHOAMI mismatch error
 8001bc6:	f06f 0301 	mvn.w	r3, #1
 8001bca:	e033      	b.n	8001c34 <MPL3115A2_Init+0xac>
  }

  HAL_Delay(10);
 8001bcc:	200a      	movs	r0, #10
 8001bce:	f001 fba5 	bl	800331c <HAL_Delay>
//    }
//    HAL_Delay(10);
//  } while (ctrl_reg1 & MPL3115A2_CTRL_REG1_RST);

  // Set oversampling and altitude mode
  mpl311_dev.currentMode = MPL3115A2_ALTIMETER;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <MPL3115A2_Init+0xb4>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	711a      	strb	r2, [r3, #4]
  mpl311_dev.ctrl_reg1.reg = MPL3115A2_CTRL_REG1_OS128 | MPL3115A2_CTRL_REG1_ALT;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <MPL3115A2_Init+0xb4>)
 8001bda:	22b8      	movs	r2, #184	@ 0xb8
 8001bdc:	715a      	strb	r2, [r3, #5]
  if (HAL_I2C_Mem_Write(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1,
 8001bde:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <MPL3115A2_Init+0xb4>)
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001be6:	9302      	str	r3, [sp, #8]
 8001be8:	2301      	movs	r3, #1
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <MPL3115A2_Init+0xbc>)
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	2226      	movs	r2, #38	@ 0x26
 8001bf4:	21c0      	movs	r1, #192	@ 0xc0
 8001bf6:	f002 f9ef 	bl	8003fd8 <HAL_I2C_Mem_Write>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <MPL3115A2_Init+0x7e>
                        I2C_MEMADD_SIZE_8BIT, &(mpl311_dev.ctrl_reg1.reg), 1, HAL_MAX_DELAY) != HAL_OK) {
    return -5; // I2C write error
 8001c00:	f06f 0304 	mvn.w	r3, #4
 8001c04:	e016      	b.n	8001c34 <MPL3115A2_Init+0xac>
  }

  // Enable data ready events for pressure/altitude and temperature
  uint8_t pt_data_cfg = MPL3115A2_PT_DATA_CFG_TDEFE | MPL3115A2_PT_DATA_CFG_PDEFE |
 8001c06:	2307      	movs	r3, #7
 8001c08:	71bb      	strb	r3, [r7, #6]
                        MPL3115A2_PT_DATA_CFG_DREM;
  if (HAL_I2C_Mem_Write(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_PT_DATA_CFG,
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MPL3115A2_Init+0xb4>)
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	2301      	movs	r3, #1
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	1dbb      	adds	r3, r7, #6
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	2213      	movs	r2, #19
 8001c20:	21c0      	movs	r1, #192	@ 0xc0
 8001c22:	f002 f9d9 	bl	8003fd8 <HAL_I2C_Mem_Write>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <MPL3115A2_Init+0xaa>
                        I2C_MEMADD_SIZE_8BIT, &pt_data_cfg, 1, HAL_MAX_DELAY) != HAL_OK) {
    return -6; // I2C write error
 8001c2c:	f06f 0305 	mvn.w	r3, #5
 8001c30:	e000      	b.n	8001c34 <MPL3115A2_Init+0xac>
  }

  return 0; // Initialization successful
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	240006f8 	.word	0x240006f8
 8001c40:	24000768 	.word	0x24000768
 8001c44:	240006fd 	.word	0x240006fd

08001c48 <ms5607_delay_func>:
#define STANDARD_TEMP 288.15         // Standard temperature at sea level in K
#define PASCAL_TO_HECTOPASCAL 100 	 //Divide the pressure by this number to get hPa
#define PASCAL_TO_KILOPASCAL 1000	 //Divide the pressure by this number to get kPa

void ms5607_delay_func(uint32_t period)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8001c50:	e008      	b.n	8001c64 <ms5607_delay_func+0x1c>
	{
		for(i = 0; i < 64; i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e002      	b.n	8001c5e <ms5607_delay_func+0x16>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c62:	d9f9      	bls.n	8001c58 <ms5607_delay_func+0x10>
	while(period--)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	1e5a      	subs	r2, r3, #1
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f1      	bne.n	8001c52 <ms5607_delay_func+0xa>
		{
			;
		}
	}
//	HAL_Delay(period/1000);
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  enableCSB();
 8001c80:	f000 f87c 	bl	8001d7c <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8001c84:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <MS5607_Init+0x54>)
 8001c86:	221e      	movs	r2, #30
 8001c88:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4910      	ldr	r1, [pc, #64]	@ (8001cd0 <MS5607_Init+0x54>)
 8001c90:	4810      	ldr	r0, [pc, #64]	@ (8001cd4 <MS5607_Init+0x58>)
 8001c92:	f009 fcaf 	bl	800b5f4 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8001c96:	bf00      	nop
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <MS5607_Init+0x58>)
 8001c9a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d0f9      	beq.n	8001c98 <MS5607_Init+0x1c>
//  HAL_Delay(3);
  ms5607_delay_func(3000);
 8001ca4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001ca8:	f7ff ffce 	bl	8001c48 <ms5607_delay_func>
  disableCSB();
 8001cac:	f000 f872 	bl	8001d94 <disableCSB>

  MS5607PromRead(&promData);
 8001cb0:	4809      	ldr	r0, [pc, #36]	@ (8001cd8 <MS5607_Init+0x5c>)
 8001cb2:	f000 f813 	bl	8001cdc <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 8001cb6:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <MS5607_Init+0x5c>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <MS5607_Init+0x4a>
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <MS5607_Init+0x5c>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	2bff      	cmp	r3, #255	@ 0xff
 8001cc4:	d101      	bne.n	8001cca <MS5607_Init+0x4e>
	 //printf("MS5607 Init fail! \n");
    return MS5607_STATE_FAILED;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <MS5607_Init+0x50>
  } else {
	  //printf("MS5607 Init success! \n");
    return MS5607_STATE_READY;
 8001cca:	2300      	movs	r3, #0
  }
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	24000700 	.word	0x24000700
 8001cd4:	24000914 	.word	0x24000914
 8001cd8:	24000704 	.word	0x24000704

08001cdc <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	75fb      	strb	r3, [r7, #23]
 8001cec:	e01e      	b.n	8001d2c <MS5607PromRead+0x50>
    SPITransmitData = PROM_READ(address);
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <MS5607PromRead+0x98>)
 8001cfe:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8001d00:	f000 f83c 	bl	8001d7c <enableCSB>
    HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8001d04:	230a      	movs	r3, #10
 8001d06:	2201      	movs	r2, #1
 8001d08:	491a      	ldr	r1, [pc, #104]	@ (8001d74 <MS5607PromRead+0x98>)
 8001d0a:	481b      	ldr	r0, [pc, #108]	@ (8001d78 <MS5607PromRead+0x9c>)
 8001d0c:	f009 fc72 	bl	800b5f4 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(&hspi4, structPointer, 2, 10);
 8001d10:	230a      	movs	r3, #10
 8001d12:	2202      	movs	r2, #2
 8001d14:	6939      	ldr	r1, [r7, #16]
 8001d16:	4818      	ldr	r0, [pc, #96]	@ (8001d78 <MS5607PromRead+0x9c>)
 8001d18:	f009 fe5a 	bl	800b9d0 <HAL_SPI_Receive>
    disableCSB();
 8001d1c:	f000 f83a 	bl	8001d94 <disableCSB>
    structPointer++;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	3302      	adds	r3, #2
 8001d24:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	75fb      	strb	r3, [r7, #23]
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b07      	cmp	r3, #7
 8001d30:	d9dd      	bls.n	8001cee <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
 8001d3a:	e012      	b.n	8001d62 <MS5607PromRead+0x86>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	785a      	ldrb	r2, [r3, #1]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3301      	adds	r3, #1
 8001d52:	7afa      	ldrb	r2, [r7, #11]
 8001d54:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	3302      	adds	r3, #2
 8001d5a:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	2b07      	cmp	r3, #7
 8001d66:	d9e9      	bls.n	8001d3c <MS5607PromRead+0x60>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	24000700 	.word	0x24000700
 8001d78:	24000914 	.word	0x24000914

08001d7c <enableCSB>:
int32_t MS5607GetPressurePa(void){
  return readings.pressure;
}

/* Sets the CS pin */
void enableCSB(void){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2108      	movs	r1, #8
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <enableCSB+0x14>)
 8001d86:	f001 fe49 	bl	8003a1c <HAL_GPIO_WritePin>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	58021000 	.word	0x58021000

08001d94 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2108      	movs	r1, #8
 8001d9c:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <disableCSB+0x14>)
 8001d9e:	f001 fe3d 	bl	8003a1c <HAL_GPIO_WritePin>
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	58021000 	.word	0x58021000

08001dac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001db4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001db8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d013      	beq.n	8001dec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001dc4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001dc8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001dcc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00b      	beq.n	8001dec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001dd4:	e000      	b.n	8001dd8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001dd6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001dd8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f9      	beq.n	8001dd6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001de2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001dec:	687b      	ldr	r3, [r7, #4]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
	int i=0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e009      	b.n	8001e24 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ffc7 	bl	8001dac <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf1      	blt.n	8001e10 <_write+0x16>
	}
	return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_GPIO_EXTI_Callback>:

// Interrupt callback function for BMP581 and BNO086
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BNO_INT_Pin) {
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d102      	bne.n	8001e4e <HAL_GPIO_EXTI_Callback+0x16>
    BNO_Ready = 1;
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
  }
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	24000552 	.word	0x24000552

08001e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001e6c:	f000 fc64 	bl	8002738 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e70:	f001 f9c2 	bl	80031f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e74:	f000 f824 	bl	8001ec0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e78:	f000 f8a6 	bl	8001fc8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e7c:	f000 fb48 	bl	8002510 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e80:	f000 f8c0 	bl	8002004 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e84:	f000 f8fe 	bl	8002084 <MX_I2C2_Init>
  MX_I2C4_Init();
 8001e88:	f000 f93c 	bl	8002104 <MX_I2C4_Init>
  MX_SDMMC1_SD_Init();
 8001e8c:	f000 f97a 	bl	8002184 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001e90:	f000 f99a 	bl	80021c8 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001e94:	f000 f9f0 	bl	8002278 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001e98:	f000 fa90 	bl	80023bc <MX_USART2_UART_Init>
  MX_USART3_Init();
 8001e9c:	f000 fada 	bl	8002454 <MX_USART3_Init>
  MX_FATFS_Init();
 8001ea0:	f00e ff48 	bl	8010d34 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001ea4:	f012 fc30 	bl	8014708 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001ea8:	f000 fa3c 	bl	8002324 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Aerosentinel Argus: Navigation Module - Pre-production Module \r\n");
 8001eac:	4803      	ldr	r0, [pc, #12]	@ (8001ebc <main+0x54>)
 8001eae:	f013 fec5 	bl	8015c3c <puts>





  SensorManager_Init();
 8001eb2:	f7fe fbe5 	bl	8000680 <SensorManager_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001eb6:	bf00      	nop
 8001eb8:	e7fd      	b.n	8001eb6 <main+0x4e>
 8001eba:	bf00      	nop
 8001ebc:	08017d58 	.word	0x08017d58

08001ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b09c      	sub	sp, #112	@ 0x70
 8001ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eca:	224c      	movs	r2, #76	@ 0x4c
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f013 febc 	bl	8015c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f013 feb6 	bl	8015c4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f004 f957 	bl	8006194 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	4b35      	ldr	r3, [pc, #212]	@ (8001fc0 <SystemClock_Config+0x100>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	4a34      	ldr	r2, [pc, #208]	@ (8001fc0 <SystemClock_Config+0x100>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001ef6:	4b32      	ldr	r3, [pc, #200]	@ (8001fc0 <SystemClock_Config+0x100>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	4b30      	ldr	r3, [pc, #192]	@ (8001fc4 <SystemClock_Config+0x104>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f08:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc4 <SystemClock_Config+0x104>)
 8001f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc4 <SystemClock_Config+0x104>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f1c:	bf00      	nop
 8001f1e:	4b29      	ldr	r3, [pc, #164]	@ (8001fc4 <SystemClock_Config+0x104>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f2a:	d1f8      	bne.n	8001f1e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001f2c:	2323      	movs	r3, #35	@ 0x23
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3a:	2340      	movs	r3, #64	@ 0x40
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f42:	2302      	movs	r3, #2
 8001f44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f46:	2302      	movs	r3, #2
 8001f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001f4e:	230c      	movs	r3, #12
 8001f50:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f52:	2302      	movs	r3, #2
 8001f54:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f56:	2303      	movs	r3, #3
 8001f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f5e:	230c      	movs	r3, #12
 8001f60:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001f62:	2302      	movs	r3, #2
 8001f64:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 f95a 	bl	8006228 <HAL_RCC_OscConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001f7a:	f000 fc09 	bl	8002790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f7e:	233f      	movs	r3, #63	@ 0x3f
 8001f80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f82:	2303      	movs	r3, #3
 8001f84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f92:	2340      	movs	r3, #64	@ 0x40
 8001f94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001f9c:	2340      	movs	r3, #64	@ 0x40
 8001f9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fd99 	bl	8006adc <HAL_RCC_ClockConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001fb0:	f000 fbee 	bl	8002790 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001fb4:	f004 ff48 	bl	8006e48 <HAL_RCC_EnableCSS>
}
 8001fb8:	bf00      	nop
 8001fba:	3770      	adds	r7, #112	@ 0x70
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	58000400 	.word	0x58000400
 8001fc4:	58024800 	.word	0x58024800

08001fc8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0b0      	sub	sp, #192	@ 0xc0
 8001fcc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fce:	463b      	mov	r3, r7
 8001fd0:	22c0      	movs	r2, #192	@ 0xc0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f013 fe39 	bl	8015c4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001fda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fea:	463b      	mov	r3, r7
 8001fec:	4618      	mov	r0, r3
 8001fee:	f005 f92d 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001ff8:	f000 fbca 	bl	8002790 <Error_Handler>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	37c0      	adds	r7, #192	@ 0xc0
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <MX_I2C1_Init+0x74>)
 800200a:	4a1c      	ldr	r2, [pc, #112]	@ (800207c <MX_I2C1_Init+0x78>)
 800200c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <MX_I2C1_Init+0x74>)
 8002010:	4a1b      	ldr	r2, [pc, #108]	@ (8002080 <MX_I2C1_Init+0x7c>)
 8002012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <MX_I2C1_Init+0x74>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800201a:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <MX_I2C1_Init+0x74>)
 800201c:	2201      	movs	r2, #1
 800201e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002020:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <MX_I2C1_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002026:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <MX_I2C1_Init+0x74>)
 8002028:	2200      	movs	r2, #0
 800202a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800202c:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <MX_I2C1_Init+0x74>)
 800202e:	2200      	movs	r2, #0
 8002030:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <MX_I2C1_Init+0x74>)
 8002034:	2200      	movs	r2, #0
 8002036:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <MX_I2C1_Init+0x74>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800203e:	480e      	ldr	r0, [pc, #56]	@ (8002078 <MX_I2C1_Init+0x74>)
 8002040:	f001 fd20 	bl	8003a84 <HAL_I2C_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800204a:	f000 fba1 	bl	8002790 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800204e:	2100      	movs	r1, #0
 8002050:	4809      	ldr	r0, [pc, #36]	@ (8002078 <MX_I2C1_Init+0x74>)
 8002052:	f002 fd3d 	bl	8004ad0 <HAL_I2CEx_ConfigAnalogFilter>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800205c:	f000 fb98 	bl	8002790 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002060:	2100      	movs	r1, #0
 8002062:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_I2C1_Init+0x74>)
 8002064:	f002 fd7f 	bl	8004b66 <HAL_I2CEx_ConfigDigitalFilter>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800206e:	f000 fb8f 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	24000714 	.word	0x24000714
 800207c:	40005400 	.word	0x40005400
 8002080:	00909fce 	.word	0x00909fce

08002084 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002088:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <MX_I2C2_Init+0x74>)
 800208a:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <MX_I2C2_Init+0x78>)
 800208c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <MX_I2C2_Init+0x74>)
 8002090:	4a1b      	ldr	r2, [pc, #108]	@ (8002100 <MX_I2C2_Init+0x7c>)
 8002092:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <MX_I2C2_Init+0x74>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800209a:	4b17      	ldr	r3, [pc, #92]	@ (80020f8 <MX_I2C2_Init+0x74>)
 800209c:	2201      	movs	r2, #1
 800209e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020a0:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <MX_I2C2_Init+0x74>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80020a6:	4b14      	ldr	r3, [pc, #80]	@ (80020f8 <MX_I2C2_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <MX_I2C2_Init+0x74>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020b2:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <MX_I2C2_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <MX_I2C2_Init+0x74>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020be:	480e      	ldr	r0, [pc, #56]	@ (80020f8 <MX_I2C2_Init+0x74>)
 80020c0:	f001 fce0 	bl	8003a84 <HAL_I2C_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80020ca:	f000 fb61 	bl	8002790 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ce:	2100      	movs	r1, #0
 80020d0:	4809      	ldr	r0, [pc, #36]	@ (80020f8 <MX_I2C2_Init+0x74>)
 80020d2:	f002 fcfd 	bl	8004ad0 <HAL_I2CEx_ConfigAnalogFilter>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80020dc:	f000 fb58 	bl	8002790 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020e0:	2100      	movs	r1, #0
 80020e2:	4805      	ldr	r0, [pc, #20]	@ (80020f8 <MX_I2C2_Init+0x74>)
 80020e4:	f002 fd3f 	bl	8004b66 <HAL_I2CEx_ConfigDigitalFilter>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80020ee:	f000 fb4f 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	24000768 	.word	0x24000768
 80020fc:	40005800 	.word	0x40005800
 8002100:	00909fce 	.word	0x00909fce

08002104 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <MX_I2C4_Init+0x74>)
 800210a:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <MX_I2C4_Init+0x78>)
 800210c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909FCE;
 800210e:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <MX_I2C4_Init+0x74>)
 8002110:	4a1b      	ldr	r2, [pc, #108]	@ (8002180 <MX_I2C4_Init+0x7c>)
 8002112:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002114:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <MX_I2C4_Init+0x74>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <MX_I2C4_Init+0x74>)
 800211c:	2201      	movs	r2, #1
 800211e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002120:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <MX_I2C4_Init+0x74>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002126:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <MX_I2C4_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <MX_I2C4_Init+0x74>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <MX_I2C4_Init+0x74>)
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002138:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <MX_I2C4_Init+0x74>)
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800213e:	480e      	ldr	r0, [pc, #56]	@ (8002178 <MX_I2C4_Init+0x74>)
 8002140:	f001 fca0 	bl	8003a84 <HAL_I2C_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800214a:	f000 fb21 	bl	8002790 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800214e:	2100      	movs	r1, #0
 8002150:	4809      	ldr	r0, [pc, #36]	@ (8002178 <MX_I2C4_Init+0x74>)
 8002152:	f002 fcbd 	bl	8004ad0 <HAL_I2CEx_ConfigAnalogFilter>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800215c:	f000 fb18 	bl	8002790 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002160:	2100      	movs	r1, #0
 8002162:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_I2C4_Init+0x74>)
 8002164:	f002 fcff 	bl	8004b66 <HAL_I2CEx_ConfigDigitalFilter>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800216e:	f000 fb0f 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	240007bc 	.word	0x240007bc
 800217c:	58001c00 	.word	0x58001c00
 8002180:	00909fce 	.word	0x00909fce

08002184 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002188:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <MX_SDMMC1_SD_Init+0x3c>)
 800218a:	4a0e      	ldr	r2, [pc, #56]	@ (80021c4 <MX_SDMMC1_SD_Init+0x40>)
 800218c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800218e:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <MX_SDMMC1_SD_Init+0x3c>)
 8002190:	2200      	movs	r2, #0
 8002192:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002194:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <MX_SDMMC1_SD_Init+0x3c>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <MX_SDMMC1_SD_Init+0x3c>)
 800219c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021a0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80021a2:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <MX_SDMMC1_SD_Init+0x3c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <MX_SDMMC1_SD_Init+0x3c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  HAL_SD_Init(&hsd1);
 80021ae:	4804      	ldr	r0, [pc, #16]	@ (80021c0 <MX_SDMMC1_SD_Init+0x3c>)
 80021b0:	f007 fd4a 	bl	8009c48 <HAL_SD_Init>
  HAL_SD_InitCard(&hsd1);
 80021b4:	4802      	ldr	r0, [pc, #8]	@ (80021c0 <MX_SDMMC1_SD_Init+0x3c>)
 80021b6:	f007 fdcb 	bl	8009d50 <HAL_SD_InitCard>
  //printf("%d \n",ret);
  /* USER CODE END SDMMC1_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	24000810 	.word	0x24000810
 80021c4:	52007000 	.word	0x52007000

080021c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021cc:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <MX_SPI1_Init+0xa8>)
 80021ce:	4a29      	ldr	r2, [pc, #164]	@ (8002274 <MX_SPI1_Init+0xac>)
 80021d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021d2:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <MX_SPI1_Init+0xa8>)
 80021d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80021d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021da:	4b25      	ldr	r3, [pc, #148]	@ (8002270 <MX_SPI1_Init+0xa8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021e0:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <MX_SPI1_Init+0xa8>)
 80021e2:	2207      	movs	r2, #7
 80021e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021e6:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <MX_SPI1_Init+0xa8>)
 80021e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021ee:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <MX_SPI1_Init+0xa8>)
 80021f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <MX_SPI1_Init+0xa8>)
 80021f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <MX_SPI1_Init+0xa8>)
 8002200:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002204:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002206:	4b1a      	ldr	r3, [pc, #104]	@ (8002270 <MX_SPI1_Init+0xa8>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800220c:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <MX_SPI1_Init+0xa8>)
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002212:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <MX_SPI1_Init+0xa8>)
 8002214:	2200      	movs	r2, #0
 8002216:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002218:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <MX_SPI1_Init+0xa8>)
 800221a:	2200      	movs	r2, #0
 800221c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800221e:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <MX_SPI1_Init+0xa8>)
 8002220:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002224:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <MX_SPI1_Init+0xa8>)
 8002228:	2200      	movs	r2, #0
 800222a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800222c:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <MX_SPI1_Init+0xa8>)
 800222e:	2200      	movs	r2, #0
 8002230:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002232:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <MX_SPI1_Init+0xa8>)
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002238:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <MX_SPI1_Init+0xa8>)
 800223a:	2200      	movs	r2, #0
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <MX_SPI1_Init+0xa8>)
 8002240:	2200      	movs	r2, #0
 8002242:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002244:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <MX_SPI1_Init+0xa8>)
 8002246:	2200      	movs	r2, #0
 8002248:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <MX_SPI1_Init+0xa8>)
 800224c:	2200      	movs	r2, #0
 800224e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <MX_SPI1_Init+0xa8>)
 8002252:	2200      	movs	r2, #0
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <MX_SPI1_Init+0xa8>)
 8002258:	2200      	movs	r2, #0
 800225a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800225c:	4804      	ldr	r0, [pc, #16]	@ (8002270 <MX_SPI1_Init+0xa8>)
 800225e:	f009 f8a5 	bl	800b3ac <HAL_SPI_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8002268:	f000 fa92 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2400088c 	.word	0x2400088c
 8002274:	40013000 	.word	0x40013000

08002278 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <MX_SPI4_Init+0xa4>)
 800227e:	4a28      	ldr	r2, [pc, #160]	@ (8002320 <MX_SPI4_Init+0xa8>)
 8002280:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002282:	4b26      	ldr	r3, [pc, #152]	@ (800231c <MX_SPI4_Init+0xa4>)
 8002284:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002288:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800228a:	4b24      	ldr	r3, [pc, #144]	@ (800231c <MX_SPI4_Init+0xa4>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8002290:	4b22      	ldr	r3, [pc, #136]	@ (800231c <MX_SPI4_Init+0xa4>)
 8002292:	2203      	movs	r2, #3
 8002294:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002296:	4b21      	ldr	r3, [pc, #132]	@ (800231c <MX_SPI4_Init+0xa4>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800229c:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <MX_SPI4_Init+0xa4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80022a2:	4b1e      	ldr	r3, [pc, #120]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022a4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022a8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80022b6:	4b19      	ldr	r3, [pc, #100]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022bc:	4b17      	ldr	r3, [pc, #92]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022c8:	4b14      	ldr	r3, [pc, #80]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022d0:	4b12      	ldr	r3, [pc, #72]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	@ (800231c <MX_SPI4_Init+0xa4>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <MX_SPI4_Init+0xa4>)
 8002302:	2200      	movs	r2, #0
 8002304:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	@ (800231c <MX_SPI4_Init+0xa4>)
 8002308:	f009 f850 	bl	800b3ac <HAL_SPI_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8002312:	f000 fa3d 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	24000914 	.word	0x24000914
 8002320:	40013400 	.word	0x40013400

08002324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002342:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <MX_TIM2_Init+0x94>)
 8002344:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002348:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800234a:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <MX_TIM2_Init+0x94>)
 800234c:	2200      	movs	r2, #0
 800234e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002350:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <MX_TIM2_Init+0x94>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 74;
 8002356:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <MX_TIM2_Init+0x94>)
 8002358:	224a      	movs	r2, #74	@ 0x4a
 800235a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235c:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <MX_TIM2_Init+0x94>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <MX_TIM2_Init+0x94>)
 8002364:	2280      	movs	r2, #128	@ 0x80
 8002366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002368:	4813      	ldr	r0, [pc, #76]	@ (80023b8 <MX_TIM2_Init+0x94>)
 800236a:	f009 fe8c 	bl	800c086 <HAL_TIM_Base_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002374:	f000 fa0c 	bl	8002790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800237c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800237e:	f107 0310 	add.w	r3, r7, #16
 8002382:	4619      	mov	r1, r3
 8002384:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <MX_TIM2_Init+0x94>)
 8002386:	f00a f84d 	bl	800c424 <HAL_TIM_ConfigClockSource>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002390:	f000 f9fe 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <MX_TIM2_Init+0x94>)
 80023a2:	f00a faad 	bl	800c900 <HAL_TIMEx_MasterConfigSynchronization>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023ac:	f000 f9f0 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2400099c 	.word	0x2400099c

080023bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023c0:	4b22      	ldr	r3, [pc, #136]	@ (800244c <MX_USART2_UART_Init+0x90>)
 80023c2:	4a23      	ldr	r2, [pc, #140]	@ (8002450 <MX_USART2_UART_Init+0x94>)
 80023c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023c6:	4b21      	ldr	r3, [pc, #132]	@ (800244c <MX_USART2_UART_Init+0x90>)
 80023c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ce:	4b1f      	ldr	r3, [pc, #124]	@ (800244c <MX_USART2_UART_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <MX_USART2_UART_Init+0x90>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023da:	4b1c      	ldr	r3, [pc, #112]	@ (800244c <MX_USART2_UART_Init+0x90>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	@ (800244c <MX_USART2_UART_Init+0x90>)
 80023e2:	220c      	movs	r2, #12
 80023e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e6:	4b19      	ldr	r3, [pc, #100]	@ (800244c <MX_USART2_UART_Init+0x90>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ec:	4b17      	ldr	r3, [pc, #92]	@ (800244c <MX_USART2_UART_Init+0x90>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <MX_USART2_UART_Init+0x90>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023f8:	4b14      	ldr	r3, [pc, #80]	@ (800244c <MX_USART2_UART_Init+0x90>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023fe:	4b13      	ldr	r3, [pc, #76]	@ (800244c <MX_USART2_UART_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002404:	4811      	ldr	r0, [pc, #68]	@ (800244c <MX_USART2_UART_Init+0x90>)
 8002406:	f00a fb27 	bl	800ca58 <HAL_UART_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002410:	f000 f9be 	bl	8002790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002414:	2100      	movs	r1, #0
 8002416:	480d      	ldr	r0, [pc, #52]	@ (800244c <MX_USART2_UART_Init+0x90>)
 8002418:	f00b fb2f 	bl	800da7a <HAL_UARTEx_SetTxFifoThreshold>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002422:	f000 f9b5 	bl	8002790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002426:	2100      	movs	r1, #0
 8002428:	4808      	ldr	r0, [pc, #32]	@ (800244c <MX_USART2_UART_Init+0x90>)
 800242a:	f00b fb64 	bl	800daf6 <HAL_UARTEx_SetRxFifoThreshold>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002434:	f000 f9ac 	bl	8002790 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002438:	4804      	ldr	r0, [pc, #16]	@ (800244c <MX_USART2_UART_Init+0x90>)
 800243a:	f00b fae5 	bl	800da08 <HAL_UARTEx_DisableFifoMode>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002444:	f000 f9a4 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	240009e8 	.word	0x240009e8
 8002450:	40004400 	.word	0x40004400

08002454 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <MX_USART3_Init+0xb4>)
 800245a:	4a2c      	ldr	r2, [pc, #176]	@ (800250c <MX_USART3_Init+0xb8>)
 800245c:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 800245e:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <MX_USART3_Init+0xb4>)
 8002460:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002464:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8002466:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <MX_USART3_Init+0xb4>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 800246c:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <MX_USART3_Init+0xb4>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8002472:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <MX_USART3_Init+0xb4>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8002478:	4b23      	ldr	r3, [pc, #140]	@ (8002508 <MX_USART3_Init+0xb4>)
 800247a:	220c      	movs	r2, #12
 800247c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 800247e:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <MX_USART3_Init+0xb4>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8002484:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <MX_USART3_Init+0xb4>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800248a:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <MX_USART3_Init+0xb4>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <MX_USART3_Init+0xb4>)
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <MX_USART3_Init+0xb4>)
 8002498:	2201      	movs	r2, #1
 800249a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 800249c:	481a      	ldr	r0, [pc, #104]	@ (8002508 <MX_USART3_Init+0xb4>)
 800249e:	f00b fbb7 	bl	800dc10 <HAL_USART_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_USART3_Init+0x58>
  {
    Error_Handler();
 80024a8:	f000 f972 	bl	8002790 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ac:	2100      	movs	r1, #0
 80024ae:	4816      	ldr	r0, [pc, #88]	@ (8002508 <MX_USART3_Init+0xb4>)
 80024b0:	f00c fa5c 	bl	800e96c <HAL_USARTEx_SetTxFifoThreshold>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 80024ba:	f000 f969 	bl	8002790 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024be:	2100      	movs	r1, #0
 80024c0:	4811      	ldr	r0, [pc, #68]	@ (8002508 <MX_USART3_Init+0xb4>)
 80024c2:	f00c fa91 	bl	800e9e8 <HAL_USARTEx_SetRxFifoThreshold>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 80024cc:	f000 f960 	bl	8002790 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 80024d0:	2100      	movs	r1, #0
 80024d2:	480d      	ldr	r0, [pc, #52]	@ (8002508 <MX_USART3_Init+0xb4>)
 80024d4:	f00c f9d4 	bl	800e880 <HAL_USARTEx_ConfigNSS>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 80024de:	f000 f957 	bl	8002790 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 80024e2:	4809      	ldr	r0, [pc, #36]	@ (8002508 <MX_USART3_Init+0xb4>)
 80024e4:	f00c fa09 	bl	800e8fa <HAL_USARTEx_DisableFifoMode>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 80024ee:	f000 f94f 	bl	8002790 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 80024f2:	4805      	ldr	r0, [pc, #20]	@ (8002508 <MX_USART3_Init+0xb4>)
 80024f4:	f00c f96f 	bl	800e7d6 <HAL_USARTEx_EnableSlaveMode>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 80024fe:	f000 f947 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	24000a7c 	.word	0x24000a7c
 800250c:	40004800 	.word	0x40004800

08002510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	@ 0x30
 8002514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002526:	4b7e      	ldr	r3, [pc, #504]	@ (8002720 <MX_GPIO_Init+0x210>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252c:	4a7c      	ldr	r2, [pc, #496]	@ (8002720 <MX_GPIO_Init+0x210>)
 800252e:	f043 0310 	orr.w	r3, r3, #16
 8002532:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002536:	4b7a      	ldr	r3, [pc, #488]	@ (8002720 <MX_GPIO_Init+0x210>)
 8002538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002544:	4b76      	ldr	r3, [pc, #472]	@ (8002720 <MX_GPIO_Init+0x210>)
 8002546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800254a:	4a75      	ldr	r2, [pc, #468]	@ (8002720 <MX_GPIO_Init+0x210>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002554:	4b72      	ldr	r3, [pc, #456]	@ (8002720 <MX_GPIO_Init+0x210>)
 8002556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002562:	4b6f      	ldr	r3, [pc, #444]	@ (8002720 <MX_GPIO_Init+0x210>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002568:	4a6d      	ldr	r2, [pc, #436]	@ (8002720 <MX_GPIO_Init+0x210>)
 800256a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002572:	4b6b      	ldr	r3, [pc, #428]	@ (8002720 <MX_GPIO_Init+0x210>)
 8002574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002580:	4b67      	ldr	r3, [pc, #412]	@ (8002720 <MX_GPIO_Init+0x210>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002586:	4a66      	ldr	r2, [pc, #408]	@ (8002720 <MX_GPIO_Init+0x210>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002590:	4b63      	ldr	r3, [pc, #396]	@ (8002720 <MX_GPIO_Init+0x210>)
 8002592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	4b60      	ldr	r3, [pc, #384]	@ (8002720 <MX_GPIO_Init+0x210>)
 80025a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002720 <MX_GPIO_Init+0x210>)
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002720 <MX_GPIO_Init+0x210>)
 80025b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025bc:	4b58      	ldr	r3, [pc, #352]	@ (8002720 <MX_GPIO_Init+0x210>)
 80025be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c2:	4a57      	ldr	r2, [pc, #348]	@ (8002720 <MX_GPIO_Init+0x210>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025cc:	4b54      	ldr	r3, [pc, #336]	@ (8002720 <MX_GPIO_Init+0x210>)
 80025ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80025da:	2200      	movs	r2, #0
 80025dc:	2108      	movs	r1, #8
 80025de:	4851      	ldr	r0, [pc, #324]	@ (8002724 <MX_GPIO_Init+0x214>)
 80025e0:	f001 fa1c 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5607_ON_GPIO_Port, MS5607_ON_Pin, GPIO_PIN_SET);
 80025e4:	2201      	movs	r2, #1
 80025e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025ea:	484f      	ldr	r0, [pc, #316]	@ (8002728 <MX_GPIO_Init+0x218>)
 80025ec:	f001 fa16 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADXL375_ON_Pin|BNO055_ON_Pin, GPIO_PIN_SET);
 80025f0:	2201      	movs	r2, #1
 80025f2:	f248 0108 	movw	r1, #32776	@ 0x8008
 80025f6:	484d      	ldr	r0, [pc, #308]	@ (800272c <MX_GPIO_Init+0x21c>)
 80025f8:	f001 fa10 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2110      	movs	r1, #16
 8002600:	4849      	ldr	r0, [pc, #292]	@ (8002728 <MX_GPIO_Init+0x218>)
 8002602:	f001 fa0b 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MPL311_ON_Pin|BNO086_ON_Pin, GPIO_PIN_SET);
 8002606:	2201      	movs	r2, #1
 8002608:	f244 0102 	movw	r1, #16386	@ 0x4002
 800260c:	4845      	ldr	r0, [pc, #276]	@ (8002724 <MX_GPIO_Init+0x214>)
 800260e:	f001 fa05 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BNO_RST_Pin, GPIO_PIN_RESET);
 8002612:	2200      	movs	r2, #0
 8002614:	f248 0120 	movw	r1, #32800	@ 0x8020
 8002618:	4845      	ldr	r0, [pc, #276]	@ (8002730 <MX_GPIO_Init+0x220>)
 800261a:	f001 f9ff 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 800261e:	2200      	movs	r2, #0
 8002620:	2110      	movs	r1, #16
 8002622:	4844      	ldr	r0, [pc, #272]	@ (8002734 <MX_GPIO_Init+0x224>)
 8002624:	f001 f9fa 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS_Pin MPL311_ON_Pin BNO086_ON_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|MPL311_ON_Pin|BNO086_ON_Pin;
 8002628:	f244 030a 	movw	r3, #16394	@ 0x400a
 800262c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	4838      	ldr	r0, [pc, #224]	@ (8002724 <MX_GPIO_Init+0x214>)
 8002642:	f001 f823 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : MS5607_ON_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = MS5607_ON_Pin|SPI1_CS_Pin;
 8002646:	f242 0310 	movw	r3, #8208	@ 0x2010
 800264a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264c:	2301      	movs	r3, #1
 800264e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	4619      	mov	r1, r3
 800265e:	4832      	ldr	r0, [pc, #200]	@ (8002728 <MX_GPIO_Init+0x218>)
 8002660:	f001 f814 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8002664:	2302      	movs	r3, #2
 8002666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002668:	2300      	movs	r3, #0
 800266a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800266c:	2302      	movs	r3, #2
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	482d      	ldr	r0, [pc, #180]	@ (800272c <MX_GPIO_Init+0x21c>)
 8002678:	f001 f808 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_ON_Pin BNO055_ON_Pin */
  GPIO_InitStruct.Pin = ADXL375_ON_Pin|BNO055_ON_Pin;
 800267c:	f248 0308 	movw	r3, #32776	@ 0x8008
 8002680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002682:	2301      	movs	r3, #1
 8002684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	4619      	mov	r1, r3
 8002694:	4825      	ldr	r0, [pc, #148]	@ (800272c <MX_GPIO_Init+0x21c>)
 8002696:	f000 fff9 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : HEARTBEAT_Pin BNO_RST_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin|BNO_RST_Pin;
 800269a:	f248 0320 	movw	r3, #32800	@ 0x8020
 800269e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a0:	2301      	movs	r3, #1
 80026a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	481f      	ldr	r0, [pc, #124]	@ (8002730 <MX_GPIO_Init+0x220>)
 80026b4:	f000 ffea 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	4817      	ldr	r0, [pc, #92]	@ (800272c <MX_GPIO_Init+0x21c>)
 80026ce:	f000 ffdd 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 80026d2:	2310      	movs	r3, #16
 80026d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d6:	2301      	movs	r3, #1
 80026d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 031c 	add.w	r3, r7, #28
 80026e6:	4619      	mov	r1, r3
 80026e8:	4812      	ldr	r0, [pc, #72]	@ (8002734 <MX_GPIO_Init+0x224>)
 80026ea:	f000 ffcf 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 80026ee:	2310      	movs	r3, #16
 80026f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80026f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f8:	2301      	movs	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	4619      	mov	r1, r3
 8002702:	480b      	ldr	r0, [pc, #44]	@ (8002730 <MX_GPIO_Init+0x220>)
 8002704:	f000 ffc2 	bl	800368c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	200a      	movs	r0, #10
 800270e:	f000 ff10 	bl	8003532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002712:	200a      	movs	r0, #10
 8002714:	f000 ff27 	bl	8003566 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002718:	bf00      	nop
 800271a:	3730      	adds	r7, #48	@ 0x30
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	58021000 	.word	0x58021000
 8002728:	58020800 	.word	0x58020800
 800272c:	58020000 	.word	0x58020000
 8002730:	58020400 	.word	0x58020400
 8002734:	58020c00 	.word	0x58020c00

08002738 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800273e:	463b      	mov	r3, r7
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800274a:	f000 ff27 	bl	800359c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800274e:	2301      	movs	r3, #1
 8002750:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002752:	2300      	movs	r3, #0
 8002754:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800275a:	231f      	movs	r3, #31
 800275c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800275e:	2387      	movs	r3, #135	@ 0x87
 8002760:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002762:	2300      	movs	r3, #0
 8002764:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002766:	2300      	movs	r3, #0
 8002768:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800276a:	2301      	movs	r3, #1
 800276c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800276e:	2301      	movs	r3, #1
 8002770:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800277a:	463b      	mov	r3, r7
 800277c:	4618      	mov	r0, r3
 800277e:	f000 ff45 	bl	800360c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002782:	2004      	movs	r0, #4
 8002784:	f000 ff22 	bl	80035cc <HAL_MPU_Enable>

}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002794:	b672      	cpsid	i
}
 8002796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <Error_Handler+0x8>

0800279c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <HAL_MspInit+0x30>)
 80027a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027a8:	4a08      	ldr	r2, [pc, #32]	@ (80027cc <HAL_MspInit+0x30>)
 80027aa:	f043 0302 	orr.w	r3, r3, #2
 80027ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_MspInit+0x30>)
 80027b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	58024400 	.word	0x58024400

080027d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b0be      	sub	sp, #248	@ 0xf8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e8:	f107 0320 	add.w	r3, r7, #32
 80027ec:	22c0      	movs	r2, #192	@ 0xc0
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f013 fa2b 	bl	8015c4c <memset>
  if(hi2c->Instance==I2C1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a73      	ldr	r2, [pc, #460]	@ (80029c8 <HAL_I2C_MspInit+0x1f8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d146      	bne.n	800288e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002800:	f04f 0208 	mov.w	r2, #8
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002812:	f107 0320 	add.w	r3, r7, #32
 8002816:	4618      	mov	r0, r3
 8002818:	f004 fd18 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002822:	f7ff ffb5 	bl	8002790 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	4b69      	ldr	r3, [pc, #420]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 8002828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800282c:	4a67      	ldr	r2, [pc, #412]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002836:	4b65      	ldr	r3, [pc, #404]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 8002838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002844:	23c0      	movs	r3, #192	@ 0xc0
 8002846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800284a:	2312      	movs	r3, #18
 800284c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800285c:	2304      	movs	r3, #4
 800285e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002862:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002866:	4619      	mov	r1, r3
 8002868:	4859      	ldr	r0, [pc, #356]	@ (80029d0 <HAL_I2C_MspInit+0x200>)
 800286a:	f000 ff0f 	bl	800368c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800286e:	4b57      	ldr	r3, [pc, #348]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 8002870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002874:	4a55      	ldr	r2, [pc, #340]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 8002876:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800287a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800287e:	4b53      	ldr	r3, [pc, #332]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 8002880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800288c:	e098      	b.n	80029c0 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a50      	ldr	r2, [pc, #320]	@ (80029d4 <HAL_I2C_MspInit+0x204>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d147      	bne.n	8002928 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002898:	f04f 0208 	mov.w	r2, #8
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028aa:	f107 0320 	add.w	r3, r7, #32
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 fccc 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80028ba:	f7ff ff69 	bl	8002790 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028be:	4b43      	ldr	r3, [pc, #268]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 80028c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c4:	4a41      	ldr	r2, [pc, #260]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 80028c6:	f043 0302 	orr.w	r3, r3, #2
 80028ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028ce:	4b3f      	ldr	r3, [pc, #252]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 80028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e4:	2312      	movs	r3, #18
 80028e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028f6:	2304      	movs	r3, #4
 80028f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002900:	4619      	mov	r1, r3
 8002902:	4833      	ldr	r0, [pc, #204]	@ (80029d0 <HAL_I2C_MspInit+0x200>)
 8002904:	f000 fec2 	bl	800368c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002908:	4b30      	ldr	r3, [pc, #192]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 800290a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800290e:	4a2f      	ldr	r2, [pc, #188]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 8002910:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002914:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002918:	4b2c      	ldr	r3, [pc, #176]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 800291a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800291e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
}
 8002926:	e04b      	b.n	80029c0 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C4)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2a      	ldr	r2, [pc, #168]	@ (80029d8 <HAL_I2C_MspInit+0x208>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d146      	bne.n	80029c0 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002932:	f04f 0210 	mov.w	r2, #16
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002944:	f107 0320 	add.w	r3, r7, #32
 8002948:	4618      	mov	r0, r3
 800294a:	f004 fc7f 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8002954:	f7ff ff1c 	bl	8002790 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002958:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 800295a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295e:	4a1b      	ldr	r2, [pc, #108]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002968:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 800296a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002976:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800297a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800297e:	2312      	movs	r3, #18
 8002980:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002990:	2304      	movs	r3, #4
 8002992:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002996:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800299a:	4619      	mov	r1, r3
 800299c:	480f      	ldr	r0, [pc, #60]	@ (80029dc <HAL_I2C_MspInit+0x20c>)
 800299e:	f000 fe75 	bl	800368c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80029a2:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 80029a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029a8:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 80029aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_I2C_MspInit+0x1fc>)
 80029b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
}
 80029c0:	bf00      	nop
 80029c2:	37f8      	adds	r7, #248	@ 0xf8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40005400 	.word	0x40005400
 80029cc:	58024400 	.word	0x58024400
 80029d0:	58020400 	.word	0x58020400
 80029d4:	40005800 	.word	0x40005800
 80029d8:	58001c00 	.word	0x58001c00
 80029dc:	58020c00 	.word	0x58020c00

080029e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b0bc      	sub	sp, #240	@ 0xf0
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029f8:	f107 0318 	add.w	r3, r7, #24
 80029fc:	22c0      	movs	r2, #192	@ 0xc0
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f013 f923 	bl	8015c4c <memset>
  if(hsd->Instance==SDMMC1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a38      	ldr	r2, [pc, #224]	@ (8002aec <HAL_SD_MspInit+0x10c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d169      	bne.n	8002ae4 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002a10:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a20:	f107 0318 	add.w	r3, r7, #24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f004 fc11 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002a30:	f7ff feae 	bl	8002790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002a34:	4b2e      	ldr	r3, [pc, #184]	@ (8002af0 <HAL_SD_MspInit+0x110>)
 8002a36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002af0 <HAL_SD_MspInit+0x110>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a40:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002a44:	4b2a      	ldr	r3, [pc, #168]	@ (8002af0 <HAL_SD_MspInit+0x110>)
 8002a46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a52:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <HAL_SD_MspInit+0x110>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a58:	4a25      	ldr	r2, [pc, #148]	@ (8002af0 <HAL_SD_MspInit+0x110>)
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a62:	4b23      	ldr	r3, [pc, #140]	@ (8002af0 <HAL_SD_MspInit+0x110>)
 8002a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a70:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <HAL_SD_MspInit+0x110>)
 8002a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a76:	4a1e      	ldr	r2, [pc, #120]	@ (8002af0 <HAL_SD_MspInit+0x110>)
 8002a78:	f043 0308 	orr.w	r3, r3, #8
 8002a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a80:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <HAL_SD_MspInit+0x110>)
 8002a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002a8e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002a92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	480f      	ldr	r0, [pc, #60]	@ (8002af4 <HAL_SD_MspInit+0x114>)
 8002ab6:	f000 fde9 	bl	800368c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aba:	2304      	movs	r3, #4
 8002abc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002acc:	2303      	movs	r3, #3
 8002ace:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002adc:	4619      	mov	r1, r3
 8002ade:	4806      	ldr	r0, [pc, #24]	@ (8002af8 <HAL_SD_MspInit+0x118>)
 8002ae0:	f000 fdd4 	bl	800368c <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002ae4:	bf00      	nop
 8002ae6:	37f0      	adds	r7, #240	@ 0xf0
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	52007000 	.word	0x52007000
 8002af0:	58024400 	.word	0x58024400
 8002af4:	58020800 	.word	0x58020800
 8002af8:	58020c00 	.word	0x58020c00

08002afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b0bc      	sub	sp, #240	@ 0xf0
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b14:	f107 0318 	add.w	r3, r7, #24
 8002b18:	22c0      	movs	r2, #192	@ 0xc0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f013 f895 	bl	8015c4c <memset>
  if(hspi->Instance==SPI1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a4c      	ldr	r2, [pc, #304]	@ (8002c58 <HAL_SPI_MspInit+0x15c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d146      	bne.n	8002bba <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002b2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002b38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b3c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3e:	f107 0318 	add.w	r3, r7, #24
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 fb82 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002b4e:	f7ff fe1f 	bl	8002790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b52:	4b42      	ldr	r3, [pc, #264]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b58:	4a40      	ldr	r2, [pc, #256]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002b5a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b62:	4b3e      	ldr	r3, [pc, #248]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	4b3a      	ldr	r3, [pc, #232]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b76:	4a39      	ldr	r2, [pc, #228]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b80:	4b36      	ldr	r3, [pc, #216]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b8e:	23e0      	movs	r3, #224	@ 0xe0
 8002b90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	482b      	ldr	r0, [pc, #172]	@ (8002c60 <HAL_SPI_MspInit+0x164>)
 8002bb4:	f000 fd6a 	bl	800368c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002bb8:	e049      	b.n	8002c4e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI4)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a29      	ldr	r2, [pc, #164]	@ (8002c64 <HAL_SPI_MspInit+0x168>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d144      	bne.n	8002c4e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002bc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd4:	f107 0318 	add.w	r3, r7, #24
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 fb37 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002be4:	f7ff fdd4 	bl	8002790 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002be8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bee:	4a1b      	ldr	r2, [pc, #108]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002bf0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bf4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bf8:	4b18      	ldr	r3, [pc, #96]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c0c:	4a13      	ldr	r2, [pc, #76]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002c0e:	f043 0310 	orr.w	r3, r3, #16
 8002c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_SPI_MspInit+0x160>)
 8002c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002c24:	2364      	movs	r3, #100	@ 0x64
 8002c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002c3c:	2305      	movs	r3, #5
 8002c3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c42:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002c46:	4619      	mov	r1, r3
 8002c48:	4807      	ldr	r0, [pc, #28]	@ (8002c68 <HAL_SPI_MspInit+0x16c>)
 8002c4a:	f000 fd1f 	bl	800368c <HAL_GPIO_Init>
}
 8002c4e:	bf00      	nop
 8002c50:	37f0      	adds	r7, #240	@ 0xf0
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40013000 	.word	0x40013000
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	58020000 	.word	0x58020000
 8002c64:	40013400 	.word	0x40013400
 8002c68:	58021000 	.word	0x58021000

08002c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c7c:	d116      	bne.n	8002cac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <HAL_TIM_Base_MspInit+0x48>)
 8002c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c84:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb4 <HAL_TIM_Base_MspInit+0x48>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c8e:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_TIM_Base_MspInit+0x48>)
 8002c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	201c      	movs	r0, #28
 8002ca2:	f000 fc46 	bl	8003532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ca6:	201c      	movs	r0, #28
 8002ca8:	f000 fc5d 	bl	8003566 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	58024400 	.word	0x58024400

08002cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b0ba      	sub	sp, #232	@ 0xe8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cd0:	f107 0310 	add.w	r3, r7, #16
 8002cd4:	22c0      	movs	r2, #192	@ 0xc0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f012 ffb7 	bl	8015c4c <memset>
  if(huart->Instance==USART2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a26      	ldr	r2, [pc, #152]	@ (8002d7c <HAL_UART_MspInit+0xc4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d145      	bne.n	8002d74 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ce8:	f04f 0202 	mov.w	r2, #2
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cfa:	f107 0310 	add.w	r3, r7, #16
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 faa4 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002d0a:	f7ff fd41 	bl	8002790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d80 <HAL_UART_MspInit+0xc8>)
 8002d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d14:	4a1a      	ldr	r2, [pc, #104]	@ (8002d80 <HAL_UART_MspInit+0xc8>)
 8002d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d1e:	4b18      	ldr	r3, [pc, #96]	@ (8002d80 <HAL_UART_MspInit+0xc8>)
 8002d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2c:	4b14      	ldr	r3, [pc, #80]	@ (8002d80 <HAL_UART_MspInit+0xc8>)
 8002d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d32:	4a13      	ldr	r2, [pc, #76]	@ (8002d80 <HAL_UART_MspInit+0xc8>)
 8002d34:	f043 0308 	orr.w	r3, r3, #8
 8002d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d3c:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <HAL_UART_MspInit+0xc8>)
 8002d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d4a:	2360      	movs	r3, #96	@ 0x60
 8002d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d62:	2307      	movs	r3, #7
 8002d64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4805      	ldr	r0, [pc, #20]	@ (8002d84 <HAL_UART_MspInit+0xcc>)
 8002d70:	f000 fc8c 	bl	800368c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002d74:	bf00      	nop
 8002d76:	37e8      	adds	r7, #232	@ 0xe8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40004400 	.word	0x40004400
 8002d80:	58024400 	.word	0x58024400
 8002d84:	58020c00 	.word	0x58020c00

08002d88 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b0bc      	sub	sp, #240	@ 0xf0
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002da0:	f107 0318 	add.w	r3, r7, #24
 8002da4:	22c0      	movs	r2, #192	@ 0xc0
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f012 ff4f 	bl	8015c4c <memset>
  if(husart->Instance==USART3)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a39      	ldr	r2, [pc, #228]	@ (8002e98 <HAL_USART_MspInit+0x110>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d16b      	bne.n	8002e90 <HAL_USART_MspInit+0x108>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002db8:	f04f 0202 	mov.w	r2, #2
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dca:	f107 0318 	add.w	r3, r7, #24
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fa3c 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8002dda:	f7ff fcd9 	bl	8002790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dde:	4b2f      	ldr	r3, [pc, #188]	@ (8002e9c <HAL_USART_MspInit+0x114>)
 8002de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002de4:	4a2d      	ldr	r2, [pc, #180]	@ (8002e9c <HAL_USART_MspInit+0x114>)
 8002de6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002dee:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <HAL_USART_MspInit+0x114>)
 8002df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002df4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfc:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <HAL_USART_MspInit+0x114>)
 8002dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e02:	4a26      	ldr	r2, [pc, #152]	@ (8002e9c <HAL_USART_MspInit+0x114>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e0c:	4b23      	ldr	r3, [pc, #140]	@ (8002e9c <HAL_USART_MspInit+0x114>)
 8002e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1a:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <HAL_USART_MspInit+0x114>)
 8002e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e20:	4a1e      	ldr	r2, [pc, #120]	@ (8002e9c <HAL_USART_MspInit+0x114>)
 8002e22:	f043 0308 	orr.w	r3, r3, #8
 8002e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e9c <HAL_USART_MspInit+0x114>)
 8002e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e52:	2307      	movs	r3, #7
 8002e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4810      	ldr	r0, [pc, #64]	@ (8002ea0 <HAL_USART_MspInit+0x118>)
 8002e60:	f000 fc14 	bl	800368c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8002e64:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8002e68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e7e:	2307      	movs	r3, #7
 8002e80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4806      	ldr	r0, [pc, #24]	@ (8002ea4 <HAL_USART_MspInit+0x11c>)
 8002e8c:	f000 fbfe 	bl	800368c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002e90:	bf00      	nop
 8002e92:	37f0      	adds	r7, #240	@ 0xf0
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40004800 	.word	0x40004800
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	58020400 	.word	0x58020400
 8002ea4:	58020c00 	.word	0x58020c00

08002ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002eac:	f004 f9b2 	bl	8007214 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <NMI_Handler+0x8>

08002eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <HardFault_Handler+0x4>

08002ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <MemManage_Handler+0x4>

08002ec4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <BusFault_Handler+0x4>

08002ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <UsageFault_Handler+0x4>

08002ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f02:	f000 f9eb 	bl	80032dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNO_INT_Pin);
 8002f0e:	2010      	movs	r0, #16
 8002f10:	f000 fd9d 	bl	8003a4e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f1c:	4802      	ldr	r0, [pc, #8]	@ (8002f28 <TIM2_IRQHandler+0x10>)
 8002f1e:	f009 f979 	bl	800c214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	2400099c 	.word	0x2400099c

08002f2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002f30:	4802      	ldr	r0, [pc, #8]	@ (8002f3c <OTG_FS_IRQHandler+0x10>)
 8002f32:	f001 ffa5 	bl	8004e80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	24000fd8 	.word	0x24000fd8

08002f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return 1;
 8002f44:	2301      	movs	r3, #1
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_kill>:

int _kill(int pid, int sig)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f5a:	f012 fe83 	bl	8015c64 <__errno>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2216      	movs	r2, #22
 8002f62:	601a      	str	r2, [r3, #0]
  return -1;
 8002f64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <_exit>:

void _exit (int status)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ffe7 	bl	8002f50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f82:	bf00      	nop
 8002f84:	e7fd      	b.n	8002f82 <_exit+0x12>

08002f86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	e00a      	b.n	8002fae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f98:	f3af 8000 	nop.w
 8002f9c:	4601      	mov	r1, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	60ba      	str	r2, [r7, #8]
 8002fa4:	b2ca      	uxtb	r2, r1
 8002fa6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3301      	adds	r3, #1
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	dbf0      	blt.n	8002f98 <_read+0x12>
  }

  return len;
 8002fb6:	687b      	ldr	r3, [r7, #4]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fe8:	605a      	str	r2, [r3, #4]
  return 0;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_isatty>:

int _isatty(int file)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003000:	2301      	movs	r3, #1
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003030:	4a14      	ldr	r2, [pc, #80]	@ (8003084 <_sbrk+0x5c>)
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <_sbrk+0x60>)
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800303c:	4b13      	ldr	r3, [pc, #76]	@ (800308c <_sbrk+0x64>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003044:	4b11      	ldr	r3, [pc, #68]	@ (800308c <_sbrk+0x64>)
 8003046:	4a12      	ldr	r2, [pc, #72]	@ (8003090 <_sbrk+0x68>)
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <_sbrk+0x64>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	429a      	cmp	r2, r3
 8003056:	d207      	bcs.n	8003068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003058:	f012 fe04 	bl	8015c64 <__errno>
 800305c:	4603      	mov	r3, r0
 800305e:	220c      	movs	r2, #12
 8003060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003066:	e009      	b.n	800307c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003068:	4b08      	ldr	r3, [pc, #32]	@ (800308c <_sbrk+0x64>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800306e:	4b07      	ldr	r3, [pc, #28]	@ (800308c <_sbrk+0x64>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	4a05      	ldr	r2, [pc, #20]	@ (800308c <_sbrk+0x64>)
 8003078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	24080000 	.word	0x24080000
 8003088:	00000400 	.word	0x00000400
 800308c:	24000adc 	.word	0x24000adc
 8003090:	24001880 	.word	0x24001880

08003094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003098:	4b37      	ldr	r3, [pc, #220]	@ (8003178 <SystemInit+0xe4>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	4a36      	ldr	r2, [pc, #216]	@ (8003178 <SystemInit+0xe4>)
 80030a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030a8:	4b34      	ldr	r3, [pc, #208]	@ (800317c <SystemInit+0xe8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	2b06      	cmp	r3, #6
 80030b2:	d807      	bhi.n	80030c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030b4:	4b31      	ldr	r3, [pc, #196]	@ (800317c <SystemInit+0xe8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f023 030f 	bic.w	r3, r3, #15
 80030bc:	4a2f      	ldr	r2, [pc, #188]	@ (800317c <SystemInit+0xe8>)
 80030be:	f043 0307 	orr.w	r3, r3, #7
 80030c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80030c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003180 <SystemInit+0xec>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003180 <SystemInit+0xec>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003180 <SystemInit+0xec>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80030d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003180 <SystemInit+0xec>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4929      	ldr	r1, [pc, #164]	@ (8003180 <SystemInit+0xec>)
 80030dc:	4b29      	ldr	r3, [pc, #164]	@ (8003184 <SystemInit+0xf0>)
 80030de:	4013      	ands	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030e2:	4b26      	ldr	r3, [pc, #152]	@ (800317c <SystemInit+0xe8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030ee:	4b23      	ldr	r3, [pc, #140]	@ (800317c <SystemInit+0xe8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 030f 	bic.w	r3, r3, #15
 80030f6:	4a21      	ldr	r2, [pc, #132]	@ (800317c <SystemInit+0xe8>)
 80030f8:	f043 0307 	orr.w	r3, r3, #7
 80030fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <SystemInit+0xec>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003104:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <SystemInit+0xec>)
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800310a:	4b1d      	ldr	r3, [pc, #116]	@ (8003180 <SystemInit+0xec>)
 800310c:	2200      	movs	r2, #0
 800310e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003110:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <SystemInit+0xec>)
 8003112:	4a1d      	ldr	r2, [pc, #116]	@ (8003188 <SystemInit+0xf4>)
 8003114:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003116:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <SystemInit+0xec>)
 8003118:	4a1c      	ldr	r2, [pc, #112]	@ (800318c <SystemInit+0xf8>)
 800311a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800311c:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <SystemInit+0xec>)
 800311e:	4a1c      	ldr	r2, [pc, #112]	@ (8003190 <SystemInit+0xfc>)
 8003120:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003122:	4b17      	ldr	r3, [pc, #92]	@ (8003180 <SystemInit+0xec>)
 8003124:	2200      	movs	r2, #0
 8003126:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003128:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <SystemInit+0xec>)
 800312a:	4a19      	ldr	r2, [pc, #100]	@ (8003190 <SystemInit+0xfc>)
 800312c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800312e:	4b14      	ldr	r3, [pc, #80]	@ (8003180 <SystemInit+0xec>)
 8003130:	2200      	movs	r2, #0
 8003132:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003134:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <SystemInit+0xec>)
 8003136:	4a16      	ldr	r2, [pc, #88]	@ (8003190 <SystemInit+0xfc>)
 8003138:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800313a:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <SystemInit+0xec>)
 800313c:	2200      	movs	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003140:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <SystemInit+0xec>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0e      	ldr	r2, [pc, #56]	@ (8003180 <SystemInit+0xec>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800314a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800314c:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <SystemInit+0xec>)
 800314e:	2200      	movs	r2, #0
 8003150:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003152:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <SystemInit+0x100>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b10      	ldr	r3, [pc, #64]	@ (8003198 <SystemInit+0x104>)
 8003158:	4013      	ands	r3, r2
 800315a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800315e:	d202      	bcs.n	8003166 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003160:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <SystemInit+0x108>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003166:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <SystemInit+0x10c>)
 8003168:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800316c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00
 800317c:	52002000 	.word	0x52002000
 8003180:	58024400 	.word	0x58024400
 8003184:	eaf6ed7f 	.word	0xeaf6ed7f
 8003188:	02020200 	.word	0x02020200
 800318c:	01ff0000 	.word	0x01ff0000
 8003190:	01010280 	.word	0x01010280
 8003194:	5c001000 	.word	0x5c001000
 8003198:	ffff0000 	.word	0xffff0000
 800319c:	51008108 	.word	0x51008108
 80031a0:	52004000 	.word	0x52004000

080031a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80031a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80031a8:	f7ff ff74 	bl	8003094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031ac:	480c      	ldr	r0, [pc, #48]	@ (80031e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031ae:	490d      	ldr	r1, [pc, #52]	@ (80031e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b4:	e002      	b.n	80031bc <LoopCopyDataInit>

080031b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ba:	3304      	adds	r3, #4

080031bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c0:	d3f9      	bcc.n	80031b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c2:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031c4:	4c0a      	ldr	r4, [pc, #40]	@ (80031f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c8:	e001      	b.n	80031ce <LoopFillZerobss>

080031ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031cc:	3204      	adds	r2, #4

080031ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d0:	d3fb      	bcc.n	80031ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031d2:	f012 fd4d 	bl	8015c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d6:	f7fe fe47 	bl	8001e68 <main>
  bx  lr
 80031da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80031e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80031e4:	240002fc 	.word	0x240002fc
  ldr r2, =_sidata
 80031e8:	080181e0 	.word	0x080181e0
  ldr r2, =_sbss
 80031ec:	24000300 	.word	0x24000300
  ldr r4, =_ebss
 80031f0:	24001880 	.word	0x24001880

080031f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <ADC3_IRQHandler>
	...

080031f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031fe:	2003      	movs	r0, #3
 8003200:	f000 f98c 	bl	800351c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003204:	f003 fe30 	bl	8006e68 <HAL_RCC_GetSysClockFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <HAL_Init+0x68>)
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	4913      	ldr	r1, [pc, #76]	@ (8003264 <HAL_Init+0x6c>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003222:	4b0f      	ldr	r3, [pc, #60]	@ (8003260 <HAL_Init+0x68>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	4a0e      	ldr	r2, [pc, #56]	@ (8003264 <HAL_Init+0x6c>)
 800322c:	5cd3      	ldrb	r3, [r2, r3]
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	4a0b      	ldr	r2, [pc, #44]	@ (8003268 <HAL_Init+0x70>)
 800323a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800323c:	4a0b      	ldr	r2, [pc, #44]	@ (800326c <HAL_Init+0x74>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003242:	200f      	movs	r0, #15
 8003244:	f000 f814 	bl	8003270 <HAL_InitTick>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e002      	b.n	8003258 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003252:	f7ff faa3 	bl	800279c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	58024400 	.word	0x58024400
 8003264:	08017ddc 	.word	0x08017ddc
 8003268:	24000034 	.word	0x24000034
 800326c:	24000030 	.word	0x24000030

08003270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003278:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <HAL_InitTick+0x60>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e021      	b.n	80032c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003284:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <HAL_InitTick+0x64>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b11      	ldr	r3, [pc, #68]	@ (80032d0 <HAL_InitTick+0x60>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003292:	fbb3 f3f1 	udiv	r3, r3, r1
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f971 	bl	8003582 <HAL_SYSTICK_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00e      	b.n	80032c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b0f      	cmp	r3, #15
 80032ae:	d80a      	bhi.n	80032c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032b0:	2200      	movs	r2, #0
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032b8:	f000 f93b 	bl	8003532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032bc:	4a06      	ldr	r2, [pc, #24]	@ (80032d8 <HAL_InitTick+0x68>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	2400003c 	.word	0x2400003c
 80032d4:	24000030 	.word	0x24000030
 80032d8:	24000038 	.word	0x24000038

080032dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_IncTick+0x20>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_IncTick+0x24>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4413      	add	r3, r2
 80032ec:	4a04      	ldr	r2, [pc, #16]	@ (8003300 <HAL_IncTick+0x24>)
 80032ee:	6013      	str	r3, [r2, #0]
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	2400003c 	.word	0x2400003c
 8003300:	24000ae0 	.word	0x24000ae0

08003304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return uwTick;
 8003308:	4b03      	ldr	r3, [pc, #12]	@ (8003318 <HAL_GetTick+0x14>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	24000ae0 	.word	0x24000ae0

0800331c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003324:	f7ff ffee 	bl	8003304 <HAL_GetTick>
 8003328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003334:	d005      	beq.n	8003342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <HAL_Delay+0x44>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003342:	bf00      	nop
 8003344:	f7ff ffde 	bl	8003304 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	429a      	cmp	r2, r3
 8003352:	d8f7      	bhi.n	8003344 <HAL_Delay+0x28>
  {
  }
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	2400003c 	.word	0x2400003c

08003364 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_GetREVID+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0c1b      	lsrs	r3, r3, #16
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	5c001000 	.word	0x5c001000

0800337c <__NVIC_SetPriorityGrouping>:
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <__NVIC_SetPriorityGrouping+0x40>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003398:	4013      	ands	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033a4:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033aa:	4a04      	ldr	r2, [pc, #16]	@ (80033bc <__NVIC_SetPriorityGrouping+0x40>)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	60d3      	str	r3, [r2, #12]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000ed00 	.word	0xe000ed00
 80033c0:	05fa0000 	.word	0x05fa0000

080033c4 <__NVIC_GetPriorityGrouping>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c8:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <__NVIC_GetPriorityGrouping+0x18>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	0a1b      	lsrs	r3, r3, #8
 80033ce:	f003 0307 	and.w	r3, r3, #7
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_EnableIRQ>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	db0b      	blt.n	800340a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	f003 021f 	and.w	r2, r3, #31
 80033f8:	4907      	ldr	r1, [pc, #28]	@ (8003418 <__NVIC_EnableIRQ+0x38>)
 80033fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	2001      	movs	r0, #1
 8003402:	fa00 f202 	lsl.w	r2, r0, r2
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000e100 	.word	0xe000e100

0800341c <__NVIC_SetPriority>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	6039      	str	r1, [r7, #0]
 8003426:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	db0a      	blt.n	8003446 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	490c      	ldr	r1, [pc, #48]	@ (8003468 <__NVIC_SetPriority+0x4c>)
 8003436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800343a:	0112      	lsls	r2, r2, #4
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	440b      	add	r3, r1
 8003440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003444:	e00a      	b.n	800345c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	4908      	ldr	r1, [pc, #32]	@ (800346c <__NVIC_SetPriority+0x50>)
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	3b04      	subs	r3, #4
 8003454:	0112      	lsls	r2, r2, #4
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	440b      	add	r3, r1
 800345a:	761a      	strb	r2, [r3, #24]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000e100 	.word	0xe000e100
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <NVIC_EncodePriority>:
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	@ 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f1c3 0307 	rsb	r3, r3, #7
 800348a:	2b04      	cmp	r3, #4
 800348c:	bf28      	it	cs
 800348e:	2304      	movcs	r3, #4
 8003490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3304      	adds	r3, #4
 8003496:	2b06      	cmp	r3, #6
 8003498:	d902      	bls.n	80034a0 <NVIC_EncodePriority+0x30>
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3b03      	subs	r3, #3
 800349e:	e000      	b.n	80034a2 <NVIC_EncodePriority+0x32>
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43da      	mvns	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	401a      	ands	r2, r3
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	43d9      	mvns	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	4313      	orrs	r3, r2
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3724      	adds	r7, #36	@ 0x24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <SysTick_Config>:
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034e8:	d301      	bcc.n	80034ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034ea:	2301      	movs	r3, #1
 80034ec:	e00f      	b.n	800350e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003518 <SysTick_Config+0x40>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f6:	210f      	movs	r1, #15
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034fc:	f7ff ff8e 	bl	800341c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003500:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <SysTick_Config+0x40>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003506:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <SysTick_Config+0x40>)
 8003508:	2207      	movs	r2, #7
 800350a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	e000e010 	.word	0xe000e010

0800351c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ff29 	bl	800337c <__NVIC_SetPriorityGrouping>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003540:	f7ff ff40 	bl	80033c4 <__NVIC_GetPriorityGrouping>
 8003544:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	6978      	ldr	r0, [r7, #20]
 800354c:	f7ff ff90 	bl	8003470 <NVIC_EncodePriority>
 8003550:	4602      	mov	r2, r0
 8003552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff5f 	bl	800341c <__NVIC_SetPriority>
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff33 	bl	80033e0 <__NVIC_EnableIRQ>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ffa4 	bl	80034d8 <SysTick_Config>
 8003590:	4603      	mov	r3, r0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80035a0:	f3bf 8f5f 	dmb	sy
}
 80035a4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80035a6:	4b07      	ldr	r3, [pc, #28]	@ (80035c4 <HAL_MPU_Disable+0x28>)
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	4a06      	ldr	r2, [pc, #24]	@ (80035c4 <HAL_MPU_Disable+0x28>)
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80035b2:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_MPU_Disable+0x2c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	605a      	str	r2, [r3, #4]
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000ed00 	.word	0xe000ed00
 80035c8:	e000ed90 	.word	0xe000ed90

080035cc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80035d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003604 <HAL_MPU_Enable+0x38>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80035de:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <HAL_MPU_Enable+0x3c>)
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	4a09      	ldr	r2, [pc, #36]	@ (8003608 <HAL_MPU_Enable+0x3c>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80035ea:	f3bf 8f4f 	dsb	sy
}
 80035ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035f0:	f3bf 8f6f 	isb	sy
}
 80035f4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000ed90 	.word	0xe000ed90
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	785a      	ldrb	r2, [r3, #1]
 8003618:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <HAL_MPU_ConfigRegion+0x7c>)
 800361a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800361c:	4b1a      	ldr	r3, [pc, #104]	@ (8003688 <HAL_MPU_ConfigRegion+0x7c>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	4a19      	ldr	r2, [pc, #100]	@ (8003688 <HAL_MPU_ConfigRegion+0x7c>)
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003628:	4a17      	ldr	r2, [pc, #92]	@ (8003688 <HAL_MPU_ConfigRegion+0x7c>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7b1b      	ldrb	r3, [r3, #12]
 8003634:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7adb      	ldrb	r3, [r3, #11]
 800363a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800363c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7a9b      	ldrb	r3, [r3, #10]
 8003642:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003644:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7b5b      	ldrb	r3, [r3, #13]
 800364a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800364c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7b9b      	ldrb	r3, [r3, #14]
 8003652:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003654:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7bdb      	ldrb	r3, [r3, #15]
 800365a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800365c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7a5b      	ldrb	r3, [r3, #9]
 8003662:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003664:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7a1b      	ldrb	r3, [r3, #8]
 800366a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800366c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003674:	4a04      	ldr	r2, [pc, #16]	@ (8003688 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003676:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003678:	6113      	str	r3, [r2, #16]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	e000ed90 	.word	0xe000ed90

0800368c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	@ 0x24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800369a:	4b89      	ldr	r3, [pc, #548]	@ (80038c0 <HAL_GPIO_Init+0x234>)
 800369c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800369e:	e194      	b.n	80039ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2101      	movs	r1, #1
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8186 	beq.w	80039c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d005      	beq.n	80036d0 <HAL_GPIO_Init+0x44>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d130      	bne.n	8003732 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003706:	2201      	movs	r2, #1
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0201 	and.w	r2, r3, #1
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b03      	cmp	r3, #3
 800373c:	d017      	beq.n	800376e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d123      	bne.n	80037c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	08da      	lsrs	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3208      	adds	r2, #8
 8003782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	220f      	movs	r2, #15
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	08da      	lsrs	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3208      	adds	r2, #8
 80037bc:	69b9      	ldr	r1, [r7, #24]
 80037be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2203      	movs	r2, #3
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0203 	and.w	r2, r3, #3
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80e0 	beq.w	80039c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003804:	4b2f      	ldr	r3, [pc, #188]	@ (80038c4 <HAL_GPIO_Init+0x238>)
 8003806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800380a:	4a2e      	ldr	r2, [pc, #184]	@ (80038c4 <HAL_GPIO_Init+0x238>)
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003814:	4b2b      	ldr	r3, [pc, #172]	@ (80038c4 <HAL_GPIO_Init+0x238>)
 8003816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003822:	4a29      	ldr	r2, [pc, #164]	@ (80038c8 <HAL_GPIO_Init+0x23c>)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	3302      	adds	r3, #2
 800382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	220f      	movs	r2, #15
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a20      	ldr	r2, [pc, #128]	@ (80038cc <HAL_GPIO_Init+0x240>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d052      	beq.n	80038f4 <HAL_GPIO_Init+0x268>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a1f      	ldr	r2, [pc, #124]	@ (80038d0 <HAL_GPIO_Init+0x244>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d031      	beq.n	80038ba <HAL_GPIO_Init+0x22e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a1e      	ldr	r2, [pc, #120]	@ (80038d4 <HAL_GPIO_Init+0x248>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02b      	beq.n	80038b6 <HAL_GPIO_Init+0x22a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a1d      	ldr	r2, [pc, #116]	@ (80038d8 <HAL_GPIO_Init+0x24c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d025      	beq.n	80038b2 <HAL_GPIO_Init+0x226>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <HAL_GPIO_Init+0x250>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01f      	beq.n	80038ae <HAL_GPIO_Init+0x222>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a1b      	ldr	r2, [pc, #108]	@ (80038e0 <HAL_GPIO_Init+0x254>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d019      	beq.n	80038aa <HAL_GPIO_Init+0x21e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a1a      	ldr	r2, [pc, #104]	@ (80038e4 <HAL_GPIO_Init+0x258>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_GPIO_Init+0x21a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a19      	ldr	r2, [pc, #100]	@ (80038e8 <HAL_GPIO_Init+0x25c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00d      	beq.n	80038a2 <HAL_GPIO_Init+0x216>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a18      	ldr	r2, [pc, #96]	@ (80038ec <HAL_GPIO_Init+0x260>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_Init+0x212>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <HAL_GPIO_Init+0x264>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_GPIO_Init+0x20e>
 8003896:	2309      	movs	r3, #9
 8003898:	e02d      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 800389a:	230a      	movs	r3, #10
 800389c:	e02b      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 800389e:	2308      	movs	r3, #8
 80038a0:	e029      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038a2:	2307      	movs	r3, #7
 80038a4:	e027      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038a6:	2306      	movs	r3, #6
 80038a8:	e025      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038aa:	2305      	movs	r3, #5
 80038ac:	e023      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038ae:	2304      	movs	r3, #4
 80038b0:	e021      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038b2:	2303      	movs	r3, #3
 80038b4:	e01f      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e01d      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e01b      	b.n	80038f6 <HAL_GPIO_Init+0x26a>
 80038be:	bf00      	nop
 80038c0:	58000080 	.word	0x58000080
 80038c4:	58024400 	.word	0x58024400
 80038c8:	58000400 	.word	0x58000400
 80038cc:	58020000 	.word	0x58020000
 80038d0:	58020400 	.word	0x58020400
 80038d4:	58020800 	.word	0x58020800
 80038d8:	58020c00 	.word	0x58020c00
 80038dc:	58021000 	.word	0x58021000
 80038e0:	58021400 	.word	0x58021400
 80038e4:	58021800 	.word	0x58021800
 80038e8:	58021c00 	.word	0x58021c00
 80038ec:	58022000 	.word	0x58022000
 80038f0:	58022400 	.word	0x58022400
 80038f4:	2300      	movs	r3, #0
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	f002 0203 	and.w	r2, r2, #3
 80038fc:	0092      	lsls	r2, r2, #2
 80038fe:	4093      	lsls	r3, r2
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003906:	4938      	ldr	r1, [pc, #224]	@ (80039e8 <HAL_GPIO_Init+0x35c>)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3302      	adds	r3, #2
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800393a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	3301      	adds	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f47f ae63 	bne.w	80036a0 <HAL_GPIO_Init+0x14>
  }
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	3724      	adds	r7, #36	@ 0x24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	58000400 	.word	0x58000400

080039ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	887b      	ldrh	r3, [r7, #2]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e001      	b.n	8003a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a2c:	787b      	ldrb	r3, [r7, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a38:	e003      	b.n	8003a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	041a      	lsls	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	619a      	str	r2, [r3, #24]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe f9df 	bl	8001e38 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e08b      	b.n	8003bae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fe fe90 	bl	80027d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	@ 0x24
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e006      	b.n	8003b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d108      	bne.n	8003b26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	e007      	b.n	8003b36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb8 <HAL_I2C_Init+0x134>)
 8003b42:	430b      	orrs	r3, r1
 8003b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	02008000 	.word	0x02008000

08003bbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	460b      	mov	r3, r1
 8003bca:	817b      	strh	r3, [r7, #10]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	f040 80fd 	bne.w	8003dd8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_I2C_Master_Transmit+0x30>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0f6      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bf4:	f7ff fb86 	bl	8003304 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2319      	movs	r3, #25
 8003c00:	2201      	movs	r2, #1
 8003c02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fce0 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e0e1      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2221      	movs	r2, #33	@ 0x21
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2210      	movs	r2, #16
 8003c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	893a      	ldrh	r2, [r7, #8]
 8003c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2bff      	cmp	r3, #255	@ 0xff
 8003c46:	d906      	bls.n	8003c56 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	22ff      	movs	r2, #255	@ 0xff
 8003c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e007      	b.n	8003c66 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c64:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d024      	beq.n	8003cb8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	8979      	ldrh	r1, [r7, #10]
 8003caa:	4b4e      	ldr	r3, [pc, #312]	@ (8003de4 <HAL_I2C_Master_Transmit+0x228>)
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fedb 	bl	8004a6c <I2C_TransferConfig>
 8003cb6:	e066      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	8979      	ldrh	r1, [r7, #10]
 8003cc0:	4b48      	ldr	r3, [pc, #288]	@ (8003de4 <HAL_I2C_Master_Transmit+0x228>)
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fed0 	bl	8004a6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ccc:	e05b      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	6a39      	ldr	r1, [r7, #32]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fcd3 	bl	800467e <I2C_WaitOnTXISFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e07b      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d034      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0x1ca>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d130      	bne.n	8003d86 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2180      	movs	r1, #128	@ 0x80
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fc4c 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e04d      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2bff      	cmp	r3, #255	@ 0xff
 8003d46:	d90e      	bls.n	8003d66 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	22ff      	movs	r2, #255	@ 0xff
 8003d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	8979      	ldrh	r1, [r7, #10]
 8003d56:	2300      	movs	r3, #0
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fe84 	bl	8004a6c <I2C_TransferConfig>
 8003d64:	e00f      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	8979      	ldrh	r1, [r7, #10]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fe73 	bl	8004a6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d19e      	bne.n	8003cce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	6a39      	ldr	r1, [r7, #32]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fcb9 	bl	800470c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e01a      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2220      	movs	r2, #32
 8003daa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <HAL_I2C_Master_Transmit+0x22c>)
 8003db8:	400b      	ands	r3, r1
 8003dba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	80002000 	.word	0x80002000
 8003de8:	fe00e800 	.word	0xfe00e800

08003dec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	461a      	mov	r2, r3
 8003df8:	460b      	mov	r3, r1
 8003dfa:	817b      	strh	r3, [r7, #10]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	f040 80db 	bne.w	8003fc4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_I2C_Master_Receive+0x30>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e0d4      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e24:	f7ff fa6e 	bl	8003304 <HAL_GetTick>
 8003e28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2319      	movs	r3, #25
 8003e30:	2201      	movs	r2, #1
 8003e32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fbc8 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0bf      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2222      	movs	r2, #34	@ 0x22
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2210      	movs	r2, #16
 8003e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	893a      	ldrh	r2, [r7, #8]
 8003e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2bff      	cmp	r3, #255	@ 0xff
 8003e76:	d90e      	bls.n	8003e96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	22ff      	movs	r2, #255	@ 0xff
 8003e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	8979      	ldrh	r1, [r7, #10]
 8003e86:	4b52      	ldr	r3, [pc, #328]	@ (8003fd0 <HAL_I2C_Master_Receive+0x1e4>)
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fdec 	bl	8004a6c <I2C_TransferConfig>
 8003e94:	e06d      	b.n	8003f72 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	8979      	ldrh	r1, [r7, #10]
 8003ea8:	4b49      	ldr	r3, [pc, #292]	@ (8003fd0 <HAL_I2C_Master_Receive+0x1e4>)
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fddb 	bl	8004a6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003eb6:	e05c      	b.n	8003f72 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	6a39      	ldr	r1, [r7, #32]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fc69 	bl	8004794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e07c      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d034      	beq.n	8003f72 <HAL_I2C_Master_Receive+0x186>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d130      	bne.n	8003f72 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2180      	movs	r1, #128	@ 0x80
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fb56 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e04d      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2bff      	cmp	r3, #255	@ 0xff
 8003f32:	d90e      	bls.n	8003f52 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	22ff      	movs	r2, #255	@ 0xff
 8003f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	8979      	ldrh	r1, [r7, #10]
 8003f42:	2300      	movs	r3, #0
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fd8e 	bl	8004a6c <I2C_TransferConfig>
 8003f50:	e00f      	b.n	8003f72 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	8979      	ldrh	r1, [r7, #10]
 8003f64:	2300      	movs	r3, #0
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fd7d 	bl	8004a6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d19d      	bne.n	8003eb8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	6a39      	ldr	r1, [r7, #32]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fbc3 	bl	800470c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e01a      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2220      	movs	r2, #32
 8003f96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6859      	ldr	r1, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <HAL_I2C_Master_Receive+0x1e8>)
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	80002400 	.word	0x80002400
 8003fd4:	fe00e800 	.word	0xfe00e800

08003fd8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	817b      	strh	r3, [r7, #10]
 8003fea:	460b      	mov	r3, r1
 8003fec:	813b      	strh	r3, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	f040 80f9 	bne.w	80041f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_I2C_Mem_Write+0x34>
 8004006:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004008:	2b00      	cmp	r3, #0
 800400a:	d105      	bne.n	8004018 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004012:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0ed      	b.n	80041f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_I2C_Mem_Write+0x4e>
 8004022:	2302      	movs	r3, #2
 8004024:	e0e6      	b.n	80041f4 <HAL_I2C_Mem_Write+0x21c>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800402e:	f7ff f969 	bl	8003304 <HAL_GetTick>
 8004032:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2319      	movs	r3, #25
 800403a:	2201      	movs	r2, #1
 800403c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fac3 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0d1      	b.n	80041f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2221      	movs	r2, #33	@ 0x21
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2240      	movs	r2, #64	@ 0x40
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a3a      	ldr	r2, [r7, #32]
 800406a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004070:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004078:	88f8      	ldrh	r0, [r7, #6]
 800407a:	893a      	ldrh	r2, [r7, #8]
 800407c:	8979      	ldrh	r1, [r7, #10]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	4603      	mov	r3, r0
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f9d3 	bl	8004434 <I2C_RequestMemoryWrite>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0a9      	b.n	80041f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2bff      	cmp	r3, #255	@ 0xff
 80040a8:	d90e      	bls.n	80040c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	22ff      	movs	r2, #255	@ 0xff
 80040ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	8979      	ldrh	r1, [r7, #10]
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fcd3 	bl	8004a6c <I2C_TransferConfig>
 80040c6:	e00f      	b.n	80040e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	8979      	ldrh	r1, [r7, #10]
 80040da:	2300      	movs	r3, #0
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fcc2 	bl	8004a6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fac6 	bl	800467e <I2C_WaitOnTXISFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e07b      	b.n	80041f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d034      	beq.n	80041a0 <HAL_I2C_Mem_Write+0x1c8>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	d130      	bne.n	80041a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004144:	2200      	movs	r2, #0
 8004146:	2180      	movs	r1, #128	@ 0x80
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fa3f 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e04d      	b.n	80041f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2bff      	cmp	r3, #255	@ 0xff
 8004160:	d90e      	bls.n	8004180 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	22ff      	movs	r2, #255	@ 0xff
 8004166:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416c:	b2da      	uxtb	r2, r3
 800416e:	8979      	ldrh	r1, [r7, #10]
 8004170:	2300      	movs	r3, #0
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fc77 	bl	8004a6c <I2C_TransferConfig>
 800417e:	e00f      	b.n	80041a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418e:	b2da      	uxtb	r2, r3
 8004190:	8979      	ldrh	r1, [r7, #10]
 8004192:	2300      	movs	r3, #0
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fc66 	bl	8004a6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d19e      	bne.n	80040e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 faac 	bl	800470c <I2C_WaitOnSTOPFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e01a      	b.n	80041f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2220      	movs	r2, #32
 80041c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <HAL_I2C_Mem_Write+0x224>)
 80041d2:	400b      	ands	r3, r1
 80041d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e000      	b.n	80041f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
  }
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	fe00e800 	.word	0xfe00e800

08004200 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	4608      	mov	r0, r1
 800420a:	4611      	mov	r1, r2
 800420c:	461a      	mov	r2, r3
 800420e:	4603      	mov	r3, r0
 8004210:	817b      	strh	r3, [r7, #10]
 8004212:	460b      	mov	r3, r1
 8004214:	813b      	strh	r3, [r7, #8]
 8004216:	4613      	mov	r3, r2
 8004218:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	f040 80fd 	bne.w	8004422 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_I2C_Mem_Read+0x34>
 800422e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800423a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0f1      	b.n	8004424 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_I2C_Mem_Read+0x4e>
 800424a:	2302      	movs	r3, #2
 800424c:	e0ea      	b.n	8004424 <HAL_I2C_Mem_Read+0x224>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004256:	f7ff f855 	bl	8003304 <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	2319      	movs	r3, #25
 8004262:	2201      	movs	r2, #1
 8004264:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f9af 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0d5      	b.n	8004424 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2222      	movs	r2, #34	@ 0x22
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2240      	movs	r2, #64	@ 0x40
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a3a      	ldr	r2, [r7, #32]
 8004292:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042a0:	88f8      	ldrh	r0, [r7, #6]
 80042a2:	893a      	ldrh	r2, [r7, #8]
 80042a4:	8979      	ldrh	r1, [r7, #10]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	4603      	mov	r3, r0
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f913 	bl	80044dc <I2C_RequestMemoryRead>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0ad      	b.n	8004424 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2bff      	cmp	r3, #255	@ 0xff
 80042d0:	d90e      	bls.n	80042f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	22ff      	movs	r2, #255	@ 0xff
 80042d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	8979      	ldrh	r1, [r7, #10]
 80042e0:	4b52      	ldr	r3, [pc, #328]	@ (800442c <HAL_I2C_Mem_Read+0x22c>)
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fbbf 	bl	8004a6c <I2C_TransferConfig>
 80042ee:	e00f      	b.n	8004310 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	8979      	ldrh	r1, [r7, #10]
 8004302:	4b4a      	ldr	r3, [pc, #296]	@ (800442c <HAL_I2C_Mem_Read+0x22c>)
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 fbae 	bl	8004a6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004316:	2200      	movs	r2, #0
 8004318:	2104      	movs	r1, #4
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f956 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e07c      	b.n	8004424 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d034      	beq.n	80043d0 <HAL_I2C_Mem_Read+0x1d0>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	d130      	bne.n	80043d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004374:	2200      	movs	r2, #0
 8004376:	2180      	movs	r1, #128	@ 0x80
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f927 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e04d      	b.n	8004424 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2bff      	cmp	r3, #255	@ 0xff
 8004390:	d90e      	bls.n	80043b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	22ff      	movs	r2, #255	@ 0xff
 8004396:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439c:	b2da      	uxtb	r2, r3
 800439e:	8979      	ldrh	r1, [r7, #10]
 80043a0:	2300      	movs	r3, #0
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fb5f 	bl	8004a6c <I2C_TransferConfig>
 80043ae:	e00f      	b.n	80043d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	8979      	ldrh	r1, [r7, #10]
 80043c2:	2300      	movs	r3, #0
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fb4e 	bl	8004a6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d19a      	bne.n	8004310 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f994 	bl	800470c <I2C_WaitOnSTOPFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e01a      	b.n	8004424 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2220      	movs	r2, #32
 80043f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6859      	ldr	r1, [r3, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_I2C_Mem_Read+0x230>)
 8004402:	400b      	ands	r3, r1
 8004404:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	80002400 	.word	0x80002400
 8004430:	fe00e800 	.word	0xfe00e800

08004434 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	4603      	mov	r3, r0
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	460b      	mov	r3, r1
 8004448:	813b      	strh	r3, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	8979      	ldrh	r1, [r7, #10]
 8004454:	4b20      	ldr	r3, [pc, #128]	@ (80044d8 <I2C_RequestMemoryWrite+0xa4>)
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fb05 	bl	8004a6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	69b9      	ldr	r1, [r7, #24]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f909 	bl	800467e <I2C_WaitOnTXISFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e02c      	b.n	80044d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800447c:	893b      	ldrh	r3, [r7, #8]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	629a      	str	r2, [r3, #40]	@ 0x28
 8004486:	e015      	b.n	80044b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004488:	893b      	ldrh	r3, [r7, #8]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	b29b      	uxth	r3, r3
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f8ef 	bl	800467e <I2C_WaitOnTXISFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e012      	b.n	80044d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044aa:	893b      	ldrh	r3, [r7, #8]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2200      	movs	r2, #0
 80044bc:	2180      	movs	r1, #128	@ 0x80
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f884 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	80002000 	.word	0x80002000

080044dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	460b      	mov	r3, r1
 80044f0:	813b      	strh	r3, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	8979      	ldrh	r1, [r7, #10]
 80044fc:	4b20      	ldr	r3, [pc, #128]	@ (8004580 <I2C_RequestMemoryRead+0xa4>)
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2300      	movs	r3, #0
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fab2 	bl	8004a6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	69b9      	ldr	r1, [r7, #24]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f8b6 	bl	800467e <I2C_WaitOnTXISFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e02c      	b.n	8004576 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d105      	bne.n	800452e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004522:	893b      	ldrh	r3, [r7, #8]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	629a      	str	r2, [r3, #40]	@ 0x28
 800452c:	e015      	b.n	800455a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800452e:	893b      	ldrh	r3, [r7, #8]
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	b29b      	uxth	r3, r3
 8004534:	b2da      	uxtb	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	69b9      	ldr	r1, [r7, #24]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f89c 	bl	800467e <I2C_WaitOnTXISFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e012      	b.n	8004576 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004550:	893b      	ldrh	r3, [r7, #8]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	2200      	movs	r2, #0
 8004562:	2140      	movs	r1, #64	@ 0x40
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f831 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	80002000 	.word	0x80002000

08004584 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b02      	cmp	r3, #2
 8004598:	d103      	bne.n	80045a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d007      	beq.n	80045c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	619a      	str	r2, [r3, #24]
  }
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045dc:	e03b      	b.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f962 	bl	80048ac <I2C_IsErrorOccurred>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e041      	b.n	8004676 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045f8:	d02d      	beq.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe fe83 	bl	8003304 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnFlagUntilTimeout+0x44>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d122      	bne.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4013      	ands	r3, r2
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	429a      	cmp	r2, r3
 800461e:	bf0c      	ite	eq
 8004620:	2301      	moveq	r3, #1
 8004622:	2300      	movne	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	429a      	cmp	r2, r3
 800462c:	d113      	bne.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e00f      	b.n	8004676 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	bf0c      	ite	eq
 8004666:	2301      	moveq	r3, #1
 8004668:	2300      	movne	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	429a      	cmp	r2, r3
 8004672:	d0b4      	beq.n	80045de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800468a:	e033      	b.n	80046f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f90b 	bl	80048ac <I2C_IsErrorOccurred>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e031      	b.n	8004704 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046a6:	d025      	beq.n	80046f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a8:	f7fe fe2c 	bl	8003304 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d302      	bcc.n	80046be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d11a      	bne.n	80046f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d013      	beq.n	80046f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e007      	b.n	8004704 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d1c4      	bne.n	800468c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004718:	e02f      	b.n	800477a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f8c4 	bl	80048ac <I2C_IsErrorOccurred>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e02d      	b.n	800478a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fe fde9 	bl	8003304 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d11a      	bne.n	800477a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b20      	cmp	r3, #32
 8004750:	d013      	beq.n	800477a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004756:	f043 0220 	orr.w	r2, r3, #32
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e007      	b.n	800478a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b20      	cmp	r3, #32
 8004786:	d1c8      	bne.n	800471a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80047a4:	e071      	b.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f87e 	bl	80048ac <I2C_IsErrorOccurred>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d13b      	bne.n	8004840 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d138      	bne.n	8004840 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d105      	bne.n	80047e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d121      	bne.n	800483a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2210      	movs	r2, #16
 80047fc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2204      	movs	r2, #4
 8004802:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2220      	movs	r2, #32
 800480a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b24      	ldr	r3, [pc, #144]	@ (80048a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004818:	400b      	ands	r3, r1
 800481a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75fb      	strb	r3, [r7, #23]
 8004838:	e002      	b.n	8004840 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004840:	f7fe fd60 	bl	8003304 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	d302      	bcc.n	8004856 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d119      	bne.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d116      	bne.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b04      	cmp	r3, #4
 8004868:	d00f      	beq.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b04      	cmp	r3, #4
 8004896:	d002      	beq.n	800489e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d083      	beq.n	80047a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800489e:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	fe00e800 	.word	0xfe00e800

080048ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	@ 0x28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d068      	beq.n	80049aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2210      	movs	r2, #16
 80048de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048e0:	e049      	b.n	8004976 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e8:	d045      	beq.n	8004976 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048ea:	f7fe fd0b 	bl	8003304 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d302      	bcc.n	8004900 <I2C_IsErrorOccurred+0x54>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d13a      	bne.n	8004976 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800490a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004912:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800491e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004922:	d121      	bne.n	8004968 <I2C_IsErrorOccurred+0xbc>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800492a:	d01d      	beq.n	8004968 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	2b20      	cmp	r3, #32
 8004930:	d01a      	beq.n	8004968 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004940:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004942:	f7fe fcdf 	bl	8003304 <HAL_GetTick>
 8004946:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004948:	e00e      	b.n	8004968 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800494a:	f7fe fcdb 	bl	8003304 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b19      	cmp	r3, #25
 8004956:	d907      	bls.n	8004968 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f043 0320 	orr.w	r3, r3, #32
 800495e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004966:	e006      	b.n	8004976 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b20      	cmp	r3, #32
 8004974:	d1e9      	bne.n	800494a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b20      	cmp	r3, #32
 8004982:	d003      	beq.n	800498c <I2C_IsErrorOccurred+0xe0>
 8004984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0aa      	beq.n	80048e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800498c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004990:	2b00      	cmp	r3, #0
 8004992:	d103      	bne.n	800499c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2220      	movs	r2, #32
 800499a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	f043 0304 	orr.w	r3, r3, #4
 80049a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00b      	beq.n	80049d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f043 0308 	orr.w	r3, r3, #8
 80049e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	f043 0302 	orr.w	r3, r3, #2
 8004a06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01c      	beq.n	8004a5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7ff fdaf 	bl	8004584 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <I2C_IsErrorOccurred+0x1bc>)
 8004a32:	400b      	ands	r3, r1
 8004a34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3728      	adds	r7, #40	@ 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	fe00e800 	.word	0xfe00e800

08004a6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	817b      	strh	r3, [r7, #10]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a7e:	897b      	ldrh	r3, [r7, #10]
 8004a80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a84:	7a7b      	ldrb	r3, [r7, #9]
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	0d5b      	lsrs	r3, r3, #21
 8004aa6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004aaa:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <I2C_TransferConfig+0x60>)
 8004aac:	430b      	orrs	r3, r1
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	ea02 0103 	and.w	r1, r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	03ff63ff 	.word	0x03ff63ff

08004ad0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d138      	bne.n	8004b58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e032      	b.n	8004b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	@ 0x24
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6819      	ldr	r1, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	e000      	b.n	8004b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b58:	2302      	movs	r3, #2
  }
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d139      	bne.n	8004bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e033      	b.n	8004bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2224      	movs	r2, #36	@ 0x24
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af02      	add	r7, sp, #8
 8004c04:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0fe      	b.n	8004e0e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f00f ff4f 	bl	8014ac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f00a fe4d 	bl	800f8d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7c1a      	ldrb	r2, [r3, #16]
 8004c44:	f88d 2000 	strb.w	r2, [sp]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c4c:	f00a fd1e 	bl	800f68c <USB_CoreInit>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0d5      	b.n	8004e0e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f00a fe45 	bl	800f8f8 <USB_SetCurrentMode>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0c6      	b.n	8004e0e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]
 8004c84:	e04a      	b.n	8004d1c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	3315      	adds	r3, #21
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c9a:	7bfa      	ldrb	r2, [r7, #15]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3314      	adds	r3, #20
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cae:	7bfa      	ldrb	r2, [r7, #15]
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	b298      	uxth	r0, r3
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	332e      	adds	r3, #46	@ 0x2e
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cc6:	7bfa      	ldrb	r2, [r7, #15]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3318      	adds	r3, #24
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	331c      	adds	r3, #28
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	3320      	adds	r3, #32
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d02:	7bfa      	ldrb	r2, [r7, #15]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3324      	adds	r3, #36	@ 0x24
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	791b      	ldrb	r3, [r3, #4]
 8004d20:	7bfa      	ldrb	r2, [r7, #15]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d3af      	bcc.n	8004c86 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]
 8004d2a:	e044      	b.n	8004db6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d2c:	7bfa      	ldrb	r2, [r7, #15]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d42:	7bfa      	ldrb	r2, [r7, #15]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004d54:	7bfa      	ldrb	r2, [r7, #15]
 8004d56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d58:	7bfa      	ldrb	r2, [r7, #15]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d6e:	7bfa      	ldrb	r2, [r7, #15]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d9a:	7bfa      	ldrb	r2, [r7, #15]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	3301      	adds	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	791b      	ldrb	r3, [r3, #4]
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d3b5      	bcc.n	8004d2c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	7c1a      	ldrb	r2, [r3, #16]
 8004dc8:	f88d 2000 	strb.w	r2, [sp]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dd0:	f00a fdde 	bl	800f990 <USB_DevInit>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e013      	b.n	8004e0e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	7b1b      	ldrb	r3, [r3, #12]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d102      	bne.n	8004e02 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f001 f999 	bl	8006134 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f00b fe1d 	bl	8010a46 <USB_DevDisconnect>

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_PCD_Start+0x1c>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e022      	b.n	8004e78 <HAL_PCD_Start+0x62>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e52:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f00a fd28 	bl	800f8b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f00b fdcb 	bl	8010a04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b08d      	sub	sp, #52	@ 0x34
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f00b fe89 	bl	8010bae <USB_GetMode>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f040 84b9 	bne.w	8005816 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f00b fded 	bl	8010a88 <USB_ReadInterrupts>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 84af 	beq.w	8005814 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f00b fdda 	bl	8010a88 <USB_ReadInterrupts>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d107      	bne.n	8004eee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f002 0202 	and.w	r2, r2, #2
 8004eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f00b fdc8 	bl	8010a88 <USB_ReadInterrupts>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	2b10      	cmp	r3, #16
 8004f00:	d161      	bne.n	8004fc6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0210 	bic.w	r2, r2, #16
 8004f10:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f003 020f 	and.w	r2, r3, #15
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3304      	adds	r3, #4
 8004f30:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	0c5b      	lsrs	r3, r3, #17
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d124      	bne.n	8004f88 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d035      	beq.n	8004fb6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	6a38      	ldr	r0, [r7, #32]
 8004f5e:	f00b fbff 	bl	8010760 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f6e:	441a      	add	r2, r3
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f80:	441a      	add	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	615a      	str	r2, [r3, #20]
 8004f86:	e016      	b.n	8004fb6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	0c5b      	lsrs	r3, r3, #17
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	2b06      	cmp	r3, #6
 8004f92:	d110      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6a38      	ldr	r0, [r7, #32]
 8004fa0:	f00b fbde 	bl	8010760 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fb0:	441a      	add	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0210 	orr.w	r2, r2, #16
 8004fc4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f00b fd5c 	bl	8010a88 <USB_ReadInterrupts>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fd6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fda:	f040 80a7 	bne.w	800512c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f00b fd61 	bl	8010aae <USB_ReadDevAllOutEpInterrupt>
 8004fec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004fee:	e099      	b.n	8005124 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 808e 	beq.w	8005118 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f00b fd85 	bl	8010b16 <USB_ReadDevOutEPInterrupt>
 800500c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00c      	beq.n	8005032 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005024:	461a      	mov	r2, r3
 8005026:	2301      	movs	r3, #1
 8005028:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800502a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fefb 	bl	8005e28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00c      	beq.n	8005056 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005048:	461a      	mov	r2, r3
 800504a:	2308      	movs	r3, #8
 800504c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800504e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 ffd1 	bl	8005ff8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506c:	461a      	mov	r2, r3
 800506e:	2310      	movs	r3, #16
 8005070:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d030      	beq.n	80050de <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005084:	2b80      	cmp	r3, #128	@ 0x80
 8005086:	d109      	bne.n	800509c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800509a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800509c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509e:	4613      	mov	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	3304      	adds	r3, #4
 80050b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	78db      	ldrb	r3, [r3, #3]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d108      	bne.n	80050cc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2200      	movs	r2, #0
 80050be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f00f fe24 	bl	8014d14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d8:	461a      	mov	r2, r3
 80050da:	2302      	movs	r3, #2
 80050dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f4:	461a      	mov	r2, r3
 80050f6:	2320      	movs	r3, #32
 80050f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005110:	461a      	mov	r2, r3
 8005112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005116:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	3301      	adds	r3, #1
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800511e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005120:	085b      	lsrs	r3, r3, #1
 8005122:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	2b00      	cmp	r3, #0
 8005128:	f47f af62 	bne.w	8004ff0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f00b fca9 	bl	8010a88 <USB_ReadInterrupts>
 8005136:	4603      	mov	r3, r0
 8005138:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800513c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005140:	f040 80db 	bne.w	80052fa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f00b fcca 	bl	8010ae2 <USB_ReadDevAllInEpInterrupt>
 800514e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005154:	e0cd      	b.n	80052f2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80c2 	beq.w	80052e6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	4611      	mov	r1, r2
 800516c:	4618      	mov	r0, r3
 800516e:	f00b fcf0 	bl	8010b52 <USB_ReadDevInEPInterrupt>
 8005172:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d057      	beq.n	800522e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	2201      	movs	r2, #1
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	43db      	mvns	r3, r3
 8005198:	69f9      	ldr	r1, [r7, #28]
 800519a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800519e:	4013      	ands	r3, r2
 80051a0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ae:	461a      	mov	r2, r3
 80051b0:	2301      	movs	r3, #1
 80051b2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	799b      	ldrb	r3, [r3, #6]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d132      	bne.n	8005222 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	3320      	adds	r3, #32
 80051cc:	6819      	ldr	r1, [r3, #0]
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4403      	add	r3, r0
 80051dc:	331c      	adds	r3, #28
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4419      	add	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4403      	add	r3, r0
 80051f0:	3320      	adds	r3, #32
 80051f2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d113      	bne.n	8005222 <HAL_PCD_IRQHandler+0x3a2>
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051fe:	4613      	mov	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3324      	adds	r3, #36	@ 0x24
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d108      	bne.n	8005222 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800521a:	461a      	mov	r2, r3
 800521c:	2101      	movs	r1, #1
 800521e:	f00b fcf9 	bl	8010c14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	b2db      	uxtb	r3, r3
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f00f fcee 	bl	8014c0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005244:	461a      	mov	r2, r3
 8005246:	2308      	movs	r3, #8
 8005248:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005260:	461a      	mov	r2, r3
 8005262:	2310      	movs	r3, #16
 8005264:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800527c:	461a      	mov	r2, r3
 800527e:	2340      	movs	r3, #64	@ 0x40
 8005280:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d023      	beq.n	80052d4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800528c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800528e:	6a38      	ldr	r0, [r7, #32]
 8005290:	f00a fcdc 	bl	800fc4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005296:	4613      	mov	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	3310      	adds	r3, #16
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	3304      	adds	r3, #4
 80052a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	78db      	ldrb	r3, [r3, #3]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d108      	bne.n	80052c2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2200      	movs	r2, #0
 80052b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	4619      	mov	r1, r3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f00f fd3b 	bl	8014d38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ce:	461a      	mov	r2, r3
 80052d0:	2302      	movs	r3, #2
 80052d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80052de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fd15 	bl	8005d10 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	3301      	adds	r3, #1
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80052f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f47f af2e 	bne.w	8005156 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f00b fbc2 	bl	8010a88 <USB_ReadInterrupts>
 8005304:	4603      	mov	r3, r0
 8005306:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800530a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800530e:	d122      	bne.n	8005356 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800532a:	2b01      	cmp	r3, #1
 800532c:	d108      	bne.n	8005340 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005336:	2100      	movs	r1, #0
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 ff1f 	bl	800617c <HAL_PCDEx_LPM_Callback>
 800533e:	e002      	b.n	8005346 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f00f fcd9 	bl	8014cf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f00b fb94 	bl	8010a88 <USB_ReadInterrupts>
 8005360:	4603      	mov	r3, r0
 8005362:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005366:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800536a:	d112      	bne.n	8005392 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d102      	bne.n	8005382 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f00f fc95 	bl	8014cac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005390:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f00b fb76 	bl	8010a88 <USB_ReadInterrupts>
 800539c:	4603      	mov	r3, r0
 800539e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053a6:	d121      	bne.n	80053ec <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80053b6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d111      	bne.n	80053e6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d0:	089b      	lsrs	r3, r3, #2
 80053d2:	f003 020f 	and.w	r2, r3, #15
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80053dc:	2101      	movs	r1, #1
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fecc 	bl	800617c <HAL_PCDEx_LPM_Callback>
 80053e4:	e002      	b.n	80053ec <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f00f fc60 	bl	8014cac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f00b fb49 	bl	8010a88 <USB_ReadInterrupts>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005400:	f040 80b7 	bne.w	8005572 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2110      	movs	r1, #16
 800541e:	4618      	mov	r0, r3
 8005420:	f00a fc14 	bl	800fc4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005424:	2300      	movs	r3, #0
 8005426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005428:	e046      	b.n	80054b8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005436:	461a      	mov	r2, r3
 8005438:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800543c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800543e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005458:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800545c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800545e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800546a:	461a      	mov	r2, r3
 800546c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005470:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800548c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005490:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	3301      	adds	r3, #1
 80054b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	791b      	ldrb	r3, [r3, #4]
 80054bc:	461a      	mov	r2, r3
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d3b2      	bcc.n	800542a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054d2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80054d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	7bdb      	ldrb	r3, [r3, #15]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d016      	beq.n	800550e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054f0:	f043 030b 	orr.w	r3, r3, #11
 80054f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005506:	f043 030b 	orr.w	r3, r3, #11
 800550a:	6453      	str	r3, [r2, #68]	@ 0x44
 800550c:	e015      	b.n	800553a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551c:	4619      	mov	r1, r3
 800551e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005522:	4313      	orrs	r3, r2
 8005524:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005534:	f043 030b 	orr.w	r3, r3, #11
 8005538:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005548:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800554c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800555c:	461a      	mov	r2, r3
 800555e:	f00b fb59 	bl	8010c14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f00b fa86 	bl	8010a88 <USB_ReadInterrupts>
 800557c:	4603      	mov	r3, r0
 800557e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005586:	d123      	bne.n	80055d0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f00b fb1d 	bl	8010bcc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f00a fbd1 	bl	800fd3e <USB_GetDevSpeed>
 800559c:	4603      	mov	r3, r0
 800559e:	461a      	mov	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681c      	ldr	r4, [r3, #0]
 80055a8:	f001 fdd8 	bl	800715c <HAL_RCC_GetHCLKFreq>
 80055ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055b2:	461a      	mov	r2, r3
 80055b4:	4620      	mov	r0, r4
 80055b6:	f00a f8db 	bl	800f770 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f00f fb4d 	bl	8014c5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695a      	ldr	r2, [r3, #20]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80055ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f00b fa57 	bl	8010a88 <USB_ReadInterrupts>
 80055da:	4603      	mov	r3, r0
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d10a      	bne.n	80055fa <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f00f fb2a 	bl	8014c3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f002 0208 	and.w	r2, r2, #8
 80055f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f00b fa42 	bl	8010a88 <USB_ReadInterrupts>
 8005604:	4603      	mov	r3, r0
 8005606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560a:	2b80      	cmp	r3, #128	@ 0x80
 800560c:	d123      	bne.n	8005656 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800561a:	2301      	movs	r3, #1
 800561c:	627b      	str	r3, [r7, #36]	@ 0x24
 800561e:	e014      	b.n	800564a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005624:	4613      	mov	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	b2db      	uxtb	r3, r3
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fb08 	bl	8005c54 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	3301      	adds	r3, #1
 8005648:	627b      	str	r3, [r7, #36]	@ 0x24
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	791b      	ldrb	r3, [r3, #4]
 800564e:	461a      	mov	r2, r3
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	4293      	cmp	r3, r2
 8005654:	d3e4      	bcc.n	8005620 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f00b fa14 	bl	8010a88 <USB_ReadInterrupts>
 8005660:	4603      	mov	r3, r0
 8005662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800566a:	d13c      	bne.n	80056e6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800566c:	2301      	movs	r3, #1
 800566e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005670:	e02b      	b.n	80056ca <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005686:	4613      	mov	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	3318      	adds	r3, #24
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d115      	bne.n	80056c4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005698:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800569a:	2b00      	cmp	r3, #0
 800569c:	da12      	bge.n	80056c4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a2:	4613      	mov	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	3317      	adds	r3, #23
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fac8 	bl	8005c54 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	3301      	adds	r3, #1
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	791b      	ldrb	r3, [r3, #4]
 80056ce:	461a      	mov	r2, r3
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d3cd      	bcc.n	8005672 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695a      	ldr	r2, [r3, #20]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80056e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f00b f9cc 	bl	8010a88 <USB_ReadInterrupts>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056fa:	d156      	bne.n	80057aa <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056fc:	2301      	movs	r3, #1
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005700:	e045      	b.n	800578e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005716:	4613      	mov	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d12e      	bne.n	8005788 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800572a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800572c:	2b00      	cmp	r3, #0
 800572e:	da2b      	bge.n	8005788 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800573c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005740:	429a      	cmp	r2, r3
 8005742:	d121      	bne.n	8005788 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005780:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005784:	6053      	str	r3, [r2, #4]
            break;
 8005786:	e008      	b.n	800579a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	3301      	adds	r3, #1
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	791b      	ldrb	r3, [r3, #4]
 8005792:	461a      	mov	r2, r3
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	4293      	cmp	r3, r2
 8005798:	d3b3      	bcc.n	8005702 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80057a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f00b f96a 	bl	8010a88 <USB_ReadInterrupts>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80057ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057be:	d10a      	bne.n	80057d6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f00f facb 	bl	8014d5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695a      	ldr	r2, [r3, #20]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80057d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f00b f954 	bl	8010a88 <USB_ReadInterrupts>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d115      	bne.n	8005816 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f00f fabb 	bl	8014d78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6859      	ldr	r1, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	e000      	b.n	8005816 <HAL_PCD_IRQHandler+0x996>
      return;
 8005814:	bf00      	nop
    }
  }
}
 8005816:	3734      	adds	r7, #52	@ 0x34
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}

0800581c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_PCD_SetAddress+0x1a>
 8005832:	2302      	movs	r3, #2
 8005834:	e012      	b.n	800585c <HAL_PCD_SetAddress+0x40>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	78fa      	ldrb	r2, [r7, #3]
 800584a:	4611      	mov	r1, r2
 800584c:	4618      	mov	r0, r3
 800584e:	f00b f8b3 	bl	80109b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	4608      	mov	r0, r1
 800586e:	4611      	mov	r1, r2
 8005870:	461a      	mov	r2, r3
 8005872:	4603      	mov	r3, r0
 8005874:	70fb      	strb	r3, [r7, #3]
 8005876:	460b      	mov	r3, r1
 8005878:	803b      	strh	r3, [r7, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005886:	2b00      	cmp	r3, #0
 8005888:	da0f      	bge.n	80058aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800588a:	78fb      	ldrb	r3, [r7, #3]
 800588c:	f003 020f 	and.w	r2, r3, #15
 8005890:	4613      	mov	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	3310      	adds	r3, #16
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	4413      	add	r3, r2
 800589e:	3304      	adds	r3, #4
 80058a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	705a      	strb	r2, [r3, #1]
 80058a8:	e00f      	b.n	80058ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	f003 020f 	and.w	r2, r3, #15
 80058b0:	4613      	mov	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4413      	add	r3, r2
 80058c0:	3304      	adds	r3, #4
 80058c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80058d6:	883a      	ldrh	r2, [r7, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	78ba      	ldrb	r2, [r7, #2]
 80058e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d004      	beq.n	80058f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058f4:	78bb      	ldrb	r3, [r7, #2]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d102      	bne.n	8005900 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_PCD_EP_Open+0xaa>
 800590a:	2302      	movs	r3, #2
 800590c:	e00e      	b.n	800592c <HAL_PCD_EP_Open+0xc8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	4618      	mov	r0, r3
 800591e:	f00a fa33 	bl	800fd88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800592a:	7afb      	ldrb	r3, [r7, #11]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005944:	2b00      	cmp	r3, #0
 8005946:	da0f      	bge.n	8005968 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	f003 020f 	and.w	r2, r3, #15
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	3310      	adds	r3, #16
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	4413      	add	r3, r2
 800595c:	3304      	adds	r3, #4
 800595e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	705a      	strb	r2, [r3, #1]
 8005966:	e00f      	b.n	8005988 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	f003 020f 	and.w	r2, r3, #15
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	3304      	adds	r3, #4
 8005980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	b2da      	uxtb	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_PCD_EP_Close+0x6e>
 800599e:	2302      	movs	r3, #2
 80059a0:	e00e      	b.n	80059c0 <HAL_PCD_EP_Close+0x8c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68f9      	ldr	r1, [r7, #12]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f00a fa71 	bl	800fe98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	607a      	str	r2, [r7, #4]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	460b      	mov	r3, r1
 80059d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059d8:	7afb      	ldrb	r3, [r7, #11]
 80059da:	f003 020f 	and.w	r2, r3, #15
 80059de:	4613      	mov	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	3304      	adds	r3, #4
 80059f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2200      	movs	r2, #0
 8005a02:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2200      	movs	r2, #0
 8005a08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a0a:	7afb      	ldrb	r3, [r7, #11]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	799b      	ldrb	r3, [r3, #6]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d102      	bne.n	8005a24 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	799b      	ldrb	r3, [r3, #6]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6979      	ldr	r1, [r7, #20]
 8005a30:	f00a fb0e 	bl	8010050 <USB_EPStartXfer>

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	f003 020f 	and.w	r2, r3, #15
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005a60:	681b      	ldr	r3, [r3, #0]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	4613      	mov	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	3310      	adds	r3, #16
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	3304      	adds	r3, #4
 8005a94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aae:	7afb      	ldrb	r3, [r7, #11]
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	799b      	ldrb	r3, [r3, #6]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d102      	bne.n	8005ac8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	799b      	ldrb	r3, [r3, #6]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	6979      	ldr	r1, [r7, #20]
 8005ad4:	f00a fabc 	bl	8010050 <USB_EPStartXfer>

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	460b      	mov	r3, r1
 8005aec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	7912      	ldrb	r2, [r2, #4]
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e04f      	b.n	8005ba0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	da0f      	bge.n	8005b28 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	f003 020f 	and.w	r2, r3, #15
 8005b0e:	4613      	mov	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	3310      	adds	r3, #16
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	705a      	strb	r2, [r3, #1]
 8005b26:	e00d      	b.n	8005b44 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b28:	78fa      	ldrb	r2, [r7, #3]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b4a:	78fb      	ldrb	r3, [r7, #3]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_PCD_EP_SetStall+0x82>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e01d      	b.n	8005ba0 <HAL_PCD_EP_SetStall+0xbe>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68f9      	ldr	r1, [r7, #12]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f00a fe4c 	bl	8010810 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	7999      	ldrb	r1, [r3, #6]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b90:	461a      	mov	r2, r3
 8005b92:	f00b f83f 	bl	8010c14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	7912      	ldrb	r2, [r2, #4]
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e042      	b.n	8005c4c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	da0f      	bge.n	8005bee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	f003 020f 	and.w	r2, r3, #15
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	3310      	adds	r3, #16
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	4413      	add	r3, r2
 8005be2:	3304      	adds	r3, #4
 8005be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	705a      	strb	r2, [r3, #1]
 8005bec:	e00f      	b.n	8005c0e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	f003 020f 	and.w	r2, r3, #15
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	4413      	add	r3, r2
 8005c04:	3304      	adds	r3, #4
 8005c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_PCD_EP_ClrStall+0x86>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e00e      	b.n	8005c4c <HAL_PCD_EP_ClrStall+0xa4>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f00a fe55 	bl	80108ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	da0c      	bge.n	8005c82 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	f003 020f 	and.w	r2, r3, #15
 8005c6e:	4613      	mov	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	3310      	adds	r3, #16
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e00c      	b.n	8005c9c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	4613      	mov	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4413      	add	r3, r2
 8005c98:	3304      	adds	r3, #4
 8005c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68f9      	ldr	r1, [r7, #12]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f00a fc74 	bl	8010590 <USB_EPStopXfer>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005cac:	7afb      	ldrb	r3, [r7, #11]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_PCD_EP_Flush+0x1a>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e01b      	b.n	8005d08 <HAL_PCD_EP_Flush+0x52>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8005cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	da09      	bge.n	8005cf4 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f009 ffad 	bl	800fc4c <USB_FlushTxFifo>
 8005cf2:	e004      	b.n	8005cfe <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f009 ffd9 	bl	800fcb0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	@ 0x28
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	4613      	mov	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	3310      	adds	r3, #16
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	4413      	add	r3, r2
 8005d34:	3304      	adds	r3, #4
 8005d36:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d901      	bls.n	8005d48 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e06b      	b.n	8005e20 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d902      	bls.n	8005d64 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	3303      	adds	r3, #3
 8005d68:	089b      	lsrs	r3, r3, #2
 8005d6a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d6c:	e02a      	b.n	8005dc4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d902      	bls.n	8005d8a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	3303      	adds	r3, #3
 8005d8e:	089b      	lsrs	r3, r3, #2
 8005d90:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	68d9      	ldr	r1, [r3, #12]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	4603      	mov	r3, r0
 8005da6:	6978      	ldr	r0, [r7, #20]
 8005da8:	f00a fc9c 	bl	80106e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	441a      	add	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	695a      	ldr	r2, [r3, #20]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	441a      	add	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d809      	bhi.n	8005dee <PCD_WriteEmptyTxFifo+0xde>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d203      	bcs.n	8005dee <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1bf      	bne.n	8005d6e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d811      	bhi.n	8005e1e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	2201      	movs	r2, #1
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	6939      	ldr	r1, [r7, #16]
 8005e16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3720      	adds	r7, #32
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	333c      	adds	r3, #60	@ 0x3c
 8005e40:	3304      	adds	r3, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	799b      	ldrb	r3, [r3, #6]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d17b      	bne.n	8005f56 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d015      	beq.n	8005e94 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4a61      	ldr	r2, [pc, #388]	@ (8005ff0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	f240 80b9 	bls.w	8005fe4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 80b3 	beq.w	8005fe4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e90:	6093      	str	r3, [r2, #8]
 8005e92:	e0a7      	b.n	8005fe4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eaa:	461a      	mov	r2, r3
 8005eac:	2320      	movs	r3, #32
 8005eae:	6093      	str	r3, [r2, #8]
 8005eb0:	e098      	b.n	8005fe4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 8093 	bne.w	8005fe4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	4a4b      	ldr	r2, [pc, #300]	@ (8005ff0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d90f      	bls.n	8005ee6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005edc:	461a      	mov	r2, r3
 8005ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ee2:	6093      	str	r3, [r2, #8]
 8005ee4:	e07e      	b.n	8005fe4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3304      	adds	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	0159      	lsls	r1, r3, #5
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	440b      	add	r3, r1
 8005f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d114      	bne.n	8005f48 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f30:	461a      	mov	r2, r3
 8005f32:	2101      	movs	r1, #1
 8005f34:	f00a fe6e 	bl	8010c14 <USB_EP0_OutStart>
 8005f38:	e006      	b.n	8005f48 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	441a      	add	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f00e fe40 	bl	8014bd4 <HAL_PCD_DataOutStageCallback>
 8005f54:	e046      	b.n	8005fe4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	4a26      	ldr	r2, [pc, #152]	@ (8005ff4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d124      	bne.n	8005fa8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f74:	461a      	mov	r2, r3
 8005f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f7a:	6093      	str	r3, [r2, #8]
 8005f7c:	e032      	b.n	8005fe4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f94:	461a      	mov	r2, r3
 8005f96:	2320      	movs	r3, #32
 8005f98:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f00e fe17 	bl	8014bd4 <HAL_PCD_DataOutStageCallback>
 8005fa6:	e01d      	b.n	8005fe4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d114      	bne.n	8005fd8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d108      	bne.n	8005fd8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	f00a fe1e 	bl	8010c14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f00e fdf8 	bl	8014bd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	4f54300a 	.word	0x4f54300a
 8005ff4:	4f54310a 	.word	0x4f54310a

08005ff8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	333c      	adds	r3, #60	@ 0x3c
 8006010:	3304      	adds	r3, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a15      	ldr	r2, [pc, #84]	@ (8006080 <PCD_EP_OutSetupPacket_int+0x88>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d90e      	bls.n	800604c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006034:	2b00      	cmp	r3, #0
 8006036:	d009      	beq.n	800604c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006044:	461a      	mov	r2, r3
 8006046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800604a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f00e fdaf 	bl	8014bb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4a0a      	ldr	r2, [pc, #40]	@ (8006080 <PCD_EP_OutSetupPacket_int+0x88>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d90c      	bls.n	8006074 <PCD_EP_OutSetupPacket_int+0x7c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	799b      	ldrb	r3, [r3, #6]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d108      	bne.n	8006074 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800606c:	461a      	mov	r2, r3
 800606e:	2101      	movs	r1, #1
 8006070:	f00a fdd0 	bl	8010c14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	4f54300a 	.word	0x4f54300a

08006084 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
 8006090:	4613      	mov	r3, r2
 8006092:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d107      	bne.n	80060b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80060a2:	883b      	ldrh	r3, [r7, #0]
 80060a4:	0419      	lsls	r1, r3, #16
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80060b0:	e028      	b.n	8006104 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4413      	add	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]
 80060c4:	e00d      	b.n	80060e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	3340      	adds	r3, #64	@ 0x40
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4413      	add	r3, r2
 80060da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	3301      	adds	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]
 80060e2:	7bfa      	ldrb	r2, [r7, #15]
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d3ec      	bcc.n	80060c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80060ec:	883b      	ldrh	r3, [r7, #0]
 80060ee:	0418      	lsls	r0, r3, #16
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6819      	ldr	r1, [r3, #0]
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	4302      	orrs	r2, r0
 80060fc:	3340      	adds	r3, #64	@ 0x40
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	887a      	ldrh	r2, [r7, #2]
 8006124:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006162:	4b05      	ldr	r3, [pc, #20]	@ (8006178 <HAL_PCDEx_ActivateLPM+0x44>)
 8006164:	4313      	orrs	r3, r2
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	10000003 	.word	0x10000003

0800617c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800619c:	4b19      	ldr	r3, [pc, #100]	@ (8006204 <HAL_PWREx_ConfigSupply+0x70>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d00a      	beq.n	80061be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80061a8:	4b16      	ldr	r3, [pc, #88]	@ (8006204 <HAL_PWREx_ConfigSupply+0x70>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d001      	beq.n	80061ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e01f      	b.n	80061fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	e01d      	b.n	80061fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80061be:	4b11      	ldr	r3, [pc, #68]	@ (8006204 <HAL_PWREx_ConfigSupply+0x70>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f023 0207 	bic.w	r2, r3, #7
 80061c6:	490f      	ldr	r1, [pc, #60]	@ (8006204 <HAL_PWREx_ConfigSupply+0x70>)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80061ce:	f7fd f899 	bl	8003304 <HAL_GetTick>
 80061d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061d4:	e009      	b.n	80061ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80061d6:	f7fd f895 	bl	8003304 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061e4:	d901      	bls.n	80061ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e007      	b.n	80061fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061ea:	4b06      	ldr	r3, [pc, #24]	@ (8006204 <HAL_PWREx_ConfigSupply+0x70>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f6:	d1ee      	bne.n	80061d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	58024800 	.word	0x58024800

08006208 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800620c:	4b05      	ldr	r3, [pc, #20]	@ (8006224 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4a04      	ldr	r2, [pc, #16]	@ (8006224 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006216:	60d3      	str	r3, [r2, #12]
}
 8006218:	bf00      	nop
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	58024800 	.word	0x58024800

08006228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08c      	sub	sp, #48	@ 0x30
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d102      	bne.n	800623c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f000 bc48 	b.w	8006acc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8088 	beq.w	800635a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800624a:	4b99      	ldr	r3, [pc, #612]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006254:	4b96      	ldr	r3, [pc, #600]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006258:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800625a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625c:	2b10      	cmp	r3, #16
 800625e:	d007      	beq.n	8006270 <HAL_RCC_OscConfig+0x48>
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006262:	2b18      	cmp	r3, #24
 8006264:	d111      	bne.n	800628a <HAL_RCC_OscConfig+0x62>
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d10c      	bne.n	800628a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006270:	4b8f      	ldr	r3, [pc, #572]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d06d      	beq.n	8006358 <HAL_RCC_OscConfig+0x130>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d169      	bne.n	8006358 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	f000 bc21 	b.w	8006acc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006292:	d106      	bne.n	80062a2 <HAL_RCC_OscConfig+0x7a>
 8006294:	4b86      	ldr	r3, [pc, #536]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a85      	ldr	r2, [pc, #532]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 800629a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e02e      	b.n	8006300 <HAL_RCC_OscConfig+0xd8>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10c      	bne.n	80062c4 <HAL_RCC_OscConfig+0x9c>
 80062aa:	4b81      	ldr	r3, [pc, #516]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a80      	ldr	r2, [pc, #512]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	4b7e      	ldr	r3, [pc, #504]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a7d      	ldr	r2, [pc, #500]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e01d      	b.n	8006300 <HAL_RCC_OscConfig+0xd8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCC_OscConfig+0xc0>
 80062ce:	4b78      	ldr	r3, [pc, #480]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a77      	ldr	r2, [pc, #476]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	4b75      	ldr	r3, [pc, #468]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a74      	ldr	r2, [pc, #464]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e00b      	b.n	8006300 <HAL_RCC_OscConfig+0xd8>
 80062e8:	4b71      	ldr	r3, [pc, #452]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a70      	ldr	r2, [pc, #448]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	4b6e      	ldr	r3, [pc, #440]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a6d      	ldr	r2, [pc, #436]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80062fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d013      	beq.n	8006330 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006308:	f7fc fffc 	bl	8003304 <HAL_GetTick>
 800630c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006310:	f7fc fff8 	bl	8003304 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b64      	cmp	r3, #100	@ 0x64
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e3d4      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006322:	4b63      	ldr	r3, [pc, #396]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0xe8>
 800632e:	e014      	b.n	800635a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006330:	f7fc ffe8 	bl	8003304 <HAL_GetTick>
 8006334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006338:	f7fc ffe4 	bl	8003304 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b64      	cmp	r3, #100	@ 0x64
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e3c0      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800634a:	4b59      	ldr	r3, [pc, #356]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f0      	bne.n	8006338 <HAL_RCC_OscConfig+0x110>
 8006356:	e000      	b.n	800635a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 80ca 	beq.w	80064fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006368:	4b51      	ldr	r3, [pc, #324]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006370:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006372:	4b4f      	ldr	r3, [pc, #316]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006376:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <HAL_RCC_OscConfig+0x166>
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	2b18      	cmp	r3, #24
 8006382:	d156      	bne.n	8006432 <HAL_RCC_OscConfig+0x20a>
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d151      	bne.n	8006432 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800638e:	4b48      	ldr	r3, [pc, #288]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_RCC_OscConfig+0x17e>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e392      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063a6:	4b42      	ldr	r3, [pc, #264]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f023 0219 	bic.w	r2, r3, #25
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	493f      	ldr	r1, [pc, #252]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fc ffa4 	bl	8003304 <HAL_GetTick>
 80063bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c0:	f7fc ffa0 	bl	8003304 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e37c      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063d2:	4b37      	ldr	r3, [pc, #220]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0f0      	beq.n	80063c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063de:	f7fc ffc1 	bl	8003364 <HAL_GetREVID>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d817      	bhi.n	800641c <HAL_RCC_OscConfig+0x1f4>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	2b40      	cmp	r3, #64	@ 0x40
 80063f2:	d108      	bne.n	8006406 <HAL_RCC_OscConfig+0x1de>
 80063f4:	4b2e      	ldr	r3, [pc, #184]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80063fc:	4a2c      	ldr	r2, [pc, #176]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80063fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006402:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006404:	e07a      	b.n	80064fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006406:	4b2a      	ldr	r3, [pc, #168]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	031b      	lsls	r3, r3, #12
 8006414:	4926      	ldr	r1, [pc, #152]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006416:	4313      	orrs	r3, r2
 8006418:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800641a:	e06f      	b.n	80064fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800641c:	4b24      	ldr	r3, [pc, #144]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	061b      	lsls	r3, r3, #24
 800642a:	4921      	ldr	r1, [pc, #132]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 800642c:	4313      	orrs	r3, r2
 800642e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006430:	e064      	b.n	80064fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d047      	beq.n	80064ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800643a:	4b1d      	ldr	r3, [pc, #116]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 0219 	bic.w	r2, r3, #25
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	491a      	ldr	r1, [pc, #104]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006448:	4313      	orrs	r3, r2
 800644a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644c:	f7fc ff5a 	bl	8003304 <HAL_GetTick>
 8006450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006454:	f7fc ff56 	bl	8003304 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e332      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006466:	4b12      	ldr	r3, [pc, #72]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006472:	f7fc ff77 	bl	8003364 <HAL_GetREVID>
 8006476:	4603      	mov	r3, r0
 8006478:	f241 0203 	movw	r2, #4099	@ 0x1003
 800647c:	4293      	cmp	r3, r2
 800647e:	d819      	bhi.n	80064b4 <HAL_RCC_OscConfig+0x28c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b40      	cmp	r3, #64	@ 0x40
 8006486:	d108      	bne.n	800649a <HAL_RCC_OscConfig+0x272>
 8006488:	4b09      	ldr	r3, [pc, #36]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006490:	4a07      	ldr	r2, [pc, #28]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 8006492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006496:	6053      	str	r3, [r2, #4]
 8006498:	e030      	b.n	80064fc <HAL_RCC_OscConfig+0x2d4>
 800649a:	4b05      	ldr	r3, [pc, #20]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	031b      	lsls	r3, r3, #12
 80064a8:	4901      	ldr	r1, [pc, #4]	@ (80064b0 <HAL_RCC_OscConfig+0x288>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	604b      	str	r3, [r1, #4]
 80064ae:	e025      	b.n	80064fc <HAL_RCC_OscConfig+0x2d4>
 80064b0:	58024400 	.word	0x58024400
 80064b4:	4b9a      	ldr	r3, [pc, #616]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	061b      	lsls	r3, r3, #24
 80064c2:	4997      	ldr	r1, [pc, #604]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	604b      	str	r3, [r1, #4]
 80064c8:	e018      	b.n	80064fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ca:	4b95      	ldr	r3, [pc, #596]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a94      	ldr	r2, [pc, #592]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80064d0:	f023 0301 	bic.w	r3, r3, #1
 80064d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d6:	f7fc ff15 	bl	8003304 <HAL_GetTick>
 80064da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064dc:	e008      	b.n	80064f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064de:	f7fc ff11 	bl	8003304 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e2ed      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064f0:	4b8b      	ldr	r3, [pc, #556]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1f0      	bne.n	80064de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0310 	and.w	r3, r3, #16
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 80a9 	beq.w	800665c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800650a:	4b85      	ldr	r3, [pc, #532]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006512:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006514:	4b82      	ldr	r3, [pc, #520]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006518:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b08      	cmp	r3, #8
 800651e:	d007      	beq.n	8006530 <HAL_RCC_OscConfig+0x308>
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b18      	cmp	r3, #24
 8006524:	d13a      	bne.n	800659c <HAL_RCC_OscConfig+0x374>
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d135      	bne.n	800659c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006530:	4b7b      	ldr	r3, [pc, #492]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCC_OscConfig+0x320>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	2b80      	cmp	r3, #128	@ 0x80
 8006542:	d001      	beq.n	8006548 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e2c1      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006548:	f7fc ff0c 	bl	8003364 <HAL_GetREVID>
 800654c:	4603      	mov	r3, r0
 800654e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006552:	4293      	cmp	r3, r2
 8006554:	d817      	bhi.n	8006586 <HAL_RCC_OscConfig+0x35e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	2b20      	cmp	r3, #32
 800655c:	d108      	bne.n	8006570 <HAL_RCC_OscConfig+0x348>
 800655e:	4b70      	ldr	r3, [pc, #448]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006566:	4a6e      	ldr	r2, [pc, #440]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800656c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800656e:	e075      	b.n	800665c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006570:	4b6b      	ldr	r3, [pc, #428]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	069b      	lsls	r3, r3, #26
 800657e:	4968      	ldr	r1, [pc, #416]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006580:	4313      	orrs	r3, r2
 8006582:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006584:	e06a      	b.n	800665c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006586:	4b66      	ldr	r3, [pc, #408]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	061b      	lsls	r3, r3, #24
 8006594:	4962      	ldr	r1, [pc, #392]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006596:	4313      	orrs	r3, r2
 8006598:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800659a:	e05f      	b.n	800665c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d042      	beq.n	800662a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80065a4:	4b5e      	ldr	r3, [pc, #376]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80065aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b0:	f7fc fea8 	bl	8003304 <HAL_GetTick>
 80065b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80065b8:	f7fc fea4 	bl	8003304 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e280      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065ca:	4b55      	ldr	r3, [pc, #340]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0f0      	beq.n	80065b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065d6:	f7fc fec5 	bl	8003364 <HAL_GetREVID>
 80065da:	4603      	mov	r3, r0
 80065dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d817      	bhi.n	8006614 <HAL_RCC_OscConfig+0x3ec>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d108      	bne.n	80065fe <HAL_RCC_OscConfig+0x3d6>
 80065ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80065f4:	4a4a      	ldr	r2, [pc, #296]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80065f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065fa:	6053      	str	r3, [r2, #4]
 80065fc:	e02e      	b.n	800665c <HAL_RCC_OscConfig+0x434>
 80065fe:	4b48      	ldr	r3, [pc, #288]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	069b      	lsls	r3, r3, #26
 800660c:	4944      	ldr	r1, [pc, #272]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 800660e:	4313      	orrs	r3, r2
 8006610:	604b      	str	r3, [r1, #4]
 8006612:	e023      	b.n	800665c <HAL_RCC_OscConfig+0x434>
 8006614:	4b42      	ldr	r3, [pc, #264]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	061b      	lsls	r3, r3, #24
 8006622:	493f      	ldr	r1, [pc, #252]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006624:	4313      	orrs	r3, r2
 8006626:	60cb      	str	r3, [r1, #12]
 8006628:	e018      	b.n	800665c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800662a:	4b3d      	ldr	r3, [pc, #244]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a3c      	ldr	r2, [pc, #240]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006636:	f7fc fe65 	bl	8003304 <HAL_GetTick>
 800663a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800663e:	f7fc fe61 	bl	8003304 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e23d      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006650:	4b33      	ldr	r3, [pc, #204]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1f0      	bne.n	800663e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d036      	beq.n	80066d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d019      	beq.n	80066a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006670:	4b2b      	ldr	r3, [pc, #172]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006674:	4a2a      	ldr	r2, [pc, #168]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667c:	f7fc fe42 	bl	8003304 <HAL_GetTick>
 8006680:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006684:	f7fc fe3e 	bl	8003304 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e21a      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006696:	4b22      	ldr	r3, [pc, #136]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0f0      	beq.n	8006684 <HAL_RCC_OscConfig+0x45c>
 80066a2:	e018      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80066a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80066aa:	f023 0301 	bic.w	r3, r3, #1
 80066ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b0:	f7fc fe28 	bl	8003304 <HAL_GetTick>
 80066b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066b6:	e008      	b.n	80066ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066b8:	f7fc fe24 	bl	8003304 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e200      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066ca:	4b15      	ldr	r3, [pc, #84]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80066cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1f0      	bne.n	80066b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d039      	beq.n	8006756 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01c      	beq.n	8006724 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 80066f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066f6:	f7fc fe05 	bl	8003304 <HAL_GetTick>
 80066fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066fe:	f7fc fe01 	bl	8003304 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e1dd      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006710:	4b03      	ldr	r3, [pc, #12]	@ (8006720 <HAL_RCC_OscConfig+0x4f8>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0f0      	beq.n	80066fe <HAL_RCC_OscConfig+0x4d6>
 800671c:	e01b      	b.n	8006756 <HAL_RCC_OscConfig+0x52e>
 800671e:	bf00      	nop
 8006720:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006724:	4b9b      	ldr	r3, [pc, #620]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a9a      	ldr	r2, [pc, #616]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800672a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800672e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006730:	f7fc fde8 	bl	8003304 <HAL_GetTick>
 8006734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006738:	f7fc fde4 	bl	8003304 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e1c0      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800674a:	4b92      	ldr	r3, [pc, #584]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f0      	bne.n	8006738 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8081 	beq.w	8006866 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006764:	4b8c      	ldr	r3, [pc, #560]	@ (8006998 <HAL_RCC_OscConfig+0x770>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a8b      	ldr	r2, [pc, #556]	@ (8006998 <HAL_RCC_OscConfig+0x770>)
 800676a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800676e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006770:	f7fc fdc8 	bl	8003304 <HAL_GetTick>
 8006774:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006778:	f7fc fdc4 	bl	8003304 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	@ 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e1a0      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800678a:	4b83      	ldr	r3, [pc, #524]	@ (8006998 <HAL_RCC_OscConfig+0x770>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d106      	bne.n	80067ac <HAL_RCC_OscConfig+0x584>
 800679e:	4b7d      	ldr	r3, [pc, #500]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a2:	4a7c      	ldr	r2, [pc, #496]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80067aa:	e02d      	b.n	8006808 <HAL_RCC_OscConfig+0x5e0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10c      	bne.n	80067ce <HAL_RCC_OscConfig+0x5a6>
 80067b4:	4b77      	ldr	r3, [pc, #476]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b8:	4a76      	ldr	r2, [pc, #472]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c0:	4b74      	ldr	r3, [pc, #464]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c4:	4a73      	ldr	r2, [pc, #460]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067c6:	f023 0304 	bic.w	r3, r3, #4
 80067ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80067cc:	e01c      	b.n	8006808 <HAL_RCC_OscConfig+0x5e0>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2b05      	cmp	r3, #5
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCC_OscConfig+0x5c8>
 80067d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067da:	4a6e      	ldr	r2, [pc, #440]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067dc:	f043 0304 	orr.w	r3, r3, #4
 80067e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067e2:	4b6c      	ldr	r3, [pc, #432]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e6:	4a6b      	ldr	r2, [pc, #428]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067e8:	f043 0301 	orr.w	r3, r3, #1
 80067ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ee:	e00b      	b.n	8006808 <HAL_RCC_OscConfig+0x5e0>
 80067f0:	4b68      	ldr	r3, [pc, #416]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f4:	4a67      	ldr	r2, [pc, #412]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067f6:	f023 0301 	bic.w	r3, r3, #1
 80067fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80067fc:	4b65      	ldr	r3, [pc, #404]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80067fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006800:	4a64      	ldr	r2, [pc, #400]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006802:	f023 0304 	bic.w	r3, r3, #4
 8006806:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d015      	beq.n	800683c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006810:	f7fc fd78 	bl	8003304 <HAL_GetTick>
 8006814:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006816:	e00a      	b.n	800682e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006818:	f7fc fd74 	bl	8003304 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006826:	4293      	cmp	r3, r2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e14e      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800682e:	4b59      	ldr	r3, [pc, #356]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0ee      	beq.n	8006818 <HAL_RCC_OscConfig+0x5f0>
 800683a:	e014      	b.n	8006866 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683c:	f7fc fd62 	bl	8003304 <HAL_GetTick>
 8006840:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006842:	e00a      	b.n	800685a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006844:	f7fc fd5e 	bl	8003304 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e138      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800685a:	4b4e      	ldr	r3, [pc, #312]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800685c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1ee      	bne.n	8006844 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 812d 	beq.w	8006aca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006870:	4b48      	ldr	r3, [pc, #288]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006878:	2b18      	cmp	r3, #24
 800687a:	f000 80bd 	beq.w	80069f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	2b02      	cmp	r3, #2
 8006884:	f040 809e 	bne.w	80069c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006888:	4b42      	ldr	r3, [pc, #264]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a41      	ldr	r2, [pc, #260]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800688e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006894:	f7fc fd36 	bl	8003304 <HAL_GetTick>
 8006898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800689c:	f7fc fd32 	bl	8003304 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e10e      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068ae:	4b39      	ldr	r3, [pc, #228]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f0      	bne.n	800689c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ba:	4b36      	ldr	r3, [pc, #216]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80068bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068be:	4b37      	ldr	r3, [pc, #220]	@ (800699c <HAL_RCC_OscConfig+0x774>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80068ca:	0112      	lsls	r2, r2, #4
 80068cc:	430a      	orrs	r2, r1
 80068ce:	4931      	ldr	r1, [pc, #196]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d8:	3b01      	subs	r3, #1
 80068da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068e2:	3b01      	subs	r3, #1
 80068e4:	025b      	lsls	r3, r3, #9
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ee:	3b01      	subs	r3, #1
 80068f0:	041b      	lsls	r3, r3, #16
 80068f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fc:	3b01      	subs	r3, #1
 80068fe:	061b      	lsls	r3, r3, #24
 8006900:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006904:	4923      	ldr	r1, [pc, #140]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006906:	4313      	orrs	r3, r2
 8006908:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800690a:	4b22      	ldr	r3, [pc, #136]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800690c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690e:	4a21      	ldr	r2, [pc, #132]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006916:	4b1f      	ldr	r3, [pc, #124]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800691a:	4b21      	ldr	r3, [pc, #132]	@ (80069a0 <HAL_RCC_OscConfig+0x778>)
 800691c:	4013      	ands	r3, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006922:	00d2      	lsls	r2, r2, #3
 8006924:	491b      	ldr	r1, [pc, #108]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006926:	4313      	orrs	r3, r2
 8006928:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800692a:	4b1a      	ldr	r3, [pc, #104]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	f023 020c 	bic.w	r2, r3, #12
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	4917      	ldr	r1, [pc, #92]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006938:	4313      	orrs	r3, r2
 800693a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800693c:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800693e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006940:	f023 0202 	bic.w	r2, r3, #2
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006948:	4912      	ldr	r1, [pc, #72]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800694a:	4313      	orrs	r3, r2
 800694c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800694e:	4b11      	ldr	r3, [pc, #68]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	4a10      	ldr	r2, [pc, #64]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800695a:	4b0e      	ldr	r3, [pc, #56]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695e:	4a0d      	ldr	r2, [pc, #52]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006964:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006966:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	4a0a      	ldr	r2, [pc, #40]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 800696c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006972:	4b08      	ldr	r3, [pc, #32]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006976:	4a07      	ldr	r2, [pc, #28]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006978:	f043 0301 	orr.w	r3, r3, #1
 800697c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800697e:	4b05      	ldr	r3, [pc, #20]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a04      	ldr	r2, [pc, #16]	@ (8006994 <HAL_RCC_OscConfig+0x76c>)
 8006984:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698a:	f7fc fcbb 	bl	8003304 <HAL_GetTick>
 800698e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006990:	e011      	b.n	80069b6 <HAL_RCC_OscConfig+0x78e>
 8006992:	bf00      	nop
 8006994:	58024400 	.word	0x58024400
 8006998:	58024800 	.word	0x58024800
 800699c:	fffffc0c 	.word	0xfffffc0c
 80069a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fc fcae 	bl	8003304 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e08a      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069b6:	4b47      	ldr	r3, [pc, #284]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f0      	beq.n	80069a4 <HAL_RCC_OscConfig+0x77c>
 80069c2:	e082      	b.n	8006aca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c4:	4b43      	ldr	r3, [pc, #268]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a42      	ldr	r2, [pc, #264]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 80069ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d0:	f7fc fc98 	bl	8003304 <HAL_GetTick>
 80069d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d8:	f7fc fc94 	bl	8003304 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e070      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ea:	4b3a      	ldr	r3, [pc, #232]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x7b0>
 80069f6:	e068      	b.n	8006aca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80069f8:	4b36      	ldr	r3, [pc, #216]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 80069fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80069fe:	4b35      	ldr	r3, [pc, #212]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 8006a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d031      	beq.n	8006a70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f003 0203 	and.w	r2, r3, #3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d12a      	bne.n	8006a70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	091b      	lsrs	r3, r3, #4
 8006a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d122      	bne.n	8006a70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d11a      	bne.n	8006a70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	0a5b      	lsrs	r3, r3, #9
 8006a3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d111      	bne.n	8006a70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	0c1b      	lsrs	r3, r3, #16
 8006a50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d108      	bne.n	8006a70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	0e1b      	lsrs	r3, r3, #24
 8006a62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d001      	beq.n	8006a74 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e02b      	b.n	8006acc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a74:	4b17      	ldr	r3, [pc, #92]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 8006a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a78:	08db      	lsrs	r3, r3, #3
 8006a7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d01f      	beq.n	8006aca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006a8a:	4b12      	ldr	r3, [pc, #72]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 8006a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8e:	4a11      	ldr	r2, [pc, #68]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 8006a90:	f023 0301 	bic.w	r3, r3, #1
 8006a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a96:	f7fc fc35 	bl	8003304 <HAL_GetTick>
 8006a9a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006a9c:	bf00      	nop
 8006a9e:	f7fc fc31 	bl	8003304 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d0f9      	beq.n	8006a9e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 8006aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aae:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <HAL_RCC_OscConfig+0x8b0>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ab6:	00d2      	lsls	r2, r2, #3
 8006ab8:	4906      	ldr	r1, [pc, #24]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006abe:	4b05      	ldr	r3, [pc, #20]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	4a04      	ldr	r2, [pc, #16]	@ (8006ad4 <HAL_RCC_OscConfig+0x8ac>)
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3730      	adds	r7, #48	@ 0x30
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	ffff0007 	.word	0xffff0007

08006adc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e19c      	b.n	8006e2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006af0:	4b8a      	ldr	r3, [pc, #552]	@ (8006d1c <HAL_RCC_ClockConfig+0x240>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d910      	bls.n	8006b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006afe:	4b87      	ldr	r3, [pc, #540]	@ (8006d1c <HAL_RCC_ClockConfig+0x240>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f023 020f 	bic.w	r2, r3, #15
 8006b06:	4985      	ldr	r1, [pc, #532]	@ (8006d1c <HAL_RCC_ClockConfig+0x240>)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b0e:	4b83      	ldr	r3, [pc, #524]	@ (8006d1c <HAL_RCC_ClockConfig+0x240>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d001      	beq.n	8006b20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e184      	b.n	8006e2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d010      	beq.n	8006b4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	4b7b      	ldr	r3, [pc, #492]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d908      	bls.n	8006b4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b3c:	4b78      	ldr	r3, [pc, #480]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	4975      	ldr	r1, [pc, #468]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d010      	beq.n	8006b7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695a      	ldr	r2, [r3, #20]
 8006b5e:	4b70      	ldr	r3, [pc, #448]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d908      	bls.n	8006b7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	496a      	ldr	r1, [pc, #424]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d010      	beq.n	8006baa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	4b64      	ldr	r3, [pc, #400]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d908      	bls.n	8006baa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b98:	4b61      	ldr	r3, [pc, #388]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	495e      	ldr	r1, [pc, #376]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d010      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69da      	ldr	r2, [r3, #28]
 8006bba:	4b59      	ldr	r3, [pc, #356]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d908      	bls.n	8006bd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006bc6:	4b56      	ldr	r3, [pc, #344]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	4953      	ldr	r1, [pc, #332]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d010      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	4b4d      	ldr	r3, [pc, #308]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d908      	bls.n	8006c06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	f023 020f 	bic.w	r2, r3, #15
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	4947      	ldr	r1, [pc, #284]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d055      	beq.n	8006cbe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c12:	4b43      	ldr	r3, [pc, #268]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	4940      	ldr	r1, [pc, #256]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d107      	bne.n	8006c3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d121      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0f6      	b.n	8006e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d107      	bne.n	8006c54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c44:	4b36      	ldr	r3, [pc, #216]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d115      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0ea      	b.n	8006e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d107      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c5c:	4b30      	ldr	r3, [pc, #192]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0de      	b.n	8006e2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e0d6      	b.n	8006e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c7c:	4b28      	ldr	r3, [pc, #160]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	f023 0207 	bic.w	r2, r3, #7
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4925      	ldr	r1, [pc, #148]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c8e:	f7fc fb39 	bl	8003304 <HAL_GetTick>
 8006c92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c94:	e00a      	b.n	8006cac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c96:	f7fc fb35 	bl	8003304 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e0be      	b.n	8006e2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cac:	4b1c      	ldr	r3, [pc, #112]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d1eb      	bne.n	8006c96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d010      	beq.n	8006cec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	4b14      	ldr	r3, [pc, #80]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d208      	bcs.n	8006cec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cda:	4b11      	ldr	r3, [pc, #68]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f023 020f 	bic.w	r2, r3, #15
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	490e      	ldr	r1, [pc, #56]	@ (8006d20 <HAL_RCC_ClockConfig+0x244>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cec:	4b0b      	ldr	r3, [pc, #44]	@ (8006d1c <HAL_RCC_ClockConfig+0x240>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d214      	bcs.n	8006d24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfa:	4b08      	ldr	r3, [pc, #32]	@ (8006d1c <HAL_RCC_ClockConfig+0x240>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f023 020f 	bic.w	r2, r3, #15
 8006d02:	4906      	ldr	r1, [pc, #24]	@ (8006d1c <HAL_RCC_ClockConfig+0x240>)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d0a:	4b04      	ldr	r3, [pc, #16]	@ (8006d1c <HAL_RCC_ClockConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d005      	beq.n	8006d24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e086      	b.n	8006e2a <HAL_RCC_ClockConfig+0x34e>
 8006d1c:	52002000 	.word	0x52002000
 8006d20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d010      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691a      	ldr	r2, [r3, #16]
 8006d34:	4b3f      	ldr	r3, [pc, #252]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d208      	bcs.n	8006d52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d40:	4b3c      	ldr	r3, [pc, #240]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	4939      	ldr	r1, [pc, #228]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d010      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695a      	ldr	r2, [r3, #20]
 8006d62:	4b34      	ldr	r3, [pc, #208]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d208      	bcs.n	8006d80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d6e:	4b31      	ldr	r3, [pc, #196]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	492e      	ldr	r1, [pc, #184]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d010      	beq.n	8006dae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699a      	ldr	r2, [r3, #24]
 8006d90:	4b28      	ldr	r3, [pc, #160]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d208      	bcs.n	8006dae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d9c:	4b25      	ldr	r3, [pc, #148]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	4922      	ldr	r1, [pc, #136]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d010      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69da      	ldr	r2, [r3, #28]
 8006dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d208      	bcs.n	8006ddc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006dca:	4b1a      	ldr	r3, [pc, #104]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	4917      	ldr	r1, [pc, #92]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ddc:	f000 f844 	bl	8006e68 <HAL_RCC_GetSysClockFreq>
 8006de0:	4602      	mov	r2, r0
 8006de2:	4b14      	ldr	r3, [pc, #80]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	4912      	ldr	r1, [pc, #72]	@ (8006e38 <HAL_RCC_ClockConfig+0x35c>)
 8006dee:	5ccb      	ldrb	r3, [r1, r3]
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	fa22 f303 	lsr.w	r3, r2, r3
 8006df8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8006e34 <HAL_RCC_ClockConfig+0x358>)
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	4a0d      	ldr	r2, [pc, #52]	@ (8006e38 <HAL_RCC_ClockConfig+0x35c>)
 8006e04:	5cd3      	ldrb	r3, [r2, r3]
 8006e06:	f003 031f 	and.w	r3, r3, #31
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e10:	4a0a      	ldr	r2, [pc, #40]	@ (8006e3c <HAL_RCC_ClockConfig+0x360>)
 8006e12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e14:	4a0a      	ldr	r2, [pc, #40]	@ (8006e40 <HAL_RCC_ClockConfig+0x364>)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e44 <HAL_RCC_ClockConfig+0x368>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fc fa26 	bl	8003270 <HAL_InitTick>
 8006e24:	4603      	mov	r3, r0
 8006e26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	58024400 	.word	0x58024400
 8006e38:	08017ddc 	.word	0x08017ddc
 8006e3c:	24000034 	.word	0x24000034
 8006e40:	24000030 	.word	0x24000030
 8006e44:	24000038 	.word	0x24000038

08006e48 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8006e4c:	4b05      	ldr	r3, [pc, #20]	@ (8006e64 <HAL_RCC_EnableCSS+0x1c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a04      	ldr	r2, [pc, #16]	@ (8006e64 <HAL_RCC_EnableCSS+0x1c>)
 8006e52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e56:	6013      	str	r3, [r2, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	58024400 	.word	0x58024400

08006e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b089      	sub	sp, #36	@ 0x24
 8006e6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e6e:	4bb3      	ldr	r3, [pc, #716]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e76:	2b18      	cmp	r3, #24
 8006e78:	f200 8155 	bhi.w	8007126 <HAL_RCC_GetSysClockFreq+0x2be>
 8006e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006ee9 	.word	0x08006ee9
 8006e88:	08007127 	.word	0x08007127
 8006e8c:	08007127 	.word	0x08007127
 8006e90:	08007127 	.word	0x08007127
 8006e94:	08007127 	.word	0x08007127
 8006e98:	08007127 	.word	0x08007127
 8006e9c:	08007127 	.word	0x08007127
 8006ea0:	08007127 	.word	0x08007127
 8006ea4:	08006f0f 	.word	0x08006f0f
 8006ea8:	08007127 	.word	0x08007127
 8006eac:	08007127 	.word	0x08007127
 8006eb0:	08007127 	.word	0x08007127
 8006eb4:	08007127 	.word	0x08007127
 8006eb8:	08007127 	.word	0x08007127
 8006ebc:	08007127 	.word	0x08007127
 8006ec0:	08007127 	.word	0x08007127
 8006ec4:	08006f15 	.word	0x08006f15
 8006ec8:	08007127 	.word	0x08007127
 8006ecc:	08007127 	.word	0x08007127
 8006ed0:	08007127 	.word	0x08007127
 8006ed4:	08007127 	.word	0x08007127
 8006ed8:	08007127 	.word	0x08007127
 8006edc:	08007127 	.word	0x08007127
 8006ee0:	08007127 	.word	0x08007127
 8006ee4:	08006f1b 	.word	0x08006f1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ee8:	4b94      	ldr	r3, [pc, #592]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ef4:	4b91      	ldr	r3, [pc, #580]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	08db      	lsrs	r3, r3, #3
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	4a90      	ldr	r2, [pc, #576]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f00:	fa22 f303 	lsr.w	r3, r2, r3
 8006f04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006f06:	e111      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f08:	4b8d      	ldr	r3, [pc, #564]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f0a:	61bb      	str	r3, [r7, #24]
      break;
 8006f0c:	e10e      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006f0e:	4b8d      	ldr	r3, [pc, #564]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f10:	61bb      	str	r3, [r7, #24]
      break;
 8006f12:	e10b      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006f14:	4b8c      	ldr	r3, [pc, #560]	@ (8007148 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f16:	61bb      	str	r3, [r7, #24]
      break;
 8006f18:	e108      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f1a:	4b88      	ldr	r3, [pc, #544]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006f24:	4b85      	ldr	r3, [pc, #532]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f28:	091b      	lsrs	r3, r3, #4
 8006f2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f2e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f30:	4b82      	ldr	r3, [pc, #520]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f3a:	4b80      	ldr	r3, [pc, #512]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3e:	08db      	lsrs	r3, r3, #3
 8006f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	fb02 f303 	mul.w	r3, r2, r3
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80e1 	beq.w	8007120 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	f000 8083 	beq.w	800706c <HAL_RCC_GetSysClockFreq+0x204>
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	f200 80a1 	bhi.w	80070b0 <HAL_RCC_GetSysClockFreq+0x248>
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x114>
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d056      	beq.n	8007028 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f7a:	e099      	b.n	80070b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f7c:	4b6f      	ldr	r3, [pc, #444]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d02d      	beq.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f88:	4b6c      	ldr	r3, [pc, #432]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	08db      	lsrs	r3, r3, #3
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	4a6b      	ldr	r2, [pc, #428]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f94:	fa22 f303 	lsr.w	r3, r2, r3
 8006f98:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb2:	4b62      	ldr	r3, [pc, #392]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fc6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800714c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fde:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006fe2:	e087      	b.n	80070f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007150 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff6:	4b51      	ldr	r3, [pc, #324]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007006:	ed97 6a02 	vldr	s12, [r7, #8]
 800700a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800714c <HAL_RCC_GetSysClockFreq+0x2e4>
 800700e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800701a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007026:	e065      	b.n	80070f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007032:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007154 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703a:	4b40      	ldr	r3, [pc, #256]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704a:	ed97 6a02 	vldr	s12, [r7, #8]
 800704e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800714c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800705e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800706a:	e043      	b.n	80070f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007076:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007158 <HAL_RCC_GetSysClockFreq+0x2f0>
 800707a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707e:	4b2f      	ldr	r3, [pc, #188]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007092:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800714c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070ae:	e021      	b.n	80070f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007154 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c2:	4b1e      	ldr	r3, [pc, #120]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800714c <HAL_RCC_GetSysClockFreq+0x2e4>
 80070da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80070f4:	4b11      	ldr	r3, [pc, #68]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f8:	0a5b      	lsrs	r3, r3, #9
 80070fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070fe:	3301      	adds	r3, #1
 8007100:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	ee07 3a90 	vmov	s15, r3
 8007108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800710c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007118:	ee17 3a90 	vmov	r3, s15
 800711c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800711e:	e005      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	61bb      	str	r3, [r7, #24]
      break;
 8007124:	e002      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007126:	4b07      	ldr	r3, [pc, #28]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007128:	61bb      	str	r3, [r7, #24]
      break;
 800712a:	bf00      	nop
  }

  return sysclockfreq;
 800712c:	69bb      	ldr	r3, [r7, #24]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3724      	adds	r7, #36	@ 0x24
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	58024400 	.word	0x58024400
 8007140:	03d09000 	.word	0x03d09000
 8007144:	003d0900 	.word	0x003d0900
 8007148:	017d7840 	.word	0x017d7840
 800714c:	46000000 	.word	0x46000000
 8007150:	4c742400 	.word	0x4c742400
 8007154:	4a742400 	.word	0x4a742400
 8007158:	4bbebc20 	.word	0x4bbebc20

0800715c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007162:	f7ff fe81 	bl	8006e68 <HAL_RCC_GetSysClockFreq>
 8007166:	4602      	mov	r2, r0
 8007168:	4b10      	ldr	r3, [pc, #64]	@ (80071ac <HAL_RCC_GetHCLKFreq+0x50>)
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	0a1b      	lsrs	r3, r3, #8
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	490f      	ldr	r1, [pc, #60]	@ (80071b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007174:	5ccb      	ldrb	r3, [r1, r3]
 8007176:	f003 031f 	and.w	r3, r3, #31
 800717a:	fa22 f303 	lsr.w	r3, r2, r3
 800717e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007180:	4b0a      	ldr	r3, [pc, #40]	@ (80071ac <HAL_RCC_GetHCLKFreq+0x50>)
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	4a09      	ldr	r2, [pc, #36]	@ (80071b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800718a:	5cd3      	ldrb	r3, [r2, r3]
 800718c:	f003 031f 	and.w	r3, r3, #31
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	fa22 f303 	lsr.w	r3, r2, r3
 8007196:	4a07      	ldr	r2, [pc, #28]	@ (80071b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007198:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800719a:	4a07      	ldr	r2, [pc, #28]	@ (80071b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80071a0:	4b04      	ldr	r3, [pc, #16]	@ (80071b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80071a2:	681b      	ldr	r3, [r3, #0]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	58024400 	.word	0x58024400
 80071b0:	08017ddc 	.word	0x08017ddc
 80071b4:	24000034 	.word	0x24000034
 80071b8:	24000030 	.word	0x24000030

080071bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071c0:	f7ff ffcc 	bl	800715c <HAL_RCC_GetHCLKFreq>
 80071c4:	4602      	mov	r2, r0
 80071c6:	4b06      	ldr	r3, [pc, #24]	@ (80071e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	091b      	lsrs	r3, r3, #4
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	4904      	ldr	r1, [pc, #16]	@ (80071e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071d2:	5ccb      	ldrb	r3, [r1, r3]
 80071d4:	f003 031f 	and.w	r3, r3, #31
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80071dc:	4618      	mov	r0, r3
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	58024400 	.word	0x58024400
 80071e4:	08017ddc 	.word	0x08017ddc

080071e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80071ec:	f7ff ffb6 	bl	800715c <HAL_RCC_GetHCLKFreq>
 80071f0:	4602      	mov	r2, r0
 80071f2:	4b06      	ldr	r3, [pc, #24]	@ (800720c <HAL_RCC_GetPCLK2Freq+0x24>)
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	0a1b      	lsrs	r3, r3, #8
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	4904      	ldr	r1, [pc, #16]	@ (8007210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071fe:	5ccb      	ldrb	r3, [r1, r3]
 8007200:	f003 031f 	and.w	r3, r3, #31
 8007204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007208:	4618      	mov	r0, r3
 800720a:	bd80      	pop	{r7, pc}
 800720c:	58024400 	.word	0x58024400
 8007210:	08017ddc 	.word	0x08017ddc

08007214 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007218:	4b07      	ldr	r3, [pc, #28]	@ (8007238 <HAL_RCC_NMI_IRQHandler+0x24>)
 800721a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800721c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007224:	d105      	bne.n	8007232 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007226:	f000 f809 	bl	800723c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800722a:	4b03      	ldr	r3, [pc, #12]	@ (8007238 <HAL_RCC_NMI_IRQHandler+0x24>)
 800722c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007230:	669a      	str	r2, [r3, #104]	@ 0x68
  }
}
 8007232:	bf00      	nop
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	58024400 	.word	0x58024400

0800723c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
	...

0800724c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800724c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007250:	b0ca      	sub	sp, #296	@ 0x128
 8007252:	af00      	add	r7, sp, #0
 8007254:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007258:	2300      	movs	r3, #0
 800725a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800725e:	2300      	movs	r3, #0
 8007260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007270:	2500      	movs	r5, #0
 8007272:	ea54 0305 	orrs.w	r3, r4, r5
 8007276:	d049      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800727e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007282:	d02f      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007284:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007288:	d828      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800728a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800728e:	d01a      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007290:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007294:	d822      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800729a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800729e:	d007      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072a0:	e01c      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a2:	4bb8      	ldr	r3, [pc, #736]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a6:	4ab7      	ldr	r2, [pc, #732]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072ae:	e01a      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b4:	3308      	adds	r3, #8
 80072b6:	2102      	movs	r1, #2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f002 fb61 	bl	8009980 <RCCEx_PLL2_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072c4:	e00f      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ca:	3328      	adds	r3, #40	@ 0x28
 80072cc:	2102      	movs	r1, #2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f002 fc08 	bl	8009ae4 <RCCEx_PLL3_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072da:	e004      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072e2:	e000      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80072e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80072ee:	4ba5      	ldr	r3, [pc, #660]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80072f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072fc:	4aa1      	ldr	r2, [pc, #644]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072fe:	430b      	orrs	r3, r1
 8007300:	6513      	str	r3, [r2, #80]	@ 0x50
 8007302:	e003      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800730c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007318:	f04f 0900 	mov.w	r9, #0
 800731c:	ea58 0309 	orrs.w	r3, r8, r9
 8007320:	d047      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007328:	2b04      	cmp	r3, #4
 800732a:	d82a      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800732c:	a201      	add	r2, pc, #4	@ (adr r2, 8007334 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007332:	bf00      	nop
 8007334:	08007349 	.word	0x08007349
 8007338:	08007357 	.word	0x08007357
 800733c:	0800736d 	.word	0x0800736d
 8007340:	0800738b 	.word	0x0800738b
 8007344:	0800738b 	.word	0x0800738b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007348:	4b8e      	ldr	r3, [pc, #568]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800734a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734c:	4a8d      	ldr	r2, [pc, #564]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800734e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007354:	e01a      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735a:	3308      	adds	r3, #8
 800735c:	2100      	movs	r1, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f002 fb0e 	bl	8009980 <RCCEx_PLL2_Config>
 8007364:	4603      	mov	r3, r0
 8007366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800736a:	e00f      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007370:	3328      	adds	r3, #40	@ 0x28
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f002 fbb5 	bl	8009ae4 <RCCEx_PLL3_Config>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007380:	e004      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007388:	e000      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800738a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800738c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007394:	4b7b      	ldr	r3, [pc, #492]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007398:	f023 0107 	bic.w	r1, r3, #7
 800739c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a2:	4a78      	ldr	r2, [pc, #480]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073a4:	430b      	orrs	r3, r1
 80073a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80073a8:	e003      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80073b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80073be:	f04f 0b00 	mov.w	fp, #0
 80073c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80073c6:	d04c      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80073c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073d2:	d030      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80073d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073d8:	d829      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073da:	2bc0      	cmp	r3, #192	@ 0xc0
 80073dc:	d02d      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80073de:	2bc0      	cmp	r3, #192	@ 0xc0
 80073e0:	d825      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073e2:	2b80      	cmp	r3, #128	@ 0x80
 80073e4:	d018      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80073e6:	2b80      	cmp	r3, #128	@ 0x80
 80073e8:	d821      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80073ee:	2b40      	cmp	r3, #64	@ 0x40
 80073f0:	d007      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80073f2:	e01c      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f4:	4b63      	ldr	r3, [pc, #396]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f8:	4a62      	ldr	r2, [pc, #392]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007400:	e01c      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007406:	3308      	adds	r3, #8
 8007408:	2100      	movs	r1, #0
 800740a:	4618      	mov	r0, r3
 800740c:	f002 fab8 	bl	8009980 <RCCEx_PLL2_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007416:	e011      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741c:	3328      	adds	r3, #40	@ 0x28
 800741e:	2100      	movs	r1, #0
 8007420:	4618      	mov	r0, r3
 8007422:	f002 fb5f 	bl	8009ae4 <RCCEx_PLL3_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800742c:	e006      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007434:	e002      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800743a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007444:	4b4f      	ldr	r3, [pc, #316]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007448:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007452:	4a4c      	ldr	r2, [pc, #304]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007454:	430b      	orrs	r3, r1
 8007456:	6513      	str	r3, [r2, #80]	@ 0x50
 8007458:	e003      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800746e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007472:	2300      	movs	r3, #0
 8007474:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007478:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800747c:	460b      	mov	r3, r1
 800747e:	4313      	orrs	r3, r2
 8007480:	d053      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800748a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800748e:	d035      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007490:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007494:	d82e      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007496:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800749a:	d031      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800749c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80074a0:	d828      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80074a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074a6:	d01a      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80074a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074ac:	d822      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80074b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074b6:	d007      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80074b8:	e01c      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074ba:	4b32      	ldr	r3, [pc, #200]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074be:	4a31      	ldr	r2, [pc, #196]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074c6:	e01c      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	3308      	adds	r3, #8
 80074ce:	2100      	movs	r1, #0
 80074d0:	4618      	mov	r0, r3
 80074d2:	f002 fa55 	bl	8009980 <RCCEx_PLL2_Config>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80074dc:	e011      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e2:	3328      	adds	r3, #40	@ 0x28
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f002 fafc 	bl	8009ae4 <RCCEx_PLL3_Config>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074f2:	e006      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074fa:	e002      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800750a:	4b1e      	ldr	r3, [pc, #120]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800750c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800750e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800751a:	4a1a      	ldr	r2, [pc, #104]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800751c:	430b      	orrs	r3, r1
 800751e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007520:	e003      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007536:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800753a:	2300      	movs	r3, #0
 800753c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007540:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007544:	460b      	mov	r3, r1
 8007546:	4313      	orrs	r3, r2
 8007548:	d056      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800754a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007552:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007556:	d038      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007558:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800755c:	d831      	bhi.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800755e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007562:	d034      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007564:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007568:	d82b      	bhi.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800756a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800756e:	d01d      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007570:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007574:	d825      	bhi.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d006      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800757a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800757e:	d00a      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007580:	e01f      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007582:	bf00      	nop
 8007584:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007588:	4ba2      	ldr	r3, [pc, #648]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	4aa1      	ldr	r2, [pc, #644]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800758e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007594:	e01c      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759a:	3308      	adds	r3, #8
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f002 f9ee 	bl	8009980 <RCCEx_PLL2_Config>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075aa:	e011      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b0:	3328      	adds	r3, #40	@ 0x28
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f002 fa95 	bl	8009ae4 <RCCEx_PLL3_Config>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075c0:	e006      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075c8:	e002      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80075ca:	bf00      	nop
 80075cc:	e000      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80075ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10b      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80075d8:	4b8e      	ldr	r3, [pc, #568]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80075e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075e8:	4a8a      	ldr	r2, [pc, #552]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075ea:	430b      	orrs	r3, r1
 80075ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80075ee:	e003      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007604:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007608:	2300      	movs	r3, #0
 800760a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800760e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007612:	460b      	mov	r3, r1
 8007614:	4313      	orrs	r3, r2
 8007616:	d03a      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800761e:	2b30      	cmp	r3, #48	@ 0x30
 8007620:	d01f      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007622:	2b30      	cmp	r3, #48	@ 0x30
 8007624:	d819      	bhi.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007626:	2b20      	cmp	r3, #32
 8007628:	d00c      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800762a:	2b20      	cmp	r3, #32
 800762c:	d815      	bhi.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d019      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007632:	2b10      	cmp	r3, #16
 8007634:	d111      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007636:	4b77      	ldr	r3, [pc, #476]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	4a76      	ldr	r2, [pc, #472]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800763c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007642:	e011      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007648:	3308      	adds	r3, #8
 800764a:	2102      	movs	r1, #2
 800764c:	4618      	mov	r0, r3
 800764e:	f002 f997 	bl	8009980 <RCCEx_PLL2_Config>
 8007652:	4603      	mov	r3, r0
 8007654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007658:	e006      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007660:	e002      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007662:	bf00      	nop
 8007664:	e000      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007670:	4b68      	ldr	r3, [pc, #416]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007674:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800767e:	4a65      	ldr	r2, [pc, #404]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007680:	430b      	orrs	r3, r1
 8007682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007684:	e003      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800768a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800769a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800769e:	2300      	movs	r3, #0
 80076a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80076a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4313      	orrs	r3, r2
 80076ac:	d051      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076b8:	d035      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80076ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076be:	d82e      	bhi.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80076c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076c4:	d031      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80076c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076ca:	d828      	bhi.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80076cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076d0:	d01a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80076d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076d6:	d822      	bhi.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80076dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e0:	d007      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80076e2:	e01c      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e4:	4b4b      	ldr	r3, [pc, #300]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e8:	4a4a      	ldr	r2, [pc, #296]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076f0:	e01c      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f6:	3308      	adds	r3, #8
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f002 f940 	bl	8009980 <RCCEx_PLL2_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007706:	e011      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770c:	3328      	adds	r3, #40	@ 0x28
 800770e:	2100      	movs	r1, #0
 8007710:	4618      	mov	r0, r3
 8007712:	f002 f9e7 	bl	8009ae4 <RCCEx_PLL3_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800771c:	e006      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007724:	e002      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007726:	bf00      	nop
 8007728:	e000      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800772a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800772c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007734:	4b37      	ldr	r3, [pc, #220]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007738:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800773c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007742:	4a34      	ldr	r2, [pc, #208]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007744:	430b      	orrs	r3, r1
 8007746:	6513      	str	r3, [r2, #80]	@ 0x50
 8007748:	e003      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800774e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800775e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007762:	2300      	movs	r3, #0
 8007764:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007768:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800776c:	460b      	mov	r3, r1
 800776e:	4313      	orrs	r3, r2
 8007770:	d056      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800777c:	d033      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800777e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007782:	d82c      	bhi.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007788:	d02f      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800778a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800778e:	d826      	bhi.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007790:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007794:	d02b      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007796:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800779a:	d820      	bhi.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800779c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077a0:	d012      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80077a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077a6:	d81a      	bhi.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d022      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80077ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b0:	d115      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b6:	3308      	adds	r3, #8
 80077b8:	2101      	movs	r1, #1
 80077ba:	4618      	mov	r0, r3
 80077bc:	f002 f8e0 	bl	8009980 <RCCEx_PLL2_Config>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077c6:	e015      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077cc:	3328      	adds	r3, #40	@ 0x28
 80077ce:	2101      	movs	r1, #1
 80077d0:	4618      	mov	r0, r3
 80077d2:	f002 f987 	bl	8009ae4 <RCCEx_PLL3_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077dc:	e00a      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077e4:	e006      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077e6:	bf00      	nop
 80077e8:	e004      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077ea:	bf00      	nop
 80077ec:	e002      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077ee:	bf00      	nop
 80077f0:	e000      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10d      	bne.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007800:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800780a:	4a02      	ldr	r2, [pc, #8]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800780c:	430b      	orrs	r3, r1
 800780e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007810:	e006      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007812:	bf00      	nop
 8007814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800782c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007830:	2300      	movs	r3, #0
 8007832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007836:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800783a:	460b      	mov	r3, r1
 800783c:	4313      	orrs	r3, r2
 800783e:	d055      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800784c:	d033      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800784e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007852:	d82c      	bhi.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007858:	d02f      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800785a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785e:	d826      	bhi.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007860:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007864:	d02b      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800786a:	d820      	bhi.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800786c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007870:	d012      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007876:	d81a      	bhi.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d022      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800787c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007880:	d115      	bne.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007886:	3308      	adds	r3, #8
 8007888:	2101      	movs	r1, #1
 800788a:	4618      	mov	r0, r3
 800788c:	f002 f878 	bl	8009980 <RCCEx_PLL2_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007896:	e015      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789c:	3328      	adds	r3, #40	@ 0x28
 800789e:	2101      	movs	r1, #1
 80078a0:	4618      	mov	r0, r3
 80078a2:	f002 f91f 	bl	8009ae4 <RCCEx_PLL3_Config>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078ac:	e00a      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078b4:	e006      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078b6:	bf00      	nop
 80078b8:	e004      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078ba:	bf00      	nop
 80078bc:	e002      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10b      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078cc:	4ba3      	ldr	r3, [pc, #652]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078d0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80078d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078dc:	4a9f      	ldr	r2, [pc, #636]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078de:	430b      	orrs	r3, r1
 80078e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80078e2:	e003      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80078f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078fc:	2300      	movs	r3, #0
 80078fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007906:	460b      	mov	r3, r1
 8007908:	4313      	orrs	r3, r2
 800790a:	d037      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007916:	d00e      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800791c:	d816      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d018      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007926:	d111      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007928:	4b8c      	ldr	r3, [pc, #560]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800792a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792c:	4a8b      	ldr	r2, [pc, #556]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800792e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007934:	e00f      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793a:	3308      	adds	r3, #8
 800793c:	2101      	movs	r1, #1
 800793e:	4618      	mov	r0, r3
 8007940:	f002 f81e 	bl	8009980 <RCCEx_PLL2_Config>
 8007944:	4603      	mov	r3, r0
 8007946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800794a:	e004      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007952:	e000      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10a      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800795e:	4b7f      	ldr	r3, [pc, #508]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007962:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796c:	4a7b      	ldr	r2, [pc, #492]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800796e:	430b      	orrs	r3, r1
 8007970:	6513      	str	r3, [r2, #80]	@ 0x50
 8007972:	e003      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800797c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800798c:	2300      	movs	r3, #0
 800798e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007992:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007996:	460b      	mov	r3, r1
 8007998:	4313      	orrs	r3, r2
 800799a:	d039      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d81c      	bhi.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80079a6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	080079e9 	.word	0x080079e9
 80079b0:	080079bd 	.word	0x080079bd
 80079b4:	080079cb 	.word	0x080079cb
 80079b8:	080079e9 	.word	0x080079e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079bc:	4b67      	ldr	r3, [pc, #412]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c0:	4a66      	ldr	r2, [pc, #408]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079c8:	e00f      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ce:	3308      	adds	r3, #8
 80079d0:	2102      	movs	r1, #2
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 ffd4 	bl	8009980 <RCCEx_PLL2_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079de:	e004      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079e6:	e000      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80079e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079f2:	4b5a      	ldr	r3, [pc, #360]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f6:	f023 0103 	bic.w	r1, r3, #3
 80079fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a00:	4a56      	ldr	r2, [pc, #344]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a02:	430b      	orrs	r3, r1
 8007a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a06:	e003      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a20:	2300      	movs	r3, #0
 8007a22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	f000 809f 	beq.w	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a32:	4b4b      	ldr	r3, [pc, #300]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a4a      	ldr	r2, [pc, #296]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a3e:	f7fb fc61 	bl	8003304 <HAL_GetTick>
 8007a42:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a46:	e00b      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a48:	f7fb fc5c 	bl	8003304 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b64      	cmp	r3, #100	@ 0x64
 8007a56:	d903      	bls.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a5e:	e005      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a60:	4b3f      	ldr	r3, [pc, #252]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0ed      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d179      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a74:	4b39      	ldr	r3, [pc, #228]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a80:	4053      	eors	r3, r2
 8007a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d015      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a8a:	4b34      	ldr	r3, [pc, #208]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a96:	4b31      	ldr	r3, [pc, #196]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a9a:	4a30      	ldr	r2, [pc, #192]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aa0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007aae:	4a2b      	ldr	r2, [pc, #172]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007ab4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac2:	d118      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac4:	f7fb fc1e 	bl	8003304 <HAL_GetTick>
 8007ac8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007acc:	e00d      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ace:	f7fb fc19 	bl	8003304 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007ad8:	1ad2      	subs	r2, r2, r3
 8007ada:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d903      	bls.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007ae8:	e005      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aea:	4b1c      	ldr	r3, [pc, #112]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0eb      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d129      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b0e:	d10e      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007b10:	4b12      	ldr	r3, [pc, #72]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b20:	091a      	lsrs	r2, r3, #4
 8007b22:	4b10      	ldr	r3, [pc, #64]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	4a0d      	ldr	r2, [pc, #52]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6113      	str	r3, [r2, #16]
 8007b2c:	e005      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	4a0a      	ldr	r2, [pc, #40]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b38:	6113      	str	r3, [r2, #16]
 8007b3a:	4b08      	ldr	r3, [pc, #32]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b3c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b4a:	4a04      	ldr	r2, [pc, #16]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b50:	e00e      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007b5a:	e009      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007b5c:	58024400 	.word	0x58024400
 8007b60:	58024800 	.word	0x58024800
 8007b64:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f002 0301 	and.w	r3, r2, #1
 8007b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b80:	2300      	movs	r3, #0
 8007b82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f000 8089 	beq.w	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b98:	2b28      	cmp	r3, #40	@ 0x28
 8007b9a:	d86b      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007c7d 	.word	0x08007c7d
 8007ba8:	08007c75 	.word	0x08007c75
 8007bac:	08007c75 	.word	0x08007c75
 8007bb0:	08007c75 	.word	0x08007c75
 8007bb4:	08007c75 	.word	0x08007c75
 8007bb8:	08007c75 	.word	0x08007c75
 8007bbc:	08007c75 	.word	0x08007c75
 8007bc0:	08007c75 	.word	0x08007c75
 8007bc4:	08007c49 	.word	0x08007c49
 8007bc8:	08007c75 	.word	0x08007c75
 8007bcc:	08007c75 	.word	0x08007c75
 8007bd0:	08007c75 	.word	0x08007c75
 8007bd4:	08007c75 	.word	0x08007c75
 8007bd8:	08007c75 	.word	0x08007c75
 8007bdc:	08007c75 	.word	0x08007c75
 8007be0:	08007c75 	.word	0x08007c75
 8007be4:	08007c5f 	.word	0x08007c5f
 8007be8:	08007c75 	.word	0x08007c75
 8007bec:	08007c75 	.word	0x08007c75
 8007bf0:	08007c75 	.word	0x08007c75
 8007bf4:	08007c75 	.word	0x08007c75
 8007bf8:	08007c75 	.word	0x08007c75
 8007bfc:	08007c75 	.word	0x08007c75
 8007c00:	08007c75 	.word	0x08007c75
 8007c04:	08007c7d 	.word	0x08007c7d
 8007c08:	08007c75 	.word	0x08007c75
 8007c0c:	08007c75 	.word	0x08007c75
 8007c10:	08007c75 	.word	0x08007c75
 8007c14:	08007c75 	.word	0x08007c75
 8007c18:	08007c75 	.word	0x08007c75
 8007c1c:	08007c75 	.word	0x08007c75
 8007c20:	08007c75 	.word	0x08007c75
 8007c24:	08007c7d 	.word	0x08007c7d
 8007c28:	08007c75 	.word	0x08007c75
 8007c2c:	08007c75 	.word	0x08007c75
 8007c30:	08007c75 	.word	0x08007c75
 8007c34:	08007c75 	.word	0x08007c75
 8007c38:	08007c75 	.word	0x08007c75
 8007c3c:	08007c75 	.word	0x08007c75
 8007c40:	08007c75 	.word	0x08007c75
 8007c44:	08007c7d 	.word	0x08007c7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	2101      	movs	r1, #1
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 fe95 	bl	8009980 <RCCEx_PLL2_Config>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c5c:	e00f      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c62:	3328      	adds	r3, #40	@ 0x28
 8007c64:	2101      	movs	r1, #1
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 ff3c 	bl	8009ae4 <RCCEx_PLL3_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c72:	e004      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c7a:	e000      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c86:	4bbf      	ldr	r3, [pc, #764]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c94:	4abb      	ldr	r2, [pc, #748]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c96:	430b      	orrs	r3, r1
 8007c98:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c9a:	e003      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f002 0302 	and.w	r3, r2, #2
 8007cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007cba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	d041      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d824      	bhi.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007cce:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007d21 	.word	0x08007d21
 8007cd8:	08007ced 	.word	0x08007ced
 8007cdc:	08007d03 	.word	0x08007d03
 8007ce0:	08007d21 	.word	0x08007d21
 8007ce4:	08007d21 	.word	0x08007d21
 8007ce8:	08007d21 	.word	0x08007d21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 fe43 	bl	8009980 <RCCEx_PLL2_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d00:	e00f      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d06:	3328      	adds	r3, #40	@ 0x28
 8007d08:	2101      	movs	r1, #1
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f001 feea 	bl	8009ae4 <RCCEx_PLL3_Config>
 8007d10:	4603      	mov	r3, r0
 8007d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d16:	e004      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d1e:	e000      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d2a:	4b96      	ldr	r3, [pc, #600]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2e:	f023 0107 	bic.w	r1, r3, #7
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d38:	4a92      	ldr	r2, [pc, #584]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d3a:	430b      	orrs	r3, r1
 8007d3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d3e:	e003      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f002 0304 	and.w	r3, r2, #4
 8007d54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4313      	orrs	r3, r2
 8007d66:	d044      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d70:	2b05      	cmp	r3, #5
 8007d72:	d825      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007d74:	a201      	add	r2, pc, #4	@ (adr r2, 8007d7c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7a:	bf00      	nop
 8007d7c:	08007dc9 	.word	0x08007dc9
 8007d80:	08007d95 	.word	0x08007d95
 8007d84:	08007dab 	.word	0x08007dab
 8007d88:	08007dc9 	.word	0x08007dc9
 8007d8c:	08007dc9 	.word	0x08007dc9
 8007d90:	08007dc9 	.word	0x08007dc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d98:	3308      	adds	r3, #8
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 fdef 	bl	8009980 <RCCEx_PLL2_Config>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007da8:	e00f      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dae:	3328      	adds	r3, #40	@ 0x28
 8007db0:	2101      	movs	r1, #1
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 fe96 	bl	8009ae4 <RCCEx_PLL3_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007dbe:	e004      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dc6:	e000      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd6:	f023 0107 	bic.w	r1, r3, #7
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007de2:	4a68      	ldr	r2, [pc, #416]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007de4:	430b      	orrs	r3, r1
 8007de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007de8:	e003      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f002 0320 	and.w	r3, r2, #32
 8007dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e02:	2300      	movs	r3, #0
 8007e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	d055      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e1e:	d033      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e24:	d82c      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e2a:	d02f      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e30:	d826      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e36:	d02b      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007e38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e3c:	d820      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e42:	d012      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e48:	d81a      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d022      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e52:	d115      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e58:	3308      	adds	r3, #8
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f001 fd8f 	bl	8009980 <RCCEx_PLL2_Config>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e68:	e015      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6e:	3328      	adds	r3, #40	@ 0x28
 8007e70:	2102      	movs	r1, #2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f001 fe36 	bl	8009ae4 <RCCEx_PLL3_Config>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e7e:	e00a      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e86:	e006      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e88:	bf00      	nop
 8007e8a:	e004      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e8c:	bf00      	nop
 8007e8e:	e002      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e90:	bf00      	nop
 8007e92:	e000      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10b      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e9e:	4b39      	ldr	r3, [pc, #228]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eae:	4a35      	ldr	r2, [pc, #212]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007eb4:	e003      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007eca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ed4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4313      	orrs	r3, r2
 8007edc:	d058      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ee6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007eea:	d033      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007eec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ef0:	d82c      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef6:	d02f      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007efc:	d826      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007efe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f02:	d02b      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007f04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f08:	d820      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f0e:	d012      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f14:	d81a      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d022      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f1e:	d115      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f24:	3308      	adds	r3, #8
 8007f26:	2100      	movs	r1, #0
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 fd29 	bl	8009980 <RCCEx_PLL2_Config>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f34:	e015      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3a:	3328      	adds	r3, #40	@ 0x28
 8007f3c:	2102      	movs	r1, #2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f001 fdd0 	bl	8009ae4 <RCCEx_PLL3_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f4a:	e00a      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f52:	e006      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f54:	bf00      	nop
 8007f56:	e004      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f58:	bf00      	nop
 8007f5a:	e002      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f5c:	bf00      	nop
 8007f5e:	e000      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10e      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f6a:	4b06      	ldr	r3, [pc, #24]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f6e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f7a:	4a02      	ldr	r2, [pc, #8]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f80:	e006      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007f82:	bf00      	nop
 8007f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007fa6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007faa:	460b      	mov	r3, r1
 8007fac:	4313      	orrs	r3, r2
 8007fae:	d055      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fb8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007fbc:	d033      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007fbe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007fc2:	d82c      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fc8:	d02f      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fce:	d826      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fd0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007fd4:	d02b      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007fd6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007fda:	d820      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fe0:	d012      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fe6:	d81a      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d022      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ff0:	d115      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 fcc0 	bl	8009980 <RCCEx_PLL2_Config>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008006:	e015      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800c:	3328      	adds	r3, #40	@ 0x28
 800800e:	2102      	movs	r1, #2
 8008010:	4618      	mov	r0, r3
 8008012:	f001 fd67 	bl	8009ae4 <RCCEx_PLL3_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800801c:	e00a      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008024:	e006      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008026:	bf00      	nop
 8008028:	e004      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800802a:	bf00      	nop
 800802c:	e002      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800802e:	bf00      	nop
 8008030:	e000      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10b      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800803c:	4ba1      	ldr	r3, [pc, #644]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800803e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008040:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008048:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800804c:	4a9d      	ldr	r2, [pc, #628]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800804e:	430b      	orrs	r3, r1
 8008050:	6593      	str	r3, [r2, #88]	@ 0x58
 8008052:	e003      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800805c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f002 0308 	and.w	r3, r2, #8
 8008068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800806c:	2300      	movs	r3, #0
 800806e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008072:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008076:	460b      	mov	r3, r1
 8008078:	4313      	orrs	r3, r2
 800807a:	d01e      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800807c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008088:	d10c      	bne.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	3328      	adds	r3, #40	@ 0x28
 8008090:	2102      	movs	r1, #2
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fd26 	bl	8009ae4 <RCCEx_PLL3_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80080a4:	4b87      	ldr	r3, [pc, #540]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080b4:	4a83      	ldr	r2, [pc, #524]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080b6:	430b      	orrs	r3, r1
 80080b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	f002 0310 	and.w	r3, r2, #16
 80080c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080ca:	2300      	movs	r3, #0
 80080cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80080d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80080d4:	460b      	mov	r3, r1
 80080d6:	4313      	orrs	r3, r2
 80080d8:	d01e      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080e6:	d10c      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ec:	3328      	adds	r3, #40	@ 0x28
 80080ee:	2102      	movs	r1, #2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 fcf7 	bl	8009ae4 <RCCEx_PLL3_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008102:	4b70      	ldr	r3, [pc, #448]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008106:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800810a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008112:	4a6c      	ldr	r2, [pc, #432]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008114:	430b      	orrs	r3, r1
 8008116:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008124:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008128:	2300      	movs	r3, #0
 800812a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800812e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008132:	460b      	mov	r3, r1
 8008134:	4313      	orrs	r3, r2
 8008136:	d03e      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008144:	d022      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800814a:	d81b      	bhi.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008154:	d00b      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008156:	e015      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815c:	3308      	adds	r3, #8
 800815e:	2100      	movs	r1, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f001 fc0d 	bl	8009980 <RCCEx_PLL2_Config>
 8008166:	4603      	mov	r3, r0
 8008168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800816c:	e00f      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800816e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008172:	3328      	adds	r3, #40	@ 0x28
 8008174:	2102      	movs	r1, #2
 8008176:	4618      	mov	r0, r3
 8008178:	f001 fcb4 	bl	8009ae4 <RCCEx_PLL3_Config>
 800817c:	4603      	mov	r3, r0
 800817e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008182:	e004      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800818a:	e000      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800818c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10b      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008196:	4b4b      	ldr	r3, [pc, #300]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800819a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800819e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081a6:	4a47      	ldr	r2, [pc, #284]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081a8:	430b      	orrs	r3, r1
 80081aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ac:	e003      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80081c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081c4:	2300      	movs	r3, #0
 80081c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d03b      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081de:	d01f      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80081e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081e4:	d818      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80081e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ea:	d003      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80081ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081f0:	d007      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80081f2:	e011      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081f4:	4b33      	ldr	r3, [pc, #204]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f8:	4a32      	ldr	r2, [pc, #200]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008200:	e00f      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008206:	3328      	adds	r3, #40	@ 0x28
 8008208:	2101      	movs	r1, #1
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fc6a 	bl	8009ae4 <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008216:	e004      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800821e:	e000      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800822a:	4b26      	ldr	r3, [pc, #152]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800823a:	4a22      	ldr	r2, [pc, #136]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800823c:	430b      	orrs	r3, r1
 800823e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008240:	e003      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800824a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008256:	673b      	str	r3, [r7, #112]	@ 0x70
 8008258:	2300      	movs	r3, #0
 800825a:	677b      	str	r3, [r7, #116]	@ 0x74
 800825c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008260:	460b      	mov	r3, r1
 8008262:	4313      	orrs	r3, r2
 8008264:	d034      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008274:	d007      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008276:	e011      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008278:	4b12      	ldr	r3, [pc, #72]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800827a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827c:	4a11      	ldr	r2, [pc, #68]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800827e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008284:	e00e      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828a:	3308      	adds	r3, #8
 800828c:	2102      	movs	r1, #2
 800828e:	4618      	mov	r0, r3
 8008290:	f001 fb76 	bl	8009980 <RCCEx_PLL2_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800829a:	e003      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10d      	bne.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80082ac:	4b05      	ldr	r3, [pc, #20]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ba:	4a02      	ldr	r2, [pc, #8]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082bc:	430b      	orrs	r3, r1
 80082be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082c0:	e006      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80082c2:	bf00      	nop
 80082c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80082dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082de:	2300      	movs	r3, #0
 80082e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80082e6:	460b      	mov	r3, r1
 80082e8:	4313      	orrs	r3, r2
 80082ea:	d00c      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f0:	3328      	adds	r3, #40	@ 0x28
 80082f2:	2102      	movs	r1, #2
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 fbf5 	bl	8009ae4 <RCCEx_PLL3_Config>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008312:	663b      	str	r3, [r7, #96]	@ 0x60
 8008314:	2300      	movs	r3, #0
 8008316:	667b      	str	r3, [r7, #100]	@ 0x64
 8008318:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800831c:	460b      	mov	r3, r1
 800831e:	4313      	orrs	r3, r2
 8008320:	d038      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800832a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800832e:	d018      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008330:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008334:	d811      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800833a:	d014      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800833c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008340:	d80b      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d011      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800834a:	d106      	bne.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800834c:	4bc3      	ldr	r3, [pc, #780]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800834e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008350:	4ac2      	ldr	r2, [pc, #776]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008358:	e008      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008360:	e004      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008362:	bf00      	nop
 8008364:	e002      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008366:	bf00      	nop
 8008368:	e000      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800836a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800836c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10b      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008374:	4bb9      	ldr	r3, [pc, #740]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008378:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800837c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008384:	4ab5      	ldr	r2, [pc, #724]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008386:	430b      	orrs	r3, r1
 8008388:	6553      	str	r3, [r2, #84]	@ 0x54
 800838a:	e003      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80083a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083a2:	2300      	movs	r3, #0
 80083a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80083aa:	460b      	mov	r3, r1
 80083ac:	4313      	orrs	r3, r2
 80083ae:	d009      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083b0:	4baa      	ldr	r3, [pc, #680]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80083b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083be:	4aa7      	ldr	r2, [pc, #668]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083c0:	430b      	orrs	r3, r1
 80083c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80083d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80083d2:	2300      	movs	r3, #0
 80083d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80083d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80083da:	460b      	mov	r3, r1
 80083dc:	4313      	orrs	r3, r2
 80083de:	d00a      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80083e0:	4b9e      	ldr	r3, [pc, #632]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80083e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80083f0:	4a9a      	ldr	r2, [pc, #616]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083f2:	430b      	orrs	r3, r1
 80083f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008404:	2300      	movs	r3, #0
 8008406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008408:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800840c:	460b      	mov	r3, r1
 800840e:	4313      	orrs	r3, r2
 8008410:	d009      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008412:	4b92      	ldr	r3, [pc, #584]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008416:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008420:	4a8e      	ldr	r2, [pc, #568]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008422:	430b      	orrs	r3, r1
 8008424:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008432:	643b      	str	r3, [r7, #64]	@ 0x40
 8008434:	2300      	movs	r3, #0
 8008436:	647b      	str	r3, [r7, #68]	@ 0x44
 8008438:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800843c:	460b      	mov	r3, r1
 800843e:	4313      	orrs	r3, r2
 8008440:	d00e      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008442:	4b86      	ldr	r3, [pc, #536]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	4a85      	ldr	r2, [pc, #532]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008448:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800844c:	6113      	str	r3, [r2, #16]
 800844e:	4b83      	ldr	r3, [pc, #524]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008450:	6919      	ldr	r1, [r3, #16]
 8008452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008456:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800845a:	4a80      	ldr	r2, [pc, #512]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800845c:	430b      	orrs	r3, r1
 800845e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800846c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800846e:	2300      	movs	r3, #0
 8008470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008472:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008476:	460b      	mov	r3, r1
 8008478:	4313      	orrs	r3, r2
 800847a:	d009      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800847c:	4b77      	ldr	r3, [pc, #476]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800847e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008480:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800848a:	4a74      	ldr	r2, [pc, #464]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800848c:	430b      	orrs	r3, r1
 800848e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800849c:	633b      	str	r3, [r7, #48]	@ 0x30
 800849e:	2300      	movs	r3, #0
 80084a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80084a6:	460b      	mov	r3, r1
 80084a8:	4313      	orrs	r3, r2
 80084aa:	d00a      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084ac:	4b6b      	ldr	r3, [pc, #428]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80084b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084bc:	4a67      	ldr	r2, [pc, #412]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084be:	430b      	orrs	r3, r1
 80084c0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80084c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	2100      	movs	r1, #0
 80084cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80084d8:	460b      	mov	r3, r1
 80084da:	4313      	orrs	r3, r2
 80084dc:	d011      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e2:	3308      	adds	r3, #8
 80084e4:	2100      	movs	r1, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 fa4a 	bl	8009980 <RCCEx_PLL2_Config>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	2100      	movs	r1, #0
 800850c:	6239      	str	r1, [r7, #32]
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	627b      	str	r3, [r7, #36]	@ 0x24
 8008514:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008518:	460b      	mov	r3, r1
 800851a:	4313      	orrs	r3, r2
 800851c:	d011      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800851e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008522:	3308      	adds	r3, #8
 8008524:	2101      	movs	r1, #1
 8008526:	4618      	mov	r0, r3
 8008528:	f001 fa2a 	bl	8009980 <RCCEx_PLL2_Config>
 800852c:	4603      	mov	r3, r0
 800852e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800853e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	2100      	movs	r1, #0
 800854c:	61b9      	str	r1, [r7, #24]
 800854e:	f003 0304 	and.w	r3, r3, #4
 8008552:	61fb      	str	r3, [r7, #28]
 8008554:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008558:	460b      	mov	r3, r1
 800855a:	4313      	orrs	r3, r2
 800855c:	d011      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008562:	3308      	adds	r3, #8
 8008564:	2102      	movs	r1, #2
 8008566:	4618      	mov	r0, r3
 8008568:	f001 fa0a 	bl	8009980 <RCCEx_PLL2_Config>
 800856c:	4603      	mov	r3, r0
 800856e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800857e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858a:	2100      	movs	r1, #0
 800858c:	6139      	str	r1, [r7, #16]
 800858e:	f003 0308 	and.w	r3, r3, #8
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008598:	460b      	mov	r3, r1
 800859a:	4313      	orrs	r3, r2
 800859c:	d011      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a2:	3328      	adds	r3, #40	@ 0x28
 80085a4:	2100      	movs	r1, #0
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 fa9c 	bl	8009ae4 <RCCEx_PLL3_Config>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80085b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80085c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	2100      	movs	r1, #0
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	f003 0310 	and.w	r3, r3, #16
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80085d8:	460b      	mov	r3, r1
 80085da:	4313      	orrs	r3, r2
 80085dc:	d011      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e2:	3328      	adds	r3, #40	@ 0x28
 80085e4:	2101      	movs	r1, #1
 80085e6:	4618      	mov	r0, r3
 80085e8:	f001 fa7c 	bl	8009ae4 <RCCEx_PLL3_Config>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	2100      	movs	r1, #0
 800860c:	6039      	str	r1, [r7, #0]
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	607b      	str	r3, [r7, #4]
 8008614:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008618:	460b      	mov	r3, r1
 800861a:	4313      	orrs	r3, r2
 800861c:	d011      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800861e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008622:	3328      	adds	r3, #40	@ 0x28
 8008624:	2102      	movs	r1, #2
 8008626:	4618      	mov	r0, r3
 8008628:	f001 fa5c 	bl	8009ae4 <RCCEx_PLL3_Config>
 800862c:	4603      	mov	r3, r0
 800862e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800863e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008642:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	e000      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
}
 8008650:	4618      	mov	r0, r3
 8008652:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008656:	46bd      	mov	sp, r7
 8008658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800865c:	58024400 	.word	0x58024400

08008660 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b090      	sub	sp, #64	@ 0x40
 8008664:	af00      	add	r7, sp, #0
 8008666:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800866a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800866e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008672:	430b      	orrs	r3, r1
 8008674:	f040 8094 	bne.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008678:	4b9e      	ldr	r3, [pc, #632]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800867a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	2b04      	cmp	r3, #4
 8008686:	f200 8087 	bhi.w	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800868a:	a201      	add	r2, pc, #4	@ (adr r2, 8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	080086a5 	.word	0x080086a5
 8008694:	080086cd 	.word	0x080086cd
 8008698:	080086f5 	.word	0x080086f5
 800869c:	08008791 	.word	0x08008791
 80086a0:	0800871d 	.word	0x0800871d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086a4:	4b93      	ldr	r3, [pc, #588]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086b0:	d108      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 f810 	bl	80096dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c0:	f000 bd45 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c8:	f000 bd41 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086cc:	4b89      	ldr	r3, [pc, #548]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086d8:	d108      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086da:	f107 0318 	add.w	r3, r7, #24
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fd54 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086e8:	f000 bd31 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f0:	f000 bd2d 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086f4:	4b7f      	ldr	r3, [pc, #508]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008700:	d108      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008702:	f107 030c 	add.w	r3, r7, #12
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fe94 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008710:	f000 bd1d 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008718:	f000 bd19 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800871c:	4b75      	ldr	r3, [pc, #468]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800871e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008720:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008724:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008726:	4b73      	ldr	r3, [pc, #460]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b04      	cmp	r3, #4
 8008730:	d10c      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008734:	2b00      	cmp	r3, #0
 8008736:	d109      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008738:	4b6e      	ldr	r3, [pc, #440]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	08db      	lsrs	r3, r3, #3
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	4a6d      	ldr	r2, [pc, #436]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008744:	fa22 f303 	lsr.w	r3, r2, r3
 8008748:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800874a:	e01f      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800874c:	4b69      	ldr	r3, [pc, #420]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008758:	d106      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800875a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008760:	d102      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008762:	4b66      	ldr	r3, [pc, #408]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008766:	e011      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008768:	4b62      	ldr	r3, [pc, #392]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008770:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008774:	d106      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800877c:	d102      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800877e:	4b60      	ldr	r3, [pc, #384]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008780:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008782:	e003      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008788:	f000 bce1 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800878c:	f000 bcdf 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008790:	4b5c      	ldr	r3, [pc, #368]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008794:	f000 bcdb 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800879c:	f000 bcd7 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80087a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80087a8:	430b      	orrs	r3, r1
 80087aa:	f040 80ad 	bne.w	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80087ae:	4b51      	ldr	r3, [pc, #324]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80087b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80087b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087be:	d056      	beq.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80087c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087c6:	f200 8090 	bhi.w	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80087ce:	f000 8088 	beq.w	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80087d6:	f200 8088 	bhi.w	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	2b80      	cmp	r3, #128	@ 0x80
 80087de:	d032      	beq.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80087e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e2:	2b80      	cmp	r3, #128	@ 0x80
 80087e4:	f200 8081 	bhi.w	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80087e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f0:	2b40      	cmp	r3, #64	@ 0x40
 80087f2:	d014      	beq.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80087f4:	e079      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087f6:	4b3f      	ldr	r3, [pc, #252]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008802:	d108      	bne.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008808:	4618      	mov	r0, r3
 800880a:	f000 ff67 	bl	80096dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800880e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008812:	f000 bc9c 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881a:	f000 bc98 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800881e:	4b35      	ldr	r3, [pc, #212]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800882a:	d108      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800882c:	f107 0318 	add.w	r3, r7, #24
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fcab 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800883a:	f000 bc88 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008842:	f000 bc84 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008846:	4b2b      	ldr	r3, [pc, #172]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800884e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008852:	d108      	bne.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008854:	f107 030c 	add.w	r3, r7, #12
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fdeb 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008862:	f000 bc74 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800886a:	f000 bc70 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800886e:	4b21      	ldr	r3, [pc, #132]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008872:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008876:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008878:	4b1e      	ldr	r3, [pc, #120]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b04      	cmp	r3, #4
 8008882:	d10c      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800888a:	4b1a      	ldr	r3, [pc, #104]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	08db      	lsrs	r3, r3, #3
 8008890:	f003 0303 	and.w	r3, r3, #3
 8008894:	4a18      	ldr	r2, [pc, #96]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008896:	fa22 f303 	lsr.w	r3, r2, r3
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800889c:	e01f      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800889e:	4b15      	ldr	r3, [pc, #84]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088aa:	d106      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80088ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088b2:	d102      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088b4:	4b11      	ldr	r3, [pc, #68]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80088b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088b8:	e011      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088ba:	4b0e      	ldr	r3, [pc, #56]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088c6:	d106      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80088c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088ce:	d102      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d4:	e003      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088da:	f000 bc38 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088de:	f000 bc36 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088e2:	4b08      	ldr	r3, [pc, #32]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e6:	f000 bc32 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ee:	f000 bc2e 	b.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088f2:	bf00      	nop
 80088f4:	58024400 	.word	0x58024400
 80088f8:	03d09000 	.word	0x03d09000
 80088fc:	003d0900 	.word	0x003d0900
 8008900:	017d7840 	.word	0x017d7840
 8008904:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800890c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008910:	430b      	orrs	r3, r1
 8008912:	f040 809c 	bne.w	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008916:	4b9e      	ldr	r3, [pc, #632]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800891a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800891e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008926:	d054      	beq.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800892e:	f200 808b 	bhi.w	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008938:	f000 8083 	beq.w	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800893c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008942:	f200 8081 	bhi.w	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008948:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800894c:	d02f      	beq.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008954:	d878      	bhi.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008958:	2b00      	cmp	r3, #0
 800895a:	d004      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800895c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008962:	d012      	beq.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008964:	e070      	b.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008966:	4b8a      	ldr	r3, [pc, #552]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800896e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008972:	d107      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008978:	4618      	mov	r0, r3
 800897a:	f000 feaf 	bl	80096dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800897e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008982:	e3e4      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008988:	e3e1      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800898a:	4b81      	ldr	r3, [pc, #516]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008996:	d107      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008998:	f107 0318 	add.w	r3, r7, #24
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fbf5 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089a6:	e3d2      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ac:	e3cf      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089ae:	4b78      	ldr	r3, [pc, #480]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ba:	d107      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089bc:	f107 030c 	add.w	r3, r7, #12
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fd37 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ca:	e3c0      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089d0:	e3bd      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089d2:	4b6f      	ldr	r3, [pc, #444]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089dc:	4b6c      	ldr	r3, [pc, #432]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	d10c      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80089e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d109      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089ee:	4b68      	ldr	r3, [pc, #416]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	08db      	lsrs	r3, r3, #3
 80089f4:	f003 0303 	and.w	r3, r3, #3
 80089f8:	4a66      	ldr	r2, [pc, #408]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80089fa:	fa22 f303 	lsr.w	r3, r2, r3
 80089fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a00:	e01e      	b.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a02:	4b63      	ldr	r3, [pc, #396]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a0e:	d106      	bne.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a16:	d102      	bne.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a18:	4b5f      	ldr	r3, [pc, #380]	@ (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a1c:	e010      	b.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a2a:	d106      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a32:	d102      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a34:	4b59      	ldr	r3, [pc, #356]	@ (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a38:	e002      	b.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a3e:	e386      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a40:	e385      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a42:	4b57      	ldr	r3, [pc, #348]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a46:	e382      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a4c:	e37f      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a52:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008a56:	430b      	orrs	r3, r1
 8008a58:	f040 80a7 	bne.w	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a60:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008a64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a6c:	d055      	beq.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a74:	f200 8096 	bhi.w	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a7e:	f000 8084 	beq.w	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a88:	f200 808c 	bhi.w	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a92:	d030      	beq.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a9a:	f200 8083 	bhi.w	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d004      	beq.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008aaa:	d012      	beq.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008aac:	e07a      	b.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008aae:	4b38      	ldr	r3, [pc, #224]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ab6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008aba:	d107      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fe0b 	bl	80096dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aca:	e340      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad0:	e33d      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ade:	d107      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ae0:	f107 0318 	add.w	r3, r7, #24
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fb51 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aee:	e32e      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af4:	e32b      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008af6:	4b26      	ldr	r3, [pc, #152]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b02:	d107      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b04:	f107 030c 	add.w	r3, r7, #12
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 fc93 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b12:	e31c      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b18:	e319      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b24:	4b1a      	ldr	r3, [pc, #104]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d10c      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d109      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b36:	4b16      	ldr	r3, [pc, #88]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	08db      	lsrs	r3, r3, #3
 8008b3c:	f003 0303 	and.w	r3, r3, #3
 8008b40:	4a14      	ldr	r2, [pc, #80]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b42:	fa22 f303 	lsr.w	r3, r2, r3
 8008b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b48:	e01e      	b.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b4a:	4b11      	ldr	r3, [pc, #68]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b56:	d106      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b5e:	d102      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b60:	4b0d      	ldr	r3, [pc, #52]	@ (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b64:	e010      	b.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b66:	4b0a      	ldr	r3, [pc, #40]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b72:	d106      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b7a:	d102      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b7c:	4b07      	ldr	r3, [pc, #28]	@ (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b80:	e002      	b.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b86:	e2e2      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b88:	e2e1      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b8a:	4b05      	ldr	r3, [pc, #20]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b8e:	e2de      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b90:	58024400 	.word	0x58024400
 8008b94:	03d09000 	.word	0x03d09000
 8008b98:	003d0900 	.word	0x003d0900
 8008b9c:	017d7840 	.word	0x017d7840
 8008ba0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba8:	e2d1      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	f040 809c 	bne.w	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008bb8:	4b93      	ldr	r3, [pc, #588]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bbc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008bc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bc8:	d054      	beq.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bd0:	f200 808b 	bhi.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008bda:	f000 8083 	beq.w	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008be4:	f200 8081 	bhi.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bee:	d02f      	beq.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bf6:	d878      	bhi.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d004      	beq.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c04:	d012      	beq.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008c06:	e070      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c08:	4b7f      	ldr	r3, [pc, #508]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c14:	d107      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fd5e 	bl	80096dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c24:	e293      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c2a:	e290      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c2c:	4b76      	ldr	r3, [pc, #472]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c38:	d107      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c3a:	f107 0318 	add.w	r3, r7, #24
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 faa4 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c48:	e281      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c4e:	e27e      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c50:	4b6d      	ldr	r3, [pc, #436]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c5c:	d107      	bne.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c5e:	f107 030c 	add.w	r3, r7, #12
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fbe6 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c6c:	e26f      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c72:	e26c      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c74:	4b64      	ldr	r3, [pc, #400]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c7c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c7e:	4b62      	ldr	r3, [pc, #392]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d10c      	bne.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d109      	bne.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c90:	4b5d      	ldr	r3, [pc, #372]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	08db      	lsrs	r3, r3, #3
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	4a5c      	ldr	r2, [pc, #368]	@ (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ca2:	e01e      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ca4:	4b58      	ldr	r3, [pc, #352]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cb0:	d106      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cb8:	d102      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008cba:	4b55      	ldr	r3, [pc, #340]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cbe:	e010      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cc0:	4b51      	ldr	r3, [pc, #324]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ccc:	d106      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cd4:	d102      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cda:	e002      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ce0:	e235      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ce2:	e234      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ce4:	4b4c      	ldr	r3, [pc, #304]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce8:	e231      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cee:	e22e      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008cf8:	430b      	orrs	r3, r1
 8008cfa:	f040 808f 	bne.w	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008cfe:	4b42      	ldr	r3, [pc, #264]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d02:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008d06:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d0e:	d06b      	beq.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d16:	d874      	bhi.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d1e:	d056      	beq.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d26:	d86c      	bhi.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d2e:	d03b      	beq.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d36:	d864      	bhi.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d3e:	d021      	beq.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d46:	d85c      	bhi.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d004      	beq.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d54:	d004      	beq.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008d56:	e054      	b.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008d58:	f7fe fa30 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
 8008d5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d5e:	e1f6      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d60:	4b29      	ldr	r3, [pc, #164]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d6c:	d107      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d6e:	f107 0318 	add.w	r3, r7, #24
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fa0a 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d7c:	e1e7      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d82:	e1e4      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d84:	4b20      	ldr	r3, [pc, #128]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d90:	d107      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d92:	f107 030c 	add.w	r3, r7, #12
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fb4c 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da0:	e1d5      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da6:	e1d2      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008da8:	4b17      	ldr	r3, [pc, #92]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d109      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008db4:	4b14      	ldr	r3, [pc, #80]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	08db      	lsrs	r3, r3, #3
 8008dba:	f003 0303 	and.w	r3, r3, #3
 8008dbe:	4a13      	ldr	r2, [pc, #76]	@ (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dc6:	e1c2      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dcc:	e1bf      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008dce:	4b0e      	ldr	r3, [pc, #56]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dda:	d102      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008de0:	e1b5      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de6:	e1b2      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008de8:	4b07      	ldr	r3, [pc, #28]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008df4:	d102      	bne.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008df6:	4b07      	ldr	r3, [pc, #28]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dfa:	e1a8      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e00:	e1a5      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e06:	e1a2      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	03d09000 	.word	0x03d09000
 8008e10:	003d0900 	.word	0x003d0900
 8008e14:	017d7840 	.word	0x017d7840
 8008e18:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e20:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008e24:	430b      	orrs	r3, r1
 8008e26:	d173      	bne.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008e28:	4b9c      	ldr	r3, [pc, #624]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008e30:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e38:	d02f      	beq.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e40:	d863      	bhi.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e4e:	d012      	beq.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008e50:	e05b      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e52:	4b92      	ldr	r3, [pc, #584]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e5e:	d107      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e60:	f107 0318 	add.w	r3, r7, #24
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 f991 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e6e:	e16e      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e74:	e16b      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e76:	4b89      	ldr	r3, [pc, #548]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e82:	d107      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e84:	f107 030c 	add.w	r3, r7, #12
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fad3 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e92:	e15c      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e98:	e159      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e9a:	4b80      	ldr	r3, [pc, #512]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ea2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ea4:	4b7d      	ldr	r3, [pc, #500]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d10c      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eb6:	4b79      	ldr	r3, [pc, #484]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	08db      	lsrs	r3, r3, #3
 8008ebc:	f003 0303 	and.w	r3, r3, #3
 8008ec0:	4a77      	ldr	r2, [pc, #476]	@ (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ec8:	e01e      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008eca:	4b74      	ldr	r3, [pc, #464]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ed6:	d106      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ede:	d102      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ee0:	4b70      	ldr	r3, [pc, #448]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ee4:	e010      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ef2:	d106      	bne.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008efa:	d102      	bne.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008efc:	4b6a      	ldr	r3, [pc, #424]	@ (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f00:	e002      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f06:	e122      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f08:	e121      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f0e:	e11e      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f14:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008f18:	430b      	orrs	r3, r1
 8008f1a:	d133      	bne.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008f1c:	4b5f      	ldr	r3, [pc, #380]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f24:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f32:	d012      	beq.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008f34:	e023      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f36:	4b59      	ldr	r3, [pc, #356]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f42:	d107      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fbc7 	bl	80096dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f52:	e0fc      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f54:	2300      	movs	r3, #0
 8008f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f58:	e0f9      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f5a:	4b50      	ldr	r3, [pc, #320]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f66:	d107      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f68:	f107 0318 	add.w	r3, r7, #24
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f90d 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f76:	e0ea      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f7c:	e0e7      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f82:	e0e4      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f88:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008f8c:	430b      	orrs	r3, r1
 8008f8e:	f040 808d 	bne.w	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008f92:	4b42      	ldr	r3, [pc, #264]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f96:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008f9a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008fa2:	d06b      	beq.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008faa:	d874      	bhi.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb2:	d056      	beq.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fba:	d86c      	bhi.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008fc2:	d03b      	beq.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008fca:	d864      	bhi.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fd2:	d021      	beq.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fda:	d85c      	bhi.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d004      	beq.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fe8:	d004      	beq.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008fea:	e054      	b.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008fec:	f000 f8b8 	bl	8009160 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ff0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ff2:	e0ac      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ff4:	4b29      	ldr	r3, [pc, #164]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ffc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009000:	d107      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009002:	f107 0318 	add.w	r3, r7, #24
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f8c0 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009010:	e09d      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009016:	e09a      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009018:	4b20      	ldr	r3, [pc, #128]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009024:	d107      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009026:	f107 030c 	add.w	r3, r7, #12
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fa02 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009034:	e08b      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800903a:	e088      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800903c:	4b17      	ldr	r3, [pc, #92]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b04      	cmp	r3, #4
 8009046:	d109      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009048:	4b14      	ldr	r3, [pc, #80]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	08db      	lsrs	r3, r3, #3
 800904e:	f003 0303 	and.w	r3, r3, #3
 8009052:	4a13      	ldr	r2, [pc, #76]	@ (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009054:	fa22 f303 	lsr.w	r3, r2, r3
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800905a:	e078      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009060:	e075      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009062:	4b0e      	ldr	r3, [pc, #56]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800906a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800906e:	d102      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009070:	4b0c      	ldr	r3, [pc, #48]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009074:	e06b      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907a:	e068      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800907c:	4b07      	ldr	r3, [pc, #28]	@ (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009088:	d102      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800908a:	4b07      	ldr	r3, [pc, #28]	@ (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800908c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800908e:	e05e      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009094:	e05b      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800909a:	e058      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800909c:	58024400 	.word	0x58024400
 80090a0:	03d09000 	.word	0x03d09000
 80090a4:	003d0900 	.word	0x003d0900
 80090a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80090ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80090b4:	430b      	orrs	r3, r1
 80090b6:	d148      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80090b8:	4b27      	ldr	r3, [pc, #156]	@ (8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80090ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80090c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80090c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090c8:	d02a      	beq.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80090ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090d0:	d838      	bhi.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80090d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d004      	beq.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80090d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090de:	d00d      	beq.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80090e0:	e030      	b.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80090e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090ee:	d102      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80090f0:	4b1a      	ldr	r3, [pc, #104]	@ (800915c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80090f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090f4:	e02b      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090fa:	e028      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090fc:	4b16      	ldr	r3, [pc, #88]	@ (8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009104:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009108:	d107      	bne.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800910a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fae4 	bl	80096dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009118:	e019      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800911e:	e016      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009120:	4b0d      	ldr	r3, [pc, #52]	@ (8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009128:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800912c:	d107      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800912e:	f107 0318 	add.w	r3, r7, #24
 8009132:	4618      	mov	r0, r3
 8009134:	f000 f82a 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800913c:	e007      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009142:	e004      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009148:	e001      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800914e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009150:	4618      	mov	r0, r3
 8009152:	3740      	adds	r7, #64	@ 0x40
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	58024400 	.word	0x58024400
 800915c:	017d7840 	.word	0x017d7840

08009160 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009164:	f7fd fffa 	bl	800715c <HAL_RCC_GetHCLKFreq>
 8009168:	4602      	mov	r2, r0
 800916a:	4b06      	ldr	r3, [pc, #24]	@ (8009184 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	091b      	lsrs	r3, r3, #4
 8009170:	f003 0307 	and.w	r3, r3, #7
 8009174:	4904      	ldr	r1, [pc, #16]	@ (8009188 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009176:	5ccb      	ldrb	r3, [r1, r3]
 8009178:	f003 031f 	and.w	r3, r3, #31
 800917c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009180:	4618      	mov	r0, r3
 8009182:	bd80      	pop	{r7, pc}
 8009184:	58024400 	.word	0x58024400
 8009188:	08017ddc 	.word	0x08017ddc

0800918c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800918c:	b480      	push	{r7}
 800918e:	b089      	sub	sp, #36	@ 0x24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009194:	4ba1      	ldr	r3, [pc, #644]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009198:	f003 0303 	and.w	r3, r3, #3
 800919c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800919e:	4b9f      	ldr	r3, [pc, #636]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a2:	0b1b      	lsrs	r3, r3, #12
 80091a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80091aa:	4b9c      	ldr	r3, [pc, #624]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ae:	091b      	lsrs	r3, r3, #4
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80091b6:	4b99      	ldr	r3, [pc, #612]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ba:	08db      	lsrs	r3, r3, #3
 80091bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	fb02 f303 	mul.w	r3, r2, r3
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 8111 	beq.w	80093fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	2b02      	cmp	r3, #2
 80091de:	f000 8083 	beq.w	80092e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	f200 80a1 	bhi.w	800932c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d003      	beq.n	80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d056      	beq.n	80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80091f6:	e099      	b.n	800932c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091f8:	4b88      	ldr	r3, [pc, #544]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	d02d      	beq.n	8009260 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009204:	4b85      	ldr	r3, [pc, #532]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	08db      	lsrs	r3, r3, #3
 800920a:	f003 0303 	and.w	r3, r3, #3
 800920e:	4a84      	ldr	r2, [pc, #528]	@ (8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009210:	fa22 f303 	lsr.w	r3, r2, r3
 8009214:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	ee07 3a90 	vmov	s15, r3
 800921c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800922e:	4b7b      	ldr	r3, [pc, #492]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009242:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800924a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800924e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800925e:	e087      	b.n	8009370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800926e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009272:	4b6a      	ldr	r3, [pc, #424]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800927a:	ee07 3a90 	vmov	s15, r3
 800927e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009282:	ed97 6a03 	vldr	s12, [r7, #12]
 8009286:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800928a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800928e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092a2:	e065      	b.n	8009370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800942c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b6:	4b59      	ldr	r3, [pc, #356]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092e6:	e043      	b.n	8009370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	ee07 3a90 	vmov	s15, r3
 80092ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80092f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fa:	4b48      	ldr	r3, [pc, #288]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930a:	ed97 6a03 	vldr	s12, [r7, #12]
 800930e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800931e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800932a:	e021      	b.n	8009370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009336:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800942c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800933a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933e:	4b37      	ldr	r3, [pc, #220]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009352:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800936e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009370:	4b2a      	ldr	r3, [pc, #168]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009374:	0a5b      	lsrs	r3, r3, #9
 8009376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800938a:	edd7 6a07 	vldr	s13, [r7, #28]
 800938e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009396:	ee17 2a90 	vmov	r2, s15
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800939e:	4b1f      	ldr	r3, [pc, #124]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a2:	0c1b      	lsrs	r3, r3, #16
 80093a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093a8:	ee07 3a90 	vmov	s15, r3
 80093ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80093bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093c4:	ee17 2a90 	vmov	r2, s15
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80093cc:	4b13      	ldr	r3, [pc, #76]	@ (800941c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d0:	0e1b      	lsrs	r3, r3, #24
 80093d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093f2:	ee17 2a90 	vmov	r2, s15
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80093fa:	e008      	b.n	800940e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	609a      	str	r2, [r3, #8]
}
 800940e:	bf00      	nop
 8009410:	3724      	adds	r7, #36	@ 0x24
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	58024400 	.word	0x58024400
 8009420:	03d09000 	.word	0x03d09000
 8009424:	46000000 	.word	0x46000000
 8009428:	4c742400 	.word	0x4c742400
 800942c:	4a742400 	.word	0x4a742400
 8009430:	4bbebc20 	.word	0x4bbebc20

08009434 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009434:	b480      	push	{r7}
 8009436:	b089      	sub	sp, #36	@ 0x24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800943c:	4ba1      	ldr	r3, [pc, #644]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800943e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009440:	f003 0303 	and.w	r3, r3, #3
 8009444:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009446:	4b9f      	ldr	r3, [pc, #636]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800944a:	0d1b      	lsrs	r3, r3, #20
 800944c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009450:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009452:	4b9c      	ldr	r3, [pc, #624]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009456:	0a1b      	lsrs	r3, r3, #8
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800945e:	4b99      	ldr	r3, [pc, #612]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009462:	08db      	lsrs	r3, r3, #3
 8009464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	fb02 f303 	mul.w	r3, r2, r3
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 8111 	beq.w	80096a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	2b02      	cmp	r3, #2
 8009486:	f000 8083 	beq.w	8009590 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	2b02      	cmp	r3, #2
 800948e:	f200 80a1 	bhi.w	80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d003      	beq.n	80094a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d056      	beq.n	800954c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800949e:	e099      	b.n	80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094a0:	4b88      	ldr	r3, [pc, #544]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0320 	and.w	r3, r3, #32
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d02d      	beq.n	8009508 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094ac:	4b85      	ldr	r3, [pc, #532]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	08db      	lsrs	r3, r3, #3
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	4a84      	ldr	r2, [pc, #528]	@ (80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80094b8:	fa22 f303 	lsr.w	r3, r2, r3
 80094bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	ee07 3a90 	vmov	s15, r3
 80094c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094d6:	4b7b      	ldr	r3, [pc, #492]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80096cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009502:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009506:	e087      	b.n	8009618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009512:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800951a:	4b6a      	ldr	r3, [pc, #424]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800951c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800951e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952a:	ed97 6a03 	vldr	s12, [r7, #12]
 800952e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80096cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800953a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800953e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800954a:	e065      	b.n	8009618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009556:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80096d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800955a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800955e:	4b59      	ldr	r3, [pc, #356]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009572:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80096cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800957a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800957e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800958a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800958e:	e043      	b.n	8009618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	ee07 3a90 	vmov	s15, r3
 8009596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800959e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a2:	4b48      	ldr	r3, [pc, #288]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80096cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095d2:	e021      	b.n	8009618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	ee07 3a90 	vmov	s15, r3
 80095da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80096d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095e6:	4b37      	ldr	r3, [pc, #220]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ee:	ee07 3a90 	vmov	s15, r3
 80095f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80096cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800960a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800960e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009616:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009618:	4b2a      	ldr	r3, [pc, #168]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800961a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961c:	0a5b      	lsrs	r3, r3, #9
 800961e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800962e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009632:	edd7 6a07 	vldr	s13, [r7, #28]
 8009636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800963a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800963e:	ee17 2a90 	vmov	r2, s15
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009646:	4b1f      	ldr	r3, [pc, #124]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964a:	0c1b      	lsrs	r3, r3, #16
 800964c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009650:	ee07 3a90 	vmov	s15, r3
 8009654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009658:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800965c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009660:	edd7 6a07 	vldr	s13, [r7, #28]
 8009664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800966c:	ee17 2a90 	vmov	r2, s15
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009674:	4b13      	ldr	r3, [pc, #76]	@ (80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009678:	0e1b      	lsrs	r3, r3, #24
 800967a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009686:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800968a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800968e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800969a:	ee17 2a90 	vmov	r2, s15
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80096a2:	e008      	b.n	80096b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	609a      	str	r2, [r3, #8]
}
 80096b6:	bf00      	nop
 80096b8:	3724      	adds	r7, #36	@ 0x24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	58024400 	.word	0x58024400
 80096c8:	03d09000 	.word	0x03d09000
 80096cc:	46000000 	.word	0x46000000
 80096d0:	4c742400 	.word	0x4c742400
 80096d4:	4a742400 	.word	0x4a742400
 80096d8:	4bbebc20 	.word	0x4bbebc20

080096dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80096dc:	b480      	push	{r7}
 80096de:	b089      	sub	sp, #36	@ 0x24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096e4:	4ba0      	ldr	r3, [pc, #640]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e8:	f003 0303 	and.w	r3, r3, #3
 80096ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80096ee:	4b9e      	ldr	r3, [pc, #632]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f2:	091b      	lsrs	r3, r3, #4
 80096f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80096fa:	4b9b      	ldr	r3, [pc, #620]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009704:	4b98      	ldr	r3, [pc, #608]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009708:	08db      	lsrs	r3, r3, #3
 800970a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	fb02 f303 	mul.w	r3, r2, r3
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 8111 	beq.w	800994a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	2b02      	cmp	r3, #2
 800972c:	f000 8083 	beq.w	8009836 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	2b02      	cmp	r3, #2
 8009734:	f200 80a1 	bhi.w	800987a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d056      	beq.n	80097f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009744:	e099      	b.n	800987a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009746:	4b88      	ldr	r3, [pc, #544]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0320 	and.w	r3, r3, #32
 800974e:	2b00      	cmp	r3, #0
 8009750:	d02d      	beq.n	80097ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009752:	4b85      	ldr	r3, [pc, #532]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	08db      	lsrs	r3, r3, #3
 8009758:	f003 0303 	and.w	r3, r3, #3
 800975c:	4a83      	ldr	r2, [pc, #524]	@ (800996c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800975e:	fa22 f303 	lsr.w	r3, r2, r3
 8009762:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	ee07 3a90 	vmov	s15, r3
 8009774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800977c:	4b7a      	ldr	r3, [pc, #488]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800977e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009784:	ee07 3a90 	vmov	s15, r3
 8009788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800978c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009790:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800979c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80097ac:	e087      	b.n	80098be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	ee07 3a90 	vmov	s15, r3
 80097b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80097bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097c0:	4b69      	ldr	r3, [pc, #420]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c8:	ee07 3a90 	vmov	s15, r3
 80097cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80097d4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097f0:	e065      	b.n	80098be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	ee07 3a90 	vmov	s15, r3
 80097f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009978 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009804:	4b58      	ldr	r3, [pc, #352]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800980c:	ee07 3a90 	vmov	s15, r3
 8009810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009814:	ed97 6a03 	vldr	s12, [r7, #12]
 8009818:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800981c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009824:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800982c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009830:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009834:	e043      	b.n	80098be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	ee07 3a90 	vmov	s15, r3
 800983c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009840:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800997c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009848:	4b47      	ldr	r3, [pc, #284]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800984a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800984c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009850:	ee07 3a90 	vmov	s15, r3
 8009854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009858:	ed97 6a03 	vldr	s12, [r7, #12]
 800985c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009860:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009868:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800986c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009874:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009878:	e021      	b.n	80098be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	ee07 3a90 	vmov	s15, r3
 8009880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009884:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009974 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800988c:	4b36      	ldr	r3, [pc, #216]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800988e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009894:	ee07 3a90 	vmov	s15, r3
 8009898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800989c:	ed97 6a03 	vldr	s12, [r7, #12]
 80098a0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80098be:	4b2a      	ldr	r3, [pc, #168]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c2:	0a5b      	lsrs	r3, r3, #9
 80098c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098c8:	ee07 3a90 	vmov	s15, r3
 80098cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80098dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098e4:	ee17 2a90 	vmov	r2, s15
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80098ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f0:	0c1b      	lsrs	r3, r3, #16
 80098f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098f6:	ee07 3a90 	vmov	s15, r3
 80098fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009906:	edd7 6a07 	vldr	s13, [r7, #28]
 800990a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800990e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009912:	ee17 2a90 	vmov	r2, s15
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800991a:	4b13      	ldr	r3, [pc, #76]	@ (8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800991c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800991e:	0e1b      	lsrs	r3, r3, #24
 8009920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009924:	ee07 3a90 	vmov	s15, r3
 8009928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009930:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009934:	edd7 6a07 	vldr	s13, [r7, #28]
 8009938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800993c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009940:	ee17 2a90 	vmov	r2, s15
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009948:	e008      	b.n	800995c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	609a      	str	r2, [r3, #8]
}
 800995c:	bf00      	nop
 800995e:	3724      	adds	r7, #36	@ 0x24
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	58024400 	.word	0x58024400
 800996c:	03d09000 	.word	0x03d09000
 8009970:	46000000 	.word	0x46000000
 8009974:	4c742400 	.word	0x4c742400
 8009978:	4a742400 	.word	0x4a742400
 800997c:	4bbebc20 	.word	0x4bbebc20

08009980 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800998e:	4b53      	ldr	r3, [pc, #332]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009992:	f003 0303 	and.w	r3, r3, #3
 8009996:	2b03      	cmp	r3, #3
 8009998:	d101      	bne.n	800999e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e099      	b.n	8009ad2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800999e:	4b4f      	ldr	r3, [pc, #316]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a4e      	ldr	r2, [pc, #312]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 80099a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099aa:	f7f9 fcab 	bl	8003304 <HAL_GetTick>
 80099ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099b0:	e008      	b.n	80099c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099b2:	f7f9 fca7 	bl	8003304 <HAL_GetTick>
 80099b6:	4602      	mov	r2, r0
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d901      	bls.n	80099c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e086      	b.n	8009ad2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099c4:	4b45      	ldr	r3, [pc, #276]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1f0      	bne.n	80099b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80099d0:	4b42      	ldr	r3, [pc, #264]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 80099d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	031b      	lsls	r3, r3, #12
 80099de:	493f      	ldr	r1, [pc, #252]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 80099e0:	4313      	orrs	r3, r2
 80099e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	025b      	lsls	r3, r3, #9
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	431a      	orrs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	041b      	lsls	r3, r3, #16
 8009a02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a06:	431a      	orrs	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	061b      	lsls	r3, r3, #24
 8009a10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a14:	4931      	ldr	r1, [pc, #196]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a1a:	4b30      	ldr	r3, [pc, #192]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	492d      	ldr	r1, [pc, #180]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a30:	f023 0220 	bic.w	r2, r3, #32
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	4928      	ldr	r1, [pc, #160]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a3e:	4b27      	ldr	r3, [pc, #156]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a42:	4a26      	ldr	r2, [pc, #152]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a44:	f023 0310 	bic.w	r3, r3, #16
 8009a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a4a:	4b24      	ldr	r3, [pc, #144]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a4e:	4b24      	ldr	r3, [pc, #144]	@ (8009ae0 <RCCEx_PLL2_Config+0x160>)
 8009a50:	4013      	ands	r3, r2
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	69d2      	ldr	r2, [r2, #28]
 8009a56:	00d2      	lsls	r2, r2, #3
 8009a58:	4920      	ldr	r1, [pc, #128]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a62:	4a1e      	ldr	r2, [pc, #120]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a64:	f043 0310 	orr.w	r3, r3, #16
 8009a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d106      	bne.n	8009a7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a70:	4b1a      	ldr	r3, [pc, #104]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a74:	4a19      	ldr	r2, [pc, #100]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a7c:	e00f      	b.n	8009a9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d106      	bne.n	8009a92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a84:	4b15      	ldr	r3, [pc, #84]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a88:	4a14      	ldr	r2, [pc, #80]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a90:	e005      	b.n	8009a9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a92:	4b12      	ldr	r3, [pc, #72]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a96:	4a11      	ldr	r2, [pc, #68]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009a98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009aa4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aaa:	f7f9 fc2b 	bl	8003304 <HAL_GetTick>
 8009aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ab0:	e008      	b.n	8009ac4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ab2:	f7f9 fc27 	bl	8003304 <HAL_GetTick>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d901      	bls.n	8009ac4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e006      	b.n	8009ad2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ac4:	4b05      	ldr	r3, [pc, #20]	@ (8009adc <RCCEx_PLL2_Config+0x15c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d0f0      	beq.n	8009ab2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	58024400 	.word	0x58024400
 8009ae0:	ffff0007 	.word	0xffff0007

08009ae4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009af2:	4b53      	ldr	r3, [pc, #332]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af6:	f003 0303 	and.w	r3, r3, #3
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	d101      	bne.n	8009b02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e099      	b.n	8009c36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b02:	4b4f      	ldr	r3, [pc, #316]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a4e      	ldr	r2, [pc, #312]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b0e:	f7f9 fbf9 	bl	8003304 <HAL_GetTick>
 8009b12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b14:	e008      	b.n	8009b28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b16:	f7f9 fbf5 	bl	8003304 <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d901      	bls.n	8009b28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e086      	b.n	8009c36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b28:	4b45      	ldr	r3, [pc, #276]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1f0      	bne.n	8009b16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b34:	4b42      	ldr	r3, [pc, #264]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	051b      	lsls	r3, r3, #20
 8009b42:	493f      	ldr	r1, [pc, #252]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	3b01      	subs	r3, #1
 8009b58:	025b      	lsls	r3, r3, #9
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	3b01      	subs	r3, #1
 8009b64:	041b      	lsls	r3, r3, #16
 8009b66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	3b01      	subs	r3, #1
 8009b72:	061b      	lsls	r3, r3, #24
 8009b74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b78:	4931      	ldr	r1, [pc, #196]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b7e:	4b30      	ldr	r3, [pc, #192]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	492d      	ldr	r1, [pc, #180]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b90:	4b2b      	ldr	r3, [pc, #172]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	4928      	ldr	r1, [pc, #160]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ba2:	4b27      	ldr	r3, [pc, #156]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba6:	4a26      	ldr	r2, [pc, #152]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009bae:	4b24      	ldr	r3, [pc, #144]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bb2:	4b24      	ldr	r3, [pc, #144]	@ (8009c44 <RCCEx_PLL3_Config+0x160>)
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	69d2      	ldr	r2, [r2, #28]
 8009bba:	00d2      	lsls	r2, r2, #3
 8009bbc:	4920      	ldr	r1, [pc, #128]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d106      	bne.n	8009be2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd8:	4a19      	ldr	r2, [pc, #100]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009bda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009bde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009be0:	e00f      	b.n	8009c02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d106      	bne.n	8009bf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009be8:	4b15      	ldr	r3, [pc, #84]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bec:	4a14      	ldr	r2, [pc, #80]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009bee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009bf4:	e005      	b.n	8009c02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009bf6:	4b12      	ldr	r3, [pc, #72]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfa:	4a11      	ldr	r2, [pc, #68]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009bfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c02:	4b0f      	ldr	r3, [pc, #60]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a0e      	ldr	r2, [pc, #56]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c0e:	f7f9 fb79 	bl	8003304 <HAL_GetTick>
 8009c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c14:	e008      	b.n	8009c28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c16:	f7f9 fb75 	bl	8003304 <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d901      	bls.n	8009c28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e006      	b.n	8009c36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c28:	4b05      	ldr	r3, [pc, #20]	@ (8009c40 <RCCEx_PLL3_Config+0x15c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0f0      	beq.n	8009c16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	58024400 	.word	0x58024400
 8009c44:	ffff0007 	.word	0xffff0007

08009c48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	@ 0x28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e075      	b.n	8009d46 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d105      	bne.n	8009c72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7f8 feb7 	bl	80029e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2204      	movs	r2, #4
 8009c76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f868 	bl	8009d50 <HAL_SD_InitCard>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e05d      	b.n	8009d46 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009c8a:	f107 0308 	add.w	r3, r7, #8
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fdb5 	bl	800a800 <HAL_SD_GetCardStatus>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e052      	b.n	8009d46 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009ca0:	7e3b      	ldrb	r3, [r7, #24]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009ca6:	7e7b      	ldrb	r3, [r7, #25]
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d10a      	bne.n	8009cca <HAL_SD_Init+0x82>
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d102      	bne.n	8009cc0 <HAL_SD_Init+0x78>
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d004      	beq.n	8009cca <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8009cc8:	e00b      	b.n	8009ce2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d104      	bne.n	8009cdc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8009cda:	e002      	b.n	8009ce2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fe73 	bl	800a9d4 <HAL_SD_ConfigWideBusOperation>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e026      	b.n	8009d46 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009cf8:	f7f9 fb04 	bl	8003304 <HAL_GetTick>
 8009cfc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009cfe:	e011      	b.n	8009d24 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d00:	f7f9 fb00 	bl	8003304 <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d0e:	d109      	bne.n	8009d24 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d16:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e010      	b.n	8009d46 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 ff67 	bl	800abf8 <HAL_SD_GetCardState>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	d1e7      	bne.n	8009d00 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3728      	adds	r7, #40	@ 0x28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b08d      	sub	sp, #52	@ 0x34
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009d60:	2300      	movs	r3, #0
 8009d62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009d68:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009d6c:	f04f 0100 	mov.w	r1, #0
 8009d70:	f7fe fc76 	bl	8008660 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d74:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d109      	bne.n	8009d90 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009d8a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e070      	b.n	8009e72 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d92:	0a1b      	lsrs	r3, r3, #8
 8009d94:	4a39      	ldr	r2, [pc, #228]	@ (8009e7c <HAL_SD_InitCard+0x12c>)
 8009d96:	fba2 2303 	umull	r2, r3, r2, r3
 8009d9a:	091b      	lsrs	r3, r3, #4
 8009d9c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681c      	ldr	r4, [r3, #0]
 8009da2:	466a      	mov	r2, sp
 8009da4:	f107 0318 	add.w	r3, r7, #24
 8009da8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009dac:	e882 0003 	stmia.w	r2, {r0, r1}
 8009db0:	f107 030c 	add.w	r3, r7, #12
 8009db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009db6:	4620      	mov	r0, r4
 8009db8:	f004 fe9e 	bl	800eaf8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f004 fee1 	bl	800eb88 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d005      	beq.n	8009dd8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d007      	beq.n	8009dee <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009dde:	4a28      	ldr	r2, [pc, #160]	@ (8009e80 <HAL_SD_InitCard+0x130>)
 8009de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de6:	3301      	adds	r3, #1
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7f9 fa97 	bl	800331c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fff0 	bl	800add4 <SD_PowerON>
 8009df4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00b      	beq.n	8009e14 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e02e      	b.n	8009e72 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 ff0f 	bl	800ac38 <SD_InitCard>
 8009e1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00b      	beq.n	8009e3a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	431a      	orrs	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e01b      	b.n	8009e72 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009e42:	4618      	mov	r0, r3
 8009e44:	f004 ff36 	bl	800ecb4 <SDMMC_CmdBlockLength>
 8009e48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00f      	beq.n	8009e70 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a0b      	ldr	r2, [pc, #44]	@ (8009e84 <HAL_SD_InitCard+0x134>)
 8009e56:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	431a      	orrs	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e000      	b.n	8009e72 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	372c      	adds	r7, #44	@ 0x2c
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd90      	pop	{r4, r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	014f8b59 	.word	0x014f8b59
 8009e80:	00012110 	.word	0x00012110
 8009e84:	1fe00fff 	.word	0x1fe00fff

08009e88 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b092      	sub	sp, #72	@ 0x48
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e96:	f7f9 fa35 	bl	8003304 <HAL_GetTick>
 8009e9a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d107      	bne.n	8009eba <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e167      	b.n	800a18a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	f040 815a 	bne.w	800a17c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ece:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	441a      	add	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d907      	bls.n	8009eec <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ee0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e14e      	b.n	800a18a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2203      	movs	r2, #3
 8009ef0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d002      	beq.n	8009f0a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f06:	025b      	lsls	r3, r3, #9
 8009f08:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f0e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	025b      	lsls	r3, r3, #9
 8009f14:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009f16:	2390      	movs	r3, #144	@ 0x90
 8009f18:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009f22:	2300      	movs	r3, #0
 8009f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f107 0214 	add.w	r2, r7, #20
 8009f2e:	4611      	mov	r1, r2
 8009f30:	4618      	mov	r0, r3
 8009f32:	f004 fe93 	bl	800ec5c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68da      	ldr	r2, [r3, #12]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f44:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d90a      	bls.n	8009f62 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f004 fef1 	bl	800ed40 <SDMMC_CmdReadMultiBlock>
 8009f5e:	6478      	str	r0, [r7, #68]	@ 0x44
 8009f60:	e009      	b.n	8009f76 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f004 fec3 	bl	800ecfa <SDMMC_CmdReadSingleBlock>
 8009f74:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d012      	beq.n	8009fa2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a84      	ldr	r2, [pc, #528]	@ (800a194 <HAL_SD_ReadBlocks+0x30c>)
 8009f82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e0f3      	b.n	800a18a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009fa6:	e058      	b.n	800a05a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d033      	beq.n	800a01e <HAL_SD_ReadBlocks+0x196>
 8009fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb8:	2b1f      	cmp	r3, #31
 8009fba:	d930      	bls.n	800a01e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fc0:	e027      	b.n	800a012 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f004 fdc0 	bl	800eb4c <SDMMC_ReadFIFO>
 8009fcc:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd8:	3301      	adds	r3, #1
 8009fda:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fde:	0a1b      	lsrs	r3, r3, #8
 8009fe0:	b2da      	uxtb	r2, r3
 8009fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe8:	3301      	adds	r3, #1
 8009fea:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fee:	0c1b      	lsrs	r3, r3, #16
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ffe:	0e1b      	lsrs	r3, r3, #24
 800a000:	b2da      	uxtb	r2, r3
 800a002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a004:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a008:	3301      	adds	r3, #1
 800a00a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800a00c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a00e:	3301      	adds	r3, #1
 800a010:	643b      	str	r3, [r7, #64]	@ 0x40
 800a012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a014:	2b07      	cmp	r3, #7
 800a016:	d9d4      	bls.n	8009fc2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a01a:	3b20      	subs	r3, #32
 800a01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a01e:	f7f9 f971 	bl	8003304 <HAL_GetTick>
 800a022:	4602      	mov	r2, r0
 800a024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d902      	bls.n	800a034 <HAL_SD_ReadBlocks+0x1ac>
 800a02e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a030:	2b00      	cmp	r3, #0
 800a032:	d112      	bne.n	800a05a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a56      	ldr	r2, [pc, #344]	@ (800a194 <HAL_SD_ReadBlocks+0x30c>)
 800a03a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a040:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e097      	b.n	800a18a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a060:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a064:	2b00      	cmp	r3, #0
 800a066:	d09f      	beq.n	8009fa8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a076:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a07e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a082:	2b00      	cmp	r3, #0
 800a084:	d022      	beq.n	800a0cc <HAL_SD_ReadBlocks+0x244>
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d91f      	bls.n	800a0cc <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a090:	2b03      	cmp	r3, #3
 800a092:	d01b      	beq.n	800a0cc <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4618      	mov	r0, r3
 800a09a:	f004 febb 	bl	800ee14 <SDMMC_CmdStopTransfer>
 800a09e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a0a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d012      	beq.n	800a0cc <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a3a      	ldr	r2, [pc, #232]	@ (800a194 <HAL_SD_ReadBlocks+0x30c>)
 800a0ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e05e      	b.n	800a18a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d2:	f003 0308 	and.w	r3, r3, #8
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d012      	beq.n	800a100 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a2d      	ldr	r2, [pc, #180]	@ (800a194 <HAL_SD_ReadBlocks+0x30c>)
 800a0e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e6:	f043 0208 	orr.w	r2, r3, #8
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e044      	b.n	800a18a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a106:	f003 0302 	and.w	r3, r3, #2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d012      	beq.n	800a134 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a20      	ldr	r2, [pc, #128]	@ (800a194 <HAL_SD_ReadBlocks+0x30c>)
 800a114:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a11a:	f043 0202 	orr.w	r2, r3, #2
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e02a      	b.n	800a18a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d012      	beq.n	800a168 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a13      	ldr	r2, [pc, #76]	@ (800a194 <HAL_SD_ReadBlocks+0x30c>)
 800a148:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a14e:	f043 0220 	orr.w	r2, r3, #32
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e010      	b.n	800a18a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a0a      	ldr	r2, [pc, #40]	@ (800a198 <HAL_SD_ReadBlocks+0x310>)
 800a16e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	e006      	b.n	800a18a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a180:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
  }
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3748      	adds	r7, #72	@ 0x48
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	1fe00fff 	.word	0x1fe00fff
 800a198:	18000f3a 	.word	0x18000f3a

0800a19c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b092      	sub	sp, #72	@ 0x48
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a1aa:	f7f9 f8ab 	bl	8003304 <HAL_GetTick>
 800a1ae:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d107      	bne.n	800a1ce <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e16b      	b.n	800a4a6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	f040 815e 	bne.w	800a498 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a1e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	441a      	add	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d907      	bls.n	800a200 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1f4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e152      	b.n	800a4a6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2203      	movs	r2, #3
 800a204:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2200      	movs	r2, #0
 800a20e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a214:	2b01      	cmp	r3, #1
 800a216:	d002      	beq.n	800a21e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21a:	025b      	lsls	r3, r3, #9
 800a21c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a21e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a222:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	025b      	lsls	r3, r3, #9
 800a228:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a22a:	2390      	movs	r3, #144	@ 0x90
 800a22c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a22e:	2300      	movs	r3, #0
 800a230:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a232:	2300      	movs	r3, #0
 800a234:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a236:	2300      	movs	r3, #0
 800a238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f107 0218 	add.w	r2, r7, #24
 800a242:	4611      	mov	r1, r2
 800a244:	4618      	mov	r0, r3
 800a246:	f004 fd09 	bl	800ec5c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68da      	ldr	r2, [r3, #12]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a258:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d90a      	bls.n	800a276 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2220      	movs	r2, #32
 800a264:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a26c:	4618      	mov	r0, r3
 800a26e:	f004 fdad 	bl	800edcc <SDMMC_CmdWriteMultiBlock>
 800a272:	6478      	str	r0, [r7, #68]	@ 0x44
 800a274:	e009      	b.n	800a28a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2210      	movs	r2, #16
 800a27a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a282:	4618      	mov	r0, r3
 800a284:	f004 fd7f 	bl	800ed86 <SDMMC_CmdWriteSingleBlock>
 800a288:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a28a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d012      	beq.n	800a2b6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a86      	ldr	r2, [pc, #536]	@ (800a4b0 <HAL_SD_WriteBlocks+0x314>)
 800a296:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a29c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a29e:	431a      	orrs	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e0f7      	b.n	800a4a6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a2ba:	e05c      	b.n	800a376 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d037      	beq.n	800a33a <HAL_SD_WriteBlocks+0x19e>
 800a2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2cc:	2b1f      	cmp	r3, #31
 800a2ce:	d934      	bls.n	800a33a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2d4:	e02b      	b.n	800a32e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2de:	3301      	adds	r3, #1
 800a2e0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	021a      	lsls	r2, r3, #8
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a2f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	041a      	lsls	r2, r3, #16
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a302:	3301      	adds	r3, #1
 800a304:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	061a      	lsls	r2, r3, #24
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	4313      	orrs	r3, r2
 800a310:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a314:	3301      	adds	r3, #1
 800a316:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f107 0214 	add.w	r2, r7, #20
 800a320:	4611      	mov	r1, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f004 fc1f 	bl	800eb66 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800a328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a32a:	3301      	adds	r3, #1
 800a32c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a32e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a330:	2b07      	cmp	r3, #7
 800a332:	d9d0      	bls.n	800a2d6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a336:	3b20      	subs	r3, #32
 800a338:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a33a:	f7f8 ffe3 	bl	8003304 <HAL_GetTick>
 800a33e:	4602      	mov	r2, r0
 800a340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a346:	429a      	cmp	r2, r3
 800a348:	d902      	bls.n	800a350 <HAL_SD_WriteBlocks+0x1b4>
 800a34a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d112      	bne.n	800a376 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a56      	ldr	r2, [pc, #344]	@ (800a4b0 <HAL_SD_WriteBlocks+0x314>)
 800a356:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a35c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a35e:	431a      	orrs	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e097      	b.n	800a4a6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a37c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800a380:	2b00      	cmp	r3, #0
 800a382:	d09b      	beq.n	800a2bc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a392:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a39a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d022      	beq.n	800a3e8 <HAL_SD_WriteBlocks+0x24c>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d91f      	bls.n	800a3e8 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d01b      	beq.n	800a3e8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f004 fd2d 	bl	800ee14 <SDMMC_CmdStopTransfer>
 800a3ba:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a3bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d012      	beq.n	800a3e8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a3a      	ldr	r2, [pc, #232]	@ (800a4b0 <HAL_SD_WriteBlocks+0x314>)
 800a3c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e05e      	b.n	800a4a6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ee:	f003 0308 	and.w	r3, r3, #8
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d012      	beq.n	800a41c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a2d      	ldr	r2, [pc, #180]	@ (800a4b0 <HAL_SD_WriteBlocks+0x314>)
 800a3fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a402:	f043 0208 	orr.w	r2, r3, #8
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e044      	b.n	800a4a6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d012      	beq.n	800a450 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a20      	ldr	r2, [pc, #128]	@ (800a4b0 <HAL_SD_WriteBlocks+0x314>)
 800a430:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a436:	f043 0202 	orr.w	r2, r3, #2
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e02a      	b.n	800a4a6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a456:	f003 0310 	and.w	r3, r3, #16
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d012      	beq.n	800a484 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a13      	ldr	r2, [pc, #76]	@ (800a4b0 <HAL_SD_WriteBlocks+0x314>)
 800a464:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a46a:	f043 0210 	orr.w	r2, r3, #16
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e010      	b.n	800a4a6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a0a      	ldr	r2, [pc, #40]	@ (800a4b4 <HAL_SD_WriteBlocks+0x318>)
 800a48a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	e006      	b.n	800a4a6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a49c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
  }
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3748      	adds	r7, #72	@ 0x48
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	1fe00fff 	.word	0x1fe00fff
 800a4b4:	18000f3a 	.word	0x18000f3a

0800a4b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4c6:	0f9b      	lsrs	r3, r3, #30
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4d2:	0e9b      	lsrs	r3, r3, #26
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	f003 030f 	and.w	r3, r3, #15
 800a4da:	b2da      	uxtb	r2, r3
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4e4:	0e1b      	lsrs	r3, r3, #24
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	f003 0303 	and.w	r3, r3, #3
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4f6:	0c1b      	lsrs	r3, r3, #16
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a502:	0a1b      	lsrs	r3, r3, #8
 800a504:	b2da      	uxtb	r2, r3
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a518:	0d1b      	lsrs	r3, r3, #20
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a524:	0c1b      	lsrs	r3, r3, #16
 800a526:	b2db      	uxtb	r3, r3
 800a528:	f003 030f 	and.w	r3, r3, #15
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a536:	0bdb      	lsrs	r3, r3, #15
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a548:	0b9b      	lsrs	r3, r3, #14
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	b2da      	uxtb	r2, r3
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a55a:	0b5b      	lsrs	r3, r3, #13
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	b2da      	uxtb	r2, r3
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a56c:	0b1b      	lsrs	r3, r3, #12
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	b2da      	uxtb	r2, r3
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2200      	movs	r2, #0
 800a57e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a584:	2b00      	cmp	r3, #0
 800a586:	d163      	bne.n	800a650 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a58c:	009a      	lsls	r2, r3, #2
 800a58e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a592:	4013      	ands	r3, r2
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a598:	0f92      	lsrs	r2, r2, #30
 800a59a:	431a      	orrs	r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5a4:	0edb      	lsrs	r3, r3, #27
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	f003 0307 	and.w	r3, r3, #7
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5b6:	0e1b      	lsrs	r3, r3, #24
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	b2da      	uxtb	r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5c8:	0d5b      	lsrs	r3, r3, #21
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	f003 0307 	and.w	r3, r3, #7
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5da:	0c9b      	lsrs	r3, r3, #18
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	f003 0307 	and.w	r3, r3, #7
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5ec:	0bdb      	lsrs	r3, r3, #15
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	f003 0307 	and.w	r3, r3, #7
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	7e1b      	ldrb	r3, [r3, #24]
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	f003 0307 	and.w	r3, r3, #7
 800a60e:	3302      	adds	r3, #2
 800a610:	2201      	movs	r2, #1
 800a612:	fa02 f303 	lsl.w	r3, r2, r3
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a61a:	fb03 f202 	mul.w	r2, r3, r2
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	7a1b      	ldrb	r3, [r3, #8]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	f003 030f 	and.w	r3, r3, #15
 800a62c:	2201      	movs	r2, #1
 800a62e:	409a      	lsls	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a63c:	0a52      	lsrs	r2, r2, #9
 800a63e:	fb03 f202 	mul.w	r2, r3, r2
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a64c:	655a      	str	r2, [r3, #84]	@ 0x54
 800a64e:	e031      	b.n	800a6b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a654:	2b01      	cmp	r3, #1
 800a656:	d11d      	bne.n	800a694 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a65c:	041b      	lsls	r3, r3, #16
 800a65e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a666:	0c1b      	lsrs	r3, r3, #16
 800a668:	431a      	orrs	r2, r3
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	3301      	adds	r3, #1
 800a674:	029a      	lsls	r2, r3, #10
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a688:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	655a      	str	r2, [r3, #84]	@ 0x54
 800a692:	e00f      	b.n	800a6b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a58      	ldr	r2, [pc, #352]	@ (800a7fc <HAL_SD_GetCardCSD+0x344>)
 800a69a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e09d      	b.n	800a7f0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6b8:	0b9b      	lsrs	r3, r3, #14
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6ca:	09db      	lsrs	r3, r3, #7
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6ec:	0fdb      	lsrs	r3, r3, #31
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6f8:	0f5b      	lsrs	r3, r3, #29
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	f003 0303 	and.w	r3, r3, #3
 800a700:	b2da      	uxtb	r2, r3
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a70a:	0e9b      	lsrs	r3, r3, #26
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 0307 	and.w	r3, r3, #7
 800a712:	b2da      	uxtb	r2, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a71c:	0d9b      	lsrs	r3, r3, #22
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	f003 030f 	and.w	r3, r3, #15
 800a724:	b2da      	uxtb	r2, r3
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a72e:	0d5b      	lsrs	r3, r3, #21
 800a730:	b2db      	uxtb	r3, r3
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	b2da      	uxtb	r2, r3
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a74a:	0c1b      	lsrs	r3, r3, #16
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	b2da      	uxtb	r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a75e:	0bdb      	lsrs	r3, r3, #15
 800a760:	b2db      	uxtb	r3, r3
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	b2da      	uxtb	r2, r3
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a772:	0b9b      	lsrs	r3, r3, #14
 800a774:	b2db      	uxtb	r3, r3
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a786:	0b5b      	lsrs	r3, r3, #13
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a79a:	0b1b      	lsrs	r3, r3, #12
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7ae:	0a9b      	lsrs	r3, r3, #10
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f003 0303 	and.w	r3, r3, #3
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7c2:	0a1b      	lsrs	r3, r3, #8
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	f003 0303 	and.w	r3, r3, #3
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7d6:	085b      	lsrs	r3, r3, #1
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	1fe00fff 	.word	0x1fe00fff

0800a800 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b094      	sub	sp, #80	@ 0x50
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d101      	bne.n	800a820 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e0a7      	b.n	800a970 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a820:	f107 0308 	add.w	r3, r7, #8
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fb62 	bl	800aef0 <SD_SendSDStatus>
 800a82c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a82e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a830:	2b00      	cmp	r3, #0
 800a832:	d011      	beq.n	800a858 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a4f      	ldr	r2, [pc, #316]	@ (800a978 <HAL_SD_GetCardStatus+0x178>)
 800a83a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a842:	431a      	orrs	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a856:	e070      	b.n	800a93a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	099b      	lsrs	r3, r3, #6
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	b2da      	uxtb	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	095b      	lsrs	r3, r3, #5
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	b2da      	uxtb	r2, r3
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	0a1b      	lsrs	r3, r3, #8
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a882:	b29a      	uxth	r2, r3
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	0e1b      	lsrs	r3, r3, #24
 800a888:	b29b      	uxth	r3, r3
 800a88a:	4313      	orrs	r3, r2
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	061a      	lsls	r2, r3, #24
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	021b      	lsls	r3, r3, #8
 800a89a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a89e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	0a1b      	lsrs	r3, r3, #8
 800a8a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a8a8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	0e1b      	lsrs	r3, r3, #24
 800a8ae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	0a1b      	lsrs	r3, r3, #8
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	0d1b      	lsrs	r3, r3, #20
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	f003 030f 	and.w	r3, r3, #15
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	0c1b      	lsrs	r3, r3, #16
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	0a9b      	lsrs	r3, r3, #10
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	0a1b      	lsrs	r3, r3, #8
 800a906:	b2db      	uxtb	r3, r3
 800a908:	f003 0303 	and.w	r3, r3, #3
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	091b      	lsrs	r3, r3, #4
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f003 030f 	and.w	r3, r3, #15
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	b2db      	uxtb	r3, r3
 800a926:	f003 030f 	and.w	r3, r3, #15
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	0e1b      	lsrs	r3, r3, #24
 800a934:	b2da      	uxtb	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a942:	4618      	mov	r0, r3
 800a944:	f004 f9b6 	bl	800ecb4 <SDMMC_CmdBlockLength>
 800a948:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a94a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00d      	beq.n	800a96c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a08      	ldr	r2, [pc, #32]	@ (800a978 <HAL_SD_GetCardStatus+0x178>)
 800a956:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a95c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800a96c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a970:	4618      	mov	r0, r3
 800a972:	3750      	adds	r7, #80	@ 0x50
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	1fe00fff 	.word	0x1fe00fff

0800a97c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a9d4:	b590      	push	{r4, r7, lr}
 800a9d6:	b08d      	sub	sp, #52	@ 0x34
 800a9d8:	af02      	add	r7, sp, #8
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2203      	movs	r2, #3
 800a9e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d02e      	beq.n	800aa52 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9fa:	d106      	bne.n	800aa0a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	635a      	str	r2, [r3, #52]	@ 0x34
 800aa08:	e029      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa10:	d10a      	bne.n	800aa28 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fb64 	bl	800b0e0 <SD_WideBus_Enable>
 800aa18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	431a      	orrs	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	635a      	str	r2, [r3, #52]	@ 0x34
 800aa26:	e01a      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10a      	bne.n	800aa44 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fba1 	bl	800b176 <SD_WideBus_Disable>
 800aa34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	431a      	orrs	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	635a      	str	r2, [r3, #52]	@ 0x34
 800aa42:	e00c      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa48:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	635a      	str	r2, [r3, #52]	@ 0x34
 800aa50:	e005      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa56:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a5f      	ldr	r2, [pc, #380]	@ (800abe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800aa6c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aa74:	e096      	b.n	800aba4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800aa76:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800aa7a:	f04f 0100 	mov.w	r1, #0
 800aa7e:	f7fd fdef 	bl	8008660 <HAL_RCCEx_GetPeriphCLKFreq>
 800aa82:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 8083 	beq.w	800ab92 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	695a      	ldr	r2, [r3, #20]
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	4950      	ldr	r1, [pc, #320]	@ (800abec <HAL_SD_ConfigWideBusOperation+0x218>)
 800aaaa:	fba1 1303 	umull	r1, r3, r1, r3
 800aaae:	0e1b      	lsrs	r3, r3, #24
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d303      	bcc.n	800aabc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	61bb      	str	r3, [r7, #24]
 800aaba:	e05a      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aac4:	d103      	bne.n	800aace <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	61bb      	str	r3, [r7, #24]
 800aacc:	e051      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aad6:	d126      	bne.n	800ab26 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10e      	bne.n	800aafe <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	4a43      	ldr	r2, [pc, #268]	@ (800abf0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d906      	bls.n	800aaf6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	4a40      	ldr	r2, [pc, #256]	@ (800abec <HAL_SD_ConfigWideBusOperation+0x218>)
 800aaec:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf0:	0e5b      	lsrs	r3, r3, #25
 800aaf2:	61bb      	str	r3, [r7, #24]
 800aaf4:	e03d      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	61bb      	str	r3, [r7, #24]
 800aafc:	e039      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	005b      	lsls	r3, r3, #1
 800ab04:	69fa      	ldr	r2, [r7, #28]
 800ab06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0a:	4a39      	ldr	r2, [pc, #228]	@ (800abf0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d906      	bls.n	800ab1e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	4a36      	ldr	r2, [pc, #216]	@ (800abec <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab14:	fba2 2303 	umull	r2, r3, r2, r3
 800ab18:	0e5b      	lsrs	r3, r3, #25
 800ab1a:	61bb      	str	r3, [r7, #24]
 800ab1c:	e029      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	61bb      	str	r3, [r7, #24]
 800ab24:	e025      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10e      	bne.n	800ab4c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	4a30      	ldr	r2, [pc, #192]	@ (800abf4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d906      	bls.n	800ab44 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	4a2c      	ldr	r2, [pc, #176]	@ (800abec <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab3e:	0e1b      	lsrs	r3, r3, #24
 800ab40:	61bb      	str	r3, [r7, #24]
 800ab42:	e016      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	695b      	ldr	r3, [r3, #20]
 800ab48:	61bb      	str	r3, [r7, #24]
 800ab4a:	e012      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab58:	4a26      	ldr	r2, [pc, #152]	@ (800abf4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d906      	bls.n	800ab6c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	4a22      	ldr	r2, [pc, #136]	@ (800abec <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab62:	fba2 2303 	umull	r2, r3, r2, r3
 800ab66:	0e1b      	lsrs	r3, r3, #24
 800ab68:	61bb      	str	r3, [r7, #24]
 800ab6a:	e002      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681c      	ldr	r4, [r3, #0]
 800ab76:	466a      	mov	r2, sp
 800ab78:	f107 0314 	add.w	r3, r7, #20
 800ab7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab80:	e882 0003 	stmia.w	r2, {r0, r1}
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f003 ffb4 	bl	800eaf8 <SDMMC_Init>
 800ab90:	e008      	b.n	800aba4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab96:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800abac:	4618      	mov	r0, r3
 800abae:	f004 f881 	bl	800ecb4 <SDMMC_CmdBlockLength>
 800abb2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800abb4:	6a3b      	ldr	r3, [r7, #32]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00c      	beq.n	800abd4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a0a      	ldr	r2, [pc, #40]	@ (800abe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800abc0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	431a      	orrs	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800abdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	372c      	adds	r7, #44	@ 0x2c
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd90      	pop	{r4, r7, pc}
 800abe8:	1fe00fff 	.word	0x1fe00fff
 800abec:	55e63b89 	.word	0x55e63b89
 800abf0:	02faf080 	.word	0x02faf080
 800abf4:	017d7840 	.word	0x017d7840

0800abf8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ac04:	f107 030c 	add.w	r3, r7, #12
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fa40 	bl	800b090 <SD_SendStatus>
 800ac10:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d005      	beq.n	800ac24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	431a      	orrs	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	0a5b      	lsrs	r3, r3, #9
 800ac28:	f003 030f 	and.w	r3, r3, #15
 800ac2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ac2e:	693b      	ldr	r3, [r7, #16]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3718      	adds	r7, #24
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b090      	sub	sp, #64	@ 0x40
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ac44:	f7f8 fb5e 	bl	8003304 <HAL_GetTick>
 800ac48:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f003 ffab 	bl	800ebaa <SDMMC_GetPowerState>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d102      	bne.n	800ac60 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ac5e:	e0b5      	b.n	800adcc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac64:	2b03      	cmp	r3, #3
 800ac66:	d02e      	beq.n	800acc6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f004 f9f6 	bl	800f05e <SDMMC_CmdSendCID>
 800ac72:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <SD_InitCard+0x46>
    {
      return errorstate;
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7c:	e0a6      	b.n	800adcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2100      	movs	r1, #0
 800ac84:	4618      	mov	r0, r3
 800ac86:	f003 ffd6 	bl	800ec36 <SDMMC_GetResponse>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2104      	movs	r1, #4
 800ac96:	4618      	mov	r0, r3
 800ac98:	f003 ffcd 	bl	800ec36 <SDMMC_GetResponse>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2108      	movs	r1, #8
 800aca8:	4618      	mov	r0, r3
 800acaa:	f003 ffc4 	bl	800ec36 <SDMMC_GetResponse>
 800acae:	4602      	mov	r2, r0
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	210c      	movs	r1, #12
 800acba:	4618      	mov	r0, r3
 800acbc:	f003 ffbb 	bl	800ec36 <SDMMC_GetResponse>
 800acc0:	4602      	mov	r2, r0
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acca:	2b03      	cmp	r3, #3
 800accc:	d01d      	beq.n	800ad0a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800acce:	e019      	b.n	800ad04 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f107 020a 	add.w	r2, r7, #10
 800acd8:	4611      	mov	r1, r2
 800acda:	4618      	mov	r0, r3
 800acdc:	f004 f9fe 	bl	800f0dc <SDMMC_CmdSetRelAdd>
 800ace0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ace2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d001      	beq.n	800acec <SD_InitCard+0xb4>
      {
        return errorstate;
 800ace8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acea:	e06f      	b.n	800adcc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800acec:	f7f8 fb0a 	bl	8003304 <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	f241 3287 	movw	r2, #4999	@ 0x1387
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d902      	bls.n	800ad04 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800acfe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad02:	e063      	b.n	800adcc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ad04:	897b      	ldrh	r3, [r7, #10]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0e2      	beq.n	800acd0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d036      	beq.n	800ad80 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ad12:	897b      	ldrh	r3, [r7, #10]
 800ad14:	461a      	mov	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad22:	041b      	lsls	r3, r3, #16
 800ad24:	4619      	mov	r1, r3
 800ad26:	4610      	mov	r0, r2
 800ad28:	f004 f9b8 	bl	800f09c <SDMMC_CmdSendCSD>
 800ad2c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <SD_InitCard+0x100>
    {
      return errorstate;
 800ad34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad36:	e049      	b.n	800adcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f003 ff79 	bl	800ec36 <SDMMC_GetResponse>
 800ad44:	4602      	mov	r2, r0
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2104      	movs	r1, #4
 800ad50:	4618      	mov	r0, r3
 800ad52:	f003 ff70 	bl	800ec36 <SDMMC_GetResponse>
 800ad56:	4602      	mov	r2, r0
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2108      	movs	r1, #8
 800ad62:	4618      	mov	r0, r3
 800ad64:	f003 ff67 	bl	800ec36 <SDMMC_GetResponse>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	210c      	movs	r1, #12
 800ad74:	4618      	mov	r0, r3
 800ad76:	f003 ff5e 	bl	800ec36 <SDMMC_GetResponse>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2104      	movs	r1, #4
 800ad86:	4618      	mov	r0, r3
 800ad88:	f003 ff55 	bl	800ec36 <SDMMC_GetResponse>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	0d1a      	lsrs	r2, r3, #20
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ad94:	f107 030c 	add.w	r3, r7, #12
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff fb8c 	bl	800a4b8 <HAL_SD_GetCardCSD>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d002      	beq.n	800adac <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ada6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800adaa:	e00f      	b.n	800adcc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb4:	041b      	lsls	r3, r3, #16
 800adb6:	4619      	mov	r1, r3
 800adb8:	4610      	mov	r0, r2
 800adba:	f004 f867 	bl	800ee8c <SDMMC_CmdSelDesel>
 800adbe:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800adc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <SD_InitCard+0x192>
  {
    return errorstate;
 800adc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc8:	e000      	b.n	800adcc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3740      	adds	r7, #64	@ 0x40
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800addc:	2300      	movs	r3, #0
 800adde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ade0:	2300      	movs	r3, #0
 800ade2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4618      	mov	r0, r3
 800adee:	f004 f870 	bl	800eed2 <SDMMC_CmdGoIdleState>
 800adf2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <SD_PowerON+0x2a>
  {
    return errorstate;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	e072      	b.n	800aee4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f004 f883 	bl	800ef0e <SDMMC_CmdOperCond>
 800ae08:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae10:	d10d      	bne.n	800ae2e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f004 f858 	bl	800eed2 <SDMMC_CmdGoIdleState>
 800ae22:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d004      	beq.n	800ae34 <SD_PowerON+0x60>
    {
      return errorstate;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	e05a      	b.n	800aee4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d137      	bne.n	800aeac <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2100      	movs	r1, #0
 800ae42:	4618      	mov	r0, r3
 800ae44:	f004 f883 	bl	800ef4e <SDMMC_CmdAppCommand>
 800ae48:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d02d      	beq.n	800aeac <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae50:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae54:	e046      	b.n	800aee4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f004 f876 	bl	800ef4e <SDMMC_CmdAppCommand>
 800ae62:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <SD_PowerON+0x9a>
    {
      return errorstate;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	e03a      	b.n	800aee4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	491e      	ldr	r1, [pc, #120]	@ (800aeec <SD_PowerON+0x118>)
 800ae74:	4618      	mov	r0, r3
 800ae76:	f004 f88d 	bl	800ef94 <SDMMC_CmdAppOperCommand>
 800ae7a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d002      	beq.n	800ae88 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae82:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae86:	e02d      	b.n	800aee4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f003 fed1 	bl	800ec36 <SDMMC_GetResponse>
 800ae94:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	0fdb      	lsrs	r3, r3, #31
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d101      	bne.n	800aea2 <SD_PowerON+0xce>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <SD_PowerON+0xd0>
 800aea2:	2300      	movs	r3, #0
 800aea4:	613b      	str	r3, [r7, #16]

    count++;
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d802      	bhi.n	800aebc <SD_PowerON+0xe8>
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d0cc      	beq.n	800ae56 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d902      	bls.n	800aecc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aec6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aeca:	e00b      	b.n	800aee4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	c1100000 	.word	0xc1100000

0800aef0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b08c      	sub	sp, #48	@ 0x30
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aefa:	f7f8 fa03 	bl	8003304 <HAL_GetTick>
 800aefe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2100      	movs	r1, #0
 800af0a:	4618      	mov	r0, r3
 800af0c:	f003 fe93 	bl	800ec36 <SDMMC_GetResponse>
 800af10:	4603      	mov	r3, r0
 800af12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af1a:	d102      	bne.n	800af22 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af20:	e0b0      	b.n	800b084 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2140      	movs	r1, #64	@ 0x40
 800af28:	4618      	mov	r0, r3
 800af2a:	f003 fec3 	bl	800ecb4 <SDMMC_CmdBlockLength>
 800af2e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d005      	beq.n	800af42 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	e0a0      	b.n	800b084 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af4a:	041b      	lsls	r3, r3, #16
 800af4c:	4619      	mov	r1, r3
 800af4e:	4610      	mov	r0, r2
 800af50:	f003 fffd 	bl	800ef4e <SDMMC_CmdAppCommand>
 800af54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d005      	beq.n	800af68 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	e08d      	b.n	800b084 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af6c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800af6e:	2340      	movs	r3, #64	@ 0x40
 800af70:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800af72:	2360      	movs	r3, #96	@ 0x60
 800af74:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800af76:	2302      	movs	r3, #2
 800af78:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800af7e:	2301      	movs	r3, #1
 800af80:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f107 0208 	add.w	r2, r7, #8
 800af8a:	4611      	mov	r1, r2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f003 fe65 	bl	800ec5c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4618      	mov	r0, r3
 800af98:	f004 f8e5 	bl	800f166 <SDMMC_CmdStatusRegister>
 800af9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d02b      	beq.n	800affc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	e069      	b.n	800b084 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d013      	beq.n	800afe6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800afbe:	2300      	movs	r3, #0
 800afc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afc2:	e00d      	b.n	800afe0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4618      	mov	r0, r3
 800afca:	f003 fdbf 	bl	800eb4c <SDMMC_ReadFIFO>
 800afce:	4602      	mov	r2, r0
 800afd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd2:	601a      	str	r2, [r3, #0]
        pData++;
 800afd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd6:	3304      	adds	r3, #4
 800afd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800afda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afdc:	3301      	adds	r3, #1
 800afde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe2:	2b07      	cmp	r3, #7
 800afe4:	d9ee      	bls.n	800afc4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800afe6:	f7f8 f98d 	bl	8003304 <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aff4:	d102      	bne.n	800affc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aff6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800affa:	e043      	b.n	800b084 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b002:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b006:	2b00      	cmp	r3, #0
 800b008:	d0d2      	beq.n	800afb0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b010:	f003 0308 	and.w	r3, r3, #8
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b018:	2308      	movs	r3, #8
 800b01a:	e033      	b.n	800b084 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b02a:	2302      	movs	r3, #2
 800b02c:	e02a      	b.n	800b084 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b034:	f003 0320 	and.w	r3, r3, #32
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d017      	beq.n	800b06c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b03c:	2320      	movs	r3, #32
 800b03e:	e021      	b.n	800b084 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4618      	mov	r0, r3
 800b046:	f003 fd81 	bl	800eb4c <SDMMC_ReadFIFO>
 800b04a:	4602      	mov	r2, r0
 800b04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b04e:	601a      	str	r2, [r3, #0]
    pData++;
 800b050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b052:	3304      	adds	r3, #4
 800b054:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b056:	f7f8 f955 	bl	8003304 <HAL_GetTick>
 800b05a:	4602      	mov	r2, r0
 800b05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b064:	d102      	bne.n	800b06c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b066:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b06a:	e00b      	b.n	800b084 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e2      	bne.n	800b040 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a03      	ldr	r2, [pc, #12]	@ (800b08c <SD_SendSDStatus+0x19c>)
 800b080:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3730      	adds	r7, #48	@ 0x30
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	18000f3a 	.word	0x18000f3a

0800b090 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d102      	bne.n	800b0a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b0a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b0a4:	e018      	b.n	800b0d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ae:	041b      	lsls	r3, r3, #16
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f004 f834 	bl	800f120 <SDMMC_CmdSendStatus>
 800b0b8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	e009      	b.n	800b0d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f003 fdb3 	bl	800ec36 <SDMMC_GetResponse>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f003 fd9d 	bl	800ec36 <SDMMC_GetResponse>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b106:	d102      	bne.n	800b10e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b108:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b10c:	e02f      	b.n	800b16e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b10e:	f107 030c 	add.w	r3, r7, #12
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f879 	bl	800b20c <SD_FindSCR>
 800b11a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	e023      	b.n	800b16e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d01c      	beq.n	800b16a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b138:	041b      	lsls	r3, r3, #16
 800b13a:	4619      	mov	r1, r3
 800b13c:	4610      	mov	r0, r2
 800b13e:	f003 ff06 	bl	800ef4e <SDMMC_CmdAppCommand>
 800b142:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	e00f      	b.n	800b16e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2102      	movs	r1, #2
 800b154:	4618      	mov	r0, r3
 800b156:	f003 ff3d 	bl	800efd4 <SDMMC_CmdBusWidth>
 800b15a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d001      	beq.n	800b166 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	e003      	b.n	800b16e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b166:	2300      	movs	r3, #0
 800b168:	e001      	b.n	800b16e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b16a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3718      	adds	r7, #24
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b086      	sub	sp, #24
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b17e:	2300      	movs	r3, #0
 800b180:	60fb      	str	r3, [r7, #12]
 800b182:	2300      	movs	r3, #0
 800b184:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2100      	movs	r1, #0
 800b18c:	4618      	mov	r0, r3
 800b18e:	f003 fd52 	bl	800ec36 <SDMMC_GetResponse>
 800b192:	4603      	mov	r3, r0
 800b194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b19c:	d102      	bne.n	800b1a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b19e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1a2:	e02f      	b.n	800b204 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b1a4:	f107 030c 	add.w	r3, r7, #12
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f82e 	bl	800b20c <SD_FindSCR>
 800b1b0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	e023      	b.n	800b204 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d01c      	beq.n	800b200 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ce:	041b      	lsls	r3, r3, #16
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	f003 febb 	bl	800ef4e <SDMMC_CmdAppCommand>
 800b1d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	e00f      	b.n	800b204 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f003 fef2 	bl	800efd4 <SDMMC_CmdBusWidth>
 800b1f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	e003      	b.n	800b204 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	e001      	b.n	800b204 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b200:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b204:	4618      	mov	r0, r3
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b08e      	sub	sp, #56	@ 0x38
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b216:	f7f8 f875 	bl	8003304 <HAL_GetTick>
 800b21a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b21c:	2300      	movs	r3, #0
 800b21e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b220:	2300      	movs	r3, #0
 800b222:	60bb      	str	r3, [r7, #8]
 800b224:	2300      	movs	r3, #0
 800b226:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2108      	movs	r1, #8
 800b232:	4618      	mov	r0, r3
 800b234:	f003 fd3e 	bl	800ecb4 <SDMMC_CmdBlockLength>
 800b238:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b242:	e0ad      	b.n	800b3a0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b24c:	041b      	lsls	r3, r3, #16
 800b24e:	4619      	mov	r1, r3
 800b250:	4610      	mov	r0, r2
 800b252:	f003 fe7c 	bl	800ef4e <SDMMC_CmdAppCommand>
 800b256:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b260:	e09e      	b.n	800b3a0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b266:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b268:	2308      	movs	r3, #8
 800b26a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b26c:	2330      	movs	r3, #48	@ 0x30
 800b26e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b270:	2302      	movs	r3, #2
 800b272:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b274:	2300      	movs	r3, #0
 800b276:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b278:	2301      	movs	r3, #1
 800b27a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f107 0210 	add.w	r2, r7, #16
 800b284:	4611      	mov	r1, r2
 800b286:	4618      	mov	r0, r3
 800b288:	f003 fce8 	bl	800ec5c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4618      	mov	r0, r3
 800b292:	f003 fec2 	bl	800f01a <SDMMC_CmdSendSCR>
 800b296:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d027      	beq.n	800b2ee <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a0:	e07e      	b.n	800b3a0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d113      	bne.n	800b2d8 <SD_FindSCR+0xcc>
 800b2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d110      	bne.n	800b2d8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f003 fc46 	bl	800eb4c <SDMMC_ReadFIFO>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f003 fc3f 	bl	800eb4c <SDMMC_ReadFIFO>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	60fb      	str	r3, [r7, #12]
      index++;
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b2d8:	f7f8 f814 	bl	8003304 <HAL_GetTick>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2e6:	d102      	bne.n	800b2ee <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b2e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b2ec:	e058      	b.n	800b3a0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2f4:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d0d1      	beq.n	800b2a2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b304:	f003 0308 	and.w	r3, r3, #8
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d005      	beq.n	800b318 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2208      	movs	r2, #8
 800b312:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b314:	2308      	movs	r3, #8
 800b316:	e043      	b.n	800b3a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b31e:	f003 0302 	and.w	r3, r3, #2
 800b322:	2b00      	cmp	r3, #0
 800b324:	d005      	beq.n	800b332 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2202      	movs	r2, #2
 800b32c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b32e:	2302      	movs	r3, #2
 800b330:	e036      	b.n	800b3a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d005      	beq.n	800b34c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2220      	movs	r2, #32
 800b346:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b348:	2320      	movs	r3, #32
 800b34a:	e029      	b.n	800b3a0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a15      	ldr	r2, [pc, #84]	@ (800b3a8 <SD_FindSCR+0x19c>)
 800b352:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	061a      	lsls	r2, r3, #24
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	021b      	lsls	r3, r3, #8
 800b35c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b360:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	0a1b      	lsrs	r3, r3, #8
 800b366:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b36a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	0e1b      	lsrs	r3, r3, #24
 800b370:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b374:	601a      	str	r2, [r3, #0]
    scr++;
 800b376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b378:	3304      	adds	r3, #4
 800b37a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	061a      	lsls	r2, r3, #24
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	021b      	lsls	r3, r3, #8
 800b384:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b388:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	0a1b      	lsrs	r3, r3, #8
 800b38e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b392:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	0e1b      	lsrs	r3, r3, #24
 800b398:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3738      	adds	r7, #56	@ 0x38
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	18000f3a 	.word	0x18000f3a

0800b3ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d101      	bne.n	800b3be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e10f      	b.n	800b5de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a87      	ldr	r2, [pc, #540]	@ (800b5e8 <HAL_SPI_Init+0x23c>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d00f      	beq.n	800b3ee <HAL_SPI_Init+0x42>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a86      	ldr	r2, [pc, #536]	@ (800b5ec <HAL_SPI_Init+0x240>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d00a      	beq.n	800b3ee <HAL_SPI_Init+0x42>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a84      	ldr	r2, [pc, #528]	@ (800b5f0 <HAL_SPI_Init+0x244>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d005      	beq.n	800b3ee <HAL_SPI_Init+0x42>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	2b0f      	cmp	r3, #15
 800b3e8:	d901      	bls.n	800b3ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e0f7      	b.n	800b5de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fe2e 	bl	800c050 <SPI_GetPacketSize>
 800b3f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a7b      	ldr	r2, [pc, #492]	@ (800b5e8 <HAL_SPI_Init+0x23c>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d00c      	beq.n	800b41a <HAL_SPI_Init+0x6e>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a79      	ldr	r2, [pc, #484]	@ (800b5ec <HAL_SPI_Init+0x240>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d007      	beq.n	800b41a <HAL_SPI_Init+0x6e>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a78      	ldr	r2, [pc, #480]	@ (800b5f0 <HAL_SPI_Init+0x244>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d002      	beq.n	800b41a <HAL_SPI_Init+0x6e>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2b08      	cmp	r3, #8
 800b418:	d811      	bhi.n	800b43e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b41e:	4a72      	ldr	r2, [pc, #456]	@ (800b5e8 <HAL_SPI_Init+0x23c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d009      	beq.n	800b438 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a70      	ldr	r2, [pc, #448]	@ (800b5ec <HAL_SPI_Init+0x240>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d004      	beq.n	800b438 <HAL_SPI_Init+0x8c>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a6f      	ldr	r2, [pc, #444]	@ (800b5f0 <HAL_SPI_Init+0x244>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d104      	bne.n	800b442 <HAL_SPI_Init+0x96>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2b10      	cmp	r3, #16
 800b43c:	d901      	bls.n	800b442 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e0cd      	b.n	800b5de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7f7 fb50 	bl	8002afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f022 0201 	bic.w	r2, r2, #1
 800b472:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b47e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b488:	d119      	bne.n	800b4be <HAL_SPI_Init+0x112>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b492:	d103      	bne.n	800b49c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d008      	beq.n	800b4ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10c      	bne.n	800b4be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4ac:	d107      	bne.n	800b4be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b4bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00f      	beq.n	800b4ea <HAL_SPI_Init+0x13e>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	2b06      	cmp	r3, #6
 800b4d0:	d90b      	bls.n	800b4ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	601a      	str	r2, [r3, #0]
 800b4e8:	e007      	b.n	800b4fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b4f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	69da      	ldr	r2, [r3, #28]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b502:	431a      	orrs	r2, r3
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	431a      	orrs	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b50c:	ea42 0103 	orr.w	r1, r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68da      	ldr	r2, [r3, #12]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	430a      	orrs	r2, r1
 800b51a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b524:	431a      	orrs	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b52a:	431a      	orrs	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	431a      	orrs	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	431a      	orrs	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	695b      	ldr	r3, [r3, #20]
 800b53c:	431a      	orrs	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a1b      	ldr	r3, [r3, #32]
 800b542:	431a      	orrs	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	431a      	orrs	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b54e:	431a      	orrs	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	431a      	orrs	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b55a:	ea42 0103 	orr.w	r1, r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	430a      	orrs	r2, r1
 800b568:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d113      	bne.n	800b59a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b584:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b598:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f022 0201 	bic.w	r2, r2, #1
 800b5a8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00a      	beq.n	800b5cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	430a      	orrs	r2, r1
 800b5ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	40013000 	.word	0x40013000
 800b5ec:	40003800 	.word	0x40003800
 800b5f0:	40003c00 	.word	0x40003c00

0800b5f4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af02      	add	r7, sp, #8
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	4613      	mov	r3, r2
 800b602:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	3320      	adds	r3, #32
 800b60a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b60c:	f7f7 fe7a 	bl	8003304 <HAL_GetTick>
 800b610:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d001      	beq.n	800b622 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b61e:	2302      	movs	r3, #2
 800b620:	e1d1      	b.n	800b9c6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <HAL_SPI_Transmit+0x3a>
 800b628:	88fb      	ldrh	r3, [r7, #6]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e1c9      	b.n	800b9c6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d101      	bne.n	800b640 <HAL_SPI_Transmit+0x4c>
 800b63c:	2302      	movs	r3, #2
 800b63e:	e1c2      	b.n	800b9c6 <HAL_SPI_Transmit+0x3d2>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2203      	movs	r2, #3
 800b64c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2200      	movs	r2, #0
 800b654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	68ba      	ldr	r2, [r7, #8]
 800b65c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	88fa      	ldrh	r2, [r7, #6]
 800b662:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	88fa      	ldrh	r2, [r7, #6]
 800b66a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2200      	movs	r2, #0
 800b680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b698:	d108      	bne.n	800b6ac <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	e009      	b.n	800b6c0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b6be:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	4b96      	ldr	r3, [pc, #600]	@ (800b920 <HAL_SPI_Transmit+0x32c>)
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	88f9      	ldrh	r1, [r7, #6]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	6812      	ldr	r2, [r2, #0]
 800b6d0:	430b      	orrs	r3, r1
 800b6d2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f042 0201 	orr.w	r2, r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6ec:	d107      	bne.n	800b6fe <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	2b0f      	cmp	r3, #15
 800b704:	d947      	bls.n	800b796 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b706:	e03f      	b.n	800b788 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	f003 0302 	and.w	r3, r3, #2
 800b712:	2b02      	cmp	r3, #2
 800b714:	d114      	bne.n	800b740 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	6812      	ldr	r2, [r2, #0]
 800b720:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b726:	1d1a      	adds	r2, r3, #4
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b732:	b29b      	uxth	r3, r3
 800b734:	3b01      	subs	r3, #1
 800b736:	b29a      	uxth	r2, r3
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b73e:	e023      	b.n	800b788 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b740:	f7f7 fde0 	bl	8003304 <HAL_GetTick>
 800b744:	4602      	mov	r2, r0
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d803      	bhi.n	800b758 <HAL_SPI_Transmit+0x164>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b756:	d102      	bne.n	800b75e <HAL_SPI_Transmit+0x16a>
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d114      	bne.n	800b788 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 fba8 	bl	800beb4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b76a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b784:	2303      	movs	r3, #3
 800b786:	e11e      	b.n	800b9c6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b78e:	b29b      	uxth	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1b9      	bne.n	800b708 <HAL_SPI_Transmit+0x114>
 800b794:	e0f1      	b.n	800b97a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	2b07      	cmp	r3, #7
 800b79c:	f240 80e6 	bls.w	800b96c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b7a0:	e05d      	b.n	800b85e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	f003 0302 	and.w	r3, r3, #2
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d132      	bne.n	800b816 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d918      	bls.n	800b7ee <HAL_SPI_Transmit+0x1fa>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d014      	beq.n	800b7ee <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6812      	ldr	r2, [r2, #0]
 800b7ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7d4:	1d1a      	adds	r2, r3, #4
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	3b02      	subs	r3, #2
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b7ec:	e037      	b.n	800b85e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7f2:	881a      	ldrh	r2, [r3, #0]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7fc:	1c9a      	adds	r2, r3, #2
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b808:	b29b      	uxth	r3, r3
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b814:	e023      	b.n	800b85e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b816:	f7f7 fd75 	bl	8003304 <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d803      	bhi.n	800b82e <HAL_SPI_Transmit+0x23a>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b82c:	d102      	bne.n	800b834 <HAL_SPI_Transmit+0x240>
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d114      	bne.n	800b85e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f000 fb3d 	bl	800beb4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b840:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	e0b3      	b.n	800b9c6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b864:	b29b      	uxth	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d19b      	bne.n	800b7a2 <HAL_SPI_Transmit+0x1ae>
 800b86a:	e086      	b.n	800b97a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	f003 0302 	and.w	r3, r3, #2
 800b876:	2b02      	cmp	r3, #2
 800b878:	d154      	bne.n	800b924 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b880:	b29b      	uxth	r3, r3
 800b882:	2b03      	cmp	r3, #3
 800b884:	d918      	bls.n	800b8b8 <HAL_SPI_Transmit+0x2c4>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b88a:	2b40      	cmp	r3, #64	@ 0x40
 800b88c:	d914      	bls.n	800b8b8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	6812      	ldr	r2, [r2, #0]
 800b898:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b89e:	1d1a      	adds	r2, r3, #4
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	3b04      	subs	r3, #4
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8b6:	e059      	b.n	800b96c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d917      	bls.n	800b8f4 <HAL_SPI_Transmit+0x300>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d013      	beq.n	800b8f4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8d0:	881a      	ldrh	r2, [r3, #0]
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8da:	1c9a      	adds	r2, r3, #2
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	3b02      	subs	r3, #2
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8f2:	e03b      	b.n	800b96c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	3320      	adds	r3, #32
 800b8fe:	7812      	ldrb	r2, [r2, #0]
 800b900:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b912:	b29b      	uxth	r3, r3
 800b914:	3b01      	subs	r3, #1
 800b916:	b29a      	uxth	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b91e:	e025      	b.n	800b96c <HAL_SPI_Transmit+0x378>
 800b920:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b924:	f7f7 fcee 	bl	8003304 <HAL_GetTick>
 800b928:	4602      	mov	r2, r0
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	429a      	cmp	r2, r3
 800b932:	d803      	bhi.n	800b93c <HAL_SPI_Transmit+0x348>
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b93a:	d102      	bne.n	800b942 <HAL_SPI_Transmit+0x34e>
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d114      	bne.n	800b96c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f000 fab6 	bl	800beb4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b94e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b968:	2303      	movs	r3, #3
 800b96a:	e02c      	b.n	800b9c6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b972:	b29b      	uxth	r3, r3
 800b974:	2b00      	cmp	r3, #0
 800b976:	f47f af79 	bne.w	800b86c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	2200      	movs	r2, #0
 800b982:	2108      	movs	r1, #8
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 fb35 	bl	800bff4 <SPI_WaitOnFlagUntilTimeout>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d007      	beq.n	800b9a0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b996:	f043 0220 	orr.w	r2, r3, #32
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 fa87 	bl	800beb4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e000      	b.n	800b9c6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b9c4:	2300      	movs	r3, #0
  }
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3718      	adds	r7, #24
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop

0800b9d0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	603b      	str	r3, [r7, #0]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9e4:	095b      	lsrs	r3, r3, #5
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3330      	adds	r3, #48	@ 0x30
 800b9f2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b9f4:	f7f7 fc86 	bl	8003304 <HAL_GetTick>
 800b9f8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d001      	beq.n	800ba0a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800ba06:	2302      	movs	r3, #2
 800ba08:	e250      	b.n	800beac <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <HAL_SPI_Receive+0x46>
 800ba10:	88fb      	ldrh	r3, [r7, #6]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d101      	bne.n	800ba1a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e248      	b.n	800beac <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d101      	bne.n	800ba28 <HAL_SPI_Receive+0x58>
 800ba24:	2302      	movs	r3, #2
 800ba26:	e241      	b.n	800beac <HAL_SPI_Receive+0x4dc>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2204      	movs	r2, #4
 800ba34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	88fa      	ldrh	r2, [r7, #6]
 800ba4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	88fa      	ldrh	r2, [r7, #6]
 800ba52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ba80:	d108      	bne.n	800ba94 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ba90:	601a      	str	r2, [r3, #0]
 800ba92:	e009      	b.n	800baa8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800baa6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	4b95      	ldr	r3, [pc, #596]	@ (800bd04 <HAL_SPI_Receive+0x334>)
 800bab0:	4013      	ands	r3, r2
 800bab2:	88f9      	ldrh	r1, [r7, #6]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	6812      	ldr	r2, [r2, #0]
 800bab8:	430b      	orrs	r3, r1
 800baba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bad4:	d107      	bne.n	800bae6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bae4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	2b0f      	cmp	r3, #15
 800baec:	d96c      	bls.n	800bbc8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800baee:	e064      	b.n	800bbba <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	f003 0301 	and.w	r3, r3, #1
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d114      	bne.n	800bb30 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bb10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb16:	1d1a      	adds	r2, r3, #4
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	3b01      	subs	r3, #1
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb2e:	e044      	b.n	800bbba <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	8bfa      	ldrh	r2, [r7, #30]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d919      	bls.n	800bb72 <HAL_SPI_Receive+0x1a2>
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d014      	beq.n	800bb72 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bb52:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb58:	1d1a      	adds	r2, r3, #4
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	3b01      	subs	r3, #1
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb70:	e023      	b.n	800bbba <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb72:	f7f7 fbc7 	bl	8003304 <HAL_GetTick>
 800bb76:	4602      	mov	r2, r0
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d803      	bhi.n	800bb8a <HAL_SPI_Receive+0x1ba>
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb88:	d102      	bne.n	800bb90 <HAL_SPI_Receive+0x1c0>
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d114      	bne.n	800bbba <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f000 f98f 	bl	800beb4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	e178      	b.n	800beac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d194      	bne.n	800baf0 <HAL_SPI_Receive+0x120>
 800bbc6:	e15e      	b.n	800be86 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	2b07      	cmp	r3, #7
 800bbce:	f240 8153 	bls.w	800be78 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bbd2:	e08f      	b.n	800bcf4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d114      	bne.n	800bc14 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbee:	69ba      	ldr	r2, [r7, #24]
 800bbf0:	8812      	ldrh	r2, [r2, #0]
 800bbf2:	b292      	uxth	r2, r2
 800bbf4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbfa:	1c9a      	adds	r2, r3, #2
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc12:	e06f      	b.n	800bcf4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	8bfa      	ldrh	r2, [r7, #30]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d924      	bls.n	800bc6c <HAL_SPI_Receive+0x29c>
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d01f      	beq.n	800bc6c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc30:	69ba      	ldr	r2, [r7, #24]
 800bc32:	8812      	ldrh	r2, [r2, #0]
 800bc34:	b292      	uxth	r2, r2
 800bc36:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc3c:	1c9a      	adds	r2, r3, #2
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc46:	69ba      	ldr	r2, [r7, #24]
 800bc48:	8812      	ldrh	r2, [r2, #0]
 800bc4a:	b292      	uxth	r2, r2
 800bc4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc52:	1c9a      	adds	r2, r3, #2
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	3b02      	subs	r3, #2
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc6a:	e043      	b.n	800bcf4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d119      	bne.n	800bcac <HAL_SPI_Receive+0x2dc>
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d014      	beq.n	800bcac <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc86:	69ba      	ldr	r2, [r7, #24]
 800bc88:	8812      	ldrh	r2, [r2, #0]
 800bc8a:	b292      	uxth	r2, r2
 800bc8c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc92:	1c9a      	adds	r2, r3, #2
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	3b01      	subs	r3, #1
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bcaa:	e023      	b.n	800bcf4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcac:	f7f7 fb2a 	bl	8003304 <HAL_GetTick>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d803      	bhi.n	800bcc4 <HAL_SPI_Receive+0x2f4>
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bcc2:	d102      	bne.n	800bcca <HAL_SPI_Receive+0x2fa>
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d114      	bne.n	800bcf4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 f8f2 	bl	800beb4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e0db      	b.n	800beac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f47f af69 	bne.w	800bbd4 <HAL_SPI_Receive+0x204>
 800bd02:	e0c0      	b.n	800be86 <HAL_SPI_Receive+0x4b6>
 800bd04:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	f003 0301 	and.w	r3, r3, #1
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d117      	bne.n	800bd4e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd2a:	7812      	ldrb	r2, [r2, #0]
 800bd2c:	b2d2      	uxtb	r2, r2
 800bd2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	3b01      	subs	r3, #1
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd4c:	e094      	b.n	800be78 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	8bfa      	ldrh	r2, [r7, #30]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d946      	bls.n	800bdea <HAL_SPI_Receive+0x41a>
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d041      	beq.n	800bdea <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd72:	7812      	ldrb	r2, [r2, #0]
 800bd74:	b2d2      	uxtb	r2, r2
 800bd76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd7c:	1c5a      	adds	r2, r3, #1
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd8e:	7812      	ldrb	r2, [r2, #0]
 800bd90:	b2d2      	uxtb	r2, r2
 800bd92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd98:	1c5a      	adds	r2, r3, #1
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdaa:	7812      	ldrb	r2, [r2, #0]
 800bdac:	b2d2      	uxtb	r2, r2
 800bdae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdb4:	1c5a      	adds	r2, r3, #1
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdc6:	7812      	ldrb	r2, [r2, #0]
 800bdc8:	b2d2      	uxtb	r2, r2
 800bdca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdd0:	1c5a      	adds	r2, r3, #1
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	3b04      	subs	r3, #4
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bde8:	e046      	b.n	800be78 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	2b03      	cmp	r3, #3
 800bdf4:	d81c      	bhi.n	800be30 <HAL_SPI_Receive+0x460>
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d017      	beq.n	800be30 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be0c:	7812      	ldrb	r2, [r2, #0]
 800be0e:	b2d2      	uxtb	r2, r2
 800be10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be16:	1c5a      	adds	r2, r3, #1
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be22:	b29b      	uxth	r3, r3
 800be24:	3b01      	subs	r3, #1
 800be26:	b29a      	uxth	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be2e:	e023      	b.n	800be78 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be30:	f7f7 fa68 	bl	8003304 <HAL_GetTick>
 800be34:	4602      	mov	r2, r0
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d803      	bhi.n	800be48 <HAL_SPI_Receive+0x478>
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be46:	d102      	bne.n	800be4e <HAL_SPI_Receive+0x47e>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d114      	bne.n	800be78 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f000 f830 	bl	800beb4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800be74:	2303      	movs	r3, #3
 800be76:	e019      	b.n	800beac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be7e:	b29b      	uxth	r3, r3
 800be80:	2b00      	cmp	r3, #0
 800be82:	f47f af41 	bne.w	800bd08 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f000 f814 	bl	800beb4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2201      	movs	r2, #1
 800be90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d001      	beq.n	800beaa <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	e000      	b.n	800beac <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800beaa:	2300      	movs	r3, #0
  }
}
 800beac:	4618      	mov	r0, r3
 800beae:	3720      	adds	r7, #32
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	699a      	ldr	r2, [r3, #24]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f042 0208 	orr.w	r2, r2, #8
 800bed2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	699a      	ldr	r2, [r3, #24]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f042 0210 	orr.w	r2, r2, #16
 800bee2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f022 0201 	bic.w	r2, r2, #1
 800bef2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6919      	ldr	r1, [r3, #16]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	4b3c      	ldr	r3, [pc, #240]	@ (800bff0 <SPI_CloseTransfer+0x13c>)
 800bf00:	400b      	ands	r3, r1
 800bf02:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	689a      	ldr	r2, [r3, #8]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bf12:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2b04      	cmp	r3, #4
 800bf1e:	d014      	beq.n	800bf4a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f003 0320 	and.w	r3, r3, #32
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00f      	beq.n	800bf4a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	699a      	ldr	r2, [r3, #24]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f042 0220 	orr.w	r2, r2, #32
 800bf48:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d014      	beq.n	800bf80 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00f      	beq.n	800bf80 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf66:	f043 0204 	orr.w	r2, r3, #4
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	699a      	ldr	r2, [r3, #24]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf7e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00f      	beq.n	800bfaa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf90:	f043 0201 	orr.w	r2, r3, #1
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	699a      	ldr	r2, [r3, #24]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfa8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00f      	beq.n	800bfd4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfba:	f043 0208 	orr.w	r2, r3, #8
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	699a      	ldr	r2, [r3, #24]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bfd2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bfe4:	bf00      	nop
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	fffffc90 	.word	0xfffffc90

0800bff4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	603b      	str	r3, [r7, #0]
 800c000:	4613      	mov	r3, r2
 800c002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c004:	e010      	b.n	800c028 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c006:	f7f7 f97d 	bl	8003304 <HAL_GetTick>
 800c00a:	4602      	mov	r2, r0
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	429a      	cmp	r2, r3
 800c014:	d803      	bhi.n	800c01e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c01c:	d102      	bne.n	800c024 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c024:	2303      	movs	r3, #3
 800c026:	e00f      	b.n	800c048 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	695a      	ldr	r2, [r3, #20]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	4013      	ands	r3, r2
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	429a      	cmp	r2, r3
 800c036:	bf0c      	ite	eq
 800c038:	2301      	moveq	r3, #1
 800c03a:	2300      	movne	r3, #0
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	461a      	mov	r2, r3
 800c040:	79fb      	ldrb	r3, [r7, #7]
 800c042:	429a      	cmp	r2, r3
 800c044:	d0df      	beq.n	800c006 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c05c:	095b      	lsrs	r3, r3, #5
 800c05e:	3301      	adds	r3, #1
 800c060:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	3301      	adds	r3, #1
 800c068:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	3307      	adds	r3, #7
 800c06e:	08db      	lsrs	r3, r3, #3
 800c070:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	fb02 f303 	mul.w	r3, r2, r3
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	e049      	b.n	800c12c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d106      	bne.n	800c0b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7f6 fddd 	bl	8002c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2202      	movs	r2, #2
 800c0b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	f000 fad7 	bl	800c678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2201      	movs	r2, #1
 800c116:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2201      	movs	r2, #1
 800c11e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2201      	movs	r2, #1
 800c126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c142:	b2db      	uxtb	r3, r3
 800c144:	2b01      	cmp	r3, #1
 800c146:	d001      	beq.n	800c14c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	e04c      	b.n	800c1e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2202      	movs	r2, #2
 800c150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a26      	ldr	r2, [pc, #152]	@ (800c1f4 <HAL_TIM_Base_Start+0xc0>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d022      	beq.n	800c1a4 <HAL_TIM_Base_Start+0x70>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c166:	d01d      	beq.n	800c1a4 <HAL_TIM_Base_Start+0x70>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a22      	ldr	r2, [pc, #136]	@ (800c1f8 <HAL_TIM_Base_Start+0xc4>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d018      	beq.n	800c1a4 <HAL_TIM_Base_Start+0x70>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a21      	ldr	r2, [pc, #132]	@ (800c1fc <HAL_TIM_Base_Start+0xc8>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d013      	beq.n	800c1a4 <HAL_TIM_Base_Start+0x70>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a1f      	ldr	r2, [pc, #124]	@ (800c200 <HAL_TIM_Base_Start+0xcc>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d00e      	beq.n	800c1a4 <HAL_TIM_Base_Start+0x70>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a1e      	ldr	r2, [pc, #120]	@ (800c204 <HAL_TIM_Base_Start+0xd0>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d009      	beq.n	800c1a4 <HAL_TIM_Base_Start+0x70>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a1c      	ldr	r2, [pc, #112]	@ (800c208 <HAL_TIM_Base_Start+0xd4>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d004      	beq.n	800c1a4 <HAL_TIM_Base_Start+0x70>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a1b      	ldr	r2, [pc, #108]	@ (800c20c <HAL_TIM_Base_Start+0xd8>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d115      	bne.n	800c1d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	689a      	ldr	r2, [r3, #8]
 800c1aa:	4b19      	ldr	r3, [pc, #100]	@ (800c210 <HAL_TIM_Base_Start+0xdc>)
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b06      	cmp	r3, #6
 800c1b4:	d015      	beq.n	800c1e2 <HAL_TIM_Base_Start+0xae>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1bc:	d011      	beq.n	800c1e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f042 0201 	orr.w	r2, r2, #1
 800c1cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1ce:	e008      	b.n	800c1e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f042 0201 	orr.w	r2, r2, #1
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	e000      	b.n	800c1e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	40010000 	.word	0x40010000
 800c1f8:	40000400 	.word	0x40000400
 800c1fc:	40000800 	.word	0x40000800
 800c200:	40000c00 	.word	0x40000c00
 800c204:	40010400 	.word	0x40010400
 800c208:	40001800 	.word	0x40001800
 800c20c:	40014000 	.word	0x40014000
 800c210:	00010007 	.word	0x00010007

0800c214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	f003 0302 	and.w	r3, r3, #2
 800c232:	2b00      	cmp	r3, #0
 800c234:	d020      	beq.n	800c278 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f003 0302 	and.w	r3, r3, #2
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d01b      	beq.n	800c278 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f06f 0202 	mvn.w	r2, #2
 800c248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	f003 0303 	and.w	r3, r3, #3
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f9ec 	bl	800c63c <HAL_TIM_IC_CaptureCallback>
 800c264:	e005      	b.n	800c272 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f9de 	bl	800c628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f9ef 	bl	800c650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	f003 0304 	and.w	r3, r3, #4
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d020      	beq.n	800c2c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f003 0304 	and.w	r3, r3, #4
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d01b      	beq.n	800c2c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f06f 0204 	mvn.w	r2, #4
 800c294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2202      	movs	r2, #2
 800c29a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	699b      	ldr	r3, [r3, #24]
 800c2a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d003      	beq.n	800c2b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f9c6 	bl	800c63c <HAL_TIM_IC_CaptureCallback>
 800c2b0:	e005      	b.n	800c2be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f9b8 	bl	800c628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f9c9 	bl	800c650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f003 0308 	and.w	r3, r3, #8
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d020      	beq.n	800c310 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f003 0308 	and.w	r3, r3, #8
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d01b      	beq.n	800c310 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f06f 0208 	mvn.w	r2, #8
 800c2e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2204      	movs	r2, #4
 800c2e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	f003 0303 	and.w	r3, r3, #3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d003      	beq.n	800c2fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f9a0 	bl	800c63c <HAL_TIM_IC_CaptureCallback>
 800c2fc:	e005      	b.n	800c30a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f992 	bl	800c628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f9a3 	bl	800c650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f003 0310 	and.w	r3, r3, #16
 800c316:	2b00      	cmp	r3, #0
 800c318:	d020      	beq.n	800c35c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f003 0310 	and.w	r3, r3, #16
 800c320:	2b00      	cmp	r3, #0
 800c322:	d01b      	beq.n	800c35c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f06f 0210 	mvn.w	r2, #16
 800c32c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2208      	movs	r2, #8
 800c332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	69db      	ldr	r3, [r3, #28]
 800c33a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f97a 	bl	800c63c <HAL_TIM_IC_CaptureCallback>
 800c348:	e005      	b.n	800c356 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f96c 	bl	800c628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 f97d 	bl	800c650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00c      	beq.n	800c380 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d007      	beq.n	800c380 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f06f 0201 	mvn.w	r2, #1
 800c378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f94a 	bl	800c614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c386:	2b00      	cmp	r3, #0
 800c388:	d104      	bne.n	800c394 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00c      	beq.n	800c3ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d007      	beq.n	800c3ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fb41 	bl	800ca30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00c      	beq.n	800c3d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d007      	beq.n	800c3d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c3ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fb39 	bl	800ca44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00c      	beq.n	800c3f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d007      	beq.n	800c3f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c3ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f937 	bl	800c664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	f003 0320 	and.w	r3, r3, #32
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00c      	beq.n	800c41a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f003 0320 	and.w	r3, r3, #32
 800c406:	2b00      	cmp	r3, #0
 800c408:	d007      	beq.n	800c41a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f06f 0220 	mvn.w	r2, #32
 800c412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fb01 	bl	800ca1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c41a:	bf00      	nop
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
	...

0800c424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d101      	bne.n	800c440 <HAL_TIM_ConfigClockSource+0x1c>
 800c43c:	2302      	movs	r3, #2
 800c43e:	e0dc      	b.n	800c5fa <HAL_TIM_ConfigClockSource+0x1d6>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2202      	movs	r2, #2
 800c44c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	4b6a      	ldr	r3, [pc, #424]	@ (800c604 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c45c:	4013      	ands	r3, r2
 800c45e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a64      	ldr	r2, [pc, #400]	@ (800c608 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c476:	4293      	cmp	r3, r2
 800c478:	f000 80a9 	beq.w	800c5ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c47c:	4a62      	ldr	r2, [pc, #392]	@ (800c608 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	f200 80ae 	bhi.w	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c484:	4a61      	ldr	r2, [pc, #388]	@ (800c60c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c486:	4293      	cmp	r3, r2
 800c488:	f000 80a1 	beq.w	800c5ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c48c:	4a5f      	ldr	r2, [pc, #380]	@ (800c60c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	f200 80a6 	bhi.w	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c494:	4a5e      	ldr	r2, [pc, #376]	@ (800c610 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c496:	4293      	cmp	r3, r2
 800c498:	f000 8099 	beq.w	800c5ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c49c:	4a5c      	ldr	r2, [pc, #368]	@ (800c610 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	f200 809e 	bhi.w	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c4a8:	f000 8091 	beq.w	800c5ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c4ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c4b0:	f200 8096 	bhi.w	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4b8:	f000 8089 	beq.w	800c5ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c4bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4c0:	f200 808e 	bhi.w	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4c8:	d03e      	beq.n	800c548 <HAL_TIM_ConfigClockSource+0x124>
 800c4ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4ce:	f200 8087 	bhi.w	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4d6:	f000 8086 	beq.w	800c5e6 <HAL_TIM_ConfigClockSource+0x1c2>
 800c4da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4de:	d87f      	bhi.n	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4e0:	2b70      	cmp	r3, #112	@ 0x70
 800c4e2:	d01a      	beq.n	800c51a <HAL_TIM_ConfigClockSource+0xf6>
 800c4e4:	2b70      	cmp	r3, #112	@ 0x70
 800c4e6:	d87b      	bhi.n	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4e8:	2b60      	cmp	r3, #96	@ 0x60
 800c4ea:	d050      	beq.n	800c58e <HAL_TIM_ConfigClockSource+0x16a>
 800c4ec:	2b60      	cmp	r3, #96	@ 0x60
 800c4ee:	d877      	bhi.n	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4f0:	2b50      	cmp	r3, #80	@ 0x50
 800c4f2:	d03c      	beq.n	800c56e <HAL_TIM_ConfigClockSource+0x14a>
 800c4f4:	2b50      	cmp	r3, #80	@ 0x50
 800c4f6:	d873      	bhi.n	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4f8:	2b40      	cmp	r3, #64	@ 0x40
 800c4fa:	d058      	beq.n	800c5ae <HAL_TIM_ConfigClockSource+0x18a>
 800c4fc:	2b40      	cmp	r3, #64	@ 0x40
 800c4fe:	d86f      	bhi.n	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c500:	2b30      	cmp	r3, #48	@ 0x30
 800c502:	d064      	beq.n	800c5ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c504:	2b30      	cmp	r3, #48	@ 0x30
 800c506:	d86b      	bhi.n	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c508:	2b20      	cmp	r3, #32
 800c50a:	d060      	beq.n	800c5ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c50c:	2b20      	cmp	r3, #32
 800c50e:	d867      	bhi.n	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c510:	2b00      	cmp	r3, #0
 800c512:	d05c      	beq.n	800c5ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c514:	2b10      	cmp	r3, #16
 800c516:	d05a      	beq.n	800c5ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c518:	e062      	b.n	800c5e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c52a:	f000 f9c9 	bl	800c8c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c53c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	609a      	str	r2, [r3, #8]
      break;
 800c546:	e04f      	b.n	800c5e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c558:	f000 f9b2 	bl	800c8c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	689a      	ldr	r2, [r3, #8]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c56a:	609a      	str	r2, [r3, #8]
      break;
 800c56c:	e03c      	b.n	800c5e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c57a:	461a      	mov	r2, r3
 800c57c:	f000 f922 	bl	800c7c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2150      	movs	r1, #80	@ 0x50
 800c586:	4618      	mov	r0, r3
 800c588:	f000 f97c 	bl	800c884 <TIM_ITRx_SetConfig>
      break;
 800c58c:	e02c      	b.n	800c5e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c59a:	461a      	mov	r2, r3
 800c59c:	f000 f941 	bl	800c822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2160      	movs	r1, #96	@ 0x60
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 f96c 	bl	800c884 <TIM_ITRx_SetConfig>
      break;
 800c5ac:	e01c      	b.n	800c5e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	f000 f902 	bl	800c7c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2140      	movs	r1, #64	@ 0x40
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 f95c 	bl	800c884 <TIM_ITRx_SetConfig>
      break;
 800c5cc:	e00c      	b.n	800c5e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4610      	mov	r0, r2
 800c5da:	f000 f953 	bl	800c884 <TIM_ITRx_SetConfig>
      break;
 800c5de:	e003      	b.n	800c5e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5e4:	e000      	b.n	800c5e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c5e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	ffceff88 	.word	0xffceff88
 800c608:	00100040 	.word	0x00100040
 800c60c:	00100030 	.word	0x00100030
 800c610:	00100020 	.word	0x00100020

0800c614 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a46      	ldr	r2, [pc, #280]	@ (800c7a4 <TIM_Base_SetConfig+0x12c>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d013      	beq.n	800c6b8 <TIM_Base_SetConfig+0x40>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c696:	d00f      	beq.n	800c6b8 <TIM_Base_SetConfig+0x40>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a43      	ldr	r2, [pc, #268]	@ (800c7a8 <TIM_Base_SetConfig+0x130>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d00b      	beq.n	800c6b8 <TIM_Base_SetConfig+0x40>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a42      	ldr	r2, [pc, #264]	@ (800c7ac <TIM_Base_SetConfig+0x134>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d007      	beq.n	800c6b8 <TIM_Base_SetConfig+0x40>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a41      	ldr	r2, [pc, #260]	@ (800c7b0 <TIM_Base_SetConfig+0x138>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d003      	beq.n	800c6b8 <TIM_Base_SetConfig+0x40>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a40      	ldr	r2, [pc, #256]	@ (800c7b4 <TIM_Base_SetConfig+0x13c>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d108      	bne.n	800c6ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a35      	ldr	r2, [pc, #212]	@ (800c7a4 <TIM_Base_SetConfig+0x12c>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d01f      	beq.n	800c712 <TIM_Base_SetConfig+0x9a>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6d8:	d01b      	beq.n	800c712 <TIM_Base_SetConfig+0x9a>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a32      	ldr	r2, [pc, #200]	@ (800c7a8 <TIM_Base_SetConfig+0x130>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d017      	beq.n	800c712 <TIM_Base_SetConfig+0x9a>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a31      	ldr	r2, [pc, #196]	@ (800c7ac <TIM_Base_SetConfig+0x134>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d013      	beq.n	800c712 <TIM_Base_SetConfig+0x9a>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a30      	ldr	r2, [pc, #192]	@ (800c7b0 <TIM_Base_SetConfig+0x138>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d00f      	beq.n	800c712 <TIM_Base_SetConfig+0x9a>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a2f      	ldr	r2, [pc, #188]	@ (800c7b4 <TIM_Base_SetConfig+0x13c>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d00b      	beq.n	800c712 <TIM_Base_SetConfig+0x9a>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a2e      	ldr	r2, [pc, #184]	@ (800c7b8 <TIM_Base_SetConfig+0x140>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d007      	beq.n	800c712 <TIM_Base_SetConfig+0x9a>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a2d      	ldr	r2, [pc, #180]	@ (800c7bc <TIM_Base_SetConfig+0x144>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d003      	beq.n	800c712 <TIM_Base_SetConfig+0x9a>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4a2c      	ldr	r2, [pc, #176]	@ (800c7c0 <TIM_Base_SetConfig+0x148>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d108      	bne.n	800c724 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	4313      	orrs	r3, r2
 800c722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	4313      	orrs	r3, r2
 800c730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	689a      	ldr	r2, [r3, #8]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a16      	ldr	r2, [pc, #88]	@ (800c7a4 <TIM_Base_SetConfig+0x12c>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d00f      	beq.n	800c770 <TIM_Base_SetConfig+0xf8>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a18      	ldr	r2, [pc, #96]	@ (800c7b4 <TIM_Base_SetConfig+0x13c>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d00b      	beq.n	800c770 <TIM_Base_SetConfig+0xf8>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4a17      	ldr	r2, [pc, #92]	@ (800c7b8 <TIM_Base_SetConfig+0x140>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d007      	beq.n	800c770 <TIM_Base_SetConfig+0xf8>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a16      	ldr	r2, [pc, #88]	@ (800c7bc <TIM_Base_SetConfig+0x144>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d003      	beq.n	800c770 <TIM_Base_SetConfig+0xf8>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a15      	ldr	r2, [pc, #84]	@ (800c7c0 <TIM_Base_SetConfig+0x148>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d103      	bne.n	800c778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	691a      	ldr	r2, [r3, #16]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	2b01      	cmp	r3, #1
 800c788:	d105      	bne.n	800c796 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	f023 0201 	bic.w	r2, r3, #1
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	611a      	str	r2, [r3, #16]
  }
}
 800c796:	bf00      	nop
 800c798:	3714      	adds	r7, #20
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	40010000 	.word	0x40010000
 800c7a8:	40000400 	.word	0x40000400
 800c7ac:	40000800 	.word	0x40000800
 800c7b0:	40000c00 	.word	0x40000c00
 800c7b4:	40010400 	.word	0x40010400
 800c7b8:	40014000 	.word	0x40014000
 800c7bc:	40014400 	.word	0x40014400
 800c7c0:	40014800 	.word	0x40014800

0800c7c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6a1b      	ldr	r3, [r3, #32]
 800c7d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	f023 0201 	bic.w	r2, r3, #1
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	699b      	ldr	r3, [r3, #24]
 800c7e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c7ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	011b      	lsls	r3, r3, #4
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f023 030a 	bic.w	r3, r3, #10
 800c800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c802:	697a      	ldr	r2, [r7, #20]
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	4313      	orrs	r3, r2
 800c808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	697a      	ldr	r2, [r7, #20]
 800c814:	621a      	str	r2, [r3, #32]
}
 800c816:	bf00      	nop
 800c818:	371c      	adds	r7, #28
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c822:	b480      	push	{r7}
 800c824:	b087      	sub	sp, #28
 800c826:	af00      	add	r7, sp, #0
 800c828:	60f8      	str	r0, [r7, #12]
 800c82a:	60b9      	str	r1, [r7, #8]
 800c82c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6a1b      	ldr	r3, [r3, #32]
 800c838:	f023 0210 	bic.w	r2, r3, #16
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	699b      	ldr	r3, [r3, #24]
 800c844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c84c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	031b      	lsls	r3, r3, #12
 800c852:	693a      	ldr	r2, [r7, #16]
 800c854:	4313      	orrs	r3, r2
 800c856:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c85e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	011b      	lsls	r3, r3, #4
 800c864:	697a      	ldr	r2, [r7, #20]
 800c866:	4313      	orrs	r3, r2
 800c868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	621a      	str	r2, [r3, #32]
}
 800c876:	bf00      	nop
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
	...

0800c884 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	4b09      	ldr	r3, [pc, #36]	@ (800c8bc <TIM_ITRx_SetConfig+0x38>)
 800c898:	4013      	ands	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c89c:	683a      	ldr	r2, [r7, #0]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	f043 0307 	orr.w	r3, r3, #7
 800c8a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	609a      	str	r2, [r3, #8]
}
 800c8ae:	bf00      	nop
 800c8b0:	3714      	adds	r7, #20
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	ffcfff8f 	.word	0xffcfff8f

0800c8c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b087      	sub	sp, #28
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c8da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	021a      	lsls	r2, r3, #8
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	697a      	ldr	r2, [r7, #20]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	697a      	ldr	r2, [r7, #20]
 800c8f2:	609a      	str	r2, [r3, #8]
}
 800c8f4:	bf00      	nop
 800c8f6:	371c      	adds	r7, #28
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c910:	2b01      	cmp	r3, #1
 800c912:	d101      	bne.n	800c918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c914:	2302      	movs	r3, #2
 800c916:	e06d      	b.n	800c9f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2202      	movs	r2, #2
 800c924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a30      	ldr	r2, [pc, #192]	@ (800ca00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d004      	beq.n	800c94c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a2f      	ldr	r2, [pc, #188]	@ (800ca04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d108      	bne.n	800c95e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c952:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	4313      	orrs	r3, r2
 800c95c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c964:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	4313      	orrs	r3, r2
 800c96e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a20      	ldr	r2, [pc, #128]	@ (800ca00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d022      	beq.n	800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c98a:	d01d      	beq.n	800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a1d      	ldr	r2, [pc, #116]	@ (800ca08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d018      	beq.n	800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a1c      	ldr	r2, [pc, #112]	@ (800ca0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d013      	beq.n	800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a1a      	ldr	r2, [pc, #104]	@ (800ca10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d00e      	beq.n	800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4a15      	ldr	r2, [pc, #84]	@ (800ca04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d009      	beq.n	800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a16      	ldr	r2, [pc, #88]	@ (800ca14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d004      	beq.n	800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a15      	ldr	r2, [pc, #84]	@ (800ca18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d10c      	bne.n	800c9e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68ba      	ldr	r2, [r7, #8]
 800c9e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c9f2:	2300      	movs	r3, #0
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	40010000 	.word	0x40010000
 800ca04:	40010400 	.word	0x40010400
 800ca08:	40000400 	.word	0x40000400
 800ca0c:	40000800 	.word	0x40000800
 800ca10:	40000c00 	.word	0x40000c00
 800ca14:	40001800 	.word	0x40001800
 800ca18:	40014000 	.word	0x40014000

0800ca1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d101      	bne.n	800ca6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e042      	b.n	800caf0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d106      	bne.n	800ca82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7f6 f91b 	bl	8002cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2224      	movs	r2, #36	@ 0x24
 800ca86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f022 0201 	bic.w	r2, r2, #1
 800ca98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d002      	beq.n	800caa8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fd90 	bl	800d5c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f825 	bl	800caf8 <UART_SetConfig>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d101      	bne.n	800cab8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	e01b      	b.n	800caf0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	685a      	ldr	r2, [r3, #4]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	689a      	ldr	r2, [r3, #8]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f042 0201 	orr.w	r2, r2, #1
 800cae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fe0f 	bl	800d70c <UART_CheckIdleState>
 800caee:	4603      	mov	r3, r0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800caf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cafc:	b092      	sub	sp, #72	@ 0x48
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	689a      	ldr	r2, [r3, #8]
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	431a      	orrs	r2, r3
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	695b      	ldr	r3, [r3, #20]
 800cb16:	431a      	orrs	r2, r3
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	69db      	ldr	r3, [r3, #28]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	4bbe      	ldr	r3, [pc, #760]	@ (800ce20 <UART_SetConfig+0x328>)
 800cb28:	4013      	ands	r3, r2
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	6812      	ldr	r2, [r2, #0]
 800cb2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb30:	430b      	orrs	r3, r1
 800cb32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	68da      	ldr	r2, [r3, #12]
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	430a      	orrs	r2, r1
 800cb48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4ab3      	ldr	r2, [pc, #716]	@ (800ce24 <UART_SetConfig+0x32c>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d004      	beq.n	800cb64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb60:	4313      	orrs	r3, r2
 800cb62:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	689a      	ldr	r2, [r3, #8]
 800cb6a:	4baf      	ldr	r3, [pc, #700]	@ (800ce28 <UART_SetConfig+0x330>)
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	697a      	ldr	r2, [r7, #20]
 800cb70:	6812      	ldr	r2, [r2, #0]
 800cb72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb74:	430b      	orrs	r3, r1
 800cb76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb7e:	f023 010f 	bic.w	r1, r3, #15
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	430a      	orrs	r2, r1
 800cb8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4aa6      	ldr	r2, [pc, #664]	@ (800ce2c <UART_SetConfig+0x334>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d177      	bne.n	800cc88 <UART_SetConfig+0x190>
 800cb98:	4ba5      	ldr	r3, [pc, #660]	@ (800ce30 <UART_SetConfig+0x338>)
 800cb9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cba0:	2b28      	cmp	r3, #40	@ 0x28
 800cba2:	d86d      	bhi.n	800cc80 <UART_SetConfig+0x188>
 800cba4:	a201      	add	r2, pc, #4	@ (adr r2, 800cbac <UART_SetConfig+0xb4>)
 800cba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbaa:	bf00      	nop
 800cbac:	0800cc51 	.word	0x0800cc51
 800cbb0:	0800cc81 	.word	0x0800cc81
 800cbb4:	0800cc81 	.word	0x0800cc81
 800cbb8:	0800cc81 	.word	0x0800cc81
 800cbbc:	0800cc81 	.word	0x0800cc81
 800cbc0:	0800cc81 	.word	0x0800cc81
 800cbc4:	0800cc81 	.word	0x0800cc81
 800cbc8:	0800cc81 	.word	0x0800cc81
 800cbcc:	0800cc59 	.word	0x0800cc59
 800cbd0:	0800cc81 	.word	0x0800cc81
 800cbd4:	0800cc81 	.word	0x0800cc81
 800cbd8:	0800cc81 	.word	0x0800cc81
 800cbdc:	0800cc81 	.word	0x0800cc81
 800cbe0:	0800cc81 	.word	0x0800cc81
 800cbe4:	0800cc81 	.word	0x0800cc81
 800cbe8:	0800cc81 	.word	0x0800cc81
 800cbec:	0800cc61 	.word	0x0800cc61
 800cbf0:	0800cc81 	.word	0x0800cc81
 800cbf4:	0800cc81 	.word	0x0800cc81
 800cbf8:	0800cc81 	.word	0x0800cc81
 800cbfc:	0800cc81 	.word	0x0800cc81
 800cc00:	0800cc81 	.word	0x0800cc81
 800cc04:	0800cc81 	.word	0x0800cc81
 800cc08:	0800cc81 	.word	0x0800cc81
 800cc0c:	0800cc69 	.word	0x0800cc69
 800cc10:	0800cc81 	.word	0x0800cc81
 800cc14:	0800cc81 	.word	0x0800cc81
 800cc18:	0800cc81 	.word	0x0800cc81
 800cc1c:	0800cc81 	.word	0x0800cc81
 800cc20:	0800cc81 	.word	0x0800cc81
 800cc24:	0800cc81 	.word	0x0800cc81
 800cc28:	0800cc81 	.word	0x0800cc81
 800cc2c:	0800cc71 	.word	0x0800cc71
 800cc30:	0800cc81 	.word	0x0800cc81
 800cc34:	0800cc81 	.word	0x0800cc81
 800cc38:	0800cc81 	.word	0x0800cc81
 800cc3c:	0800cc81 	.word	0x0800cc81
 800cc40:	0800cc81 	.word	0x0800cc81
 800cc44:	0800cc81 	.word	0x0800cc81
 800cc48:	0800cc81 	.word	0x0800cc81
 800cc4c:	0800cc79 	.word	0x0800cc79
 800cc50:	2301      	movs	r3, #1
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc56:	e222      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cc58:	2304      	movs	r3, #4
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5e:	e21e      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cc60:	2308      	movs	r3, #8
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc66:	e21a      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cc68:	2310      	movs	r3, #16
 800cc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc6e:	e216      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cc70:	2320      	movs	r3, #32
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc76:	e212      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cc78:	2340      	movs	r3, #64	@ 0x40
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc7e:	e20e      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cc80:	2380      	movs	r3, #128	@ 0x80
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc86:	e20a      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a69      	ldr	r2, [pc, #420]	@ (800ce34 <UART_SetConfig+0x33c>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d130      	bne.n	800ccf4 <UART_SetConfig+0x1fc>
 800cc92:	4b67      	ldr	r3, [pc, #412]	@ (800ce30 <UART_SetConfig+0x338>)
 800cc94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc96:	f003 0307 	and.w	r3, r3, #7
 800cc9a:	2b05      	cmp	r3, #5
 800cc9c:	d826      	bhi.n	800ccec <UART_SetConfig+0x1f4>
 800cc9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cca4 <UART_SetConfig+0x1ac>)
 800cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca4:	0800ccbd 	.word	0x0800ccbd
 800cca8:	0800ccc5 	.word	0x0800ccc5
 800ccac:	0800cccd 	.word	0x0800cccd
 800ccb0:	0800ccd5 	.word	0x0800ccd5
 800ccb4:	0800ccdd 	.word	0x0800ccdd
 800ccb8:	0800cce5 	.word	0x0800cce5
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccc2:	e1ec      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ccc4:	2304      	movs	r3, #4
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccca:	e1e8      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cccc:	2308      	movs	r3, #8
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd2:	e1e4      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ccd4:	2310      	movs	r3, #16
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccda:	e1e0      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ccdc:	2320      	movs	r3, #32
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cce2:	e1dc      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cce4:	2340      	movs	r3, #64	@ 0x40
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccea:	e1d8      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ccec:	2380      	movs	r3, #128	@ 0x80
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccf2:	e1d4      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a4f      	ldr	r2, [pc, #316]	@ (800ce38 <UART_SetConfig+0x340>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d130      	bne.n	800cd60 <UART_SetConfig+0x268>
 800ccfe:	4b4c      	ldr	r3, [pc, #304]	@ (800ce30 <UART_SetConfig+0x338>)
 800cd00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd02:	f003 0307 	and.w	r3, r3, #7
 800cd06:	2b05      	cmp	r3, #5
 800cd08:	d826      	bhi.n	800cd58 <UART_SetConfig+0x260>
 800cd0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd10 <UART_SetConfig+0x218>)
 800cd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd10:	0800cd29 	.word	0x0800cd29
 800cd14:	0800cd31 	.word	0x0800cd31
 800cd18:	0800cd39 	.word	0x0800cd39
 800cd1c:	0800cd41 	.word	0x0800cd41
 800cd20:	0800cd49 	.word	0x0800cd49
 800cd24:	0800cd51 	.word	0x0800cd51
 800cd28:	2300      	movs	r3, #0
 800cd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2e:	e1b6      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cd30:	2304      	movs	r3, #4
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd36:	e1b2      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cd38:	2308      	movs	r3, #8
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3e:	e1ae      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cd40:	2310      	movs	r3, #16
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd46:	e1aa      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cd48:	2320      	movs	r3, #32
 800cd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd4e:	e1a6      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cd50:	2340      	movs	r3, #64	@ 0x40
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd56:	e1a2      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cd58:	2380      	movs	r3, #128	@ 0x80
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd5e:	e19e      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a35      	ldr	r2, [pc, #212]	@ (800ce3c <UART_SetConfig+0x344>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d130      	bne.n	800cdcc <UART_SetConfig+0x2d4>
 800cd6a:	4b31      	ldr	r3, [pc, #196]	@ (800ce30 <UART_SetConfig+0x338>)
 800cd6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd6e:	f003 0307 	and.w	r3, r3, #7
 800cd72:	2b05      	cmp	r3, #5
 800cd74:	d826      	bhi.n	800cdc4 <UART_SetConfig+0x2cc>
 800cd76:	a201      	add	r2, pc, #4	@ (adr r2, 800cd7c <UART_SetConfig+0x284>)
 800cd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7c:	0800cd95 	.word	0x0800cd95
 800cd80:	0800cd9d 	.word	0x0800cd9d
 800cd84:	0800cda5 	.word	0x0800cda5
 800cd88:	0800cdad 	.word	0x0800cdad
 800cd8c:	0800cdb5 	.word	0x0800cdb5
 800cd90:	0800cdbd 	.word	0x0800cdbd
 800cd94:	2300      	movs	r3, #0
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9a:	e180      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cd9c:	2304      	movs	r3, #4
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda2:	e17c      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cda4:	2308      	movs	r3, #8
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdaa:	e178      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cdac:	2310      	movs	r3, #16
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdb2:	e174      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cdb4:	2320      	movs	r3, #32
 800cdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdba:	e170      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cdbc:	2340      	movs	r3, #64	@ 0x40
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdc2:	e16c      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cdc4:	2380      	movs	r3, #128	@ 0x80
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdca:	e168      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a1b      	ldr	r2, [pc, #108]	@ (800ce40 <UART_SetConfig+0x348>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d142      	bne.n	800ce5c <UART_SetConfig+0x364>
 800cdd6:	4b16      	ldr	r3, [pc, #88]	@ (800ce30 <UART_SetConfig+0x338>)
 800cdd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdda:	f003 0307 	and.w	r3, r3, #7
 800cdde:	2b05      	cmp	r3, #5
 800cde0:	d838      	bhi.n	800ce54 <UART_SetConfig+0x35c>
 800cde2:	a201      	add	r2, pc, #4	@ (adr r2, 800cde8 <UART_SetConfig+0x2f0>)
 800cde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde8:	0800ce01 	.word	0x0800ce01
 800cdec:	0800ce09 	.word	0x0800ce09
 800cdf0:	0800ce11 	.word	0x0800ce11
 800cdf4:	0800ce19 	.word	0x0800ce19
 800cdf8:	0800ce45 	.word	0x0800ce45
 800cdfc:	0800ce4d 	.word	0x0800ce4d
 800ce00:	2300      	movs	r3, #0
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce06:	e14a      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ce08:	2304      	movs	r3, #4
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0e:	e146      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ce10:	2308      	movs	r3, #8
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce16:	e142      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ce18:	2310      	movs	r3, #16
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce1e:	e13e      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ce20:	cfff69f3 	.word	0xcfff69f3
 800ce24:	58000c00 	.word	0x58000c00
 800ce28:	11fff4ff 	.word	0x11fff4ff
 800ce2c:	40011000 	.word	0x40011000
 800ce30:	58024400 	.word	0x58024400
 800ce34:	40004400 	.word	0x40004400
 800ce38:	40004800 	.word	0x40004800
 800ce3c:	40004c00 	.word	0x40004c00
 800ce40:	40005000 	.word	0x40005000
 800ce44:	2320      	movs	r3, #32
 800ce46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce4a:	e128      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ce4c:	2340      	movs	r3, #64	@ 0x40
 800ce4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce52:	e124      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ce54:	2380      	movs	r3, #128	@ 0x80
 800ce56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce5a:	e120      	b.n	800d09e <UART_SetConfig+0x5a6>
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4acb      	ldr	r2, [pc, #812]	@ (800d190 <UART_SetConfig+0x698>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d176      	bne.n	800cf54 <UART_SetConfig+0x45c>
 800ce66:	4bcb      	ldr	r3, [pc, #812]	@ (800d194 <UART_SetConfig+0x69c>)
 800ce68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce6e:	2b28      	cmp	r3, #40	@ 0x28
 800ce70:	d86c      	bhi.n	800cf4c <UART_SetConfig+0x454>
 800ce72:	a201      	add	r2, pc, #4	@ (adr r2, 800ce78 <UART_SetConfig+0x380>)
 800ce74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce78:	0800cf1d 	.word	0x0800cf1d
 800ce7c:	0800cf4d 	.word	0x0800cf4d
 800ce80:	0800cf4d 	.word	0x0800cf4d
 800ce84:	0800cf4d 	.word	0x0800cf4d
 800ce88:	0800cf4d 	.word	0x0800cf4d
 800ce8c:	0800cf4d 	.word	0x0800cf4d
 800ce90:	0800cf4d 	.word	0x0800cf4d
 800ce94:	0800cf4d 	.word	0x0800cf4d
 800ce98:	0800cf25 	.word	0x0800cf25
 800ce9c:	0800cf4d 	.word	0x0800cf4d
 800cea0:	0800cf4d 	.word	0x0800cf4d
 800cea4:	0800cf4d 	.word	0x0800cf4d
 800cea8:	0800cf4d 	.word	0x0800cf4d
 800ceac:	0800cf4d 	.word	0x0800cf4d
 800ceb0:	0800cf4d 	.word	0x0800cf4d
 800ceb4:	0800cf4d 	.word	0x0800cf4d
 800ceb8:	0800cf2d 	.word	0x0800cf2d
 800cebc:	0800cf4d 	.word	0x0800cf4d
 800cec0:	0800cf4d 	.word	0x0800cf4d
 800cec4:	0800cf4d 	.word	0x0800cf4d
 800cec8:	0800cf4d 	.word	0x0800cf4d
 800cecc:	0800cf4d 	.word	0x0800cf4d
 800ced0:	0800cf4d 	.word	0x0800cf4d
 800ced4:	0800cf4d 	.word	0x0800cf4d
 800ced8:	0800cf35 	.word	0x0800cf35
 800cedc:	0800cf4d 	.word	0x0800cf4d
 800cee0:	0800cf4d 	.word	0x0800cf4d
 800cee4:	0800cf4d 	.word	0x0800cf4d
 800cee8:	0800cf4d 	.word	0x0800cf4d
 800ceec:	0800cf4d 	.word	0x0800cf4d
 800cef0:	0800cf4d 	.word	0x0800cf4d
 800cef4:	0800cf4d 	.word	0x0800cf4d
 800cef8:	0800cf3d 	.word	0x0800cf3d
 800cefc:	0800cf4d 	.word	0x0800cf4d
 800cf00:	0800cf4d 	.word	0x0800cf4d
 800cf04:	0800cf4d 	.word	0x0800cf4d
 800cf08:	0800cf4d 	.word	0x0800cf4d
 800cf0c:	0800cf4d 	.word	0x0800cf4d
 800cf10:	0800cf4d 	.word	0x0800cf4d
 800cf14:	0800cf4d 	.word	0x0800cf4d
 800cf18:	0800cf45 	.word	0x0800cf45
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf22:	e0bc      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cf24:	2304      	movs	r3, #4
 800cf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2a:	e0b8      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cf2c:	2308      	movs	r3, #8
 800cf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf32:	e0b4      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cf34:	2310      	movs	r3, #16
 800cf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3a:	e0b0      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cf3c:	2320      	movs	r3, #32
 800cf3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf42:	e0ac      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cf44:	2340      	movs	r3, #64	@ 0x40
 800cf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf4a:	e0a8      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cf4c:	2380      	movs	r3, #128	@ 0x80
 800cf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf52:	e0a4      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a8f      	ldr	r2, [pc, #572]	@ (800d198 <UART_SetConfig+0x6a0>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d130      	bne.n	800cfc0 <UART_SetConfig+0x4c8>
 800cf5e:	4b8d      	ldr	r3, [pc, #564]	@ (800d194 <UART_SetConfig+0x69c>)
 800cf60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf62:	f003 0307 	and.w	r3, r3, #7
 800cf66:	2b05      	cmp	r3, #5
 800cf68:	d826      	bhi.n	800cfb8 <UART_SetConfig+0x4c0>
 800cf6a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf70 <UART_SetConfig+0x478>)
 800cf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf70:	0800cf89 	.word	0x0800cf89
 800cf74:	0800cf91 	.word	0x0800cf91
 800cf78:	0800cf99 	.word	0x0800cf99
 800cf7c:	0800cfa1 	.word	0x0800cfa1
 800cf80:	0800cfa9 	.word	0x0800cfa9
 800cf84:	0800cfb1 	.word	0x0800cfb1
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8e:	e086      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cf90:	2304      	movs	r3, #4
 800cf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf96:	e082      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cf98:	2308      	movs	r3, #8
 800cf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9e:	e07e      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cfa0:	2310      	movs	r3, #16
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa6:	e07a      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cfa8:	2320      	movs	r3, #32
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfae:	e076      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cfb0:	2340      	movs	r3, #64	@ 0x40
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfb6:	e072      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cfb8:	2380      	movs	r3, #128	@ 0x80
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfbe:	e06e      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a75      	ldr	r2, [pc, #468]	@ (800d19c <UART_SetConfig+0x6a4>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d130      	bne.n	800d02c <UART_SetConfig+0x534>
 800cfca:	4b72      	ldr	r3, [pc, #456]	@ (800d194 <UART_SetConfig+0x69c>)
 800cfcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfce:	f003 0307 	and.w	r3, r3, #7
 800cfd2:	2b05      	cmp	r3, #5
 800cfd4:	d826      	bhi.n	800d024 <UART_SetConfig+0x52c>
 800cfd6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfdc <UART_SetConfig+0x4e4>)
 800cfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfdc:	0800cff5 	.word	0x0800cff5
 800cfe0:	0800cffd 	.word	0x0800cffd
 800cfe4:	0800d005 	.word	0x0800d005
 800cfe8:	0800d00d 	.word	0x0800d00d
 800cfec:	0800d015 	.word	0x0800d015
 800cff0:	0800d01d 	.word	0x0800d01d
 800cff4:	2300      	movs	r3, #0
 800cff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cffa:	e050      	b.n	800d09e <UART_SetConfig+0x5a6>
 800cffc:	2304      	movs	r3, #4
 800cffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d002:	e04c      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d004:	2308      	movs	r3, #8
 800d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00a:	e048      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d00c:	2310      	movs	r3, #16
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d012:	e044      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d014:	2320      	movs	r3, #32
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01a:	e040      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d01c:	2340      	movs	r3, #64	@ 0x40
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d022:	e03c      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d024:	2380      	movs	r3, #128	@ 0x80
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d02a:	e038      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a5b      	ldr	r2, [pc, #364]	@ (800d1a0 <UART_SetConfig+0x6a8>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d130      	bne.n	800d098 <UART_SetConfig+0x5a0>
 800d036:	4b57      	ldr	r3, [pc, #348]	@ (800d194 <UART_SetConfig+0x69c>)
 800d038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d03a:	f003 0307 	and.w	r3, r3, #7
 800d03e:	2b05      	cmp	r3, #5
 800d040:	d826      	bhi.n	800d090 <UART_SetConfig+0x598>
 800d042:	a201      	add	r2, pc, #4	@ (adr r2, 800d048 <UART_SetConfig+0x550>)
 800d044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d048:	0800d061 	.word	0x0800d061
 800d04c:	0800d069 	.word	0x0800d069
 800d050:	0800d071 	.word	0x0800d071
 800d054:	0800d079 	.word	0x0800d079
 800d058:	0800d081 	.word	0x0800d081
 800d05c:	0800d089 	.word	0x0800d089
 800d060:	2302      	movs	r3, #2
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d066:	e01a      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d068:	2304      	movs	r3, #4
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06e:	e016      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d070:	2308      	movs	r3, #8
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e012      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d078:	2310      	movs	r3, #16
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e00e      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d080:	2320      	movs	r3, #32
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d086:	e00a      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d088:	2340      	movs	r3, #64	@ 0x40
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d08e:	e006      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d090:	2380      	movs	r3, #128	@ 0x80
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d096:	e002      	b.n	800d09e <UART_SetConfig+0x5a6>
 800d098:	2380      	movs	r3, #128	@ 0x80
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a3f      	ldr	r2, [pc, #252]	@ (800d1a0 <UART_SetConfig+0x6a8>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	f040 80f8 	bne.w	800d29a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d0aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d0ae:	2b20      	cmp	r3, #32
 800d0b0:	dc46      	bgt.n	800d140 <UART_SetConfig+0x648>
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	f2c0 8082 	blt.w	800d1bc <UART_SetConfig+0x6c4>
 800d0b8:	3b02      	subs	r3, #2
 800d0ba:	2b1e      	cmp	r3, #30
 800d0bc:	d87e      	bhi.n	800d1bc <UART_SetConfig+0x6c4>
 800d0be:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c4 <UART_SetConfig+0x5cc>)
 800d0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c4:	0800d147 	.word	0x0800d147
 800d0c8:	0800d1bd 	.word	0x0800d1bd
 800d0cc:	0800d14f 	.word	0x0800d14f
 800d0d0:	0800d1bd 	.word	0x0800d1bd
 800d0d4:	0800d1bd 	.word	0x0800d1bd
 800d0d8:	0800d1bd 	.word	0x0800d1bd
 800d0dc:	0800d15f 	.word	0x0800d15f
 800d0e0:	0800d1bd 	.word	0x0800d1bd
 800d0e4:	0800d1bd 	.word	0x0800d1bd
 800d0e8:	0800d1bd 	.word	0x0800d1bd
 800d0ec:	0800d1bd 	.word	0x0800d1bd
 800d0f0:	0800d1bd 	.word	0x0800d1bd
 800d0f4:	0800d1bd 	.word	0x0800d1bd
 800d0f8:	0800d1bd 	.word	0x0800d1bd
 800d0fc:	0800d16f 	.word	0x0800d16f
 800d100:	0800d1bd 	.word	0x0800d1bd
 800d104:	0800d1bd 	.word	0x0800d1bd
 800d108:	0800d1bd 	.word	0x0800d1bd
 800d10c:	0800d1bd 	.word	0x0800d1bd
 800d110:	0800d1bd 	.word	0x0800d1bd
 800d114:	0800d1bd 	.word	0x0800d1bd
 800d118:	0800d1bd 	.word	0x0800d1bd
 800d11c:	0800d1bd 	.word	0x0800d1bd
 800d120:	0800d1bd 	.word	0x0800d1bd
 800d124:	0800d1bd 	.word	0x0800d1bd
 800d128:	0800d1bd 	.word	0x0800d1bd
 800d12c:	0800d1bd 	.word	0x0800d1bd
 800d130:	0800d1bd 	.word	0x0800d1bd
 800d134:	0800d1bd 	.word	0x0800d1bd
 800d138:	0800d1bd 	.word	0x0800d1bd
 800d13c:	0800d1af 	.word	0x0800d1af
 800d140:	2b40      	cmp	r3, #64	@ 0x40
 800d142:	d037      	beq.n	800d1b4 <UART_SetConfig+0x6bc>
 800d144:	e03a      	b.n	800d1bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d146:	f7fc f80b 	bl	8009160 <HAL_RCCEx_GetD3PCLK1Freq>
 800d14a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d14c:	e03c      	b.n	800d1c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d14e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d152:	4618      	mov	r0, r3
 800d154:	f7fc f81a 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d15c:	e034      	b.n	800d1c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d15e:	f107 0318 	add.w	r3, r7, #24
 800d162:	4618      	mov	r0, r3
 800d164:	f7fc f966 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d16c:	e02c      	b.n	800d1c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d16e:	4b09      	ldr	r3, [pc, #36]	@ (800d194 <UART_SetConfig+0x69c>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f003 0320 	and.w	r3, r3, #32
 800d176:	2b00      	cmp	r3, #0
 800d178:	d016      	beq.n	800d1a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d17a:	4b06      	ldr	r3, [pc, #24]	@ (800d194 <UART_SetConfig+0x69c>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	08db      	lsrs	r3, r3, #3
 800d180:	f003 0303 	and.w	r3, r3, #3
 800d184:	4a07      	ldr	r2, [pc, #28]	@ (800d1a4 <UART_SetConfig+0x6ac>)
 800d186:	fa22 f303 	lsr.w	r3, r2, r3
 800d18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d18c:	e01c      	b.n	800d1c8 <UART_SetConfig+0x6d0>
 800d18e:	bf00      	nop
 800d190:	40011400 	.word	0x40011400
 800d194:	58024400 	.word	0x58024400
 800d198:	40007800 	.word	0x40007800
 800d19c:	40007c00 	.word	0x40007c00
 800d1a0:	58000c00 	.word	0x58000c00
 800d1a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d1a8:	4b9d      	ldr	r3, [pc, #628]	@ (800d420 <UART_SetConfig+0x928>)
 800d1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1ac:	e00c      	b.n	800d1c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1ae:	4b9d      	ldr	r3, [pc, #628]	@ (800d424 <UART_SetConfig+0x92c>)
 800d1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1b2:	e009      	b.n	800d1c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1ba:	e005      	b.n	800d1c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d1c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f000 81de 	beq.w	800d58c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1d4:	4a94      	ldr	r2, [pc, #592]	@ (800d428 <UART_SetConfig+0x930>)
 800d1d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1de:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	685a      	ldr	r2, [r3, #4]
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	005b      	lsls	r3, r3, #1
 800d1ec:	4413      	add	r3, r2
 800d1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d305      	bcc.n	800d200 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d1fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d903      	bls.n	800d208 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d206:	e1c1      	b.n	800d58c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d20a:	2200      	movs	r2, #0
 800d20c:	60bb      	str	r3, [r7, #8]
 800d20e:	60fa      	str	r2, [r7, #12]
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d214:	4a84      	ldr	r2, [pc, #528]	@ (800d428 <UART_SetConfig+0x930>)
 800d216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	2200      	movs	r2, #0
 800d21e:	603b      	str	r3, [r7, #0]
 800d220:	607a      	str	r2, [r7, #4]
 800d222:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d226:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d22a:	f7f3 f8b1 	bl	8000390 <__aeabi_uldivmod>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4610      	mov	r0, r2
 800d234:	4619      	mov	r1, r3
 800d236:	f04f 0200 	mov.w	r2, #0
 800d23a:	f04f 0300 	mov.w	r3, #0
 800d23e:	020b      	lsls	r3, r1, #8
 800d240:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d244:	0202      	lsls	r2, r0, #8
 800d246:	6979      	ldr	r1, [r7, #20]
 800d248:	6849      	ldr	r1, [r1, #4]
 800d24a:	0849      	lsrs	r1, r1, #1
 800d24c:	2000      	movs	r0, #0
 800d24e:	460c      	mov	r4, r1
 800d250:	4605      	mov	r5, r0
 800d252:	eb12 0804 	adds.w	r8, r2, r4
 800d256:	eb43 0905 	adc.w	r9, r3, r5
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	469a      	mov	sl, r3
 800d262:	4693      	mov	fp, r2
 800d264:	4652      	mov	r2, sl
 800d266:	465b      	mov	r3, fp
 800d268:	4640      	mov	r0, r8
 800d26a:	4649      	mov	r1, r9
 800d26c:	f7f3 f890 	bl	8000390 <__aeabi_uldivmod>
 800d270:	4602      	mov	r2, r0
 800d272:	460b      	mov	r3, r1
 800d274:	4613      	mov	r3, r2
 800d276:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d27a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d27e:	d308      	bcc.n	800d292 <UART_SetConfig+0x79a>
 800d280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d286:	d204      	bcs.n	800d292 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d28e:	60da      	str	r2, [r3, #12]
 800d290:	e17c      	b.n	800d58c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d298:	e178      	b.n	800d58c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d2a2:	f040 80c5 	bne.w	800d430 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d2a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d2aa:	2b20      	cmp	r3, #32
 800d2ac:	dc48      	bgt.n	800d340 <UART_SetConfig+0x848>
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	db7b      	blt.n	800d3aa <UART_SetConfig+0x8b2>
 800d2b2:	2b20      	cmp	r3, #32
 800d2b4:	d879      	bhi.n	800d3aa <UART_SetConfig+0x8b2>
 800d2b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d2bc <UART_SetConfig+0x7c4>)
 800d2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2bc:	0800d347 	.word	0x0800d347
 800d2c0:	0800d34f 	.word	0x0800d34f
 800d2c4:	0800d3ab 	.word	0x0800d3ab
 800d2c8:	0800d3ab 	.word	0x0800d3ab
 800d2cc:	0800d357 	.word	0x0800d357
 800d2d0:	0800d3ab 	.word	0x0800d3ab
 800d2d4:	0800d3ab 	.word	0x0800d3ab
 800d2d8:	0800d3ab 	.word	0x0800d3ab
 800d2dc:	0800d367 	.word	0x0800d367
 800d2e0:	0800d3ab 	.word	0x0800d3ab
 800d2e4:	0800d3ab 	.word	0x0800d3ab
 800d2e8:	0800d3ab 	.word	0x0800d3ab
 800d2ec:	0800d3ab 	.word	0x0800d3ab
 800d2f0:	0800d3ab 	.word	0x0800d3ab
 800d2f4:	0800d3ab 	.word	0x0800d3ab
 800d2f8:	0800d3ab 	.word	0x0800d3ab
 800d2fc:	0800d377 	.word	0x0800d377
 800d300:	0800d3ab 	.word	0x0800d3ab
 800d304:	0800d3ab 	.word	0x0800d3ab
 800d308:	0800d3ab 	.word	0x0800d3ab
 800d30c:	0800d3ab 	.word	0x0800d3ab
 800d310:	0800d3ab 	.word	0x0800d3ab
 800d314:	0800d3ab 	.word	0x0800d3ab
 800d318:	0800d3ab 	.word	0x0800d3ab
 800d31c:	0800d3ab 	.word	0x0800d3ab
 800d320:	0800d3ab 	.word	0x0800d3ab
 800d324:	0800d3ab 	.word	0x0800d3ab
 800d328:	0800d3ab 	.word	0x0800d3ab
 800d32c:	0800d3ab 	.word	0x0800d3ab
 800d330:	0800d3ab 	.word	0x0800d3ab
 800d334:	0800d3ab 	.word	0x0800d3ab
 800d338:	0800d3ab 	.word	0x0800d3ab
 800d33c:	0800d39d 	.word	0x0800d39d
 800d340:	2b40      	cmp	r3, #64	@ 0x40
 800d342:	d02e      	beq.n	800d3a2 <UART_SetConfig+0x8aa>
 800d344:	e031      	b.n	800d3aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d346:	f7f9 ff39 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
 800d34a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d34c:	e033      	b.n	800d3b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d34e:	f7f9 ff4b 	bl	80071e8 <HAL_RCC_GetPCLK2Freq>
 800d352:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d354:	e02f      	b.n	800d3b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fb ff16 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d364:	e027      	b.n	800d3b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d366:	f107 0318 	add.w	r3, r7, #24
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fc f862 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d374:	e01f      	b.n	800d3b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d376:	4b2d      	ldr	r3, [pc, #180]	@ (800d42c <UART_SetConfig+0x934>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f003 0320 	and.w	r3, r3, #32
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d009      	beq.n	800d396 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d382:	4b2a      	ldr	r3, [pc, #168]	@ (800d42c <UART_SetConfig+0x934>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	08db      	lsrs	r3, r3, #3
 800d388:	f003 0303 	and.w	r3, r3, #3
 800d38c:	4a24      	ldr	r2, [pc, #144]	@ (800d420 <UART_SetConfig+0x928>)
 800d38e:	fa22 f303 	lsr.w	r3, r2, r3
 800d392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d394:	e00f      	b.n	800d3b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d396:	4b22      	ldr	r3, [pc, #136]	@ (800d420 <UART_SetConfig+0x928>)
 800d398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d39a:	e00c      	b.n	800d3b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d39c:	4b21      	ldr	r3, [pc, #132]	@ (800d424 <UART_SetConfig+0x92c>)
 800d39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3a0:	e009      	b.n	800d3b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3a8:	e005      	b.n	800d3b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d3b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 80e7 	beq.w	800d58c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3c2:	4a19      	ldr	r2, [pc, #100]	@ (800d428 <UART_SetConfig+0x930>)
 800d3c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3d0:	005a      	lsls	r2, r3, #1
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	085b      	lsrs	r3, r3, #1
 800d3d8:	441a      	add	r2, r3
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e6:	2b0f      	cmp	r3, #15
 800d3e8:	d916      	bls.n	800d418 <UART_SetConfig+0x920>
 800d3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3f0:	d212      	bcs.n	800d418 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	f023 030f 	bic.w	r3, r3, #15
 800d3fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3fe:	085b      	lsrs	r3, r3, #1
 800d400:	b29b      	uxth	r3, r3
 800d402:	f003 0307 	and.w	r3, r3, #7
 800d406:	b29a      	uxth	r2, r3
 800d408:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d40a:	4313      	orrs	r3, r2
 800d40c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d414:	60da      	str	r2, [r3, #12]
 800d416:	e0b9      	b.n	800d58c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d418:	2301      	movs	r3, #1
 800d41a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d41e:	e0b5      	b.n	800d58c <UART_SetConfig+0xa94>
 800d420:	03d09000 	.word	0x03d09000
 800d424:	003d0900 	.word	0x003d0900
 800d428:	08017dec 	.word	0x08017dec
 800d42c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d430:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d434:	2b20      	cmp	r3, #32
 800d436:	dc49      	bgt.n	800d4cc <UART_SetConfig+0x9d4>
 800d438:	2b00      	cmp	r3, #0
 800d43a:	db7c      	blt.n	800d536 <UART_SetConfig+0xa3e>
 800d43c:	2b20      	cmp	r3, #32
 800d43e:	d87a      	bhi.n	800d536 <UART_SetConfig+0xa3e>
 800d440:	a201      	add	r2, pc, #4	@ (adr r2, 800d448 <UART_SetConfig+0x950>)
 800d442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d446:	bf00      	nop
 800d448:	0800d4d3 	.word	0x0800d4d3
 800d44c:	0800d4db 	.word	0x0800d4db
 800d450:	0800d537 	.word	0x0800d537
 800d454:	0800d537 	.word	0x0800d537
 800d458:	0800d4e3 	.word	0x0800d4e3
 800d45c:	0800d537 	.word	0x0800d537
 800d460:	0800d537 	.word	0x0800d537
 800d464:	0800d537 	.word	0x0800d537
 800d468:	0800d4f3 	.word	0x0800d4f3
 800d46c:	0800d537 	.word	0x0800d537
 800d470:	0800d537 	.word	0x0800d537
 800d474:	0800d537 	.word	0x0800d537
 800d478:	0800d537 	.word	0x0800d537
 800d47c:	0800d537 	.word	0x0800d537
 800d480:	0800d537 	.word	0x0800d537
 800d484:	0800d537 	.word	0x0800d537
 800d488:	0800d503 	.word	0x0800d503
 800d48c:	0800d537 	.word	0x0800d537
 800d490:	0800d537 	.word	0x0800d537
 800d494:	0800d537 	.word	0x0800d537
 800d498:	0800d537 	.word	0x0800d537
 800d49c:	0800d537 	.word	0x0800d537
 800d4a0:	0800d537 	.word	0x0800d537
 800d4a4:	0800d537 	.word	0x0800d537
 800d4a8:	0800d537 	.word	0x0800d537
 800d4ac:	0800d537 	.word	0x0800d537
 800d4b0:	0800d537 	.word	0x0800d537
 800d4b4:	0800d537 	.word	0x0800d537
 800d4b8:	0800d537 	.word	0x0800d537
 800d4bc:	0800d537 	.word	0x0800d537
 800d4c0:	0800d537 	.word	0x0800d537
 800d4c4:	0800d537 	.word	0x0800d537
 800d4c8:	0800d529 	.word	0x0800d529
 800d4cc:	2b40      	cmp	r3, #64	@ 0x40
 800d4ce:	d02e      	beq.n	800d52e <UART_SetConfig+0xa36>
 800d4d0:	e031      	b.n	800d536 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4d2:	f7f9 fe73 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
 800d4d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d4d8:	e033      	b.n	800d542 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4da:	f7f9 fe85 	bl	80071e8 <HAL_RCC_GetPCLK2Freq>
 800d4de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d4e0:	e02f      	b.n	800d542 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fb fe50 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4f0:	e027      	b.n	800d542 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4f2:	f107 0318 	add.w	r3, r7, #24
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fb ff9c 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d500:	e01f      	b.n	800d542 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d502:	4b2d      	ldr	r3, [pc, #180]	@ (800d5b8 <UART_SetConfig+0xac0>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f003 0320 	and.w	r3, r3, #32
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d009      	beq.n	800d522 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d50e:	4b2a      	ldr	r3, [pc, #168]	@ (800d5b8 <UART_SetConfig+0xac0>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	08db      	lsrs	r3, r3, #3
 800d514:	f003 0303 	and.w	r3, r3, #3
 800d518:	4a28      	ldr	r2, [pc, #160]	@ (800d5bc <UART_SetConfig+0xac4>)
 800d51a:	fa22 f303 	lsr.w	r3, r2, r3
 800d51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d520:	e00f      	b.n	800d542 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d522:	4b26      	ldr	r3, [pc, #152]	@ (800d5bc <UART_SetConfig+0xac4>)
 800d524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d526:	e00c      	b.n	800d542 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d528:	4b25      	ldr	r3, [pc, #148]	@ (800d5c0 <UART_SetConfig+0xac8>)
 800d52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d52c:	e009      	b.n	800d542 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d52e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d534:	e005      	b.n	800d542 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d536:	2300      	movs	r3, #0
 800d538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d540:	bf00      	nop
    }

    if (pclk != 0U)
 800d542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d544:	2b00      	cmp	r3, #0
 800d546:	d021      	beq.n	800d58c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d54c:	4a1d      	ldr	r2, [pc, #116]	@ (800d5c4 <UART_SetConfig+0xacc>)
 800d54e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d552:	461a      	mov	r2, r3
 800d554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d556:	fbb3 f2f2 	udiv	r2, r3, r2
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	085b      	lsrs	r3, r3, #1
 800d560:	441a      	add	r2, r3
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	fbb2 f3f3 	udiv	r3, r2, r3
 800d56a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d56e:	2b0f      	cmp	r3, #15
 800d570:	d909      	bls.n	800d586 <UART_SetConfig+0xa8e>
 800d572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d578:	d205      	bcs.n	800d586 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	60da      	str	r2, [r3, #12]
 800d584:	e002      	b.n	800d58c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	2201      	movs	r2, #1
 800d590:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	2201      	movs	r2, #1
 800d598:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d5a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3748      	adds	r7, #72	@ 0x48
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d5b6:	bf00      	nop
 800d5b8:	58024400 	.word	0x58024400
 800d5bc:	03d09000 	.word	0x03d09000
 800d5c0:	003d0900 	.word	0x003d0900
 800d5c4:	08017dec 	.word	0x08017dec

0800d5c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5d4:	f003 0308 	and.w	r3, r3, #8
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00a      	beq.n	800d5f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	430a      	orrs	r2, r1
 800d5f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5f6:	f003 0301 	and.w	r3, r3, #1
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00a      	beq.n	800d614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	430a      	orrs	r2, r1
 800d612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d618:	f003 0302 	and.w	r3, r3, #2
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00a      	beq.n	800d636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	430a      	orrs	r2, r1
 800d634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d63a:	f003 0304 	and.w	r3, r3, #4
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00a      	beq.n	800d658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	430a      	orrs	r2, r1
 800d656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d65c:	f003 0310 	and.w	r3, r3, #16
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00a      	beq.n	800d67a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	430a      	orrs	r2, r1
 800d678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d67e:	f003 0320 	and.w	r3, r3, #32
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00a      	beq.n	800d69c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	430a      	orrs	r2, r1
 800d69a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d01a      	beq.n	800d6de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	430a      	orrs	r2, r1
 800d6bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6c6:	d10a      	bne.n	800d6de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	430a      	orrs	r2, r1
 800d6dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00a      	beq.n	800d700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	430a      	orrs	r2, r1
 800d6fe:	605a      	str	r2, [r3, #4]
  }
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b098      	sub	sp, #96	@ 0x60
 800d710:	af02      	add	r7, sp, #8
 800d712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d71c:	f7f5 fdf2 	bl	8003304 <HAL_GetTick>
 800d720:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f003 0308 	and.w	r3, r3, #8
 800d72c:	2b08      	cmp	r3, #8
 800d72e:	d12f      	bne.n	800d790 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d738:	2200      	movs	r2, #0
 800d73a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 f88e 	bl	800d860 <UART_WaitOnFlagUntilTimeout>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d022      	beq.n	800d790 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d752:	e853 3f00 	ldrex	r3, [r3]
 800d756:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d75a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d75e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	461a      	mov	r2, r3
 800d766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d768:	647b      	str	r3, [r7, #68]	@ 0x44
 800d76a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d76e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d770:	e841 2300 	strex	r3, r2, [r1]
 800d774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1e6      	bne.n	800d74a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2220      	movs	r2, #32
 800d780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2200      	movs	r2, #0
 800d788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d78c:	2303      	movs	r3, #3
 800d78e:	e063      	b.n	800d858 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f003 0304 	and.w	r3, r3, #4
 800d79a:	2b04      	cmp	r3, #4
 800d79c:	d149      	bne.n	800d832 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d79e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f857 	bl	800d860 <UART_WaitOnFlagUntilTimeout>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d03c      	beq.n	800d832 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c0:	e853 3f00 	ldrex	r3, [r3]
 800d7c4:	623b      	str	r3, [r7, #32]
   return(result);
 800d7c6:	6a3b      	ldr	r3, [r7, #32]
 800d7c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7de:	e841 2300 	strex	r3, r2, [r1]
 800d7e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d1e6      	bne.n	800d7b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	3308      	adds	r3, #8
 800d7f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	e853 3f00 	ldrex	r3, [r3]
 800d7f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f023 0301 	bic.w	r3, r3, #1
 800d800:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	3308      	adds	r3, #8
 800d808:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d80a:	61fa      	str	r2, [r7, #28]
 800d80c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d80e:	69b9      	ldr	r1, [r7, #24]
 800d810:	69fa      	ldr	r2, [r7, #28]
 800d812:	e841 2300 	strex	r3, r2, [r1]
 800d816:	617b      	str	r3, [r7, #20]
   return(result);
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1e5      	bne.n	800d7ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2220      	movs	r2, #32
 800d822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d82e:	2303      	movs	r3, #3
 800d830:	e012      	b.n	800d858 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2220      	movs	r2, #32
 800d836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2220      	movs	r2, #32
 800d83e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3758      	adds	r7, #88	@ 0x58
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	603b      	str	r3, [r7, #0]
 800d86c:	4613      	mov	r3, r2
 800d86e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d870:	e04f      	b.n	800d912 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d878:	d04b      	beq.n	800d912 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d87a:	f7f5 fd43 	bl	8003304 <HAL_GetTick>
 800d87e:	4602      	mov	r2, r0
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	69ba      	ldr	r2, [r7, #24]
 800d886:	429a      	cmp	r2, r3
 800d888:	d302      	bcc.n	800d890 <UART_WaitOnFlagUntilTimeout+0x30>
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d101      	bne.n	800d894 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d890:	2303      	movs	r3, #3
 800d892:	e04e      	b.n	800d932 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f003 0304 	and.w	r3, r3, #4
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d037      	beq.n	800d912 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	2b80      	cmp	r3, #128	@ 0x80
 800d8a6:	d034      	beq.n	800d912 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	2b40      	cmp	r3, #64	@ 0x40
 800d8ac:	d031      	beq.n	800d912 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	f003 0308 	and.w	r3, r3, #8
 800d8b8:	2b08      	cmp	r3, #8
 800d8ba:	d110      	bne.n	800d8de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2208      	movs	r2, #8
 800d8c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f000 f839 	bl	800d93c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2208      	movs	r2, #8
 800d8ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e029      	b.n	800d932 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	69db      	ldr	r3, [r3, #28]
 800d8e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d8e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8ec:	d111      	bne.n	800d912 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d8f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f000 f81f 	bl	800d93c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2220      	movs	r2, #32
 800d902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d90e:	2303      	movs	r3, #3
 800d910:	e00f      	b.n	800d932 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	69da      	ldr	r2, [r3, #28]
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	4013      	ands	r3, r2
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	429a      	cmp	r2, r3
 800d920:	bf0c      	ite	eq
 800d922:	2301      	moveq	r3, #1
 800d924:	2300      	movne	r3, #0
 800d926:	b2db      	uxtb	r3, r3
 800d928:	461a      	mov	r2, r3
 800d92a:	79fb      	ldrb	r3, [r7, #7]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d0a0      	beq.n	800d872 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
	...

0800d93c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b095      	sub	sp, #84	@ 0x54
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94c:	e853 3f00 	ldrex	r3, [r3]
 800d950:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d958:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	461a      	mov	r2, r3
 800d960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d962:	643b      	str	r3, [r7, #64]	@ 0x40
 800d964:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d966:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d968:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d96a:	e841 2300 	strex	r3, r2, [r1]
 800d96e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1e6      	bne.n	800d944 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3308      	adds	r3, #8
 800d97c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	e853 3f00 	ldrex	r3, [r3]
 800d984:	61fb      	str	r3, [r7, #28]
   return(result);
 800d986:	69fa      	ldr	r2, [r7, #28]
 800d988:	4b1e      	ldr	r3, [pc, #120]	@ (800da04 <UART_EndRxTransfer+0xc8>)
 800d98a:	4013      	ands	r3, r2
 800d98c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	3308      	adds	r3, #8
 800d994:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d998:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d99c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d99e:	e841 2300 	strex	r3, r2, [r1]
 800d9a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1e5      	bne.n	800d976 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d118      	bne.n	800d9e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	e853 3f00 	ldrex	r3, [r3]
 800d9be:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	f023 0310 	bic.w	r3, r3, #16
 800d9c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9d0:	61bb      	str	r3, [r7, #24]
 800d9d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d4:	6979      	ldr	r1, [r7, #20]
 800d9d6:	69ba      	ldr	r2, [r7, #24]
 800d9d8:	e841 2300 	strex	r3, r2, [r1]
 800d9dc:	613b      	str	r3, [r7, #16]
   return(result);
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1e6      	bne.n	800d9b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2220      	movs	r2, #32
 800d9e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d9f8:	bf00      	nop
 800d9fa:	3754      	adds	r7, #84	@ 0x54
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	effffffe 	.word	0xeffffffe

0800da08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da16:	2b01      	cmp	r3, #1
 800da18:	d101      	bne.n	800da1e <HAL_UARTEx_DisableFifoMode+0x16>
 800da1a:	2302      	movs	r3, #2
 800da1c:	e027      	b.n	800da6e <HAL_UARTEx_DisableFifoMode+0x66>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2201      	movs	r2, #1
 800da22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2224      	movs	r2, #36	@ 0x24
 800da2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f022 0201 	bic.w	r2, r2, #1
 800da44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800da4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2220      	movs	r2, #32
 800da60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3714      	adds	r7, #20
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr

0800da7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b084      	sub	sp, #16
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d101      	bne.n	800da92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da8e:	2302      	movs	r3, #2
 800da90:	e02d      	b.n	800daee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2201      	movs	r2, #1
 800da96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2224      	movs	r2, #36	@ 0x24
 800da9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f022 0201 	bic.w	r2, r2, #1
 800dab8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	683a      	ldr	r2, [r7, #0]
 800daca:	430a      	orrs	r2, r1
 800dacc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 f850 	bl	800db74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2220      	movs	r2, #32
 800dae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
 800dafe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db06:	2b01      	cmp	r3, #1
 800db08:	d101      	bne.n	800db0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800db0a:	2302      	movs	r3, #2
 800db0c:	e02d      	b.n	800db6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2224      	movs	r2, #36	@ 0x24
 800db1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f022 0201 	bic.w	r2, r2, #1
 800db34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	430a      	orrs	r2, r1
 800db48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 f812 	bl	800db74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68fa      	ldr	r2, [r7, #12]
 800db56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2220      	movs	r2, #32
 800db5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db68:	2300      	movs	r3, #0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
	...

0800db74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db74:	b480      	push	{r7}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db80:	2b00      	cmp	r3, #0
 800db82:	d108      	bne.n	800db96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db94:	e031      	b.n	800dbfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db96:	2310      	movs	r3, #16
 800db98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db9a:	2310      	movs	r3, #16
 800db9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	0e5b      	lsrs	r3, r3, #25
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	f003 0307 	and.w	r3, r3, #7
 800dbac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	689b      	ldr	r3, [r3, #8]
 800dbb4:	0f5b      	lsrs	r3, r3, #29
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	f003 0307 	and.w	r3, r3, #7
 800dbbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dbbe:	7bbb      	ldrb	r3, [r7, #14]
 800dbc0:	7b3a      	ldrb	r2, [r7, #12]
 800dbc2:	4911      	ldr	r1, [pc, #68]	@ (800dc08 <UARTEx_SetNbDataToProcess+0x94>)
 800dbc4:	5c8a      	ldrb	r2, [r1, r2]
 800dbc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dbca:	7b3a      	ldrb	r2, [r7, #12]
 800dbcc:	490f      	ldr	r1, [pc, #60]	@ (800dc0c <UARTEx_SetNbDataToProcess+0x98>)
 800dbce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dbd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
 800dbde:	7b7a      	ldrb	r2, [r7, #13]
 800dbe0:	4909      	ldr	r1, [pc, #36]	@ (800dc08 <UARTEx_SetNbDataToProcess+0x94>)
 800dbe2:	5c8a      	ldrb	r2, [r1, r2]
 800dbe4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dbe8:	7b7a      	ldrb	r2, [r7, #13]
 800dbea:	4908      	ldr	r1, [pc, #32]	@ (800dc0c <UARTEx_SetNbDataToProcess+0x98>)
 800dbec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dbee:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dbfa:	bf00      	nop
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	08017e04 	.word	0x08017e04
 800dc0c:	08017e0c 	.word	0x08017e0c

0800dc10 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d101      	bne.n	800dc22 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e03c      	b.n	800dc9c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d106      	bne.n	800dc3c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7f5 f8a6 	bl	8002d88 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f022 0201 	bic.w	r2, r2, #1
 800dc52:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f85b 	bl	800dd10 <USART_SetConfig>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d101      	bne.n	800dc64 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800dc60:	2301      	movs	r3, #1
 800dc62:	e01b      	b.n	800dc9c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	685a      	ldr	r2, [r3, #4]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800dc72:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	689a      	ldr	r2, [r3, #8]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dc82:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f042 0201 	orr.w	r2, r2, #1
 800dc92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fd5b 	bl	800e750 <USART_CheckIdleState>
 800dc9a:	4603      	mov	r3, r0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	603b      	str	r3, [r7, #0]
 800dcb0:	4613      	mov	r3, r2
 800dcb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800dcb4:	e018      	b.n	800dce8 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcbc:	d014      	beq.n	800dce8 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcbe:	f7f5 fb21 	bl	8003304 <HAL_GetTick>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	69ba      	ldr	r2, [r7, #24]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d302      	bcc.n	800dcd4 <USART_WaitOnFlagUntilTimeout+0x30>
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d109      	bne.n	800dce8 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800dce4:	2303      	movs	r3, #3
 800dce6:	e00f      	b.n	800dd08 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	69da      	ldr	r2, [r3, #28]
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	4013      	ands	r3, r2
 800dcf2:	68ba      	ldr	r2, [r7, #8]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	bf0c      	ite	eq
 800dcf8:	2301      	moveq	r3, #1
 800dcfa:	2300      	movne	r3, #0
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	461a      	mov	r2, r3
 800dd00:	79fb      	ldrb	r3, [r7, #7]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d0d7      	beq.n	800dcb6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b08e      	sub	sp, #56	@ 0x38
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	689a      	ldr	r2, [r3, #8]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	695b      	ldr	r3, [r3, #20]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	4bc9      	ldr	r3, [pc, #804]	@ (800e064 <USART_SetConfig+0x354>)
 800dd40:	4013      	ands	r3, r2
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	6812      	ldr	r2, [r2, #0]
 800dd46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd48:	430b      	orrs	r3, r1
 800dd4a:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800dd4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dd50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	699a      	ldr	r2, [r3, #24]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	69db      	ldr	r3, [r3, #28]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	68db      	ldr	r3, [r3, #12]
 800dd70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd72:	4313      	orrs	r3, r2
 800dd74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	4bba      	ldr	r3, [pc, #744]	@ (800e068 <USART_SetConfig+0x358>)
 800dd7e:	4013      	ands	r3, r2
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	6812      	ldr	r2, [r2, #0]
 800dd84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd86:	430b      	orrs	r3, r1
 800dd88:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd90:	f023 010f 	bic.w	r1, r3, #15
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	430a      	orrs	r2, r1
 800dd9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4ab1      	ldr	r2, [pc, #708]	@ (800e06c <USART_SetConfig+0x35c>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d176      	bne.n	800de98 <USART_SetConfig+0x188>
 800ddaa:	4bb1      	ldr	r3, [pc, #708]	@ (800e070 <USART_SetConfig+0x360>)
 800ddac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddb2:	2b28      	cmp	r3, #40	@ 0x28
 800ddb4:	d86c      	bhi.n	800de90 <USART_SetConfig+0x180>
 800ddb6:	a201      	add	r2, pc, #4	@ (adr r2, 800ddbc <USART_SetConfig+0xac>)
 800ddb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddbc:	0800de61 	.word	0x0800de61
 800ddc0:	0800de91 	.word	0x0800de91
 800ddc4:	0800de91 	.word	0x0800de91
 800ddc8:	0800de91 	.word	0x0800de91
 800ddcc:	0800de91 	.word	0x0800de91
 800ddd0:	0800de91 	.word	0x0800de91
 800ddd4:	0800de91 	.word	0x0800de91
 800ddd8:	0800de91 	.word	0x0800de91
 800dddc:	0800de69 	.word	0x0800de69
 800dde0:	0800de91 	.word	0x0800de91
 800dde4:	0800de91 	.word	0x0800de91
 800dde8:	0800de91 	.word	0x0800de91
 800ddec:	0800de91 	.word	0x0800de91
 800ddf0:	0800de91 	.word	0x0800de91
 800ddf4:	0800de91 	.word	0x0800de91
 800ddf8:	0800de91 	.word	0x0800de91
 800ddfc:	0800de71 	.word	0x0800de71
 800de00:	0800de91 	.word	0x0800de91
 800de04:	0800de91 	.word	0x0800de91
 800de08:	0800de91 	.word	0x0800de91
 800de0c:	0800de91 	.word	0x0800de91
 800de10:	0800de91 	.word	0x0800de91
 800de14:	0800de91 	.word	0x0800de91
 800de18:	0800de91 	.word	0x0800de91
 800de1c:	0800de79 	.word	0x0800de79
 800de20:	0800de91 	.word	0x0800de91
 800de24:	0800de91 	.word	0x0800de91
 800de28:	0800de91 	.word	0x0800de91
 800de2c:	0800de91 	.word	0x0800de91
 800de30:	0800de91 	.word	0x0800de91
 800de34:	0800de91 	.word	0x0800de91
 800de38:	0800de91 	.word	0x0800de91
 800de3c:	0800de81 	.word	0x0800de81
 800de40:	0800de91 	.word	0x0800de91
 800de44:	0800de91 	.word	0x0800de91
 800de48:	0800de91 	.word	0x0800de91
 800de4c:	0800de91 	.word	0x0800de91
 800de50:	0800de91 	.word	0x0800de91
 800de54:	0800de91 	.word	0x0800de91
 800de58:	0800de91 	.word	0x0800de91
 800de5c:	0800de89 	.word	0x0800de89
 800de60:	2301      	movs	r3, #1
 800de62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800de66:	e112      	b.n	800e08e <USART_SetConfig+0x37e>
 800de68:	2302      	movs	r3, #2
 800de6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800de6e:	e10e      	b.n	800e08e <USART_SetConfig+0x37e>
 800de70:	2304      	movs	r3, #4
 800de72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800de76:	e10a      	b.n	800e08e <USART_SetConfig+0x37e>
 800de78:	2308      	movs	r3, #8
 800de7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800de7e:	e106      	b.n	800e08e <USART_SetConfig+0x37e>
 800de80:	2310      	movs	r3, #16
 800de82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800de86:	e102      	b.n	800e08e <USART_SetConfig+0x37e>
 800de88:	2320      	movs	r3, #32
 800de8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800de8e:	e0fe      	b.n	800e08e <USART_SetConfig+0x37e>
 800de90:	2340      	movs	r3, #64	@ 0x40
 800de92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800de96:	e0fa      	b.n	800e08e <USART_SetConfig+0x37e>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a75      	ldr	r2, [pc, #468]	@ (800e074 <USART_SetConfig+0x364>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d130      	bne.n	800df04 <USART_SetConfig+0x1f4>
 800dea2:	4b73      	ldr	r3, [pc, #460]	@ (800e070 <USART_SetConfig+0x360>)
 800dea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dea6:	f003 0307 	and.w	r3, r3, #7
 800deaa:	2b05      	cmp	r3, #5
 800deac:	d826      	bhi.n	800defc <USART_SetConfig+0x1ec>
 800deae:	a201      	add	r2, pc, #4	@ (adr r2, 800deb4 <USART_SetConfig+0x1a4>)
 800deb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb4:	0800decd 	.word	0x0800decd
 800deb8:	0800ded5 	.word	0x0800ded5
 800debc:	0800dedd 	.word	0x0800dedd
 800dec0:	0800dee5 	.word	0x0800dee5
 800dec4:	0800deed 	.word	0x0800deed
 800dec8:	0800def5 	.word	0x0800def5
 800decc:	2300      	movs	r3, #0
 800dece:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ded2:	e0dc      	b.n	800e08e <USART_SetConfig+0x37e>
 800ded4:	2302      	movs	r3, #2
 800ded6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800deda:	e0d8      	b.n	800e08e <USART_SetConfig+0x37e>
 800dedc:	2304      	movs	r3, #4
 800dede:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dee2:	e0d4      	b.n	800e08e <USART_SetConfig+0x37e>
 800dee4:	2308      	movs	r3, #8
 800dee6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800deea:	e0d0      	b.n	800e08e <USART_SetConfig+0x37e>
 800deec:	2310      	movs	r3, #16
 800deee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800def2:	e0cc      	b.n	800e08e <USART_SetConfig+0x37e>
 800def4:	2320      	movs	r3, #32
 800def6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800defa:	e0c8      	b.n	800e08e <USART_SetConfig+0x37e>
 800defc:	2340      	movs	r3, #64	@ 0x40
 800defe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800df02:	e0c4      	b.n	800e08e <USART_SetConfig+0x37e>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a5b      	ldr	r2, [pc, #364]	@ (800e078 <USART_SetConfig+0x368>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d130      	bne.n	800df70 <USART_SetConfig+0x260>
 800df0e:	4b58      	ldr	r3, [pc, #352]	@ (800e070 <USART_SetConfig+0x360>)
 800df10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df12:	f003 0307 	and.w	r3, r3, #7
 800df16:	2b05      	cmp	r3, #5
 800df18:	d826      	bhi.n	800df68 <USART_SetConfig+0x258>
 800df1a:	a201      	add	r2, pc, #4	@ (adr r2, 800df20 <USART_SetConfig+0x210>)
 800df1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df20:	0800df39 	.word	0x0800df39
 800df24:	0800df41 	.word	0x0800df41
 800df28:	0800df49 	.word	0x0800df49
 800df2c:	0800df51 	.word	0x0800df51
 800df30:	0800df59 	.word	0x0800df59
 800df34:	0800df61 	.word	0x0800df61
 800df38:	2300      	movs	r3, #0
 800df3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800df3e:	e0a6      	b.n	800e08e <USART_SetConfig+0x37e>
 800df40:	2302      	movs	r3, #2
 800df42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800df46:	e0a2      	b.n	800e08e <USART_SetConfig+0x37e>
 800df48:	2304      	movs	r3, #4
 800df4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800df4e:	e09e      	b.n	800e08e <USART_SetConfig+0x37e>
 800df50:	2308      	movs	r3, #8
 800df52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800df56:	e09a      	b.n	800e08e <USART_SetConfig+0x37e>
 800df58:	2310      	movs	r3, #16
 800df5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800df5e:	e096      	b.n	800e08e <USART_SetConfig+0x37e>
 800df60:	2320      	movs	r3, #32
 800df62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800df66:	e092      	b.n	800e08e <USART_SetConfig+0x37e>
 800df68:	2340      	movs	r3, #64	@ 0x40
 800df6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800df6e:	e08e      	b.n	800e08e <USART_SetConfig+0x37e>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a41      	ldr	r2, [pc, #260]	@ (800e07c <USART_SetConfig+0x36c>)
 800df76:	4293      	cmp	r3, r2
 800df78:	f040 8086 	bne.w	800e088 <USART_SetConfig+0x378>
 800df7c:	4b3c      	ldr	r3, [pc, #240]	@ (800e070 <USART_SetConfig+0x360>)
 800df7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800df84:	2b28      	cmp	r3, #40	@ 0x28
 800df86:	d87b      	bhi.n	800e080 <USART_SetConfig+0x370>
 800df88:	a201      	add	r2, pc, #4	@ (adr r2, 800df90 <USART_SetConfig+0x280>)
 800df8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8e:	bf00      	nop
 800df90:	0800e035 	.word	0x0800e035
 800df94:	0800e081 	.word	0x0800e081
 800df98:	0800e081 	.word	0x0800e081
 800df9c:	0800e081 	.word	0x0800e081
 800dfa0:	0800e081 	.word	0x0800e081
 800dfa4:	0800e081 	.word	0x0800e081
 800dfa8:	0800e081 	.word	0x0800e081
 800dfac:	0800e081 	.word	0x0800e081
 800dfb0:	0800e03d 	.word	0x0800e03d
 800dfb4:	0800e081 	.word	0x0800e081
 800dfb8:	0800e081 	.word	0x0800e081
 800dfbc:	0800e081 	.word	0x0800e081
 800dfc0:	0800e081 	.word	0x0800e081
 800dfc4:	0800e081 	.word	0x0800e081
 800dfc8:	0800e081 	.word	0x0800e081
 800dfcc:	0800e081 	.word	0x0800e081
 800dfd0:	0800e045 	.word	0x0800e045
 800dfd4:	0800e081 	.word	0x0800e081
 800dfd8:	0800e081 	.word	0x0800e081
 800dfdc:	0800e081 	.word	0x0800e081
 800dfe0:	0800e081 	.word	0x0800e081
 800dfe4:	0800e081 	.word	0x0800e081
 800dfe8:	0800e081 	.word	0x0800e081
 800dfec:	0800e081 	.word	0x0800e081
 800dff0:	0800e04d 	.word	0x0800e04d
 800dff4:	0800e081 	.word	0x0800e081
 800dff8:	0800e081 	.word	0x0800e081
 800dffc:	0800e081 	.word	0x0800e081
 800e000:	0800e081 	.word	0x0800e081
 800e004:	0800e081 	.word	0x0800e081
 800e008:	0800e081 	.word	0x0800e081
 800e00c:	0800e081 	.word	0x0800e081
 800e010:	0800e055 	.word	0x0800e055
 800e014:	0800e081 	.word	0x0800e081
 800e018:	0800e081 	.word	0x0800e081
 800e01c:	0800e081 	.word	0x0800e081
 800e020:	0800e081 	.word	0x0800e081
 800e024:	0800e081 	.word	0x0800e081
 800e028:	0800e081 	.word	0x0800e081
 800e02c:	0800e081 	.word	0x0800e081
 800e030:	0800e05d 	.word	0x0800e05d
 800e034:	2301      	movs	r3, #1
 800e036:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e03a:	e028      	b.n	800e08e <USART_SetConfig+0x37e>
 800e03c:	2302      	movs	r3, #2
 800e03e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e042:	e024      	b.n	800e08e <USART_SetConfig+0x37e>
 800e044:	2304      	movs	r3, #4
 800e046:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e04a:	e020      	b.n	800e08e <USART_SetConfig+0x37e>
 800e04c:	2308      	movs	r3, #8
 800e04e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e052:	e01c      	b.n	800e08e <USART_SetConfig+0x37e>
 800e054:	2310      	movs	r3, #16
 800e056:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e05a:	e018      	b.n	800e08e <USART_SetConfig+0x37e>
 800e05c:	2320      	movs	r3, #32
 800e05e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e062:	e014      	b.n	800e08e <USART_SetConfig+0x37e>
 800e064:	cfff69f3 	.word	0xcfff69f3
 800e068:	ffffc0f6 	.word	0xffffc0f6
 800e06c:	40011000 	.word	0x40011000
 800e070:	58024400 	.word	0x58024400
 800e074:	40004400 	.word	0x40004400
 800e078:	40004800 	.word	0x40004800
 800e07c:	40011400 	.word	0x40011400
 800e080:	2340      	movs	r3, #64	@ 0x40
 800e082:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e086:	e002      	b.n	800e08e <USART_SetConfig+0x37e>
 800e088:	2340      	movs	r3, #64	@ 0x40
 800e08a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800e08e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e092:	2b20      	cmp	r3, #32
 800e094:	f200 8329 	bhi.w	800e6ea <USART_SetConfig+0x9da>
 800e098:	a201      	add	r2, pc, #4	@ (adr r2, 800e0a0 <USART_SetConfig+0x390>)
 800e09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e09e:	bf00      	nop
 800e0a0:	0800e125 	.word	0x0800e125
 800e0a4:	0800e1db 	.word	0x0800e1db
 800e0a8:	0800e291 	.word	0x0800e291
 800e0ac:	0800e6eb 	.word	0x0800e6eb
 800e0b0:	0800e34b 	.word	0x0800e34b
 800e0b4:	0800e6eb 	.word	0x0800e6eb
 800e0b8:	0800e6eb 	.word	0x0800e6eb
 800e0bc:	0800e6eb 	.word	0x0800e6eb
 800e0c0:	0800e405 	.word	0x0800e405
 800e0c4:	0800e6eb 	.word	0x0800e6eb
 800e0c8:	0800e6eb 	.word	0x0800e6eb
 800e0cc:	0800e6eb 	.word	0x0800e6eb
 800e0d0:	0800e6eb 	.word	0x0800e6eb
 800e0d4:	0800e6eb 	.word	0x0800e6eb
 800e0d8:	0800e6eb 	.word	0x0800e6eb
 800e0dc:	0800e6eb 	.word	0x0800e6eb
 800e0e0:	0800e57d 	.word	0x0800e57d
 800e0e4:	0800e6eb 	.word	0x0800e6eb
 800e0e8:	0800e6eb 	.word	0x0800e6eb
 800e0ec:	0800e6eb 	.word	0x0800e6eb
 800e0f0:	0800e6eb 	.word	0x0800e6eb
 800e0f4:	0800e6eb 	.word	0x0800e6eb
 800e0f8:	0800e6eb 	.word	0x0800e6eb
 800e0fc:	0800e6eb 	.word	0x0800e6eb
 800e100:	0800e6eb 	.word	0x0800e6eb
 800e104:	0800e6eb 	.word	0x0800e6eb
 800e108:	0800e6eb 	.word	0x0800e6eb
 800e10c:	0800e6eb 	.word	0x0800e6eb
 800e110:	0800e6eb 	.word	0x0800e6eb
 800e114:	0800e6eb 	.word	0x0800e6eb
 800e118:	0800e6eb 	.word	0x0800e6eb
 800e11c:	0800e6eb 	.word	0x0800e6eb
 800e120:	0800e639 	.word	0x0800e639
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800e124:	f7f9 f84a 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
 800e128:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d044      	beq.n	800e1bc <USART_SetConfig+0x4ac>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e136:	2b01      	cmp	r3, #1
 800e138:	d03e      	beq.n	800e1b8 <USART_SetConfig+0x4a8>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e13e:	2b02      	cmp	r3, #2
 800e140:	d038      	beq.n	800e1b4 <USART_SetConfig+0x4a4>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e146:	2b03      	cmp	r3, #3
 800e148:	d032      	beq.n	800e1b0 <USART_SetConfig+0x4a0>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e14e:	2b04      	cmp	r3, #4
 800e150:	d02c      	beq.n	800e1ac <USART_SetConfig+0x49c>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e156:	2b05      	cmp	r3, #5
 800e158:	d026      	beq.n	800e1a8 <USART_SetConfig+0x498>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e15e:	2b06      	cmp	r3, #6
 800e160:	d020      	beq.n	800e1a4 <USART_SetConfig+0x494>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e166:	2b07      	cmp	r3, #7
 800e168:	d01a      	beq.n	800e1a0 <USART_SetConfig+0x490>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e16e:	2b08      	cmp	r3, #8
 800e170:	d014      	beq.n	800e19c <USART_SetConfig+0x48c>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e176:	2b09      	cmp	r3, #9
 800e178:	d00e      	beq.n	800e198 <USART_SetConfig+0x488>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e17e:	2b0a      	cmp	r3, #10
 800e180:	d008      	beq.n	800e194 <USART_SetConfig+0x484>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e186:	2b0b      	cmp	r3, #11
 800e188:	d102      	bne.n	800e190 <USART_SetConfig+0x480>
 800e18a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e18e:	e016      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e190:	2301      	movs	r3, #1
 800e192:	e014      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e194:	2380      	movs	r3, #128	@ 0x80
 800e196:	e012      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e198:	2340      	movs	r3, #64	@ 0x40
 800e19a:	e010      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e19c:	2320      	movs	r3, #32
 800e19e:	e00e      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e1a0:	2310      	movs	r3, #16
 800e1a2:	e00c      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e1a4:	230c      	movs	r3, #12
 800e1a6:	e00a      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e1a8:	230a      	movs	r3, #10
 800e1aa:	e008      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e1ac:	2308      	movs	r3, #8
 800e1ae:	e006      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e1b0:	2306      	movs	r3, #6
 800e1b2:	e004      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e1b4:	2304      	movs	r3, #4
 800e1b6:	e002      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e1b8:	2302      	movs	r3, #2
 800e1ba:	e000      	b.n	800e1be <USART_SetConfig+0x4ae>
 800e1bc:	2301      	movs	r3, #1
 800e1be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1c4:	005a      	lsls	r2, r3, #1
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	085b      	lsrs	r3, r3, #1
 800e1cc:	441a      	add	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1d6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e1d8:	e28b      	b.n	800e6f2 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800e1da:	f7f9 f805 	bl	80071e8 <HAL_RCC_GetPCLK2Freq>
 800e1de:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d044      	beq.n	800e272 <USART_SetConfig+0x562>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d03e      	beq.n	800e26e <USART_SetConfig+0x55e>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1f4:	2b02      	cmp	r3, #2
 800e1f6:	d038      	beq.n	800e26a <USART_SetConfig+0x55a>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1fc:	2b03      	cmp	r3, #3
 800e1fe:	d032      	beq.n	800e266 <USART_SetConfig+0x556>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e204:	2b04      	cmp	r3, #4
 800e206:	d02c      	beq.n	800e262 <USART_SetConfig+0x552>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e20c:	2b05      	cmp	r3, #5
 800e20e:	d026      	beq.n	800e25e <USART_SetConfig+0x54e>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e214:	2b06      	cmp	r3, #6
 800e216:	d020      	beq.n	800e25a <USART_SetConfig+0x54a>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e21c:	2b07      	cmp	r3, #7
 800e21e:	d01a      	beq.n	800e256 <USART_SetConfig+0x546>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e224:	2b08      	cmp	r3, #8
 800e226:	d014      	beq.n	800e252 <USART_SetConfig+0x542>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e22c:	2b09      	cmp	r3, #9
 800e22e:	d00e      	beq.n	800e24e <USART_SetConfig+0x53e>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e234:	2b0a      	cmp	r3, #10
 800e236:	d008      	beq.n	800e24a <USART_SetConfig+0x53a>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e23c:	2b0b      	cmp	r3, #11
 800e23e:	d102      	bne.n	800e246 <USART_SetConfig+0x536>
 800e240:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e244:	e016      	b.n	800e274 <USART_SetConfig+0x564>
 800e246:	2301      	movs	r3, #1
 800e248:	e014      	b.n	800e274 <USART_SetConfig+0x564>
 800e24a:	2380      	movs	r3, #128	@ 0x80
 800e24c:	e012      	b.n	800e274 <USART_SetConfig+0x564>
 800e24e:	2340      	movs	r3, #64	@ 0x40
 800e250:	e010      	b.n	800e274 <USART_SetConfig+0x564>
 800e252:	2320      	movs	r3, #32
 800e254:	e00e      	b.n	800e274 <USART_SetConfig+0x564>
 800e256:	2310      	movs	r3, #16
 800e258:	e00c      	b.n	800e274 <USART_SetConfig+0x564>
 800e25a:	230c      	movs	r3, #12
 800e25c:	e00a      	b.n	800e274 <USART_SetConfig+0x564>
 800e25e:	230a      	movs	r3, #10
 800e260:	e008      	b.n	800e274 <USART_SetConfig+0x564>
 800e262:	2308      	movs	r3, #8
 800e264:	e006      	b.n	800e274 <USART_SetConfig+0x564>
 800e266:	2306      	movs	r3, #6
 800e268:	e004      	b.n	800e274 <USART_SetConfig+0x564>
 800e26a:	2304      	movs	r3, #4
 800e26c:	e002      	b.n	800e274 <USART_SetConfig+0x564>
 800e26e:	2302      	movs	r3, #2
 800e270:	e000      	b.n	800e274 <USART_SetConfig+0x564>
 800e272:	2301      	movs	r3, #1
 800e274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e276:	fbb2 f3f3 	udiv	r3, r2, r3
 800e27a:	005a      	lsls	r2, r3, #1
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	085b      	lsrs	r3, r3, #1
 800e282:	441a      	add	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	fbb2 f3f3 	udiv	r3, r2, r3
 800e28c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e28e:	e230      	b.n	800e6f2 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e290:	f107 0318 	add.w	r3, r7, #24
 800e294:	4618      	mov	r0, r3
 800e296:	f7fa ff79 	bl	800918c <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800e29a:	69fa      	ldr	r2, [r7, #28]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d044      	beq.n	800e32e <USART_SetConfig+0x61e>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d03e      	beq.n	800e32a <USART_SetConfig+0x61a>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b0:	2b02      	cmp	r3, #2
 800e2b2:	d038      	beq.n	800e326 <USART_SetConfig+0x616>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b8:	2b03      	cmp	r3, #3
 800e2ba:	d032      	beq.n	800e322 <USART_SetConfig+0x612>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2c0:	2b04      	cmp	r3, #4
 800e2c2:	d02c      	beq.n	800e31e <USART_SetConfig+0x60e>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2c8:	2b05      	cmp	r3, #5
 800e2ca:	d026      	beq.n	800e31a <USART_SetConfig+0x60a>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2d0:	2b06      	cmp	r3, #6
 800e2d2:	d020      	beq.n	800e316 <USART_SetConfig+0x606>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2d8:	2b07      	cmp	r3, #7
 800e2da:	d01a      	beq.n	800e312 <USART_SetConfig+0x602>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2e0:	2b08      	cmp	r3, #8
 800e2e2:	d014      	beq.n	800e30e <USART_SetConfig+0x5fe>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2e8:	2b09      	cmp	r3, #9
 800e2ea:	d00e      	beq.n	800e30a <USART_SetConfig+0x5fa>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f0:	2b0a      	cmp	r3, #10
 800e2f2:	d008      	beq.n	800e306 <USART_SetConfig+0x5f6>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f8:	2b0b      	cmp	r3, #11
 800e2fa:	d102      	bne.n	800e302 <USART_SetConfig+0x5f2>
 800e2fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e300:	e016      	b.n	800e330 <USART_SetConfig+0x620>
 800e302:	2301      	movs	r3, #1
 800e304:	e014      	b.n	800e330 <USART_SetConfig+0x620>
 800e306:	2380      	movs	r3, #128	@ 0x80
 800e308:	e012      	b.n	800e330 <USART_SetConfig+0x620>
 800e30a:	2340      	movs	r3, #64	@ 0x40
 800e30c:	e010      	b.n	800e330 <USART_SetConfig+0x620>
 800e30e:	2320      	movs	r3, #32
 800e310:	e00e      	b.n	800e330 <USART_SetConfig+0x620>
 800e312:	2310      	movs	r3, #16
 800e314:	e00c      	b.n	800e330 <USART_SetConfig+0x620>
 800e316:	230c      	movs	r3, #12
 800e318:	e00a      	b.n	800e330 <USART_SetConfig+0x620>
 800e31a:	230a      	movs	r3, #10
 800e31c:	e008      	b.n	800e330 <USART_SetConfig+0x620>
 800e31e:	2308      	movs	r3, #8
 800e320:	e006      	b.n	800e330 <USART_SetConfig+0x620>
 800e322:	2306      	movs	r3, #6
 800e324:	e004      	b.n	800e330 <USART_SetConfig+0x620>
 800e326:	2304      	movs	r3, #4
 800e328:	e002      	b.n	800e330 <USART_SetConfig+0x620>
 800e32a:	2302      	movs	r3, #2
 800e32c:	e000      	b.n	800e330 <USART_SetConfig+0x620>
 800e32e:	2301      	movs	r3, #1
 800e330:	fbb2 f3f3 	udiv	r3, r2, r3
 800e334:	005a      	lsls	r2, r3, #1
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	085b      	lsrs	r3, r3, #1
 800e33c:	441a      	add	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	fbb2 f3f3 	udiv	r3, r2, r3
 800e346:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e348:	e1d3      	b.n	800e6f2 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e34a:	f107 030c 	add.w	r3, r7, #12
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fb f870 	bl	8009434 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800e354:	693a      	ldr	r2, [r7, #16]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d044      	beq.n	800e3e8 <USART_SetConfig+0x6d8>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e362:	2b01      	cmp	r3, #1
 800e364:	d03e      	beq.n	800e3e4 <USART_SetConfig+0x6d4>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e36a:	2b02      	cmp	r3, #2
 800e36c:	d038      	beq.n	800e3e0 <USART_SetConfig+0x6d0>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e372:	2b03      	cmp	r3, #3
 800e374:	d032      	beq.n	800e3dc <USART_SetConfig+0x6cc>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e37a:	2b04      	cmp	r3, #4
 800e37c:	d02c      	beq.n	800e3d8 <USART_SetConfig+0x6c8>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e382:	2b05      	cmp	r3, #5
 800e384:	d026      	beq.n	800e3d4 <USART_SetConfig+0x6c4>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e38a:	2b06      	cmp	r3, #6
 800e38c:	d020      	beq.n	800e3d0 <USART_SetConfig+0x6c0>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e392:	2b07      	cmp	r3, #7
 800e394:	d01a      	beq.n	800e3cc <USART_SetConfig+0x6bc>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e39a:	2b08      	cmp	r3, #8
 800e39c:	d014      	beq.n	800e3c8 <USART_SetConfig+0x6b8>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3a2:	2b09      	cmp	r3, #9
 800e3a4:	d00e      	beq.n	800e3c4 <USART_SetConfig+0x6b4>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3aa:	2b0a      	cmp	r3, #10
 800e3ac:	d008      	beq.n	800e3c0 <USART_SetConfig+0x6b0>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3b2:	2b0b      	cmp	r3, #11
 800e3b4:	d102      	bne.n	800e3bc <USART_SetConfig+0x6ac>
 800e3b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e3ba:	e016      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e014      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3c0:	2380      	movs	r3, #128	@ 0x80
 800e3c2:	e012      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3c4:	2340      	movs	r3, #64	@ 0x40
 800e3c6:	e010      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3c8:	2320      	movs	r3, #32
 800e3ca:	e00e      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3cc:	2310      	movs	r3, #16
 800e3ce:	e00c      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3d0:	230c      	movs	r3, #12
 800e3d2:	e00a      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3d4:	230a      	movs	r3, #10
 800e3d6:	e008      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3d8:	2308      	movs	r3, #8
 800e3da:	e006      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3dc:	2306      	movs	r3, #6
 800e3de:	e004      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3e0:	2304      	movs	r3, #4
 800e3e2:	e002      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	e000      	b.n	800e3ea <USART_SetConfig+0x6da>
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3ee:	005a      	lsls	r2, r3, #1
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	085b      	lsrs	r3, r3, #1
 800e3f6:	441a      	add	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e400:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e402:	e176      	b.n	800e6f2 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e404:	4b89      	ldr	r3, [pc, #548]	@ (800e62c <USART_SetConfig+0x91c>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f003 0320 	and.w	r3, r3, #32
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d05d      	beq.n	800e4cc <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800e410:	4b86      	ldr	r3, [pc, #536]	@ (800e62c <USART_SetConfig+0x91c>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	08db      	lsrs	r3, r3, #3
 800e416:	f003 0303 	and.w	r3, r3, #3
 800e41a:	4a85      	ldr	r2, [pc, #532]	@ (800e630 <USART_SetConfig+0x920>)
 800e41c:	40da      	lsrs	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e422:	2b00      	cmp	r3, #0
 800e424:	d044      	beq.n	800e4b0 <USART_SetConfig+0x7a0>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d03e      	beq.n	800e4ac <USART_SetConfig+0x79c>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e432:	2b02      	cmp	r3, #2
 800e434:	d038      	beq.n	800e4a8 <USART_SetConfig+0x798>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e43a:	2b03      	cmp	r3, #3
 800e43c:	d032      	beq.n	800e4a4 <USART_SetConfig+0x794>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e442:	2b04      	cmp	r3, #4
 800e444:	d02c      	beq.n	800e4a0 <USART_SetConfig+0x790>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e44a:	2b05      	cmp	r3, #5
 800e44c:	d026      	beq.n	800e49c <USART_SetConfig+0x78c>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e452:	2b06      	cmp	r3, #6
 800e454:	d020      	beq.n	800e498 <USART_SetConfig+0x788>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e45a:	2b07      	cmp	r3, #7
 800e45c:	d01a      	beq.n	800e494 <USART_SetConfig+0x784>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e462:	2b08      	cmp	r3, #8
 800e464:	d014      	beq.n	800e490 <USART_SetConfig+0x780>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e46a:	2b09      	cmp	r3, #9
 800e46c:	d00e      	beq.n	800e48c <USART_SetConfig+0x77c>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e472:	2b0a      	cmp	r3, #10
 800e474:	d008      	beq.n	800e488 <USART_SetConfig+0x778>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e47a:	2b0b      	cmp	r3, #11
 800e47c:	d102      	bne.n	800e484 <USART_SetConfig+0x774>
 800e47e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e482:	e016      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e484:	2301      	movs	r3, #1
 800e486:	e014      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e488:	2380      	movs	r3, #128	@ 0x80
 800e48a:	e012      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e48c:	2340      	movs	r3, #64	@ 0x40
 800e48e:	e010      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e490:	2320      	movs	r3, #32
 800e492:	e00e      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e494:	2310      	movs	r3, #16
 800e496:	e00c      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e498:	230c      	movs	r3, #12
 800e49a:	e00a      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e49c:	230a      	movs	r3, #10
 800e49e:	e008      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e4a0:	2308      	movs	r3, #8
 800e4a2:	e006      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e4a4:	2306      	movs	r3, #6
 800e4a6:	e004      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e4a8:	2304      	movs	r3, #4
 800e4aa:	e002      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e4ac:	2302      	movs	r3, #2
 800e4ae:	e000      	b.n	800e4b2 <USART_SetConfig+0x7a2>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4b6:	005a      	lsls	r2, r3, #1
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	085b      	lsrs	r3, r3, #1
 800e4be:	441a      	add	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4c8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800e4ca:	e112      	b.n	800e6f2 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d044      	beq.n	800e55e <USART_SetConfig+0x84e>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d03e      	beq.n	800e55a <USART_SetConfig+0x84a>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4e0:	2b02      	cmp	r3, #2
 800e4e2:	d038      	beq.n	800e556 <USART_SetConfig+0x846>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4e8:	2b03      	cmp	r3, #3
 800e4ea:	d032      	beq.n	800e552 <USART_SetConfig+0x842>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4f0:	2b04      	cmp	r3, #4
 800e4f2:	d02c      	beq.n	800e54e <USART_SetConfig+0x83e>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4f8:	2b05      	cmp	r3, #5
 800e4fa:	d026      	beq.n	800e54a <USART_SetConfig+0x83a>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e500:	2b06      	cmp	r3, #6
 800e502:	d020      	beq.n	800e546 <USART_SetConfig+0x836>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e508:	2b07      	cmp	r3, #7
 800e50a:	d01a      	beq.n	800e542 <USART_SetConfig+0x832>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e510:	2b08      	cmp	r3, #8
 800e512:	d014      	beq.n	800e53e <USART_SetConfig+0x82e>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e518:	2b09      	cmp	r3, #9
 800e51a:	d00e      	beq.n	800e53a <USART_SetConfig+0x82a>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e520:	2b0a      	cmp	r3, #10
 800e522:	d008      	beq.n	800e536 <USART_SetConfig+0x826>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e528:	2b0b      	cmp	r3, #11
 800e52a:	d102      	bne.n	800e532 <USART_SetConfig+0x822>
 800e52c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e530:	e016      	b.n	800e560 <USART_SetConfig+0x850>
 800e532:	2301      	movs	r3, #1
 800e534:	e014      	b.n	800e560 <USART_SetConfig+0x850>
 800e536:	2380      	movs	r3, #128	@ 0x80
 800e538:	e012      	b.n	800e560 <USART_SetConfig+0x850>
 800e53a:	2340      	movs	r3, #64	@ 0x40
 800e53c:	e010      	b.n	800e560 <USART_SetConfig+0x850>
 800e53e:	2320      	movs	r3, #32
 800e540:	e00e      	b.n	800e560 <USART_SetConfig+0x850>
 800e542:	2310      	movs	r3, #16
 800e544:	e00c      	b.n	800e560 <USART_SetConfig+0x850>
 800e546:	230c      	movs	r3, #12
 800e548:	e00a      	b.n	800e560 <USART_SetConfig+0x850>
 800e54a:	230a      	movs	r3, #10
 800e54c:	e008      	b.n	800e560 <USART_SetConfig+0x850>
 800e54e:	2308      	movs	r3, #8
 800e550:	e006      	b.n	800e560 <USART_SetConfig+0x850>
 800e552:	2306      	movs	r3, #6
 800e554:	e004      	b.n	800e560 <USART_SetConfig+0x850>
 800e556:	2304      	movs	r3, #4
 800e558:	e002      	b.n	800e560 <USART_SetConfig+0x850>
 800e55a:	2302      	movs	r3, #2
 800e55c:	e000      	b.n	800e560 <USART_SetConfig+0x850>
 800e55e:	2301      	movs	r3, #1
 800e560:	4a33      	ldr	r2, [pc, #204]	@ (800e630 <USART_SetConfig+0x920>)
 800e562:	fbb2 f3f3 	udiv	r3, r2, r3
 800e566:	005a      	lsls	r2, r3, #1
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	085b      	lsrs	r3, r3, #1
 800e56e:	441a      	add	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	fbb2 f3f3 	udiv	r3, r2, r3
 800e578:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e57a:	e0ba      	b.n	800e6f2 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e580:	2b00      	cmp	r3, #0
 800e582:	d044      	beq.n	800e60e <USART_SetConfig+0x8fe>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d03e      	beq.n	800e60a <USART_SetConfig+0x8fa>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e590:	2b02      	cmp	r3, #2
 800e592:	d038      	beq.n	800e606 <USART_SetConfig+0x8f6>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e598:	2b03      	cmp	r3, #3
 800e59a:	d032      	beq.n	800e602 <USART_SetConfig+0x8f2>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5a0:	2b04      	cmp	r3, #4
 800e5a2:	d02c      	beq.n	800e5fe <USART_SetConfig+0x8ee>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5a8:	2b05      	cmp	r3, #5
 800e5aa:	d026      	beq.n	800e5fa <USART_SetConfig+0x8ea>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5b0:	2b06      	cmp	r3, #6
 800e5b2:	d020      	beq.n	800e5f6 <USART_SetConfig+0x8e6>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5b8:	2b07      	cmp	r3, #7
 800e5ba:	d01a      	beq.n	800e5f2 <USART_SetConfig+0x8e2>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c0:	2b08      	cmp	r3, #8
 800e5c2:	d014      	beq.n	800e5ee <USART_SetConfig+0x8de>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c8:	2b09      	cmp	r3, #9
 800e5ca:	d00e      	beq.n	800e5ea <USART_SetConfig+0x8da>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5d0:	2b0a      	cmp	r3, #10
 800e5d2:	d008      	beq.n	800e5e6 <USART_SetConfig+0x8d6>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5d8:	2b0b      	cmp	r3, #11
 800e5da:	d102      	bne.n	800e5e2 <USART_SetConfig+0x8d2>
 800e5dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5e0:	e016      	b.n	800e610 <USART_SetConfig+0x900>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e014      	b.n	800e610 <USART_SetConfig+0x900>
 800e5e6:	2380      	movs	r3, #128	@ 0x80
 800e5e8:	e012      	b.n	800e610 <USART_SetConfig+0x900>
 800e5ea:	2340      	movs	r3, #64	@ 0x40
 800e5ec:	e010      	b.n	800e610 <USART_SetConfig+0x900>
 800e5ee:	2320      	movs	r3, #32
 800e5f0:	e00e      	b.n	800e610 <USART_SetConfig+0x900>
 800e5f2:	2310      	movs	r3, #16
 800e5f4:	e00c      	b.n	800e610 <USART_SetConfig+0x900>
 800e5f6:	230c      	movs	r3, #12
 800e5f8:	e00a      	b.n	800e610 <USART_SetConfig+0x900>
 800e5fa:	230a      	movs	r3, #10
 800e5fc:	e008      	b.n	800e610 <USART_SetConfig+0x900>
 800e5fe:	2308      	movs	r3, #8
 800e600:	e006      	b.n	800e610 <USART_SetConfig+0x900>
 800e602:	2306      	movs	r3, #6
 800e604:	e004      	b.n	800e610 <USART_SetConfig+0x900>
 800e606:	2304      	movs	r3, #4
 800e608:	e002      	b.n	800e610 <USART_SetConfig+0x900>
 800e60a:	2302      	movs	r3, #2
 800e60c:	e000      	b.n	800e610 <USART_SetConfig+0x900>
 800e60e:	2301      	movs	r3, #1
 800e610:	4a08      	ldr	r2, [pc, #32]	@ (800e634 <USART_SetConfig+0x924>)
 800e612:	fbb2 f3f3 	udiv	r3, r2, r3
 800e616:	005a      	lsls	r2, r3, #1
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	085b      	lsrs	r3, r3, #1
 800e61e:	441a      	add	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	fbb2 f3f3 	udiv	r3, r2, r3
 800e628:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e62a:	e062      	b.n	800e6f2 <USART_SetConfig+0x9e2>
 800e62c:	58024400 	.word	0x58024400
 800e630:	03d09000 	.word	0x03d09000
 800e634:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d044      	beq.n	800e6ca <USART_SetConfig+0x9ba>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e644:	2b01      	cmp	r3, #1
 800e646:	d03e      	beq.n	800e6c6 <USART_SetConfig+0x9b6>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e64c:	2b02      	cmp	r3, #2
 800e64e:	d038      	beq.n	800e6c2 <USART_SetConfig+0x9b2>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e654:	2b03      	cmp	r3, #3
 800e656:	d032      	beq.n	800e6be <USART_SetConfig+0x9ae>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e65c:	2b04      	cmp	r3, #4
 800e65e:	d02c      	beq.n	800e6ba <USART_SetConfig+0x9aa>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e664:	2b05      	cmp	r3, #5
 800e666:	d026      	beq.n	800e6b6 <USART_SetConfig+0x9a6>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e66c:	2b06      	cmp	r3, #6
 800e66e:	d020      	beq.n	800e6b2 <USART_SetConfig+0x9a2>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e674:	2b07      	cmp	r3, #7
 800e676:	d01a      	beq.n	800e6ae <USART_SetConfig+0x99e>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e67c:	2b08      	cmp	r3, #8
 800e67e:	d014      	beq.n	800e6aa <USART_SetConfig+0x99a>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e684:	2b09      	cmp	r3, #9
 800e686:	d00e      	beq.n	800e6a6 <USART_SetConfig+0x996>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e68c:	2b0a      	cmp	r3, #10
 800e68e:	d008      	beq.n	800e6a2 <USART_SetConfig+0x992>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e694:	2b0b      	cmp	r3, #11
 800e696:	d102      	bne.n	800e69e <USART_SetConfig+0x98e>
 800e698:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e69c:	e016      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e014      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6a2:	2380      	movs	r3, #128	@ 0x80
 800e6a4:	e012      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6a6:	2340      	movs	r3, #64	@ 0x40
 800e6a8:	e010      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6aa:	2320      	movs	r3, #32
 800e6ac:	e00e      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6ae:	2310      	movs	r3, #16
 800e6b0:	e00c      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6b2:	230c      	movs	r3, #12
 800e6b4:	e00a      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6b6:	230a      	movs	r3, #10
 800e6b8:	e008      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6ba:	2308      	movs	r3, #8
 800e6bc:	e006      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6be:	2306      	movs	r3, #6
 800e6c0:	e004      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6c2:	2304      	movs	r3, #4
 800e6c4:	e002      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6c6:	2302      	movs	r3, #2
 800e6c8:	e000      	b.n	800e6cc <USART_SetConfig+0x9bc>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e6d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6d4:	005a      	lsls	r2, r3, #1
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	085b      	lsrs	r3, r3, #1
 800e6dc:	441a      	add	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6e6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e6e8:	e003      	b.n	800e6f2 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800e6f0:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800e6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f4:	2b0f      	cmp	r3, #15
 800e6f6:	d916      	bls.n	800e726 <USART_SetConfig+0xa16>
 800e6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6fe:	d212      	bcs.n	800e726 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e702:	b29b      	uxth	r3, r3
 800e704:	f023 030f 	bic.w	r3, r3, #15
 800e708:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e70c:	085b      	lsrs	r3, r3, #1
 800e70e:	b29b      	uxth	r3, r3
 800e710:	f003 0307 	and.w	r3, r3, #7
 800e714:	b29a      	uxth	r2, r3
 800e716:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e718:	4313      	orrs	r3, r2
 800e71a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e722:	60da      	str	r2, [r3, #12]
 800e724:	e002      	b.n	800e72c <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800e726:	2301      	movs	r3, #1
 800e728:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2201      	movs	r2, #1
 800e736:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800e744:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3738      	adds	r7, #56	@ 0x38
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af02      	add	r7, sp, #8
 800e756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e75e:	f7f4 fdd1 	bl	8003304 <HAL_GetTick>
 800e762:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f003 0308 	and.w	r3, r3, #8
 800e76e:	2b08      	cmp	r3, #8
 800e770:	d10e      	bne.n	800e790 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7ff fa8f 	bl	800dca4 <USART_WaitOnFlagUntilTimeout>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d001      	beq.n	800e790 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e78c:	2303      	movs	r3, #3
 800e78e:	e01e      	b.n	800e7ce <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f003 0304 	and.w	r3, r3, #4
 800e79a:	2b04      	cmp	r3, #4
 800e79c:	d10e      	bne.n	800e7bc <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e79e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e7a2:	9300      	str	r3, [sp, #0]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7ff fa79 	bl	800dca4 <USART_WaitOnFlagUntilTimeout>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d001      	beq.n	800e7bc <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7b8:	2303      	movs	r3, #3
 800e7ba:	e008      	b.n	800e7ce <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e7cc:	2300      	movs	r3, #0
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3710      	adds	r7, #16
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800e7d6:	b480      	push	{r7}
 800e7d8:	b085      	sub	sp, #20
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d101      	bne.n	800e7ec <HAL_USARTEx_EnableSlaveMode+0x16>
 800e7e8:	2302      	movs	r3, #2
 800e7ea:	e043      	b.n	800e874 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2202      	movs	r2, #2
 800e7f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f022 0201 	bic.w	r2, r2, #1
 800e812:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	685a      	ldr	r2, [r3, #4]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	689a      	ldr	r2, [r3, #8]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e832:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	685a      	ldr	r2, [r3, #4]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f042 0201 	orr.w	r2, r2, #1
 800e842:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	68fa      	ldr	r2, [r7, #12]
 800e84a:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2201      	movs	r2, #1
 800e850:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2201      	movs	r2, #1
 800e856:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f042 0201 	orr.w	r2, r2, #1
 800e868:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e872:	2300      	movs	r3, #0
}
 800e874:	4618      	mov	r0, r3
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr

0800e880 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800e880:	b480      	push	{r7}
 800e882:	b085      	sub	sp, #20
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e890:	2b01      	cmp	r3, #1
 800e892:	d101      	bne.n	800e898 <HAL_USARTEx_ConfigNSS+0x18>
 800e894:	2302      	movs	r3, #2
 800e896:	e02a      	b.n	800e8ee <HAL_USARTEx_ConfigNSS+0x6e>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2202      	movs	r2, #2
 800e8a4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f022 0201 	bic.w	r2, r2, #1
 800e8be:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	f023 0108 	bic.w	r1, r3, #8
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	683a      	ldr	r2, [r7, #0]
 800e8d0:	430a      	orrs	r2, r1
 800e8d2:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e8ec:	2300      	movs	r3, #0
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3714      	adds	r7, #20
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr

0800e8fa <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800e8fa:	b480      	push	{r7}
 800e8fc:	b085      	sub	sp, #20
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d101      	bne.n	800e910 <HAL_USARTEx_DisableFifoMode+0x16>
 800e90c:	2302      	movs	r3, #2
 800e90e:	e027      	b.n	800e960 <HAL_USARTEx_DisableFifoMode+0x66>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2202      	movs	r2, #2
 800e91c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f022 0201 	bic.w	r2, r2, #1
 800e936:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e93e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	68fa      	ldr	r2, [r7, #12]
 800e94c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2201      	movs	r2, #1
 800e952:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e95e:	2300      	movs	r3, #0
}
 800e960:	4618      	mov	r0, r3
 800e962:	3714      	adds	r7, #20
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d101      	bne.n	800e984 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800e980:	2302      	movs	r3, #2
 800e982:	e02d      	b.n	800e9e0 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2201      	movs	r2, #1
 800e988:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2202      	movs	r2, #2
 800e990:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f022 0201 	bic.w	r2, r2, #1
 800e9aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	683a      	ldr	r2, [r7, #0]
 800e9bc:	430a      	orrs	r2, r1
 800e9be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 f84f 	bl	800ea64 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d101      	bne.n	800ea00 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800e9fc:	2302      	movs	r3, #2
 800e9fe:	e02d      	b.n	800ea5c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f022 0201 	bic.w	r2, r2, #1
 800ea26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	683a      	ldr	r2, [r7, #0]
 800ea38:	430a      	orrs	r2, r1
 800ea3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 f811 	bl	800ea64 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ea5a:	2300      	movs	r3, #0
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d106      	bne.n	800ea82 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2201      	movs	r2, #1
 800ea78:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea80:	e02f      	b.n	800eae2 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea82:	2310      	movs	r3, #16
 800ea84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ea86:	2310      	movs	r3, #16
 800ea88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800ea90:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	f003 0307 	and.w	r3, r3, #7
 800ea98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800eaa0:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	f003 0307 	and.w	r3, r3, #7
 800eaa8:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eaaa:	7bbb      	ldrb	r3, [r7, #14]
 800eaac:	7b3a      	ldrb	r2, [r7, #12]
 800eaae:	4910      	ldr	r1, [pc, #64]	@ (800eaf0 <USARTEx_SetNbDataToProcess+0x8c>)
 800eab0:	5c8a      	ldrb	r2, [r1, r2]
 800eab2:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800eab6:	7b3a      	ldrb	r2, [r7, #12]
 800eab8:	490e      	ldr	r1, [pc, #56]	@ (800eaf4 <USARTEx_SetNbDataToProcess+0x90>)
 800eaba:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eabc:	fb93 f3f2 	sdiv	r3, r3, r2
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eac6:	7bfb      	ldrb	r3, [r7, #15]
 800eac8:	7b7a      	ldrb	r2, [r7, #13]
 800eaca:	4909      	ldr	r1, [pc, #36]	@ (800eaf0 <USARTEx_SetNbDataToProcess+0x8c>)
 800eacc:	5c8a      	ldrb	r2, [r1, r2]
 800eace:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800ead2:	7b7a      	ldrb	r2, [r7, #13]
 800ead4:	4907      	ldr	r1, [pc, #28]	@ (800eaf4 <USARTEx_SetNbDataToProcess+0x90>)
 800ead6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ead8:	fb93 f3f2 	sdiv	r3, r3, r2
 800eadc:	b29a      	uxth	r2, r3
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800eae2:	bf00      	nop
 800eae4:	3714      	adds	r7, #20
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop
 800eaf0:	08017e14 	.word	0x08017e14
 800eaf4:	08017e1c 	.word	0x08017e1c

0800eaf8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800eaf8:	b084      	sub	sp, #16
 800eafa:	b480      	push	{r7}
 800eafc:	b085      	sub	sp, #20
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
 800eb02:	f107 001c 	add.w	r0, r7, #28
 800eb06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800eb0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800eb10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800eb12:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800eb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800eb16:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800eb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800eb1a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800eb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800eb1e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	4313      	orrs	r3, r2
 800eb24:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	685a      	ldr	r2, [r3, #4]
 800eb2a:	4b07      	ldr	r3, [pc, #28]	@ (800eb48 <SDMMC_Init+0x50>)
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	68fa      	ldr	r2, [r7, #12]
 800eb30:	431a      	orrs	r2, r3
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3714      	adds	r7, #20
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	b004      	add	sp, #16
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	ffc02c00 	.word	0xffc02c00

0800eb4c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	370c      	adds	r7, #12
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr

0800eb66 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800eb66:	b480      	push	{r7}
 800eb68:	b083      	sub	sp, #12
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800eb7a:	2300      	movs	r3, #0
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	370c      	adds	r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f043 0203 	orr.w	r2, r3, #3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	370c      	adds	r7, #12
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr

0800ebaa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ebaa:	b480      	push	{r7}
 800ebac:	b083      	sub	sp, #12
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f003 0303 	and.w	r3, r3, #3
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	370c      	adds	r7, #12
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
	...

0800ebc8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ebe6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ebec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ebf2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ebf4:	68fa      	ldr	r2, [r7, #12]
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	68da      	ldr	r2, [r3, #12]
 800ebfe:	4b06      	ldr	r3, [pc, #24]	@ (800ec18 <SDMMC_SendCommand+0x50>)
 800ec00:	4013      	ands	r3, r2
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	431a      	orrs	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ec0a:	2300      	movs	r3, #0
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3714      	adds	r7, #20
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr
 800ec18:	fffee0c0 	.word	0xfffee0c0

0800ec1c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	691b      	ldr	r3, [r3, #16]
 800ec28:	b2db      	uxtb	r3, r3
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	370c      	adds	r7, #12
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr

0800ec36 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ec36:	b480      	push	{r7}
 800ec38:	b085      	sub	sp, #20
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
 800ec3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	3314      	adds	r3, #20
 800ec44:	461a      	mov	r2, r3
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	4413      	add	r3, r2
 800ec4a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b085      	sub	sp, #20
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ec66:	2300      	movs	r3, #0
 800ec68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	685a      	ldr	r2, [r3, #4]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ec82:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ec88:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ec8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	4313      	orrs	r3, r2
 800ec94:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	431a      	orrs	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800eca6:	2300      	movs	r3, #0

}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b088      	sub	sp, #32
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ecc2:	2310      	movs	r3, #16
 800ecc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ecca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eccc:	2300      	movs	r3, #0
 800ecce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ecd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ecd6:	f107 0308 	add.w	r3, r7, #8
 800ecda:	4619      	mov	r1, r3
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff ff73 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ece2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ece6:	2110      	movs	r1, #16
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 fa5f 	bl	800f1ac <SDMMC_GetCmdResp1>
 800ecee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecf0:	69fb      	ldr	r3, [r7, #28]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3720      	adds	r7, #32
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b088      	sub	sp, #32
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
 800ed02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ed08:	2311      	movs	r3, #17
 800ed0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ed10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed12:	2300      	movs	r3, #0
 800ed14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ed1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed1c:	f107 0308 	add.w	r3, r7, #8
 800ed20:	4619      	mov	r1, r3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7ff ff50 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ed28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed2c:	2111      	movs	r1, #17
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 fa3c 	bl	800f1ac <SDMMC_GetCmdResp1>
 800ed34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed36:	69fb      	ldr	r3, [r7, #28]
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3720      	adds	r7, #32
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b088      	sub	sp, #32
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ed4e:	2312      	movs	r3, #18
 800ed50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ed56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ed60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed62:	f107 0308 	add.w	r3, r7, #8
 800ed66:	4619      	mov	r1, r3
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f7ff ff2d 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ed6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed72:	2112      	movs	r1, #18
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 fa19 	bl	800f1ac <SDMMC_GetCmdResp1>
 800ed7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed7c:	69fb      	ldr	r3, [r7, #28]
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3720      	adds	r7, #32
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b088      	sub	sp, #32
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
 800ed8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ed94:	2318      	movs	r3, #24
 800ed96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ed9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eda2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eda6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eda8:	f107 0308 	add.w	r3, r7, #8
 800edac:	4619      	mov	r1, r3
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f7ff ff0a 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800edb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800edb8:	2118      	movs	r1, #24
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 f9f6 	bl	800f1ac <SDMMC_GetCmdResp1>
 800edc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edc2:	69fb      	ldr	r3, [r7, #28]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3720      	adds	r7, #32
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b088      	sub	sp, #32
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800edda:	2319      	movs	r3, #25
 800eddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ede2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ede4:	2300      	movs	r3, #0
 800ede6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ede8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800edec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edee:	f107 0308 	add.w	r3, r7, #8
 800edf2:	4619      	mov	r1, r3
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f7ff fee7 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800edfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800edfe:	2119      	movs	r1, #25
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f000 f9d3 	bl	800f1ac <SDMMC_GetCmdResp1>
 800ee06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee08:	69fb      	ldr	r3, [r7, #28]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3720      	adds	r7, #32
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
	...

0800ee14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b088      	sub	sp, #32
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ee20:	230c      	movs	r3, #12
 800ee22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ee32:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	68db      	ldr	r3, [r3, #12]
 800ee44:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee4c:	f107 0308 	add.w	r3, r7, #8
 800ee50:	4619      	mov	r1, r3
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7ff feb8 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ee58:	4a0b      	ldr	r2, [pc, #44]	@ (800ee88 <SDMMC_CmdStopTransfer+0x74>)
 800ee5a:	210c      	movs	r1, #12
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 f9a5 	bl	800f1ac <SDMMC_GetCmdResp1>
 800ee62:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee76:	d101      	bne.n	800ee7c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ee7c:	69fb      	ldr	r3, [r7, #28]
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3720      	adds	r7, #32
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	05f5e100 	.word	0x05f5e100

0800ee8c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b088      	sub	sp, #32
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ee9a:	2307      	movs	r3, #7
 800ee9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eea4:	2300      	movs	r3, #0
 800eea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eeac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eeae:	f107 0308 	add.w	r3, r7, #8
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7ff fe87 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800eeba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eebe:	2107      	movs	r1, #7
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 f973 	bl	800f1ac <SDMMC_GetCmdResp1>
 800eec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eec8:	69fb      	ldr	r3, [r7, #28]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3720      	adds	r7, #32
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b088      	sub	sp, #32
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800eeda:	2300      	movs	r3, #0
 800eedc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800eede:	2300      	movs	r3, #0
 800eee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800eee2:	2300      	movs	r3, #0
 800eee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eee6:	2300      	movs	r3, #0
 800eee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eeea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eeee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eef0:	f107 0308 	add.w	r3, r7, #8
 800eef4:	4619      	mov	r1, r3
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f7ff fe66 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 fb97 	bl	800f630 <SDMMC_GetCmdError>
 800ef02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef04:	69fb      	ldr	r3, [r7, #28]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3720      	adds	r7, #32
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b088      	sub	sp, #32
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ef16:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ef1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ef1c:	2308      	movs	r3, #8
 800ef1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef26:	2300      	movs	r3, #0
 800ef28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ef2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef30:	f107 0308 	add.w	r3, r7, #8
 800ef34:	4619      	mov	r1, r3
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f7ff fe46 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f000 fb29 	bl	800f594 <SDMMC_GetCmdResp7>
 800ef42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef44:	69fb      	ldr	r3, [r7, #28]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3720      	adds	r7, #32
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b088      	sub	sp, #32
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
 800ef56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ef5c:	2337      	movs	r3, #55	@ 0x37
 800ef5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef66:	2300      	movs	r3, #0
 800ef68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ef6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef70:	f107 0308 	add.w	r3, r7, #8
 800ef74:	4619      	mov	r1, r3
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f7ff fe26 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ef7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef80:	2137      	movs	r1, #55	@ 0x37
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 f912 	bl	800f1ac <SDMMC_GetCmdResp1>
 800ef88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef8a:	69fb      	ldr	r3, [r7, #28]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3720      	adds	r7, #32
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800efa2:	2329      	movs	r3, #41	@ 0x29
 800efa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efac:	2300      	movs	r3, #0
 800efae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800efb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efb6:	f107 0308 	add.w	r3, r7, #8
 800efba:	4619      	mov	r1, r3
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f7ff fe03 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 fa2e 	bl	800f424 <SDMMC_GetCmdResp3>
 800efc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efca:	69fb      	ldr	r3, [r7, #28]
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3720      	adds	r7, #32
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b088      	sub	sp, #32
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800efe2:	2306      	movs	r3, #6
 800efe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efec:	2300      	movs	r3, #0
 800efee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eff4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eff6:	f107 0308 	add.w	r3, r7, #8
 800effa:	4619      	mov	r1, r3
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7ff fde3 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f002:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f006:	2106      	movs	r1, #6
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 f8cf 	bl	800f1ac <SDMMC_GetCmdResp1>
 800f00e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f010:	69fb      	ldr	r3, [r7, #28]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3720      	adds	r7, #32
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b088      	sub	sp, #32
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f022:	2300      	movs	r3, #0
 800f024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f026:	2333      	movs	r3, #51	@ 0x33
 800f028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f02a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f02e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f030:	2300      	movs	r3, #0
 800f032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f034:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f038:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f03a:	f107 0308 	add.w	r3, r7, #8
 800f03e:	4619      	mov	r1, r3
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f7ff fdc1 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f04a:	2133      	movs	r1, #51	@ 0x33
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f8ad 	bl	800f1ac <SDMMC_GetCmdResp1>
 800f052:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f054:	69fb      	ldr	r3, [r7, #28]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3720      	adds	r7, #32
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b088      	sub	sp, #32
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f066:	2300      	movs	r3, #0
 800f068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f06a:	2302      	movs	r3, #2
 800f06c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f06e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f074:	2300      	movs	r3, #0
 800f076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f07c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f07e:	f107 0308 	add.w	r3, r7, #8
 800f082:	4619      	mov	r1, r3
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7ff fd9f 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 f980 	bl	800f390 <SDMMC_GetCmdResp2>
 800f090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f092:	69fb      	ldr	r3, [r7, #28]
}
 800f094:	4618      	mov	r0, r3
 800f096:	3720      	adds	r7, #32
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b088      	sub	sp, #32
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f0aa:	2309      	movs	r3, #9
 800f0ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f0ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f0b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0be:	f107 0308 	add.w	r3, r7, #8
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f7ff fd7f 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 f960 	bl	800f390 <SDMMC_GetCmdResp2>
 800f0d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0d2:	69fb      	ldr	r3, [r7, #28]
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3720      	adds	r7, #32
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f0ea:	2303      	movs	r3, #3
 800f0ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f0f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0fe:	f107 0308 	add.w	r3, r7, #8
 800f102:	4619      	mov	r1, r3
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f7ff fd5f 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f10a:	683a      	ldr	r2, [r7, #0]
 800f10c:	2103      	movs	r1, #3
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 f9c8 	bl	800f4a4 <SDMMC_GetCmdResp6>
 800f114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f116:	69fb      	ldr	r3, [r7, #28]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3720      	adds	r7, #32
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b088      	sub	sp, #32
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f12e:	230d      	movs	r3, #13
 800f130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f132:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f138:	2300      	movs	r3, #0
 800f13a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f13c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f140:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f142:	f107 0308 	add.w	r3, r7, #8
 800f146:	4619      	mov	r1, r3
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7ff fd3d 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f14e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f152:	210d      	movs	r1, #13
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 f829 	bl	800f1ac <SDMMC_GetCmdResp1>
 800f15a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f15c:	69fb      	ldr	r3, [r7, #28]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3720      	adds	r7, #32
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b088      	sub	sp, #32
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f16e:	2300      	movs	r3, #0
 800f170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f172:	230d      	movs	r3, #13
 800f174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f176:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f17a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f17c:	2300      	movs	r3, #0
 800f17e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f184:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f186:	f107 0308 	add.w	r3, r7, #8
 800f18a:	4619      	mov	r1, r3
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f7ff fd1b 	bl	800ebc8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f192:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f196:	210d      	movs	r1, #13
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 f807 	bl	800f1ac <SDMMC_GetCmdResp1>
 800f19e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1a0:	69fb      	ldr	r3, [r7, #28]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3720      	adds	r7, #32
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
	...

0800f1ac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b088      	sub	sp, #32
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	607a      	str	r2, [r7, #4]
 800f1b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f1ba:	4b70      	ldr	r3, [pc, #448]	@ (800f37c <SDMMC_GetCmdResp1+0x1d0>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4a70      	ldr	r2, [pc, #448]	@ (800f380 <SDMMC_GetCmdResp1+0x1d4>)
 800f1c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f1c4:	0a5a      	lsrs	r2, r3, #9
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	fb02 f303 	mul.w	r3, r2, r3
 800f1cc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	1e5a      	subs	r2, r3, #1
 800f1d2:	61fa      	str	r2, [r7, #28]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d102      	bne.n	800f1de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f1d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f1dc:	e0c9      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1e2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	4b67      	ldr	r3, [pc, #412]	@ (800f384 <SDMMC_GetCmdResp1+0x1d8>)
 800f1e8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d0ef      	beq.n	800f1ce <SDMMC_GetCmdResp1+0x22>
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d1ea      	bne.n	800f1ce <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1fc:	f003 0304 	and.w	r3, r3, #4
 800f200:	2b00      	cmp	r3, #0
 800f202:	d004      	beq.n	800f20e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2204      	movs	r2, #4
 800f208:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f20a:	2304      	movs	r3, #4
 800f20c:	e0b1      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f212:	f003 0301 	and.w	r3, r3, #1
 800f216:	2b00      	cmp	r3, #0
 800f218:	d004      	beq.n	800f224 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2201      	movs	r2, #1
 800f21e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f220:	2301      	movs	r3, #1
 800f222:	e0a6      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	4a58      	ldr	r2, [pc, #352]	@ (800f388 <SDMMC_GetCmdResp1+0x1dc>)
 800f228:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f22a:	68f8      	ldr	r0, [r7, #12]
 800f22c:	f7ff fcf6 	bl	800ec1c <SDMMC_GetCommandResponse>
 800f230:	4603      	mov	r3, r0
 800f232:	461a      	mov	r2, r3
 800f234:	7afb      	ldrb	r3, [r7, #11]
 800f236:	4293      	cmp	r3, r2
 800f238:	d001      	beq.n	800f23e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f23a:	2301      	movs	r3, #1
 800f23c:	e099      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f23e:	2100      	movs	r1, #0
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f7ff fcf8 	bl	800ec36 <SDMMC_GetResponse>
 800f246:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f248:	697a      	ldr	r2, [r7, #20]
 800f24a:	4b50      	ldr	r3, [pc, #320]	@ (800f38c <SDMMC_GetCmdResp1+0x1e0>)
 800f24c:	4013      	ands	r3, r2
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f252:	2300      	movs	r3, #0
 800f254:	e08d      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	da02      	bge.n	800f262 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f25c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f260:	e087      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d001      	beq.n	800f270 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f26c:	2340      	movs	r3, #64	@ 0x40
 800f26e:	e080      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f27a:	2380      	movs	r3, #128	@ 0x80
 800f27c:	e079      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f284:	2b00      	cmp	r3, #0
 800f286:	d002      	beq.n	800f28e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f28c:	e071      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f294:	2b00      	cmp	r3, #0
 800f296:	d002      	beq.n	800f29e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f29c:	e069      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d002      	beq.n	800f2ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f2a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f2ac:	e061      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d002      	beq.n	800f2be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f2b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f2bc:	e059      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d002      	beq.n	800f2ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f2c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f2cc:	e051      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d002      	beq.n	800f2de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f2d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f2dc:	e049      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d002      	beq.n	800f2ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f2e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f2ec:	e041      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d002      	beq.n	800f2fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f2f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2fc:	e039      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f304:	2b00      	cmp	r3, #0
 800f306:	d002      	beq.n	800f30e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f308:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f30c:	e031      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f314:	2b00      	cmp	r3, #0
 800f316:	d002      	beq.n	800f31e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f318:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f31c:	e029      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f328:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f32c:	e021      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f338:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f33c:	e019      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f344:	2b00      	cmp	r3, #0
 800f346:	d002      	beq.n	800f34e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f348:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f34c:	e011      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f354:	2b00      	cmp	r3, #0
 800f356:	d002      	beq.n	800f35e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f358:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f35c:	e009      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	f003 0308 	and.w	r3, r3, #8
 800f364:	2b00      	cmp	r3, #0
 800f366:	d002      	beq.n	800f36e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f368:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800f36c:	e001      	b.n	800f372 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f36e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f372:	4618      	mov	r0, r3
 800f374:	3720      	adds	r7, #32
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	24000030 	.word	0x24000030
 800f380:	10624dd3 	.word	0x10624dd3
 800f384:	00200045 	.word	0x00200045
 800f388:	002000c5 	.word	0x002000c5
 800f38c:	fdffe008 	.word	0xfdffe008

0800f390 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f390:	b480      	push	{r7}
 800f392:	b085      	sub	sp, #20
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f398:	4b1f      	ldr	r3, [pc, #124]	@ (800f418 <SDMMC_GetCmdResp2+0x88>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a1f      	ldr	r2, [pc, #124]	@ (800f41c <SDMMC_GetCmdResp2+0x8c>)
 800f39e:	fba2 2303 	umull	r2, r3, r2, r3
 800f3a2:	0a5b      	lsrs	r3, r3, #9
 800f3a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3a8:	fb02 f303 	mul.w	r3, r2, r3
 800f3ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	1e5a      	subs	r2, r3, #1
 800f3b2:	60fa      	str	r2, [r7, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d102      	bne.n	800f3be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f3b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f3bc:	e026      	b.n	800f40c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3c2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d0ef      	beq.n	800f3ae <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d1ea      	bne.n	800f3ae <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3dc:	f003 0304 	and.w	r3, r3, #4
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d004      	beq.n	800f3ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2204      	movs	r2, #4
 800f3e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3ea:	2304      	movs	r3, #4
 800f3ec:	e00e      	b.n	800f40c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3f2:	f003 0301 	and.w	r3, r3, #1
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f400:	2301      	movs	r3, #1
 800f402:	e003      	b.n	800f40c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4a06      	ldr	r2, [pc, #24]	@ (800f420 <SDMMC_GetCmdResp2+0x90>)
 800f408:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f40a:	2300      	movs	r3, #0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3714      	adds	r7, #20
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr
 800f418:	24000030 	.word	0x24000030
 800f41c:	10624dd3 	.word	0x10624dd3
 800f420:	002000c5 	.word	0x002000c5

0800f424 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f424:	b480      	push	{r7}
 800f426:	b085      	sub	sp, #20
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f42c:	4b1a      	ldr	r3, [pc, #104]	@ (800f498 <SDMMC_GetCmdResp3+0x74>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	4a1a      	ldr	r2, [pc, #104]	@ (800f49c <SDMMC_GetCmdResp3+0x78>)
 800f432:	fba2 2303 	umull	r2, r3, r2, r3
 800f436:	0a5b      	lsrs	r3, r3, #9
 800f438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f43c:	fb02 f303 	mul.w	r3, r2, r3
 800f440:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	1e5a      	subs	r2, r3, #1
 800f446:	60fa      	str	r2, [r7, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d102      	bne.n	800f452 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f44c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f450:	e01b      	b.n	800f48a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f456:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d0ef      	beq.n	800f442 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1ea      	bne.n	800f442 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f470:	f003 0304 	and.w	r3, r3, #4
 800f474:	2b00      	cmp	r3, #0
 800f476:	d004      	beq.n	800f482 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2204      	movs	r2, #4
 800f47c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f47e:	2304      	movs	r3, #4
 800f480:	e003      	b.n	800f48a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4a06      	ldr	r2, [pc, #24]	@ (800f4a0 <SDMMC_GetCmdResp3+0x7c>)
 800f486:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f488:	2300      	movs	r3, #0
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3714      	adds	r7, #20
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr
 800f496:	bf00      	nop
 800f498:	24000030 	.word	0x24000030
 800f49c:	10624dd3 	.word	0x10624dd3
 800f4a0:	002000c5 	.word	0x002000c5

0800f4a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b088      	sub	sp, #32
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	607a      	str	r2, [r7, #4]
 800f4b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f4b2:	4b35      	ldr	r3, [pc, #212]	@ (800f588 <SDMMC_GetCmdResp6+0xe4>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4a35      	ldr	r2, [pc, #212]	@ (800f58c <SDMMC_GetCmdResp6+0xe8>)
 800f4b8:	fba2 2303 	umull	r2, r3, r2, r3
 800f4bc:	0a5b      	lsrs	r3, r3, #9
 800f4be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4c2:	fb02 f303 	mul.w	r3, r2, r3
 800f4c6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	1e5a      	subs	r2, r3, #1
 800f4cc:	61fa      	str	r2, [r7, #28]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d102      	bne.n	800f4d8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f4d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f4d6:	e052      	b.n	800f57e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4dc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d0ef      	beq.n	800f4c8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f4e8:	69bb      	ldr	r3, [r7, #24]
 800f4ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1ea      	bne.n	800f4c8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4f6:	f003 0304 	and.w	r3, r3, #4
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d004      	beq.n	800f508 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2204      	movs	r2, #4
 800f502:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f504:	2304      	movs	r3, #4
 800f506:	e03a      	b.n	800f57e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f50c:	f003 0301 	and.w	r3, r3, #1
 800f510:	2b00      	cmp	r3, #0
 800f512:	d004      	beq.n	800f51e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2201      	movs	r2, #1
 800f518:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f51a:	2301      	movs	r3, #1
 800f51c:	e02f      	b.n	800f57e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f51e:	68f8      	ldr	r0, [r7, #12]
 800f520:	f7ff fb7c 	bl	800ec1c <SDMMC_GetCommandResponse>
 800f524:	4603      	mov	r3, r0
 800f526:	461a      	mov	r2, r3
 800f528:	7afb      	ldrb	r3, [r7, #11]
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d001      	beq.n	800f532 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f52e:	2301      	movs	r3, #1
 800f530:	e025      	b.n	800f57e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	4a16      	ldr	r2, [pc, #88]	@ (800f590 <SDMMC_GetCmdResp6+0xec>)
 800f536:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f538:	2100      	movs	r1, #0
 800f53a:	68f8      	ldr	r0, [r7, #12]
 800f53c:	f7ff fb7b 	bl	800ec36 <SDMMC_GetResponse>
 800f540:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d106      	bne.n	800f55a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	0c1b      	lsrs	r3, r3, #16
 800f550:	b29a      	uxth	r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f556:	2300      	movs	r3, #0
 800f558:	e011      	b.n	800f57e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f560:	2b00      	cmp	r3, #0
 800f562:	d002      	beq.n	800f56a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f564:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f568:	e009      	b.n	800f57e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f570:	2b00      	cmp	r3, #0
 800f572:	d002      	beq.n	800f57a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f578:	e001      	b.n	800f57e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f57a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3720      	adds	r7, #32
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	24000030 	.word	0x24000030
 800f58c:	10624dd3 	.word	0x10624dd3
 800f590:	002000c5 	.word	0x002000c5

0800f594 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f594:	b480      	push	{r7}
 800f596:	b085      	sub	sp, #20
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f59c:	4b22      	ldr	r3, [pc, #136]	@ (800f628 <SDMMC_GetCmdResp7+0x94>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4a22      	ldr	r2, [pc, #136]	@ (800f62c <SDMMC_GetCmdResp7+0x98>)
 800f5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f5a6:	0a5b      	lsrs	r3, r3, #9
 800f5a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5ac:	fb02 f303 	mul.w	r3, r2, r3
 800f5b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	1e5a      	subs	r2, r3, #1
 800f5b6:	60fa      	str	r2, [r7, #12]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d102      	bne.n	800f5c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f5bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f5c0:	e02c      	b.n	800f61c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d0ef      	beq.n	800f5b2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d1ea      	bne.n	800f5b2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5e0:	f003 0304 	and.w	r3, r3, #4
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d004      	beq.n	800f5f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2204      	movs	r2, #4
 800f5ec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f5ee:	2304      	movs	r3, #4
 800f5f0:	e014      	b.n	800f61c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5f6:	f003 0301 	and.w	r3, r3, #1
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d004      	beq.n	800f608 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2201      	movs	r2, #1
 800f602:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f604:	2301      	movs	r3, #1
 800f606:	e009      	b.n	800f61c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f610:	2b00      	cmp	r3, #0
 800f612:	d002      	beq.n	800f61a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2240      	movs	r2, #64	@ 0x40
 800f618:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f61a:	2300      	movs	r3, #0

}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3714      	adds	r7, #20
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr
 800f628:	24000030 	.word	0x24000030
 800f62c:	10624dd3 	.word	0x10624dd3

0800f630 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f638:	4b11      	ldr	r3, [pc, #68]	@ (800f680 <SDMMC_GetCmdError+0x50>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4a11      	ldr	r2, [pc, #68]	@ (800f684 <SDMMC_GetCmdError+0x54>)
 800f63e:	fba2 2303 	umull	r2, r3, r2, r3
 800f642:	0a5b      	lsrs	r3, r3, #9
 800f644:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f648:	fb02 f303 	mul.w	r3, r2, r3
 800f64c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	1e5a      	subs	r2, r3, #1
 800f652:	60fa      	str	r2, [r7, #12]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d102      	bne.n	800f65e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f658:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f65c:	e009      	b.n	800f672 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f666:	2b00      	cmp	r3, #0
 800f668:	d0f1      	beq.n	800f64e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	4a06      	ldr	r2, [pc, #24]	@ (800f688 <SDMMC_GetCmdError+0x58>)
 800f66e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3714      	adds	r7, #20
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	24000030 	.word	0x24000030
 800f684:	10624dd3 	.word	0x10624dd3
 800f688:	002000c5 	.word	0x002000c5

0800f68c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f68c:	b084      	sub	sp, #16
 800f68e:	b580      	push	{r7, lr}
 800f690:	b084      	sub	sp, #16
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	f107 001c 	add.w	r0, r7, #28
 800f69a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f69e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d121      	bne.n	800f6ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	68da      	ldr	r2, [r3, #12]
 800f6b6:	4b2c      	ldr	r3, [pc, #176]	@ (800f768 <USB_CoreInit+0xdc>)
 800f6b8:	4013      	ands	r3, r2
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f6ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d105      	bne.n	800f6de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	68db      	ldr	r3, [r3, #12]
 800f6d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f001 faf6 	bl	8010cd0 <USB_CoreReset>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	73fb      	strb	r3, [r7, #15]
 800f6e8:	e01b      	b.n	800f722 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f001 faea 	bl	8010cd0 <USB_CoreReset>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f700:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f704:	2b00      	cmp	r3, #0
 800f706:	d106      	bne.n	800f716 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f70c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	639a      	str	r2, [r3, #56]	@ 0x38
 800f714:	e005      	b.n	800f722 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f71a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f722:	7fbb      	ldrb	r3, [r7, #30]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d116      	bne.n	800f756 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f736:	4b0d      	ldr	r3, [pc, #52]	@ (800f76c <USB_CoreInit+0xe0>)
 800f738:	4313      	orrs	r3, r2
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	689b      	ldr	r3, [r3, #8]
 800f742:	f043 0206 	orr.w	r2, r3, #6
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	f043 0220 	orr.w	r2, r3, #32
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f756:	7bfb      	ldrb	r3, [r7, #15]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f762:	b004      	add	sp, #16
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop
 800f768:	ffbdffbf 	.word	0xffbdffbf
 800f76c:	03ee0000 	.word	0x03ee0000

0800f770 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f770:	b480      	push	{r7}
 800f772:	b087      	sub	sp, #28
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	4613      	mov	r3, r2
 800f77c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f77e:	79fb      	ldrb	r3, [r7, #7]
 800f780:	2b02      	cmp	r3, #2
 800f782:	d165      	bne.n	800f850 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	4a41      	ldr	r2, [pc, #260]	@ (800f88c <USB_SetTurnaroundTime+0x11c>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d906      	bls.n	800f79a <USB_SetTurnaroundTime+0x2a>
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	4a40      	ldr	r2, [pc, #256]	@ (800f890 <USB_SetTurnaroundTime+0x120>)
 800f790:	4293      	cmp	r3, r2
 800f792:	d202      	bcs.n	800f79a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f794:	230f      	movs	r3, #15
 800f796:	617b      	str	r3, [r7, #20]
 800f798:	e062      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	4a3c      	ldr	r2, [pc, #240]	@ (800f890 <USB_SetTurnaroundTime+0x120>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d306      	bcc.n	800f7b0 <USB_SetTurnaroundTime+0x40>
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	4a3b      	ldr	r2, [pc, #236]	@ (800f894 <USB_SetTurnaroundTime+0x124>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d202      	bcs.n	800f7b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f7aa:	230e      	movs	r3, #14
 800f7ac:	617b      	str	r3, [r7, #20]
 800f7ae:	e057      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	4a38      	ldr	r2, [pc, #224]	@ (800f894 <USB_SetTurnaroundTime+0x124>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d306      	bcc.n	800f7c6 <USB_SetTurnaroundTime+0x56>
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	4a37      	ldr	r2, [pc, #220]	@ (800f898 <USB_SetTurnaroundTime+0x128>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d202      	bcs.n	800f7c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f7c0:	230d      	movs	r3, #13
 800f7c2:	617b      	str	r3, [r7, #20]
 800f7c4:	e04c      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	4a33      	ldr	r2, [pc, #204]	@ (800f898 <USB_SetTurnaroundTime+0x128>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d306      	bcc.n	800f7dc <USB_SetTurnaroundTime+0x6c>
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	4a32      	ldr	r2, [pc, #200]	@ (800f89c <USB_SetTurnaroundTime+0x12c>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d802      	bhi.n	800f7dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f7d6:	230c      	movs	r3, #12
 800f7d8:	617b      	str	r3, [r7, #20]
 800f7da:	e041      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	4a2f      	ldr	r2, [pc, #188]	@ (800f89c <USB_SetTurnaroundTime+0x12c>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d906      	bls.n	800f7f2 <USB_SetTurnaroundTime+0x82>
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	4a2e      	ldr	r2, [pc, #184]	@ (800f8a0 <USB_SetTurnaroundTime+0x130>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d802      	bhi.n	800f7f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f7ec:	230b      	movs	r3, #11
 800f7ee:	617b      	str	r3, [r7, #20]
 800f7f0:	e036      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	4a2a      	ldr	r2, [pc, #168]	@ (800f8a0 <USB_SetTurnaroundTime+0x130>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d906      	bls.n	800f808 <USB_SetTurnaroundTime+0x98>
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	4a29      	ldr	r2, [pc, #164]	@ (800f8a4 <USB_SetTurnaroundTime+0x134>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d802      	bhi.n	800f808 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f802:	230a      	movs	r3, #10
 800f804:	617b      	str	r3, [r7, #20]
 800f806:	e02b      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	4a26      	ldr	r2, [pc, #152]	@ (800f8a4 <USB_SetTurnaroundTime+0x134>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d906      	bls.n	800f81e <USB_SetTurnaroundTime+0xae>
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	4a25      	ldr	r2, [pc, #148]	@ (800f8a8 <USB_SetTurnaroundTime+0x138>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d202      	bcs.n	800f81e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f818:	2309      	movs	r3, #9
 800f81a:	617b      	str	r3, [r7, #20]
 800f81c:	e020      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	4a21      	ldr	r2, [pc, #132]	@ (800f8a8 <USB_SetTurnaroundTime+0x138>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d306      	bcc.n	800f834 <USB_SetTurnaroundTime+0xc4>
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	4a20      	ldr	r2, [pc, #128]	@ (800f8ac <USB_SetTurnaroundTime+0x13c>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d802      	bhi.n	800f834 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f82e:	2308      	movs	r3, #8
 800f830:	617b      	str	r3, [r7, #20]
 800f832:	e015      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	4a1d      	ldr	r2, [pc, #116]	@ (800f8ac <USB_SetTurnaroundTime+0x13c>)
 800f838:	4293      	cmp	r3, r2
 800f83a:	d906      	bls.n	800f84a <USB_SetTurnaroundTime+0xda>
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	4a1c      	ldr	r2, [pc, #112]	@ (800f8b0 <USB_SetTurnaroundTime+0x140>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d202      	bcs.n	800f84a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f844:	2307      	movs	r3, #7
 800f846:	617b      	str	r3, [r7, #20]
 800f848:	e00a      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f84a:	2306      	movs	r3, #6
 800f84c:	617b      	str	r3, [r7, #20]
 800f84e:	e007      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f850:	79fb      	ldrb	r3, [r7, #7]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d102      	bne.n	800f85c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f856:	2309      	movs	r3, #9
 800f858:	617b      	str	r3, [r7, #20]
 800f85a:	e001      	b.n	800f860 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f85c:	2309      	movs	r3, #9
 800f85e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	68da      	ldr	r2, [r3, #12]
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	029b      	lsls	r3, r3, #10
 800f874:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f878:	431a      	orrs	r2, r3
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f87e:	2300      	movs	r3, #0
}
 800f880:	4618      	mov	r0, r3
 800f882:	371c      	adds	r7, #28
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr
 800f88c:	00d8acbf 	.word	0x00d8acbf
 800f890:	00e4e1c0 	.word	0x00e4e1c0
 800f894:	00f42400 	.word	0x00f42400
 800f898:	01067380 	.word	0x01067380
 800f89c:	011a499f 	.word	0x011a499f
 800f8a0:	01312cff 	.word	0x01312cff
 800f8a4:	014ca43f 	.word	0x014ca43f
 800f8a8:	016e3600 	.word	0x016e3600
 800f8ac:	01a6ab1f 	.word	0x01a6ab1f
 800f8b0:	01e84800 	.word	0x01e84800

0800f8b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	f043 0201 	orr.w	r2, r3, #1
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f8c8:	2300      	movs	r3, #0
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	370c      	adds	r7, #12
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr

0800f8d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f8d6:	b480      	push	{r7}
 800f8d8:	b083      	sub	sp, #12
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	f023 0201 	bic.w	r2, r3, #1
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f8ea:	2300      	movs	r3, #0
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f904:	2300      	movs	r3, #0
 800f906:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f914:	78fb      	ldrb	r3, [r7, #3]
 800f916:	2b01      	cmp	r3, #1
 800f918:	d115      	bne.n	800f946 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f926:	200a      	movs	r0, #10
 800f928:	f7f3 fcf8 	bl	800331c <HAL_Delay>
      ms += 10U;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	330a      	adds	r3, #10
 800f930:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f001 f93b 	bl	8010bae <USB_GetMode>
 800f938:	4603      	mov	r3, r0
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d01e      	beq.n	800f97c <USB_SetCurrentMode+0x84>
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2bc7      	cmp	r3, #199	@ 0xc7
 800f942:	d9f0      	bls.n	800f926 <USB_SetCurrentMode+0x2e>
 800f944:	e01a      	b.n	800f97c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f946:	78fb      	ldrb	r3, [r7, #3]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d115      	bne.n	800f978 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f958:	200a      	movs	r0, #10
 800f95a:	f7f3 fcdf 	bl	800331c <HAL_Delay>
      ms += 10U;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	330a      	adds	r3, #10
 800f962:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f001 f922 	bl	8010bae <USB_GetMode>
 800f96a:	4603      	mov	r3, r0
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d005      	beq.n	800f97c <USB_SetCurrentMode+0x84>
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2bc7      	cmp	r3, #199	@ 0xc7
 800f974:	d9f0      	bls.n	800f958 <USB_SetCurrentMode+0x60>
 800f976:	e001      	b.n	800f97c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f978:	2301      	movs	r3, #1
 800f97a:	e005      	b.n	800f988 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2bc8      	cmp	r3, #200	@ 0xc8
 800f980:	d101      	bne.n	800f986 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f982:	2301      	movs	r3, #1
 800f984:	e000      	b.n	800f988 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f986:	2300      	movs	r3, #0
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3710      	adds	r7, #16
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f990:	b084      	sub	sp, #16
 800f992:	b580      	push	{r7, lr}
 800f994:	b086      	sub	sp, #24
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
 800f99a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f99e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	613b      	str	r3, [r7, #16]
 800f9ae:	e009      	b.n	800f9c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	3340      	adds	r3, #64	@ 0x40
 800f9b6:	009b      	lsls	r3, r3, #2
 800f9b8:	4413      	add	r3, r2
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	613b      	str	r3, [r7, #16]
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	2b0e      	cmp	r3, #14
 800f9c8:	d9f2      	bls.n	800f9b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f9ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d11c      	bne.n	800fa0c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	68fa      	ldr	r2, [r7, #12]
 800f9dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f9e0:	f043 0302 	orr.w	r3, r3, #2
 800f9e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	601a      	str	r2, [r3, #0]
 800fa0a:	e005      	b.n	800fa18 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa10:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fa1e:	461a      	mov	r2, r3
 800fa20:	2300      	movs	r3, #0
 800fa22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fa24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d10d      	bne.n	800fa48 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fa2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d104      	bne.n	800fa3e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fa34:	2100      	movs	r1, #0
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f968 	bl	800fd0c <USB_SetDevSpeed>
 800fa3c:	e008      	b.n	800fa50 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fa3e:	2101      	movs	r1, #1
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f000 f963 	bl	800fd0c <USB_SetDevSpeed>
 800fa46:	e003      	b.n	800fa50 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fa48:	2103      	movs	r1, #3
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f95e 	bl	800fd0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fa50:	2110      	movs	r1, #16
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 f8fa 	bl	800fc4c <USB_FlushTxFifo>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 f924 	bl	800fcb0 <USB_FlushRxFifo>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d001      	beq.n	800fa72 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800fa6e:	2301      	movs	r3, #1
 800fa70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa78:	461a      	mov	r2, r3
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa84:	461a      	mov	r2, r3
 800fa86:	2300      	movs	r3, #0
 800fa88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa90:	461a      	mov	r2, r3
 800fa92:	2300      	movs	r3, #0
 800fa94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa96:	2300      	movs	r3, #0
 800fa98:	613b      	str	r3, [r7, #16]
 800fa9a:	e043      	b.n	800fb24 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	015a      	lsls	r2, r3, #5
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	4413      	add	r3, r2
 800faa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800faae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fab2:	d118      	bne.n	800fae6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10a      	bne.n	800fad0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	015a      	lsls	r2, r3, #5
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	4413      	add	r3, r2
 800fac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fac6:	461a      	mov	r2, r3
 800fac8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800facc:	6013      	str	r3, [r2, #0]
 800face:	e013      	b.n	800faf8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	015a      	lsls	r2, r3, #5
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	4413      	add	r3, r2
 800fad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fadc:	461a      	mov	r2, r3
 800fade:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fae2:	6013      	str	r3, [r2, #0]
 800fae4:	e008      	b.n	800faf8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	015a      	lsls	r2, r3, #5
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	4413      	add	r3, r2
 800faee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800faf2:	461a      	mov	r2, r3
 800faf4:	2300      	movs	r3, #0
 800faf6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	015a      	lsls	r2, r3, #5
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	4413      	add	r3, r2
 800fb00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb04:	461a      	mov	r2, r3
 800fb06:	2300      	movs	r3, #0
 800fb08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	015a      	lsls	r2, r3, #5
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	4413      	add	r3, r2
 800fb12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb16:	461a      	mov	r2, r3
 800fb18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fb1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	3301      	adds	r3, #1
 800fb22:	613b      	str	r3, [r7, #16]
 800fb24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fb28:	461a      	mov	r2, r3
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d3b5      	bcc.n	800fa9c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb30:	2300      	movs	r3, #0
 800fb32:	613b      	str	r3, [r7, #16]
 800fb34:	e043      	b.n	800fbbe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	015a      	lsls	r2, r3, #5
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fb48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fb4c:	d118      	bne.n	800fb80 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10a      	bne.n	800fb6a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	015a      	lsls	r2, r3, #5
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb60:	461a      	mov	r2, r3
 800fb62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fb66:	6013      	str	r3, [r2, #0]
 800fb68:	e013      	b.n	800fb92 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	015a      	lsls	r2, r3, #5
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	4413      	add	r3, r2
 800fb72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb76:	461a      	mov	r2, r3
 800fb78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fb7c:	6013      	str	r3, [r2, #0]
 800fb7e:	e008      	b.n	800fb92 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	015a      	lsls	r2, r3, #5
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	4413      	add	r3, r2
 800fb88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	2300      	movs	r3, #0
 800fb90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	015a      	lsls	r2, r3, #5
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	4413      	add	r3, r2
 800fb9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb9e:	461a      	mov	r2, r3
 800fba0:	2300      	movs	r3, #0
 800fba2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	015a      	lsls	r2, r3, #5
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	4413      	add	r3, r2
 800fbac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fbb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	613b      	str	r3, [r7, #16]
 800fbbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d3b5      	bcc.n	800fb36 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbd0:	691b      	ldr	r3, [r3, #16]
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fbd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fbdc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800fbea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fbec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d105      	bne.n	800fc00 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	699b      	ldr	r3, [r3, #24]
 800fbf8:	f043 0210 	orr.w	r2, r3, #16
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	699a      	ldr	r2, [r3, #24]
 800fc04:	4b0f      	ldr	r3, [pc, #60]	@ (800fc44 <USB_DevInit+0x2b4>)
 800fc06:	4313      	orrs	r3, r2
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fc0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d005      	beq.n	800fc20 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	699b      	ldr	r3, [r3, #24]
 800fc18:	f043 0208 	orr.w	r2, r3, #8
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fc20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d105      	bne.n	800fc34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	699a      	ldr	r2, [r3, #24]
 800fc2c:	4b06      	ldr	r3, [pc, #24]	@ (800fc48 <USB_DevInit+0x2b8>)
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fc34:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3718      	adds	r7, #24
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc40:	b004      	add	sp, #16
 800fc42:	4770      	bx	lr
 800fc44:	803c3800 	.word	0x803c3800
 800fc48:	40000004 	.word	0x40000004

0800fc4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b085      	sub	sp, #20
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fc56:	2300      	movs	r3, #0
 800fc58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fc66:	d901      	bls.n	800fc6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fc68:	2303      	movs	r3, #3
 800fc6a:	e01b      	b.n	800fca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	daf2      	bge.n	800fc5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fc74:	2300      	movs	r3, #0
 800fc76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	019b      	lsls	r3, r3, #6
 800fc7c:	f043 0220 	orr.w	r2, r3, #32
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	3301      	adds	r3, #1
 800fc88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fc90:	d901      	bls.n	800fc96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fc92:	2303      	movs	r3, #3
 800fc94:	e006      	b.n	800fca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	f003 0320 	and.w	r3, r3, #32
 800fc9e:	2b20      	cmp	r3, #32
 800fca0:	d0f0      	beq.n	800fc84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fca2:	2300      	movs	r3, #0
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3714      	adds	r7, #20
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b085      	sub	sp, #20
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fcc8:	d901      	bls.n	800fcce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fcca:	2303      	movs	r3, #3
 800fccc:	e018      	b.n	800fd00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	691b      	ldr	r3, [r3, #16]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	daf2      	bge.n	800fcbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2210      	movs	r2, #16
 800fcde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	3301      	adds	r3, #1
 800fce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fcec:	d901      	bls.n	800fcf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fcee:	2303      	movs	r3, #3
 800fcf0:	e006      	b.n	800fd00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	f003 0310 	and.w	r3, r3, #16
 800fcfa:	2b10      	cmp	r3, #16
 800fcfc:	d0f0      	beq.n	800fce0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3714      	adds	r7, #20
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr

0800fd0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b085      	sub	sp, #20
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	460b      	mov	r3, r1
 800fd16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	78fb      	ldrb	r3, [r7, #3]
 800fd26:	68f9      	ldr	r1, [r7, #12]
 800fd28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fd30:	2300      	movs	r3, #0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3714      	adds	r7, #20
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr

0800fd3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800fd3e:	b480      	push	{r7}
 800fd40:	b087      	sub	sp, #28
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd50:	689b      	ldr	r3, [r3, #8]
 800fd52:	f003 0306 	and.w	r3, r3, #6
 800fd56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d102      	bne.n	800fd64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	75fb      	strb	r3, [r7, #23]
 800fd62:	e00a      	b.n	800fd7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2b02      	cmp	r3, #2
 800fd68:	d002      	beq.n	800fd70 <USB_GetDevSpeed+0x32>
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2b06      	cmp	r3, #6
 800fd6e:	d102      	bne.n	800fd76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fd70:	2302      	movs	r3, #2
 800fd72:	75fb      	strb	r3, [r7, #23]
 800fd74:	e001      	b.n	800fd7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fd76:	230f      	movs	r3, #15
 800fd78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fd7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	371c      	adds	r7, #28
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b085      	sub	sp, #20
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	785b      	ldrb	r3, [r3, #1]
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d139      	bne.n	800fe18 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fdaa:	69da      	ldr	r2, [r3, #28]
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	f003 030f 	and.w	r3, r3, #15
 800fdb4:	2101      	movs	r1, #1
 800fdb6:	fa01 f303 	lsl.w	r3, r1, r3
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	68f9      	ldr	r1, [r7, #12]
 800fdbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fdc2:	4313      	orrs	r3, r2
 800fdc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	015a      	lsls	r2, r3, #5
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	4413      	add	r3, r2
 800fdce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d153      	bne.n	800fe84 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	015a      	lsls	r2, r3, #5
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	4413      	add	r3, r2
 800fde4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	689b      	ldr	r3, [r3, #8]
 800fdee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	791b      	ldrb	r3, [r3, #4]
 800fdf6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fdf8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	059b      	lsls	r3, r3, #22
 800fdfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fe00:	431a      	orrs	r2, r3
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	0159      	lsls	r1, r3, #5
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	440b      	add	r3, r1
 800fe0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe0e:	4619      	mov	r1, r3
 800fe10:	4b20      	ldr	r3, [pc, #128]	@ (800fe94 <USB_ActivateEndpoint+0x10c>)
 800fe12:	4313      	orrs	r3, r2
 800fe14:	600b      	str	r3, [r1, #0]
 800fe16:	e035      	b.n	800fe84 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe1e:	69da      	ldr	r2, [r3, #28]
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	f003 030f 	and.w	r3, r3, #15
 800fe28:	2101      	movs	r1, #1
 800fe2a:	fa01 f303 	lsl.w	r3, r1, r3
 800fe2e:	041b      	lsls	r3, r3, #16
 800fe30:	68f9      	ldr	r1, [r7, #12]
 800fe32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fe36:	4313      	orrs	r3, r2
 800fe38:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	015a      	lsls	r2, r3, #5
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	4413      	add	r3, r2
 800fe42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d119      	bne.n	800fe84 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	015a      	lsls	r2, r3, #5
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	4413      	add	r3, r2
 800fe58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	689b      	ldr	r3, [r3, #8]
 800fe62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	791b      	ldrb	r3, [r3, #4]
 800fe6a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fe6c:	430b      	orrs	r3, r1
 800fe6e:	431a      	orrs	r2, r3
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	0159      	lsls	r1, r3, #5
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	440b      	add	r3, r1
 800fe78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	4b05      	ldr	r3, [pc, #20]	@ (800fe94 <USB_ActivateEndpoint+0x10c>)
 800fe80:	4313      	orrs	r3, r2
 800fe82:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fe84:	2300      	movs	r3, #0
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3714      	adds	r7, #20
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	10008000 	.word	0x10008000

0800fe98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	785b      	ldrb	r3, [r3, #1]
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d161      	bne.n	800ff78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	015a      	lsls	r2, r3, #5
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	4413      	add	r3, r2
 800febc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800feca:	d11f      	bne.n	800ff0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	015a      	lsls	r2, r3, #5
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	4413      	add	r3, r2
 800fed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	0151      	lsls	r1, r2, #5
 800fede:	68fa      	ldr	r2, [r7, #12]
 800fee0:	440a      	add	r2, r1
 800fee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fee6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800feea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	015a      	lsls	r2, r3, #5
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	4413      	add	r3, r2
 800fef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	68ba      	ldr	r2, [r7, #8]
 800fefc:	0151      	lsls	r1, r2, #5
 800fefe:	68fa      	ldr	r2, [r7, #12]
 800ff00:	440a      	add	r2, r1
 800ff02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ff0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	f003 030f 	and.w	r3, r3, #15
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	43db      	mvns	r3, r3
 800ff26:	68f9      	ldr	r1, [r7, #12]
 800ff28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ff2c:	4013      	ands	r3, r2
 800ff2e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff36:	69da      	ldr	r2, [r3, #28]
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	f003 030f 	and.w	r3, r3, #15
 800ff40:	2101      	movs	r1, #1
 800ff42:	fa01 f303 	lsl.w	r3, r1, r3
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	43db      	mvns	r3, r3
 800ff4a:	68f9      	ldr	r1, [r7, #12]
 800ff4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ff50:	4013      	ands	r3, r2
 800ff52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	015a      	lsls	r2, r3, #5
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	4413      	add	r3, r2
 800ff5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff60:	681a      	ldr	r2, [r3, #0]
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	0159      	lsls	r1, r3, #5
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	440b      	add	r3, r1
 800ff6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff6e:	4619      	mov	r1, r3
 800ff70:	4b35      	ldr	r3, [pc, #212]	@ (8010048 <USB_DeactivateEndpoint+0x1b0>)
 800ff72:	4013      	ands	r3, r2
 800ff74:	600b      	str	r3, [r1, #0]
 800ff76:	e060      	b.n	801003a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	015a      	lsls	r2, r3, #5
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	4413      	add	r3, r2
 800ff80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ff8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ff8e:	d11f      	bne.n	800ffd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	015a      	lsls	r2, r3, #5
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	4413      	add	r3, r2
 800ff98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	68ba      	ldr	r2, [r7, #8]
 800ffa0:	0151      	lsls	r1, r2, #5
 800ffa2:	68fa      	ldr	r2, [r7, #12]
 800ffa4:	440a      	add	r2, r1
 800ffa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ffaa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ffae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	015a      	lsls	r2, r3, #5
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	4413      	add	r3, r2
 800ffb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	68ba      	ldr	r2, [r7, #8]
 800ffc0:	0151      	lsls	r1, r2, #5
 800ffc2:	68fa      	ldr	r2, [r7, #12]
 800ffc4:	440a      	add	r2, r1
 800ffc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ffca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ffce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ffd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	f003 030f 	and.w	r3, r3, #15
 800ffe0:	2101      	movs	r1, #1
 800ffe2:	fa01 f303 	lsl.w	r3, r1, r3
 800ffe6:	041b      	lsls	r3, r3, #16
 800ffe8:	43db      	mvns	r3, r3
 800ffea:	68f9      	ldr	r1, [r7, #12]
 800ffec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fff0:	4013      	ands	r3, r2
 800fff2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fffa:	69da      	ldr	r2, [r3, #28]
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	f003 030f 	and.w	r3, r3, #15
 8010004:	2101      	movs	r1, #1
 8010006:	fa01 f303 	lsl.w	r3, r1, r3
 801000a:	041b      	lsls	r3, r3, #16
 801000c:	43db      	mvns	r3, r3
 801000e:	68f9      	ldr	r1, [r7, #12]
 8010010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010014:	4013      	ands	r3, r2
 8010016:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	015a      	lsls	r2, r3, #5
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	4413      	add	r3, r2
 8010020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	0159      	lsls	r1, r3, #5
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	440b      	add	r3, r1
 801002e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010032:	4619      	mov	r1, r3
 8010034:	4b05      	ldr	r3, [pc, #20]	@ (801004c <USB_DeactivateEndpoint+0x1b4>)
 8010036:	4013      	ands	r3, r2
 8010038:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801003a:	2300      	movs	r3, #0
}
 801003c:	4618      	mov	r0, r3
 801003e:	3714      	adds	r7, #20
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr
 8010048:	ec337800 	.word	0xec337800
 801004c:	eff37800 	.word	0xeff37800

08010050 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b08a      	sub	sp, #40	@ 0x28
 8010054:	af02      	add	r7, sp, #8
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	4613      	mov	r3, r2
 801005c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	785b      	ldrb	r3, [r3, #1]
 801006c:	2b01      	cmp	r3, #1
 801006e:	f040 8181 	bne.w	8010374 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	691b      	ldr	r3, [r3, #16]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d132      	bne.n	80100e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	015a      	lsls	r2, r3, #5
 801007e:	69fb      	ldr	r3, [r7, #28]
 8010080:	4413      	add	r3, r2
 8010082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010086:	691a      	ldr	r2, [r3, #16]
 8010088:	69bb      	ldr	r3, [r7, #24]
 801008a:	0159      	lsls	r1, r3, #5
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	440b      	add	r3, r1
 8010090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010094:	4619      	mov	r1, r3
 8010096:	4ba5      	ldr	r3, [pc, #660]	@ (801032c <USB_EPStartXfer+0x2dc>)
 8010098:	4013      	ands	r3, r2
 801009a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801009c:	69bb      	ldr	r3, [r7, #24]
 801009e:	015a      	lsls	r2, r3, #5
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	4413      	add	r3, r2
 80100a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100a8:	691b      	ldr	r3, [r3, #16]
 80100aa:	69ba      	ldr	r2, [r7, #24]
 80100ac:	0151      	lsls	r1, r2, #5
 80100ae:	69fa      	ldr	r2, [r7, #28]
 80100b0:	440a      	add	r2, r1
 80100b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80100ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80100bc:	69bb      	ldr	r3, [r7, #24]
 80100be:	015a      	lsls	r2, r3, #5
 80100c0:	69fb      	ldr	r3, [r7, #28]
 80100c2:	4413      	add	r3, r2
 80100c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100c8:	691a      	ldr	r2, [r3, #16]
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	0159      	lsls	r1, r3, #5
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	440b      	add	r3, r1
 80100d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100d6:	4619      	mov	r1, r3
 80100d8:	4b95      	ldr	r3, [pc, #596]	@ (8010330 <USB_EPStartXfer+0x2e0>)
 80100da:	4013      	ands	r3, r2
 80100dc:	610b      	str	r3, [r1, #16]
 80100de:	e092      	b.n	8010206 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80100e0:	69bb      	ldr	r3, [r7, #24]
 80100e2:	015a      	lsls	r2, r3, #5
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	4413      	add	r3, r2
 80100e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100ec:	691a      	ldr	r2, [r3, #16]
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	0159      	lsls	r1, r3, #5
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	440b      	add	r3, r1
 80100f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100fa:	4619      	mov	r1, r3
 80100fc:	4b8c      	ldr	r3, [pc, #560]	@ (8010330 <USB_EPStartXfer+0x2e0>)
 80100fe:	4013      	ands	r3, r2
 8010100:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	015a      	lsls	r2, r3, #5
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	4413      	add	r3, r2
 801010a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801010e:	691a      	ldr	r2, [r3, #16]
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	0159      	lsls	r1, r3, #5
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	440b      	add	r3, r1
 8010118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801011c:	4619      	mov	r1, r3
 801011e:	4b83      	ldr	r3, [pc, #524]	@ (801032c <USB_EPStartXfer+0x2dc>)
 8010120:	4013      	ands	r3, r2
 8010122:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8010124:	69bb      	ldr	r3, [r7, #24]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d11a      	bne.n	8010160 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	691a      	ldr	r2, [r3, #16]
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	689b      	ldr	r3, [r3, #8]
 8010132:	429a      	cmp	r2, r3
 8010134:	d903      	bls.n	801013e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	689a      	ldr	r2, [r3, #8]
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	015a      	lsls	r2, r3, #5
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	4413      	add	r3, r2
 8010146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801014a:	691b      	ldr	r3, [r3, #16]
 801014c:	69ba      	ldr	r2, [r7, #24]
 801014e:	0151      	lsls	r1, r2, #5
 8010150:	69fa      	ldr	r2, [r7, #28]
 8010152:	440a      	add	r2, r1
 8010154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010158:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801015c:	6113      	str	r3, [r2, #16]
 801015e:	e01b      	b.n	8010198 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010160:	69bb      	ldr	r3, [r7, #24]
 8010162:	015a      	lsls	r2, r3, #5
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	4413      	add	r3, r2
 8010168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801016c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	6919      	ldr	r1, [r3, #16]
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	440b      	add	r3, r1
 8010178:	1e59      	subs	r1, r3, #1
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	689b      	ldr	r3, [r3, #8]
 801017e:	fbb1 f3f3 	udiv	r3, r1, r3
 8010182:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010184:	4b6b      	ldr	r3, [pc, #428]	@ (8010334 <USB_EPStartXfer+0x2e4>)
 8010186:	400b      	ands	r3, r1
 8010188:	69b9      	ldr	r1, [r7, #24]
 801018a:	0148      	lsls	r0, r1, #5
 801018c:	69f9      	ldr	r1, [r7, #28]
 801018e:	4401      	add	r1, r0
 8010190:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010194:	4313      	orrs	r3, r2
 8010196:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010198:	69bb      	ldr	r3, [r7, #24]
 801019a:	015a      	lsls	r2, r3, #5
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	4413      	add	r3, r2
 80101a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101a4:	691a      	ldr	r2, [r3, #16]
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101ae:	69b9      	ldr	r1, [r7, #24]
 80101b0:	0148      	lsls	r0, r1, #5
 80101b2:	69f9      	ldr	r1, [r7, #28]
 80101b4:	4401      	add	r1, r0
 80101b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80101ba:	4313      	orrs	r3, r2
 80101bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	791b      	ldrb	r3, [r3, #4]
 80101c2:	2b01      	cmp	r3, #1
 80101c4:	d11f      	bne.n	8010206 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	015a      	lsls	r2, r3, #5
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	4413      	add	r3, r2
 80101ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101d2:	691b      	ldr	r3, [r3, #16]
 80101d4:	69ba      	ldr	r2, [r7, #24]
 80101d6:	0151      	lsls	r1, r2, #5
 80101d8:	69fa      	ldr	r2, [r7, #28]
 80101da:	440a      	add	r2, r1
 80101dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80101e0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80101e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	015a      	lsls	r2, r3, #5
 80101ea:	69fb      	ldr	r3, [r7, #28]
 80101ec:	4413      	add	r3, r2
 80101ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101f2:	691b      	ldr	r3, [r3, #16]
 80101f4:	69ba      	ldr	r2, [r7, #24]
 80101f6:	0151      	lsls	r1, r2, #5
 80101f8:	69fa      	ldr	r2, [r7, #28]
 80101fa:	440a      	add	r2, r1
 80101fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010200:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010204:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010206:	79fb      	ldrb	r3, [r7, #7]
 8010208:	2b01      	cmp	r3, #1
 801020a:	d14b      	bne.n	80102a4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	69db      	ldr	r3, [r3, #28]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d009      	beq.n	8010228 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	015a      	lsls	r2, r3, #5
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	4413      	add	r3, r2
 801021c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010220:	461a      	mov	r2, r3
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	69db      	ldr	r3, [r3, #28]
 8010226:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	791b      	ldrb	r3, [r3, #4]
 801022c:	2b01      	cmp	r3, #1
 801022e:	d128      	bne.n	8010282 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010236:	689b      	ldr	r3, [r3, #8]
 8010238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801023c:	2b00      	cmp	r3, #0
 801023e:	d110      	bne.n	8010262 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	015a      	lsls	r2, r3, #5
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	4413      	add	r3, r2
 8010248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	69ba      	ldr	r2, [r7, #24]
 8010250:	0151      	lsls	r1, r2, #5
 8010252:	69fa      	ldr	r2, [r7, #28]
 8010254:	440a      	add	r2, r1
 8010256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801025a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801025e:	6013      	str	r3, [r2, #0]
 8010260:	e00f      	b.n	8010282 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	015a      	lsls	r2, r3, #5
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	4413      	add	r3, r2
 801026a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	69ba      	ldr	r2, [r7, #24]
 8010272:	0151      	lsls	r1, r2, #5
 8010274:	69fa      	ldr	r2, [r7, #28]
 8010276:	440a      	add	r2, r1
 8010278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801027c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010280:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010282:	69bb      	ldr	r3, [r7, #24]
 8010284:	015a      	lsls	r2, r3, #5
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	4413      	add	r3, r2
 801028a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	69ba      	ldr	r2, [r7, #24]
 8010292:	0151      	lsls	r1, r2, #5
 8010294:	69fa      	ldr	r2, [r7, #28]
 8010296:	440a      	add	r2, r1
 8010298:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801029c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80102a0:	6013      	str	r3, [r2, #0]
 80102a2:	e16a      	b.n	801057a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80102a4:	69bb      	ldr	r3, [r7, #24]
 80102a6:	015a      	lsls	r2, r3, #5
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	4413      	add	r3, r2
 80102ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	69ba      	ldr	r2, [r7, #24]
 80102b4:	0151      	lsls	r1, r2, #5
 80102b6:	69fa      	ldr	r2, [r7, #28]
 80102b8:	440a      	add	r2, r1
 80102ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80102be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80102c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	791b      	ldrb	r3, [r3, #4]
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d015      	beq.n	80102f8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	691b      	ldr	r3, [r3, #16]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f000 8152 	beq.w	801057a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80102dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	f003 030f 	and.w	r3, r3, #15
 80102e6:	2101      	movs	r1, #1
 80102e8:	fa01 f303 	lsl.w	r3, r1, r3
 80102ec:	69f9      	ldr	r1, [r7, #28]
 80102ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80102f2:	4313      	orrs	r3, r2
 80102f4:	634b      	str	r3, [r1, #52]	@ 0x34
 80102f6:	e140      	b.n	801057a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010304:	2b00      	cmp	r3, #0
 8010306:	d117      	bne.n	8010338 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010308:	69bb      	ldr	r3, [r7, #24]
 801030a:	015a      	lsls	r2, r3, #5
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	4413      	add	r3, r2
 8010310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	69ba      	ldr	r2, [r7, #24]
 8010318:	0151      	lsls	r1, r2, #5
 801031a:	69fa      	ldr	r2, [r7, #28]
 801031c:	440a      	add	r2, r1
 801031e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010322:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010326:	6013      	str	r3, [r2, #0]
 8010328:	e016      	b.n	8010358 <USB_EPStartXfer+0x308>
 801032a:	bf00      	nop
 801032c:	e007ffff 	.word	0xe007ffff
 8010330:	fff80000 	.word	0xfff80000
 8010334:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010338:	69bb      	ldr	r3, [r7, #24]
 801033a:	015a      	lsls	r2, r3, #5
 801033c:	69fb      	ldr	r3, [r7, #28]
 801033e:	4413      	add	r3, r2
 8010340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	69ba      	ldr	r2, [r7, #24]
 8010348:	0151      	lsls	r1, r2, #5
 801034a:	69fa      	ldr	r2, [r7, #28]
 801034c:	440a      	add	r2, r1
 801034e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010356:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	68d9      	ldr	r1, [r3, #12]
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	781a      	ldrb	r2, [r3, #0]
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	b298      	uxth	r0, r3
 8010366:	79fb      	ldrb	r3, [r7, #7]
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	4603      	mov	r3, r0
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f000 f9b9 	bl	80106e4 <USB_WritePacket>
 8010372:	e102      	b.n	801057a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	015a      	lsls	r2, r3, #5
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	4413      	add	r3, r2
 801037c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010380:	691a      	ldr	r2, [r3, #16]
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	0159      	lsls	r1, r3, #5
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	440b      	add	r3, r1
 801038a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801038e:	4619      	mov	r1, r3
 8010390:	4b7c      	ldr	r3, [pc, #496]	@ (8010584 <USB_EPStartXfer+0x534>)
 8010392:	4013      	ands	r3, r2
 8010394:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	015a      	lsls	r2, r3, #5
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	4413      	add	r3, r2
 801039e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103a2:	691a      	ldr	r2, [r3, #16]
 80103a4:	69bb      	ldr	r3, [r7, #24]
 80103a6:	0159      	lsls	r1, r3, #5
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	440b      	add	r3, r1
 80103ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103b0:	4619      	mov	r1, r3
 80103b2:	4b75      	ldr	r3, [pc, #468]	@ (8010588 <USB_EPStartXfer+0x538>)
 80103b4:	4013      	ands	r3, r2
 80103b6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d12f      	bne.n	801041e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	691b      	ldr	r3, [r3, #16]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d003      	beq.n	80103ce <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	689a      	ldr	r2, [r3, #8]
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	689a      	ldr	r2, [r3, #8]
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	015a      	lsls	r2, r3, #5
 80103da:	69fb      	ldr	r3, [r7, #28]
 80103dc:	4413      	add	r3, r2
 80103de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103e2:	691a      	ldr	r2, [r3, #16]
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	6a1b      	ldr	r3, [r3, #32]
 80103e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103ec:	69b9      	ldr	r1, [r7, #24]
 80103ee:	0148      	lsls	r0, r1, #5
 80103f0:	69f9      	ldr	r1, [r7, #28]
 80103f2:	4401      	add	r1, r0
 80103f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80103f8:	4313      	orrs	r3, r2
 80103fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	015a      	lsls	r2, r3, #5
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	4413      	add	r3, r2
 8010404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010408:	691b      	ldr	r3, [r3, #16]
 801040a:	69ba      	ldr	r2, [r7, #24]
 801040c:	0151      	lsls	r1, r2, #5
 801040e:	69fa      	ldr	r2, [r7, #28]
 8010410:	440a      	add	r2, r1
 8010412:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010416:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801041a:	6113      	str	r3, [r2, #16]
 801041c:	e05f      	b.n	80104de <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d123      	bne.n	801046e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	015a      	lsls	r2, r3, #5
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	4413      	add	r3, r2
 801042e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010432:	691a      	ldr	r2, [r3, #16]
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	689b      	ldr	r3, [r3, #8]
 8010438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801043c:	69b9      	ldr	r1, [r7, #24]
 801043e:	0148      	lsls	r0, r1, #5
 8010440:	69f9      	ldr	r1, [r7, #28]
 8010442:	4401      	add	r1, r0
 8010444:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010448:	4313      	orrs	r3, r2
 801044a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	015a      	lsls	r2, r3, #5
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	4413      	add	r3, r2
 8010454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010458:	691b      	ldr	r3, [r3, #16]
 801045a:	69ba      	ldr	r2, [r7, #24]
 801045c:	0151      	lsls	r1, r2, #5
 801045e:	69fa      	ldr	r2, [r7, #28]
 8010460:	440a      	add	r2, r1
 8010462:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010466:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801046a:	6113      	str	r3, [r2, #16]
 801046c:	e037      	b.n	80104de <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	691a      	ldr	r2, [r3, #16]
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	689b      	ldr	r3, [r3, #8]
 8010476:	4413      	add	r3, r2
 8010478:	1e5a      	subs	r2, r3, #1
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010482:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	689b      	ldr	r3, [r3, #8]
 8010488:	8afa      	ldrh	r2, [r7, #22]
 801048a:	fb03 f202 	mul.w	r2, r3, r2
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	015a      	lsls	r2, r3, #5
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	4413      	add	r3, r2
 801049a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801049e:	691a      	ldr	r2, [r3, #16]
 80104a0:	8afb      	ldrh	r3, [r7, #22]
 80104a2:	04d9      	lsls	r1, r3, #19
 80104a4:	4b39      	ldr	r3, [pc, #228]	@ (801058c <USB_EPStartXfer+0x53c>)
 80104a6:	400b      	ands	r3, r1
 80104a8:	69b9      	ldr	r1, [r7, #24]
 80104aa:	0148      	lsls	r0, r1, #5
 80104ac:	69f9      	ldr	r1, [r7, #28]
 80104ae:	4401      	add	r1, r0
 80104b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80104b4:	4313      	orrs	r3, r2
 80104b6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	015a      	lsls	r2, r3, #5
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	4413      	add	r3, r2
 80104c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104c4:	691a      	ldr	r2, [r3, #16]
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	6a1b      	ldr	r3, [r3, #32]
 80104ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104ce:	69b9      	ldr	r1, [r7, #24]
 80104d0:	0148      	lsls	r0, r1, #5
 80104d2:	69f9      	ldr	r1, [r7, #28]
 80104d4:	4401      	add	r1, r0
 80104d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80104da:	4313      	orrs	r3, r2
 80104dc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80104de:	79fb      	ldrb	r3, [r7, #7]
 80104e0:	2b01      	cmp	r3, #1
 80104e2:	d10d      	bne.n	8010500 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d009      	beq.n	8010500 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	68d9      	ldr	r1, [r3, #12]
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	015a      	lsls	r2, r3, #5
 80104f4:	69fb      	ldr	r3, [r7, #28]
 80104f6:	4413      	add	r3, r2
 80104f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104fc:	460a      	mov	r2, r1
 80104fe:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	791b      	ldrb	r3, [r3, #4]
 8010504:	2b01      	cmp	r3, #1
 8010506:	d128      	bne.n	801055a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801050e:	689b      	ldr	r3, [r3, #8]
 8010510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010514:	2b00      	cmp	r3, #0
 8010516:	d110      	bne.n	801053a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010518:	69bb      	ldr	r3, [r7, #24]
 801051a:	015a      	lsls	r2, r3, #5
 801051c:	69fb      	ldr	r3, [r7, #28]
 801051e:	4413      	add	r3, r2
 8010520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	69ba      	ldr	r2, [r7, #24]
 8010528:	0151      	lsls	r1, r2, #5
 801052a:	69fa      	ldr	r2, [r7, #28]
 801052c:	440a      	add	r2, r1
 801052e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010532:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010536:	6013      	str	r3, [r2, #0]
 8010538:	e00f      	b.n	801055a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801053a:	69bb      	ldr	r3, [r7, #24]
 801053c:	015a      	lsls	r2, r3, #5
 801053e:	69fb      	ldr	r3, [r7, #28]
 8010540:	4413      	add	r3, r2
 8010542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	69ba      	ldr	r2, [r7, #24]
 801054a:	0151      	lsls	r1, r2, #5
 801054c:	69fa      	ldr	r2, [r7, #28]
 801054e:	440a      	add	r2, r1
 8010550:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010558:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	015a      	lsls	r2, r3, #5
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	4413      	add	r3, r2
 8010562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	69ba      	ldr	r2, [r7, #24]
 801056a:	0151      	lsls	r1, r2, #5
 801056c:	69fa      	ldr	r2, [r7, #28]
 801056e:	440a      	add	r2, r1
 8010570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010574:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010578:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801057a:	2300      	movs	r3, #0
}
 801057c:	4618      	mov	r0, r3
 801057e:	3720      	adds	r7, #32
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	fff80000 	.word	0xfff80000
 8010588:	e007ffff 	.word	0xe007ffff
 801058c:	1ff80000 	.word	0x1ff80000

08010590 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010590:	b480      	push	{r7}
 8010592:	b087      	sub	sp, #28
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801059a:	2300      	movs	r3, #0
 801059c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801059e:	2300      	movs	r3, #0
 80105a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	785b      	ldrb	r3, [r3, #1]
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d14a      	bne.n	8010644 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	015a      	lsls	r2, r3, #5
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	4413      	add	r3, r2
 80105b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80105c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80105c6:	f040 8086 	bne.w	80106d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	015a      	lsls	r2, r3, #5
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	4413      	add	r3, r2
 80105d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	7812      	ldrb	r2, [r2, #0]
 80105de:	0151      	lsls	r1, r2, #5
 80105e0:	693a      	ldr	r2, [r7, #16]
 80105e2:	440a      	add	r2, r1
 80105e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80105e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80105ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	015a      	lsls	r2, r3, #5
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	4413      	add	r3, r2
 80105f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	683a      	ldr	r2, [r7, #0]
 8010600:	7812      	ldrb	r2, [r2, #0]
 8010602:	0151      	lsls	r1, r2, #5
 8010604:	693a      	ldr	r2, [r7, #16]
 8010606:	440a      	add	r2, r1
 8010608:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801060c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010610:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	3301      	adds	r3, #1
 8010616:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801061e:	4293      	cmp	r3, r2
 8010620:	d902      	bls.n	8010628 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010622:	2301      	movs	r3, #1
 8010624:	75fb      	strb	r3, [r7, #23]
          break;
 8010626:	e056      	b.n	80106d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	015a      	lsls	r2, r3, #5
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	4413      	add	r3, r2
 8010632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801063c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010640:	d0e7      	beq.n	8010612 <USB_EPStopXfer+0x82>
 8010642:	e048      	b.n	80106d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	015a      	lsls	r2, r3, #5
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	4413      	add	r3, r2
 801064e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010658:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801065c:	d13b      	bne.n	80106d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	781b      	ldrb	r3, [r3, #0]
 8010662:	015a      	lsls	r2, r3, #5
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	4413      	add	r3, r2
 8010668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	7812      	ldrb	r2, [r2, #0]
 8010672:	0151      	lsls	r1, r2, #5
 8010674:	693a      	ldr	r2, [r7, #16]
 8010676:	440a      	add	r2, r1
 8010678:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801067c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010680:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	015a      	lsls	r2, r3, #5
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	4413      	add	r3, r2
 801068c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	683a      	ldr	r2, [r7, #0]
 8010694:	7812      	ldrb	r2, [r2, #0]
 8010696:	0151      	lsls	r1, r2, #5
 8010698:	693a      	ldr	r2, [r7, #16]
 801069a:	440a      	add	r2, r1
 801069c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80106a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80106a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	3301      	adds	r3, #1
 80106aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d902      	bls.n	80106bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80106b6:	2301      	movs	r3, #1
 80106b8:	75fb      	strb	r3, [r7, #23]
          break;
 80106ba:	e00c      	b.n	80106d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	015a      	lsls	r2, r3, #5
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	4413      	add	r3, r2
 80106c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80106d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80106d4:	d0e7      	beq.n	80106a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80106d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80106d8:	4618      	mov	r0, r3
 80106da:	371c      	adds	r7, #28
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b089      	sub	sp, #36	@ 0x24
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	4611      	mov	r1, r2
 80106f0:	461a      	mov	r2, r3
 80106f2:	460b      	mov	r3, r1
 80106f4:	71fb      	strb	r3, [r7, #7]
 80106f6:	4613      	mov	r3, r2
 80106f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010702:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010706:	2b00      	cmp	r3, #0
 8010708:	d123      	bne.n	8010752 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801070a:	88bb      	ldrh	r3, [r7, #4]
 801070c:	3303      	adds	r3, #3
 801070e:	089b      	lsrs	r3, r3, #2
 8010710:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010712:	2300      	movs	r3, #0
 8010714:	61bb      	str	r3, [r7, #24]
 8010716:	e018      	b.n	801074a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010718:	79fb      	ldrb	r3, [r7, #7]
 801071a:	031a      	lsls	r2, r3, #12
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	4413      	add	r3, r2
 8010720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010724:	461a      	mov	r2, r3
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	3301      	adds	r3, #1
 8010730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	3301      	adds	r3, #1
 8010736:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	3301      	adds	r3, #1
 801073c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801073e:	69fb      	ldr	r3, [r7, #28]
 8010740:	3301      	adds	r3, #1
 8010742:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	3301      	adds	r3, #1
 8010748:	61bb      	str	r3, [r7, #24]
 801074a:	69ba      	ldr	r2, [r7, #24]
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	429a      	cmp	r2, r3
 8010750:	d3e2      	bcc.n	8010718 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010752:	2300      	movs	r3, #0
}
 8010754:	4618      	mov	r0, r3
 8010756:	3724      	adds	r7, #36	@ 0x24
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr

08010760 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010760:	b480      	push	{r7}
 8010762:	b08b      	sub	sp, #44	@ 0x2c
 8010764:	af00      	add	r7, sp, #0
 8010766:	60f8      	str	r0, [r7, #12]
 8010768:	60b9      	str	r1, [r7, #8]
 801076a:	4613      	mov	r3, r2
 801076c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010776:	88fb      	ldrh	r3, [r7, #6]
 8010778:	089b      	lsrs	r3, r3, #2
 801077a:	b29b      	uxth	r3, r3
 801077c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801077e:	88fb      	ldrh	r3, [r7, #6]
 8010780:	f003 0303 	and.w	r3, r3, #3
 8010784:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010786:	2300      	movs	r3, #0
 8010788:	623b      	str	r3, [r7, #32]
 801078a:	e014      	b.n	80107b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801078c:	69bb      	ldr	r3, [r7, #24]
 801078e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010796:	601a      	str	r2, [r3, #0]
    pDest++;
 8010798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801079a:	3301      	adds	r3, #1
 801079c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801079e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a0:	3301      	adds	r3, #1
 80107a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80107a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a6:	3301      	adds	r3, #1
 80107a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80107aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ac:	3301      	adds	r3, #1
 80107ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80107b0:	6a3b      	ldr	r3, [r7, #32]
 80107b2:	3301      	adds	r3, #1
 80107b4:	623b      	str	r3, [r7, #32]
 80107b6:	6a3a      	ldr	r2, [r7, #32]
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d3e6      	bcc.n	801078c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80107be:	8bfb      	ldrh	r3, [r7, #30]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d01e      	beq.n	8010802 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80107c4:	2300      	movs	r3, #0
 80107c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80107c8:	69bb      	ldr	r3, [r7, #24]
 80107ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80107ce:	461a      	mov	r2, r3
 80107d0:	f107 0310 	add.w	r3, r7, #16
 80107d4:	6812      	ldr	r2, [r2, #0]
 80107d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80107d8:	693a      	ldr	r2, [r7, #16]
 80107da:	6a3b      	ldr	r3, [r7, #32]
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	00db      	lsls	r3, r3, #3
 80107e0:	fa22 f303 	lsr.w	r3, r2, r3
 80107e4:	b2da      	uxtb	r2, r3
 80107e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e8:	701a      	strb	r2, [r3, #0]
      i++;
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	3301      	adds	r3, #1
 80107ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80107f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f2:	3301      	adds	r3, #1
 80107f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80107f6:	8bfb      	ldrh	r3, [r7, #30]
 80107f8:	3b01      	subs	r3, #1
 80107fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80107fc:	8bfb      	ldrh	r3, [r7, #30]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d1ea      	bne.n	80107d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010804:	4618      	mov	r0, r3
 8010806:	372c      	adds	r7, #44	@ 0x2c
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010810:	b480      	push	{r7}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	785b      	ldrb	r3, [r3, #1]
 8010828:	2b01      	cmp	r3, #1
 801082a:	d12c      	bne.n	8010886 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	015a      	lsls	r2, r3, #5
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	4413      	add	r3, r2
 8010834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	2b00      	cmp	r3, #0
 801083c:	db12      	blt.n	8010864 <USB_EPSetStall+0x54>
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d00f      	beq.n	8010864 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	015a      	lsls	r2, r3, #5
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	4413      	add	r3, r2
 801084c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	68ba      	ldr	r2, [r7, #8]
 8010854:	0151      	lsls	r1, r2, #5
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	440a      	add	r2, r1
 801085a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801085e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010862:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	015a      	lsls	r2, r3, #5
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	4413      	add	r3, r2
 801086c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	0151      	lsls	r1, r2, #5
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	440a      	add	r2, r1
 801087a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801087e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010882:	6013      	str	r3, [r2, #0]
 8010884:	e02b      	b.n	80108de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	015a      	lsls	r2, r3, #5
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	4413      	add	r3, r2
 801088e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	db12      	blt.n	80108be <USB_EPSetStall+0xae>
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00f      	beq.n	80108be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	015a      	lsls	r2, r3, #5
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	4413      	add	r3, r2
 80108a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	0151      	lsls	r1, r2, #5
 80108b0:	68fa      	ldr	r2, [r7, #12]
 80108b2:	440a      	add	r2, r1
 80108b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80108b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80108bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	015a      	lsls	r2, r3, #5
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	4413      	add	r3, r2
 80108c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	68ba      	ldr	r2, [r7, #8]
 80108ce:	0151      	lsls	r1, r2, #5
 80108d0:	68fa      	ldr	r2, [r7, #12]
 80108d2:	440a      	add	r2, r1
 80108d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80108d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80108dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80108de:	2300      	movs	r3, #0
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3714      	adds	r7, #20
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b085      	sub	sp, #20
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	785b      	ldrb	r3, [r3, #1]
 8010904:	2b01      	cmp	r3, #1
 8010906:	d128      	bne.n	801095a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	015a      	lsls	r2, r3, #5
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	4413      	add	r3, r2
 8010910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	68ba      	ldr	r2, [r7, #8]
 8010918:	0151      	lsls	r1, r2, #5
 801091a:	68fa      	ldr	r2, [r7, #12]
 801091c:	440a      	add	r2, r1
 801091e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010922:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010926:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	791b      	ldrb	r3, [r3, #4]
 801092c:	2b03      	cmp	r3, #3
 801092e:	d003      	beq.n	8010938 <USB_EPClearStall+0x4c>
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	791b      	ldrb	r3, [r3, #4]
 8010934:	2b02      	cmp	r3, #2
 8010936:	d138      	bne.n	80109aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	015a      	lsls	r2, r3, #5
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	4413      	add	r3, r2
 8010940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	68ba      	ldr	r2, [r7, #8]
 8010948:	0151      	lsls	r1, r2, #5
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	440a      	add	r2, r1
 801094e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010956:	6013      	str	r3, [r2, #0]
 8010958:	e027      	b.n	80109aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	015a      	lsls	r2, r3, #5
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	4413      	add	r3, r2
 8010962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	68ba      	ldr	r2, [r7, #8]
 801096a:	0151      	lsls	r1, r2, #5
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	440a      	add	r2, r1
 8010970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010974:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010978:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	791b      	ldrb	r3, [r3, #4]
 801097e:	2b03      	cmp	r3, #3
 8010980:	d003      	beq.n	801098a <USB_EPClearStall+0x9e>
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	791b      	ldrb	r3, [r3, #4]
 8010986:	2b02      	cmp	r3, #2
 8010988:	d10f      	bne.n	80109aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	015a      	lsls	r2, r3, #5
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	4413      	add	r3, r2
 8010992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	68ba      	ldr	r2, [r7, #8]
 801099a:	0151      	lsls	r1, r2, #5
 801099c:	68fa      	ldr	r2, [r7, #12]
 801099e:	440a      	add	r2, r1
 80109a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80109a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80109a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80109aa:	2300      	movs	r3, #0
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3714      	adds	r7, #20
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	460b      	mov	r3, r1
 80109c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	68fa      	ldr	r2, [r7, #12]
 80109d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80109d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80109da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109e2:	681a      	ldr	r2, [r3, #0]
 80109e4:	78fb      	ldrb	r3, [r7, #3]
 80109e6:	011b      	lsls	r3, r3, #4
 80109e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80109ec:	68f9      	ldr	r1, [r7, #12]
 80109ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80109f2:	4313      	orrs	r3, r2
 80109f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80109f6:	2300      	movs	r3, #0
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3714      	adds	r7, #20
 80109fc:	46bd      	mov	sp, r7
 80109fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a02:	4770      	bx	lr

08010a04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010a04:	b480      	push	{r7}
 8010a06:	b085      	sub	sp, #20
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	68fa      	ldr	r2, [r7, #12]
 8010a1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010a1e:	f023 0303 	bic.w	r3, r3, #3
 8010a22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	68fa      	ldr	r2, [r7, #12]
 8010a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010a32:	f023 0302 	bic.w	r3, r3, #2
 8010a36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a38:	2300      	movs	r3, #0
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3714      	adds	r7, #20
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a44:	4770      	bx	lr

08010a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010a46:	b480      	push	{r7}
 8010a48:	b085      	sub	sp, #20
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010a60:	f023 0303 	bic.w	r3, r3, #3
 8010a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	68fa      	ldr	r2, [r7, #12]
 8010a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010a74:	f043 0302 	orr.w	r3, r3, #2
 8010a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a7a:	2300      	movs	r3, #0
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3714      	adds	r7, #20
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr

08010a88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b085      	sub	sp, #20
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	695b      	ldr	r3, [r3, #20]
 8010a94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	699b      	ldr	r3, [r3, #24]
 8010a9a:	68fa      	ldr	r2, [r7, #12]
 8010a9c:	4013      	ands	r3, r2
 8010a9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3714      	adds	r7, #20
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr

08010aae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010aae:	b480      	push	{r7}
 8010ab0:	b085      	sub	sp, #20
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ac0:	699b      	ldr	r3, [r3, #24]
 8010ac2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010aca:	69db      	ldr	r3, [r3, #28]
 8010acc:	68ba      	ldr	r2, [r7, #8]
 8010ace:	4013      	ands	r3, r2
 8010ad0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	0c1b      	lsrs	r3, r3, #16
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3714      	adds	r7, #20
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr

08010ae2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ae2:	b480      	push	{r7}
 8010ae4:	b085      	sub	sp, #20
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010af4:	699b      	ldr	r3, [r3, #24]
 8010af6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010afe:	69db      	ldr	r3, [r3, #28]
 8010b00:	68ba      	ldr	r2, [r7, #8]
 8010b02:	4013      	ands	r3, r2
 8010b04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	b29b      	uxth	r3, r3
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3714      	adds	r7, #20
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr

08010b16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010b16:	b480      	push	{r7}
 8010b18:	b085      	sub	sp, #20
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	460b      	mov	r3, r1
 8010b20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010b26:	78fb      	ldrb	r3, [r7, #3]
 8010b28:	015a      	lsls	r2, r3, #5
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	4413      	add	r3, r2
 8010b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b32:	689b      	ldr	r3, [r3, #8]
 8010b34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b3c:	695b      	ldr	r3, [r3, #20]
 8010b3e:	68ba      	ldr	r2, [r7, #8]
 8010b40:	4013      	ands	r3, r2
 8010b42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010b44:	68bb      	ldr	r3, [r7, #8]
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3714      	adds	r7, #20
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr

08010b52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010b52:	b480      	push	{r7}
 8010b54:	b087      	sub	sp, #28
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b68:	691b      	ldr	r3, [r3, #16]
 8010b6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010b76:	78fb      	ldrb	r3, [r7, #3]
 8010b78:	f003 030f 	and.w	r3, r3, #15
 8010b7c:	68fa      	ldr	r2, [r7, #12]
 8010b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8010b82:	01db      	lsls	r3, r3, #7
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	693a      	ldr	r2, [r7, #16]
 8010b88:	4313      	orrs	r3, r2
 8010b8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010b8c:	78fb      	ldrb	r3, [r7, #3]
 8010b8e:	015a      	lsls	r2, r3, #5
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	4413      	add	r3, r2
 8010b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	693a      	ldr	r2, [r7, #16]
 8010b9c:	4013      	ands	r3, r2
 8010b9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ba0:	68bb      	ldr	r3, [r7, #8]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	371c      	adds	r7, #28
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr

08010bae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010bae:	b480      	push	{r7}
 8010bb0:	b083      	sub	sp, #12
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	695b      	ldr	r3, [r3, #20]
 8010bba:	f003 0301 	and.w	r3, r3, #1
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	370c      	adds	r7, #12
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
	...

08010bcc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010be6:	4619      	mov	r1, r3
 8010be8:	4b09      	ldr	r3, [pc, #36]	@ (8010c10 <USB_ActivateSetup+0x44>)
 8010bea:	4013      	ands	r3, r2
 8010bec:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	68fa      	ldr	r2, [r7, #12]
 8010bf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010c00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c02:	2300      	movs	r3, #0
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3714      	adds	r7, #20
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr
 8010c10:	fffff800 	.word	0xfffff800

08010c14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b087      	sub	sp, #28
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	607a      	str	r2, [r7, #4]
 8010c20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	333c      	adds	r3, #60	@ 0x3c
 8010c2a:	3304      	adds	r3, #4
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	4a26      	ldr	r2, [pc, #152]	@ (8010ccc <USB_EP0_OutStart+0xb8>)
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d90a      	bls.n	8010c4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010c48:	d101      	bne.n	8010c4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	e037      	b.n	8010cbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c54:	461a      	mov	r2, r3
 8010c56:	2300      	movs	r3, #0
 8010c58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c60:	691b      	ldr	r3, [r3, #16]
 8010c62:	697a      	ldr	r2, [r7, #20]
 8010c64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010c6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c74:	691b      	ldr	r3, [r3, #16]
 8010c76:	697a      	ldr	r2, [r7, #20]
 8010c78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c7c:	f043 0318 	orr.w	r3, r3, #24
 8010c80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c88:	691b      	ldr	r3, [r3, #16]
 8010c8a:	697a      	ldr	r2, [r7, #20]
 8010c8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c90:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010c94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010c96:	7afb      	ldrb	r3, [r7, #11]
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	d10f      	bne.n	8010cbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	697a      	ldr	r2, [r7, #20]
 8010cb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010cb6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8010cba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010cbc:	2300      	movs	r3, #0
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	371c      	adds	r7, #28
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop
 8010ccc:	4f54300a 	.word	0x4f54300a

08010cd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b085      	sub	sp, #20
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ce8:	d901      	bls.n	8010cee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010cea:	2303      	movs	r3, #3
 8010cec:	e01b      	b.n	8010d26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	691b      	ldr	r3, [r3, #16]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	daf2      	bge.n	8010cdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	691b      	ldr	r3, [r3, #16]
 8010cfe:	f043 0201 	orr.w	r2, r3, #1
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	3301      	adds	r3, #1
 8010d0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010d12:	d901      	bls.n	8010d18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010d14:	2303      	movs	r3, #3
 8010d16:	e006      	b.n	8010d26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	691b      	ldr	r3, [r3, #16]
 8010d1c:	f003 0301 	and.w	r3, r3, #1
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d0f0      	beq.n	8010d06 <USB_CoreReset+0x36>

  return HAL_OK;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3714      	adds	r7, #20
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
	...

08010d34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010d38:	4904      	ldr	r1, [pc, #16]	@ (8010d4c <MX_FATFS_Init+0x18>)
 8010d3a:	4805      	ldr	r0, [pc, #20]	@ (8010d50 <MX_FATFS_Init+0x1c>)
 8010d3c:	f003 fcd4 	bl	80146e8 <FATFS_LinkDriver>
 8010d40:	4603      	mov	r3, r0
 8010d42:	461a      	mov	r2, r3
 8010d44:	4b03      	ldr	r3, [pc, #12]	@ (8010d54 <MX_FATFS_Init+0x20>)
 8010d46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010d48:	bf00      	nop
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	24000ae8 	.word	0x24000ae8
 8010d50:	08017e24 	.word	0x08017e24
 8010d54:	24000ae4 	.word	0x24000ae4

08010d58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010d62:	f000 f879 	bl	8010e58 <BSP_SD_IsDetected>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d001      	beq.n	8010d70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010d6c:	2302      	movs	r3, #2
 8010d6e:	e012      	b.n	8010d96 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010d70:	480b      	ldr	r0, [pc, #44]	@ (8010da0 <BSP_SD_Init+0x48>)
 8010d72:	f7f8 ff69 	bl	8009c48 <HAL_SD_Init>
 8010d76:	4603      	mov	r3, r0
 8010d78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010d7a:	79fb      	ldrb	r3, [r7, #7]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d109      	bne.n	8010d94 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010d80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010d84:	4806      	ldr	r0, [pc, #24]	@ (8010da0 <BSP_SD_Init+0x48>)
 8010d86:	f7f9 fe25 	bl	800a9d4 <HAL_SD_ConfigWideBusOperation>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d001      	beq.n	8010d94 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010d90:	2301      	movs	r3, #1
 8010d92:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010d94:	79fb      	ldrb	r3, [r7, #7]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3708      	adds	r7, #8
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	24000810 	.word	0x24000810

08010da4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b088      	sub	sp, #32
 8010da8:	af02      	add	r7, sp, #8
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	607a      	str	r2, [r7, #4]
 8010db0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010db2:	2300      	movs	r3, #0
 8010db4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	9300      	str	r3, [sp, #0]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	68ba      	ldr	r2, [r7, #8]
 8010dbe:	68f9      	ldr	r1, [r7, #12]
 8010dc0:	4806      	ldr	r0, [pc, #24]	@ (8010ddc <BSP_SD_ReadBlocks+0x38>)
 8010dc2:	f7f9 f861 	bl	8009e88 <HAL_SD_ReadBlocks>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d001      	beq.n	8010dd0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3718      	adds	r7, #24
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	24000810 	.word	0x24000810

08010de0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b088      	sub	sp, #32
 8010de4:	af02      	add	r7, sp, #8
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	607a      	str	r2, [r7, #4]
 8010dec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010dee:	2300      	movs	r3, #0
 8010df0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	68ba      	ldr	r2, [r7, #8]
 8010dfa:	68f9      	ldr	r1, [r7, #12]
 8010dfc:	4806      	ldr	r0, [pc, #24]	@ (8010e18 <BSP_SD_WriteBlocks+0x38>)
 8010dfe:	f7f9 f9cd 	bl	800a19c <HAL_SD_WriteBlocks>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d001      	beq.n	8010e0c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3718      	adds	r7, #24
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	24000810 	.word	0x24000810

08010e1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010e20:	4805      	ldr	r0, [pc, #20]	@ (8010e38 <BSP_SD_GetCardState+0x1c>)
 8010e22:	f7f9 fee9 	bl	800abf8 <HAL_SD_GetCardState>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b04      	cmp	r3, #4
 8010e2a:	bf14      	ite	ne
 8010e2c:	2301      	movne	r3, #1
 8010e2e:	2300      	moveq	r3, #0
 8010e30:	b2db      	uxtb	r3, r3
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	24000810 	.word	0x24000810

08010e3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010e44:	6879      	ldr	r1, [r7, #4]
 8010e46:	4803      	ldr	r0, [pc, #12]	@ (8010e54 <BSP_SD_GetCardInfo+0x18>)
 8010e48:	f7f9 fd98 	bl	800a97c <HAL_SD_GetCardInfo>
}
 8010e4c:	bf00      	nop
 8010e4e:	3708      	adds	r7, #8
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	24000810 	.word	0x24000810

08010e58 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010e5e:	2301      	movs	r3, #1
 8010e60:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010e62:	f000 f80b 	bl	8010e7c <BSP_PlatformIsDetected>
 8010e66:	4603      	mov	r3, r0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d101      	bne.n	8010e70 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010e70:	79fb      	ldrb	r3, [r7, #7]
 8010e72:	b2db      	uxtb	r3, r3
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010e82:	2301      	movs	r3, #1
 8010e84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010e86:	2102      	movs	r1, #2
 8010e88:	4806      	ldr	r0, [pc, #24]	@ (8010ea4 <BSP_PlatformIsDetected+0x28>)
 8010e8a:	f7f2 fdaf 	bl	80039ec <HAL_GPIO_ReadPin>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d001      	beq.n	8010e98 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8010e94:	2300      	movs	r3, #0
 8010e96:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010e98:	79fb      	ldrb	r3, [r7, #7]
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3708      	adds	r7, #8
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
 8010ea2:	bf00      	nop
 8010ea4:	58020000 	.word	0x58020000

08010ea8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	4603      	mov	r3, r0
 8010eb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8010ee0 <SD_CheckStatus+0x38>)
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010eb8:	f7ff ffb0 	bl	8010e1c <BSP_SD_GetCardState>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d107      	bne.n	8010ed2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010ec2:	4b07      	ldr	r3, [pc, #28]	@ (8010ee0 <SD_CheckStatus+0x38>)
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	f023 0301 	bic.w	r3, r3, #1
 8010ecc:	b2da      	uxtb	r2, r3
 8010ece:	4b04      	ldr	r3, [pc, #16]	@ (8010ee0 <SD_CheckStatus+0x38>)
 8010ed0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010ed2:	4b03      	ldr	r3, [pc, #12]	@ (8010ee0 <SD_CheckStatus+0x38>)
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	b2db      	uxtb	r3, r3
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	2400003d 	.word	0x2400003d

08010ee4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	4603      	mov	r3, r0
 8010eec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010eee:	4b0b      	ldr	r3, [pc, #44]	@ (8010f1c <SD_initialize+0x38>)
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010ef4:	f7ff ff30 	bl	8010d58 <BSP_SD_Init>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d107      	bne.n	8010f0e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010efe:	79fb      	ldrb	r3, [r7, #7]
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7ff ffd1 	bl	8010ea8 <SD_CheckStatus>
 8010f06:	4603      	mov	r3, r0
 8010f08:	461a      	mov	r2, r3
 8010f0a:	4b04      	ldr	r3, [pc, #16]	@ (8010f1c <SD_initialize+0x38>)
 8010f0c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010f0e:	4b03      	ldr	r3, [pc, #12]	@ (8010f1c <SD_initialize+0x38>)
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	b2db      	uxtb	r3, r3
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3708      	adds	r7, #8
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	2400003d 	.word	0x2400003d

08010f20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	4603      	mov	r3, r0
 8010f28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010f2a:	79fb      	ldrb	r3, [r7, #7]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7ff ffbb 	bl	8010ea8 <SD_CheckStatus>
 8010f32:	4603      	mov	r3, r0
}
 8010f34:	4618      	mov	r0, r3
 8010f36:	3708      	adds	r7, #8
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b086      	sub	sp, #24
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	60b9      	str	r1, [r7, #8]
 8010f44:	607a      	str	r2, [r7, #4]
 8010f46:	603b      	str	r3, [r7, #0]
 8010f48:	4603      	mov	r3, r0
 8010f4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010f50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010f54:	683a      	ldr	r2, [r7, #0]
 8010f56:	6879      	ldr	r1, [r7, #4]
 8010f58:	68b8      	ldr	r0, [r7, #8]
 8010f5a:	f7ff ff23 	bl	8010da4 <BSP_SD_ReadBlocks>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d107      	bne.n	8010f74 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010f64:	bf00      	nop
 8010f66:	f7ff ff59 	bl	8010e1c <BSP_SD_GetCardState>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d1fa      	bne.n	8010f66 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010f70:	2300      	movs	r3, #0
 8010f72:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3718      	adds	r7, #24
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}

08010f7e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b086      	sub	sp, #24
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
 8010f88:	603b      	str	r3, [r7, #0]
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010f96:	683a      	ldr	r2, [r7, #0]
 8010f98:	6879      	ldr	r1, [r7, #4]
 8010f9a:	68b8      	ldr	r0, [r7, #8]
 8010f9c:	f7ff ff20 	bl	8010de0 <BSP_SD_WriteBlocks>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d107      	bne.n	8010fb6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010fa6:	bf00      	nop
 8010fa8:	f7ff ff38 	bl	8010e1c <BSP_SD_GetCardState>
 8010fac:	4603      	mov	r3, r0
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d1fa      	bne.n	8010fa8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3718      	adds	r7, #24
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b08c      	sub	sp, #48	@ 0x30
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	603a      	str	r2, [r7, #0]
 8010fca:	71fb      	strb	r3, [r7, #7]
 8010fcc:	460b      	mov	r3, r1
 8010fce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010fd6:	4b25      	ldr	r3, [pc, #148]	@ (801106c <SD_ioctl+0xac>)
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	f003 0301 	and.w	r3, r3, #1
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <SD_ioctl+0x28>
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	e03c      	b.n	8011062 <SD_ioctl+0xa2>

  switch (cmd)
 8010fe8:	79bb      	ldrb	r3, [r7, #6]
 8010fea:	2b03      	cmp	r3, #3
 8010fec:	d834      	bhi.n	8011058 <SD_ioctl+0x98>
 8010fee:	a201      	add	r2, pc, #4	@ (adr r2, 8010ff4 <SD_ioctl+0x34>)
 8010ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ff4:	08011005 	.word	0x08011005
 8010ff8:	0801100d 	.word	0x0801100d
 8010ffc:	08011025 	.word	0x08011025
 8011000:	0801103f 	.word	0x0801103f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011004:	2300      	movs	r3, #0
 8011006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801100a:	e028      	b.n	801105e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801100c:	f107 0308 	add.w	r3, r7, #8
 8011010:	4618      	mov	r0, r3
 8011012:	f7ff ff13 	bl	8010e3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011016:	6a3a      	ldr	r2, [r7, #32]
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011022:	e01c      	b.n	801105e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011024:	f107 0308 	add.w	r3, r7, #8
 8011028:	4618      	mov	r0, r3
 801102a:	f7ff ff07 	bl	8010e3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011030:	b29a      	uxth	r2, r3
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011036:	2300      	movs	r3, #0
 8011038:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801103c:	e00f      	b.n	801105e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801103e:	f107 0308 	add.w	r3, r7, #8
 8011042:	4618      	mov	r0, r3
 8011044:	f7ff fefa 	bl	8010e3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801104a:	0a5a      	lsrs	r2, r3, #9
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011050:	2300      	movs	r3, #0
 8011052:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011056:	e002      	b.n	801105e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011058:	2304      	movs	r3, #4
 801105a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801105e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011062:	4618      	mov	r0, r3
 8011064:	3730      	adds	r7, #48	@ 0x30
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	2400003d 	.word	0x2400003d

08011070 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	460b      	mov	r3, r1
 801107a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801107c:	f44f 701d 	mov.w	r0, #628	@ 0x274
 8011080:	f004 f836 	bl	80150f0 <USBD_static_malloc>
 8011084:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d109      	bne.n	80110a0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	32b0      	adds	r2, #176	@ 0xb0
 8011096:	2100      	movs	r1, #0
 8011098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801109c:	2302      	movs	r3, #2
 801109e:	e06e      	b.n	801117e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	32b0      	adds	r2, #176	@ 0xb0
 80110aa:	68f9      	ldr	r1, [r7, #12]
 80110ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	32b0      	adds	r2, #176	@ 0xb0
 80110ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	7c1b      	ldrb	r3, [r3, #16]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d12b      	bne.n	8011124 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80110cc:	4b2e      	ldr	r3, [pc, #184]	@ (8011188 <USBD_MSC_Init+0x118>)
 80110ce:	7819      	ldrb	r1, [r3, #0]
 80110d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80110d4:	2202      	movs	r2, #2
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f003 fec7 	bl	8014e6a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80110dc:	4b2a      	ldr	r3, [pc, #168]	@ (8011188 <USBD_MSC_Init+0x118>)
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	f003 020f 	and.w	r2, r3, #15
 80110e4:	6879      	ldr	r1, [r7, #4]
 80110e6:	4613      	mov	r3, r2
 80110e8:	009b      	lsls	r3, r3, #2
 80110ea:	4413      	add	r3, r2
 80110ec:	009b      	lsls	r3, r3, #2
 80110ee:	440b      	add	r3, r1
 80110f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80110f4:	2201      	movs	r2, #1
 80110f6:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80110f8:	4b24      	ldr	r3, [pc, #144]	@ (801118c <USBD_MSC_Init+0x11c>)
 80110fa:	7819      	ldrb	r1, [r3, #0]
 80110fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011100:	2202      	movs	r2, #2
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f003 feb1 	bl	8014e6a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011108:	4b20      	ldr	r3, [pc, #128]	@ (801118c <USBD_MSC_Init+0x11c>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	f003 020f 	and.w	r2, r3, #15
 8011110:	6879      	ldr	r1, [r7, #4]
 8011112:	4613      	mov	r3, r2
 8011114:	009b      	lsls	r3, r3, #2
 8011116:	4413      	add	r3, r2
 8011118:	009b      	lsls	r3, r3, #2
 801111a:	440b      	add	r3, r1
 801111c:	3324      	adds	r3, #36	@ 0x24
 801111e:	2201      	movs	r2, #1
 8011120:	801a      	strh	r2, [r3, #0]
 8011122:	e028      	b.n	8011176 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011124:	4b18      	ldr	r3, [pc, #96]	@ (8011188 <USBD_MSC_Init+0x118>)
 8011126:	7819      	ldrb	r1, [r3, #0]
 8011128:	2340      	movs	r3, #64	@ 0x40
 801112a:	2202      	movs	r2, #2
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f003 fe9c 	bl	8014e6a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011132:	4b15      	ldr	r3, [pc, #84]	@ (8011188 <USBD_MSC_Init+0x118>)
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	f003 020f 	and.w	r2, r3, #15
 801113a:	6879      	ldr	r1, [r7, #4]
 801113c:	4613      	mov	r3, r2
 801113e:	009b      	lsls	r3, r3, #2
 8011140:	4413      	add	r3, r2
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	440b      	add	r3, r1
 8011146:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801114a:	2201      	movs	r2, #1
 801114c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801114e:	4b0f      	ldr	r3, [pc, #60]	@ (801118c <USBD_MSC_Init+0x11c>)
 8011150:	7819      	ldrb	r1, [r3, #0]
 8011152:	2340      	movs	r3, #64	@ 0x40
 8011154:	2202      	movs	r2, #2
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f003 fe87 	bl	8014e6a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 801115c:	4b0b      	ldr	r3, [pc, #44]	@ (801118c <USBD_MSC_Init+0x11c>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	f003 020f 	and.w	r2, r3, #15
 8011164:	6879      	ldr	r1, [r7, #4]
 8011166:	4613      	mov	r3, r2
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	4413      	add	r3, r2
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	440b      	add	r3, r1
 8011170:	3324      	adds	r3, #36	@ 0x24
 8011172:	2201      	movs	r2, #1
 8011174:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f000 fa2c 	bl	80115d4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801117c:	2300      	movs	r3, #0
}
 801117e:	4618      	mov	r0, r3
 8011180:	3710      	adds	r7, #16
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	240000a3 	.word	0x240000a3
 801118c:	240000a2 	.word	0x240000a2

08011190 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b082      	sub	sp, #8
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	460b      	mov	r3, r1
 801119a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 801119c:	4b26      	ldr	r3, [pc, #152]	@ (8011238 <USBD_MSC_DeInit+0xa8>)
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	4619      	mov	r1, r3
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f003 fe87 	bl	8014eb6 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80111a8:	4b23      	ldr	r3, [pc, #140]	@ (8011238 <USBD_MSC_DeInit+0xa8>)
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	f003 020f 	and.w	r2, r3, #15
 80111b0:	6879      	ldr	r1, [r7, #4]
 80111b2:	4613      	mov	r3, r2
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	4413      	add	r3, r2
 80111b8:	009b      	lsls	r3, r3, #2
 80111ba:	440b      	add	r3, r1
 80111bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80111c0:	2200      	movs	r2, #0
 80111c2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80111c4:	4b1d      	ldr	r3, [pc, #116]	@ (801123c <USBD_MSC_DeInit+0xac>)
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	4619      	mov	r1, r3
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f003 fe73 	bl	8014eb6 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80111d0:	4b1a      	ldr	r3, [pc, #104]	@ (801123c <USBD_MSC_DeInit+0xac>)
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	f003 020f 	and.w	r2, r3, #15
 80111d8:	6879      	ldr	r1, [r7, #4]
 80111da:	4613      	mov	r3, r2
 80111dc:	009b      	lsls	r3, r3, #2
 80111de:	4413      	add	r3, r2
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	440b      	add	r3, r1
 80111e4:	3324      	adds	r3, #36	@ 0x24
 80111e6:	2200      	movs	r2, #0
 80111e8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	32b0      	adds	r2, #176	@ 0xb0
 80111f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d018      	beq.n	801122e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 fa67 	bl	80116d0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	32b0      	adds	r2, #176	@ 0xb0
 801120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011210:	4618      	mov	r0, r3
 8011212:	f003 ff7b 	bl	801510c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	32b0      	adds	r2, #176	@ 0xb0
 8011220:	2100      	movs	r1, #0
 8011222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2200      	movs	r2, #0
 801122a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801122e:	2300      	movs	r3, #0
}
 8011230:	4618      	mov	r0, r3
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	240000a3 	.word	0x240000a3
 801123c:	240000a2 	.word	0x240000a2

08011240 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b086      	sub	sp, #24
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
 8011248:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	32b0      	adds	r2, #176	@ 0xb0
 8011254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011258:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801125a:	2300      	movs	r3, #0
 801125c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801125e:	2300      	movs	r3, #0
 8011260:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d101      	bne.n	801126c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8011268:	2303      	movs	r3, #3
 801126a:	e0e1      	b.n	8011430 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011274:	2b00      	cmp	r3, #0
 8011276:	d053      	beq.n	8011320 <USBD_MSC_Setup+0xe0>
 8011278:	2b20      	cmp	r3, #32
 801127a:	f040 80d1 	bne.w	8011420 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	785b      	ldrb	r3, [r3, #1]
 8011282:	2bfe      	cmp	r3, #254	@ 0xfe
 8011284:	d002      	beq.n	801128c <USBD_MSC_Setup+0x4c>
 8011286:	2bff      	cmp	r3, #255	@ 0xff
 8011288:	d02a      	beq.n	80112e0 <USBD_MSC_Setup+0xa0>
 801128a:	e041      	b.n	8011310 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	885b      	ldrh	r3, [r3, #2]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d11e      	bne.n	80112d2 <USBD_MSC_Setup+0x92>
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	88db      	ldrh	r3, [r3, #6]
 8011298:	2b01      	cmp	r3, #1
 801129a:	d11a      	bne.n	80112d2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	da15      	bge.n	80112d2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	33b0      	adds	r3, #176	@ 0xb0
 80112b0:	009b      	lsls	r3, r3, #2
 80112b2:	4413      	add	r3, r2
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	699b      	ldr	r3, [r3, #24]
 80112b8:	4798      	blx	r3
 80112ba:	4603      	mov	r3, r0
 80112bc:	461a      	mov	r2, r3
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	2201      	movs	r2, #1
 80112c6:	4619      	mov	r1, r3
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f003 f95d 	bl	8014588 <USBD_CtlSendData>
 80112ce:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80112d0:	e025      	b.n	801131e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80112d2:	6839      	ldr	r1, [r7, #0]
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f003 f8da 	bl	801448e <USBD_CtlError>
            ret = USBD_FAIL;
 80112da:	2303      	movs	r3, #3
 80112dc:	75fb      	strb	r3, [r7, #23]
          break;
 80112de:	e01e      	b.n	801131e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	885b      	ldrh	r3, [r3, #2]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d10c      	bne.n	8011302 <USBD_MSC_Setup+0xc2>
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	88db      	ldrh	r3, [r3, #6]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d108      	bne.n	8011302 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	db03      	blt.n	8011302 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f000 f9b4 	bl	8011668 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011300:	e00d      	b.n	801131e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011302:	6839      	ldr	r1, [r7, #0]
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f003 f8c2 	bl	801448e <USBD_CtlError>
            ret = USBD_FAIL;
 801130a:	2303      	movs	r3, #3
 801130c:	75fb      	strb	r3, [r7, #23]
          break;
 801130e:	e006      	b.n	801131e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8011310:	6839      	ldr	r1, [r7, #0]
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f003 f8bb 	bl	801448e <USBD_CtlError>
          ret = USBD_FAIL;
 8011318:	2303      	movs	r3, #3
 801131a:	75fb      	strb	r3, [r7, #23]
          break;
 801131c:	bf00      	nop
      }
      break;
 801131e:	e086      	b.n	801142e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	785b      	ldrb	r3, [r3, #1]
 8011324:	2b0b      	cmp	r3, #11
 8011326:	d872      	bhi.n	801140e <USBD_MSC_Setup+0x1ce>
 8011328:	a201      	add	r2, pc, #4	@ (adr r2, 8011330 <USBD_MSC_Setup+0xf0>)
 801132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801132e:	bf00      	nop
 8011330:	08011361 	.word	0x08011361
 8011334:	080113dd 	.word	0x080113dd
 8011338:	0801140f 	.word	0x0801140f
 801133c:	0801140f 	.word	0x0801140f
 8011340:	0801140f 	.word	0x0801140f
 8011344:	0801140f 	.word	0x0801140f
 8011348:	0801140f 	.word	0x0801140f
 801134c:	0801140f 	.word	0x0801140f
 8011350:	0801140f 	.word	0x0801140f
 8011354:	0801140f 	.word	0x0801140f
 8011358:	0801138b 	.word	0x0801138b
 801135c:	080113b5 	.word	0x080113b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011366:	b2db      	uxtb	r3, r3
 8011368:	2b03      	cmp	r3, #3
 801136a:	d107      	bne.n	801137c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801136c:	f107 030e 	add.w	r3, r7, #14
 8011370:	2202      	movs	r2, #2
 8011372:	4619      	mov	r1, r3
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f003 f907 	bl	8014588 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801137a:	e050      	b.n	801141e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801137c:	6839      	ldr	r1, [r7, #0]
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f003 f885 	bl	801448e <USBD_CtlError>
            ret = USBD_FAIL;
 8011384:	2303      	movs	r3, #3
 8011386:	75fb      	strb	r3, [r7, #23]
          break;
 8011388:	e049      	b.n	801141e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011390:	b2db      	uxtb	r3, r3
 8011392:	2b03      	cmp	r3, #3
 8011394:	d107      	bne.n	80113a6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	3304      	adds	r3, #4
 801139a:	2201      	movs	r2, #1
 801139c:	4619      	mov	r1, r3
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f003 f8f2 	bl	8014588 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80113a4:	e03b      	b.n	801141e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80113a6:	6839      	ldr	r1, [r7, #0]
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f003 f870 	bl	801448e <USBD_CtlError>
            ret = USBD_FAIL;
 80113ae:	2303      	movs	r3, #3
 80113b0:	75fb      	strb	r3, [r7, #23]
          break;
 80113b2:	e034      	b.n	801141e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	2b03      	cmp	r3, #3
 80113be:	d106      	bne.n	80113ce <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	885b      	ldrh	r3, [r3, #2]
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	461a      	mov	r2, r3
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80113cc:	e027      	b.n	801141e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80113ce:	6839      	ldr	r1, [r7, #0]
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f003 f85c 	bl	801448e <USBD_CtlError>
            ret = USBD_FAIL;
 80113d6:	2303      	movs	r3, #3
 80113d8:	75fb      	strb	r3, [r7, #23]
          break;
 80113da:	e020      	b.n	801141e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113e2:	b2db      	uxtb	r3, r3
 80113e4:	2b03      	cmp	r3, #3
 80113e6:	d119      	bne.n	801141c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	885b      	ldrh	r3, [r3, #2]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d115      	bne.n	801141c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	889b      	ldrh	r3, [r3, #4]
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	4619      	mov	r1, r3
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f003 fd7b 	bl	8014ef4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	889b      	ldrh	r3, [r3, #4]
 8011402:	b2db      	uxtb	r3, r3
 8011404:	4619      	mov	r1, r3
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 fb2e 	bl	8011a68 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801140c:	e006      	b.n	801141c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 801140e:	6839      	ldr	r1, [r7, #0]
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f003 f83c 	bl	801448e <USBD_CtlError>
          ret = USBD_FAIL;
 8011416:	2303      	movs	r3, #3
 8011418:	75fb      	strb	r3, [r7, #23]
          break;
 801141a:	e000      	b.n	801141e <USBD_MSC_Setup+0x1de>
          break;
 801141c:	bf00      	nop
      }
      break;
 801141e:	e006      	b.n	801142e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8011420:	6839      	ldr	r1, [r7, #0]
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f003 f833 	bl	801448e <USBD_CtlError>
      ret = USBD_FAIL;
 8011428:	2303      	movs	r3, #3
 801142a:	75fb      	strb	r3, [r7, #23]
      break;
 801142c:	bf00      	nop
  }

  return (uint8_t)ret;
 801142e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011430:	4618      	mov	r0, r3
 8011432:	3718      	adds	r7, #24
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	460b      	mov	r3, r1
 8011442:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8011444:	78fb      	ldrb	r3, [r7, #3]
 8011446:	4619      	mov	r1, r3
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f000 f959 	bl	8011700 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801144e:	2300      	movs	r3, #0
}
 8011450:	4618      	mov	r0, r3
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	460b      	mov	r3, r1
 8011462:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8011464:	78fb      	ldrb	r3, [r7, #3]
 8011466:	4619      	mov	r1, r3
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f000 f983 	bl	8011774 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801146e:	2300      	movs	r3, #0
}
 8011470:	4618      	mov	r0, r3
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011480:	2181      	movs	r1, #129	@ 0x81
 8011482:	4812      	ldr	r0, [pc, #72]	@ (80114cc <USBD_MSC_GetHSCfgDesc+0x54>)
 8011484:	f002 f9a4 	bl	80137d0 <USBD_GetEpDesc>
 8011488:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801148a:	2101      	movs	r1, #1
 801148c:	480f      	ldr	r0, [pc, #60]	@ (80114cc <USBD_MSC_GetHSCfgDesc+0x54>)
 801148e:	f002 f99f 	bl	80137d0 <USBD_GetEpDesc>
 8011492:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d006      	beq.n	80114a8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	2200      	movs	r2, #0
 801149e:	711a      	strb	r2, [r3, #4]
 80114a0:	2200      	movs	r2, #0
 80114a2:	f042 0202 	orr.w	r2, r2, #2
 80114a6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d006      	beq.n	80114bc <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	2200      	movs	r2, #0
 80114b2:	711a      	strb	r2, [r3, #4]
 80114b4:	2200      	movs	r2, #0
 80114b6:	f042 0202 	orr.w	r2, r2, #2
 80114ba:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2220      	movs	r2, #32
 80114c0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80114c2:	4b02      	ldr	r3, [pc, #8]	@ (80114cc <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3710      	adds	r7, #16
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}
 80114cc:	24000078 	.word	0x24000078

080114d0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b084      	sub	sp, #16
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80114d8:	2181      	movs	r1, #129	@ 0x81
 80114da:	4812      	ldr	r0, [pc, #72]	@ (8011524 <USBD_MSC_GetFSCfgDesc+0x54>)
 80114dc:	f002 f978 	bl	80137d0 <USBD_GetEpDesc>
 80114e0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80114e2:	2101      	movs	r1, #1
 80114e4:	480f      	ldr	r0, [pc, #60]	@ (8011524 <USBD_MSC_GetFSCfgDesc+0x54>)
 80114e6:	f002 f973 	bl	80137d0 <USBD_GetEpDesc>
 80114ea:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d006      	beq.n	8011500 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2200      	movs	r2, #0
 80114f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80114fa:	711a      	strb	r2, [r3, #4]
 80114fc:	2200      	movs	r2, #0
 80114fe:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d006      	beq.n	8011514 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	2200      	movs	r2, #0
 801150a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801150e:	711a      	strb	r2, [r3, #4]
 8011510:	2200      	movs	r2, #0
 8011512:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2220      	movs	r2, #32
 8011518:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801151a:	4b02      	ldr	r3, [pc, #8]	@ (8011524 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 801151c:	4618      	mov	r0, r3
 801151e:	3710      	adds	r7, #16
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	24000078 	.word	0x24000078

08011528 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011530:	2181      	movs	r1, #129	@ 0x81
 8011532:	4812      	ldr	r0, [pc, #72]	@ (801157c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8011534:	f002 f94c 	bl	80137d0 <USBD_GetEpDesc>
 8011538:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801153a:	2101      	movs	r1, #1
 801153c:	480f      	ldr	r0, [pc, #60]	@ (801157c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801153e:	f002 f947 	bl	80137d0 <USBD_GetEpDesc>
 8011542:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d006      	beq.n	8011558 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2200      	movs	r2, #0
 801154e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011552:	711a      	strb	r2, [r3, #4]
 8011554:	2200      	movs	r2, #0
 8011556:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d006      	beq.n	801156c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	2200      	movs	r2, #0
 8011562:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011566:	711a      	strb	r2, [r3, #4]
 8011568:	2200      	movs	r2, #0
 801156a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2220      	movs	r2, #32
 8011570:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8011572:	4b02      	ldr	r3, [pc, #8]	@ (801157c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8011574:	4618      	mov	r0, r3
 8011576:	3710      	adds	r7, #16
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	24000078 	.word	0x24000078

08011580 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	220a      	movs	r2, #10
 801158c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801158e:	4b03      	ldr	r3, [pc, #12]	@ (801159c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011590:	4618      	mov	r0, r3
 8011592:	370c      	adds	r7, #12
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr
 801159c:	24000098 	.word	0x24000098

080115a0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d101      	bne.n	80115b4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80115b0:	2303      	movs	r3, #3
 80115b2:	e009      	b.n	80115c8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	33b0      	adds	r3, #176	@ 0xb0
 80115be:	009b      	lsls	r3, r3, #2
 80115c0:	4413      	add	r3, r2
 80115c2:	683a      	ldr	r2, [r7, #0]
 80115c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80115c6:	2300      	movs	r3, #0
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	370c      	adds	r7, #12
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr

080115d4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	32b0      	adds	r2, #176	@ 0xb0
 80115e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115ea:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d032      	beq.n	8011658 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2200      	movs	r2, #0
 80115f6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2200      	movs	r2, #0
 80115fc:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2200      	movs	r2, #0
 8011602:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	2200      	movs	r2, #0
 801160a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2200      	movs	r2, #0
 8011612:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801161c:	687a      	ldr	r2, [r7, #4]
 801161e:	33b0      	adds	r3, #176	@ 0xb0
 8011620:	009b      	lsls	r3, r3, #2
 8011622:	4413      	add	r3, r2
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2000      	movs	r0, #0
 801162a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 801162c:	4b0c      	ldr	r3, [pc, #48]	@ (8011660 <MSC_BOT_Init+0x8c>)
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	4619      	mov	r1, r3
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f003 fc5e 	bl	8014ef4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8011638:	4b0a      	ldr	r3, [pc, #40]	@ (8011664 <MSC_BOT_Init+0x90>)
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	4619      	mov	r1, r3
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f003 fc58 	bl	8014ef4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8011644:	4b06      	ldr	r3, [pc, #24]	@ (8011660 <MSC_BOT_Init+0x8c>)
 8011646:	7819      	ldrb	r1, [r3, #0]
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 801164e:	231f      	movs	r3, #31
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f003 fd18 	bl	8015086 <USBD_LL_PrepareReceive>
 8011656:	e000      	b.n	801165a <MSC_BOT_Init+0x86>
    return;
 8011658:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801165a:	3710      	adds	r7, #16
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}
 8011660:	240000a3 	.word	0x240000a3
 8011664:	240000a2 	.word	0x240000a2

08011668 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	32b0      	adds	r2, #176	@ 0xb0
 801167a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801167e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d01b      	beq.n	80116be <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2200      	movs	r2, #0
 801168a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2201      	movs	r2, #1
 8011690:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8011692:	4b0d      	ldr	r3, [pc, #52]	@ (80116c8 <MSC_BOT_Reset+0x60>)
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	4619      	mov	r1, r3
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f003 fc69 	bl	8014f70 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801169e:	4b0b      	ldr	r3, [pc, #44]	@ (80116cc <MSC_BOT_Reset+0x64>)
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	4619      	mov	r1, r3
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f003 fc63 	bl	8014f70 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80116aa:	4b08      	ldr	r3, [pc, #32]	@ (80116cc <MSC_BOT_Reset+0x64>)
 80116ac:	7819      	ldrb	r1, [r3, #0]
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80116b4:	231f      	movs	r3, #31
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f003 fce5 	bl	8015086 <USBD_LL_PrepareReceive>
 80116bc:	e000      	b.n	80116c0 <MSC_BOT_Reset+0x58>
    return;
 80116be:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80116c0:	3710      	adds	r7, #16
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
 80116c6:	bf00      	nop
 80116c8:	240000a2 	.word	0x240000a2
 80116cc:	240000a3 	.word	0x240000a3

080116d0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b085      	sub	sp, #20
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	32b0      	adds	r2, #176	@ 0xb0
 80116e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116e6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d002      	beq.n	80116f4 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2200      	movs	r2, #0
 80116f2:	721a      	strb	r2, [r3, #8]
  }
}
 80116f4:	bf00      	nop
 80116f6:	3714      	adds	r7, #20
 80116f8:	46bd      	mov	sp, r7
 80116fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fe:	4770      	bx	lr

08011700 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b084      	sub	sp, #16
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	460b      	mov	r3, r1
 801170a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	32b0      	adds	r2, #176	@ 0xb0
 8011716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801171a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d020      	beq.n	8011764 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	7a1b      	ldrb	r3, [r3, #8]
 8011726:	2b02      	cmp	r3, #2
 8011728:	d005      	beq.n	8011736 <MSC_BOT_DataIn+0x36>
 801172a:	2b02      	cmp	r3, #2
 801172c:	db1c      	blt.n	8011768 <MSC_BOT_DataIn+0x68>
 801172e:	3b03      	subs	r3, #3
 8011730:	2b01      	cmp	r3, #1
 8011732:	d819      	bhi.n	8011768 <MSC_BOT_DataIn+0x68>
 8011734:	e011      	b.n	801175a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8011742:	461a      	mov	r2, r3
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f000 f9c9 	bl	8011adc <SCSI_ProcessCmd>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	da0d      	bge.n	801176c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011750:	2101      	movs	r1, #1
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f000 f90c 	bl	8011970 <MSC_BOT_SendCSW>
      }
      break;
 8011758:	e008      	b.n	801176c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801175a:	2100      	movs	r1, #0
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 f907 	bl	8011970 <MSC_BOT_SendCSW>
      break;
 8011762:	e004      	b.n	801176e <MSC_BOT_DataIn+0x6e>
    return;
 8011764:	bf00      	nop
 8011766:	e002      	b.n	801176e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8011768:	bf00      	nop
 801176a:	e000      	b.n	801176e <MSC_BOT_DataIn+0x6e>
      break;
 801176c:	bf00      	nop
  }
}
 801176e:	3710      	adds	r7, #16
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}

08011774 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b084      	sub	sp, #16
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	460b      	mov	r3, r1
 801177e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	32b0      	adds	r2, #176	@ 0xb0
 801178a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801178e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d01c      	beq.n	80117d0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	7a1b      	ldrb	r3, [r3, #8]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d002      	beq.n	80117a4 <MSC_BOT_DataOut+0x30>
 801179e:	2b01      	cmp	r3, #1
 80117a0:	d004      	beq.n	80117ac <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80117a2:	e018      	b.n	80117d6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f000 f819 	bl	80117dc <MSC_BOT_CBW_Decode>
      break;
 80117aa:	e014      	b.n	80117d6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80117b8:	461a      	mov	r2, r3
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f000 f98e 	bl	8011adc <SCSI_ProcessCmd>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	da06      	bge.n	80117d4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80117c6:	2101      	movs	r1, #1
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f000 f8d1 	bl	8011970 <MSC_BOT_SendCSW>
      break;
 80117ce:	e001      	b.n	80117d4 <MSC_BOT_DataOut+0x60>
    return;
 80117d0:	bf00      	nop
 80117d2:	e000      	b.n	80117d6 <MSC_BOT_DataOut+0x62>
      break;
 80117d4:	bf00      	nop
  }
}
 80117d6:	3710      	adds	r7, #16
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}

080117dc <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	32b0      	adds	r2, #176	@ 0xb0
 80117ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117f2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d079      	beq.n	80118ee <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8011812:	4b3a      	ldr	r3, [pc, #232]	@ (80118fc <MSC_BOT_CBW_Decode+0x120>)
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	4619      	mov	r1, r3
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f003 fc55 	bl	80150c8 <USBD_LL_GetRxDataSize>
 801181e:	4603      	mov	r3, r0
 8011820:	2b1f      	cmp	r3, #31
 8011822:	d114      	bne.n	801184e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801182a:	4a35      	ldr	r2, [pc, #212]	@ (8011900 <MSC_BOT_CBW_Decode+0x124>)
 801182c:	4293      	cmp	r3, r2
 801182e:	d10e      	bne.n	801184e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011836:	2b01      	cmp	r3, #1
 8011838:	d809      	bhi.n	801184e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8011840:	2b00      	cmp	r3, #0
 8011842:	d004      	beq.n	801184e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801184a:	2b10      	cmp	r3, #16
 801184c:	d90e      	bls.n	801186c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8011854:	2320      	movs	r3, #32
 8011856:	2205      	movs	r2, #5
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f000 fe54 	bl	8012506 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2202      	movs	r2, #2
 8011862:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 f8bd 	bl	80119e4 <MSC_BOT_Abort>
 801186a:	e043      	b.n	80118f4 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8011878:	461a      	mov	r2, r3
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f000 f92e 	bl	8011adc <SCSI_ProcessCmd>
 8011880:	4603      	mov	r3, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	da0c      	bge.n	80118a0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	7a1b      	ldrb	r3, [r3, #8]
 801188a:	2b05      	cmp	r3, #5
 801188c:	d104      	bne.n	8011898 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801188e:	2101      	movs	r1, #1
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f000 f86d 	bl	8011970 <MSC_BOT_SendCSW>
 8011896:	e02d      	b.n	80118f4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f000 f8a3 	bl	80119e4 <MSC_BOT_Abort>
 801189e:	e029      	b.n	80118f4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	7a1b      	ldrb	r3, [r3, #8]
 80118a4:	2b02      	cmp	r3, #2
 80118a6:	d024      	beq.n	80118f2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d020      	beq.n	80118f2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80118b4:	2b03      	cmp	r3, #3
 80118b6:	d01c      	beq.n	80118f2 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	68db      	ldr	r3, [r3, #12]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d009      	beq.n	80118d4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	f103 0110 	add.w	r1, r3, #16
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	461a      	mov	r2, r3
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f000 f819 	bl	8011904 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80118d2:	e00f      	b.n	80118f4 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	68db      	ldr	r3, [r3, #12]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d104      	bne.n	80118e6 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80118dc:	2100      	movs	r1, #0
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f000 f846 	bl	8011970 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80118e4:	e006      	b.n	80118f4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f000 f87c 	bl	80119e4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80118ec:	e002      	b.n	80118f4 <MSC_BOT_CBW_Decode+0x118>
    return;
 80118ee:	bf00      	nop
 80118f0:	e000      	b.n	80118f4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80118f2:	bf00      	nop
    }
  }
}
 80118f4:	3710      	adds	r7, #16
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	240000a3 	.word	0x240000a3
 8011900:	43425355 	.word	0x43425355

08011904 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b086      	sub	sp, #24
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	60b9      	str	r1, [r7, #8]
 801190e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	32b0      	adds	r2, #176	@ 0xb0
 801191a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801191e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d01e      	beq.n	8011964 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	4293      	cmp	r3, r2
 8011930:	bf28      	it	cs
 8011932:	4613      	movcs	r3, r2
 8011934:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	1ad2      	subs	r2, r2, r3
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	2200      	movs	r2, #0
 801194a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	2204      	movs	r2, #4
 8011952:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8011954:	4b05      	ldr	r3, [pc, #20]	@ (801196c <MSC_BOT_SendData+0x68>)
 8011956:	7819      	ldrb	r1, [r3, #0]
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	68ba      	ldr	r2, [r7, #8]
 801195c:	68f8      	ldr	r0, [r7, #12]
 801195e:	f003 fb71 	bl	8015044 <USBD_LL_Transmit>
 8011962:	e000      	b.n	8011966 <MSC_BOT_SendData+0x62>
    return;
 8011964:	bf00      	nop
}
 8011966:	3718      	adds	r7, #24
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	240000a2 	.word	0x240000a2

08011970 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	460b      	mov	r3, r1
 801197a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	32b0      	adds	r2, #176	@ 0xb0
 8011986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801198a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d01d      	beq.n	80119ce <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	4a10      	ldr	r2, [pc, #64]	@ (80119d8 <MSC_BOT_SendCSW+0x68>)
 8011996:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	78fa      	ldrb	r2, [r7, #3]
 801199e:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2200      	movs	r2, #0
 80119a6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80119a8:	4b0c      	ldr	r3, [pc, #48]	@ (80119dc <MSC_BOT_SendCSW+0x6c>)
 80119aa:	7819      	ldrb	r1, [r3, #0]
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 80119b2:	230d      	movs	r3, #13
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f003 fb45 	bl	8015044 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80119ba:	4b09      	ldr	r3, [pc, #36]	@ (80119e0 <MSC_BOT_SendCSW+0x70>)
 80119bc:	7819      	ldrb	r1, [r3, #0]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80119c4:	231f      	movs	r3, #31
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f003 fb5d 	bl	8015086 <USBD_LL_PrepareReceive>
 80119cc:	e000      	b.n	80119d0 <MSC_BOT_SendCSW+0x60>
    return;
 80119ce:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80119d0:	3710      	adds	r7, #16
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	53425355 	.word	0x53425355
 80119dc:	240000a2 	.word	0x240000a2
 80119e0:	240000a3 	.word	0x240000a3

080119e4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	32b0      	adds	r2, #176	@ 0xb0
 80119f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119fa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d02a      	beq.n	8011a58 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d10e      	bne.n	8011a2a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d009      	beq.n	8011a2a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d105      	bne.n	8011a2a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011a1e:	4b10      	ldr	r3, [pc, #64]	@ (8011a60 <MSC_BOT_Abort+0x7c>)
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	4619      	mov	r1, r3
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f003 fa84 	bl	8014f32 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8011a64 <MSC_BOT_Abort+0x80>)
 8011a2c:	781b      	ldrb	r3, [r3, #0]
 8011a2e:	4619      	mov	r1, r3
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f003 fa7e 	bl	8014f32 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	7a5b      	ldrb	r3, [r3, #9]
 8011a3a:	2b02      	cmp	r3, #2
 8011a3c:	d10d      	bne.n	8011a5a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011a3e:	4b09      	ldr	r3, [pc, #36]	@ (8011a64 <MSC_BOT_Abort+0x80>)
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	4619      	mov	r1, r3
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f003 fa74 	bl	8014f32 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011a4a:	4b05      	ldr	r3, [pc, #20]	@ (8011a60 <MSC_BOT_Abort+0x7c>)
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	4619      	mov	r1, r3
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f003 fa6e 	bl	8014f32 <USBD_LL_StallEP>
 8011a56:	e000      	b.n	8011a5a <MSC_BOT_Abort+0x76>
    return;
 8011a58:	bf00      	nop
  }
}
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	240000a3 	.word	0x240000a3
 8011a64:	240000a2 	.word	0x240000a2

08011a68 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	460b      	mov	r3, r1
 8011a72:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	32b0      	adds	r2, #176	@ 0xb0
 8011a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a82:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d01d      	beq.n	8011ac6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	7a5b      	ldrb	r3, [r3, #9]
 8011a8e:	2b02      	cmp	r3, #2
 8011a90:	d10c      	bne.n	8011aac <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011a92:	4b10      	ldr	r3, [pc, #64]	@ (8011ad4 <MSC_BOT_CplClrFeature+0x6c>)
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	4619      	mov	r1, r3
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f003 fa4a 	bl	8014f32 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8011ad8 <MSC_BOT_CplClrFeature+0x70>)
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f003 fa44 	bl	8014f32 <USBD_LL_StallEP>
 8011aaa:	e00f      	b.n	8011acc <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8011aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	da0a      	bge.n	8011aca <MSC_BOT_CplClrFeature+0x62>
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	7a5b      	ldrb	r3, [r3, #9]
 8011ab8:	2b01      	cmp	r3, #1
 8011aba:	d006      	beq.n	8011aca <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011abc:	2101      	movs	r1, #1
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f7ff ff56 	bl	8011970 <MSC_BOT_SendCSW>
 8011ac4:	e002      	b.n	8011acc <MSC_BOT_CplClrFeature+0x64>
    return;
 8011ac6:	bf00      	nop
 8011ac8:	e000      	b.n	8011acc <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8011aca:	bf00      	nop
  }
}
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	240000a2 	.word	0x240000a2
 8011ad8:	240000a3 	.word	0x240000a3

08011adc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b086      	sub	sp, #24
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	607a      	str	r2, [r7, #4]
 8011ae8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	32b0      	adds	r2, #176	@ 0xb0
 8011af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011af8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d102      	bne.n	8011b06 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8011b00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b04:	e168      	b.n	8011dd8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	2baa      	cmp	r3, #170	@ 0xaa
 8011b0c:	f000 8144 	beq.w	8011d98 <SCSI_ProcessCmd+0x2bc>
 8011b10:	2baa      	cmp	r3, #170	@ 0xaa
 8011b12:	f300 8153 	bgt.w	8011dbc <SCSI_ProcessCmd+0x2e0>
 8011b16:	2ba8      	cmp	r3, #168	@ 0xa8
 8011b18:	f000 812c 	beq.w	8011d74 <SCSI_ProcessCmd+0x298>
 8011b1c:	2ba8      	cmp	r3, #168	@ 0xa8
 8011b1e:	f300 814d 	bgt.w	8011dbc <SCSI_ProcessCmd+0x2e0>
 8011b22:	2b5a      	cmp	r3, #90	@ 0x5a
 8011b24:	f300 80c0 	bgt.w	8011ca8 <SCSI_ProcessCmd+0x1cc>
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	f2c0 8147 	blt.w	8011dbc <SCSI_ProcessCmd+0x2e0>
 8011b2e:	2b5a      	cmp	r3, #90	@ 0x5a
 8011b30:	f200 8144 	bhi.w	8011dbc <SCSI_ProcessCmd+0x2e0>
 8011b34:	a201      	add	r2, pc, #4	@ (adr r2, 8011b3c <SCSI_ProcessCmd+0x60>)
 8011b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b3a:	bf00      	nop
 8011b3c:	08011caf 	.word	0x08011caf
 8011b40:	08011dbd 	.word	0x08011dbd
 8011b44:	08011dbd 	.word	0x08011dbd
 8011b48:	08011cc1 	.word	0x08011cc1
 8011b4c:	08011dbd 	.word	0x08011dbd
 8011b50:	08011dbd 	.word	0x08011dbd
 8011b54:	08011dbd 	.word	0x08011dbd
 8011b58:	08011dbd 	.word	0x08011dbd
 8011b5c:	08011dbd 	.word	0x08011dbd
 8011b60:	08011dbd 	.word	0x08011dbd
 8011b64:	08011dbd 	.word	0x08011dbd
 8011b68:	08011dbd 	.word	0x08011dbd
 8011b6c:	08011dbd 	.word	0x08011dbd
 8011b70:	08011dbd 	.word	0x08011dbd
 8011b74:	08011dbd 	.word	0x08011dbd
 8011b78:	08011dbd 	.word	0x08011dbd
 8011b7c:	08011dbd 	.word	0x08011dbd
 8011b80:	08011dbd 	.word	0x08011dbd
 8011b84:	08011cd3 	.word	0x08011cd3
 8011b88:	08011dbd 	.word	0x08011dbd
 8011b8c:	08011dbd 	.word	0x08011dbd
 8011b90:	08011dbd 	.word	0x08011dbd
 8011b94:	08011dbd 	.word	0x08011dbd
 8011b98:	08011dbd 	.word	0x08011dbd
 8011b9c:	08011dbd 	.word	0x08011dbd
 8011ba0:	08011dbd 	.word	0x08011dbd
 8011ba4:	08011d09 	.word	0x08011d09
 8011ba8:	08011ce5 	.word	0x08011ce5
 8011bac:	08011dbd 	.word	0x08011dbd
 8011bb0:	08011dbd 	.word	0x08011dbd
 8011bb4:	08011cf7 	.word	0x08011cf7
 8011bb8:	08011dbd 	.word	0x08011dbd
 8011bbc:	08011dbd 	.word	0x08011dbd
 8011bc0:	08011dbd 	.word	0x08011dbd
 8011bc4:	08011dbd 	.word	0x08011dbd
 8011bc8:	08011d2d 	.word	0x08011d2d
 8011bcc:	08011dbd 	.word	0x08011dbd
 8011bd0:	08011d3f 	.word	0x08011d3f
 8011bd4:	08011dbd 	.word	0x08011dbd
 8011bd8:	08011dbd 	.word	0x08011dbd
 8011bdc:	08011d63 	.word	0x08011d63
 8011be0:	08011dbd 	.word	0x08011dbd
 8011be4:	08011d87 	.word	0x08011d87
 8011be8:	08011dbd 	.word	0x08011dbd
 8011bec:	08011dbd 	.word	0x08011dbd
 8011bf0:	08011dbd 	.word	0x08011dbd
 8011bf4:	08011dbd 	.word	0x08011dbd
 8011bf8:	08011dab 	.word	0x08011dab
 8011bfc:	08011dbd 	.word	0x08011dbd
 8011c00:	08011dbd 	.word	0x08011dbd
 8011c04:	08011dbd 	.word	0x08011dbd
 8011c08:	08011dbd 	.word	0x08011dbd
 8011c0c:	08011dbd 	.word	0x08011dbd
 8011c10:	08011dbd 	.word	0x08011dbd
 8011c14:	08011dbd 	.word	0x08011dbd
 8011c18:	08011dbd 	.word	0x08011dbd
 8011c1c:	08011dbd 	.word	0x08011dbd
 8011c20:	08011dbd 	.word	0x08011dbd
 8011c24:	08011dbd 	.word	0x08011dbd
 8011c28:	08011dbd 	.word	0x08011dbd
 8011c2c:	08011dbd 	.word	0x08011dbd
 8011c30:	08011dbd 	.word	0x08011dbd
 8011c34:	08011dbd 	.word	0x08011dbd
 8011c38:	08011dbd 	.word	0x08011dbd
 8011c3c:	08011dbd 	.word	0x08011dbd
 8011c40:	08011dbd 	.word	0x08011dbd
 8011c44:	08011dbd 	.word	0x08011dbd
 8011c48:	08011dbd 	.word	0x08011dbd
 8011c4c:	08011dbd 	.word	0x08011dbd
 8011c50:	08011dbd 	.word	0x08011dbd
 8011c54:	08011dbd 	.word	0x08011dbd
 8011c58:	08011dbd 	.word	0x08011dbd
 8011c5c:	08011dbd 	.word	0x08011dbd
 8011c60:	08011dbd 	.word	0x08011dbd
 8011c64:	08011dbd 	.word	0x08011dbd
 8011c68:	08011dbd 	.word	0x08011dbd
 8011c6c:	08011dbd 	.word	0x08011dbd
 8011c70:	08011dbd 	.word	0x08011dbd
 8011c74:	08011dbd 	.word	0x08011dbd
 8011c78:	08011dbd 	.word	0x08011dbd
 8011c7c:	08011dbd 	.word	0x08011dbd
 8011c80:	08011dbd 	.word	0x08011dbd
 8011c84:	08011dbd 	.word	0x08011dbd
 8011c88:	08011dbd 	.word	0x08011dbd
 8011c8c:	08011dbd 	.word	0x08011dbd
 8011c90:	08011dbd 	.word	0x08011dbd
 8011c94:	08011dbd 	.word	0x08011dbd
 8011c98:	08011dbd 	.word	0x08011dbd
 8011c9c:	08011dbd 	.word	0x08011dbd
 8011ca0:	08011dbd 	.word	0x08011dbd
 8011ca4:	08011d1b 	.word	0x08011d1b
 8011ca8:	2b9e      	cmp	r3, #158	@ 0x9e
 8011caa:	d051      	beq.n	8011d50 <SCSI_ProcessCmd+0x274>
 8011cac:	e086      	b.n	8011dbc <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8011cae:	7afb      	ldrb	r3, [r7, #11]
 8011cb0:	687a      	ldr	r2, [r7, #4]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	f000 f893 	bl	8011de0 <SCSI_TestUnitReady>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8011cbe:	e089      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8011cc0:	7afb      	ldrb	r3, [r7, #11]
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	68f8      	ldr	r0, [r7, #12]
 8011cc8:	f000 fb9a 	bl	8012400 <SCSI_RequestSense>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	75fb      	strb	r3, [r7, #23]
      break;
 8011cd0:	e080      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8011cd2:	7afb      	ldrb	r3, [r7, #11]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f000 f8db 	bl	8011e94 <SCSI_Inquiry>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8011ce2:	e077      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8011ce4:	7afb      	ldrb	r3, [r7, #11]
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	4619      	mov	r1, r3
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f000 fc56 	bl	801259c <SCSI_StartStopUnit>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8011cf4:	e06e      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8011cf6:	7afb      	ldrb	r3, [r7, #11]
 8011cf8:	687a      	ldr	r2, [r7, #4]
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	68f8      	ldr	r0, [r7, #12]
 8011cfe:	f000 fca2 	bl	8012646 <SCSI_AllowPreventRemovable>
 8011d02:	4603      	mov	r3, r0
 8011d04:	75fb      	strb	r3, [r7, #23]
      break;
 8011d06:	e065      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8011d08:	7afb      	ldrb	r3, [r7, #11]
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	68f8      	ldr	r0, [r7, #12]
 8011d10:	f000 faea 	bl	80122e8 <SCSI_ModeSense6>
 8011d14:	4603      	mov	r3, r0
 8011d16:	75fb      	strb	r3, [r7, #23]
      break;
 8011d18:	e05c      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8011d1a:	7afb      	ldrb	r3, [r7, #11]
 8011d1c:	687a      	ldr	r2, [r7, #4]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f000 fb27 	bl	8012374 <SCSI_ModeSense10>
 8011d26:	4603      	mov	r3, r0
 8011d28:	75fb      	strb	r3, [r7, #23]
      break;
 8011d2a:	e053      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8011d2c:	7afb      	ldrb	r3, [r7, #11]
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	4619      	mov	r1, r3
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f000 fa5c 	bl	80121f0 <SCSI_ReadFormatCapacity>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8011d3c:	e04a      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8011d3e:	7afb      	ldrb	r3, [r7, #11]
 8011d40:	687a      	ldr	r2, [r7, #4]
 8011d42:	4619      	mov	r1, r3
 8011d44:	68f8      	ldr	r0, [r7, #12]
 8011d46:	f000 f921 	bl	8011f8c <SCSI_ReadCapacity10>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8011d4e:	e041      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8011d50:	7afb      	ldrb	r3, [r7, #11]
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	4619      	mov	r1, r3
 8011d56:	68f8      	ldr	r0, [r7, #12]
 8011d58:	f000 f996 	bl	8012088 <SCSI_ReadCapacity16>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8011d60:	e038      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8011d62:	7afb      	ldrb	r3, [r7, #11]
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	4619      	mov	r1, r3
 8011d68:	68f8      	ldr	r0, [r7, #12]
 8011d6a:	f000 fc99 	bl	80126a0 <SCSI_Read10>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	75fb      	strb	r3, [r7, #23]
      break;
 8011d72:	e02f      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8011d74:	7afb      	ldrb	r3, [r7, #11]
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	4619      	mov	r1, r3
 8011d7a:	68f8      	ldr	r0, [r7, #12]
 8011d7c:	f000 fd3a 	bl	80127f4 <SCSI_Read12>
 8011d80:	4603      	mov	r3, r0
 8011d82:	75fb      	strb	r3, [r7, #23]
      break;
 8011d84:	e026      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8011d86:	7afb      	ldrb	r3, [r7, #11]
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f000 fde5 	bl	801295c <SCSI_Write10>
 8011d92:	4603      	mov	r3, r0
 8011d94:	75fb      	strb	r3, [r7, #23]
      break;
 8011d96:	e01d      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8011d98:	7afb      	ldrb	r3, [r7, #11]
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	68f8      	ldr	r0, [r7, #12]
 8011da0:	f000 feb2 	bl	8012b08 <SCSI_Write12>
 8011da4:	4603      	mov	r3, r0
 8011da6:	75fb      	strb	r3, [r7, #23]
      break;
 8011da8:	e014      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8011daa:	7afb      	ldrb	r3, [r7, #11]
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	4619      	mov	r1, r3
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	f000 ff8f 	bl	8012cd4 <SCSI_Verify10>
 8011db6:	4603      	mov	r3, r0
 8011db8:	75fb      	strb	r3, [r7, #23]
      break;
 8011dba:	e00b      	b.n	8011dd4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8011dbc:	7af9      	ldrb	r1, [r7, #11]
 8011dbe:	2320      	movs	r3, #32
 8011dc0:	2205      	movs	r2, #5
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	f000 fb9f 	bl	8012506 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	2202      	movs	r2, #2
 8011dcc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8011dce:	23ff      	movs	r3, #255	@ 0xff
 8011dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8011dd2:	bf00      	nop
  }

  return ret;
 8011dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3718      	adds	r7, #24
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}

08011de0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b086      	sub	sp, #24
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	460b      	mov	r3, r1
 8011dea:	607a      	str	r2, [r7, #4]
 8011dec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	32b0      	adds	r2, #176	@ 0xb0
 8011df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dfc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d102      	bne.n	8011e0a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8011e04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011e08:	e03f      	b.n	8011e8a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00a      	beq.n	8011e2a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8011e1a:	2320      	movs	r3, #32
 8011e1c:	2205      	movs	r2, #5
 8011e1e:	68f8      	ldr	r0, [r7, #12]
 8011e20:	f000 fb71 	bl	8012506 <SCSI_SenseCode>

    return -1;
 8011e24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011e28:	e02f      	b.n	8011e8a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8011e30:	2b02      	cmp	r3, #2
 8011e32:	d10b      	bne.n	8011e4c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011e34:	7af9      	ldrb	r1, [r7, #11]
 8011e36:	233a      	movs	r3, #58	@ 0x3a
 8011e38:	2202      	movs	r2, #2
 8011e3a:	68f8      	ldr	r0, [r7, #12]
 8011e3c:	f000 fb63 	bl	8012506 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	2205      	movs	r2, #5
 8011e44:	721a      	strb	r2, [r3, #8]
    return -1;
 8011e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011e4a:	e01e      	b.n	8011e8a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011e52:	68fa      	ldr	r2, [r7, #12]
 8011e54:	33b0      	adds	r3, #176	@ 0xb0
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	4413      	add	r3, r2
 8011e5a:	685b      	ldr	r3, [r3, #4]
 8011e5c:	689b      	ldr	r3, [r3, #8]
 8011e5e:	7afa      	ldrb	r2, [r7, #11]
 8011e60:	4610      	mov	r0, r2
 8011e62:	4798      	blx	r3
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00b      	beq.n	8011e82 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011e6a:	7af9      	ldrb	r1, [r7, #11]
 8011e6c:	233a      	movs	r3, #58	@ 0x3a
 8011e6e:	2202      	movs	r2, #2
 8011e70:	68f8      	ldr	r0, [r7, #12]
 8011e72:	f000 fb48 	bl	8012506 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	2205      	movs	r2, #5
 8011e7a:	721a      	strb	r2, [r3, #8]

    return -1;
 8011e7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011e80:	e003      	b.n	8011e8a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	2200      	movs	r2, #0
 8011e86:	60da      	str	r2, [r3, #12]

  return 0;
 8011e88:	2300      	movs	r3, #0
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3718      	adds	r7, #24
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
	...

08011e94 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b088      	sub	sp, #32
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	60f8      	str	r0, [r7, #12]
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	607a      	str	r2, [r7, #4]
 8011ea0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	32b0      	adds	r2, #176	@ 0xb0
 8011eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011eb0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d102      	bne.n	8011ebe <SCSI_Inquiry+0x2a>
  {
    return -1;
 8011eb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ebc:	e05e      	b.n	8011f7c <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011ebe:	69bb      	ldr	r3, [r7, #24]
 8011ec0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d10a      	bne.n	8011ede <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011ec8:	69bb      	ldr	r3, [r7, #24]
 8011eca:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8011ece:	2320      	movs	r3, #32
 8011ed0:	2205      	movs	r2, #5
 8011ed2:	68f8      	ldr	r0, [r7, #12]
 8011ed4:	f000 fb17 	bl	8012506 <SCSI_SenseCode>
    return -1;
 8011ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011edc:	e04e      	b.n	8011f7c <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	f003 0301 	and.w	r3, r3, #1
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d020      	beq.n	8011f2e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	3302      	adds	r3, #2
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d105      	bne.n	8011f02 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8011ef6:	2206      	movs	r2, #6
 8011ef8:	4922      	ldr	r1, [pc, #136]	@ (8011f84 <SCSI_Inquiry+0xf0>)
 8011efa:	69b8      	ldr	r0, [r7, #24]
 8011efc:	f001 f870 	bl	8012fe0 <SCSI_UpdateBotData>
 8011f00:	e03b      	b.n	8011f7a <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	3302      	adds	r3, #2
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	2b80      	cmp	r3, #128	@ 0x80
 8011f0a:	d105      	bne.n	8011f18 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8011f0c:	2208      	movs	r2, #8
 8011f0e:	491e      	ldr	r1, [pc, #120]	@ (8011f88 <SCSI_Inquiry+0xf4>)
 8011f10:	69b8      	ldr	r0, [r7, #24]
 8011f12:	f001 f865 	bl	8012fe0 <SCSI_UpdateBotData>
 8011f16:	e030      	b.n	8011f7a <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8011f18:	69bb      	ldr	r3, [r7, #24]
 8011f1a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8011f1e:	2324      	movs	r3, #36	@ 0x24
 8011f20:	2205      	movs	r2, #5
 8011f22:	68f8      	ldr	r0, [r7, #12]
 8011f24:	f000 faef 	bl	8012506 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8011f28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f2c:	e026      	b.n	8011f7c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011f34:	68fa      	ldr	r2, [r7, #12]
 8011f36:	33b0      	adds	r3, #176	@ 0xb0
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	4413      	add	r3, r2
 8011f3c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8011f3e:	69d9      	ldr	r1, [r3, #28]
 8011f40:	7afa      	ldrb	r2, [r7, #11]
 8011f42:	4613      	mov	r3, r2
 8011f44:	00db      	lsls	r3, r3, #3
 8011f46:	4413      	add	r3, r2
 8011f48:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8011f4a:	440b      	add	r3, r1
 8011f4c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	3304      	adds	r3, #4
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	3305      	adds	r3, #5
 8011f56:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	8bfb      	ldrh	r3, [r7, #30]
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d303      	bcc.n	8011f6e <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3304      	adds	r3, #4
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8011f6e:	8bfb      	ldrh	r3, [r7, #30]
 8011f70:	461a      	mov	r2, r3
 8011f72:	6979      	ldr	r1, [r7, #20]
 8011f74:	69b8      	ldr	r0, [r7, #24]
 8011f76:	f001 f833 	bl	8012fe0 <SCSI_UpdateBotData>
  }

  return 0;
 8011f7a:	2300      	movs	r3, #0
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3720      	adds	r7, #32
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	240000a4 	.word	0x240000a4
 8011f88:	240000ac 	.word	0x240000ac

08011f8c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	460b      	mov	r3, r1
 8011f96:	607a      	str	r2, [r7, #4]
 8011f98:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	32b0      	adds	r2, #176	@ 0xb0
 8011fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fa8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d102      	bne.n	8011fb6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8011fb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011fb4:	e064      	b.n	8012080 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	33b0      	adds	r3, #176	@ 0xb0
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	4413      	add	r3, r2
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	697a      	ldr	r2, [r7, #20]
 8011fca:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8011fce:	697a      	ldr	r2, [r7, #20]
 8011fd0:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8011fd4:	7af8      	ldrb	r0, [r7, #11]
 8011fd6:	4798      	blx	r3
 8011fd8:	4603      	mov	r3, r0
 8011fda:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011fdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d104      	bne.n	8011fee <SCSI_ReadCapacity10+0x62>
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8011fea:	2b02      	cmp	r3, #2
 8011fec:	d108      	bne.n	8012000 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011fee:	7af9      	ldrb	r1, [r7, #11]
 8011ff0:	233a      	movs	r3, #58	@ 0x3a
 8011ff2:	2202      	movs	r2, #2
 8011ff4:	68f8      	ldr	r0, [r7, #12]
 8011ff6:	f000 fa86 	bl	8012506 <SCSI_SenseCode>
    return -1;
 8011ffa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ffe:	e03f      	b.n	8012080 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012006:	3b01      	subs	r3, #1
 8012008:	0e1b      	lsrs	r3, r3, #24
 801200a:	b2da      	uxtb	r2, r3
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012016:	3b01      	subs	r3, #1
 8012018:	0c1b      	lsrs	r3, r3, #16
 801201a:	b2da      	uxtb	r2, r3
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012026:	3b01      	subs	r3, #1
 8012028:	0a1b      	lsrs	r3, r3, #8
 801202a:	b2da      	uxtb	r2, r3
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012036:	b2db      	uxtb	r3, r3
 8012038:	3b01      	subs	r3, #1
 801203a:	b2da      	uxtb	r2, r3
 801203c:	697b      	ldr	r3, [r7, #20]
 801203e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012046:	161b      	asrs	r3, r3, #24
 8012048:	b2da      	uxtb	r2, r3
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012054:	141b      	asrs	r3, r3, #16
 8012056:	b2da      	uxtb	r2, r3
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012062:	0a1b      	lsrs	r3, r3, #8
 8012064:	b29b      	uxth	r3, r3
 8012066:	b2da      	uxtb	r2, r3
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012072:	b2da      	uxtb	r2, r3
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	2208      	movs	r2, #8
 801207c:	60da      	str	r2, [r3, #12]

  return 0;
 801207e:	2300      	movs	r3, #0

}
 8012080:	4618      	mov	r0, r3
 8012082:	3718      	adds	r7, #24
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b088      	sub	sp, #32
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	460b      	mov	r3, r1
 8012092:	607a      	str	r2, [r7, #4]
 8012094:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	32b0      	adds	r2, #176	@ 0xb0
 80120a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120a4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d102      	bne.n	80120b2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80120ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80120b0:	e09a      	b.n	80121e8 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80120b8:	68fa      	ldr	r2, [r7, #12]
 80120ba:	33b0      	adds	r3, #176	@ 0xb0
 80120bc:	009b      	lsls	r3, r3, #2
 80120be:	4413      	add	r3, r2
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	69ba      	ldr	r2, [r7, #24]
 80120c6:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 80120ca:	69ba      	ldr	r2, [r7, #24]
 80120cc:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 80120d0:	7af8      	ldrb	r0, [r7, #11]
 80120d2:	4798      	blx	r3
 80120d4:	4603      	mov	r3, r0
 80120d6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80120d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d104      	bne.n	80120ea <SCSI_ReadCapacity16+0x62>
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80120e6:	2b02      	cmp	r3, #2
 80120e8:	d108      	bne.n	80120fc <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80120ea:	7af9      	ldrb	r1, [r7, #11]
 80120ec:	233a      	movs	r3, #58	@ 0x3a
 80120ee:	2202      	movs	r2, #2
 80120f0:	68f8      	ldr	r0, [r7, #12]
 80120f2:	f000 fa08 	bl	8012506 <SCSI_SenseCode>
    return -1;
 80120f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80120fa:	e075      	b.n	80121e8 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	330a      	adds	r3, #10
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	330b      	adds	r3, #11
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801210c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	330c      	adds	r3, #12
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012116:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	320d      	adds	r2, #13
 801211c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801211e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012124:	2300      	movs	r3, #0
 8012126:	61fb      	str	r3, [r7, #28]
 8012128:	e008      	b.n	801213c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 801212a:	69ba      	ldr	r2, [r7, #24]
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	4413      	add	r3, r2
 8012130:	3310      	adds	r3, #16
 8012132:	2200      	movs	r2, #0
 8012134:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	3301      	adds	r3, #1
 801213a:	61fb      	str	r3, [r7, #28]
 801213c:	69bb      	ldr	r3, [r7, #24]
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	69fa      	ldr	r2, [r7, #28]
 8012142:	429a      	cmp	r2, r3
 8012144:	d3f1      	bcc.n	801212a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 801214c:	3b01      	subs	r3, #1
 801214e:	0e1b      	lsrs	r3, r3, #24
 8012150:	b2da      	uxtb	r2, r3
 8012152:	69bb      	ldr	r3, [r7, #24]
 8012154:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 801215c:	3b01      	subs	r3, #1
 801215e:	0c1b      	lsrs	r3, r3, #16
 8012160:	b2da      	uxtb	r2, r3
 8012162:	69bb      	ldr	r3, [r7, #24]
 8012164:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012166:	69bb      	ldr	r3, [r7, #24]
 8012168:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 801216c:	3b01      	subs	r3, #1
 801216e:	0a1b      	lsrs	r3, r3, #8
 8012170:	b2da      	uxtb	r2, r3
 8012172:	69bb      	ldr	r3, [r7, #24]
 8012174:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012176:	69bb      	ldr	r3, [r7, #24]
 8012178:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 801217c:	b2db      	uxtb	r3, r3
 801217e:	3b01      	subs	r3, #1
 8012180:	b2da      	uxtb	r2, r3
 8012182:	69bb      	ldr	r3, [r7, #24]
 8012184:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012186:	69bb      	ldr	r3, [r7, #24]
 8012188:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 801218c:	161b      	asrs	r3, r3, #24
 801218e:	b2da      	uxtb	r2, r3
 8012190:	69bb      	ldr	r3, [r7, #24]
 8012192:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012194:	69bb      	ldr	r3, [r7, #24]
 8012196:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 801219a:	141b      	asrs	r3, r3, #16
 801219c:	b2da      	uxtb	r2, r3
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80121a2:	69bb      	ldr	r3, [r7, #24]
 80121a4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80121a8:	0a1b      	lsrs	r3, r3, #8
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	b2da      	uxtb	r2, r3
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80121b8:	b2da      	uxtb	r2, r3
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	330a      	adds	r3, #10
 80121c2:	781b      	ldrb	r3, [r3, #0]
 80121c4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	330b      	adds	r3, #11
 80121ca:	781b      	ldrb	r3, [r3, #0]
 80121cc:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80121ce:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	330c      	adds	r3, #12
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80121d8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80121da:	687a      	ldr	r2, [r7, #4]
 80121dc:	320d      	adds	r2, #13
 80121de:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80121e0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	60da      	str	r2, [r3, #12]

  return 0;
 80121e6:	2300      	movs	r3, #0
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3720      	adds	r7, #32
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}

080121f0 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b088      	sub	sp, #32
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	460b      	mov	r3, r1
 80121fa:	607a      	str	r2, [r7, #4]
 80121fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	32b0      	adds	r2, #176	@ 0xb0
 8012208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801220c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d102      	bne.n	801221a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8012214:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012218:	e061      	b.n	80122de <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	33b0      	adds	r3, #176	@ 0xb0
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	4413      	add	r3, r2
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	f107 0214 	add.w	r2, r7, #20
 8012230:	f107 0110 	add.w	r1, r7, #16
 8012234:	7af8      	ldrb	r0, [r7, #11]
 8012236:	4798      	blx	r3
 8012238:	4603      	mov	r3, r0
 801223a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801223c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d104      	bne.n	801224e <SCSI_ReadFormatCapacity+0x5e>
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 801224a:	2b02      	cmp	r3, #2
 801224c:	d108      	bne.n	8012260 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801224e:	7af9      	ldrb	r1, [r7, #11]
 8012250:	233a      	movs	r3, #58	@ 0x3a
 8012252:	2202      	movs	r2, #2
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	f000 f956 	bl	8012506 <SCSI_SenseCode>
    return -1;
 801225a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801225e:	e03e      	b.n	80122de <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8012260:	2300      	movs	r3, #0
 8012262:	83fb      	strh	r3, [r7, #30]
 8012264:	e007      	b.n	8012276 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8012266:	8bfb      	ldrh	r3, [r7, #30]
 8012268:	69ba      	ldr	r2, [r7, #24]
 801226a:	4413      	add	r3, r2
 801226c:	2200      	movs	r2, #0
 801226e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8012270:	8bfb      	ldrh	r3, [r7, #30]
 8012272:	3301      	adds	r3, #1
 8012274:	83fb      	strh	r3, [r7, #30]
 8012276:	8bfb      	ldrh	r3, [r7, #30]
 8012278:	2b0b      	cmp	r3, #11
 801227a:	d9f4      	bls.n	8012266 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	2208      	movs	r2, #8
 8012280:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	3b01      	subs	r3, #1
 8012286:	0e1b      	lsrs	r3, r3, #24
 8012288:	b2da      	uxtb	r2, r3
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	3b01      	subs	r3, #1
 8012292:	0c1b      	lsrs	r3, r3, #16
 8012294:	b2da      	uxtb	r2, r3
 8012296:	69bb      	ldr	r3, [r7, #24]
 8012298:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	3b01      	subs	r3, #1
 801229e:	0a1b      	lsrs	r3, r3, #8
 80122a0:	b2da      	uxtb	r2, r3
 80122a2:	69bb      	ldr	r3, [r7, #24]
 80122a4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	b2db      	uxtb	r3, r3
 80122aa:	3b01      	subs	r3, #1
 80122ac:	b2da      	uxtb	r2, r3
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80122b2:	69bb      	ldr	r3, [r7, #24]
 80122b4:	2202      	movs	r2, #2
 80122b6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80122b8:	8abb      	ldrh	r3, [r7, #20]
 80122ba:	141b      	asrs	r3, r3, #16
 80122bc:	b2da      	uxtb	r2, r3
 80122be:	69bb      	ldr	r3, [r7, #24]
 80122c0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80122c2:	8abb      	ldrh	r3, [r7, #20]
 80122c4:	0a1b      	lsrs	r3, r3, #8
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	b2da      	uxtb	r2, r3
 80122ca:	69bb      	ldr	r3, [r7, #24]
 80122cc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80122ce:	8abb      	ldrh	r3, [r7, #20]
 80122d0:	b2da      	uxtb	r2, r3
 80122d2:	69bb      	ldr	r3, [r7, #24]
 80122d4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	220c      	movs	r2, #12
 80122da:	60da      	str	r2, [r3, #12]

  return 0;
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3720      	adds	r7, #32
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
	...

080122e8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b086      	sub	sp, #24
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	60f8      	str	r0, [r7, #12]
 80122f0:	460b      	mov	r3, r1
 80122f2:	607a      	str	r2, [r7, #4]
 80122f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	32b0      	adds	r2, #176	@ 0xb0
 8012300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012304:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8012306:	2304      	movs	r3, #4
 8012308:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d102      	bne.n	8012316 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8012310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012314:	e027      	b.n	8012366 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801231c:	68fa      	ldr	r2, [r7, #12]
 801231e:	33b0      	adds	r3, #176	@ 0xb0
 8012320:	009b      	lsls	r3, r3, #2
 8012322:	4413      	add	r3, r2
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	68db      	ldr	r3, [r3, #12]
 8012328:	7afa      	ldrb	r2, [r7, #11]
 801232a:	4610      	mov	r0, r2
 801232c:	4798      	blx	r3
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d006      	beq.n	8012342 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8012334:	4b0e      	ldr	r3, [pc, #56]	@ (8012370 <SCSI_ModeSense6+0x88>)
 8012336:	789b      	ldrb	r3, [r3, #2]
 8012338:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801233c:	b2da      	uxtb	r2, r3
 801233e:	4b0c      	ldr	r3, [pc, #48]	@ (8012370 <SCSI_ModeSense6+0x88>)
 8012340:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	3304      	adds	r3, #4
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	461a      	mov	r2, r3
 801234a:	8afb      	ldrh	r3, [r7, #22]
 801234c:	4293      	cmp	r3, r2
 801234e:	d303      	bcc.n	8012358 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	3304      	adds	r3, #4
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8012358:	8afb      	ldrh	r3, [r7, #22]
 801235a:	461a      	mov	r2, r3
 801235c:	4904      	ldr	r1, [pc, #16]	@ (8012370 <SCSI_ModeSense6+0x88>)
 801235e:	6938      	ldr	r0, [r7, #16]
 8012360:	f000 fe3e 	bl	8012fe0 <SCSI_UpdateBotData>

  return 0;
 8012364:	2300      	movs	r3, #0
}
 8012366:	4618      	mov	r0, r3
 8012368:	3718      	adds	r7, #24
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	240000b4 	.word	0x240000b4

08012374 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b086      	sub	sp, #24
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	460b      	mov	r3, r1
 801237e:	607a      	str	r2, [r7, #4]
 8012380:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	32b0      	adds	r2, #176	@ 0xb0
 801238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012390:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8012392:	2308      	movs	r3, #8
 8012394:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d102      	bne.n	80123a2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 801239c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80123a0:	e027      	b.n	80123f2 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80123a8:	68fa      	ldr	r2, [r7, #12]
 80123aa:	33b0      	adds	r3, #176	@ 0xb0
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	4413      	add	r3, r2
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	68db      	ldr	r3, [r3, #12]
 80123b4:	7afa      	ldrb	r2, [r7, #11]
 80123b6:	4610      	mov	r0, r2
 80123b8:	4798      	blx	r3
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d006      	beq.n	80123ce <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 80123c0:	4b0e      	ldr	r3, [pc, #56]	@ (80123fc <SCSI_ModeSense10+0x88>)
 80123c2:	78db      	ldrb	r3, [r3, #3]
 80123c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80123c8:	b2da      	uxtb	r2, r3
 80123ca:	4b0c      	ldr	r3, [pc, #48]	@ (80123fc <SCSI_ModeSense10+0x88>)
 80123cc:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	3308      	adds	r3, #8
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	461a      	mov	r2, r3
 80123d6:	8afb      	ldrh	r3, [r7, #22]
 80123d8:	4293      	cmp	r3, r2
 80123da:	d303      	bcc.n	80123e4 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	3308      	adds	r3, #8
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80123e4:	8afb      	ldrh	r3, [r7, #22]
 80123e6:	461a      	mov	r2, r3
 80123e8:	4904      	ldr	r1, [pc, #16]	@ (80123fc <SCSI_ModeSense10+0x88>)
 80123ea:	6938      	ldr	r0, [r7, #16]
 80123ec:	f000 fdf8 	bl	8012fe0 <SCSI_UpdateBotData>

  return 0;
 80123f0:	2300      	movs	r3, #0
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3718      	adds	r7, #24
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop
 80123fc:	240000b8 	.word	0x240000b8

08012400 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b086      	sub	sp, #24
 8012404:	af00      	add	r7, sp, #0
 8012406:	60f8      	str	r0, [r7, #12]
 8012408:	460b      	mov	r3, r1
 801240a:	607a      	str	r2, [r7, #4]
 801240c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	32b0      	adds	r2, #176	@ 0xb0
 8012418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801241c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d102      	bne.n	801242a <SCSI_RequestSense+0x2a>
  {
    return -1;
 8012424:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012428:	e069      	b.n	80124fe <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8012430:	2b00      	cmp	r3, #0
 8012432:	d10a      	bne.n	801244a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801243a:	2320      	movs	r3, #32
 801243c:	2205      	movs	r2, #5
 801243e:	68f8      	ldr	r0, [r7, #12]
 8012440:	f000 f861 	bl	8012506 <SCSI_SenseCode>
    return -1;
 8012444:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012448:	e059      	b.n	80124fe <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801244a:	2300      	movs	r3, #0
 801244c:	75fb      	strb	r3, [r7, #23]
 801244e:	e007      	b.n	8012460 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8012450:	7dfb      	ldrb	r3, [r7, #23]
 8012452:	693a      	ldr	r2, [r7, #16]
 8012454:	4413      	add	r3, r2
 8012456:	2200      	movs	r2, #0
 8012458:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801245a:	7dfb      	ldrb	r3, [r7, #23]
 801245c:	3301      	adds	r3, #1
 801245e:	75fb      	strb	r3, [r7, #23]
 8012460:	7dfb      	ldrb	r3, [r7, #23]
 8012462:	2b11      	cmp	r3, #17
 8012464:	d9f4      	bls.n	8012450 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	2270      	movs	r2, #112	@ 0x70
 801246a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	220c      	movs	r2, #12
 8012470:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801247e:	429a      	cmp	r2, r3
 8012480:	d02e      	beq.n	80124e0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8012488:	461a      	mov	r2, r3
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	3248      	adds	r2, #72	@ 0x48
 801248e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 801249c:	693a      	ldr	r2, [r7, #16]
 801249e:	3348      	adds	r3, #72	@ 0x48
 80124a0:	00db      	lsls	r3, r3, #3
 80124a2:	4413      	add	r3, r2
 80124a4:	791a      	ldrb	r2, [r3, #4]
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80124b0:	693a      	ldr	r2, [r7, #16]
 80124b2:	3348      	adds	r3, #72	@ 0x48
 80124b4:	00db      	lsls	r3, r3, #3
 80124b6:	4413      	add	r3, r2
 80124b8:	795a      	ldrb	r2, [r3, #5]
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80124be:	693b      	ldr	r3, [r7, #16]
 80124c0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80124c4:	3301      	adds	r3, #1
 80124c6:	b2da      	uxtb	r2, r3
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80124d4:	2b04      	cmp	r3, #4
 80124d6:	d103      	bne.n	80124e0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	2200      	movs	r2, #0
 80124dc:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	2212      	movs	r2, #18
 80124e4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	3304      	adds	r3, #4
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	2b12      	cmp	r3, #18
 80124ee:	d805      	bhi.n	80124fc <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	3304      	adds	r3, #4
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	461a      	mov	r2, r3
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80124fc:	2300      	movs	r3, #0
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3718      	adds	r7, #24
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8012506:	b480      	push	{r7}
 8012508:	b085      	sub	sp, #20
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
 801250e:	4608      	mov	r0, r1
 8012510:	4611      	mov	r1, r2
 8012512:	461a      	mov	r2, r3
 8012514:	4603      	mov	r3, r0
 8012516:	70fb      	strb	r3, [r7, #3]
 8012518:	460b      	mov	r3, r1
 801251a:	70bb      	strb	r3, [r7, #2]
 801251c:	4613      	mov	r3, r2
 801251e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	32b0      	adds	r2, #176	@ 0xb0
 801252a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801252e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d02c      	beq.n	8012590 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801253c:	461a      	mov	r2, r3
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	3248      	adds	r2, #72	@ 0x48
 8012542:	78b9      	ldrb	r1, [r7, #2]
 8012544:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	3348      	adds	r3, #72	@ 0x48
 8012552:	00db      	lsls	r3, r3, #3
 8012554:	4413      	add	r3, r2
 8012556:	787a      	ldrb	r2, [r7, #1]
 8012558:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8012560:	68fa      	ldr	r2, [r7, #12]
 8012562:	3348      	adds	r3, #72	@ 0x48
 8012564:	00db      	lsls	r3, r3, #3
 8012566:	4413      	add	r3, r2
 8012568:	2200      	movs	r2, #0
 801256a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8012572:	3301      	adds	r3, #1
 8012574:	b2da      	uxtb	r2, r3
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8012582:	2b04      	cmp	r3, #4
 8012584:	d105      	bne.n	8012592 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	2200      	movs	r2, #0
 801258a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 801258e:	e000      	b.n	8012592 <SCSI_SenseCode+0x8c>
    return;
 8012590:	bf00      	nop
  }
}
 8012592:	3714      	adds	r7, #20
 8012594:	46bd      	mov	sp, r7
 8012596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259a:	4770      	bx	lr

0801259c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b086      	sub	sp, #24
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	460b      	mov	r3, r1
 80125a6:	607a      	str	r2, [r7, #4]
 80125a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	32b0      	adds	r2, #176	@ 0xb0
 80125b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125b8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d102      	bne.n	80125c6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80125c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80125c4:	e03b      	b.n	801263e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d10f      	bne.n	80125f0 <SCSI_StartStopUnit+0x54>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	3304      	adds	r3, #4
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	f003 0303 	and.w	r3, r3, #3
 80125da:	2b02      	cmp	r3, #2
 80125dc:	d108      	bne.n	80125f0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80125de:	7af9      	ldrb	r1, [r7, #11]
 80125e0:	2324      	movs	r3, #36	@ 0x24
 80125e2:	2205      	movs	r2, #5
 80125e4:	68f8      	ldr	r0, [r7, #12]
 80125e6:	f7ff ff8e 	bl	8012506 <SCSI_SenseCode>

    return -1;
 80125ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80125ee:	e026      	b.n	801263e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	3304      	adds	r3, #4
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	f003 0303 	and.w	r3, r3, #3
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	d104      	bne.n	8012608 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	2200      	movs	r2, #0
 8012602:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8012606:	e016      	b.n	8012636 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	3304      	adds	r3, #4
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	f003 0303 	and.w	r3, r3, #3
 8012612:	2b02      	cmp	r3, #2
 8012614:	d104      	bne.n	8012620 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	2202      	movs	r2, #2
 801261a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 801261e:	e00a      	b.n	8012636 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	3304      	adds	r3, #4
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	f003 0303 	and.w	r3, r3, #3
 801262a:	2b03      	cmp	r3, #3
 801262c:	d103      	bne.n	8012636 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	2200      	movs	r2, #0
 8012632:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	2200      	movs	r2, #0
 801263a:	60da      	str	r2, [r3, #12]

  return 0;
 801263c:	2300      	movs	r3, #0
}
 801263e:	4618      	mov	r0, r3
 8012640:	3718      	adds	r7, #24
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}

08012646 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012646:	b480      	push	{r7}
 8012648:	b087      	sub	sp, #28
 801264a:	af00      	add	r7, sp, #0
 801264c:	60f8      	str	r0, [r7, #12]
 801264e:	460b      	mov	r3, r1
 8012650:	607a      	str	r2, [r7, #4]
 8012652:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	32b0      	adds	r2, #176	@ 0xb0
 801265e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012662:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d102      	bne.n	8012670 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801266a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801266e:	e011      	b.n	8012694 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	3304      	adds	r3, #4
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d104      	bne.n	8012684 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	2200      	movs	r2, #0
 801267e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8012682:	e003      	b.n	801268c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	2201      	movs	r2, #1
 8012688:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	2200      	movs	r2, #0
 8012690:	60da      	str	r2, [r3, #12]

  return 0;
 8012692:	2300      	movs	r3, #0
}
 8012694:	4618      	mov	r0, r3
 8012696:	371c      	adds	r7, #28
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b086      	sub	sp, #24
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	460b      	mov	r3, r1
 80126aa:	607a      	str	r2, [r7, #4]
 80126ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	32b0      	adds	r2, #176	@ 0xb0
 80126b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d102      	bne.n	80126ca <SCSI_Read10+0x2a>
  {
    return -1;
 80126c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80126c8:	e090      	b.n	80127ec <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	7a1b      	ldrb	r3, [r3, #8]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	f040 8082 	bne.w	80127d8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80126da:	b25b      	sxtb	r3, r3
 80126dc:	2b00      	cmp	r3, #0
 80126de:	db0a      	blt.n	80126f6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80126e6:	2320      	movs	r3, #32
 80126e8:	2205      	movs	r2, #5
 80126ea:	68f8      	ldr	r0, [r7, #12]
 80126ec:	f7ff ff0b 	bl	8012506 <SCSI_SenseCode>
      return -1;
 80126f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80126f4:	e07a      	b.n	80127ec <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80126fc:	2b02      	cmp	r3, #2
 80126fe:	d108      	bne.n	8012712 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012700:	7af9      	ldrb	r1, [r7, #11]
 8012702:	233a      	movs	r3, #58	@ 0x3a
 8012704:	2202      	movs	r2, #2
 8012706:	68f8      	ldr	r0, [r7, #12]
 8012708:	f7ff fefd 	bl	8012506 <SCSI_SenseCode>

      return -1;
 801270c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012710:	e06c      	b.n	80127ec <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012718:	68fa      	ldr	r2, [r7, #12]
 801271a:	33b0      	adds	r3, #176	@ 0xb0
 801271c:	009b      	lsls	r3, r3, #2
 801271e:	4413      	add	r3, r2
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	689b      	ldr	r3, [r3, #8]
 8012724:	7afa      	ldrb	r2, [r7, #11]
 8012726:	4610      	mov	r0, r2
 8012728:	4798      	blx	r3
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d008      	beq.n	8012742 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012730:	7af9      	ldrb	r1, [r7, #11]
 8012732:	233a      	movs	r3, #58	@ 0x3a
 8012734:	2202      	movs	r2, #2
 8012736:	68f8      	ldr	r0, [r7, #12]
 8012738:	f7ff fee5 	bl	8012506 <SCSI_SenseCode>
      return -1;
 801273c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012740:	e054      	b.n	80127ec <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	3302      	adds	r3, #2
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	3303      	adds	r3, #3
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012752:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	3304      	adds	r3, #4
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801275c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801275e:	687a      	ldr	r2, [r7, #4]
 8012760:	3205      	adds	r2, #5
 8012762:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8012764:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	3307      	adds	r3, #7
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	021b      	lsls	r3, r3, #8
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	3208      	adds	r2, #8
 8012778:	7812      	ldrb	r2, [r2, #0]
 801277a:	431a      	orrs	r2, r3
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 801278e:	7af9      	ldrb	r1, [r7, #11]
 8012790:	68f8      	ldr	r0, [r7, #12]
 8012792:	f000 fadc 	bl	8012d4e <SCSI_CheckAddressRange>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	da02      	bge.n	80127a2 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801279c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80127a0:	e024      	b.n	80127ec <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80127ae:	6979      	ldr	r1, [r7, #20]
 80127b0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 80127b4:	fb01 f303 	mul.w	r3, r1, r3
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d00a      	beq.n	80127d2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80127c2:	2320      	movs	r3, #32
 80127c4:	2205      	movs	r2, #5
 80127c6:	68f8      	ldr	r0, [r7, #12]
 80127c8:	f7ff fe9d 	bl	8012506 <SCSI_SenseCode>
      return -1;
 80127cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80127d0:	e00c      	b.n	80127ec <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	2202      	movs	r2, #2
 80127d6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127de:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80127e0:	7afb      	ldrb	r3, [r7, #11]
 80127e2:	4619      	mov	r1, r3
 80127e4:	68f8      	ldr	r0, [r7, #12]
 80127e6:	f000 fadf 	bl	8012da8 <SCSI_ProcessRead>
 80127ea:	4603      	mov	r3, r0
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3718      	adds	r7, #24
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b086      	sub	sp, #24
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	460b      	mov	r3, r1
 80127fe:	607a      	str	r2, [r7, #4]
 8012800:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	32b0      	adds	r2, #176	@ 0xb0
 801280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012810:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012812:	697b      	ldr	r3, [r7, #20]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d102      	bne.n	801281e <SCSI_Read12+0x2a>
  {
    return -1;
 8012818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801281c:	e09a      	b.n	8012954 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	7a1b      	ldrb	r3, [r3, #8]
 8012822:	2b00      	cmp	r3, #0
 8012824:	f040 808c 	bne.w	8012940 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 801282e:	b25b      	sxtb	r3, r3
 8012830:	2b00      	cmp	r3, #0
 8012832:	db0a      	blt.n	801284a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801283a:	2320      	movs	r3, #32
 801283c:	2205      	movs	r2, #5
 801283e:	68f8      	ldr	r0, [r7, #12]
 8012840:	f7ff fe61 	bl	8012506 <SCSI_SenseCode>
      return -1;
 8012844:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012848:	e084      	b.n	8012954 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8012850:	2b02      	cmp	r3, #2
 8012852:	d108      	bne.n	8012866 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012854:	7af9      	ldrb	r1, [r7, #11]
 8012856:	233a      	movs	r3, #58	@ 0x3a
 8012858:	2202      	movs	r2, #2
 801285a:	68f8      	ldr	r0, [r7, #12]
 801285c:	f7ff fe53 	bl	8012506 <SCSI_SenseCode>
      return -1;
 8012860:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012864:	e076      	b.n	8012954 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801286c:	68fa      	ldr	r2, [r7, #12]
 801286e:	33b0      	adds	r3, #176	@ 0xb0
 8012870:	009b      	lsls	r3, r3, #2
 8012872:	4413      	add	r3, r2
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	689b      	ldr	r3, [r3, #8]
 8012878:	7afa      	ldrb	r2, [r7, #11]
 801287a:	4610      	mov	r0, r2
 801287c:	4798      	blx	r3
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	d008      	beq.n	8012896 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012884:	7af9      	ldrb	r1, [r7, #11]
 8012886:	233a      	movs	r3, #58	@ 0x3a
 8012888:	2202      	movs	r2, #2
 801288a:	68f8      	ldr	r0, [r7, #12]
 801288c:	f7ff fe3b 	bl	8012506 <SCSI_SenseCode>
      return -1;
 8012890:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012894:	e05e      	b.n	8012954 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	3302      	adds	r3, #2
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	3303      	adds	r3, #3
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80128a6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	3304      	adds	r3, #4
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80128b0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	3205      	adds	r2, #5
 80128b6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80128b8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	3306      	adds	r3, #6
 80128c4:	781b      	ldrb	r3, [r3, #0]
 80128c6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	3307      	adds	r3, #7
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80128d0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	3308      	adds	r3, #8
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80128da:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80128dc:	687a      	ldr	r2, [r7, #4]
 80128de:	3209      	adds	r2, #9
 80128e0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80128e2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80128f6:	7af9      	ldrb	r1, [r7, #11]
 80128f8:	68f8      	ldr	r0, [r7, #12]
 80128fa:	f000 fa28 	bl	8012d4e <SCSI_CheckAddressRange>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	da02      	bge.n	801290a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012904:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012908:	e024      	b.n	8012954 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012916:	6979      	ldr	r1, [r7, #20]
 8012918:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 801291c:	fb01 f303 	mul.w	r3, r1, r3
 8012920:	429a      	cmp	r2, r3
 8012922:	d00a      	beq.n	801293a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801292a:	2320      	movs	r3, #32
 801292c:	2205      	movs	r2, #5
 801292e:	68f8      	ldr	r0, [r7, #12]
 8012930:	f7ff fde9 	bl	8012506 <SCSI_SenseCode>
      return -1;
 8012934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012938:	e00c      	b.n	8012954 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	2202      	movs	r2, #2
 801293e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012946:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8012948:	7afb      	ldrb	r3, [r7, #11]
 801294a:	4619      	mov	r1, r3
 801294c:	68f8      	ldr	r0, [r7, #12]
 801294e:	f000 fa2b 	bl	8012da8 <SCSI_ProcessRead>
 8012952:	4603      	mov	r3, r0
}
 8012954:	4618      	mov	r0, r3
 8012956:	3718      	adds	r7, #24
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b086      	sub	sp, #24
 8012960:	af00      	add	r7, sp, #0
 8012962:	60f8      	str	r0, [r7, #12]
 8012964:	460b      	mov	r3, r1
 8012966:	607a      	str	r2, [r7, #4]
 8012968:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	32b0      	adds	r2, #176	@ 0xb0
 8012974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012978:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d102      	bne.n	8012986 <SCSI_Write10+0x2a>
  {
    return -1;
 8012980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012984:	e0ba      	b.n	8012afc <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	7a1b      	ldrb	r3, [r3, #8]
 801298a:	2b00      	cmp	r3, #0
 801298c:	f040 80b0 	bne.w	8012af0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8012996:	2b00      	cmp	r3, #0
 8012998:	d10a      	bne.n	80129b0 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80129a0:	2320      	movs	r3, #32
 80129a2:	2205      	movs	r2, #5
 80129a4:	68f8      	ldr	r0, [r7, #12]
 80129a6:	f7ff fdae 	bl	8012506 <SCSI_SenseCode>
      return -1;
 80129aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80129ae:	e0a5      	b.n	8012afc <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80129b6:	b25b      	sxtb	r3, r3
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	da0a      	bge.n	80129d2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80129c2:	2320      	movs	r3, #32
 80129c4:	2205      	movs	r2, #5
 80129c6:	68f8      	ldr	r0, [r7, #12]
 80129c8:	f7ff fd9d 	bl	8012506 <SCSI_SenseCode>
      return -1;
 80129cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80129d0:	e094      	b.n	8012afc <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	33b0      	adds	r3, #176	@ 0xb0
 80129dc:	009b      	lsls	r3, r3, #2
 80129de:	4413      	add	r3, r2
 80129e0:	685b      	ldr	r3, [r3, #4]
 80129e2:	689b      	ldr	r3, [r3, #8]
 80129e4:	7afa      	ldrb	r2, [r7, #11]
 80129e6:	4610      	mov	r0, r2
 80129e8:	4798      	blx	r3
 80129ea:	4603      	mov	r3, r0
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d008      	beq.n	8012a02 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80129f0:	7af9      	ldrb	r1, [r7, #11]
 80129f2:	233a      	movs	r3, #58	@ 0x3a
 80129f4:	2202      	movs	r2, #2
 80129f6:	68f8      	ldr	r0, [r7, #12]
 80129f8:	f7ff fd85 	bl	8012506 <SCSI_SenseCode>
      return -1;
 80129fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012a00:	e07c      	b.n	8012afc <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	33b0      	adds	r3, #176	@ 0xb0
 8012a0c:	009b      	lsls	r3, r3, #2
 8012a0e:	4413      	add	r3, r2
 8012a10:	685b      	ldr	r3, [r3, #4]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	7afa      	ldrb	r2, [r7, #11]
 8012a16:	4610      	mov	r0, r2
 8012a18:	4798      	blx	r3
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d008      	beq.n	8012a32 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012a20:	7af9      	ldrb	r1, [r7, #11]
 8012a22:	2327      	movs	r3, #39	@ 0x27
 8012a24:	2202      	movs	r2, #2
 8012a26:	68f8      	ldr	r0, [r7, #12]
 8012a28:	f7ff fd6d 	bl	8012506 <SCSI_SenseCode>
      return -1;
 8012a2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012a30:	e064      	b.n	8012afc <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	3302      	adds	r3, #2
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	3303      	adds	r3, #3
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012a42:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	3304      	adds	r3, #4
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012a4c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012a4e:	687a      	ldr	r2, [r7, #4]
 8012a50:	3205      	adds	r2, #5
 8012a52:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012a54:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	3307      	adds	r3, #7
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8012a64:	687a      	ldr	r2, [r7, #4]
 8012a66:	3208      	adds	r2, #8
 8012a68:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012a6a:	431a      	orrs	r2, r3
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012a7e:	7af9      	ldrb	r1, [r7, #11]
 8012a80:	68f8      	ldr	r0, [r7, #12]
 8012a82:	f000 f964 	bl	8012d4e <SCSI_CheckAddressRange>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	da02      	bge.n	8012a92 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012a90:	e034      	b.n	8012afc <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012a98:	697a      	ldr	r2, [r7, #20]
 8012a9a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8012a9e:	fb02 f303 	mul.w	r3, r2, r3
 8012aa2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8012aaa:	693a      	ldr	r2, [r7, #16]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d00a      	beq.n	8012ac6 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8012ab6:	2320      	movs	r3, #32
 8012ab8:	2205      	movs	r2, #5
 8012aba:	68f8      	ldr	r0, [r7, #12]
 8012abc:	f7ff fd23 	bl	8012506 <SCSI_SenseCode>
      return -1;
 8012ac0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ac4:	e01a      	b.n	8012afc <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012acc:	bf28      	it	cs
 8012ace:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8012ad2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	2201      	movs	r2, #1
 8012ad8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012ada:	4b0a      	ldr	r3, [pc, #40]	@ (8012b04 <SCSI_Write10+0x1a8>)
 8012adc:	7819      	ldrb	r1, [r3, #0]
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	f103 0210 	add.w	r2, r3, #16
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	68f8      	ldr	r0, [r7, #12]
 8012ae8:	f002 facd 	bl	8015086 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012aec:	2300      	movs	r3, #0
 8012aee:	e005      	b.n	8012afc <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8012af0:	7afb      	ldrb	r3, [r7, #11]
 8012af2:	4619      	mov	r1, r3
 8012af4:	68f8      	ldr	r0, [r7, #12]
 8012af6:	f000 f9dd 	bl	8012eb4 <SCSI_ProcessWrite>
 8012afa:	4603      	mov	r3, r0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3718      	adds	r7, #24
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	240000a3 	.word	0x240000a3

08012b08 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b086      	sub	sp, #24
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	60f8      	str	r0, [r7, #12]
 8012b10:	460b      	mov	r3, r1
 8012b12:	607a      	str	r2, [r7, #4]
 8012b14:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	32b0      	adds	r2, #176	@ 0xb0
 8012b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b24:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d102      	bne.n	8012b32 <SCSI_Write12+0x2a>
  {
    return -1;
 8012b2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012b30:	e0ca      	b.n	8012cc8 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	7a1b      	ldrb	r3, [r3, #8]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f040 80c0 	bne.w	8012cbc <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d10a      	bne.n	8012b5c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8012b4c:	2320      	movs	r3, #32
 8012b4e:	2205      	movs	r2, #5
 8012b50:	68f8      	ldr	r0, [r7, #12]
 8012b52:	f7ff fcd8 	bl	8012506 <SCSI_SenseCode>
      return -1;
 8012b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012b5a:	e0b5      	b.n	8012cc8 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8012b62:	b25b      	sxtb	r3, r3
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	da0a      	bge.n	8012b7e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8012b6e:	2320      	movs	r3, #32
 8012b70:	2205      	movs	r2, #5
 8012b72:	68f8      	ldr	r0, [r7, #12]
 8012b74:	f7ff fcc7 	bl	8012506 <SCSI_SenseCode>
      return -1;
 8012b78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012b7c:	e0a4      	b.n	8012cc8 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	33b0      	adds	r3, #176	@ 0xb0
 8012b88:	009b      	lsls	r3, r3, #2
 8012b8a:	4413      	add	r3, r2
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	689b      	ldr	r3, [r3, #8]
 8012b90:	7afa      	ldrb	r2, [r7, #11]
 8012b92:	4610      	mov	r0, r2
 8012b94:	4798      	blx	r3
 8012b96:	4603      	mov	r3, r0
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d00b      	beq.n	8012bb4 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012b9c:	7af9      	ldrb	r1, [r7, #11]
 8012b9e:	233a      	movs	r3, #58	@ 0x3a
 8012ba0:	2202      	movs	r2, #2
 8012ba2:	68f8      	ldr	r0, [r7, #12]
 8012ba4:	f7ff fcaf 	bl	8012506 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	2205      	movs	r2, #5
 8012bac:	721a      	strb	r2, [r3, #8]
      return -1;
 8012bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012bb2:	e089      	b.n	8012cc8 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012bba:	68fa      	ldr	r2, [r7, #12]
 8012bbc:	33b0      	adds	r3, #176	@ 0xb0
 8012bbe:	009b      	lsls	r3, r3, #2
 8012bc0:	4413      	add	r3, r2
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	68db      	ldr	r3, [r3, #12]
 8012bc6:	7afa      	ldrb	r2, [r7, #11]
 8012bc8:	4610      	mov	r0, r2
 8012bca:	4798      	blx	r3
 8012bcc:	4603      	mov	r3, r0
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00b      	beq.n	8012bea <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012bd2:	7af9      	ldrb	r1, [r7, #11]
 8012bd4:	2327      	movs	r3, #39	@ 0x27
 8012bd6:	2202      	movs	r2, #2
 8012bd8:	68f8      	ldr	r0, [r7, #12]
 8012bda:	f7ff fc94 	bl	8012506 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	2205      	movs	r2, #5
 8012be2:	721a      	strb	r2, [r3, #8]
      return -1;
 8012be4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012be8:	e06e      	b.n	8012cc8 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	3302      	adds	r3, #2
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	3303      	adds	r3, #3
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012bfa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	3304      	adds	r3, #4
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012c04:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012c06:	687a      	ldr	r2, [r7, #4]
 8012c08:	3205      	adds	r2, #5
 8012c0a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012c0c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	3306      	adds	r3, #6
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	3307      	adds	r3, #7
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012c24:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	3308      	adds	r3, #8
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012c2e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012c30:	687a      	ldr	r2, [r7, #4]
 8012c32:	3209      	adds	r2, #9
 8012c34:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012c36:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012c4a:	7af9      	ldrb	r1, [r7, #11]
 8012c4c:	68f8      	ldr	r0, [r7, #12]
 8012c4e:	f000 f87e 	bl	8012d4e <SCSI_CheckAddressRange>
 8012c52:	4603      	mov	r3, r0
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	da02      	bge.n	8012c5e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012c58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c5c:	e034      	b.n	8012cc8 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012c64:	697a      	ldr	r2, [r7, #20]
 8012c66:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8012c6a:	fb02 f303 	mul.w	r3, r2, r3
 8012c6e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8012c76:	693a      	ldr	r2, [r7, #16]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d00a      	beq.n	8012c92 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8012c82:	2320      	movs	r3, #32
 8012c84:	2205      	movs	r2, #5
 8012c86:	68f8      	ldr	r0, [r7, #12]
 8012c88:	f7ff fc3d 	bl	8012506 <SCSI_SenseCode>
      return -1;
 8012c8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c90:	e01a      	b.n	8012cc8 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c98:	bf28      	it	cs
 8012c9a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8012c9e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012ca0:	697b      	ldr	r3, [r7, #20]
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8012cd0 <SCSI_Write12+0x1c8>)
 8012ca8:	7819      	ldrb	r1, [r3, #0]
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	f103 0210 	add.w	r2, r3, #16
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	68f8      	ldr	r0, [r7, #12]
 8012cb4:	f002 f9e7 	bl	8015086 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	e005      	b.n	8012cc8 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8012cbc:	7afb      	ldrb	r3, [r7, #11]
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	f000 f8f7 	bl	8012eb4 <SCSI_ProcessWrite>
 8012cc6:	4603      	mov	r3, r0
}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	3718      	adds	r7, #24
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}
 8012cd0:	240000a3 	.word	0x240000a3

08012cd4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b086      	sub	sp, #24
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	60f8      	str	r0, [r7, #12]
 8012cdc:	460b      	mov	r3, r1
 8012cde:	607a      	str	r2, [r7, #4]
 8012ce0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	32b0      	adds	r2, #176	@ 0xb0
 8012cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cf0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d102      	bne.n	8012cfe <SCSI_Verify10+0x2a>
  {
    return -1;
 8012cf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012cfc:	e023      	b.n	8012d46 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	3301      	adds	r3, #1
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	f003 0302 	and.w	r3, r3, #2
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d008      	beq.n	8012d1e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012d0c:	7af9      	ldrb	r1, [r7, #11]
 8012d0e:	2324      	movs	r3, #36	@ 0x24
 8012d10:	2205      	movs	r2, #5
 8012d12:	68f8      	ldr	r0, [r7, #12]
 8012d14:	f7ff fbf7 	bl	8012506 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8012d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d1c:	e013      	b.n	8012d46 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012d2a:	7af9      	ldrb	r1, [r7, #11]
 8012d2c:	68f8      	ldr	r0, [r7, #12]
 8012d2e:	f000 f80e 	bl	8012d4e <SCSI_CheckAddressRange>
 8012d32:	4603      	mov	r3, r0
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	da02      	bge.n	8012d3e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8012d38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d3c:	e003      	b.n	8012d46 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	2200      	movs	r2, #0
 8012d42:	60da      	str	r2, [r3, #12]

  return 0;
 8012d44:	2300      	movs	r3, #0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3718      	adds	r7, #24
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}

08012d4e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b086      	sub	sp, #24
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	60f8      	str	r0, [r7, #12]
 8012d56:	607a      	str	r2, [r7, #4]
 8012d58:	603b      	str	r3, [r7, #0]
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	32b0      	adds	r2, #176	@ 0xb0
 8012d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d6c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d102      	bne.n	8012d7a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8012d74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d78:	e011      	b.n	8012d9e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	441a      	add	r2, r3
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d908      	bls.n	8012d9c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8012d8a:	7af9      	ldrb	r1, [r7, #11]
 8012d8c:	2321      	movs	r3, #33	@ 0x21
 8012d8e:	2205      	movs	r2, #5
 8012d90:	68f8      	ldr	r0, [r7, #12]
 8012d92:	f7ff fbb8 	bl	8012506 <SCSI_SenseCode>
    return -1;
 8012d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d9a:	e000      	b.n	8012d9e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8012d9c:	2300      	movs	r3, #0
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3718      	adds	r7, #24
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
	...

08012da8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012da8:	b590      	push	{r4, r7, lr}
 8012daa:	b085      	sub	sp, #20
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	460b      	mov	r3, r1
 8012db2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	32b0      	adds	r2, #176	@ 0xb0
 8012dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dc2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d102      	bne.n	8012dd0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8012dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012dce:	e06a      	b.n	8012ea6 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012dd6:	68fa      	ldr	r2, [r7, #12]
 8012dd8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8012ddc:	fb02 f303 	mul.w	r3, r2, r3
 8012de0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012de8:	bf28      	it	cs
 8012dea:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8012dee:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	33b0      	adds	r3, #176	@ 0xb0
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	4413      	add	r3, r2
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	691c      	ldr	r4, [r3, #16]
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	f103 0110 	add.w	r1, r3, #16
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012e14:	4618      	mov	r0, r3
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8012e1c:	b29b      	uxth	r3, r3
 8012e1e:	78f8      	ldrb	r0, [r7, #3]
 8012e20:	47a0      	blx	r4
 8012e22:	4603      	mov	r3, r0
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	da08      	bge.n	8012e3a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8012e28:	78f9      	ldrb	r1, [r7, #3]
 8012e2a:	2311      	movs	r3, #17
 8012e2c:	2204      	movs	r2, #4
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f7ff fb69 	bl	8012506 <SCSI_SenseCode>
    return -1;
 8012e34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012e38:	e035      	b.n	8012ea6 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8012e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8012eb0 <SCSI_ProcessRead+0x108>)
 8012e3c:	7819      	ldrb	r1, [r3, #0]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	f103 0210 	add.w	r2, r3, #16
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	f002 f8fc 	bl	8015044 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012e58:	4619      	mov	r1, r3
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e60:	441a      	add	r2, r3
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012e74:	4619      	mov	r1, r3
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e7c:	1ad2      	subs	r2, r2, r3
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	1ad2      	subs	r2, r2, r3
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d102      	bne.n	8012ea4 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	2203      	movs	r2, #3
 8012ea2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8012ea4:	2300      	movs	r3, #0
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3714      	adds	r7, #20
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd90      	pop	{r4, r7, pc}
 8012eae:	bf00      	nop
 8012eb0:	240000a2 	.word	0x240000a2

08012eb4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012eb4:	b590      	push	{r4, r7, lr}
 8012eb6:	b085      	sub	sp, #20
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	32b0      	adds	r2, #176	@ 0xb0
 8012eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ece:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d102      	bne.n	8012edc <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8012ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012eda:	e07a      	b.n	8012fd2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012ee2:	68fa      	ldr	r2, [r7, #12]
 8012ee4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8012ee8:	fb02 f303 	mul.w	r3, r2, r3
 8012eec:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ef4:	bf28      	it	cs
 8012ef6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8012efa:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	33b0      	adds	r3, #176	@ 0xb0
 8012f06:	009b      	lsls	r3, r3, #2
 8012f08:	4413      	add	r3, r2
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	695c      	ldr	r4, [r3, #20]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	f103 0110 	add.w	r1, r3, #16
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012f20:	4618      	mov	r0, r3
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	78f8      	ldrb	r0, [r7, #3]
 8012f2c:	47a0      	blx	r4
 8012f2e:	4603      	mov	r3, r0
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	da08      	bge.n	8012f46 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8012f34:	78f9      	ldrb	r1, [r7, #3]
 8012f36:	2303      	movs	r3, #3
 8012f38:	2204      	movs	r2, #4
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f7ff fae3 	bl	8012506 <SCSI_SenseCode>
    return -1;
 8012f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012f44:	e045      	b.n	8012fd2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012f52:	4619      	mov	r1, r3
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f5a:	441a      	add	r2, r3
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8012f6e:	4619      	mov	r1, r3
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f76:	1ad2      	subs	r2, r2, r3
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	1ad2      	subs	r2, r2, r3
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d104      	bne.n	8012fa2 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012f98:	2100      	movs	r1, #0
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f7fe fce8 	bl	8011970 <MSC_BOT_SendCSW>
 8012fa0:	e016      	b.n	8012fd0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8012fa8:	68fa      	ldr	r2, [r7, #12]
 8012faa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8012fae:	fb02 f303 	mul.w	r3, r2, r3
 8012fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012fb6:	bf28      	it	cs
 8012fb8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8012fbc:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012fbe:	4b07      	ldr	r3, [pc, #28]	@ (8012fdc <SCSI_ProcessWrite+0x128>)
 8012fc0:	7819      	ldrb	r1, [r3, #0]
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	f103 0210 	add.w	r2, r3, #16
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f002 f85b 	bl	8015086 <USBD_LL_PrepareReceive>
  }

  return 0;
 8012fd0:	2300      	movs	r3, #0
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3714      	adds	r7, #20
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd90      	pop	{r4, r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	240000a3 	.word	0x240000a3

08012fe0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8012fe0:	b480      	push	{r7}
 8012fe2:	b087      	sub	sp, #28
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	60f8      	str	r0, [r7, #12]
 8012fe8:	60b9      	str	r1, [r7, #8]
 8012fea:	4613      	mov	r3, r2
 8012fec:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8012fee:	88fb      	ldrh	r3, [r7, #6]
 8012ff0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d102      	bne.n	8012ffe <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8012ff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ffc:	e013      	b.n	8013026 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8012ffe:	8afa      	ldrh	r2, [r7, #22]
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8013004:	e00b      	b.n	801301e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8013006:	8afb      	ldrh	r3, [r7, #22]
 8013008:	3b01      	subs	r3, #1
 801300a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801300c:	8afb      	ldrh	r3, [r7, #22]
 801300e:	68ba      	ldr	r2, [r7, #8]
 8013010:	441a      	add	r2, r3
 8013012:	8afb      	ldrh	r3, [r7, #22]
 8013014:	7811      	ldrb	r1, [r2, #0]
 8013016:	68fa      	ldr	r2, [r7, #12]
 8013018:	4413      	add	r3, r2
 801301a:	460a      	mov	r2, r1
 801301c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801301e:	8afb      	ldrh	r3, [r7, #22]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d1f0      	bne.n	8013006 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8013024:	2300      	movs	r3, #0
}
 8013026:	4618      	mov	r0, r3
 8013028:	371c      	adds	r7, #28
 801302a:	46bd      	mov	sp, r7
 801302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013030:	4770      	bx	lr

08013032 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013032:	b580      	push	{r7, lr}
 8013034:	b086      	sub	sp, #24
 8013036:	af00      	add	r7, sp, #0
 8013038:	60f8      	str	r0, [r7, #12]
 801303a:	60b9      	str	r1, [r7, #8]
 801303c:	4613      	mov	r3, r2
 801303e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d101      	bne.n	801304a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013046:	2303      	movs	r3, #3
 8013048:	e01f      	b.n	801308a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	2200      	movs	r2, #0
 801304e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2200      	movs	r2, #0
 8013056:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	2200      	movs	r2, #0
 801305e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d003      	beq.n	8013070 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	68ba      	ldr	r2, [r7, #8]
 801306c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	2201      	movs	r2, #1
 8013074:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	79fa      	ldrb	r2, [r7, #7]
 801307c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801307e:	68f8      	ldr	r0, [r7, #12]
 8013080:	f001 fe88 	bl	8014d94 <USBD_LL_Init>
 8013084:	4603      	mov	r3, r0
 8013086:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013088:	7dfb      	ldrb	r3, [r7, #23]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3718      	adds	r7, #24
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}

08013092 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013092:	b580      	push	{r7, lr}
 8013094:	b084      	sub	sp, #16
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
 801309a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801309c:	2300      	movs	r3, #0
 801309e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d101      	bne.n	80130aa <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80130a6:	2303      	movs	r3, #3
 80130a8:	e025      	b.n	80130f6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	683a      	ldr	r2, [r7, #0]
 80130ae:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	32ae      	adds	r2, #174	@ 0xae
 80130bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d00f      	beq.n	80130e6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	32ae      	adds	r2, #174	@ 0xae
 80130d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130d6:	f107 020e 	add.w	r2, r7, #14
 80130da:	4610      	mov	r0, r2
 80130dc:	4798      	blx	r3
 80130de:	4602      	mov	r2, r0
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80130ec:	1c5a      	adds	r2, r3, #1
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80130f4:	2300      	movs	r3, #0
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3710      	adds	r7, #16
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}

080130fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80130fe:	b580      	push	{r7, lr}
 8013100:	b082      	sub	sp, #8
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013106:	6878      	ldr	r0, [r7, #4]
 8013108:	f001 fe94 	bl	8014e34 <USBD_LL_Start>
 801310c:	4603      	mov	r3, r0
}
 801310e:	4618      	mov	r0, r3
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}

08013116 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013116:	b480      	push	{r7}
 8013118:	b083      	sub	sp, #12
 801311a:	af00      	add	r7, sp, #0
 801311c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801311e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013120:	4618      	mov	r0, r3
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr

0801312c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b084      	sub	sp, #16
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	460b      	mov	r3, r1
 8013136:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013138:	2300      	movs	r3, #0
 801313a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013142:	2b00      	cmp	r3, #0
 8013144:	d009      	beq.n	801315a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	78fa      	ldrb	r2, [r7, #3]
 8013150:	4611      	mov	r1, r2
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	4798      	blx	r3
 8013156:	4603      	mov	r3, r0
 8013158:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801315a:	7bfb      	ldrb	r3, [r7, #15]
}
 801315c:	4618      	mov	r0, r3
 801315e:	3710      	adds	r7, #16
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b084      	sub	sp, #16
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
 801316c:	460b      	mov	r3, r1
 801316e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013170:	2300      	movs	r3, #0
 8013172:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	78fa      	ldrb	r2, [r7, #3]
 801317e:	4611      	mov	r1, r2
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	4798      	blx	r3
 8013184:	4603      	mov	r3, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	d001      	beq.n	801318e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801318a:	2303      	movs	r3, #3
 801318c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013190:	4618      	mov	r0, r3
 8013192:	3710      	adds	r7, #16
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}

08013198 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80131a8:	6839      	ldr	r1, [r7, #0]
 80131aa:	4618      	mov	r0, r3
 80131ac:	f001 f935 	bl	801441a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2201      	movs	r2, #1
 80131b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80131be:	461a      	mov	r2, r3
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80131cc:	f003 031f 	and.w	r3, r3, #31
 80131d0:	2b02      	cmp	r3, #2
 80131d2:	d01a      	beq.n	801320a <USBD_LL_SetupStage+0x72>
 80131d4:	2b02      	cmp	r3, #2
 80131d6:	d822      	bhi.n	801321e <USBD_LL_SetupStage+0x86>
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d002      	beq.n	80131e2 <USBD_LL_SetupStage+0x4a>
 80131dc:	2b01      	cmp	r3, #1
 80131de:	d00a      	beq.n	80131f6 <USBD_LL_SetupStage+0x5e>
 80131e0:	e01d      	b.n	801321e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80131e8:	4619      	mov	r1, r3
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f000 fb62 	bl	80138b4 <USBD_StdDevReq>
 80131f0:	4603      	mov	r3, r0
 80131f2:	73fb      	strb	r3, [r7, #15]
      break;
 80131f4:	e020      	b.n	8013238 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80131fc:	4619      	mov	r1, r3
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f000 fbca 	bl	8013998 <USBD_StdItfReq>
 8013204:	4603      	mov	r3, r0
 8013206:	73fb      	strb	r3, [r7, #15]
      break;
 8013208:	e016      	b.n	8013238 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013210:	4619      	mov	r1, r3
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f000 fc2c 	bl	8013a70 <USBD_StdEPReq>
 8013218:	4603      	mov	r3, r0
 801321a:	73fb      	strb	r3, [r7, #15]
      break;
 801321c:	e00c      	b.n	8013238 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013224:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013228:	b2db      	uxtb	r3, r3
 801322a:	4619      	mov	r1, r3
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f001 fe80 	bl	8014f32 <USBD_LL_StallEP>
 8013232:	4603      	mov	r3, r0
 8013234:	73fb      	strb	r3, [r7, #15]
      break;
 8013236:	bf00      	nop
  }

  return ret;
 8013238:	7bfb      	ldrb	r3, [r7, #15]
}
 801323a:	4618      	mov	r0, r3
 801323c:	3710      	adds	r7, #16
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}

08013242 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013242:	b580      	push	{r7, lr}
 8013244:	b086      	sub	sp, #24
 8013246:	af00      	add	r7, sp, #0
 8013248:	60f8      	str	r0, [r7, #12]
 801324a:	460b      	mov	r3, r1
 801324c:	607a      	str	r2, [r7, #4]
 801324e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013250:	2300      	movs	r3, #0
 8013252:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013254:	7afb      	ldrb	r3, [r7, #11]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d16e      	bne.n	8013338 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013260:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013268:	2b03      	cmp	r3, #3
 801326a:	f040 8098 	bne.w	801339e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	689a      	ldr	r2, [r3, #8]
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	68db      	ldr	r3, [r3, #12]
 8013276:	429a      	cmp	r2, r3
 8013278:	d913      	bls.n	80132a2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	689a      	ldr	r2, [r3, #8]
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	68db      	ldr	r3, [r3, #12]
 8013282:	1ad2      	subs	r2, r2, r3
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	68da      	ldr	r2, [r3, #12]
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	689b      	ldr	r3, [r3, #8]
 8013290:	4293      	cmp	r3, r2
 8013292:	bf28      	it	cs
 8013294:	4613      	movcs	r3, r2
 8013296:	461a      	mov	r2, r3
 8013298:	6879      	ldr	r1, [r7, #4]
 801329a:	68f8      	ldr	r0, [r7, #12]
 801329c:	f001 f9a0 	bl	80145e0 <USBD_CtlContinueRx>
 80132a0:	e07d      	b.n	801339e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80132a8:	f003 031f 	and.w	r3, r3, #31
 80132ac:	2b02      	cmp	r3, #2
 80132ae:	d014      	beq.n	80132da <USBD_LL_DataOutStage+0x98>
 80132b0:	2b02      	cmp	r3, #2
 80132b2:	d81d      	bhi.n	80132f0 <USBD_LL_DataOutStage+0xae>
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d002      	beq.n	80132be <USBD_LL_DataOutStage+0x7c>
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	d003      	beq.n	80132c4 <USBD_LL_DataOutStage+0x82>
 80132bc:	e018      	b.n	80132f0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80132be:	2300      	movs	r3, #0
 80132c0:	75bb      	strb	r3, [r7, #22]
            break;
 80132c2:	e018      	b.n	80132f6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80132ca:	b2db      	uxtb	r3, r3
 80132cc:	4619      	mov	r1, r3
 80132ce:	68f8      	ldr	r0, [r7, #12]
 80132d0:	f000 fa64 	bl	801379c <USBD_CoreFindIF>
 80132d4:	4603      	mov	r3, r0
 80132d6:	75bb      	strb	r3, [r7, #22]
            break;
 80132d8:	e00d      	b.n	80132f6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	4619      	mov	r1, r3
 80132e4:	68f8      	ldr	r0, [r7, #12]
 80132e6:	f000 fa66 	bl	80137b6 <USBD_CoreFindEP>
 80132ea:	4603      	mov	r3, r0
 80132ec:	75bb      	strb	r3, [r7, #22]
            break;
 80132ee:	e002      	b.n	80132f6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80132f0:	2300      	movs	r3, #0
 80132f2:	75bb      	strb	r3, [r7, #22]
            break;
 80132f4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80132f6:	7dbb      	ldrb	r3, [r7, #22]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d119      	bne.n	8013330 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013302:	b2db      	uxtb	r3, r3
 8013304:	2b03      	cmp	r3, #3
 8013306:	d113      	bne.n	8013330 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013308:	7dba      	ldrb	r2, [r7, #22]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	32ae      	adds	r2, #174	@ 0xae
 801330e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013312:	691b      	ldr	r3, [r3, #16]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d00b      	beq.n	8013330 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013318:	7dba      	ldrb	r2, [r7, #22]
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013320:	7dba      	ldrb	r2, [r7, #22]
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	32ae      	adds	r2, #174	@ 0xae
 8013326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801332a:	691b      	ldr	r3, [r3, #16]
 801332c:	68f8      	ldr	r0, [r7, #12]
 801332e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013330:	68f8      	ldr	r0, [r7, #12]
 8013332:	f001 f966 	bl	8014602 <USBD_CtlSendStatus>
 8013336:	e032      	b.n	801339e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013338:	7afb      	ldrb	r3, [r7, #11]
 801333a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801333e:	b2db      	uxtb	r3, r3
 8013340:	4619      	mov	r1, r3
 8013342:	68f8      	ldr	r0, [r7, #12]
 8013344:	f000 fa37 	bl	80137b6 <USBD_CoreFindEP>
 8013348:	4603      	mov	r3, r0
 801334a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801334c:	7dbb      	ldrb	r3, [r7, #22]
 801334e:	2bff      	cmp	r3, #255	@ 0xff
 8013350:	d025      	beq.n	801339e <USBD_LL_DataOutStage+0x15c>
 8013352:	7dbb      	ldrb	r3, [r7, #22]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d122      	bne.n	801339e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801335e:	b2db      	uxtb	r3, r3
 8013360:	2b03      	cmp	r3, #3
 8013362:	d117      	bne.n	8013394 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013364:	7dba      	ldrb	r2, [r7, #22]
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	32ae      	adds	r2, #174	@ 0xae
 801336a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801336e:	699b      	ldr	r3, [r3, #24]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d00f      	beq.n	8013394 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013374:	7dba      	ldrb	r2, [r7, #22]
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801337c:	7dba      	ldrb	r2, [r7, #22]
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	32ae      	adds	r2, #174	@ 0xae
 8013382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013386:	699b      	ldr	r3, [r3, #24]
 8013388:	7afa      	ldrb	r2, [r7, #11]
 801338a:	4611      	mov	r1, r2
 801338c:	68f8      	ldr	r0, [r7, #12]
 801338e:	4798      	blx	r3
 8013390:	4603      	mov	r3, r0
 8013392:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013394:	7dfb      	ldrb	r3, [r7, #23]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d001      	beq.n	801339e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801339a:	7dfb      	ldrb	r3, [r7, #23]
 801339c:	e000      	b.n	80133a0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801339e:	2300      	movs	r3, #0
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3718      	adds	r7, #24
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b086      	sub	sp, #24
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	460b      	mov	r3, r1
 80133b2:	607a      	str	r2, [r7, #4]
 80133b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80133b6:	7afb      	ldrb	r3, [r7, #11]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d16f      	bne.n	801349c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	3314      	adds	r3, #20
 80133c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80133c8:	2b02      	cmp	r3, #2
 80133ca:	d15a      	bne.n	8013482 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	689a      	ldr	r2, [r3, #8]
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	429a      	cmp	r2, r3
 80133d6:	d914      	bls.n	8013402 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80133d8:	693b      	ldr	r3, [r7, #16]
 80133da:	689a      	ldr	r2, [r3, #8]
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	1ad2      	subs	r2, r2, r3
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	689b      	ldr	r3, [r3, #8]
 80133ea:	461a      	mov	r2, r3
 80133ec:	6879      	ldr	r1, [r7, #4]
 80133ee:	68f8      	ldr	r0, [r7, #12]
 80133f0:	f001 f8e5 	bl	80145be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80133f4:	2300      	movs	r3, #0
 80133f6:	2200      	movs	r2, #0
 80133f8:	2100      	movs	r1, #0
 80133fa:	68f8      	ldr	r0, [r7, #12]
 80133fc:	f001 fe43 	bl	8015086 <USBD_LL_PrepareReceive>
 8013400:	e03f      	b.n	8013482 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	68da      	ldr	r2, [r3, #12]
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	689b      	ldr	r3, [r3, #8]
 801340a:	429a      	cmp	r2, r3
 801340c:	d11c      	bne.n	8013448 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	685a      	ldr	r2, [r3, #4]
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013416:	429a      	cmp	r2, r3
 8013418:	d316      	bcc.n	8013448 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	685a      	ldr	r2, [r3, #4]
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013424:	429a      	cmp	r2, r3
 8013426:	d20f      	bcs.n	8013448 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013428:	2200      	movs	r2, #0
 801342a:	2100      	movs	r1, #0
 801342c:	68f8      	ldr	r0, [r7, #12]
 801342e:	f001 f8c6 	bl	80145be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2200      	movs	r2, #0
 8013436:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801343a:	2300      	movs	r3, #0
 801343c:	2200      	movs	r2, #0
 801343e:	2100      	movs	r1, #0
 8013440:	68f8      	ldr	r0, [r7, #12]
 8013442:	f001 fe20 	bl	8015086 <USBD_LL_PrepareReceive>
 8013446:	e01c      	b.n	8013482 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801344e:	b2db      	uxtb	r3, r3
 8013450:	2b03      	cmp	r3, #3
 8013452:	d10f      	bne.n	8013474 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801345a:	68db      	ldr	r3, [r3, #12]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d009      	beq.n	8013474 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	2200      	movs	r2, #0
 8013464:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801346e:	68db      	ldr	r3, [r3, #12]
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013474:	2180      	movs	r1, #128	@ 0x80
 8013476:	68f8      	ldr	r0, [r7, #12]
 8013478:	f001 fd5b 	bl	8014f32 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801347c:	68f8      	ldr	r0, [r7, #12]
 801347e:	f001 f8d3 	bl	8014628 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d03a      	beq.n	8013502 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801348c:	68f8      	ldr	r0, [r7, #12]
 801348e:	f7ff fe42 	bl	8013116 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2200      	movs	r2, #0
 8013496:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801349a:	e032      	b.n	8013502 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801349c:	7afb      	ldrb	r3, [r7, #11]
 801349e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80134a2:	b2db      	uxtb	r3, r3
 80134a4:	4619      	mov	r1, r3
 80134a6:	68f8      	ldr	r0, [r7, #12]
 80134a8:	f000 f985 	bl	80137b6 <USBD_CoreFindEP>
 80134ac:	4603      	mov	r3, r0
 80134ae:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80134b0:	7dfb      	ldrb	r3, [r7, #23]
 80134b2:	2bff      	cmp	r3, #255	@ 0xff
 80134b4:	d025      	beq.n	8013502 <USBD_LL_DataInStage+0x15a>
 80134b6:	7dfb      	ldrb	r3, [r7, #23]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d122      	bne.n	8013502 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134c2:	b2db      	uxtb	r3, r3
 80134c4:	2b03      	cmp	r3, #3
 80134c6:	d11c      	bne.n	8013502 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80134c8:	7dfa      	ldrb	r2, [r7, #23]
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	32ae      	adds	r2, #174	@ 0xae
 80134ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134d2:	695b      	ldr	r3, [r3, #20]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d014      	beq.n	8013502 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80134d8:	7dfa      	ldrb	r2, [r7, #23]
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80134e0:	7dfa      	ldrb	r2, [r7, #23]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	32ae      	adds	r2, #174	@ 0xae
 80134e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134ea:	695b      	ldr	r3, [r3, #20]
 80134ec:	7afa      	ldrb	r2, [r7, #11]
 80134ee:	4611      	mov	r1, r2
 80134f0:	68f8      	ldr	r0, [r7, #12]
 80134f2:	4798      	blx	r3
 80134f4:	4603      	mov	r3, r0
 80134f6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80134f8:	7dbb      	ldrb	r3, [r7, #22]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d001      	beq.n	8013502 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80134fe:	7dbb      	ldrb	r3, [r7, #22]
 8013500:	e000      	b.n	8013504 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013502:	2300      	movs	r3, #0
}
 8013504:	4618      	mov	r0, r3
 8013506:	3718      	adds	r7, #24
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013514:	2300      	movs	r3, #0
 8013516:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2201      	movs	r2, #1
 801351c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2200      	movs	r2, #0
 8013524:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2200      	movs	r2, #0
 801352c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2200      	movs	r2, #0
 8013532:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2200      	movs	r2, #0
 801353a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013544:	2b00      	cmp	r3, #0
 8013546:	d014      	beq.n	8013572 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801354e:	685b      	ldr	r3, [r3, #4]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d00e      	beq.n	8013572 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	687a      	ldr	r2, [r7, #4]
 801355e:	6852      	ldr	r2, [r2, #4]
 8013560:	b2d2      	uxtb	r2, r2
 8013562:	4611      	mov	r1, r2
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	4798      	blx	r3
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	d001      	beq.n	8013572 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801356e:	2303      	movs	r3, #3
 8013570:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013572:	2340      	movs	r3, #64	@ 0x40
 8013574:	2200      	movs	r2, #0
 8013576:	2100      	movs	r1, #0
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f001 fc76 	bl	8014e6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2201      	movs	r2, #1
 8013582:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2240      	movs	r2, #64	@ 0x40
 801358a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801358e:	2340      	movs	r3, #64	@ 0x40
 8013590:	2200      	movs	r2, #0
 8013592:	2180      	movs	r1, #128	@ 0x80
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f001 fc68 	bl	8014e6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2201      	movs	r2, #1
 801359e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2240      	movs	r2, #64	@ 0x40
 80135a4:	621a      	str	r2, [r3, #32]

  return ret;
 80135a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	3710      	adds	r7, #16
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b083      	sub	sp, #12
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	460b      	mov	r3, r1
 80135ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	78fa      	ldrb	r2, [r7, #3]
 80135c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80135c2:	2300      	movs	r3, #0
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	370c      	adds	r7, #12
 80135c8:	46bd      	mov	sp, r7
 80135ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ce:	4770      	bx	lr

080135d0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80135de:	b2db      	uxtb	r3, r3
 80135e0:	2b04      	cmp	r3, #4
 80135e2:	d006      	beq.n	80135f2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80135ea:	b2da      	uxtb	r2, r3
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2204      	movs	r2, #4
 80135f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80135fa:	2300      	movs	r3, #0
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	370c      	adds	r7, #12
 8013600:	46bd      	mov	sp, r7
 8013602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013606:	4770      	bx	lr

08013608 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013616:	b2db      	uxtb	r3, r3
 8013618:	2b04      	cmp	r3, #4
 801361a:	d106      	bne.n	801362a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013622:	b2da      	uxtb	r2, r3
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801362a:	2300      	movs	r3, #0
}
 801362c:	4618      	mov	r0, r3
 801362e:	370c      	adds	r7, #12
 8013630:	46bd      	mov	sp, r7
 8013632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013636:	4770      	bx	lr

08013638 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b082      	sub	sp, #8
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013646:	b2db      	uxtb	r3, r3
 8013648:	2b03      	cmp	r3, #3
 801364a:	d110      	bne.n	801366e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013652:	2b00      	cmp	r3, #0
 8013654:	d00b      	beq.n	801366e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801365c:	69db      	ldr	r3, [r3, #28]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d005      	beq.n	801366e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013668:	69db      	ldr	r3, [r3, #28]
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801366e:	2300      	movs	r3, #0
}
 8013670:	4618      	mov	r0, r3
 8013672:	3708      	adds	r7, #8
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	460b      	mov	r3, r1
 8013682:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	32ae      	adds	r2, #174	@ 0xae
 801368e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d101      	bne.n	801369a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013696:	2303      	movs	r3, #3
 8013698:	e01c      	b.n	80136d4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	2b03      	cmp	r3, #3
 80136a4:	d115      	bne.n	80136d2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	32ae      	adds	r2, #174	@ 0xae
 80136b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136b4:	6a1b      	ldr	r3, [r3, #32]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d00b      	beq.n	80136d2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	32ae      	adds	r2, #174	@ 0xae
 80136c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136c8:	6a1b      	ldr	r3, [r3, #32]
 80136ca:	78fa      	ldrb	r2, [r7, #3]
 80136cc:	4611      	mov	r1, r2
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80136d2:	2300      	movs	r3, #0
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3708      	adds	r7, #8
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}

080136dc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b082      	sub	sp, #8
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	460b      	mov	r3, r1
 80136e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	32ae      	adds	r2, #174	@ 0xae
 80136f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d101      	bne.n	80136fe <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80136fa:	2303      	movs	r3, #3
 80136fc:	e01c      	b.n	8013738 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013704:	b2db      	uxtb	r3, r3
 8013706:	2b03      	cmp	r3, #3
 8013708:	d115      	bne.n	8013736 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	32ae      	adds	r2, #174	@ 0xae
 8013714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801371a:	2b00      	cmp	r3, #0
 801371c:	d00b      	beq.n	8013736 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	32ae      	adds	r2, #174	@ 0xae
 8013728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801372e:	78fa      	ldrb	r2, [r7, #3]
 8013730:	4611      	mov	r1, r2
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013736:	2300      	movs	r3, #0
}
 8013738:	4618      	mov	r0, r3
 801373a:	3708      	adds	r7, #8
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}

08013740 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013740:	b480      	push	{r7}
 8013742:	b083      	sub	sp, #12
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013748:	2300      	movs	r3, #0
}
 801374a:	4618      	mov	r0, r3
 801374c:	370c      	adds	r7, #12
 801374e:	46bd      	mov	sp, r7
 8013750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013754:	4770      	bx	lr

08013756 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013756:	b580      	push	{r7, lr}
 8013758:	b084      	sub	sp, #16
 801375a:	af00      	add	r7, sp, #0
 801375c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801375e:	2300      	movs	r3, #0
 8013760:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2201      	movs	r2, #1
 8013766:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013770:	2b00      	cmp	r3, #0
 8013772:	d00e      	beq.n	8013792 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	687a      	ldr	r2, [r7, #4]
 801377e:	6852      	ldr	r2, [r2, #4]
 8013780:	b2d2      	uxtb	r2, r2
 8013782:	4611      	mov	r1, r2
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	4798      	blx	r3
 8013788:	4603      	mov	r3, r0
 801378a:	2b00      	cmp	r3, #0
 801378c:	d001      	beq.n	8013792 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801378e:	2303      	movs	r3, #3
 8013790:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013792:	7bfb      	ldrb	r3, [r7, #15]
}
 8013794:	4618      	mov	r0, r3
 8013796:	3710      	adds	r7, #16
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801379c:	b480      	push	{r7}
 801379e:	b083      	sub	sp, #12
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	460b      	mov	r3, r1
 80137a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80137a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	370c      	adds	r7, #12
 80137ae:	46bd      	mov	sp, r7
 80137b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b4:	4770      	bx	lr

080137b6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80137b6:	b480      	push	{r7}
 80137b8:	b083      	sub	sp, #12
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
 80137be:	460b      	mov	r3, r1
 80137c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80137c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	370c      	adds	r7, #12
 80137c8:	46bd      	mov	sp, r7
 80137ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ce:	4770      	bx	lr

080137d0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b086      	sub	sp, #24
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
 80137d8:	460b      	mov	r3, r1
 80137da:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80137e4:	2300      	movs	r3, #0
 80137e6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	885b      	ldrh	r3, [r3, #2]
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	68fa      	ldr	r2, [r7, #12]
 80137f0:	7812      	ldrb	r2, [r2, #0]
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d91f      	bls.n	8013836 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80137fc:	e013      	b.n	8013826 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80137fe:	f107 030a 	add.w	r3, r7, #10
 8013802:	4619      	mov	r1, r3
 8013804:	6978      	ldr	r0, [r7, #20]
 8013806:	f000 f81b 	bl	8013840 <USBD_GetNextDesc>
 801380a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	785b      	ldrb	r3, [r3, #1]
 8013810:	2b05      	cmp	r3, #5
 8013812:	d108      	bne.n	8013826 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	789b      	ldrb	r3, [r3, #2]
 801381c:	78fa      	ldrb	r2, [r7, #3]
 801381e:	429a      	cmp	r2, r3
 8013820:	d008      	beq.n	8013834 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013822:	2300      	movs	r3, #0
 8013824:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	885b      	ldrh	r3, [r3, #2]
 801382a:	b29a      	uxth	r2, r3
 801382c:	897b      	ldrh	r3, [r7, #10]
 801382e:	429a      	cmp	r2, r3
 8013830:	d8e5      	bhi.n	80137fe <USBD_GetEpDesc+0x2e>
 8013832:	e000      	b.n	8013836 <USBD_GetEpDesc+0x66>
          break;
 8013834:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013836:	693b      	ldr	r3, [r7, #16]
}
 8013838:	4618      	mov	r0, r3
 801383a:	3718      	adds	r7, #24
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013840:	b480      	push	{r7}
 8013842:	b085      	sub	sp, #20
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
 8013848:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	881b      	ldrh	r3, [r3, #0]
 8013852:	68fa      	ldr	r2, [r7, #12]
 8013854:	7812      	ldrb	r2, [r2, #0]
 8013856:	4413      	add	r3, r2
 8013858:	b29a      	uxth	r2, r3
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	461a      	mov	r2, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	4413      	add	r3, r2
 8013868:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801386a:	68fb      	ldr	r3, [r7, #12]
}
 801386c:	4618      	mov	r0, r3
 801386e:	3714      	adds	r7, #20
 8013870:	46bd      	mov	sp, r7
 8013872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013876:	4770      	bx	lr

08013878 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013878:	b480      	push	{r7}
 801387a:	b087      	sub	sp, #28
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	781b      	ldrb	r3, [r3, #0]
 8013888:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	3301      	adds	r3, #1
 801388e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013896:	8a3b      	ldrh	r3, [r7, #16]
 8013898:	021b      	lsls	r3, r3, #8
 801389a:	b21a      	sxth	r2, r3
 801389c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80138a0:	4313      	orrs	r3, r2
 80138a2:	b21b      	sxth	r3, r3
 80138a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80138a6:	89fb      	ldrh	r3, [r7, #14]
}
 80138a8:	4618      	mov	r0, r3
 80138aa:	371c      	adds	r7, #28
 80138ac:	46bd      	mov	sp, r7
 80138ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b2:	4770      	bx	lr

080138b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
 80138bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80138be:	2300      	movs	r3, #0
 80138c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80138ca:	2b40      	cmp	r3, #64	@ 0x40
 80138cc:	d005      	beq.n	80138da <USBD_StdDevReq+0x26>
 80138ce:	2b40      	cmp	r3, #64	@ 0x40
 80138d0:	d857      	bhi.n	8013982 <USBD_StdDevReq+0xce>
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d00f      	beq.n	80138f6 <USBD_StdDevReq+0x42>
 80138d6:	2b20      	cmp	r3, #32
 80138d8:	d153      	bne.n	8013982 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	32ae      	adds	r2, #174	@ 0xae
 80138e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138e8:	689b      	ldr	r3, [r3, #8]
 80138ea:	6839      	ldr	r1, [r7, #0]
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	4798      	blx	r3
 80138f0:	4603      	mov	r3, r0
 80138f2:	73fb      	strb	r3, [r7, #15]
      break;
 80138f4:	e04a      	b.n	801398c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	785b      	ldrb	r3, [r3, #1]
 80138fa:	2b09      	cmp	r3, #9
 80138fc:	d83b      	bhi.n	8013976 <USBD_StdDevReq+0xc2>
 80138fe:	a201      	add	r2, pc, #4	@ (adr r2, 8013904 <USBD_StdDevReq+0x50>)
 8013900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013904:	08013959 	.word	0x08013959
 8013908:	0801396d 	.word	0x0801396d
 801390c:	08013977 	.word	0x08013977
 8013910:	08013963 	.word	0x08013963
 8013914:	08013977 	.word	0x08013977
 8013918:	08013937 	.word	0x08013937
 801391c:	0801392d 	.word	0x0801392d
 8013920:	08013977 	.word	0x08013977
 8013924:	0801394f 	.word	0x0801394f
 8013928:	08013941 	.word	0x08013941
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801392c:	6839      	ldr	r1, [r7, #0]
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f000 fa3c 	bl	8013dac <USBD_GetDescriptor>
          break;
 8013934:	e024      	b.n	8013980 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013936:	6839      	ldr	r1, [r7, #0]
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f000 fbcb 	bl	80140d4 <USBD_SetAddress>
          break;
 801393e:	e01f      	b.n	8013980 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013940:	6839      	ldr	r1, [r7, #0]
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f000 fc0a 	bl	801415c <USBD_SetConfig>
 8013948:	4603      	mov	r3, r0
 801394a:	73fb      	strb	r3, [r7, #15]
          break;
 801394c:	e018      	b.n	8013980 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801394e:	6839      	ldr	r1, [r7, #0]
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f000 fcad 	bl	80142b0 <USBD_GetConfig>
          break;
 8013956:	e013      	b.n	8013980 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013958:	6839      	ldr	r1, [r7, #0]
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f000 fcde 	bl	801431c <USBD_GetStatus>
          break;
 8013960:	e00e      	b.n	8013980 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013962:	6839      	ldr	r1, [r7, #0]
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f000 fd0d 	bl	8014384 <USBD_SetFeature>
          break;
 801396a:	e009      	b.n	8013980 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801396c:	6839      	ldr	r1, [r7, #0]
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f000 fd31 	bl	80143d6 <USBD_ClrFeature>
          break;
 8013974:	e004      	b.n	8013980 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013976:	6839      	ldr	r1, [r7, #0]
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f000 fd88 	bl	801448e <USBD_CtlError>
          break;
 801397e:	bf00      	nop
      }
      break;
 8013980:	e004      	b.n	801398c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013982:	6839      	ldr	r1, [r7, #0]
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f000 fd82 	bl	801448e <USBD_CtlError>
      break;
 801398a:	bf00      	nop
  }

  return ret;
 801398c:	7bfb      	ldrb	r3, [r7, #15]
}
 801398e:	4618      	mov	r0, r3
 8013990:	3710      	adds	r7, #16
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop

08013998 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b084      	sub	sp, #16
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80139a2:	2300      	movs	r3, #0
 80139a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	781b      	ldrb	r3, [r3, #0]
 80139aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80139ae:	2b40      	cmp	r3, #64	@ 0x40
 80139b0:	d005      	beq.n	80139be <USBD_StdItfReq+0x26>
 80139b2:	2b40      	cmp	r3, #64	@ 0x40
 80139b4:	d852      	bhi.n	8013a5c <USBD_StdItfReq+0xc4>
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d001      	beq.n	80139be <USBD_StdItfReq+0x26>
 80139ba:	2b20      	cmp	r3, #32
 80139bc:	d14e      	bne.n	8013a5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80139c4:	b2db      	uxtb	r3, r3
 80139c6:	3b01      	subs	r3, #1
 80139c8:	2b02      	cmp	r3, #2
 80139ca:	d840      	bhi.n	8013a4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	889b      	ldrh	r3, [r3, #4]
 80139d0:	b2db      	uxtb	r3, r3
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d836      	bhi.n	8013a44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	889b      	ldrh	r3, [r3, #4]
 80139da:	b2db      	uxtb	r3, r3
 80139dc:	4619      	mov	r1, r3
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f7ff fedc 	bl	801379c <USBD_CoreFindIF>
 80139e4:	4603      	mov	r3, r0
 80139e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80139e8:	7bbb      	ldrb	r3, [r7, #14]
 80139ea:	2bff      	cmp	r3, #255	@ 0xff
 80139ec:	d01d      	beq.n	8013a2a <USBD_StdItfReq+0x92>
 80139ee:	7bbb      	ldrb	r3, [r7, #14]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d11a      	bne.n	8013a2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80139f4:	7bba      	ldrb	r2, [r7, #14]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	32ae      	adds	r2, #174	@ 0xae
 80139fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139fe:	689b      	ldr	r3, [r3, #8]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d00f      	beq.n	8013a24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013a04:	7bba      	ldrb	r2, [r7, #14]
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013a0c:	7bba      	ldrb	r2, [r7, #14]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	32ae      	adds	r2, #174	@ 0xae
 8013a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a16:	689b      	ldr	r3, [r3, #8]
 8013a18:	6839      	ldr	r1, [r7, #0]
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	4798      	blx	r3
 8013a1e:	4603      	mov	r3, r0
 8013a20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013a22:	e004      	b.n	8013a2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013a24:	2303      	movs	r3, #3
 8013a26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013a28:	e001      	b.n	8013a2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013a2a:	2303      	movs	r3, #3
 8013a2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	88db      	ldrh	r3, [r3, #6]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d110      	bne.n	8013a58 <USBD_StdItfReq+0xc0>
 8013a36:	7bfb      	ldrb	r3, [r7, #15]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d10d      	bne.n	8013a58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f000 fde0 	bl	8014602 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013a42:	e009      	b.n	8013a58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013a44:	6839      	ldr	r1, [r7, #0]
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f000 fd21 	bl	801448e <USBD_CtlError>
          break;
 8013a4c:	e004      	b.n	8013a58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013a4e:	6839      	ldr	r1, [r7, #0]
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f000 fd1c 	bl	801448e <USBD_CtlError>
          break;
 8013a56:	e000      	b.n	8013a5a <USBD_StdItfReq+0xc2>
          break;
 8013a58:	bf00      	nop
      }
      break;
 8013a5a:	e004      	b.n	8013a66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013a5c:	6839      	ldr	r1, [r7, #0]
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 fd15 	bl	801448e <USBD_CtlError>
      break;
 8013a64:	bf00      	nop
  }

  return ret;
 8013a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3710      	adds	r7, #16
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}

08013a70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b084      	sub	sp, #16
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
 8013a78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	889b      	ldrh	r3, [r3, #4]
 8013a82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013a8c:	2b40      	cmp	r3, #64	@ 0x40
 8013a8e:	d007      	beq.n	8013aa0 <USBD_StdEPReq+0x30>
 8013a90:	2b40      	cmp	r3, #64	@ 0x40
 8013a92:	f200 817f 	bhi.w	8013d94 <USBD_StdEPReq+0x324>
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d02a      	beq.n	8013af0 <USBD_StdEPReq+0x80>
 8013a9a:	2b20      	cmp	r3, #32
 8013a9c:	f040 817a 	bne.w	8013d94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013aa0:	7bbb      	ldrb	r3, [r7, #14]
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f7ff fe86 	bl	80137b6 <USBD_CoreFindEP>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013aae:	7b7b      	ldrb	r3, [r7, #13]
 8013ab0:	2bff      	cmp	r3, #255	@ 0xff
 8013ab2:	f000 8174 	beq.w	8013d9e <USBD_StdEPReq+0x32e>
 8013ab6:	7b7b      	ldrb	r3, [r7, #13]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	f040 8170 	bne.w	8013d9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013abe:	7b7a      	ldrb	r2, [r7, #13]
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013ac6:	7b7a      	ldrb	r2, [r7, #13]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	32ae      	adds	r2, #174	@ 0xae
 8013acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ad0:	689b      	ldr	r3, [r3, #8]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	f000 8163 	beq.w	8013d9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013ad8:	7b7a      	ldrb	r2, [r7, #13]
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	32ae      	adds	r2, #174	@ 0xae
 8013ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ae2:	689b      	ldr	r3, [r3, #8]
 8013ae4:	6839      	ldr	r1, [r7, #0]
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	4798      	blx	r3
 8013aea:	4603      	mov	r3, r0
 8013aec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013aee:	e156      	b.n	8013d9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	785b      	ldrb	r3, [r3, #1]
 8013af4:	2b03      	cmp	r3, #3
 8013af6:	d008      	beq.n	8013b0a <USBD_StdEPReq+0x9a>
 8013af8:	2b03      	cmp	r3, #3
 8013afa:	f300 8145 	bgt.w	8013d88 <USBD_StdEPReq+0x318>
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	f000 809b 	beq.w	8013c3a <USBD_StdEPReq+0x1ca>
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d03c      	beq.n	8013b82 <USBD_StdEPReq+0x112>
 8013b08:	e13e      	b.n	8013d88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	2b02      	cmp	r3, #2
 8013b14:	d002      	beq.n	8013b1c <USBD_StdEPReq+0xac>
 8013b16:	2b03      	cmp	r3, #3
 8013b18:	d016      	beq.n	8013b48 <USBD_StdEPReq+0xd8>
 8013b1a:	e02c      	b.n	8013b76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013b1c:	7bbb      	ldrb	r3, [r7, #14]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d00d      	beq.n	8013b3e <USBD_StdEPReq+0xce>
 8013b22:	7bbb      	ldrb	r3, [r7, #14]
 8013b24:	2b80      	cmp	r3, #128	@ 0x80
 8013b26:	d00a      	beq.n	8013b3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b28:	7bbb      	ldrb	r3, [r7, #14]
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f001 fa00 	bl	8014f32 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013b32:	2180      	movs	r1, #128	@ 0x80
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f001 f9fc 	bl	8014f32 <USBD_LL_StallEP>
 8013b3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013b3c:	e020      	b.n	8013b80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013b3e:	6839      	ldr	r1, [r7, #0]
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f000 fca4 	bl	801448e <USBD_CtlError>
              break;
 8013b46:	e01b      	b.n	8013b80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	885b      	ldrh	r3, [r3, #2]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d10e      	bne.n	8013b6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013b50:	7bbb      	ldrb	r3, [r7, #14]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d00b      	beq.n	8013b6e <USBD_StdEPReq+0xfe>
 8013b56:	7bbb      	ldrb	r3, [r7, #14]
 8013b58:	2b80      	cmp	r3, #128	@ 0x80
 8013b5a:	d008      	beq.n	8013b6e <USBD_StdEPReq+0xfe>
 8013b5c:	683b      	ldr	r3, [r7, #0]
 8013b5e:	88db      	ldrh	r3, [r3, #6]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d104      	bne.n	8013b6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b64:	7bbb      	ldrb	r3, [r7, #14]
 8013b66:	4619      	mov	r1, r3
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f001 f9e2 	bl	8014f32 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 fd47 	bl	8014602 <USBD_CtlSendStatus>

              break;
 8013b74:	e004      	b.n	8013b80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013b76:	6839      	ldr	r1, [r7, #0]
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f000 fc88 	bl	801448e <USBD_CtlError>
              break;
 8013b7e:	bf00      	nop
          }
          break;
 8013b80:	e107      	b.n	8013d92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	2b02      	cmp	r3, #2
 8013b8c:	d002      	beq.n	8013b94 <USBD_StdEPReq+0x124>
 8013b8e:	2b03      	cmp	r3, #3
 8013b90:	d016      	beq.n	8013bc0 <USBD_StdEPReq+0x150>
 8013b92:	e04b      	b.n	8013c2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013b94:	7bbb      	ldrb	r3, [r7, #14]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d00d      	beq.n	8013bb6 <USBD_StdEPReq+0x146>
 8013b9a:	7bbb      	ldrb	r3, [r7, #14]
 8013b9c:	2b80      	cmp	r3, #128	@ 0x80
 8013b9e:	d00a      	beq.n	8013bb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013ba0:	7bbb      	ldrb	r3, [r7, #14]
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f001 f9c4 	bl	8014f32 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013baa:	2180      	movs	r1, #128	@ 0x80
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f001 f9c0 	bl	8014f32 <USBD_LL_StallEP>
 8013bb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013bb4:	e040      	b.n	8013c38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013bb6:	6839      	ldr	r1, [r7, #0]
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f000 fc68 	bl	801448e <USBD_CtlError>
              break;
 8013bbe:	e03b      	b.n	8013c38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	885b      	ldrh	r3, [r3, #2]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d136      	bne.n	8013c36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013bc8:	7bbb      	ldrb	r3, [r7, #14]
 8013bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d004      	beq.n	8013bdc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013bd2:	7bbb      	ldrb	r3, [r7, #14]
 8013bd4:	4619      	mov	r1, r3
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	f001 f9ca 	bl	8014f70 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f000 fd10 	bl	8014602 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013be2:	7bbb      	ldrb	r3, [r7, #14]
 8013be4:	4619      	mov	r1, r3
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f7ff fde5 	bl	80137b6 <USBD_CoreFindEP>
 8013bec:	4603      	mov	r3, r0
 8013bee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013bf0:	7b7b      	ldrb	r3, [r7, #13]
 8013bf2:	2bff      	cmp	r3, #255	@ 0xff
 8013bf4:	d01f      	beq.n	8013c36 <USBD_StdEPReq+0x1c6>
 8013bf6:	7b7b      	ldrb	r3, [r7, #13]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d11c      	bne.n	8013c36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013bfc:	7b7a      	ldrb	r2, [r7, #13]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013c04:	7b7a      	ldrb	r2, [r7, #13]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	32ae      	adds	r2, #174	@ 0xae
 8013c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c0e:	689b      	ldr	r3, [r3, #8]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d010      	beq.n	8013c36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013c14:	7b7a      	ldrb	r2, [r7, #13]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	32ae      	adds	r2, #174	@ 0xae
 8013c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c1e:	689b      	ldr	r3, [r3, #8]
 8013c20:	6839      	ldr	r1, [r7, #0]
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	4798      	blx	r3
 8013c26:	4603      	mov	r3, r0
 8013c28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013c2a:	e004      	b.n	8013c36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013c2c:	6839      	ldr	r1, [r7, #0]
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	f000 fc2d 	bl	801448e <USBD_CtlError>
              break;
 8013c34:	e000      	b.n	8013c38 <USBD_StdEPReq+0x1c8>
              break;
 8013c36:	bf00      	nop
          }
          break;
 8013c38:	e0ab      	b.n	8013d92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c40:	b2db      	uxtb	r3, r3
 8013c42:	2b02      	cmp	r3, #2
 8013c44:	d002      	beq.n	8013c4c <USBD_StdEPReq+0x1dc>
 8013c46:	2b03      	cmp	r3, #3
 8013c48:	d032      	beq.n	8013cb0 <USBD_StdEPReq+0x240>
 8013c4a:	e097      	b.n	8013d7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013c4c:	7bbb      	ldrb	r3, [r7, #14]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d007      	beq.n	8013c62 <USBD_StdEPReq+0x1f2>
 8013c52:	7bbb      	ldrb	r3, [r7, #14]
 8013c54:	2b80      	cmp	r3, #128	@ 0x80
 8013c56:	d004      	beq.n	8013c62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013c58:	6839      	ldr	r1, [r7, #0]
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f000 fc17 	bl	801448e <USBD_CtlError>
                break;
 8013c60:	e091      	b.n	8013d86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	da0b      	bge.n	8013c82 <USBD_StdEPReq+0x212>
 8013c6a:	7bbb      	ldrb	r3, [r7, #14]
 8013c6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013c70:	4613      	mov	r3, r2
 8013c72:	009b      	lsls	r3, r3, #2
 8013c74:	4413      	add	r3, r2
 8013c76:	009b      	lsls	r3, r3, #2
 8013c78:	3310      	adds	r3, #16
 8013c7a:	687a      	ldr	r2, [r7, #4]
 8013c7c:	4413      	add	r3, r2
 8013c7e:	3304      	adds	r3, #4
 8013c80:	e00b      	b.n	8013c9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013c82:	7bbb      	ldrb	r3, [r7, #14]
 8013c84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c88:	4613      	mov	r3, r2
 8013c8a:	009b      	lsls	r3, r3, #2
 8013c8c:	4413      	add	r3, r2
 8013c8e:	009b      	lsls	r3, r3, #2
 8013c90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013c94:	687a      	ldr	r2, [r7, #4]
 8013c96:	4413      	add	r3, r2
 8013c98:	3304      	adds	r3, #4
 8013c9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	2202      	movs	r2, #2
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f000 fc6d 	bl	8014588 <USBD_CtlSendData>
              break;
 8013cae:	e06a      	b.n	8013d86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	da11      	bge.n	8013cdc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013cb8:	7bbb      	ldrb	r3, [r7, #14]
 8013cba:	f003 020f 	and.w	r2, r3, #15
 8013cbe:	6879      	ldr	r1, [r7, #4]
 8013cc0:	4613      	mov	r3, r2
 8013cc2:	009b      	lsls	r3, r3, #2
 8013cc4:	4413      	add	r3, r2
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	440b      	add	r3, r1
 8013cca:	3324      	adds	r3, #36	@ 0x24
 8013ccc:	881b      	ldrh	r3, [r3, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d117      	bne.n	8013d02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013cd2:	6839      	ldr	r1, [r7, #0]
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f000 fbda 	bl	801448e <USBD_CtlError>
                  break;
 8013cda:	e054      	b.n	8013d86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013cdc:	7bbb      	ldrb	r3, [r7, #14]
 8013cde:	f003 020f 	and.w	r2, r3, #15
 8013ce2:	6879      	ldr	r1, [r7, #4]
 8013ce4:	4613      	mov	r3, r2
 8013ce6:	009b      	lsls	r3, r3, #2
 8013ce8:	4413      	add	r3, r2
 8013cea:	009b      	lsls	r3, r3, #2
 8013cec:	440b      	add	r3, r1
 8013cee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013cf2:	881b      	ldrh	r3, [r3, #0]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d104      	bne.n	8013d02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013cf8:	6839      	ldr	r1, [r7, #0]
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f000 fbc7 	bl	801448e <USBD_CtlError>
                  break;
 8013d00:	e041      	b.n	8013d86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013d02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	da0b      	bge.n	8013d22 <USBD_StdEPReq+0x2b2>
 8013d0a:	7bbb      	ldrb	r3, [r7, #14]
 8013d0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013d10:	4613      	mov	r3, r2
 8013d12:	009b      	lsls	r3, r3, #2
 8013d14:	4413      	add	r3, r2
 8013d16:	009b      	lsls	r3, r3, #2
 8013d18:	3310      	adds	r3, #16
 8013d1a:	687a      	ldr	r2, [r7, #4]
 8013d1c:	4413      	add	r3, r2
 8013d1e:	3304      	adds	r3, #4
 8013d20:	e00b      	b.n	8013d3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013d22:	7bbb      	ldrb	r3, [r7, #14]
 8013d24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013d28:	4613      	mov	r3, r2
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	4413      	add	r3, r2
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013d34:	687a      	ldr	r2, [r7, #4]
 8013d36:	4413      	add	r3, r2
 8013d38:	3304      	adds	r3, #4
 8013d3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013d3c:	7bbb      	ldrb	r3, [r7, #14]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d002      	beq.n	8013d48 <USBD_StdEPReq+0x2d8>
 8013d42:	7bbb      	ldrb	r3, [r7, #14]
 8013d44:	2b80      	cmp	r3, #128	@ 0x80
 8013d46:	d103      	bne.n	8013d50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	601a      	str	r2, [r3, #0]
 8013d4e:	e00e      	b.n	8013d6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013d50:	7bbb      	ldrb	r3, [r7, #14]
 8013d52:	4619      	mov	r1, r3
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f001 f92a 	bl	8014fae <USBD_LL_IsStallEP>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d003      	beq.n	8013d68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	2201      	movs	r2, #1
 8013d64:	601a      	str	r2, [r3, #0]
 8013d66:	e002      	b.n	8013d6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	2202      	movs	r2, #2
 8013d72:	4619      	mov	r1, r3
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f000 fc07 	bl	8014588 <USBD_CtlSendData>
              break;
 8013d7a:	e004      	b.n	8013d86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013d7c:	6839      	ldr	r1, [r7, #0]
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f000 fb85 	bl	801448e <USBD_CtlError>
              break;
 8013d84:	bf00      	nop
          }
          break;
 8013d86:	e004      	b.n	8013d92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013d88:	6839      	ldr	r1, [r7, #0]
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	f000 fb7f 	bl	801448e <USBD_CtlError>
          break;
 8013d90:	bf00      	nop
      }
      break;
 8013d92:	e005      	b.n	8013da0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013d94:	6839      	ldr	r1, [r7, #0]
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f000 fb79 	bl	801448e <USBD_CtlError>
      break;
 8013d9c:	e000      	b.n	8013da0 <USBD_StdEPReq+0x330>
      break;
 8013d9e:	bf00      	nop
  }

  return ret;
 8013da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
	...

08013dac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013db6:	2300      	movs	r3, #0
 8013db8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	885b      	ldrh	r3, [r3, #2]
 8013dc6:	0a1b      	lsrs	r3, r3, #8
 8013dc8:	b29b      	uxth	r3, r3
 8013dca:	3b01      	subs	r3, #1
 8013dcc:	2b0e      	cmp	r3, #14
 8013dce:	f200 8152 	bhi.w	8014076 <USBD_GetDescriptor+0x2ca>
 8013dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8013dd8 <USBD_GetDescriptor+0x2c>)
 8013dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dd8:	08013e49 	.word	0x08013e49
 8013ddc:	08013e61 	.word	0x08013e61
 8013de0:	08013ea1 	.word	0x08013ea1
 8013de4:	08014077 	.word	0x08014077
 8013de8:	08014077 	.word	0x08014077
 8013dec:	08014017 	.word	0x08014017
 8013df0:	08014043 	.word	0x08014043
 8013df4:	08014077 	.word	0x08014077
 8013df8:	08014077 	.word	0x08014077
 8013dfc:	08014077 	.word	0x08014077
 8013e00:	08014077 	.word	0x08014077
 8013e04:	08014077 	.word	0x08014077
 8013e08:	08014077 	.word	0x08014077
 8013e0c:	08014077 	.word	0x08014077
 8013e10:	08013e15 	.word	0x08013e15
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e1a:	69db      	ldr	r3, [r3, #28]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d00b      	beq.n	8013e38 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e26:	69db      	ldr	r3, [r3, #28]
 8013e28:	687a      	ldr	r2, [r7, #4]
 8013e2a:	7c12      	ldrb	r2, [r2, #16]
 8013e2c:	f107 0108 	add.w	r1, r7, #8
 8013e30:	4610      	mov	r0, r2
 8013e32:	4798      	blx	r3
 8013e34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013e36:	e126      	b.n	8014086 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013e38:	6839      	ldr	r1, [r7, #0]
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 fb27 	bl	801448e <USBD_CtlError>
        err++;
 8013e40:	7afb      	ldrb	r3, [r7, #11]
 8013e42:	3301      	adds	r3, #1
 8013e44:	72fb      	strb	r3, [r7, #11]
      break;
 8013e46:	e11e      	b.n	8014086 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	687a      	ldr	r2, [r7, #4]
 8013e52:	7c12      	ldrb	r2, [r2, #16]
 8013e54:	f107 0108 	add.w	r1, r7, #8
 8013e58:	4610      	mov	r0, r2
 8013e5a:	4798      	blx	r3
 8013e5c:	60f8      	str	r0, [r7, #12]
      break;
 8013e5e:	e112      	b.n	8014086 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	7c1b      	ldrb	r3, [r3, #16]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d10d      	bne.n	8013e84 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e70:	f107 0208 	add.w	r2, r7, #8
 8013e74:	4610      	mov	r0, r2
 8013e76:	4798      	blx	r3
 8013e78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	2202      	movs	r2, #2
 8013e80:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013e82:	e100      	b.n	8014086 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e8c:	f107 0208 	add.w	r2, r7, #8
 8013e90:	4610      	mov	r0, r2
 8013e92:	4798      	blx	r3
 8013e94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	3301      	adds	r3, #1
 8013e9a:	2202      	movs	r2, #2
 8013e9c:	701a      	strb	r2, [r3, #0]
      break;
 8013e9e:	e0f2      	b.n	8014086 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	885b      	ldrh	r3, [r3, #2]
 8013ea4:	b2db      	uxtb	r3, r3
 8013ea6:	2b05      	cmp	r3, #5
 8013ea8:	f200 80ac 	bhi.w	8014004 <USBD_GetDescriptor+0x258>
 8013eac:	a201      	add	r2, pc, #4	@ (adr r2, 8013eb4 <USBD_GetDescriptor+0x108>)
 8013eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013eb2:	bf00      	nop
 8013eb4:	08013ecd 	.word	0x08013ecd
 8013eb8:	08013f01 	.word	0x08013f01
 8013ebc:	08013f35 	.word	0x08013f35
 8013ec0:	08013f69 	.word	0x08013f69
 8013ec4:	08013f9d 	.word	0x08013f9d
 8013ec8:	08013fd1 	.word	0x08013fd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ed2:	685b      	ldr	r3, [r3, #4]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d00b      	beq.n	8013ef0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ede:	685b      	ldr	r3, [r3, #4]
 8013ee0:	687a      	ldr	r2, [r7, #4]
 8013ee2:	7c12      	ldrb	r2, [r2, #16]
 8013ee4:	f107 0108 	add.w	r1, r7, #8
 8013ee8:	4610      	mov	r0, r2
 8013eea:	4798      	blx	r3
 8013eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013eee:	e091      	b.n	8014014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ef0:	6839      	ldr	r1, [r7, #0]
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f000 facb 	bl	801448e <USBD_CtlError>
            err++;
 8013ef8:	7afb      	ldrb	r3, [r7, #11]
 8013efa:	3301      	adds	r3, #1
 8013efc:	72fb      	strb	r3, [r7, #11]
          break;
 8013efe:	e089      	b.n	8014014 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f06:	689b      	ldr	r3, [r3, #8]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d00b      	beq.n	8013f24 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f12:	689b      	ldr	r3, [r3, #8]
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	7c12      	ldrb	r2, [r2, #16]
 8013f18:	f107 0108 	add.w	r1, r7, #8
 8013f1c:	4610      	mov	r0, r2
 8013f1e:	4798      	blx	r3
 8013f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f22:	e077      	b.n	8014014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f24:	6839      	ldr	r1, [r7, #0]
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f000 fab1 	bl	801448e <USBD_CtlError>
            err++;
 8013f2c:	7afb      	ldrb	r3, [r7, #11]
 8013f2e:	3301      	adds	r3, #1
 8013f30:	72fb      	strb	r3, [r7, #11]
          break;
 8013f32:	e06f      	b.n	8014014 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d00b      	beq.n	8013f58 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f46:	68db      	ldr	r3, [r3, #12]
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	7c12      	ldrb	r2, [r2, #16]
 8013f4c:	f107 0108 	add.w	r1, r7, #8
 8013f50:	4610      	mov	r0, r2
 8013f52:	4798      	blx	r3
 8013f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f56:	e05d      	b.n	8014014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f58:	6839      	ldr	r1, [r7, #0]
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f000 fa97 	bl	801448e <USBD_CtlError>
            err++;
 8013f60:	7afb      	ldrb	r3, [r7, #11]
 8013f62:	3301      	adds	r3, #1
 8013f64:	72fb      	strb	r3, [r7, #11]
          break;
 8013f66:	e055      	b.n	8014014 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f6e:	691b      	ldr	r3, [r3, #16]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d00b      	beq.n	8013f8c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f7a:	691b      	ldr	r3, [r3, #16]
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	7c12      	ldrb	r2, [r2, #16]
 8013f80:	f107 0108 	add.w	r1, r7, #8
 8013f84:	4610      	mov	r0, r2
 8013f86:	4798      	blx	r3
 8013f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f8a:	e043      	b.n	8014014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f8c:	6839      	ldr	r1, [r7, #0]
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f000 fa7d 	bl	801448e <USBD_CtlError>
            err++;
 8013f94:	7afb      	ldrb	r3, [r7, #11]
 8013f96:	3301      	adds	r3, #1
 8013f98:	72fb      	strb	r3, [r7, #11]
          break;
 8013f9a:	e03b      	b.n	8014014 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013fa2:	695b      	ldr	r3, [r3, #20]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d00b      	beq.n	8013fc0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013fae:	695b      	ldr	r3, [r3, #20]
 8013fb0:	687a      	ldr	r2, [r7, #4]
 8013fb2:	7c12      	ldrb	r2, [r2, #16]
 8013fb4:	f107 0108 	add.w	r1, r7, #8
 8013fb8:	4610      	mov	r0, r2
 8013fba:	4798      	blx	r3
 8013fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013fbe:	e029      	b.n	8014014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013fc0:	6839      	ldr	r1, [r7, #0]
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f000 fa63 	bl	801448e <USBD_CtlError>
            err++;
 8013fc8:	7afb      	ldrb	r3, [r7, #11]
 8013fca:	3301      	adds	r3, #1
 8013fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8013fce:	e021      	b.n	8014014 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013fd6:	699b      	ldr	r3, [r3, #24]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d00b      	beq.n	8013ff4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013fe2:	699b      	ldr	r3, [r3, #24]
 8013fe4:	687a      	ldr	r2, [r7, #4]
 8013fe6:	7c12      	ldrb	r2, [r2, #16]
 8013fe8:	f107 0108 	add.w	r1, r7, #8
 8013fec:	4610      	mov	r0, r2
 8013fee:	4798      	blx	r3
 8013ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ff2:	e00f      	b.n	8014014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ff4:	6839      	ldr	r1, [r7, #0]
 8013ff6:	6878      	ldr	r0, [r7, #4]
 8013ff8:	f000 fa49 	bl	801448e <USBD_CtlError>
            err++;
 8013ffc:	7afb      	ldrb	r3, [r7, #11]
 8013ffe:	3301      	adds	r3, #1
 8014000:	72fb      	strb	r3, [r7, #11]
          break;
 8014002:	e007      	b.n	8014014 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014004:	6839      	ldr	r1, [r7, #0]
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f000 fa41 	bl	801448e <USBD_CtlError>
          err++;
 801400c:	7afb      	ldrb	r3, [r7, #11]
 801400e:	3301      	adds	r3, #1
 8014010:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014012:	bf00      	nop
      }
      break;
 8014014:	e037      	b.n	8014086 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	7c1b      	ldrb	r3, [r3, #16]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d109      	bne.n	8014032 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014026:	f107 0208 	add.w	r2, r7, #8
 801402a:	4610      	mov	r0, r2
 801402c:	4798      	blx	r3
 801402e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014030:	e029      	b.n	8014086 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014032:	6839      	ldr	r1, [r7, #0]
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f000 fa2a 	bl	801448e <USBD_CtlError>
        err++;
 801403a:	7afb      	ldrb	r3, [r7, #11]
 801403c:	3301      	adds	r3, #1
 801403e:	72fb      	strb	r3, [r7, #11]
      break;
 8014040:	e021      	b.n	8014086 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	7c1b      	ldrb	r3, [r3, #16]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d10d      	bne.n	8014066 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014052:	f107 0208 	add.w	r2, r7, #8
 8014056:	4610      	mov	r0, r2
 8014058:	4798      	blx	r3
 801405a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	3301      	adds	r3, #1
 8014060:	2207      	movs	r2, #7
 8014062:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014064:	e00f      	b.n	8014086 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014066:	6839      	ldr	r1, [r7, #0]
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f000 fa10 	bl	801448e <USBD_CtlError>
        err++;
 801406e:	7afb      	ldrb	r3, [r7, #11]
 8014070:	3301      	adds	r3, #1
 8014072:	72fb      	strb	r3, [r7, #11]
      break;
 8014074:	e007      	b.n	8014086 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014076:	6839      	ldr	r1, [r7, #0]
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f000 fa08 	bl	801448e <USBD_CtlError>
      err++;
 801407e:	7afb      	ldrb	r3, [r7, #11]
 8014080:	3301      	adds	r3, #1
 8014082:	72fb      	strb	r3, [r7, #11]
      break;
 8014084:	bf00      	nop
  }

  if (err != 0U)
 8014086:	7afb      	ldrb	r3, [r7, #11]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d11e      	bne.n	80140ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	88db      	ldrh	r3, [r3, #6]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d016      	beq.n	80140c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014094:	893b      	ldrh	r3, [r7, #8]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d00e      	beq.n	80140b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	88da      	ldrh	r2, [r3, #6]
 801409e:	893b      	ldrh	r3, [r7, #8]
 80140a0:	4293      	cmp	r3, r2
 80140a2:	bf28      	it	cs
 80140a4:	4613      	movcs	r3, r2
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80140aa:	893b      	ldrh	r3, [r7, #8]
 80140ac:	461a      	mov	r2, r3
 80140ae:	68f9      	ldr	r1, [r7, #12]
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f000 fa69 	bl	8014588 <USBD_CtlSendData>
 80140b6:	e009      	b.n	80140cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80140b8:	6839      	ldr	r1, [r7, #0]
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f000 f9e7 	bl	801448e <USBD_CtlError>
 80140c0:	e004      	b.n	80140cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f000 fa9d 	bl	8014602 <USBD_CtlSendStatus>
 80140c8:	e000      	b.n	80140cc <USBD_GetDescriptor+0x320>
    return;
 80140ca:	bf00      	nop
  }
}
 80140cc:	3710      	adds	r7, #16
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}
 80140d2:	bf00      	nop

080140d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b084      	sub	sp, #16
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	889b      	ldrh	r3, [r3, #4]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d131      	bne.n	801414a <USBD_SetAddress+0x76>
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	88db      	ldrh	r3, [r3, #6]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d12d      	bne.n	801414a <USBD_SetAddress+0x76>
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	885b      	ldrh	r3, [r3, #2]
 80140f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80140f4:	d829      	bhi.n	801414a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	885b      	ldrh	r3, [r3, #2]
 80140fa:	b2db      	uxtb	r3, r3
 80140fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014100:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014108:	b2db      	uxtb	r3, r3
 801410a:	2b03      	cmp	r3, #3
 801410c:	d104      	bne.n	8014118 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801410e:	6839      	ldr	r1, [r7, #0]
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f000 f9bc 	bl	801448e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014116:	e01d      	b.n	8014154 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	7bfa      	ldrb	r2, [r7, #15]
 801411c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014120:	7bfb      	ldrb	r3, [r7, #15]
 8014122:	4619      	mov	r1, r3
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f000 ff6e 	bl	8015006 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f000 fa69 	bl	8014602 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014130:	7bfb      	ldrb	r3, [r7, #15]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d004      	beq.n	8014140 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2202      	movs	r2, #2
 801413a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801413e:	e009      	b.n	8014154 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2201      	movs	r2, #1
 8014144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014148:	e004      	b.n	8014154 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801414a:	6839      	ldr	r1, [r7, #0]
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 f99e 	bl	801448e <USBD_CtlError>
  }
}
 8014152:	bf00      	nop
 8014154:	bf00      	nop
 8014156:	3710      	adds	r7, #16
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014166:	2300      	movs	r3, #0
 8014168:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	885b      	ldrh	r3, [r3, #2]
 801416e:	b2da      	uxtb	r2, r3
 8014170:	4b4e      	ldr	r3, [pc, #312]	@ (80142ac <USBD_SetConfig+0x150>)
 8014172:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014174:	4b4d      	ldr	r3, [pc, #308]	@ (80142ac <USBD_SetConfig+0x150>)
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	2b01      	cmp	r3, #1
 801417a:	d905      	bls.n	8014188 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801417c:	6839      	ldr	r1, [r7, #0]
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	f000 f985 	bl	801448e <USBD_CtlError>
    return USBD_FAIL;
 8014184:	2303      	movs	r3, #3
 8014186:	e08c      	b.n	80142a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801418e:	b2db      	uxtb	r3, r3
 8014190:	2b02      	cmp	r3, #2
 8014192:	d002      	beq.n	801419a <USBD_SetConfig+0x3e>
 8014194:	2b03      	cmp	r3, #3
 8014196:	d029      	beq.n	80141ec <USBD_SetConfig+0x90>
 8014198:	e075      	b.n	8014286 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801419a:	4b44      	ldr	r3, [pc, #272]	@ (80142ac <USBD_SetConfig+0x150>)
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d020      	beq.n	80141e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80141a2:	4b42      	ldr	r3, [pc, #264]	@ (80142ac <USBD_SetConfig+0x150>)
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	461a      	mov	r2, r3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80141ac:	4b3f      	ldr	r3, [pc, #252]	@ (80142ac <USBD_SetConfig+0x150>)
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	4619      	mov	r1, r3
 80141b2:	6878      	ldr	r0, [r7, #4]
 80141b4:	f7fe ffba 	bl	801312c <USBD_SetClassConfig>
 80141b8:	4603      	mov	r3, r0
 80141ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80141bc:	7bfb      	ldrb	r3, [r7, #15]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d008      	beq.n	80141d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80141c2:	6839      	ldr	r1, [r7, #0]
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	f000 f962 	bl	801448e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2202      	movs	r2, #2
 80141ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80141d2:	e065      	b.n	80142a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f000 fa14 	bl	8014602 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2203      	movs	r2, #3
 80141de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80141e2:	e05d      	b.n	80142a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f000 fa0c 	bl	8014602 <USBD_CtlSendStatus>
      break;
 80141ea:	e059      	b.n	80142a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80141ec:	4b2f      	ldr	r3, [pc, #188]	@ (80142ac <USBD_SetConfig+0x150>)
 80141ee:	781b      	ldrb	r3, [r3, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d112      	bne.n	801421a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2202      	movs	r2, #2
 80141f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80141fc:	4b2b      	ldr	r3, [pc, #172]	@ (80142ac <USBD_SetConfig+0x150>)
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	461a      	mov	r2, r3
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014206:	4b29      	ldr	r3, [pc, #164]	@ (80142ac <USBD_SetConfig+0x150>)
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	4619      	mov	r1, r3
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f7fe ffa9 	bl	8013164 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f000 f9f5 	bl	8014602 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014218:	e042      	b.n	80142a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801421a:	4b24      	ldr	r3, [pc, #144]	@ (80142ac <USBD_SetConfig+0x150>)
 801421c:	781b      	ldrb	r3, [r3, #0]
 801421e:	461a      	mov	r2, r3
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	429a      	cmp	r2, r3
 8014226:	d02a      	beq.n	801427e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	b2db      	uxtb	r3, r3
 801422e:	4619      	mov	r1, r3
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f7fe ff97 	bl	8013164 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014236:	4b1d      	ldr	r3, [pc, #116]	@ (80142ac <USBD_SetConfig+0x150>)
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	461a      	mov	r2, r3
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014240:	4b1a      	ldr	r3, [pc, #104]	@ (80142ac <USBD_SetConfig+0x150>)
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	4619      	mov	r1, r3
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f7fe ff70 	bl	801312c <USBD_SetClassConfig>
 801424c:	4603      	mov	r3, r0
 801424e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014250:	7bfb      	ldrb	r3, [r7, #15]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d00f      	beq.n	8014276 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014256:	6839      	ldr	r1, [r7, #0]
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f000 f918 	bl	801448e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	685b      	ldr	r3, [r3, #4]
 8014262:	b2db      	uxtb	r3, r3
 8014264:	4619      	mov	r1, r3
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f7fe ff7c 	bl	8013164 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2202      	movs	r2, #2
 8014270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014274:	e014      	b.n	80142a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f000 f9c3 	bl	8014602 <USBD_CtlSendStatus>
      break;
 801427c:	e010      	b.n	80142a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f000 f9bf 	bl	8014602 <USBD_CtlSendStatus>
      break;
 8014284:	e00c      	b.n	80142a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014286:	6839      	ldr	r1, [r7, #0]
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f000 f900 	bl	801448e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801428e:	4b07      	ldr	r3, [pc, #28]	@ (80142ac <USBD_SetConfig+0x150>)
 8014290:	781b      	ldrb	r3, [r3, #0]
 8014292:	4619      	mov	r1, r3
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f7fe ff65 	bl	8013164 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801429a:	2303      	movs	r3, #3
 801429c:	73fb      	strb	r3, [r7, #15]
      break;
 801429e:	bf00      	nop
  }

  return ret;
 80142a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3710      	adds	r7, #16
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	24000aec 	.word	0x24000aec

080142b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	88db      	ldrh	r3, [r3, #6]
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d004      	beq.n	80142cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80142c2:	6839      	ldr	r1, [r7, #0]
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f000 f8e2 	bl	801448e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80142ca:	e023      	b.n	8014314 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	2b02      	cmp	r3, #2
 80142d6:	dc02      	bgt.n	80142de <USBD_GetConfig+0x2e>
 80142d8:	2b00      	cmp	r3, #0
 80142da:	dc03      	bgt.n	80142e4 <USBD_GetConfig+0x34>
 80142dc:	e015      	b.n	801430a <USBD_GetConfig+0x5a>
 80142de:	2b03      	cmp	r3, #3
 80142e0:	d00b      	beq.n	80142fa <USBD_GetConfig+0x4a>
 80142e2:	e012      	b.n	801430a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2200      	movs	r2, #0
 80142e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	3308      	adds	r3, #8
 80142ee:	2201      	movs	r2, #1
 80142f0:	4619      	mov	r1, r3
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f000 f948 	bl	8014588 <USBD_CtlSendData>
        break;
 80142f8:	e00c      	b.n	8014314 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	3304      	adds	r3, #4
 80142fe:	2201      	movs	r2, #1
 8014300:	4619      	mov	r1, r3
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f000 f940 	bl	8014588 <USBD_CtlSendData>
        break;
 8014308:	e004      	b.n	8014314 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801430a:	6839      	ldr	r1, [r7, #0]
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f000 f8be 	bl	801448e <USBD_CtlError>
        break;
 8014312:	bf00      	nop
}
 8014314:	bf00      	nop
 8014316:	3708      	adds	r7, #8
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}

0801431c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
 8014324:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801432c:	b2db      	uxtb	r3, r3
 801432e:	3b01      	subs	r3, #1
 8014330:	2b02      	cmp	r3, #2
 8014332:	d81e      	bhi.n	8014372 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	88db      	ldrh	r3, [r3, #6]
 8014338:	2b02      	cmp	r3, #2
 801433a:	d004      	beq.n	8014346 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801433c:	6839      	ldr	r1, [r7, #0]
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f000 f8a5 	bl	801448e <USBD_CtlError>
        break;
 8014344:	e01a      	b.n	801437c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2201      	movs	r2, #1
 801434a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014352:	2b00      	cmp	r3, #0
 8014354:	d005      	beq.n	8014362 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	68db      	ldr	r3, [r3, #12]
 801435a:	f043 0202 	orr.w	r2, r3, #2
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	330c      	adds	r3, #12
 8014366:	2202      	movs	r2, #2
 8014368:	4619      	mov	r1, r3
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f000 f90c 	bl	8014588 <USBD_CtlSendData>
      break;
 8014370:	e004      	b.n	801437c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014372:	6839      	ldr	r1, [r7, #0]
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f000 f88a 	bl	801448e <USBD_CtlError>
      break;
 801437a:	bf00      	nop
  }
}
 801437c:	bf00      	nop
 801437e:	3708      	adds	r7, #8
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}

08014384 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	885b      	ldrh	r3, [r3, #2]
 8014392:	2b01      	cmp	r3, #1
 8014394:	d107      	bne.n	80143a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2201      	movs	r2, #1
 801439a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f000 f92f 	bl	8014602 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80143a4:	e013      	b.n	80143ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	885b      	ldrh	r3, [r3, #2]
 80143aa:	2b02      	cmp	r3, #2
 80143ac:	d10b      	bne.n	80143c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	889b      	ldrh	r3, [r3, #4]
 80143b2:	0a1b      	lsrs	r3, r3, #8
 80143b4:	b29b      	uxth	r3, r3
 80143b6:	b2da      	uxtb	r2, r3
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f000 f91f 	bl	8014602 <USBD_CtlSendStatus>
}
 80143c4:	e003      	b.n	80143ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80143c6:	6839      	ldr	r1, [r7, #0]
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f000 f860 	bl	801448e <USBD_CtlError>
}
 80143ce:	bf00      	nop
 80143d0:	3708      	adds	r7, #8
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}

080143d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143d6:	b580      	push	{r7, lr}
 80143d8:	b082      	sub	sp, #8
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]
 80143de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80143e6:	b2db      	uxtb	r3, r3
 80143e8:	3b01      	subs	r3, #1
 80143ea:	2b02      	cmp	r3, #2
 80143ec:	d80b      	bhi.n	8014406 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	885b      	ldrh	r3, [r3, #2]
 80143f2:	2b01      	cmp	r3, #1
 80143f4:	d10c      	bne.n	8014410 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2200      	movs	r2, #0
 80143fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f000 f8ff 	bl	8014602 <USBD_CtlSendStatus>
      }
      break;
 8014404:	e004      	b.n	8014410 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014406:	6839      	ldr	r1, [r7, #0]
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f000 f840 	bl	801448e <USBD_CtlError>
      break;
 801440e:	e000      	b.n	8014412 <USBD_ClrFeature+0x3c>
      break;
 8014410:	bf00      	nop
  }
}
 8014412:	bf00      	nop
 8014414:	3708      	adds	r7, #8
 8014416:	46bd      	mov	sp, r7
 8014418:	bd80      	pop	{r7, pc}

0801441a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801441a:	b580      	push	{r7, lr}
 801441c:	b084      	sub	sp, #16
 801441e:	af00      	add	r7, sp, #0
 8014420:	6078      	str	r0, [r7, #4]
 8014422:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	781a      	ldrb	r2, [r3, #0]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	3301      	adds	r3, #1
 8014434:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	781a      	ldrb	r2, [r3, #0]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	3301      	adds	r3, #1
 8014442:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014444:	68f8      	ldr	r0, [r7, #12]
 8014446:	f7ff fa17 	bl	8013878 <SWAPBYTE>
 801444a:	4603      	mov	r3, r0
 801444c:	461a      	mov	r2, r3
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	3301      	adds	r3, #1
 8014456:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	3301      	adds	r3, #1
 801445c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801445e:	68f8      	ldr	r0, [r7, #12]
 8014460:	f7ff fa0a 	bl	8013878 <SWAPBYTE>
 8014464:	4603      	mov	r3, r0
 8014466:	461a      	mov	r2, r3
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	3301      	adds	r3, #1
 8014470:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	3301      	adds	r3, #1
 8014476:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014478:	68f8      	ldr	r0, [r7, #12]
 801447a:	f7ff f9fd 	bl	8013878 <SWAPBYTE>
 801447e:	4603      	mov	r3, r0
 8014480:	461a      	mov	r2, r3
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	80da      	strh	r2, [r3, #6]
}
 8014486:	bf00      	nop
 8014488:	3710      	adds	r7, #16
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}

0801448e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801448e:	b580      	push	{r7, lr}
 8014490:	b082      	sub	sp, #8
 8014492:	af00      	add	r7, sp, #0
 8014494:	6078      	str	r0, [r7, #4]
 8014496:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014498:	2180      	movs	r1, #128	@ 0x80
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f000 fd49 	bl	8014f32 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80144a0:	2100      	movs	r1, #0
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f000 fd45 	bl	8014f32 <USBD_LL_StallEP>
}
 80144a8:	bf00      	nop
 80144aa:	3708      	adds	r7, #8
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}

080144b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b086      	sub	sp, #24
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	60f8      	str	r0, [r7, #12]
 80144b8:	60b9      	str	r1, [r7, #8]
 80144ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80144bc:	2300      	movs	r3, #0
 80144be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d042      	beq.n	801454c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80144ca:	6938      	ldr	r0, [r7, #16]
 80144cc:	f000 f842 	bl	8014554 <USBD_GetLen>
 80144d0:	4603      	mov	r3, r0
 80144d2:	3301      	adds	r3, #1
 80144d4:	005b      	lsls	r3, r3, #1
 80144d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144da:	d808      	bhi.n	80144ee <USBD_GetString+0x3e>
 80144dc:	6938      	ldr	r0, [r7, #16]
 80144de:	f000 f839 	bl	8014554 <USBD_GetLen>
 80144e2:	4603      	mov	r3, r0
 80144e4:	3301      	adds	r3, #1
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	005b      	lsls	r3, r3, #1
 80144ea:	b29a      	uxth	r2, r3
 80144ec:	e001      	b.n	80144f2 <USBD_GetString+0x42>
 80144ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80144f6:	7dfb      	ldrb	r3, [r7, #23]
 80144f8:	68ba      	ldr	r2, [r7, #8]
 80144fa:	4413      	add	r3, r2
 80144fc:	687a      	ldr	r2, [r7, #4]
 80144fe:	7812      	ldrb	r2, [r2, #0]
 8014500:	701a      	strb	r2, [r3, #0]
  idx++;
 8014502:	7dfb      	ldrb	r3, [r7, #23]
 8014504:	3301      	adds	r3, #1
 8014506:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014508:	7dfb      	ldrb	r3, [r7, #23]
 801450a:	68ba      	ldr	r2, [r7, #8]
 801450c:	4413      	add	r3, r2
 801450e:	2203      	movs	r2, #3
 8014510:	701a      	strb	r2, [r3, #0]
  idx++;
 8014512:	7dfb      	ldrb	r3, [r7, #23]
 8014514:	3301      	adds	r3, #1
 8014516:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014518:	e013      	b.n	8014542 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801451a:	7dfb      	ldrb	r3, [r7, #23]
 801451c:	68ba      	ldr	r2, [r7, #8]
 801451e:	4413      	add	r3, r2
 8014520:	693a      	ldr	r2, [r7, #16]
 8014522:	7812      	ldrb	r2, [r2, #0]
 8014524:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	3301      	adds	r3, #1
 801452a:	613b      	str	r3, [r7, #16]
    idx++;
 801452c:	7dfb      	ldrb	r3, [r7, #23]
 801452e:	3301      	adds	r3, #1
 8014530:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014532:	7dfb      	ldrb	r3, [r7, #23]
 8014534:	68ba      	ldr	r2, [r7, #8]
 8014536:	4413      	add	r3, r2
 8014538:	2200      	movs	r2, #0
 801453a:	701a      	strb	r2, [r3, #0]
    idx++;
 801453c:	7dfb      	ldrb	r3, [r7, #23]
 801453e:	3301      	adds	r3, #1
 8014540:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	781b      	ldrb	r3, [r3, #0]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d1e7      	bne.n	801451a <USBD_GetString+0x6a>
 801454a:	e000      	b.n	801454e <USBD_GetString+0x9e>
    return;
 801454c:	bf00      	nop
  }
}
 801454e:	3718      	adds	r7, #24
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}

08014554 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014554:	b480      	push	{r7}
 8014556:	b085      	sub	sp, #20
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801455c:	2300      	movs	r3, #0
 801455e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014564:	e005      	b.n	8014572 <USBD_GetLen+0x1e>
  {
    len++;
 8014566:	7bfb      	ldrb	r3, [r7, #15]
 8014568:	3301      	adds	r3, #1
 801456a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	3301      	adds	r3, #1
 8014570:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014572:	68bb      	ldr	r3, [r7, #8]
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d1f5      	bne.n	8014566 <USBD_GetLen+0x12>
  }

  return len;
 801457a:	7bfb      	ldrb	r3, [r7, #15]
}
 801457c:	4618      	mov	r0, r3
 801457e:	3714      	adds	r7, #20
 8014580:	46bd      	mov	sp, r7
 8014582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014586:	4770      	bx	lr

08014588 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b084      	sub	sp, #16
 801458c:	af00      	add	r7, sp, #0
 801458e:	60f8      	str	r0, [r7, #12]
 8014590:	60b9      	str	r1, [r7, #8]
 8014592:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	2202      	movs	r2, #2
 8014598:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	687a      	ldr	r2, [r7, #4]
 80145a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	687a      	ldr	r2, [r7, #4]
 80145a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	68ba      	ldr	r2, [r7, #8]
 80145ac:	2100      	movs	r1, #0
 80145ae:	68f8      	ldr	r0, [r7, #12]
 80145b0:	f000 fd48 	bl	8015044 <USBD_LL_Transmit>

  return USBD_OK;
 80145b4:	2300      	movs	r3, #0
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3710      	adds	r7, #16
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}

080145be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80145be:	b580      	push	{r7, lr}
 80145c0:	b084      	sub	sp, #16
 80145c2:	af00      	add	r7, sp, #0
 80145c4:	60f8      	str	r0, [r7, #12]
 80145c6:	60b9      	str	r1, [r7, #8]
 80145c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	68ba      	ldr	r2, [r7, #8]
 80145ce:	2100      	movs	r1, #0
 80145d0:	68f8      	ldr	r0, [r7, #12]
 80145d2:	f000 fd37 	bl	8015044 <USBD_LL_Transmit>

  return USBD_OK;
 80145d6:	2300      	movs	r3, #0
}
 80145d8:	4618      	mov	r0, r3
 80145da:	3710      	adds	r7, #16
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}

080145e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b084      	sub	sp, #16
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	60f8      	str	r0, [r7, #12]
 80145e8:	60b9      	str	r1, [r7, #8]
 80145ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	68ba      	ldr	r2, [r7, #8]
 80145f0:	2100      	movs	r1, #0
 80145f2:	68f8      	ldr	r0, [r7, #12]
 80145f4:	f000 fd47 	bl	8015086 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80145f8:	2300      	movs	r3, #0
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3710      	adds	r7, #16
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014602:	b580      	push	{r7, lr}
 8014604:	b082      	sub	sp, #8
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2204      	movs	r2, #4
 801460e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014612:	2300      	movs	r3, #0
 8014614:	2200      	movs	r2, #0
 8014616:	2100      	movs	r1, #0
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f000 fd13 	bl	8015044 <USBD_LL_Transmit>

  return USBD_OK;
 801461e:	2300      	movs	r3, #0
}
 8014620:	4618      	mov	r0, r3
 8014622:	3708      	adds	r7, #8
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}

08014628 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b082      	sub	sp, #8
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2205      	movs	r2, #5
 8014634:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014638:	2300      	movs	r3, #0
 801463a:	2200      	movs	r2, #0
 801463c:	2100      	movs	r1, #0
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f000 fd21 	bl	8015086 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014644:	2300      	movs	r3, #0
}
 8014646:	4618      	mov	r0, r3
 8014648:	3708      	adds	r7, #8
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
	...

08014650 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014650:	b480      	push	{r7}
 8014652:	b087      	sub	sp, #28
 8014654:	af00      	add	r7, sp, #0
 8014656:	60f8      	str	r0, [r7, #12]
 8014658:	60b9      	str	r1, [r7, #8]
 801465a:	4613      	mov	r3, r2
 801465c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801465e:	2301      	movs	r3, #1
 8014660:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014662:	2300      	movs	r3, #0
 8014664:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014666:	4b1f      	ldr	r3, [pc, #124]	@ (80146e4 <FATFS_LinkDriverEx+0x94>)
 8014668:	7a5b      	ldrb	r3, [r3, #9]
 801466a:	b2db      	uxtb	r3, r3
 801466c:	2b00      	cmp	r3, #0
 801466e:	d131      	bne.n	80146d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014670:	4b1c      	ldr	r3, [pc, #112]	@ (80146e4 <FATFS_LinkDriverEx+0x94>)
 8014672:	7a5b      	ldrb	r3, [r3, #9]
 8014674:	b2db      	uxtb	r3, r3
 8014676:	461a      	mov	r2, r3
 8014678:	4b1a      	ldr	r3, [pc, #104]	@ (80146e4 <FATFS_LinkDriverEx+0x94>)
 801467a:	2100      	movs	r1, #0
 801467c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801467e:	4b19      	ldr	r3, [pc, #100]	@ (80146e4 <FATFS_LinkDriverEx+0x94>)
 8014680:	7a5b      	ldrb	r3, [r3, #9]
 8014682:	b2db      	uxtb	r3, r3
 8014684:	4a17      	ldr	r2, [pc, #92]	@ (80146e4 <FATFS_LinkDriverEx+0x94>)
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	4413      	add	r3, r2
 801468a:	68fa      	ldr	r2, [r7, #12]
 801468c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801468e:	4b15      	ldr	r3, [pc, #84]	@ (80146e4 <FATFS_LinkDriverEx+0x94>)
 8014690:	7a5b      	ldrb	r3, [r3, #9]
 8014692:	b2db      	uxtb	r3, r3
 8014694:	461a      	mov	r2, r3
 8014696:	4b13      	ldr	r3, [pc, #76]	@ (80146e4 <FATFS_LinkDriverEx+0x94>)
 8014698:	4413      	add	r3, r2
 801469a:	79fa      	ldrb	r2, [r7, #7]
 801469c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801469e:	4b11      	ldr	r3, [pc, #68]	@ (80146e4 <FATFS_LinkDriverEx+0x94>)
 80146a0:	7a5b      	ldrb	r3, [r3, #9]
 80146a2:	b2db      	uxtb	r3, r3
 80146a4:	1c5a      	adds	r2, r3, #1
 80146a6:	b2d1      	uxtb	r1, r2
 80146a8:	4a0e      	ldr	r2, [pc, #56]	@ (80146e4 <FATFS_LinkDriverEx+0x94>)
 80146aa:	7251      	strb	r1, [r2, #9]
 80146ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80146ae:	7dbb      	ldrb	r3, [r7, #22]
 80146b0:	3330      	adds	r3, #48	@ 0x30
 80146b2:	b2da      	uxtb	r2, r3
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	3301      	adds	r3, #1
 80146bc:	223a      	movs	r2, #58	@ 0x3a
 80146be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	3302      	adds	r3, #2
 80146c4:	222f      	movs	r2, #47	@ 0x2f
 80146c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	3303      	adds	r3, #3
 80146cc:	2200      	movs	r2, #0
 80146ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80146d0:	2300      	movs	r3, #0
 80146d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80146d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	371c      	adds	r7, #28
 80146da:	46bd      	mov	sp, r7
 80146dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e0:	4770      	bx	lr
 80146e2:	bf00      	nop
 80146e4:	24000af0 	.word	0x24000af0

080146e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80146f2:	2200      	movs	r2, #0
 80146f4:	6839      	ldr	r1, [r7, #0]
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f7ff ffaa 	bl	8014650 <FATFS_LinkDriverEx>
 80146fc:	4603      	mov	r3, r0
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3708      	adds	r7, #8
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
	...

08014708 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801470c:	2200      	movs	r2, #0
 801470e:	4913      	ldr	r1, [pc, #76]	@ (801475c <MX_USB_DEVICE_Init+0x54>)
 8014710:	4813      	ldr	r0, [pc, #76]	@ (8014760 <MX_USB_DEVICE_Init+0x58>)
 8014712:	f7fe fc8e 	bl	8013032 <USBD_Init>
 8014716:	4603      	mov	r3, r0
 8014718:	2b00      	cmp	r3, #0
 801471a:	d001      	beq.n	8014720 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801471c:	f7ee f838 	bl	8002790 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8014720:	4910      	ldr	r1, [pc, #64]	@ (8014764 <MX_USB_DEVICE_Init+0x5c>)
 8014722:	480f      	ldr	r0, [pc, #60]	@ (8014760 <MX_USB_DEVICE_Init+0x58>)
 8014724:	f7fe fcb5 	bl	8013092 <USBD_RegisterClass>
 8014728:	4603      	mov	r3, r0
 801472a:	2b00      	cmp	r3, #0
 801472c:	d001      	beq.n	8014732 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801472e:	f7ee f82f 	bl	8002790 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8014732:	490d      	ldr	r1, [pc, #52]	@ (8014768 <MX_USB_DEVICE_Init+0x60>)
 8014734:	480a      	ldr	r0, [pc, #40]	@ (8014760 <MX_USB_DEVICE_Init+0x58>)
 8014736:	f7fc ff33 	bl	80115a0 <USBD_MSC_RegisterStorage>
 801473a:	4603      	mov	r3, r0
 801473c:	2b00      	cmp	r3, #0
 801473e:	d001      	beq.n	8014744 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014740:	f7ee f826 	bl	8002790 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014744:	4806      	ldr	r0, [pc, #24]	@ (8014760 <MX_USB_DEVICE_Init+0x58>)
 8014746:	f7fe fcda 	bl	80130fe <USBD_Start>
 801474a:	4603      	mov	r3, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d001      	beq.n	8014754 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014750:	f7ee f81e 	bl	8002790 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014754:	f7f1 fd58 	bl	8006208 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014758:	bf00      	nop
 801475a:	bd80      	pop	{r7, pc}
 801475c:	240000c0 	.word	0x240000c0
 8014760:	24000afc 	.word	0x24000afc
 8014764:	24000040 	.word	0x24000040
 8014768:	24000114 	.word	0x24000114

0801476c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801476c:	b480      	push	{r7}
 801476e:	b083      	sub	sp, #12
 8014770:	af00      	add	r7, sp, #0
 8014772:	4603      	mov	r3, r0
 8014774:	6039      	str	r1, [r7, #0]
 8014776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	2212      	movs	r2, #18
 801477c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801477e:	4b03      	ldr	r3, [pc, #12]	@ (801478c <USBD_FS_DeviceDescriptor+0x20>)
}
 8014780:	4618      	mov	r0, r3
 8014782:	370c      	adds	r7, #12
 8014784:	46bd      	mov	sp, r7
 8014786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478a:	4770      	bx	lr
 801478c:	240000e0 	.word	0x240000e0

08014790 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014790:	b480      	push	{r7}
 8014792:	b083      	sub	sp, #12
 8014794:	af00      	add	r7, sp, #0
 8014796:	4603      	mov	r3, r0
 8014798:	6039      	str	r1, [r7, #0]
 801479a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	2204      	movs	r2, #4
 80147a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80147a2:	4b03      	ldr	r3, [pc, #12]	@ (80147b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	370c      	adds	r7, #12
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr
 80147b0:	240000f4 	.word	0x240000f4

080147b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	4603      	mov	r3, r0
 80147bc:	6039      	str	r1, [r7, #0]
 80147be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80147c0:	79fb      	ldrb	r3, [r7, #7]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d105      	bne.n	80147d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80147c6:	683a      	ldr	r2, [r7, #0]
 80147c8:	4907      	ldr	r1, [pc, #28]	@ (80147e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80147ca:	4808      	ldr	r0, [pc, #32]	@ (80147ec <USBD_FS_ProductStrDescriptor+0x38>)
 80147cc:	f7ff fe70 	bl	80144b0 <USBD_GetString>
 80147d0:	e004      	b.n	80147dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80147d2:	683a      	ldr	r2, [r7, #0]
 80147d4:	4904      	ldr	r1, [pc, #16]	@ (80147e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80147d6:	4805      	ldr	r0, [pc, #20]	@ (80147ec <USBD_FS_ProductStrDescriptor+0x38>)
 80147d8:	f7ff fe6a 	bl	80144b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80147dc:	4b02      	ldr	r3, [pc, #8]	@ (80147e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3708      	adds	r7, #8
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	24000dd8 	.word	0x24000dd8
 80147ec:	08017d98 	.word	0x08017d98

080147f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	4603      	mov	r3, r0
 80147f8:	6039      	str	r1, [r7, #0]
 80147fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80147fc:	683a      	ldr	r2, [r7, #0]
 80147fe:	4904      	ldr	r1, [pc, #16]	@ (8014810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014800:	4804      	ldr	r0, [pc, #16]	@ (8014814 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014802:	f7ff fe55 	bl	80144b0 <USBD_GetString>
  return USBD_StrDesc;
 8014806:	4b02      	ldr	r3, [pc, #8]	@ (8014810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014808:	4618      	mov	r0, r3
 801480a:	3708      	adds	r7, #8
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}
 8014810:	24000dd8 	.word	0x24000dd8
 8014814:	08017dac 	.word	0x08017dac

08014818 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	4603      	mov	r3, r0
 8014820:	6039      	str	r1, [r7, #0]
 8014822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	221a      	movs	r2, #26
 8014828:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801482a:	f000 f843 	bl	80148b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801482e:	4b02      	ldr	r3, [pc, #8]	@ (8014838 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014830:	4618      	mov	r0, r3
 8014832:	3708      	adds	r7, #8
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}
 8014838:	240000f8 	.word	0x240000f8

0801483c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b082      	sub	sp, #8
 8014840:	af00      	add	r7, sp, #0
 8014842:	4603      	mov	r3, r0
 8014844:	6039      	str	r1, [r7, #0]
 8014846:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014848:	79fb      	ldrb	r3, [r7, #7]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d105      	bne.n	801485a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801484e:	683a      	ldr	r2, [r7, #0]
 8014850:	4907      	ldr	r1, [pc, #28]	@ (8014870 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014852:	4808      	ldr	r0, [pc, #32]	@ (8014874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014854:	f7ff fe2c 	bl	80144b0 <USBD_GetString>
 8014858:	e004      	b.n	8014864 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801485a:	683a      	ldr	r2, [r7, #0]
 801485c:	4904      	ldr	r1, [pc, #16]	@ (8014870 <USBD_FS_ConfigStrDescriptor+0x34>)
 801485e:	4805      	ldr	r0, [pc, #20]	@ (8014874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014860:	f7ff fe26 	bl	80144b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014864:	4b02      	ldr	r3, [pc, #8]	@ (8014870 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014866:	4618      	mov	r0, r3
 8014868:	3708      	adds	r7, #8
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	24000dd8 	.word	0x24000dd8
 8014874:	08017dc0 	.word	0x08017dc0

08014878 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b082      	sub	sp, #8
 801487c:	af00      	add	r7, sp, #0
 801487e:	4603      	mov	r3, r0
 8014880:	6039      	str	r1, [r7, #0]
 8014882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014884:	79fb      	ldrb	r3, [r7, #7]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d105      	bne.n	8014896 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801488a:	683a      	ldr	r2, [r7, #0]
 801488c:	4907      	ldr	r1, [pc, #28]	@ (80148ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801488e:	4808      	ldr	r0, [pc, #32]	@ (80148b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014890:	f7ff fe0e 	bl	80144b0 <USBD_GetString>
 8014894:	e004      	b.n	80148a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014896:	683a      	ldr	r2, [r7, #0]
 8014898:	4904      	ldr	r1, [pc, #16]	@ (80148ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801489a:	4805      	ldr	r0, [pc, #20]	@ (80148b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801489c:	f7ff fe08 	bl	80144b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80148a0:	4b02      	ldr	r3, [pc, #8]	@ (80148ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3708      	adds	r7, #8
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	24000dd8 	.word	0x24000dd8
 80148b0:	08017dcc 	.word	0x08017dcc

080148b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b084      	sub	sp, #16
 80148b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80148ba:	4b0f      	ldr	r3, [pc, #60]	@ (80148f8 <Get_SerialNum+0x44>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80148c0:	4b0e      	ldr	r3, [pc, #56]	@ (80148fc <Get_SerialNum+0x48>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80148c6:	4b0e      	ldr	r3, [pc, #56]	@ (8014900 <Get_SerialNum+0x4c>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80148cc:	68fa      	ldr	r2, [r7, #12]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	4413      	add	r3, r2
 80148d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d009      	beq.n	80148ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80148da:	2208      	movs	r2, #8
 80148dc:	4909      	ldr	r1, [pc, #36]	@ (8014904 <Get_SerialNum+0x50>)
 80148de:	68f8      	ldr	r0, [r7, #12]
 80148e0:	f000 f814 	bl	801490c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80148e4:	2204      	movs	r2, #4
 80148e6:	4908      	ldr	r1, [pc, #32]	@ (8014908 <Get_SerialNum+0x54>)
 80148e8:	68b8      	ldr	r0, [r7, #8]
 80148ea:	f000 f80f 	bl	801490c <IntToUnicode>
  }
}
 80148ee:	bf00      	nop
 80148f0:	3710      	adds	r7, #16
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}
 80148f6:	bf00      	nop
 80148f8:	1ff1e800 	.word	0x1ff1e800
 80148fc:	1ff1e804 	.word	0x1ff1e804
 8014900:	1ff1e808 	.word	0x1ff1e808
 8014904:	240000fa 	.word	0x240000fa
 8014908:	2400010a 	.word	0x2400010a

0801490c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801490c:	b480      	push	{r7}
 801490e:	b087      	sub	sp, #28
 8014910:	af00      	add	r7, sp, #0
 8014912:	60f8      	str	r0, [r7, #12]
 8014914:	60b9      	str	r1, [r7, #8]
 8014916:	4613      	mov	r3, r2
 8014918:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801491a:	2300      	movs	r3, #0
 801491c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801491e:	2300      	movs	r3, #0
 8014920:	75fb      	strb	r3, [r7, #23]
 8014922:	e027      	b.n	8014974 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	0f1b      	lsrs	r3, r3, #28
 8014928:	2b09      	cmp	r3, #9
 801492a:	d80b      	bhi.n	8014944 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	0f1b      	lsrs	r3, r3, #28
 8014930:	b2da      	uxtb	r2, r3
 8014932:	7dfb      	ldrb	r3, [r7, #23]
 8014934:	005b      	lsls	r3, r3, #1
 8014936:	4619      	mov	r1, r3
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	440b      	add	r3, r1
 801493c:	3230      	adds	r2, #48	@ 0x30
 801493e:	b2d2      	uxtb	r2, r2
 8014940:	701a      	strb	r2, [r3, #0]
 8014942:	e00a      	b.n	801495a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	0f1b      	lsrs	r3, r3, #28
 8014948:	b2da      	uxtb	r2, r3
 801494a:	7dfb      	ldrb	r3, [r7, #23]
 801494c:	005b      	lsls	r3, r3, #1
 801494e:	4619      	mov	r1, r3
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	440b      	add	r3, r1
 8014954:	3237      	adds	r2, #55	@ 0x37
 8014956:	b2d2      	uxtb	r2, r2
 8014958:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	011b      	lsls	r3, r3, #4
 801495e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014960:	7dfb      	ldrb	r3, [r7, #23]
 8014962:	005b      	lsls	r3, r3, #1
 8014964:	3301      	adds	r3, #1
 8014966:	68ba      	ldr	r2, [r7, #8]
 8014968:	4413      	add	r3, r2
 801496a:	2200      	movs	r2, #0
 801496c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801496e:	7dfb      	ldrb	r3, [r7, #23]
 8014970:	3301      	adds	r3, #1
 8014972:	75fb      	strb	r3, [r7, #23]
 8014974:	7dfa      	ldrb	r2, [r7, #23]
 8014976:	79fb      	ldrb	r3, [r7, #7]
 8014978:	429a      	cmp	r2, r3
 801497a:	d3d3      	bcc.n	8014924 <IntToUnicode+0x18>
  }
}
 801497c:	bf00      	nop
 801497e:	bf00      	nop
 8014980:	371c      	adds	r7, #28
 8014982:	46bd      	mov	sp, r7
 8014984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014988:	4770      	bx	lr

0801498a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801498a:	b480      	push	{r7}
 801498c:	b083      	sub	sp, #12
 801498e:	af00      	add	r7, sp, #0
 8014990:	4603      	mov	r3, r0
 8014992:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8014994:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8014996:	4618      	mov	r0, r3
 8014998:	370c      	adds	r7, #12
 801499a:	46bd      	mov	sp, r7
 801499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a0:	4770      	bx	lr
	...

080149a4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b08e      	sub	sp, #56	@ 0x38
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	4603      	mov	r3, r0
 80149ac:	60b9      	str	r1, [r7, #8]
 80149ae:	607a      	str	r2, [r7, #4]
 80149b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
    HAL_SD_CardInfoTypeDef info;
    int8_t ret = -1;
 80149b2:	23ff      	movs	r3, #255	@ 0xff
 80149b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Retrieve the card info
    if (HAL_SD_GetCardInfo(&hsd1, &info) == HAL_OK)
 80149b8:	f107 0310 	add.w	r3, r7, #16
 80149bc:	4619      	mov	r1, r3
 80149be:	480b      	ldr	r0, [pc, #44]	@ (80149ec <STORAGE_GetCapacity_FS+0x48>)
 80149c0:	f7f5 ffdc 	bl	800a97c <HAL_SD_GetCardInfo>
 80149c4:	4603      	mov	r3, r0
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d10a      	bne.n	80149e0 <STORAGE_GetCapacity_FS+0x3c>
    {
        // Ensure the correct values are returned
        *block_num = info.LogBlockNbr - 1;
 80149ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149cc:	1e5a      	subs	r2, r3, #1
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	601a      	str	r2, [r3, #0]
        *block_size = info.LogBlockSize;
 80149d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149d4:	b29a      	uxth	r2, r3
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	801a      	strh	r2, [r3, #0]
        ret = USBD_OK;
 80149da:	2300      	movs	r3, #0
 80149dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return ret;
 80149e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3738      	adds	r7, #56	@ 0x38
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	24000810 	.word	0x24000810

080149f0 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80149f0:	b480      	push	{r7}
 80149f2:	b083      	sub	sp, #12
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	4603      	mov	r3, r0
 80149f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80149fa:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	370c      	adds	r7, #12
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr

08014a08 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8014a08:	b480      	push	{r7}
 8014a0a:	b083      	sub	sp, #12
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	4603      	mov	r3, r0
 8014a10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8014a12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	370c      	adds	r7, #12
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1e:	4770      	bx	lr

08014a20 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b088      	sub	sp, #32
 8014a24:	af02      	add	r7, sp, #8
 8014a26:	60b9      	str	r1, [r7, #8]
 8014a28:	607a      	str	r2, [r7, #4]
 8014a2a:	461a      	mov	r2, r3
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	73fb      	strb	r3, [r7, #15]
 8014a30:	4613      	mov	r3, r2
 8014a32:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 8014a34:	23ff      	movs	r3, #255	@ 0xff
 8014a36:	75fb      	strb	r3, [r7, #23]

	  HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8014a38:	89bb      	ldrh	r3, [r7, #12]
 8014a3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014a3e:	9200      	str	r2, [sp, #0]
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	68b9      	ldr	r1, [r7, #8]
 8014a44:	4808      	ldr	r0, [pc, #32]	@ (8014a68 <STORAGE_Read_FS+0x48>)
 8014a46:	f7f5 fa1f 	bl	8009e88 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8014a4a:	bf00      	nop
 8014a4c:	4806      	ldr	r0, [pc, #24]	@ (8014a68 <STORAGE_Read_FS+0x48>)
 8014a4e:	f7f6 f8d3 	bl	800abf8 <HAL_SD_GetCardState>
 8014a52:	4603      	mov	r3, r0
 8014a54:	2b04      	cmp	r3, #4
 8014a56:	d1f9      	bne.n	8014a4c <STORAGE_Read_FS+0x2c>
	  ret = 0;
 8014a58:	2300      	movs	r3, #0
 8014a5a:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8014a5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8014a60:	4618      	mov	r0, r3
 8014a62:	3718      	adds	r7, #24
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}
 8014a68:	24000810 	.word	0x24000810

08014a6c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b088      	sub	sp, #32
 8014a70:	af02      	add	r7, sp, #8
 8014a72:	60b9      	str	r1, [r7, #8]
 8014a74:	607a      	str	r2, [r7, #4]
 8014a76:	461a      	mov	r2, r3
 8014a78:	4603      	mov	r3, r0
 8014a7a:	73fb      	strb	r3, [r7, #15]
 8014a7c:	4613      	mov	r3, r2
 8014a7e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	  int8_t ret = -1;
 8014a80:	23ff      	movs	r3, #255	@ 0xff
 8014a82:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8014a84:	89bb      	ldrh	r3, [r7, #12]
 8014a86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014a8a:	9200      	str	r2, [sp, #0]
 8014a8c:	687a      	ldr	r2, [r7, #4]
 8014a8e:	68b9      	ldr	r1, [r7, #8]
 8014a90:	4808      	ldr	r0, [pc, #32]	@ (8014ab4 <STORAGE_Write_FS+0x48>)
 8014a92:	f7f5 fb83 	bl	800a19c <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8014a96:	bf00      	nop
 8014a98:	4806      	ldr	r0, [pc, #24]	@ (8014ab4 <STORAGE_Write_FS+0x48>)
 8014a9a:	f7f6 f8ad 	bl	800abf8 <HAL_SD_GetCardState>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b04      	cmp	r3, #4
 8014aa2:	d1f9      	bne.n	8014a98 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8014aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3718      	adds	r7, #24
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	24000810 	.word	0x24000810

08014ab8 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8014abc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac6:	4770      	bx	lr

08014ac8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b0ba      	sub	sp, #232	@ 0xe8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014ad0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	601a      	str	r2, [r3, #0]
 8014ad8:	605a      	str	r2, [r3, #4]
 8014ada:	609a      	str	r2, [r3, #8]
 8014adc:	60da      	str	r2, [r3, #12]
 8014ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014ae0:	f107 0310 	add.w	r3, r7, #16
 8014ae4:	22c0      	movs	r2, #192	@ 0xc0
 8014ae6:	2100      	movs	r1, #0
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f001 f8af 	bl	8015c4c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	4a2c      	ldr	r2, [pc, #176]	@ (8014ba4 <HAL_PCD_MspInit+0xdc>)
 8014af4:	4293      	cmp	r3, r2
 8014af6:	d151      	bne.n	8014b9c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014af8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8014afc:	f04f 0300 	mov.w	r3, #0
 8014b00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8014b04:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8014b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014b0c:	f107 0310 	add.w	r3, r7, #16
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7f2 fb9b 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 8014b16:	4603      	mov	r3, r0
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d001      	beq.n	8014b20 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8014b1c:	f7ed fe38 	bl	8002790 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8014b20:	f7f1 fb72 	bl	8006208 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b24:	4b20      	ldr	r3, [pc, #128]	@ (8014ba8 <HAL_PCD_MspInit+0xe0>)
 8014b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8014ba8 <HAL_PCD_MspInit+0xe0>)
 8014b2c:	f043 0301 	orr.w	r3, r3, #1
 8014b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014b34:	4b1c      	ldr	r3, [pc, #112]	@ (8014ba8 <HAL_PCD_MspInit+0xe0>)
 8014b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014b3a:	f003 0301 	and.w	r3, r3, #1
 8014b3e:	60fb      	str	r3, [r7, #12]
 8014b40:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014b42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014b46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b4a:	2302      	movs	r3, #2
 8014b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b50:	2300      	movs	r3, #0
 8014b52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b56:	2300      	movs	r3, #0
 8014b58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014b5c:	230a      	movs	r3, #10
 8014b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014b62:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014b66:	4619      	mov	r1, r3
 8014b68:	4810      	ldr	r0, [pc, #64]	@ (8014bac <HAL_PCD_MspInit+0xe4>)
 8014b6a:	f7ee fd8f 	bl	800368c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8014ba8 <HAL_PCD_MspInit+0xe0>)
 8014b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014b74:	4a0c      	ldr	r2, [pc, #48]	@ (8014ba8 <HAL_PCD_MspInit+0xe0>)
 8014b76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014b7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8014b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8014ba8 <HAL_PCD_MspInit+0xe0>)
 8014b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014b88:	60bb      	str	r3, [r7, #8]
 8014b8a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	2100      	movs	r1, #0
 8014b90:	2065      	movs	r0, #101	@ 0x65
 8014b92:	f7ee fcce 	bl	8003532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014b96:	2065      	movs	r0, #101	@ 0x65
 8014b98:	f7ee fce5 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014b9c:	bf00      	nop
 8014b9e:	37e8      	adds	r7, #232	@ 0xe8
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	40080000 	.word	0x40080000
 8014ba8:	58024400 	.word	0x58024400
 8014bac:	58020000 	.word	0x58020000

08014bb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b082      	sub	sp, #8
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	4610      	mov	r0, r2
 8014bc8:	f7fe fae6 	bl	8013198 <USBD_LL_SetupStage>
}
 8014bcc:	bf00      	nop
 8014bce:	3708      	adds	r7, #8
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bd80      	pop	{r7, pc}

08014bd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b082      	sub	sp, #8
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
 8014bdc:	460b      	mov	r3, r1
 8014bde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014be6:	78fa      	ldrb	r2, [r7, #3]
 8014be8:	6879      	ldr	r1, [r7, #4]
 8014bea:	4613      	mov	r3, r2
 8014bec:	00db      	lsls	r3, r3, #3
 8014bee:	4413      	add	r3, r2
 8014bf0:	009b      	lsls	r3, r3, #2
 8014bf2:	440b      	add	r3, r1
 8014bf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014bf8:	681a      	ldr	r2, [r3, #0]
 8014bfa:	78fb      	ldrb	r3, [r7, #3]
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	f7fe fb20 	bl	8013242 <USBD_LL_DataOutStage>
}
 8014c02:	bf00      	nop
 8014c04:	3708      	adds	r7, #8
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}

08014c0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c0a:	b580      	push	{r7, lr}
 8014c0c:	b082      	sub	sp, #8
 8014c0e:	af00      	add	r7, sp, #0
 8014c10:	6078      	str	r0, [r7, #4]
 8014c12:	460b      	mov	r3, r1
 8014c14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014c1c:	78fa      	ldrb	r2, [r7, #3]
 8014c1e:	6879      	ldr	r1, [r7, #4]
 8014c20:	4613      	mov	r3, r2
 8014c22:	00db      	lsls	r3, r3, #3
 8014c24:	4413      	add	r3, r2
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	440b      	add	r3, r1
 8014c2a:	3320      	adds	r3, #32
 8014c2c:	681a      	ldr	r2, [r3, #0]
 8014c2e:	78fb      	ldrb	r3, [r7, #3]
 8014c30:	4619      	mov	r1, r3
 8014c32:	f7fe fbb9 	bl	80133a8 <USBD_LL_DataInStage>
}
 8014c36:	bf00      	nop
 8014c38:	3708      	adds	r7, #8
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}

08014c3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c3e:	b580      	push	{r7, lr}
 8014c40:	b082      	sub	sp, #8
 8014c42:	af00      	add	r7, sp, #0
 8014c44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7fe fcf3 	bl	8013638 <USBD_LL_SOF>
}
 8014c52:	bf00      	nop
 8014c54:	3708      	adds	r7, #8
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}

08014c5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c5a:	b580      	push	{r7, lr}
 8014c5c:	b084      	sub	sp, #16
 8014c5e:	af00      	add	r7, sp, #0
 8014c60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014c62:	2301      	movs	r3, #1
 8014c64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	79db      	ldrb	r3, [r3, #7]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d102      	bne.n	8014c74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014c6e:	2300      	movs	r3, #0
 8014c70:	73fb      	strb	r3, [r7, #15]
 8014c72:	e008      	b.n	8014c86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	79db      	ldrb	r3, [r3, #7]
 8014c78:	2b02      	cmp	r3, #2
 8014c7a:	d102      	bne.n	8014c82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	73fb      	strb	r3, [r7, #15]
 8014c80:	e001      	b.n	8014c86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014c82:	f7ed fd85 	bl	8002790 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014c8c:	7bfa      	ldrb	r2, [r7, #15]
 8014c8e:	4611      	mov	r1, r2
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7fe fc8d 	bl	80135b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7fe fc35 	bl	801350c <USBD_LL_Reset>
}
 8014ca2:	bf00      	nop
 8014ca4:	3710      	adds	r7, #16
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}
	...

08014cac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b082      	sub	sp, #8
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fe fc88 	bl	80135d0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	687a      	ldr	r2, [r7, #4]
 8014ccc:	6812      	ldr	r2, [r2, #0]
 8014cce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014cd2:	f043 0301 	orr.w	r3, r3, #1
 8014cd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	7adb      	ldrb	r3, [r3, #11]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d005      	beq.n	8014cec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ce0:	4b04      	ldr	r3, [pc, #16]	@ (8014cf4 <HAL_PCD_SuspendCallback+0x48>)
 8014ce2:	691b      	ldr	r3, [r3, #16]
 8014ce4:	4a03      	ldr	r2, [pc, #12]	@ (8014cf4 <HAL_PCD_SuspendCallback+0x48>)
 8014ce6:	f043 0306 	orr.w	r3, r3, #6
 8014cea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014cec:	bf00      	nop
 8014cee:	3708      	adds	r7, #8
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	e000ed00 	.word	0xe000ed00

08014cf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fe fc7e 	bl	8013608 <USBD_LL_Resume>
}
 8014d0c:	bf00      	nop
 8014d0e:	3708      	adds	r7, #8
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b082      	sub	sp, #8
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	460b      	mov	r3, r1
 8014d1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014d26:	78fa      	ldrb	r2, [r7, #3]
 8014d28:	4611      	mov	r1, r2
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7fe fcd6 	bl	80136dc <USBD_LL_IsoOUTIncomplete>
}
 8014d30:	bf00      	nop
 8014d32:	3708      	adds	r7, #8
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}

08014d38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	460b      	mov	r3, r1
 8014d42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014d4a:	78fa      	ldrb	r2, [r7, #3]
 8014d4c:	4611      	mov	r1, r2
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7fe fc92 	bl	8013678 <USBD_LL_IsoINIncomplete>
}
 8014d54:	bf00      	nop
 8014d56:	3708      	adds	r7, #8
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}

08014d5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7fe fce8 	bl	8013740 <USBD_LL_DevConnected>
}
 8014d70:	bf00      	nop
 8014d72:	3708      	adds	r7, #8
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}

08014d78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014d86:	4618      	mov	r0, r3
 8014d88:	f7fe fce5 	bl	8013756 <USBD_LL_DevDisconnected>
}
 8014d8c:	bf00      	nop
 8014d8e:	3708      	adds	r7, #8
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bd80      	pop	{r7, pc}

08014d94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b082      	sub	sp, #8
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d13e      	bne.n	8014e22 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014da4:	4a21      	ldr	r2, [pc, #132]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	4a1f      	ldr	r2, [pc, #124]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014db0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014db4:	4b1d      	ldr	r3, [pc, #116]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014db6:	4a1e      	ldr	r2, [pc, #120]	@ (8014e30 <USBD_LL_Init+0x9c>)
 8014db8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8014dba:	4b1c      	ldr	r3, [pc, #112]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014dbc:	2209      	movs	r2, #9
 8014dbe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014dc2:	2202      	movs	r2, #2
 8014dc4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014dc6:	4b19      	ldr	r3, [pc, #100]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014dc8:	2200      	movs	r2, #0
 8014dca:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014dcc:	4b17      	ldr	r3, [pc, #92]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014dce:	2202      	movs	r2, #2
 8014dd0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014dd2:	4b16      	ldr	r3, [pc, #88]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014dd8:	4b14      	ldr	r3, [pc, #80]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014dda:	2200      	movs	r2, #0
 8014ddc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014dde:	4b13      	ldr	r3, [pc, #76]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014de0:	2200      	movs	r2, #0
 8014de2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014de4:	4b11      	ldr	r3, [pc, #68]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014de6:	2200      	movs	r2, #0
 8014de8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014dea:	4b10      	ldr	r3, [pc, #64]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014dec:	2200      	movs	r2, #0
 8014dee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014df0:	4b0e      	ldr	r3, [pc, #56]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014df2:	2200      	movs	r2, #0
 8014df4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014df6:	480d      	ldr	r0, [pc, #52]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014df8:	f7ef ff01 	bl	8004bfe <HAL_PCD_Init>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d001      	beq.n	8014e06 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8014e02:	f7ed fcc5 	bl	8002790 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014e06:	2180      	movs	r1, #128	@ 0x80
 8014e08:	4808      	ldr	r0, [pc, #32]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014e0a:	f7f1 f982 	bl	8006112 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014e0e:	2240      	movs	r2, #64	@ 0x40
 8014e10:	2100      	movs	r1, #0
 8014e12:	4806      	ldr	r0, [pc, #24]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014e14:	f7f1 f936 	bl	8006084 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014e18:	2280      	movs	r2, #128	@ 0x80
 8014e1a:	2101      	movs	r1, #1
 8014e1c:	4803      	ldr	r0, [pc, #12]	@ (8014e2c <USBD_LL_Init+0x98>)
 8014e1e:	f7f1 f931 	bl	8006084 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8014e22:	2300      	movs	r3, #0
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3708      	adds	r7, #8
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	24000fd8 	.word	0x24000fd8
 8014e30:	40080000 	.word	0x40080000

08014e34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b084      	sub	sp, #16
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e40:	2300      	movs	r3, #0
 8014e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7ef ffe3 	bl	8004e16 <HAL_PCD_Start>
 8014e50:	4603      	mov	r3, r0
 8014e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e54:	7bfb      	ldrb	r3, [r7, #15]
 8014e56:	4618      	mov	r0, r3
 8014e58:	f000 f962 	bl	8015120 <USBD_Get_USB_Status>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3710      	adds	r7, #16
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}

08014e6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014e6a:	b580      	push	{r7, lr}
 8014e6c:	b084      	sub	sp, #16
 8014e6e:	af00      	add	r7, sp, #0
 8014e70:	6078      	str	r0, [r7, #4]
 8014e72:	4608      	mov	r0, r1
 8014e74:	4611      	mov	r1, r2
 8014e76:	461a      	mov	r2, r3
 8014e78:	4603      	mov	r3, r0
 8014e7a:	70fb      	strb	r3, [r7, #3]
 8014e7c:	460b      	mov	r3, r1
 8014e7e:	70bb      	strb	r3, [r7, #2]
 8014e80:	4613      	mov	r3, r2
 8014e82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e84:	2300      	movs	r3, #0
 8014e86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014e92:	78bb      	ldrb	r3, [r7, #2]
 8014e94:	883a      	ldrh	r2, [r7, #0]
 8014e96:	78f9      	ldrb	r1, [r7, #3]
 8014e98:	f7f0 fce4 	bl	8005864 <HAL_PCD_EP_Open>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ea0:	7bfb      	ldrb	r3, [r7, #15]
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f000 f93c 	bl	8015120 <USBD_Get_USB_Status>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3710      	adds	r7, #16
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}

08014eb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014eb6:	b580      	push	{r7, lr}
 8014eb8:	b084      	sub	sp, #16
 8014eba:	af00      	add	r7, sp, #0
 8014ebc:	6078      	str	r0, [r7, #4]
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014ed0:	78fa      	ldrb	r2, [r7, #3]
 8014ed2:	4611      	mov	r1, r2
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f7f0 fd2d 	bl	8005934 <HAL_PCD_EP_Close>
 8014eda:	4603      	mov	r3, r0
 8014edc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ede:	7bfb      	ldrb	r3, [r7, #15]
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f000 f91d 	bl	8015120 <USBD_Get_USB_Status>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014eea:	7bbb      	ldrb	r3, [r7, #14]
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	3710      	adds	r7, #16
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}

08014ef4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	460b      	mov	r3, r1
 8014efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f00:	2300      	movs	r3, #0
 8014f02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f04:	2300      	movs	r3, #0
 8014f06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014f0e:	78fa      	ldrb	r2, [r7, #3]
 8014f10:	4611      	mov	r1, r2
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7f0 fecf 	bl	8005cb6 <HAL_PCD_EP_Flush>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f1c:	7bfb      	ldrb	r3, [r7, #15]
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f000 f8fe 	bl	8015120 <USBD_Get_USB_Status>
 8014f24:	4603      	mov	r3, r0
 8014f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	3710      	adds	r7, #16
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}

08014f32 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f32:	b580      	push	{r7, lr}
 8014f34:	b084      	sub	sp, #16
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	6078      	str	r0, [r7, #4]
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f42:	2300      	movs	r3, #0
 8014f44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014f4c:	78fa      	ldrb	r2, [r7, #3]
 8014f4e:	4611      	mov	r1, r2
 8014f50:	4618      	mov	r0, r3
 8014f52:	f7f0 fdc6 	bl	8005ae2 <HAL_PCD_EP_SetStall>
 8014f56:	4603      	mov	r3, r0
 8014f58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f5a:	7bfb      	ldrb	r3, [r7, #15]
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f000 f8df 	bl	8015120 <USBD_Get_USB_Status>
 8014f62:	4603      	mov	r3, r0
 8014f64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f66:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f68:	4618      	mov	r0, r3
 8014f6a:	3710      	adds	r7, #16
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	bd80      	pop	{r7, pc}

08014f70 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b084      	sub	sp, #16
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	460b      	mov	r3, r1
 8014f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f80:	2300      	movs	r3, #0
 8014f82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014f8a:	78fa      	ldrb	r2, [r7, #3]
 8014f8c:	4611      	mov	r1, r2
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7f0 fe0a 	bl	8005ba8 <HAL_PCD_EP_ClrStall>
 8014f94:	4603      	mov	r3, r0
 8014f96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f98:	7bfb      	ldrb	r3, [r7, #15]
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f000 f8c0 	bl	8015120 <USBD_Get_USB_Status>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014fa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3710      	adds	r7, #16
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}

08014fae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014fae:	b480      	push	{r7}
 8014fb0:	b085      	sub	sp, #20
 8014fb2:	af00      	add	r7, sp, #0
 8014fb4:	6078      	str	r0, [r7, #4]
 8014fb6:	460b      	mov	r3, r1
 8014fb8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014fc0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	da0b      	bge.n	8014fe2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014fca:	78fb      	ldrb	r3, [r7, #3]
 8014fcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014fd0:	68f9      	ldr	r1, [r7, #12]
 8014fd2:	4613      	mov	r3, r2
 8014fd4:	00db      	lsls	r3, r3, #3
 8014fd6:	4413      	add	r3, r2
 8014fd8:	009b      	lsls	r3, r3, #2
 8014fda:	440b      	add	r3, r1
 8014fdc:	3316      	adds	r3, #22
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	e00b      	b.n	8014ffa <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014fe2:	78fb      	ldrb	r3, [r7, #3]
 8014fe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014fe8:	68f9      	ldr	r1, [r7, #12]
 8014fea:	4613      	mov	r3, r2
 8014fec:	00db      	lsls	r3, r3, #3
 8014fee:	4413      	add	r3, r2
 8014ff0:	009b      	lsls	r3, r3, #2
 8014ff2:	440b      	add	r3, r1
 8014ff4:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8014ff8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	3714      	adds	r7, #20
 8014ffe:	46bd      	mov	sp, r7
 8015000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015004:	4770      	bx	lr

08015006 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015006:	b580      	push	{r7, lr}
 8015008:	b084      	sub	sp, #16
 801500a:	af00      	add	r7, sp, #0
 801500c:	6078      	str	r0, [r7, #4]
 801500e:	460b      	mov	r3, r1
 8015010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015012:	2300      	movs	r3, #0
 8015014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015016:	2300      	movs	r3, #0
 8015018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015020:	78fa      	ldrb	r2, [r7, #3]
 8015022:	4611      	mov	r1, r2
 8015024:	4618      	mov	r0, r3
 8015026:	f7f0 fbf9 	bl	800581c <HAL_PCD_SetAddress>
 801502a:	4603      	mov	r3, r0
 801502c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801502e:	7bfb      	ldrb	r3, [r7, #15]
 8015030:	4618      	mov	r0, r3
 8015032:	f000 f875 	bl	8015120 <USBD_Get_USB_Status>
 8015036:	4603      	mov	r3, r0
 8015038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801503a:	7bbb      	ldrb	r3, [r7, #14]
}
 801503c:	4618      	mov	r0, r3
 801503e:	3710      	adds	r7, #16
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}

08015044 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b086      	sub	sp, #24
 8015048:	af00      	add	r7, sp, #0
 801504a:	60f8      	str	r0, [r7, #12]
 801504c:	607a      	str	r2, [r7, #4]
 801504e:	603b      	str	r3, [r7, #0]
 8015050:	460b      	mov	r3, r1
 8015052:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015054:	2300      	movs	r3, #0
 8015056:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015058:	2300      	movs	r3, #0
 801505a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015062:	7af9      	ldrb	r1, [r7, #11]
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	f7f0 fd01 	bl	8005a6e <HAL_PCD_EP_Transmit>
 801506c:	4603      	mov	r3, r0
 801506e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015070:	7dfb      	ldrb	r3, [r7, #23]
 8015072:	4618      	mov	r0, r3
 8015074:	f000 f854 	bl	8015120 <USBD_Get_USB_Status>
 8015078:	4603      	mov	r3, r0
 801507a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801507c:	7dbb      	ldrb	r3, [r7, #22]
}
 801507e:	4618      	mov	r0, r3
 8015080:	3718      	adds	r7, #24
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}

08015086 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015086:	b580      	push	{r7, lr}
 8015088:	b086      	sub	sp, #24
 801508a:	af00      	add	r7, sp, #0
 801508c:	60f8      	str	r0, [r7, #12]
 801508e:	607a      	str	r2, [r7, #4]
 8015090:	603b      	str	r3, [r7, #0]
 8015092:	460b      	mov	r3, r1
 8015094:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015096:	2300      	movs	r3, #0
 8015098:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801509a:	2300      	movs	r3, #0
 801509c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80150a4:	7af9      	ldrb	r1, [r7, #11]
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	687a      	ldr	r2, [r7, #4]
 80150aa:	f7f0 fc8d 	bl	80059c8 <HAL_PCD_EP_Receive>
 80150ae:	4603      	mov	r3, r0
 80150b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150b2:	7dfb      	ldrb	r3, [r7, #23]
 80150b4:	4618      	mov	r0, r3
 80150b6:	f000 f833 	bl	8015120 <USBD_Get_USB_Status>
 80150ba:	4603      	mov	r3, r0
 80150bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80150be:	7dbb      	ldrb	r3, [r7, #22]
}
 80150c0:	4618      	mov	r0, r3
 80150c2:	3718      	adds	r7, #24
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
 80150d0:	460b      	mov	r3, r1
 80150d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80150da:	78fa      	ldrb	r2, [r7, #3]
 80150dc:	4611      	mov	r1, r2
 80150de:	4618      	mov	r0, r3
 80150e0:	f7f0 fcad 	bl	8005a3e <HAL_PCD_EP_GetRxCount>
 80150e4:	4603      	mov	r3, r0
}
 80150e6:	4618      	mov	r0, r3
 80150e8:	3708      	adds	r7, #8
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
	...

080150f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80150f0:	b480      	push	{r7}
 80150f2:	b083      	sub	sp, #12
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80150f8:	4b03      	ldr	r3, [pc, #12]	@ (8015108 <USBD_static_malloc+0x18>)
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	370c      	adds	r7, #12
 80150fe:	46bd      	mov	sp, r7
 8015100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop
 8015108:	240014bc 	.word	0x240014bc

0801510c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801510c:	b480      	push	{r7}
 801510e:	b083      	sub	sp, #12
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015114:	bf00      	nop
 8015116:	370c      	adds	r7, #12
 8015118:	46bd      	mov	sp, r7
 801511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511e:	4770      	bx	lr

08015120 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015120:	b480      	push	{r7}
 8015122:	b085      	sub	sp, #20
 8015124:	af00      	add	r7, sp, #0
 8015126:	4603      	mov	r3, r0
 8015128:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801512a:	2300      	movs	r3, #0
 801512c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801512e:	79fb      	ldrb	r3, [r7, #7]
 8015130:	2b03      	cmp	r3, #3
 8015132:	d817      	bhi.n	8015164 <USBD_Get_USB_Status+0x44>
 8015134:	a201      	add	r2, pc, #4	@ (adr r2, 801513c <USBD_Get_USB_Status+0x1c>)
 8015136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801513a:	bf00      	nop
 801513c:	0801514d 	.word	0x0801514d
 8015140:	08015153 	.word	0x08015153
 8015144:	08015159 	.word	0x08015159
 8015148:	0801515f 	.word	0x0801515f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801514c:	2300      	movs	r3, #0
 801514e:	73fb      	strb	r3, [r7, #15]
    break;
 8015150:	e00b      	b.n	801516a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015152:	2303      	movs	r3, #3
 8015154:	73fb      	strb	r3, [r7, #15]
    break;
 8015156:	e008      	b.n	801516a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015158:	2301      	movs	r3, #1
 801515a:	73fb      	strb	r3, [r7, #15]
    break;
 801515c:	e005      	b.n	801516a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801515e:	2303      	movs	r3, #3
 8015160:	73fb      	strb	r3, [r7, #15]
    break;
 8015162:	e002      	b.n	801516a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015164:	2303      	movs	r3, #3
 8015166:	73fb      	strb	r3, [r7, #15]
    break;
 8015168:	bf00      	nop
  }
  return usb_status;
 801516a:	7bfb      	ldrb	r3, [r7, #15]
}
 801516c:	4618      	mov	r0, r3
 801516e:	3714      	adds	r7, #20
 8015170:	46bd      	mov	sp, r7
 8015172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015176:	4770      	bx	lr

08015178 <__cvt>:
 8015178:	b5f0      	push	{r4, r5, r6, r7, lr}
 801517a:	ed2d 8b02 	vpush	{d8}
 801517e:	eeb0 8b40 	vmov.f64	d8, d0
 8015182:	b085      	sub	sp, #20
 8015184:	4617      	mov	r7, r2
 8015186:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015188:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801518a:	ee18 2a90 	vmov	r2, s17
 801518e:	f025 0520 	bic.w	r5, r5, #32
 8015192:	2a00      	cmp	r2, #0
 8015194:	bfb6      	itet	lt
 8015196:	222d      	movlt	r2, #45	@ 0x2d
 8015198:	2200      	movge	r2, #0
 801519a:	eeb1 8b40 	vneglt.f64	d8, d0
 801519e:	2d46      	cmp	r5, #70	@ 0x46
 80151a0:	460c      	mov	r4, r1
 80151a2:	701a      	strb	r2, [r3, #0]
 80151a4:	d004      	beq.n	80151b0 <__cvt+0x38>
 80151a6:	2d45      	cmp	r5, #69	@ 0x45
 80151a8:	d100      	bne.n	80151ac <__cvt+0x34>
 80151aa:	3401      	adds	r4, #1
 80151ac:	2102      	movs	r1, #2
 80151ae:	e000      	b.n	80151b2 <__cvt+0x3a>
 80151b0:	2103      	movs	r1, #3
 80151b2:	ab03      	add	r3, sp, #12
 80151b4:	9301      	str	r3, [sp, #4]
 80151b6:	ab02      	add	r3, sp, #8
 80151b8:	9300      	str	r3, [sp, #0]
 80151ba:	4622      	mov	r2, r4
 80151bc:	4633      	mov	r3, r6
 80151be:	eeb0 0b48 	vmov.f64	d0, d8
 80151c2:	f000 fe15 	bl	8015df0 <_dtoa_r>
 80151c6:	2d47      	cmp	r5, #71	@ 0x47
 80151c8:	d114      	bne.n	80151f4 <__cvt+0x7c>
 80151ca:	07fb      	lsls	r3, r7, #31
 80151cc:	d50a      	bpl.n	80151e4 <__cvt+0x6c>
 80151ce:	1902      	adds	r2, r0, r4
 80151d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80151d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151d8:	bf08      	it	eq
 80151da:	9203      	streq	r2, [sp, #12]
 80151dc:	2130      	movs	r1, #48	@ 0x30
 80151de:	9b03      	ldr	r3, [sp, #12]
 80151e0:	4293      	cmp	r3, r2
 80151e2:	d319      	bcc.n	8015218 <__cvt+0xa0>
 80151e4:	9b03      	ldr	r3, [sp, #12]
 80151e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80151e8:	1a1b      	subs	r3, r3, r0
 80151ea:	6013      	str	r3, [r2, #0]
 80151ec:	b005      	add	sp, #20
 80151ee:	ecbd 8b02 	vpop	{d8}
 80151f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151f4:	2d46      	cmp	r5, #70	@ 0x46
 80151f6:	eb00 0204 	add.w	r2, r0, r4
 80151fa:	d1e9      	bne.n	80151d0 <__cvt+0x58>
 80151fc:	7803      	ldrb	r3, [r0, #0]
 80151fe:	2b30      	cmp	r3, #48	@ 0x30
 8015200:	d107      	bne.n	8015212 <__cvt+0x9a>
 8015202:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801520a:	bf1c      	itt	ne
 801520c:	f1c4 0401 	rsbne	r4, r4, #1
 8015210:	6034      	strne	r4, [r6, #0]
 8015212:	6833      	ldr	r3, [r6, #0]
 8015214:	441a      	add	r2, r3
 8015216:	e7db      	b.n	80151d0 <__cvt+0x58>
 8015218:	1c5c      	adds	r4, r3, #1
 801521a:	9403      	str	r4, [sp, #12]
 801521c:	7019      	strb	r1, [r3, #0]
 801521e:	e7de      	b.n	80151de <__cvt+0x66>

08015220 <__exponent>:
 8015220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015222:	2900      	cmp	r1, #0
 8015224:	bfba      	itte	lt
 8015226:	4249      	neglt	r1, r1
 8015228:	232d      	movlt	r3, #45	@ 0x2d
 801522a:	232b      	movge	r3, #43	@ 0x2b
 801522c:	2909      	cmp	r1, #9
 801522e:	7002      	strb	r2, [r0, #0]
 8015230:	7043      	strb	r3, [r0, #1]
 8015232:	dd29      	ble.n	8015288 <__exponent+0x68>
 8015234:	f10d 0307 	add.w	r3, sp, #7
 8015238:	461d      	mov	r5, r3
 801523a:	270a      	movs	r7, #10
 801523c:	461a      	mov	r2, r3
 801523e:	fbb1 f6f7 	udiv	r6, r1, r7
 8015242:	fb07 1416 	mls	r4, r7, r6, r1
 8015246:	3430      	adds	r4, #48	@ 0x30
 8015248:	f802 4c01 	strb.w	r4, [r2, #-1]
 801524c:	460c      	mov	r4, r1
 801524e:	2c63      	cmp	r4, #99	@ 0x63
 8015250:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8015254:	4631      	mov	r1, r6
 8015256:	dcf1      	bgt.n	801523c <__exponent+0x1c>
 8015258:	3130      	adds	r1, #48	@ 0x30
 801525a:	1e94      	subs	r4, r2, #2
 801525c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015260:	1c41      	adds	r1, r0, #1
 8015262:	4623      	mov	r3, r4
 8015264:	42ab      	cmp	r3, r5
 8015266:	d30a      	bcc.n	801527e <__exponent+0x5e>
 8015268:	f10d 0309 	add.w	r3, sp, #9
 801526c:	1a9b      	subs	r3, r3, r2
 801526e:	42ac      	cmp	r4, r5
 8015270:	bf88      	it	hi
 8015272:	2300      	movhi	r3, #0
 8015274:	3302      	adds	r3, #2
 8015276:	4403      	add	r3, r0
 8015278:	1a18      	subs	r0, r3, r0
 801527a:	b003      	add	sp, #12
 801527c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801527e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015282:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015286:	e7ed      	b.n	8015264 <__exponent+0x44>
 8015288:	2330      	movs	r3, #48	@ 0x30
 801528a:	3130      	adds	r1, #48	@ 0x30
 801528c:	7083      	strb	r3, [r0, #2]
 801528e:	70c1      	strb	r1, [r0, #3]
 8015290:	1d03      	adds	r3, r0, #4
 8015292:	e7f1      	b.n	8015278 <__exponent+0x58>
 8015294:	0000      	movs	r0, r0
	...

08015298 <_printf_float>:
 8015298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801529c:	b08d      	sub	sp, #52	@ 0x34
 801529e:	460c      	mov	r4, r1
 80152a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80152a4:	4616      	mov	r6, r2
 80152a6:	461f      	mov	r7, r3
 80152a8:	4605      	mov	r5, r0
 80152aa:	f000 fcd7 	bl	8015c5c <_localeconv_r>
 80152ae:	f8d0 b000 	ldr.w	fp, [r0]
 80152b2:	4658      	mov	r0, fp
 80152b4:	f7eb f864 	bl	8000380 <strlen>
 80152b8:	2300      	movs	r3, #0
 80152ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80152bc:	f8d8 3000 	ldr.w	r3, [r8]
 80152c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80152c4:	6822      	ldr	r2, [r4, #0]
 80152c6:	9005      	str	r0, [sp, #20]
 80152c8:	3307      	adds	r3, #7
 80152ca:	f023 0307 	bic.w	r3, r3, #7
 80152ce:	f103 0108 	add.w	r1, r3, #8
 80152d2:	f8c8 1000 	str.w	r1, [r8]
 80152d6:	ed93 0b00 	vldr	d0, [r3]
 80152da:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8015538 <_printf_float+0x2a0>
 80152de:	eeb0 7bc0 	vabs.f64	d7, d0
 80152e2:	eeb4 7b46 	vcmp.f64	d7, d6
 80152e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80152ee:	dd24      	ble.n	801533a <_printf_float+0xa2>
 80152f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80152f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f8:	d502      	bpl.n	8015300 <_printf_float+0x68>
 80152fa:	232d      	movs	r3, #45	@ 0x2d
 80152fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015300:	498f      	ldr	r1, [pc, #572]	@ (8015540 <_printf_float+0x2a8>)
 8015302:	4b90      	ldr	r3, [pc, #576]	@ (8015544 <_printf_float+0x2ac>)
 8015304:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8015308:	bf94      	ite	ls
 801530a:	4688      	movls	r8, r1
 801530c:	4698      	movhi	r8, r3
 801530e:	f022 0204 	bic.w	r2, r2, #4
 8015312:	2303      	movs	r3, #3
 8015314:	6123      	str	r3, [r4, #16]
 8015316:	6022      	str	r2, [r4, #0]
 8015318:	f04f 0a00 	mov.w	sl, #0
 801531c:	9700      	str	r7, [sp, #0]
 801531e:	4633      	mov	r3, r6
 8015320:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015322:	4621      	mov	r1, r4
 8015324:	4628      	mov	r0, r5
 8015326:	f000 f9d1 	bl	80156cc <_printf_common>
 801532a:	3001      	adds	r0, #1
 801532c:	f040 8089 	bne.w	8015442 <_printf_float+0x1aa>
 8015330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015334:	b00d      	add	sp, #52	@ 0x34
 8015336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801533a:	eeb4 0b40 	vcmp.f64	d0, d0
 801533e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015342:	d709      	bvc.n	8015358 <_printf_float+0xc0>
 8015344:	ee10 3a90 	vmov	r3, s1
 8015348:	2b00      	cmp	r3, #0
 801534a:	bfbc      	itt	lt
 801534c:	232d      	movlt	r3, #45	@ 0x2d
 801534e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8015352:	497d      	ldr	r1, [pc, #500]	@ (8015548 <_printf_float+0x2b0>)
 8015354:	4b7d      	ldr	r3, [pc, #500]	@ (801554c <_printf_float+0x2b4>)
 8015356:	e7d5      	b.n	8015304 <_printf_float+0x6c>
 8015358:	6863      	ldr	r3, [r4, #4]
 801535a:	1c59      	adds	r1, r3, #1
 801535c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8015360:	d139      	bne.n	80153d6 <_printf_float+0x13e>
 8015362:	2306      	movs	r3, #6
 8015364:	6063      	str	r3, [r4, #4]
 8015366:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801536a:	2300      	movs	r3, #0
 801536c:	6022      	str	r2, [r4, #0]
 801536e:	9303      	str	r3, [sp, #12]
 8015370:	ab0a      	add	r3, sp, #40	@ 0x28
 8015372:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8015376:	ab09      	add	r3, sp, #36	@ 0x24
 8015378:	9300      	str	r3, [sp, #0]
 801537a:	6861      	ldr	r1, [r4, #4]
 801537c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8015380:	4628      	mov	r0, r5
 8015382:	f7ff fef9 	bl	8015178 <__cvt>
 8015386:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801538a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801538c:	4680      	mov	r8, r0
 801538e:	d129      	bne.n	80153e4 <_printf_float+0x14c>
 8015390:	1cc8      	adds	r0, r1, #3
 8015392:	db02      	blt.n	801539a <_printf_float+0x102>
 8015394:	6863      	ldr	r3, [r4, #4]
 8015396:	4299      	cmp	r1, r3
 8015398:	dd41      	ble.n	801541e <_printf_float+0x186>
 801539a:	f1a9 0902 	sub.w	r9, r9, #2
 801539e:	fa5f f989 	uxtb.w	r9, r9
 80153a2:	3901      	subs	r1, #1
 80153a4:	464a      	mov	r2, r9
 80153a6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80153aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80153ac:	f7ff ff38 	bl	8015220 <__exponent>
 80153b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80153b2:	1813      	adds	r3, r2, r0
 80153b4:	2a01      	cmp	r2, #1
 80153b6:	4682      	mov	sl, r0
 80153b8:	6123      	str	r3, [r4, #16]
 80153ba:	dc02      	bgt.n	80153c2 <_printf_float+0x12a>
 80153bc:	6822      	ldr	r2, [r4, #0]
 80153be:	07d2      	lsls	r2, r2, #31
 80153c0:	d501      	bpl.n	80153c6 <_printf_float+0x12e>
 80153c2:	3301      	adds	r3, #1
 80153c4:	6123      	str	r3, [r4, #16]
 80153c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d0a6      	beq.n	801531c <_printf_float+0x84>
 80153ce:	232d      	movs	r3, #45	@ 0x2d
 80153d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80153d4:	e7a2      	b.n	801531c <_printf_float+0x84>
 80153d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80153da:	d1c4      	bne.n	8015366 <_printf_float+0xce>
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d1c2      	bne.n	8015366 <_printf_float+0xce>
 80153e0:	2301      	movs	r3, #1
 80153e2:	e7bf      	b.n	8015364 <_printf_float+0xcc>
 80153e4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80153e8:	d9db      	bls.n	80153a2 <_printf_float+0x10a>
 80153ea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80153ee:	d118      	bne.n	8015422 <_printf_float+0x18a>
 80153f0:	2900      	cmp	r1, #0
 80153f2:	6863      	ldr	r3, [r4, #4]
 80153f4:	dd0b      	ble.n	801540e <_printf_float+0x176>
 80153f6:	6121      	str	r1, [r4, #16]
 80153f8:	b913      	cbnz	r3, 8015400 <_printf_float+0x168>
 80153fa:	6822      	ldr	r2, [r4, #0]
 80153fc:	07d0      	lsls	r0, r2, #31
 80153fe:	d502      	bpl.n	8015406 <_printf_float+0x16e>
 8015400:	3301      	adds	r3, #1
 8015402:	440b      	add	r3, r1
 8015404:	6123      	str	r3, [r4, #16]
 8015406:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015408:	f04f 0a00 	mov.w	sl, #0
 801540c:	e7db      	b.n	80153c6 <_printf_float+0x12e>
 801540e:	b913      	cbnz	r3, 8015416 <_printf_float+0x17e>
 8015410:	6822      	ldr	r2, [r4, #0]
 8015412:	07d2      	lsls	r2, r2, #31
 8015414:	d501      	bpl.n	801541a <_printf_float+0x182>
 8015416:	3302      	adds	r3, #2
 8015418:	e7f4      	b.n	8015404 <_printf_float+0x16c>
 801541a:	2301      	movs	r3, #1
 801541c:	e7f2      	b.n	8015404 <_printf_float+0x16c>
 801541e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8015422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015424:	4299      	cmp	r1, r3
 8015426:	db05      	blt.n	8015434 <_printf_float+0x19c>
 8015428:	6823      	ldr	r3, [r4, #0]
 801542a:	6121      	str	r1, [r4, #16]
 801542c:	07d8      	lsls	r0, r3, #31
 801542e:	d5ea      	bpl.n	8015406 <_printf_float+0x16e>
 8015430:	1c4b      	adds	r3, r1, #1
 8015432:	e7e7      	b.n	8015404 <_printf_float+0x16c>
 8015434:	2900      	cmp	r1, #0
 8015436:	bfd4      	ite	le
 8015438:	f1c1 0202 	rsble	r2, r1, #2
 801543c:	2201      	movgt	r2, #1
 801543e:	4413      	add	r3, r2
 8015440:	e7e0      	b.n	8015404 <_printf_float+0x16c>
 8015442:	6823      	ldr	r3, [r4, #0]
 8015444:	055a      	lsls	r2, r3, #21
 8015446:	d407      	bmi.n	8015458 <_printf_float+0x1c0>
 8015448:	6923      	ldr	r3, [r4, #16]
 801544a:	4642      	mov	r2, r8
 801544c:	4631      	mov	r1, r6
 801544e:	4628      	mov	r0, r5
 8015450:	47b8      	blx	r7
 8015452:	3001      	adds	r0, #1
 8015454:	d12a      	bne.n	80154ac <_printf_float+0x214>
 8015456:	e76b      	b.n	8015330 <_printf_float+0x98>
 8015458:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801545c:	f240 80e0 	bls.w	8015620 <_printf_float+0x388>
 8015460:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015464:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801546c:	d133      	bne.n	80154d6 <_printf_float+0x23e>
 801546e:	4a38      	ldr	r2, [pc, #224]	@ (8015550 <_printf_float+0x2b8>)
 8015470:	2301      	movs	r3, #1
 8015472:	4631      	mov	r1, r6
 8015474:	4628      	mov	r0, r5
 8015476:	47b8      	blx	r7
 8015478:	3001      	adds	r0, #1
 801547a:	f43f af59 	beq.w	8015330 <_printf_float+0x98>
 801547e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8015482:	4543      	cmp	r3, r8
 8015484:	db02      	blt.n	801548c <_printf_float+0x1f4>
 8015486:	6823      	ldr	r3, [r4, #0]
 8015488:	07d8      	lsls	r0, r3, #31
 801548a:	d50f      	bpl.n	80154ac <_printf_float+0x214>
 801548c:	9b05      	ldr	r3, [sp, #20]
 801548e:	465a      	mov	r2, fp
 8015490:	4631      	mov	r1, r6
 8015492:	4628      	mov	r0, r5
 8015494:	47b8      	blx	r7
 8015496:	3001      	adds	r0, #1
 8015498:	f43f af4a 	beq.w	8015330 <_printf_float+0x98>
 801549c:	f04f 0900 	mov.w	r9, #0
 80154a0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80154a4:	f104 0a1a 	add.w	sl, r4, #26
 80154a8:	45c8      	cmp	r8, r9
 80154aa:	dc09      	bgt.n	80154c0 <_printf_float+0x228>
 80154ac:	6823      	ldr	r3, [r4, #0]
 80154ae:	079b      	lsls	r3, r3, #30
 80154b0:	f100 8107 	bmi.w	80156c2 <_printf_float+0x42a>
 80154b4:	68e0      	ldr	r0, [r4, #12]
 80154b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154b8:	4298      	cmp	r0, r3
 80154ba:	bfb8      	it	lt
 80154bc:	4618      	movlt	r0, r3
 80154be:	e739      	b.n	8015334 <_printf_float+0x9c>
 80154c0:	2301      	movs	r3, #1
 80154c2:	4652      	mov	r2, sl
 80154c4:	4631      	mov	r1, r6
 80154c6:	4628      	mov	r0, r5
 80154c8:	47b8      	blx	r7
 80154ca:	3001      	adds	r0, #1
 80154cc:	f43f af30 	beq.w	8015330 <_printf_float+0x98>
 80154d0:	f109 0901 	add.w	r9, r9, #1
 80154d4:	e7e8      	b.n	80154a8 <_printf_float+0x210>
 80154d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154d8:	2b00      	cmp	r3, #0
 80154da:	dc3b      	bgt.n	8015554 <_printf_float+0x2bc>
 80154dc:	4a1c      	ldr	r2, [pc, #112]	@ (8015550 <_printf_float+0x2b8>)
 80154de:	2301      	movs	r3, #1
 80154e0:	4631      	mov	r1, r6
 80154e2:	4628      	mov	r0, r5
 80154e4:	47b8      	blx	r7
 80154e6:	3001      	adds	r0, #1
 80154e8:	f43f af22 	beq.w	8015330 <_printf_float+0x98>
 80154ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80154f0:	ea59 0303 	orrs.w	r3, r9, r3
 80154f4:	d102      	bne.n	80154fc <_printf_float+0x264>
 80154f6:	6823      	ldr	r3, [r4, #0]
 80154f8:	07d9      	lsls	r1, r3, #31
 80154fa:	d5d7      	bpl.n	80154ac <_printf_float+0x214>
 80154fc:	9b05      	ldr	r3, [sp, #20]
 80154fe:	465a      	mov	r2, fp
 8015500:	4631      	mov	r1, r6
 8015502:	4628      	mov	r0, r5
 8015504:	47b8      	blx	r7
 8015506:	3001      	adds	r0, #1
 8015508:	f43f af12 	beq.w	8015330 <_printf_float+0x98>
 801550c:	f04f 0a00 	mov.w	sl, #0
 8015510:	f104 0b1a 	add.w	fp, r4, #26
 8015514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015516:	425b      	negs	r3, r3
 8015518:	4553      	cmp	r3, sl
 801551a:	dc01      	bgt.n	8015520 <_printf_float+0x288>
 801551c:	464b      	mov	r3, r9
 801551e:	e794      	b.n	801544a <_printf_float+0x1b2>
 8015520:	2301      	movs	r3, #1
 8015522:	465a      	mov	r2, fp
 8015524:	4631      	mov	r1, r6
 8015526:	4628      	mov	r0, r5
 8015528:	47b8      	blx	r7
 801552a:	3001      	adds	r0, #1
 801552c:	f43f af00 	beq.w	8015330 <_printf_float+0x98>
 8015530:	f10a 0a01 	add.w	sl, sl, #1
 8015534:	e7ee      	b.n	8015514 <_printf_float+0x27c>
 8015536:	bf00      	nop
 8015538:	ffffffff 	.word	0xffffffff
 801553c:	7fefffff 	.word	0x7fefffff
 8015540:	08017e5c 	.word	0x08017e5c
 8015544:	08017e60 	.word	0x08017e60
 8015548:	08017e64 	.word	0x08017e64
 801554c:	08017e68 	.word	0x08017e68
 8015550:	08017e6c 	.word	0x08017e6c
 8015554:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015556:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801555a:	4553      	cmp	r3, sl
 801555c:	bfa8      	it	ge
 801555e:	4653      	movge	r3, sl
 8015560:	2b00      	cmp	r3, #0
 8015562:	4699      	mov	r9, r3
 8015564:	dc37      	bgt.n	80155d6 <_printf_float+0x33e>
 8015566:	2300      	movs	r3, #0
 8015568:	9307      	str	r3, [sp, #28]
 801556a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801556e:	f104 021a 	add.w	r2, r4, #26
 8015572:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015574:	9907      	ldr	r1, [sp, #28]
 8015576:	9306      	str	r3, [sp, #24]
 8015578:	eba3 0309 	sub.w	r3, r3, r9
 801557c:	428b      	cmp	r3, r1
 801557e:	dc31      	bgt.n	80155e4 <_printf_float+0x34c>
 8015580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015582:	459a      	cmp	sl, r3
 8015584:	dc3b      	bgt.n	80155fe <_printf_float+0x366>
 8015586:	6823      	ldr	r3, [r4, #0]
 8015588:	07da      	lsls	r2, r3, #31
 801558a:	d438      	bmi.n	80155fe <_printf_float+0x366>
 801558c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801558e:	ebaa 0903 	sub.w	r9, sl, r3
 8015592:	9b06      	ldr	r3, [sp, #24]
 8015594:	ebaa 0303 	sub.w	r3, sl, r3
 8015598:	4599      	cmp	r9, r3
 801559a:	bfa8      	it	ge
 801559c:	4699      	movge	r9, r3
 801559e:	f1b9 0f00 	cmp.w	r9, #0
 80155a2:	dc34      	bgt.n	801560e <_printf_float+0x376>
 80155a4:	f04f 0800 	mov.w	r8, #0
 80155a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80155ac:	f104 0b1a 	add.w	fp, r4, #26
 80155b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155b2:	ebaa 0303 	sub.w	r3, sl, r3
 80155b6:	eba3 0309 	sub.w	r3, r3, r9
 80155ba:	4543      	cmp	r3, r8
 80155bc:	f77f af76 	ble.w	80154ac <_printf_float+0x214>
 80155c0:	2301      	movs	r3, #1
 80155c2:	465a      	mov	r2, fp
 80155c4:	4631      	mov	r1, r6
 80155c6:	4628      	mov	r0, r5
 80155c8:	47b8      	blx	r7
 80155ca:	3001      	adds	r0, #1
 80155cc:	f43f aeb0 	beq.w	8015330 <_printf_float+0x98>
 80155d0:	f108 0801 	add.w	r8, r8, #1
 80155d4:	e7ec      	b.n	80155b0 <_printf_float+0x318>
 80155d6:	4642      	mov	r2, r8
 80155d8:	4631      	mov	r1, r6
 80155da:	4628      	mov	r0, r5
 80155dc:	47b8      	blx	r7
 80155de:	3001      	adds	r0, #1
 80155e0:	d1c1      	bne.n	8015566 <_printf_float+0x2ce>
 80155e2:	e6a5      	b.n	8015330 <_printf_float+0x98>
 80155e4:	2301      	movs	r3, #1
 80155e6:	4631      	mov	r1, r6
 80155e8:	4628      	mov	r0, r5
 80155ea:	9206      	str	r2, [sp, #24]
 80155ec:	47b8      	blx	r7
 80155ee:	3001      	adds	r0, #1
 80155f0:	f43f ae9e 	beq.w	8015330 <_printf_float+0x98>
 80155f4:	9b07      	ldr	r3, [sp, #28]
 80155f6:	9a06      	ldr	r2, [sp, #24]
 80155f8:	3301      	adds	r3, #1
 80155fa:	9307      	str	r3, [sp, #28]
 80155fc:	e7b9      	b.n	8015572 <_printf_float+0x2da>
 80155fe:	9b05      	ldr	r3, [sp, #20]
 8015600:	465a      	mov	r2, fp
 8015602:	4631      	mov	r1, r6
 8015604:	4628      	mov	r0, r5
 8015606:	47b8      	blx	r7
 8015608:	3001      	adds	r0, #1
 801560a:	d1bf      	bne.n	801558c <_printf_float+0x2f4>
 801560c:	e690      	b.n	8015330 <_printf_float+0x98>
 801560e:	9a06      	ldr	r2, [sp, #24]
 8015610:	464b      	mov	r3, r9
 8015612:	4442      	add	r2, r8
 8015614:	4631      	mov	r1, r6
 8015616:	4628      	mov	r0, r5
 8015618:	47b8      	blx	r7
 801561a:	3001      	adds	r0, #1
 801561c:	d1c2      	bne.n	80155a4 <_printf_float+0x30c>
 801561e:	e687      	b.n	8015330 <_printf_float+0x98>
 8015620:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8015624:	f1b9 0f01 	cmp.w	r9, #1
 8015628:	dc01      	bgt.n	801562e <_printf_float+0x396>
 801562a:	07db      	lsls	r3, r3, #31
 801562c:	d536      	bpl.n	801569c <_printf_float+0x404>
 801562e:	2301      	movs	r3, #1
 8015630:	4642      	mov	r2, r8
 8015632:	4631      	mov	r1, r6
 8015634:	4628      	mov	r0, r5
 8015636:	47b8      	blx	r7
 8015638:	3001      	adds	r0, #1
 801563a:	f43f ae79 	beq.w	8015330 <_printf_float+0x98>
 801563e:	9b05      	ldr	r3, [sp, #20]
 8015640:	465a      	mov	r2, fp
 8015642:	4631      	mov	r1, r6
 8015644:	4628      	mov	r0, r5
 8015646:	47b8      	blx	r7
 8015648:	3001      	adds	r0, #1
 801564a:	f43f ae71 	beq.w	8015330 <_printf_float+0x98>
 801564e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015652:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801565a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801565e:	d018      	beq.n	8015692 <_printf_float+0x3fa>
 8015660:	464b      	mov	r3, r9
 8015662:	f108 0201 	add.w	r2, r8, #1
 8015666:	4631      	mov	r1, r6
 8015668:	4628      	mov	r0, r5
 801566a:	47b8      	blx	r7
 801566c:	3001      	adds	r0, #1
 801566e:	d10c      	bne.n	801568a <_printf_float+0x3f2>
 8015670:	e65e      	b.n	8015330 <_printf_float+0x98>
 8015672:	2301      	movs	r3, #1
 8015674:	465a      	mov	r2, fp
 8015676:	4631      	mov	r1, r6
 8015678:	4628      	mov	r0, r5
 801567a:	47b8      	blx	r7
 801567c:	3001      	adds	r0, #1
 801567e:	f43f ae57 	beq.w	8015330 <_printf_float+0x98>
 8015682:	f108 0801 	add.w	r8, r8, #1
 8015686:	45c8      	cmp	r8, r9
 8015688:	dbf3      	blt.n	8015672 <_printf_float+0x3da>
 801568a:	4653      	mov	r3, sl
 801568c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015690:	e6dc      	b.n	801544c <_printf_float+0x1b4>
 8015692:	f04f 0800 	mov.w	r8, #0
 8015696:	f104 0b1a 	add.w	fp, r4, #26
 801569a:	e7f4      	b.n	8015686 <_printf_float+0x3ee>
 801569c:	2301      	movs	r3, #1
 801569e:	4642      	mov	r2, r8
 80156a0:	e7e1      	b.n	8015666 <_printf_float+0x3ce>
 80156a2:	2301      	movs	r3, #1
 80156a4:	464a      	mov	r2, r9
 80156a6:	4631      	mov	r1, r6
 80156a8:	4628      	mov	r0, r5
 80156aa:	47b8      	blx	r7
 80156ac:	3001      	adds	r0, #1
 80156ae:	f43f ae3f 	beq.w	8015330 <_printf_float+0x98>
 80156b2:	f108 0801 	add.w	r8, r8, #1
 80156b6:	68e3      	ldr	r3, [r4, #12]
 80156b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80156ba:	1a5b      	subs	r3, r3, r1
 80156bc:	4543      	cmp	r3, r8
 80156be:	dcf0      	bgt.n	80156a2 <_printf_float+0x40a>
 80156c0:	e6f8      	b.n	80154b4 <_printf_float+0x21c>
 80156c2:	f04f 0800 	mov.w	r8, #0
 80156c6:	f104 0919 	add.w	r9, r4, #25
 80156ca:	e7f4      	b.n	80156b6 <_printf_float+0x41e>

080156cc <_printf_common>:
 80156cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156d0:	4616      	mov	r6, r2
 80156d2:	4698      	mov	r8, r3
 80156d4:	688a      	ldr	r2, [r1, #8]
 80156d6:	690b      	ldr	r3, [r1, #16]
 80156d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80156dc:	4293      	cmp	r3, r2
 80156de:	bfb8      	it	lt
 80156e0:	4613      	movlt	r3, r2
 80156e2:	6033      	str	r3, [r6, #0]
 80156e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80156e8:	4607      	mov	r7, r0
 80156ea:	460c      	mov	r4, r1
 80156ec:	b10a      	cbz	r2, 80156f2 <_printf_common+0x26>
 80156ee:	3301      	adds	r3, #1
 80156f0:	6033      	str	r3, [r6, #0]
 80156f2:	6823      	ldr	r3, [r4, #0]
 80156f4:	0699      	lsls	r1, r3, #26
 80156f6:	bf42      	ittt	mi
 80156f8:	6833      	ldrmi	r3, [r6, #0]
 80156fa:	3302      	addmi	r3, #2
 80156fc:	6033      	strmi	r3, [r6, #0]
 80156fe:	6825      	ldr	r5, [r4, #0]
 8015700:	f015 0506 	ands.w	r5, r5, #6
 8015704:	d106      	bne.n	8015714 <_printf_common+0x48>
 8015706:	f104 0a19 	add.w	sl, r4, #25
 801570a:	68e3      	ldr	r3, [r4, #12]
 801570c:	6832      	ldr	r2, [r6, #0]
 801570e:	1a9b      	subs	r3, r3, r2
 8015710:	42ab      	cmp	r3, r5
 8015712:	dc26      	bgt.n	8015762 <_printf_common+0x96>
 8015714:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015718:	6822      	ldr	r2, [r4, #0]
 801571a:	3b00      	subs	r3, #0
 801571c:	bf18      	it	ne
 801571e:	2301      	movne	r3, #1
 8015720:	0692      	lsls	r2, r2, #26
 8015722:	d42b      	bmi.n	801577c <_printf_common+0xb0>
 8015724:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015728:	4641      	mov	r1, r8
 801572a:	4638      	mov	r0, r7
 801572c:	47c8      	blx	r9
 801572e:	3001      	adds	r0, #1
 8015730:	d01e      	beq.n	8015770 <_printf_common+0xa4>
 8015732:	6823      	ldr	r3, [r4, #0]
 8015734:	6922      	ldr	r2, [r4, #16]
 8015736:	f003 0306 	and.w	r3, r3, #6
 801573a:	2b04      	cmp	r3, #4
 801573c:	bf02      	ittt	eq
 801573e:	68e5      	ldreq	r5, [r4, #12]
 8015740:	6833      	ldreq	r3, [r6, #0]
 8015742:	1aed      	subeq	r5, r5, r3
 8015744:	68a3      	ldr	r3, [r4, #8]
 8015746:	bf0c      	ite	eq
 8015748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801574c:	2500      	movne	r5, #0
 801574e:	4293      	cmp	r3, r2
 8015750:	bfc4      	itt	gt
 8015752:	1a9b      	subgt	r3, r3, r2
 8015754:	18ed      	addgt	r5, r5, r3
 8015756:	2600      	movs	r6, #0
 8015758:	341a      	adds	r4, #26
 801575a:	42b5      	cmp	r5, r6
 801575c:	d11a      	bne.n	8015794 <_printf_common+0xc8>
 801575e:	2000      	movs	r0, #0
 8015760:	e008      	b.n	8015774 <_printf_common+0xa8>
 8015762:	2301      	movs	r3, #1
 8015764:	4652      	mov	r2, sl
 8015766:	4641      	mov	r1, r8
 8015768:	4638      	mov	r0, r7
 801576a:	47c8      	blx	r9
 801576c:	3001      	adds	r0, #1
 801576e:	d103      	bne.n	8015778 <_printf_common+0xac>
 8015770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015778:	3501      	adds	r5, #1
 801577a:	e7c6      	b.n	801570a <_printf_common+0x3e>
 801577c:	18e1      	adds	r1, r4, r3
 801577e:	1c5a      	adds	r2, r3, #1
 8015780:	2030      	movs	r0, #48	@ 0x30
 8015782:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015786:	4422      	add	r2, r4
 8015788:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801578c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015790:	3302      	adds	r3, #2
 8015792:	e7c7      	b.n	8015724 <_printf_common+0x58>
 8015794:	2301      	movs	r3, #1
 8015796:	4622      	mov	r2, r4
 8015798:	4641      	mov	r1, r8
 801579a:	4638      	mov	r0, r7
 801579c:	47c8      	blx	r9
 801579e:	3001      	adds	r0, #1
 80157a0:	d0e6      	beq.n	8015770 <_printf_common+0xa4>
 80157a2:	3601      	adds	r6, #1
 80157a4:	e7d9      	b.n	801575a <_printf_common+0x8e>
	...

080157a8 <_printf_i>:
 80157a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80157ac:	7e0f      	ldrb	r7, [r1, #24]
 80157ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80157b0:	2f78      	cmp	r7, #120	@ 0x78
 80157b2:	4691      	mov	r9, r2
 80157b4:	4680      	mov	r8, r0
 80157b6:	460c      	mov	r4, r1
 80157b8:	469a      	mov	sl, r3
 80157ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80157be:	d807      	bhi.n	80157d0 <_printf_i+0x28>
 80157c0:	2f62      	cmp	r7, #98	@ 0x62
 80157c2:	d80a      	bhi.n	80157da <_printf_i+0x32>
 80157c4:	2f00      	cmp	r7, #0
 80157c6:	f000 80d2 	beq.w	801596e <_printf_i+0x1c6>
 80157ca:	2f58      	cmp	r7, #88	@ 0x58
 80157cc:	f000 80b9 	beq.w	8015942 <_printf_i+0x19a>
 80157d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80157d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80157d8:	e03a      	b.n	8015850 <_printf_i+0xa8>
 80157da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80157de:	2b15      	cmp	r3, #21
 80157e0:	d8f6      	bhi.n	80157d0 <_printf_i+0x28>
 80157e2:	a101      	add	r1, pc, #4	@ (adr r1, 80157e8 <_printf_i+0x40>)
 80157e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80157e8:	08015841 	.word	0x08015841
 80157ec:	08015855 	.word	0x08015855
 80157f0:	080157d1 	.word	0x080157d1
 80157f4:	080157d1 	.word	0x080157d1
 80157f8:	080157d1 	.word	0x080157d1
 80157fc:	080157d1 	.word	0x080157d1
 8015800:	08015855 	.word	0x08015855
 8015804:	080157d1 	.word	0x080157d1
 8015808:	080157d1 	.word	0x080157d1
 801580c:	080157d1 	.word	0x080157d1
 8015810:	080157d1 	.word	0x080157d1
 8015814:	08015955 	.word	0x08015955
 8015818:	0801587f 	.word	0x0801587f
 801581c:	0801590f 	.word	0x0801590f
 8015820:	080157d1 	.word	0x080157d1
 8015824:	080157d1 	.word	0x080157d1
 8015828:	08015977 	.word	0x08015977
 801582c:	080157d1 	.word	0x080157d1
 8015830:	0801587f 	.word	0x0801587f
 8015834:	080157d1 	.word	0x080157d1
 8015838:	080157d1 	.word	0x080157d1
 801583c:	08015917 	.word	0x08015917
 8015840:	6833      	ldr	r3, [r6, #0]
 8015842:	1d1a      	adds	r2, r3, #4
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	6032      	str	r2, [r6, #0]
 8015848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801584c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015850:	2301      	movs	r3, #1
 8015852:	e09d      	b.n	8015990 <_printf_i+0x1e8>
 8015854:	6833      	ldr	r3, [r6, #0]
 8015856:	6820      	ldr	r0, [r4, #0]
 8015858:	1d19      	adds	r1, r3, #4
 801585a:	6031      	str	r1, [r6, #0]
 801585c:	0606      	lsls	r6, r0, #24
 801585e:	d501      	bpl.n	8015864 <_printf_i+0xbc>
 8015860:	681d      	ldr	r5, [r3, #0]
 8015862:	e003      	b.n	801586c <_printf_i+0xc4>
 8015864:	0645      	lsls	r5, r0, #25
 8015866:	d5fb      	bpl.n	8015860 <_printf_i+0xb8>
 8015868:	f9b3 5000 	ldrsh.w	r5, [r3]
 801586c:	2d00      	cmp	r5, #0
 801586e:	da03      	bge.n	8015878 <_printf_i+0xd0>
 8015870:	232d      	movs	r3, #45	@ 0x2d
 8015872:	426d      	negs	r5, r5
 8015874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015878:	4859      	ldr	r0, [pc, #356]	@ (80159e0 <_printf_i+0x238>)
 801587a:	230a      	movs	r3, #10
 801587c:	e011      	b.n	80158a2 <_printf_i+0xfa>
 801587e:	6821      	ldr	r1, [r4, #0]
 8015880:	6833      	ldr	r3, [r6, #0]
 8015882:	0608      	lsls	r0, r1, #24
 8015884:	f853 5b04 	ldr.w	r5, [r3], #4
 8015888:	d402      	bmi.n	8015890 <_printf_i+0xe8>
 801588a:	0649      	lsls	r1, r1, #25
 801588c:	bf48      	it	mi
 801588e:	b2ad      	uxthmi	r5, r5
 8015890:	2f6f      	cmp	r7, #111	@ 0x6f
 8015892:	4853      	ldr	r0, [pc, #332]	@ (80159e0 <_printf_i+0x238>)
 8015894:	6033      	str	r3, [r6, #0]
 8015896:	bf14      	ite	ne
 8015898:	230a      	movne	r3, #10
 801589a:	2308      	moveq	r3, #8
 801589c:	2100      	movs	r1, #0
 801589e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80158a2:	6866      	ldr	r6, [r4, #4]
 80158a4:	60a6      	str	r6, [r4, #8]
 80158a6:	2e00      	cmp	r6, #0
 80158a8:	bfa2      	ittt	ge
 80158aa:	6821      	ldrge	r1, [r4, #0]
 80158ac:	f021 0104 	bicge.w	r1, r1, #4
 80158b0:	6021      	strge	r1, [r4, #0]
 80158b2:	b90d      	cbnz	r5, 80158b8 <_printf_i+0x110>
 80158b4:	2e00      	cmp	r6, #0
 80158b6:	d04b      	beq.n	8015950 <_printf_i+0x1a8>
 80158b8:	4616      	mov	r6, r2
 80158ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80158be:	fb03 5711 	mls	r7, r3, r1, r5
 80158c2:	5dc7      	ldrb	r7, [r0, r7]
 80158c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80158c8:	462f      	mov	r7, r5
 80158ca:	42bb      	cmp	r3, r7
 80158cc:	460d      	mov	r5, r1
 80158ce:	d9f4      	bls.n	80158ba <_printf_i+0x112>
 80158d0:	2b08      	cmp	r3, #8
 80158d2:	d10b      	bne.n	80158ec <_printf_i+0x144>
 80158d4:	6823      	ldr	r3, [r4, #0]
 80158d6:	07df      	lsls	r7, r3, #31
 80158d8:	d508      	bpl.n	80158ec <_printf_i+0x144>
 80158da:	6923      	ldr	r3, [r4, #16]
 80158dc:	6861      	ldr	r1, [r4, #4]
 80158de:	4299      	cmp	r1, r3
 80158e0:	bfde      	ittt	le
 80158e2:	2330      	movle	r3, #48	@ 0x30
 80158e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80158e8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80158ec:	1b92      	subs	r2, r2, r6
 80158ee:	6122      	str	r2, [r4, #16]
 80158f0:	f8cd a000 	str.w	sl, [sp]
 80158f4:	464b      	mov	r3, r9
 80158f6:	aa03      	add	r2, sp, #12
 80158f8:	4621      	mov	r1, r4
 80158fa:	4640      	mov	r0, r8
 80158fc:	f7ff fee6 	bl	80156cc <_printf_common>
 8015900:	3001      	adds	r0, #1
 8015902:	d14a      	bne.n	801599a <_printf_i+0x1f2>
 8015904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015908:	b004      	add	sp, #16
 801590a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801590e:	6823      	ldr	r3, [r4, #0]
 8015910:	f043 0320 	orr.w	r3, r3, #32
 8015914:	6023      	str	r3, [r4, #0]
 8015916:	4833      	ldr	r0, [pc, #204]	@ (80159e4 <_printf_i+0x23c>)
 8015918:	2778      	movs	r7, #120	@ 0x78
 801591a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801591e:	6823      	ldr	r3, [r4, #0]
 8015920:	6831      	ldr	r1, [r6, #0]
 8015922:	061f      	lsls	r7, r3, #24
 8015924:	f851 5b04 	ldr.w	r5, [r1], #4
 8015928:	d402      	bmi.n	8015930 <_printf_i+0x188>
 801592a:	065f      	lsls	r7, r3, #25
 801592c:	bf48      	it	mi
 801592e:	b2ad      	uxthmi	r5, r5
 8015930:	6031      	str	r1, [r6, #0]
 8015932:	07d9      	lsls	r1, r3, #31
 8015934:	bf44      	itt	mi
 8015936:	f043 0320 	orrmi.w	r3, r3, #32
 801593a:	6023      	strmi	r3, [r4, #0]
 801593c:	b11d      	cbz	r5, 8015946 <_printf_i+0x19e>
 801593e:	2310      	movs	r3, #16
 8015940:	e7ac      	b.n	801589c <_printf_i+0xf4>
 8015942:	4827      	ldr	r0, [pc, #156]	@ (80159e0 <_printf_i+0x238>)
 8015944:	e7e9      	b.n	801591a <_printf_i+0x172>
 8015946:	6823      	ldr	r3, [r4, #0]
 8015948:	f023 0320 	bic.w	r3, r3, #32
 801594c:	6023      	str	r3, [r4, #0]
 801594e:	e7f6      	b.n	801593e <_printf_i+0x196>
 8015950:	4616      	mov	r6, r2
 8015952:	e7bd      	b.n	80158d0 <_printf_i+0x128>
 8015954:	6833      	ldr	r3, [r6, #0]
 8015956:	6825      	ldr	r5, [r4, #0]
 8015958:	6961      	ldr	r1, [r4, #20]
 801595a:	1d18      	adds	r0, r3, #4
 801595c:	6030      	str	r0, [r6, #0]
 801595e:	062e      	lsls	r6, r5, #24
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	d501      	bpl.n	8015968 <_printf_i+0x1c0>
 8015964:	6019      	str	r1, [r3, #0]
 8015966:	e002      	b.n	801596e <_printf_i+0x1c6>
 8015968:	0668      	lsls	r0, r5, #25
 801596a:	d5fb      	bpl.n	8015964 <_printf_i+0x1bc>
 801596c:	8019      	strh	r1, [r3, #0]
 801596e:	2300      	movs	r3, #0
 8015970:	6123      	str	r3, [r4, #16]
 8015972:	4616      	mov	r6, r2
 8015974:	e7bc      	b.n	80158f0 <_printf_i+0x148>
 8015976:	6833      	ldr	r3, [r6, #0]
 8015978:	1d1a      	adds	r2, r3, #4
 801597a:	6032      	str	r2, [r6, #0]
 801597c:	681e      	ldr	r6, [r3, #0]
 801597e:	6862      	ldr	r2, [r4, #4]
 8015980:	2100      	movs	r1, #0
 8015982:	4630      	mov	r0, r6
 8015984:	f7ea fcac 	bl	80002e0 <memchr>
 8015988:	b108      	cbz	r0, 801598e <_printf_i+0x1e6>
 801598a:	1b80      	subs	r0, r0, r6
 801598c:	6060      	str	r0, [r4, #4]
 801598e:	6863      	ldr	r3, [r4, #4]
 8015990:	6123      	str	r3, [r4, #16]
 8015992:	2300      	movs	r3, #0
 8015994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015998:	e7aa      	b.n	80158f0 <_printf_i+0x148>
 801599a:	6923      	ldr	r3, [r4, #16]
 801599c:	4632      	mov	r2, r6
 801599e:	4649      	mov	r1, r9
 80159a0:	4640      	mov	r0, r8
 80159a2:	47d0      	blx	sl
 80159a4:	3001      	adds	r0, #1
 80159a6:	d0ad      	beq.n	8015904 <_printf_i+0x15c>
 80159a8:	6823      	ldr	r3, [r4, #0]
 80159aa:	079b      	lsls	r3, r3, #30
 80159ac:	d413      	bmi.n	80159d6 <_printf_i+0x22e>
 80159ae:	68e0      	ldr	r0, [r4, #12]
 80159b0:	9b03      	ldr	r3, [sp, #12]
 80159b2:	4298      	cmp	r0, r3
 80159b4:	bfb8      	it	lt
 80159b6:	4618      	movlt	r0, r3
 80159b8:	e7a6      	b.n	8015908 <_printf_i+0x160>
 80159ba:	2301      	movs	r3, #1
 80159bc:	4632      	mov	r2, r6
 80159be:	4649      	mov	r1, r9
 80159c0:	4640      	mov	r0, r8
 80159c2:	47d0      	blx	sl
 80159c4:	3001      	adds	r0, #1
 80159c6:	d09d      	beq.n	8015904 <_printf_i+0x15c>
 80159c8:	3501      	adds	r5, #1
 80159ca:	68e3      	ldr	r3, [r4, #12]
 80159cc:	9903      	ldr	r1, [sp, #12]
 80159ce:	1a5b      	subs	r3, r3, r1
 80159d0:	42ab      	cmp	r3, r5
 80159d2:	dcf2      	bgt.n	80159ba <_printf_i+0x212>
 80159d4:	e7eb      	b.n	80159ae <_printf_i+0x206>
 80159d6:	2500      	movs	r5, #0
 80159d8:	f104 0619 	add.w	r6, r4, #25
 80159dc:	e7f5      	b.n	80159ca <_printf_i+0x222>
 80159de:	bf00      	nop
 80159e0:	08017e6e 	.word	0x08017e6e
 80159e4:	08017e7f 	.word	0x08017e7f

080159e8 <std>:
 80159e8:	2300      	movs	r3, #0
 80159ea:	b510      	push	{r4, lr}
 80159ec:	4604      	mov	r4, r0
 80159ee:	e9c0 3300 	strd	r3, r3, [r0]
 80159f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80159f6:	6083      	str	r3, [r0, #8]
 80159f8:	8181      	strh	r1, [r0, #12]
 80159fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80159fc:	81c2      	strh	r2, [r0, #14]
 80159fe:	6183      	str	r3, [r0, #24]
 8015a00:	4619      	mov	r1, r3
 8015a02:	2208      	movs	r2, #8
 8015a04:	305c      	adds	r0, #92	@ 0x5c
 8015a06:	f000 f921 	bl	8015c4c <memset>
 8015a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8015a40 <std+0x58>)
 8015a0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8015a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8015a44 <std+0x5c>)
 8015a10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015a12:	4b0d      	ldr	r3, [pc, #52]	@ (8015a48 <std+0x60>)
 8015a14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015a16:	4b0d      	ldr	r3, [pc, #52]	@ (8015a4c <std+0x64>)
 8015a18:	6323      	str	r3, [r4, #48]	@ 0x30
 8015a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8015a50 <std+0x68>)
 8015a1c:	6224      	str	r4, [r4, #32]
 8015a1e:	429c      	cmp	r4, r3
 8015a20:	d006      	beq.n	8015a30 <std+0x48>
 8015a22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015a26:	4294      	cmp	r4, r2
 8015a28:	d002      	beq.n	8015a30 <std+0x48>
 8015a2a:	33d0      	adds	r3, #208	@ 0xd0
 8015a2c:	429c      	cmp	r4, r3
 8015a2e:	d105      	bne.n	8015a3c <std+0x54>
 8015a30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a38:	f000 b93e 	b.w	8015cb8 <__retarget_lock_init_recursive>
 8015a3c:	bd10      	pop	{r4, pc}
 8015a3e:	bf00      	nop
 8015a40:	080174e9 	.word	0x080174e9
 8015a44:	0801750b 	.word	0x0801750b
 8015a48:	08017543 	.word	0x08017543
 8015a4c:	08017567 	.word	0x08017567
 8015a50:	24001734 	.word	0x24001734

08015a54 <stdio_exit_handler>:
 8015a54:	4a02      	ldr	r2, [pc, #8]	@ (8015a60 <stdio_exit_handler+0xc>)
 8015a56:	4903      	ldr	r1, [pc, #12]	@ (8015a64 <stdio_exit_handler+0x10>)
 8015a58:	4803      	ldr	r0, [pc, #12]	@ (8015a68 <stdio_exit_handler+0x14>)
 8015a5a:	f000 b869 	b.w	8015b30 <_fwalk_sglue>
 8015a5e:	bf00      	nop
 8015a60:	24000134 	.word	0x24000134
 8015a64:	08016d7d 	.word	0x08016d7d
 8015a68:	24000144 	.word	0x24000144

08015a6c <cleanup_stdio>:
 8015a6c:	6841      	ldr	r1, [r0, #4]
 8015a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8015aa0 <cleanup_stdio+0x34>)
 8015a70:	4299      	cmp	r1, r3
 8015a72:	b510      	push	{r4, lr}
 8015a74:	4604      	mov	r4, r0
 8015a76:	d001      	beq.n	8015a7c <cleanup_stdio+0x10>
 8015a78:	f001 f980 	bl	8016d7c <_fflush_r>
 8015a7c:	68a1      	ldr	r1, [r4, #8]
 8015a7e:	4b09      	ldr	r3, [pc, #36]	@ (8015aa4 <cleanup_stdio+0x38>)
 8015a80:	4299      	cmp	r1, r3
 8015a82:	d002      	beq.n	8015a8a <cleanup_stdio+0x1e>
 8015a84:	4620      	mov	r0, r4
 8015a86:	f001 f979 	bl	8016d7c <_fflush_r>
 8015a8a:	68e1      	ldr	r1, [r4, #12]
 8015a8c:	4b06      	ldr	r3, [pc, #24]	@ (8015aa8 <cleanup_stdio+0x3c>)
 8015a8e:	4299      	cmp	r1, r3
 8015a90:	d004      	beq.n	8015a9c <cleanup_stdio+0x30>
 8015a92:	4620      	mov	r0, r4
 8015a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a98:	f001 b970 	b.w	8016d7c <_fflush_r>
 8015a9c:	bd10      	pop	{r4, pc}
 8015a9e:	bf00      	nop
 8015aa0:	24001734 	.word	0x24001734
 8015aa4:	2400179c 	.word	0x2400179c
 8015aa8:	24001804 	.word	0x24001804

08015aac <global_stdio_init.part.0>:
 8015aac:	b510      	push	{r4, lr}
 8015aae:	4b0b      	ldr	r3, [pc, #44]	@ (8015adc <global_stdio_init.part.0+0x30>)
 8015ab0:	4c0b      	ldr	r4, [pc, #44]	@ (8015ae0 <global_stdio_init.part.0+0x34>)
 8015ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8015ae4 <global_stdio_init.part.0+0x38>)
 8015ab4:	601a      	str	r2, [r3, #0]
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	2200      	movs	r2, #0
 8015aba:	2104      	movs	r1, #4
 8015abc:	f7ff ff94 	bl	80159e8 <std>
 8015ac0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015ac4:	2201      	movs	r2, #1
 8015ac6:	2109      	movs	r1, #9
 8015ac8:	f7ff ff8e 	bl	80159e8 <std>
 8015acc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015ad0:	2202      	movs	r2, #2
 8015ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ad6:	2112      	movs	r1, #18
 8015ad8:	f7ff bf86 	b.w	80159e8 <std>
 8015adc:	2400186c 	.word	0x2400186c
 8015ae0:	24001734 	.word	0x24001734
 8015ae4:	08015a55 	.word	0x08015a55

08015ae8 <__sfp_lock_acquire>:
 8015ae8:	4801      	ldr	r0, [pc, #4]	@ (8015af0 <__sfp_lock_acquire+0x8>)
 8015aea:	f000 b8e6 	b.w	8015cba <__retarget_lock_acquire_recursive>
 8015aee:	bf00      	nop
 8015af0:	24001871 	.word	0x24001871

08015af4 <__sfp_lock_release>:
 8015af4:	4801      	ldr	r0, [pc, #4]	@ (8015afc <__sfp_lock_release+0x8>)
 8015af6:	f000 b8e1 	b.w	8015cbc <__retarget_lock_release_recursive>
 8015afa:	bf00      	nop
 8015afc:	24001871 	.word	0x24001871

08015b00 <__sinit>:
 8015b00:	b510      	push	{r4, lr}
 8015b02:	4604      	mov	r4, r0
 8015b04:	f7ff fff0 	bl	8015ae8 <__sfp_lock_acquire>
 8015b08:	6a23      	ldr	r3, [r4, #32]
 8015b0a:	b11b      	cbz	r3, 8015b14 <__sinit+0x14>
 8015b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b10:	f7ff bff0 	b.w	8015af4 <__sfp_lock_release>
 8015b14:	4b04      	ldr	r3, [pc, #16]	@ (8015b28 <__sinit+0x28>)
 8015b16:	6223      	str	r3, [r4, #32]
 8015b18:	4b04      	ldr	r3, [pc, #16]	@ (8015b2c <__sinit+0x2c>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d1f5      	bne.n	8015b0c <__sinit+0xc>
 8015b20:	f7ff ffc4 	bl	8015aac <global_stdio_init.part.0>
 8015b24:	e7f2      	b.n	8015b0c <__sinit+0xc>
 8015b26:	bf00      	nop
 8015b28:	08015a6d 	.word	0x08015a6d
 8015b2c:	2400186c 	.word	0x2400186c

08015b30 <_fwalk_sglue>:
 8015b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b34:	4607      	mov	r7, r0
 8015b36:	4688      	mov	r8, r1
 8015b38:	4614      	mov	r4, r2
 8015b3a:	2600      	movs	r6, #0
 8015b3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015b40:	f1b9 0901 	subs.w	r9, r9, #1
 8015b44:	d505      	bpl.n	8015b52 <_fwalk_sglue+0x22>
 8015b46:	6824      	ldr	r4, [r4, #0]
 8015b48:	2c00      	cmp	r4, #0
 8015b4a:	d1f7      	bne.n	8015b3c <_fwalk_sglue+0xc>
 8015b4c:	4630      	mov	r0, r6
 8015b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b52:	89ab      	ldrh	r3, [r5, #12]
 8015b54:	2b01      	cmp	r3, #1
 8015b56:	d907      	bls.n	8015b68 <_fwalk_sglue+0x38>
 8015b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015b5c:	3301      	adds	r3, #1
 8015b5e:	d003      	beq.n	8015b68 <_fwalk_sglue+0x38>
 8015b60:	4629      	mov	r1, r5
 8015b62:	4638      	mov	r0, r7
 8015b64:	47c0      	blx	r8
 8015b66:	4306      	orrs	r6, r0
 8015b68:	3568      	adds	r5, #104	@ 0x68
 8015b6a:	e7e9      	b.n	8015b40 <_fwalk_sglue+0x10>

08015b6c <iprintf>:
 8015b6c:	b40f      	push	{r0, r1, r2, r3}
 8015b6e:	b507      	push	{r0, r1, r2, lr}
 8015b70:	4906      	ldr	r1, [pc, #24]	@ (8015b8c <iprintf+0x20>)
 8015b72:	ab04      	add	r3, sp, #16
 8015b74:	6808      	ldr	r0, [r1, #0]
 8015b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b7a:	6881      	ldr	r1, [r0, #8]
 8015b7c:	9301      	str	r3, [sp, #4]
 8015b7e:	f000 feb7 	bl	80168f0 <_vfiprintf_r>
 8015b82:	b003      	add	sp, #12
 8015b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b88:	b004      	add	sp, #16
 8015b8a:	4770      	bx	lr
 8015b8c:	24000140 	.word	0x24000140

08015b90 <_puts_r>:
 8015b90:	6a03      	ldr	r3, [r0, #32]
 8015b92:	b570      	push	{r4, r5, r6, lr}
 8015b94:	6884      	ldr	r4, [r0, #8]
 8015b96:	4605      	mov	r5, r0
 8015b98:	460e      	mov	r6, r1
 8015b9a:	b90b      	cbnz	r3, 8015ba0 <_puts_r+0x10>
 8015b9c:	f7ff ffb0 	bl	8015b00 <__sinit>
 8015ba0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015ba2:	07db      	lsls	r3, r3, #31
 8015ba4:	d405      	bmi.n	8015bb2 <_puts_r+0x22>
 8015ba6:	89a3      	ldrh	r3, [r4, #12]
 8015ba8:	0598      	lsls	r0, r3, #22
 8015baa:	d402      	bmi.n	8015bb2 <_puts_r+0x22>
 8015bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015bae:	f000 f884 	bl	8015cba <__retarget_lock_acquire_recursive>
 8015bb2:	89a3      	ldrh	r3, [r4, #12]
 8015bb4:	0719      	lsls	r1, r3, #28
 8015bb6:	d502      	bpl.n	8015bbe <_puts_r+0x2e>
 8015bb8:	6923      	ldr	r3, [r4, #16]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d135      	bne.n	8015c2a <_puts_r+0x9a>
 8015bbe:	4621      	mov	r1, r4
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	f001 fd13 	bl	80175ec <__swsetup_r>
 8015bc6:	b380      	cbz	r0, 8015c2a <_puts_r+0x9a>
 8015bc8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8015bcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015bce:	07da      	lsls	r2, r3, #31
 8015bd0:	d405      	bmi.n	8015bde <_puts_r+0x4e>
 8015bd2:	89a3      	ldrh	r3, [r4, #12]
 8015bd4:	059b      	lsls	r3, r3, #22
 8015bd6:	d402      	bmi.n	8015bde <_puts_r+0x4e>
 8015bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015bda:	f000 f86f 	bl	8015cbc <__retarget_lock_release_recursive>
 8015bde:	4628      	mov	r0, r5
 8015be0:	bd70      	pop	{r4, r5, r6, pc}
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	da04      	bge.n	8015bf0 <_puts_r+0x60>
 8015be6:	69a2      	ldr	r2, [r4, #24]
 8015be8:	429a      	cmp	r2, r3
 8015bea:	dc17      	bgt.n	8015c1c <_puts_r+0x8c>
 8015bec:	290a      	cmp	r1, #10
 8015bee:	d015      	beq.n	8015c1c <_puts_r+0x8c>
 8015bf0:	6823      	ldr	r3, [r4, #0]
 8015bf2:	1c5a      	adds	r2, r3, #1
 8015bf4:	6022      	str	r2, [r4, #0]
 8015bf6:	7019      	strb	r1, [r3, #0]
 8015bf8:	68a3      	ldr	r3, [r4, #8]
 8015bfa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015bfe:	3b01      	subs	r3, #1
 8015c00:	60a3      	str	r3, [r4, #8]
 8015c02:	2900      	cmp	r1, #0
 8015c04:	d1ed      	bne.n	8015be2 <_puts_r+0x52>
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	da11      	bge.n	8015c2e <_puts_r+0x9e>
 8015c0a:	4622      	mov	r2, r4
 8015c0c:	210a      	movs	r1, #10
 8015c0e:	4628      	mov	r0, r5
 8015c10:	f001 fcad 	bl	801756e <__swbuf_r>
 8015c14:	3001      	adds	r0, #1
 8015c16:	d0d7      	beq.n	8015bc8 <_puts_r+0x38>
 8015c18:	250a      	movs	r5, #10
 8015c1a:	e7d7      	b.n	8015bcc <_puts_r+0x3c>
 8015c1c:	4622      	mov	r2, r4
 8015c1e:	4628      	mov	r0, r5
 8015c20:	f001 fca5 	bl	801756e <__swbuf_r>
 8015c24:	3001      	adds	r0, #1
 8015c26:	d1e7      	bne.n	8015bf8 <_puts_r+0x68>
 8015c28:	e7ce      	b.n	8015bc8 <_puts_r+0x38>
 8015c2a:	3e01      	subs	r6, #1
 8015c2c:	e7e4      	b.n	8015bf8 <_puts_r+0x68>
 8015c2e:	6823      	ldr	r3, [r4, #0]
 8015c30:	1c5a      	adds	r2, r3, #1
 8015c32:	6022      	str	r2, [r4, #0]
 8015c34:	220a      	movs	r2, #10
 8015c36:	701a      	strb	r2, [r3, #0]
 8015c38:	e7ee      	b.n	8015c18 <_puts_r+0x88>
	...

08015c3c <puts>:
 8015c3c:	4b02      	ldr	r3, [pc, #8]	@ (8015c48 <puts+0xc>)
 8015c3e:	4601      	mov	r1, r0
 8015c40:	6818      	ldr	r0, [r3, #0]
 8015c42:	f7ff bfa5 	b.w	8015b90 <_puts_r>
 8015c46:	bf00      	nop
 8015c48:	24000140 	.word	0x24000140

08015c4c <memset>:
 8015c4c:	4402      	add	r2, r0
 8015c4e:	4603      	mov	r3, r0
 8015c50:	4293      	cmp	r3, r2
 8015c52:	d100      	bne.n	8015c56 <memset+0xa>
 8015c54:	4770      	bx	lr
 8015c56:	f803 1b01 	strb.w	r1, [r3], #1
 8015c5a:	e7f9      	b.n	8015c50 <memset+0x4>

08015c5c <_localeconv_r>:
 8015c5c:	4800      	ldr	r0, [pc, #0]	@ (8015c60 <_localeconv_r+0x4>)
 8015c5e:	4770      	bx	lr
 8015c60:	24000280 	.word	0x24000280

08015c64 <__errno>:
 8015c64:	4b01      	ldr	r3, [pc, #4]	@ (8015c6c <__errno+0x8>)
 8015c66:	6818      	ldr	r0, [r3, #0]
 8015c68:	4770      	bx	lr
 8015c6a:	bf00      	nop
 8015c6c:	24000140 	.word	0x24000140

08015c70 <__libc_init_array>:
 8015c70:	b570      	push	{r4, r5, r6, lr}
 8015c72:	4d0d      	ldr	r5, [pc, #52]	@ (8015ca8 <__libc_init_array+0x38>)
 8015c74:	4c0d      	ldr	r4, [pc, #52]	@ (8015cac <__libc_init_array+0x3c>)
 8015c76:	1b64      	subs	r4, r4, r5
 8015c78:	10a4      	asrs	r4, r4, #2
 8015c7a:	2600      	movs	r6, #0
 8015c7c:	42a6      	cmp	r6, r4
 8015c7e:	d109      	bne.n	8015c94 <__libc_init_array+0x24>
 8015c80:	4d0b      	ldr	r5, [pc, #44]	@ (8015cb0 <__libc_init_array+0x40>)
 8015c82:	4c0c      	ldr	r4, [pc, #48]	@ (8015cb4 <__libc_init_array+0x44>)
 8015c84:	f001 feda 	bl	8017a3c <_init>
 8015c88:	1b64      	subs	r4, r4, r5
 8015c8a:	10a4      	asrs	r4, r4, #2
 8015c8c:	2600      	movs	r6, #0
 8015c8e:	42a6      	cmp	r6, r4
 8015c90:	d105      	bne.n	8015c9e <__libc_init_array+0x2e>
 8015c92:	bd70      	pop	{r4, r5, r6, pc}
 8015c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c98:	4798      	blx	r3
 8015c9a:	3601      	adds	r6, #1
 8015c9c:	e7ee      	b.n	8015c7c <__libc_init_array+0xc>
 8015c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ca2:	4798      	blx	r3
 8015ca4:	3601      	adds	r6, #1
 8015ca6:	e7f2      	b.n	8015c8e <__libc_init_array+0x1e>
 8015ca8:	080181d8 	.word	0x080181d8
 8015cac:	080181d8 	.word	0x080181d8
 8015cb0:	080181d8 	.word	0x080181d8
 8015cb4:	080181dc 	.word	0x080181dc

08015cb8 <__retarget_lock_init_recursive>:
 8015cb8:	4770      	bx	lr

08015cba <__retarget_lock_acquire_recursive>:
 8015cba:	4770      	bx	lr

08015cbc <__retarget_lock_release_recursive>:
 8015cbc:	4770      	bx	lr

08015cbe <memcpy>:
 8015cbe:	440a      	add	r2, r1
 8015cc0:	4291      	cmp	r1, r2
 8015cc2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015cc6:	d100      	bne.n	8015cca <memcpy+0xc>
 8015cc8:	4770      	bx	lr
 8015cca:	b510      	push	{r4, lr}
 8015ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015cd4:	4291      	cmp	r1, r2
 8015cd6:	d1f9      	bne.n	8015ccc <memcpy+0xe>
 8015cd8:	bd10      	pop	{r4, pc}

08015cda <quorem>:
 8015cda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cde:	6903      	ldr	r3, [r0, #16]
 8015ce0:	690c      	ldr	r4, [r1, #16]
 8015ce2:	42a3      	cmp	r3, r4
 8015ce4:	4607      	mov	r7, r0
 8015ce6:	db7e      	blt.n	8015de6 <quorem+0x10c>
 8015ce8:	3c01      	subs	r4, #1
 8015cea:	f101 0814 	add.w	r8, r1, #20
 8015cee:	00a3      	lsls	r3, r4, #2
 8015cf0:	f100 0514 	add.w	r5, r0, #20
 8015cf4:	9300      	str	r3, [sp, #0]
 8015cf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015cfa:	9301      	str	r3, [sp, #4]
 8015cfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015d00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015d04:	3301      	adds	r3, #1
 8015d06:	429a      	cmp	r2, r3
 8015d08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015d0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015d10:	d32e      	bcc.n	8015d70 <quorem+0x96>
 8015d12:	f04f 0a00 	mov.w	sl, #0
 8015d16:	46c4      	mov	ip, r8
 8015d18:	46ae      	mov	lr, r5
 8015d1a:	46d3      	mov	fp, sl
 8015d1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015d20:	b298      	uxth	r0, r3
 8015d22:	fb06 a000 	mla	r0, r6, r0, sl
 8015d26:	0c02      	lsrs	r2, r0, #16
 8015d28:	0c1b      	lsrs	r3, r3, #16
 8015d2a:	fb06 2303 	mla	r3, r6, r3, r2
 8015d2e:	f8de 2000 	ldr.w	r2, [lr]
 8015d32:	b280      	uxth	r0, r0
 8015d34:	b292      	uxth	r2, r2
 8015d36:	1a12      	subs	r2, r2, r0
 8015d38:	445a      	add	r2, fp
 8015d3a:	f8de 0000 	ldr.w	r0, [lr]
 8015d3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015d42:	b29b      	uxth	r3, r3
 8015d44:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015d48:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015d4c:	b292      	uxth	r2, r2
 8015d4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015d52:	45e1      	cmp	r9, ip
 8015d54:	f84e 2b04 	str.w	r2, [lr], #4
 8015d58:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015d5c:	d2de      	bcs.n	8015d1c <quorem+0x42>
 8015d5e:	9b00      	ldr	r3, [sp, #0]
 8015d60:	58eb      	ldr	r3, [r5, r3]
 8015d62:	b92b      	cbnz	r3, 8015d70 <quorem+0x96>
 8015d64:	9b01      	ldr	r3, [sp, #4]
 8015d66:	3b04      	subs	r3, #4
 8015d68:	429d      	cmp	r5, r3
 8015d6a:	461a      	mov	r2, r3
 8015d6c:	d32f      	bcc.n	8015dce <quorem+0xf4>
 8015d6e:	613c      	str	r4, [r7, #16]
 8015d70:	4638      	mov	r0, r7
 8015d72:	f001 fab1 	bl	80172d8 <__mcmp>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	db25      	blt.n	8015dc6 <quorem+0xec>
 8015d7a:	4629      	mov	r1, r5
 8015d7c:	2000      	movs	r0, #0
 8015d7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8015d82:	f8d1 c000 	ldr.w	ip, [r1]
 8015d86:	fa1f fe82 	uxth.w	lr, r2
 8015d8a:	fa1f f38c 	uxth.w	r3, ip
 8015d8e:	eba3 030e 	sub.w	r3, r3, lr
 8015d92:	4403      	add	r3, r0
 8015d94:	0c12      	lsrs	r2, r2, #16
 8015d96:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015d9a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015d9e:	b29b      	uxth	r3, r3
 8015da0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015da4:	45c1      	cmp	r9, r8
 8015da6:	f841 3b04 	str.w	r3, [r1], #4
 8015daa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015dae:	d2e6      	bcs.n	8015d7e <quorem+0xa4>
 8015db0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015db4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015db8:	b922      	cbnz	r2, 8015dc4 <quorem+0xea>
 8015dba:	3b04      	subs	r3, #4
 8015dbc:	429d      	cmp	r5, r3
 8015dbe:	461a      	mov	r2, r3
 8015dc0:	d30b      	bcc.n	8015dda <quorem+0x100>
 8015dc2:	613c      	str	r4, [r7, #16]
 8015dc4:	3601      	adds	r6, #1
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	b003      	add	sp, #12
 8015dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dce:	6812      	ldr	r2, [r2, #0]
 8015dd0:	3b04      	subs	r3, #4
 8015dd2:	2a00      	cmp	r2, #0
 8015dd4:	d1cb      	bne.n	8015d6e <quorem+0x94>
 8015dd6:	3c01      	subs	r4, #1
 8015dd8:	e7c6      	b.n	8015d68 <quorem+0x8e>
 8015dda:	6812      	ldr	r2, [r2, #0]
 8015ddc:	3b04      	subs	r3, #4
 8015dde:	2a00      	cmp	r2, #0
 8015de0:	d1ef      	bne.n	8015dc2 <quorem+0xe8>
 8015de2:	3c01      	subs	r4, #1
 8015de4:	e7ea      	b.n	8015dbc <quorem+0xe2>
 8015de6:	2000      	movs	r0, #0
 8015de8:	e7ee      	b.n	8015dc8 <quorem+0xee>
 8015dea:	0000      	movs	r0, r0
 8015dec:	0000      	movs	r0, r0
	...

08015df0 <_dtoa_r>:
 8015df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015df4:	ed2d 8b02 	vpush	{d8}
 8015df8:	69c7      	ldr	r7, [r0, #28]
 8015dfa:	b091      	sub	sp, #68	@ 0x44
 8015dfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015e00:	ec55 4b10 	vmov	r4, r5, d0
 8015e04:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8015e06:	9107      	str	r1, [sp, #28]
 8015e08:	4681      	mov	r9, r0
 8015e0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015e0c:	930d      	str	r3, [sp, #52]	@ 0x34
 8015e0e:	b97f      	cbnz	r7, 8015e30 <_dtoa_r+0x40>
 8015e10:	2010      	movs	r0, #16
 8015e12:	f000 fe85 	bl	8016b20 <malloc>
 8015e16:	4602      	mov	r2, r0
 8015e18:	f8c9 001c 	str.w	r0, [r9, #28]
 8015e1c:	b920      	cbnz	r0, 8015e28 <_dtoa_r+0x38>
 8015e1e:	4ba0      	ldr	r3, [pc, #640]	@ (80160a0 <_dtoa_r+0x2b0>)
 8015e20:	21ef      	movs	r1, #239	@ 0xef
 8015e22:	48a0      	ldr	r0, [pc, #640]	@ (80160a4 <_dtoa_r+0x2b4>)
 8015e24:	f001 fd12 	bl	801784c <__assert_func>
 8015e28:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015e2c:	6007      	str	r7, [r0, #0]
 8015e2e:	60c7      	str	r7, [r0, #12]
 8015e30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015e34:	6819      	ldr	r1, [r3, #0]
 8015e36:	b159      	cbz	r1, 8015e50 <_dtoa_r+0x60>
 8015e38:	685a      	ldr	r2, [r3, #4]
 8015e3a:	604a      	str	r2, [r1, #4]
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	4093      	lsls	r3, r2
 8015e40:	608b      	str	r3, [r1, #8]
 8015e42:	4648      	mov	r0, r9
 8015e44:	f001 f80e 	bl	8016e64 <_Bfree>
 8015e48:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	601a      	str	r2, [r3, #0]
 8015e50:	1e2b      	subs	r3, r5, #0
 8015e52:	bfbb      	ittet	lt
 8015e54:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015e58:	9303      	strlt	r3, [sp, #12]
 8015e5a:	2300      	movge	r3, #0
 8015e5c:	2201      	movlt	r2, #1
 8015e5e:	bfac      	ite	ge
 8015e60:	6033      	strge	r3, [r6, #0]
 8015e62:	6032      	strlt	r2, [r6, #0]
 8015e64:	4b90      	ldr	r3, [pc, #576]	@ (80160a8 <_dtoa_r+0x2b8>)
 8015e66:	9e03      	ldr	r6, [sp, #12]
 8015e68:	43b3      	bics	r3, r6
 8015e6a:	d110      	bne.n	8015e8e <_dtoa_r+0x9e>
 8015e6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015e6e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015e72:	6013      	str	r3, [r2, #0]
 8015e74:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8015e78:	4323      	orrs	r3, r4
 8015e7a:	f000 84de 	beq.w	801683a <_dtoa_r+0xa4a>
 8015e7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015e80:	4f8a      	ldr	r7, [pc, #552]	@ (80160ac <_dtoa_r+0x2bc>)
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	f000 84e0 	beq.w	8016848 <_dtoa_r+0xa58>
 8015e88:	1cfb      	adds	r3, r7, #3
 8015e8a:	f000 bcdb 	b.w	8016844 <_dtoa_r+0xa54>
 8015e8e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8015e92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9a:	d10a      	bne.n	8015eb2 <_dtoa_r+0xc2>
 8015e9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015e9e:	2301      	movs	r3, #1
 8015ea0:	6013      	str	r3, [r2, #0]
 8015ea2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015ea4:	b113      	cbz	r3, 8015eac <_dtoa_r+0xbc>
 8015ea6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8015ea8:	4b81      	ldr	r3, [pc, #516]	@ (80160b0 <_dtoa_r+0x2c0>)
 8015eaa:	6013      	str	r3, [r2, #0]
 8015eac:	4f81      	ldr	r7, [pc, #516]	@ (80160b4 <_dtoa_r+0x2c4>)
 8015eae:	f000 bccb 	b.w	8016848 <_dtoa_r+0xa58>
 8015eb2:	aa0e      	add	r2, sp, #56	@ 0x38
 8015eb4:	a90f      	add	r1, sp, #60	@ 0x3c
 8015eb6:	4648      	mov	r0, r9
 8015eb8:	eeb0 0b48 	vmov.f64	d0, d8
 8015ebc:	f001 fabc 	bl	8017438 <__d2b>
 8015ec0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8015ec4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015ec6:	9001      	str	r0, [sp, #4]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d045      	beq.n	8015f58 <_dtoa_r+0x168>
 8015ecc:	eeb0 7b48 	vmov.f64	d7, d8
 8015ed0:	ee18 1a90 	vmov	r1, s17
 8015ed4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015ed8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8015edc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8015ee0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8015ee4:	2500      	movs	r5, #0
 8015ee6:	ee07 1a90 	vmov	s15, r1
 8015eea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8015eee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016088 <_dtoa_r+0x298>
 8015ef2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015ef6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8016090 <_dtoa_r+0x2a0>
 8015efa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015efe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016098 <_dtoa_r+0x2a8>
 8015f02:	ee07 3a90 	vmov	s15, r3
 8015f06:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8015f0a:	eeb0 7b46 	vmov.f64	d7, d6
 8015f0e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8015f12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8015f16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f1e:	ee16 8a90 	vmov	r8, s13
 8015f22:	d508      	bpl.n	8015f36 <_dtoa_r+0x146>
 8015f24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015f28:	eeb4 6b47 	vcmp.f64	d6, d7
 8015f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f30:	bf18      	it	ne
 8015f32:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8015f36:	f1b8 0f16 	cmp.w	r8, #22
 8015f3a:	d82b      	bhi.n	8015f94 <_dtoa_r+0x1a4>
 8015f3c:	495e      	ldr	r1, [pc, #376]	@ (80160b8 <_dtoa_r+0x2c8>)
 8015f3e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8015f42:	ed91 7b00 	vldr	d7, [r1]
 8015f46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f4e:	d501      	bpl.n	8015f54 <_dtoa_r+0x164>
 8015f50:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8015f54:	2100      	movs	r1, #0
 8015f56:	e01e      	b.n	8015f96 <_dtoa_r+0x1a6>
 8015f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f5a:	4413      	add	r3, r2
 8015f5c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8015f60:	2920      	cmp	r1, #32
 8015f62:	bfc1      	itttt	gt
 8015f64:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8015f68:	408e      	lslgt	r6, r1
 8015f6a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8015f6e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8015f72:	bfd6      	itet	le
 8015f74:	f1c1 0120 	rsble	r1, r1, #32
 8015f78:	4331      	orrgt	r1, r6
 8015f7a:	fa04 f101 	lslle.w	r1, r4, r1
 8015f7e:	ee07 1a90 	vmov	s15, r1
 8015f82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015f86:	3b01      	subs	r3, #1
 8015f88:	ee17 1a90 	vmov	r1, s15
 8015f8c:	2501      	movs	r5, #1
 8015f8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8015f92:	e7a8      	b.n	8015ee6 <_dtoa_r+0xf6>
 8015f94:	2101      	movs	r1, #1
 8015f96:	1ad2      	subs	r2, r2, r3
 8015f98:	1e53      	subs	r3, r2, #1
 8015f9a:	9306      	str	r3, [sp, #24]
 8015f9c:	bf45      	ittet	mi
 8015f9e:	f1c2 0301 	rsbmi	r3, r2, #1
 8015fa2:	9305      	strmi	r3, [sp, #20]
 8015fa4:	2300      	movpl	r3, #0
 8015fa6:	2300      	movmi	r3, #0
 8015fa8:	bf4c      	ite	mi
 8015faa:	9306      	strmi	r3, [sp, #24]
 8015fac:	9305      	strpl	r3, [sp, #20]
 8015fae:	f1b8 0f00 	cmp.w	r8, #0
 8015fb2:	910c      	str	r1, [sp, #48]	@ 0x30
 8015fb4:	db18      	blt.n	8015fe8 <_dtoa_r+0x1f8>
 8015fb6:	9b06      	ldr	r3, [sp, #24]
 8015fb8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8015fbc:	4443      	add	r3, r8
 8015fbe:	9306      	str	r3, [sp, #24]
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	9a07      	ldr	r2, [sp, #28]
 8015fc4:	2a09      	cmp	r2, #9
 8015fc6:	d849      	bhi.n	801605c <_dtoa_r+0x26c>
 8015fc8:	2a05      	cmp	r2, #5
 8015fca:	bfc4      	itt	gt
 8015fcc:	3a04      	subgt	r2, #4
 8015fce:	9207      	strgt	r2, [sp, #28]
 8015fd0:	9a07      	ldr	r2, [sp, #28]
 8015fd2:	f1a2 0202 	sub.w	r2, r2, #2
 8015fd6:	bfcc      	ite	gt
 8015fd8:	2400      	movgt	r4, #0
 8015fda:	2401      	movle	r4, #1
 8015fdc:	2a03      	cmp	r2, #3
 8015fde:	d848      	bhi.n	8016072 <_dtoa_r+0x282>
 8015fe0:	e8df f002 	tbb	[pc, r2]
 8015fe4:	3a2c2e0b 	.word	0x3a2c2e0b
 8015fe8:	9b05      	ldr	r3, [sp, #20]
 8015fea:	2200      	movs	r2, #0
 8015fec:	eba3 0308 	sub.w	r3, r3, r8
 8015ff0:	9305      	str	r3, [sp, #20]
 8015ff2:	920a      	str	r2, [sp, #40]	@ 0x28
 8015ff4:	f1c8 0300 	rsb	r3, r8, #0
 8015ff8:	e7e3      	b.n	8015fc2 <_dtoa_r+0x1d2>
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	9208      	str	r2, [sp, #32]
 8015ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016000:	2a00      	cmp	r2, #0
 8016002:	dc39      	bgt.n	8016078 <_dtoa_r+0x288>
 8016004:	f04f 0b01 	mov.w	fp, #1
 8016008:	46da      	mov	sl, fp
 801600a:	465a      	mov	r2, fp
 801600c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016010:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8016014:	2100      	movs	r1, #0
 8016016:	2004      	movs	r0, #4
 8016018:	f100 0614 	add.w	r6, r0, #20
 801601c:	4296      	cmp	r6, r2
 801601e:	d930      	bls.n	8016082 <_dtoa_r+0x292>
 8016020:	6079      	str	r1, [r7, #4]
 8016022:	4648      	mov	r0, r9
 8016024:	9304      	str	r3, [sp, #16]
 8016026:	f000 fedd 	bl	8016de4 <_Balloc>
 801602a:	9b04      	ldr	r3, [sp, #16]
 801602c:	4607      	mov	r7, r0
 801602e:	2800      	cmp	r0, #0
 8016030:	d146      	bne.n	80160c0 <_dtoa_r+0x2d0>
 8016032:	4b22      	ldr	r3, [pc, #136]	@ (80160bc <_dtoa_r+0x2cc>)
 8016034:	4602      	mov	r2, r0
 8016036:	f240 11af 	movw	r1, #431	@ 0x1af
 801603a:	e6f2      	b.n	8015e22 <_dtoa_r+0x32>
 801603c:	2201      	movs	r2, #1
 801603e:	e7dd      	b.n	8015ffc <_dtoa_r+0x20c>
 8016040:	2200      	movs	r2, #0
 8016042:	9208      	str	r2, [sp, #32]
 8016044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016046:	eb08 0b02 	add.w	fp, r8, r2
 801604a:	f10b 0a01 	add.w	sl, fp, #1
 801604e:	4652      	mov	r2, sl
 8016050:	2a01      	cmp	r2, #1
 8016052:	bfb8      	it	lt
 8016054:	2201      	movlt	r2, #1
 8016056:	e7db      	b.n	8016010 <_dtoa_r+0x220>
 8016058:	2201      	movs	r2, #1
 801605a:	e7f2      	b.n	8016042 <_dtoa_r+0x252>
 801605c:	2401      	movs	r4, #1
 801605e:	2200      	movs	r2, #0
 8016060:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8016064:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8016068:	2100      	movs	r1, #0
 801606a:	46da      	mov	sl, fp
 801606c:	2212      	movs	r2, #18
 801606e:	9109      	str	r1, [sp, #36]	@ 0x24
 8016070:	e7ce      	b.n	8016010 <_dtoa_r+0x220>
 8016072:	2201      	movs	r2, #1
 8016074:	9208      	str	r2, [sp, #32]
 8016076:	e7f5      	b.n	8016064 <_dtoa_r+0x274>
 8016078:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801607c:	46da      	mov	sl, fp
 801607e:	465a      	mov	r2, fp
 8016080:	e7c6      	b.n	8016010 <_dtoa_r+0x220>
 8016082:	3101      	adds	r1, #1
 8016084:	0040      	lsls	r0, r0, #1
 8016086:	e7c7      	b.n	8016018 <_dtoa_r+0x228>
 8016088:	636f4361 	.word	0x636f4361
 801608c:	3fd287a7 	.word	0x3fd287a7
 8016090:	8b60c8b3 	.word	0x8b60c8b3
 8016094:	3fc68a28 	.word	0x3fc68a28
 8016098:	509f79fb 	.word	0x509f79fb
 801609c:	3fd34413 	.word	0x3fd34413
 80160a0:	08017e9d 	.word	0x08017e9d
 80160a4:	08017eb4 	.word	0x08017eb4
 80160a8:	7ff00000 	.word	0x7ff00000
 80160ac:	08017e99 	.word	0x08017e99
 80160b0:	08017e6d 	.word	0x08017e6d
 80160b4:	08017e6c 	.word	0x08017e6c
 80160b8:	08017fc0 	.word	0x08017fc0
 80160bc:	08017f0c 	.word	0x08017f0c
 80160c0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80160c4:	f1ba 0f0e 	cmp.w	sl, #14
 80160c8:	6010      	str	r0, [r2, #0]
 80160ca:	d86f      	bhi.n	80161ac <_dtoa_r+0x3bc>
 80160cc:	2c00      	cmp	r4, #0
 80160ce:	d06d      	beq.n	80161ac <_dtoa_r+0x3bc>
 80160d0:	f1b8 0f00 	cmp.w	r8, #0
 80160d4:	f340 80c2 	ble.w	801625c <_dtoa_r+0x46c>
 80160d8:	4aca      	ldr	r2, [pc, #808]	@ (8016404 <_dtoa_r+0x614>)
 80160da:	f008 010f 	and.w	r1, r8, #15
 80160de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80160e2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80160e6:	ed92 7b00 	vldr	d7, [r2]
 80160ea:	ea4f 1128 	mov.w	r1, r8, asr #4
 80160ee:	f000 80a9 	beq.w	8016244 <_dtoa_r+0x454>
 80160f2:	4ac5      	ldr	r2, [pc, #788]	@ (8016408 <_dtoa_r+0x618>)
 80160f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80160f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80160fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016100:	f001 010f 	and.w	r1, r1, #15
 8016104:	2203      	movs	r2, #3
 8016106:	48c0      	ldr	r0, [pc, #768]	@ (8016408 <_dtoa_r+0x618>)
 8016108:	2900      	cmp	r1, #0
 801610a:	f040 809d 	bne.w	8016248 <_dtoa_r+0x458>
 801610e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016112:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016116:	ed8d 7b02 	vstr	d7, [sp, #8]
 801611a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801611c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016120:	2900      	cmp	r1, #0
 8016122:	f000 80c1 	beq.w	80162a8 <_dtoa_r+0x4b8>
 8016126:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801612a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016132:	f140 80b9 	bpl.w	80162a8 <_dtoa_r+0x4b8>
 8016136:	f1ba 0f00 	cmp.w	sl, #0
 801613a:	f000 80b5 	beq.w	80162a8 <_dtoa_r+0x4b8>
 801613e:	f1bb 0f00 	cmp.w	fp, #0
 8016142:	dd31      	ble.n	80161a8 <_dtoa_r+0x3b8>
 8016144:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8016148:	ee27 7b06 	vmul.f64	d7, d7, d6
 801614c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016150:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8016154:	9104      	str	r1, [sp, #16]
 8016156:	3201      	adds	r2, #1
 8016158:	465c      	mov	r4, fp
 801615a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801615e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8016162:	ee07 2a90 	vmov	s15, r2
 8016166:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801616a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801616e:	ee15 2a90 	vmov	r2, s11
 8016172:	ec51 0b15 	vmov	r0, r1, d5
 8016176:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801617a:	2c00      	cmp	r4, #0
 801617c:	f040 8098 	bne.w	80162b0 <_dtoa_r+0x4c0>
 8016180:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016184:	ee36 6b47 	vsub.f64	d6, d6, d7
 8016188:	ec41 0b17 	vmov	d7, r0, r1
 801618c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016194:	f300 8261 	bgt.w	801665a <_dtoa_r+0x86a>
 8016198:	eeb1 7b47 	vneg.f64	d7, d7
 801619c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80161a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161a4:	f100 80f5 	bmi.w	8016392 <_dtoa_r+0x5a2>
 80161a8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80161ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80161ae:	2a00      	cmp	r2, #0
 80161b0:	f2c0 812c 	blt.w	801640c <_dtoa_r+0x61c>
 80161b4:	f1b8 0f0e 	cmp.w	r8, #14
 80161b8:	f300 8128 	bgt.w	801640c <_dtoa_r+0x61c>
 80161bc:	4b91      	ldr	r3, [pc, #580]	@ (8016404 <_dtoa_r+0x614>)
 80161be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80161c2:	ed93 6b00 	vldr	d6, [r3]
 80161c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	da03      	bge.n	80161d4 <_dtoa_r+0x3e4>
 80161cc:	f1ba 0f00 	cmp.w	sl, #0
 80161d0:	f340 80d2 	ble.w	8016378 <_dtoa_r+0x588>
 80161d4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80161d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80161dc:	463e      	mov	r6, r7
 80161de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80161e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80161e6:	ee15 3a10 	vmov	r3, s10
 80161ea:	3330      	adds	r3, #48	@ 0x30
 80161ec:	f806 3b01 	strb.w	r3, [r6], #1
 80161f0:	1bf3      	subs	r3, r6, r7
 80161f2:	459a      	cmp	sl, r3
 80161f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80161f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80161fc:	f040 80f8 	bne.w	80163f0 <_dtoa_r+0x600>
 8016200:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016204:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801620c:	f300 80dd 	bgt.w	80163ca <_dtoa_r+0x5da>
 8016210:	eeb4 7b46 	vcmp.f64	d7, d6
 8016214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016218:	d104      	bne.n	8016224 <_dtoa_r+0x434>
 801621a:	ee15 3a10 	vmov	r3, s10
 801621e:	07db      	lsls	r3, r3, #31
 8016220:	f100 80d3 	bmi.w	80163ca <_dtoa_r+0x5da>
 8016224:	9901      	ldr	r1, [sp, #4]
 8016226:	4648      	mov	r0, r9
 8016228:	f000 fe1c 	bl	8016e64 <_Bfree>
 801622c:	2300      	movs	r3, #0
 801622e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016230:	7033      	strb	r3, [r6, #0]
 8016232:	f108 0301 	add.w	r3, r8, #1
 8016236:	6013      	str	r3, [r2, #0]
 8016238:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801623a:	2b00      	cmp	r3, #0
 801623c:	f000 8304 	beq.w	8016848 <_dtoa_r+0xa58>
 8016240:	601e      	str	r6, [r3, #0]
 8016242:	e301      	b.n	8016848 <_dtoa_r+0xa58>
 8016244:	2202      	movs	r2, #2
 8016246:	e75e      	b.n	8016106 <_dtoa_r+0x316>
 8016248:	07cc      	lsls	r4, r1, #31
 801624a:	d504      	bpl.n	8016256 <_dtoa_r+0x466>
 801624c:	ed90 6b00 	vldr	d6, [r0]
 8016250:	3201      	adds	r2, #1
 8016252:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016256:	1049      	asrs	r1, r1, #1
 8016258:	3008      	adds	r0, #8
 801625a:	e755      	b.n	8016108 <_dtoa_r+0x318>
 801625c:	d022      	beq.n	80162a4 <_dtoa_r+0x4b4>
 801625e:	f1c8 0100 	rsb	r1, r8, #0
 8016262:	4a68      	ldr	r2, [pc, #416]	@ (8016404 <_dtoa_r+0x614>)
 8016264:	f001 000f 	and.w	r0, r1, #15
 8016268:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801626c:	ed92 7b00 	vldr	d7, [r2]
 8016270:	ee28 7b07 	vmul.f64	d7, d8, d7
 8016274:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016278:	4863      	ldr	r0, [pc, #396]	@ (8016408 <_dtoa_r+0x618>)
 801627a:	1109      	asrs	r1, r1, #4
 801627c:	2400      	movs	r4, #0
 801627e:	2202      	movs	r2, #2
 8016280:	b929      	cbnz	r1, 801628e <_dtoa_r+0x49e>
 8016282:	2c00      	cmp	r4, #0
 8016284:	f43f af49 	beq.w	801611a <_dtoa_r+0x32a>
 8016288:	ed8d 7b02 	vstr	d7, [sp, #8]
 801628c:	e745      	b.n	801611a <_dtoa_r+0x32a>
 801628e:	07ce      	lsls	r6, r1, #31
 8016290:	d505      	bpl.n	801629e <_dtoa_r+0x4ae>
 8016292:	ed90 6b00 	vldr	d6, [r0]
 8016296:	3201      	adds	r2, #1
 8016298:	2401      	movs	r4, #1
 801629a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801629e:	1049      	asrs	r1, r1, #1
 80162a0:	3008      	adds	r0, #8
 80162a2:	e7ed      	b.n	8016280 <_dtoa_r+0x490>
 80162a4:	2202      	movs	r2, #2
 80162a6:	e738      	b.n	801611a <_dtoa_r+0x32a>
 80162a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80162ac:	4654      	mov	r4, sl
 80162ae:	e754      	b.n	801615a <_dtoa_r+0x36a>
 80162b0:	4a54      	ldr	r2, [pc, #336]	@ (8016404 <_dtoa_r+0x614>)
 80162b2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80162b6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80162ba:	9a08      	ldr	r2, [sp, #32]
 80162bc:	ec41 0b17 	vmov	d7, r0, r1
 80162c0:	443c      	add	r4, r7
 80162c2:	b34a      	cbz	r2, 8016318 <_dtoa_r+0x528>
 80162c4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80162c8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80162cc:	463e      	mov	r6, r7
 80162ce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80162d2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80162d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80162da:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80162de:	ee14 2a90 	vmov	r2, s9
 80162e2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80162e6:	3230      	adds	r2, #48	@ 0x30
 80162e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80162ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80162f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f4:	f806 2b01 	strb.w	r2, [r6], #1
 80162f8:	d438      	bmi.n	801636c <_dtoa_r+0x57c>
 80162fa:	ee32 5b46 	vsub.f64	d5, d2, d6
 80162fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016306:	d462      	bmi.n	80163ce <_dtoa_r+0x5de>
 8016308:	42a6      	cmp	r6, r4
 801630a:	f43f af4d 	beq.w	80161a8 <_dtoa_r+0x3b8>
 801630e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8016312:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016316:	e7e0      	b.n	80162da <_dtoa_r+0x4ea>
 8016318:	4621      	mov	r1, r4
 801631a:	463e      	mov	r6, r7
 801631c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016320:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016324:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016328:	ee14 2a90 	vmov	r2, s9
 801632c:	3230      	adds	r2, #48	@ 0x30
 801632e:	f806 2b01 	strb.w	r2, [r6], #1
 8016332:	42a6      	cmp	r6, r4
 8016334:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016338:	ee36 6b45 	vsub.f64	d6, d6, d5
 801633c:	d119      	bne.n	8016372 <_dtoa_r+0x582>
 801633e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8016342:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016346:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801634a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801634e:	dc3e      	bgt.n	80163ce <_dtoa_r+0x5de>
 8016350:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016354:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8016358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801635c:	f57f af24 	bpl.w	80161a8 <_dtoa_r+0x3b8>
 8016360:	460e      	mov	r6, r1
 8016362:	3901      	subs	r1, #1
 8016364:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016368:	2b30      	cmp	r3, #48	@ 0x30
 801636a:	d0f9      	beq.n	8016360 <_dtoa_r+0x570>
 801636c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016370:	e758      	b.n	8016224 <_dtoa_r+0x434>
 8016372:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016376:	e7d5      	b.n	8016324 <_dtoa_r+0x534>
 8016378:	d10b      	bne.n	8016392 <_dtoa_r+0x5a2>
 801637a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801637e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016382:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016386:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801638a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801638e:	f2c0 8161 	blt.w	8016654 <_dtoa_r+0x864>
 8016392:	2400      	movs	r4, #0
 8016394:	4625      	mov	r5, r4
 8016396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016398:	43db      	mvns	r3, r3
 801639a:	9304      	str	r3, [sp, #16]
 801639c:	463e      	mov	r6, r7
 801639e:	f04f 0800 	mov.w	r8, #0
 80163a2:	4621      	mov	r1, r4
 80163a4:	4648      	mov	r0, r9
 80163a6:	f000 fd5d 	bl	8016e64 <_Bfree>
 80163aa:	2d00      	cmp	r5, #0
 80163ac:	d0de      	beq.n	801636c <_dtoa_r+0x57c>
 80163ae:	f1b8 0f00 	cmp.w	r8, #0
 80163b2:	d005      	beq.n	80163c0 <_dtoa_r+0x5d0>
 80163b4:	45a8      	cmp	r8, r5
 80163b6:	d003      	beq.n	80163c0 <_dtoa_r+0x5d0>
 80163b8:	4641      	mov	r1, r8
 80163ba:	4648      	mov	r0, r9
 80163bc:	f000 fd52 	bl	8016e64 <_Bfree>
 80163c0:	4629      	mov	r1, r5
 80163c2:	4648      	mov	r0, r9
 80163c4:	f000 fd4e 	bl	8016e64 <_Bfree>
 80163c8:	e7d0      	b.n	801636c <_dtoa_r+0x57c>
 80163ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80163ce:	4633      	mov	r3, r6
 80163d0:	461e      	mov	r6, r3
 80163d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80163d6:	2a39      	cmp	r2, #57	@ 0x39
 80163d8:	d106      	bne.n	80163e8 <_dtoa_r+0x5f8>
 80163da:	429f      	cmp	r7, r3
 80163dc:	d1f8      	bne.n	80163d0 <_dtoa_r+0x5e0>
 80163de:	9a04      	ldr	r2, [sp, #16]
 80163e0:	3201      	adds	r2, #1
 80163e2:	9204      	str	r2, [sp, #16]
 80163e4:	2230      	movs	r2, #48	@ 0x30
 80163e6:	703a      	strb	r2, [r7, #0]
 80163e8:	781a      	ldrb	r2, [r3, #0]
 80163ea:	3201      	adds	r2, #1
 80163ec:	701a      	strb	r2, [r3, #0]
 80163ee:	e7bd      	b.n	801636c <_dtoa_r+0x57c>
 80163f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80163f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80163f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163fc:	f47f aeef 	bne.w	80161de <_dtoa_r+0x3ee>
 8016400:	e710      	b.n	8016224 <_dtoa_r+0x434>
 8016402:	bf00      	nop
 8016404:	08017fc0 	.word	0x08017fc0
 8016408:	08017f98 	.word	0x08017f98
 801640c:	9908      	ldr	r1, [sp, #32]
 801640e:	2900      	cmp	r1, #0
 8016410:	f000 80e3 	beq.w	80165da <_dtoa_r+0x7ea>
 8016414:	9907      	ldr	r1, [sp, #28]
 8016416:	2901      	cmp	r1, #1
 8016418:	f300 80c8 	bgt.w	80165ac <_dtoa_r+0x7bc>
 801641c:	2d00      	cmp	r5, #0
 801641e:	f000 80c1 	beq.w	80165a4 <_dtoa_r+0x7b4>
 8016422:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016426:	9e05      	ldr	r6, [sp, #20]
 8016428:	461c      	mov	r4, r3
 801642a:	9304      	str	r3, [sp, #16]
 801642c:	9b05      	ldr	r3, [sp, #20]
 801642e:	4413      	add	r3, r2
 8016430:	9305      	str	r3, [sp, #20]
 8016432:	9b06      	ldr	r3, [sp, #24]
 8016434:	2101      	movs	r1, #1
 8016436:	4413      	add	r3, r2
 8016438:	4648      	mov	r0, r9
 801643a:	9306      	str	r3, [sp, #24]
 801643c:	f000 fdc6 	bl	8016fcc <__i2b>
 8016440:	9b04      	ldr	r3, [sp, #16]
 8016442:	4605      	mov	r5, r0
 8016444:	b166      	cbz	r6, 8016460 <_dtoa_r+0x670>
 8016446:	9a06      	ldr	r2, [sp, #24]
 8016448:	2a00      	cmp	r2, #0
 801644a:	dd09      	ble.n	8016460 <_dtoa_r+0x670>
 801644c:	42b2      	cmp	r2, r6
 801644e:	9905      	ldr	r1, [sp, #20]
 8016450:	bfa8      	it	ge
 8016452:	4632      	movge	r2, r6
 8016454:	1a89      	subs	r1, r1, r2
 8016456:	9105      	str	r1, [sp, #20]
 8016458:	9906      	ldr	r1, [sp, #24]
 801645a:	1ab6      	subs	r6, r6, r2
 801645c:	1a8a      	subs	r2, r1, r2
 801645e:	9206      	str	r2, [sp, #24]
 8016460:	b1fb      	cbz	r3, 80164a2 <_dtoa_r+0x6b2>
 8016462:	9a08      	ldr	r2, [sp, #32]
 8016464:	2a00      	cmp	r2, #0
 8016466:	f000 80bc 	beq.w	80165e2 <_dtoa_r+0x7f2>
 801646a:	b19c      	cbz	r4, 8016494 <_dtoa_r+0x6a4>
 801646c:	4629      	mov	r1, r5
 801646e:	4622      	mov	r2, r4
 8016470:	4648      	mov	r0, r9
 8016472:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016474:	f000 fe6a 	bl	801714c <__pow5mult>
 8016478:	9a01      	ldr	r2, [sp, #4]
 801647a:	4601      	mov	r1, r0
 801647c:	4605      	mov	r5, r0
 801647e:	4648      	mov	r0, r9
 8016480:	f000 fdba 	bl	8016ff8 <__multiply>
 8016484:	9901      	ldr	r1, [sp, #4]
 8016486:	9004      	str	r0, [sp, #16]
 8016488:	4648      	mov	r0, r9
 801648a:	f000 fceb 	bl	8016e64 <_Bfree>
 801648e:	9a04      	ldr	r2, [sp, #16]
 8016490:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016492:	9201      	str	r2, [sp, #4]
 8016494:	1b1a      	subs	r2, r3, r4
 8016496:	d004      	beq.n	80164a2 <_dtoa_r+0x6b2>
 8016498:	9901      	ldr	r1, [sp, #4]
 801649a:	4648      	mov	r0, r9
 801649c:	f000 fe56 	bl	801714c <__pow5mult>
 80164a0:	9001      	str	r0, [sp, #4]
 80164a2:	2101      	movs	r1, #1
 80164a4:	4648      	mov	r0, r9
 80164a6:	f000 fd91 	bl	8016fcc <__i2b>
 80164aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80164ac:	4604      	mov	r4, r0
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	f000 81d0 	beq.w	8016854 <_dtoa_r+0xa64>
 80164b4:	461a      	mov	r2, r3
 80164b6:	4601      	mov	r1, r0
 80164b8:	4648      	mov	r0, r9
 80164ba:	f000 fe47 	bl	801714c <__pow5mult>
 80164be:	9b07      	ldr	r3, [sp, #28]
 80164c0:	2b01      	cmp	r3, #1
 80164c2:	4604      	mov	r4, r0
 80164c4:	f300 8095 	bgt.w	80165f2 <_dtoa_r+0x802>
 80164c8:	9b02      	ldr	r3, [sp, #8]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	f040 808b 	bne.w	80165e6 <_dtoa_r+0x7f6>
 80164d0:	9b03      	ldr	r3, [sp, #12]
 80164d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80164d6:	2a00      	cmp	r2, #0
 80164d8:	f040 8087 	bne.w	80165ea <_dtoa_r+0x7fa>
 80164dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80164e0:	0d12      	lsrs	r2, r2, #20
 80164e2:	0512      	lsls	r2, r2, #20
 80164e4:	2a00      	cmp	r2, #0
 80164e6:	f000 8082 	beq.w	80165ee <_dtoa_r+0x7fe>
 80164ea:	9b05      	ldr	r3, [sp, #20]
 80164ec:	3301      	adds	r3, #1
 80164ee:	9305      	str	r3, [sp, #20]
 80164f0:	9b06      	ldr	r3, [sp, #24]
 80164f2:	3301      	adds	r3, #1
 80164f4:	9306      	str	r3, [sp, #24]
 80164f6:	2301      	movs	r3, #1
 80164f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80164fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	f000 81af 	beq.w	8016860 <_dtoa_r+0xa70>
 8016502:	6922      	ldr	r2, [r4, #16]
 8016504:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016508:	6910      	ldr	r0, [r2, #16]
 801650a:	f000 fd13 	bl	8016f34 <__hi0bits>
 801650e:	f1c0 0020 	rsb	r0, r0, #32
 8016512:	9b06      	ldr	r3, [sp, #24]
 8016514:	4418      	add	r0, r3
 8016516:	f010 001f 	ands.w	r0, r0, #31
 801651a:	d076      	beq.n	801660a <_dtoa_r+0x81a>
 801651c:	f1c0 0220 	rsb	r2, r0, #32
 8016520:	2a04      	cmp	r2, #4
 8016522:	dd69      	ble.n	80165f8 <_dtoa_r+0x808>
 8016524:	9b05      	ldr	r3, [sp, #20]
 8016526:	f1c0 001c 	rsb	r0, r0, #28
 801652a:	4403      	add	r3, r0
 801652c:	9305      	str	r3, [sp, #20]
 801652e:	9b06      	ldr	r3, [sp, #24]
 8016530:	4406      	add	r6, r0
 8016532:	4403      	add	r3, r0
 8016534:	9306      	str	r3, [sp, #24]
 8016536:	9b05      	ldr	r3, [sp, #20]
 8016538:	2b00      	cmp	r3, #0
 801653a:	dd05      	ble.n	8016548 <_dtoa_r+0x758>
 801653c:	9901      	ldr	r1, [sp, #4]
 801653e:	461a      	mov	r2, r3
 8016540:	4648      	mov	r0, r9
 8016542:	f000 fe5d 	bl	8017200 <__lshift>
 8016546:	9001      	str	r0, [sp, #4]
 8016548:	9b06      	ldr	r3, [sp, #24]
 801654a:	2b00      	cmp	r3, #0
 801654c:	dd05      	ble.n	801655a <_dtoa_r+0x76a>
 801654e:	4621      	mov	r1, r4
 8016550:	461a      	mov	r2, r3
 8016552:	4648      	mov	r0, r9
 8016554:	f000 fe54 	bl	8017200 <__lshift>
 8016558:	4604      	mov	r4, r0
 801655a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801655c:	2b00      	cmp	r3, #0
 801655e:	d056      	beq.n	801660e <_dtoa_r+0x81e>
 8016560:	9801      	ldr	r0, [sp, #4]
 8016562:	4621      	mov	r1, r4
 8016564:	f000 feb8 	bl	80172d8 <__mcmp>
 8016568:	2800      	cmp	r0, #0
 801656a:	da50      	bge.n	801660e <_dtoa_r+0x81e>
 801656c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8016570:	9304      	str	r3, [sp, #16]
 8016572:	9901      	ldr	r1, [sp, #4]
 8016574:	2300      	movs	r3, #0
 8016576:	220a      	movs	r2, #10
 8016578:	4648      	mov	r0, r9
 801657a:	f000 fc95 	bl	8016ea8 <__multadd>
 801657e:	9b08      	ldr	r3, [sp, #32]
 8016580:	9001      	str	r0, [sp, #4]
 8016582:	2b00      	cmp	r3, #0
 8016584:	f000 816e 	beq.w	8016864 <_dtoa_r+0xa74>
 8016588:	4629      	mov	r1, r5
 801658a:	2300      	movs	r3, #0
 801658c:	220a      	movs	r2, #10
 801658e:	4648      	mov	r0, r9
 8016590:	f000 fc8a 	bl	8016ea8 <__multadd>
 8016594:	f1bb 0f00 	cmp.w	fp, #0
 8016598:	4605      	mov	r5, r0
 801659a:	dc64      	bgt.n	8016666 <_dtoa_r+0x876>
 801659c:	9b07      	ldr	r3, [sp, #28]
 801659e:	2b02      	cmp	r3, #2
 80165a0:	dc3e      	bgt.n	8016620 <_dtoa_r+0x830>
 80165a2:	e060      	b.n	8016666 <_dtoa_r+0x876>
 80165a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80165a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80165aa:	e73c      	b.n	8016426 <_dtoa_r+0x636>
 80165ac:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80165b0:	42a3      	cmp	r3, r4
 80165b2:	bfbf      	itttt	lt
 80165b4:	1ae2      	sublt	r2, r4, r3
 80165b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80165b8:	189b      	addlt	r3, r3, r2
 80165ba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80165bc:	bfae      	itee	ge
 80165be:	1b1c      	subge	r4, r3, r4
 80165c0:	4623      	movlt	r3, r4
 80165c2:	2400      	movlt	r4, #0
 80165c4:	f1ba 0f00 	cmp.w	sl, #0
 80165c8:	bfb5      	itete	lt
 80165ca:	9a05      	ldrlt	r2, [sp, #20]
 80165cc:	9e05      	ldrge	r6, [sp, #20]
 80165ce:	eba2 060a 	sublt.w	r6, r2, sl
 80165d2:	4652      	movge	r2, sl
 80165d4:	bfb8      	it	lt
 80165d6:	2200      	movlt	r2, #0
 80165d8:	e727      	b.n	801642a <_dtoa_r+0x63a>
 80165da:	9e05      	ldr	r6, [sp, #20]
 80165dc:	9d08      	ldr	r5, [sp, #32]
 80165de:	461c      	mov	r4, r3
 80165e0:	e730      	b.n	8016444 <_dtoa_r+0x654>
 80165e2:	461a      	mov	r2, r3
 80165e4:	e758      	b.n	8016498 <_dtoa_r+0x6a8>
 80165e6:	2300      	movs	r3, #0
 80165e8:	e786      	b.n	80164f8 <_dtoa_r+0x708>
 80165ea:	9b02      	ldr	r3, [sp, #8]
 80165ec:	e784      	b.n	80164f8 <_dtoa_r+0x708>
 80165ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 80165f0:	e783      	b.n	80164fa <_dtoa_r+0x70a>
 80165f2:	2300      	movs	r3, #0
 80165f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80165f6:	e784      	b.n	8016502 <_dtoa_r+0x712>
 80165f8:	d09d      	beq.n	8016536 <_dtoa_r+0x746>
 80165fa:	9b05      	ldr	r3, [sp, #20]
 80165fc:	321c      	adds	r2, #28
 80165fe:	4413      	add	r3, r2
 8016600:	9305      	str	r3, [sp, #20]
 8016602:	9b06      	ldr	r3, [sp, #24]
 8016604:	4416      	add	r6, r2
 8016606:	4413      	add	r3, r2
 8016608:	e794      	b.n	8016534 <_dtoa_r+0x744>
 801660a:	4602      	mov	r2, r0
 801660c:	e7f5      	b.n	80165fa <_dtoa_r+0x80a>
 801660e:	f1ba 0f00 	cmp.w	sl, #0
 8016612:	f8cd 8010 	str.w	r8, [sp, #16]
 8016616:	46d3      	mov	fp, sl
 8016618:	dc21      	bgt.n	801665e <_dtoa_r+0x86e>
 801661a:	9b07      	ldr	r3, [sp, #28]
 801661c:	2b02      	cmp	r3, #2
 801661e:	dd1e      	ble.n	801665e <_dtoa_r+0x86e>
 8016620:	f1bb 0f00 	cmp.w	fp, #0
 8016624:	f47f aeb7 	bne.w	8016396 <_dtoa_r+0x5a6>
 8016628:	4621      	mov	r1, r4
 801662a:	465b      	mov	r3, fp
 801662c:	2205      	movs	r2, #5
 801662e:	4648      	mov	r0, r9
 8016630:	f000 fc3a 	bl	8016ea8 <__multadd>
 8016634:	4601      	mov	r1, r0
 8016636:	4604      	mov	r4, r0
 8016638:	9801      	ldr	r0, [sp, #4]
 801663a:	f000 fe4d 	bl	80172d8 <__mcmp>
 801663e:	2800      	cmp	r0, #0
 8016640:	f77f aea9 	ble.w	8016396 <_dtoa_r+0x5a6>
 8016644:	463e      	mov	r6, r7
 8016646:	2331      	movs	r3, #49	@ 0x31
 8016648:	f806 3b01 	strb.w	r3, [r6], #1
 801664c:	9b04      	ldr	r3, [sp, #16]
 801664e:	3301      	adds	r3, #1
 8016650:	9304      	str	r3, [sp, #16]
 8016652:	e6a4      	b.n	801639e <_dtoa_r+0x5ae>
 8016654:	f8cd 8010 	str.w	r8, [sp, #16]
 8016658:	4654      	mov	r4, sl
 801665a:	4625      	mov	r5, r4
 801665c:	e7f2      	b.n	8016644 <_dtoa_r+0x854>
 801665e:	9b08      	ldr	r3, [sp, #32]
 8016660:	2b00      	cmp	r3, #0
 8016662:	f000 8103 	beq.w	801686c <_dtoa_r+0xa7c>
 8016666:	2e00      	cmp	r6, #0
 8016668:	dd05      	ble.n	8016676 <_dtoa_r+0x886>
 801666a:	4629      	mov	r1, r5
 801666c:	4632      	mov	r2, r6
 801666e:	4648      	mov	r0, r9
 8016670:	f000 fdc6 	bl	8017200 <__lshift>
 8016674:	4605      	mov	r5, r0
 8016676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016678:	2b00      	cmp	r3, #0
 801667a:	d058      	beq.n	801672e <_dtoa_r+0x93e>
 801667c:	6869      	ldr	r1, [r5, #4]
 801667e:	4648      	mov	r0, r9
 8016680:	f000 fbb0 	bl	8016de4 <_Balloc>
 8016684:	4606      	mov	r6, r0
 8016686:	b928      	cbnz	r0, 8016694 <_dtoa_r+0x8a4>
 8016688:	4b82      	ldr	r3, [pc, #520]	@ (8016894 <_dtoa_r+0xaa4>)
 801668a:	4602      	mov	r2, r0
 801668c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016690:	f7ff bbc7 	b.w	8015e22 <_dtoa_r+0x32>
 8016694:	692a      	ldr	r2, [r5, #16]
 8016696:	3202      	adds	r2, #2
 8016698:	0092      	lsls	r2, r2, #2
 801669a:	f105 010c 	add.w	r1, r5, #12
 801669e:	300c      	adds	r0, #12
 80166a0:	f7ff fb0d 	bl	8015cbe <memcpy>
 80166a4:	2201      	movs	r2, #1
 80166a6:	4631      	mov	r1, r6
 80166a8:	4648      	mov	r0, r9
 80166aa:	f000 fda9 	bl	8017200 <__lshift>
 80166ae:	1c7b      	adds	r3, r7, #1
 80166b0:	9305      	str	r3, [sp, #20]
 80166b2:	eb07 030b 	add.w	r3, r7, fp
 80166b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80166b8:	9b02      	ldr	r3, [sp, #8]
 80166ba:	f003 0301 	and.w	r3, r3, #1
 80166be:	46a8      	mov	r8, r5
 80166c0:	9308      	str	r3, [sp, #32]
 80166c2:	4605      	mov	r5, r0
 80166c4:	9b05      	ldr	r3, [sp, #20]
 80166c6:	9801      	ldr	r0, [sp, #4]
 80166c8:	4621      	mov	r1, r4
 80166ca:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80166ce:	f7ff fb04 	bl	8015cda <quorem>
 80166d2:	4641      	mov	r1, r8
 80166d4:	9002      	str	r0, [sp, #8]
 80166d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80166da:	9801      	ldr	r0, [sp, #4]
 80166dc:	f000 fdfc 	bl	80172d8 <__mcmp>
 80166e0:	462a      	mov	r2, r5
 80166e2:	9006      	str	r0, [sp, #24]
 80166e4:	4621      	mov	r1, r4
 80166e6:	4648      	mov	r0, r9
 80166e8:	f000 fe12 	bl	8017310 <__mdiff>
 80166ec:	68c2      	ldr	r2, [r0, #12]
 80166ee:	4606      	mov	r6, r0
 80166f0:	b9fa      	cbnz	r2, 8016732 <_dtoa_r+0x942>
 80166f2:	4601      	mov	r1, r0
 80166f4:	9801      	ldr	r0, [sp, #4]
 80166f6:	f000 fdef 	bl	80172d8 <__mcmp>
 80166fa:	4602      	mov	r2, r0
 80166fc:	4631      	mov	r1, r6
 80166fe:	4648      	mov	r0, r9
 8016700:	920a      	str	r2, [sp, #40]	@ 0x28
 8016702:	f000 fbaf 	bl	8016e64 <_Bfree>
 8016706:	9b07      	ldr	r3, [sp, #28]
 8016708:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801670a:	9e05      	ldr	r6, [sp, #20]
 801670c:	ea43 0102 	orr.w	r1, r3, r2
 8016710:	9b08      	ldr	r3, [sp, #32]
 8016712:	4319      	orrs	r1, r3
 8016714:	d10f      	bne.n	8016736 <_dtoa_r+0x946>
 8016716:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801671a:	d028      	beq.n	801676e <_dtoa_r+0x97e>
 801671c:	9b06      	ldr	r3, [sp, #24]
 801671e:	2b00      	cmp	r3, #0
 8016720:	dd02      	ble.n	8016728 <_dtoa_r+0x938>
 8016722:	9b02      	ldr	r3, [sp, #8]
 8016724:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8016728:	f88b a000 	strb.w	sl, [fp]
 801672c:	e639      	b.n	80163a2 <_dtoa_r+0x5b2>
 801672e:	4628      	mov	r0, r5
 8016730:	e7bd      	b.n	80166ae <_dtoa_r+0x8be>
 8016732:	2201      	movs	r2, #1
 8016734:	e7e2      	b.n	80166fc <_dtoa_r+0x90c>
 8016736:	9b06      	ldr	r3, [sp, #24]
 8016738:	2b00      	cmp	r3, #0
 801673a:	db04      	blt.n	8016746 <_dtoa_r+0x956>
 801673c:	9907      	ldr	r1, [sp, #28]
 801673e:	430b      	orrs	r3, r1
 8016740:	9908      	ldr	r1, [sp, #32]
 8016742:	430b      	orrs	r3, r1
 8016744:	d120      	bne.n	8016788 <_dtoa_r+0x998>
 8016746:	2a00      	cmp	r2, #0
 8016748:	ddee      	ble.n	8016728 <_dtoa_r+0x938>
 801674a:	9901      	ldr	r1, [sp, #4]
 801674c:	2201      	movs	r2, #1
 801674e:	4648      	mov	r0, r9
 8016750:	f000 fd56 	bl	8017200 <__lshift>
 8016754:	4621      	mov	r1, r4
 8016756:	9001      	str	r0, [sp, #4]
 8016758:	f000 fdbe 	bl	80172d8 <__mcmp>
 801675c:	2800      	cmp	r0, #0
 801675e:	dc03      	bgt.n	8016768 <_dtoa_r+0x978>
 8016760:	d1e2      	bne.n	8016728 <_dtoa_r+0x938>
 8016762:	f01a 0f01 	tst.w	sl, #1
 8016766:	d0df      	beq.n	8016728 <_dtoa_r+0x938>
 8016768:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801676c:	d1d9      	bne.n	8016722 <_dtoa_r+0x932>
 801676e:	2339      	movs	r3, #57	@ 0x39
 8016770:	f88b 3000 	strb.w	r3, [fp]
 8016774:	4633      	mov	r3, r6
 8016776:	461e      	mov	r6, r3
 8016778:	3b01      	subs	r3, #1
 801677a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801677e:	2a39      	cmp	r2, #57	@ 0x39
 8016780:	d053      	beq.n	801682a <_dtoa_r+0xa3a>
 8016782:	3201      	adds	r2, #1
 8016784:	701a      	strb	r2, [r3, #0]
 8016786:	e60c      	b.n	80163a2 <_dtoa_r+0x5b2>
 8016788:	2a00      	cmp	r2, #0
 801678a:	dd07      	ble.n	801679c <_dtoa_r+0x9ac>
 801678c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016790:	d0ed      	beq.n	801676e <_dtoa_r+0x97e>
 8016792:	f10a 0301 	add.w	r3, sl, #1
 8016796:	f88b 3000 	strb.w	r3, [fp]
 801679a:	e602      	b.n	80163a2 <_dtoa_r+0x5b2>
 801679c:	9b05      	ldr	r3, [sp, #20]
 801679e:	9a05      	ldr	r2, [sp, #20]
 80167a0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80167a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80167a6:	4293      	cmp	r3, r2
 80167a8:	d029      	beq.n	80167fe <_dtoa_r+0xa0e>
 80167aa:	9901      	ldr	r1, [sp, #4]
 80167ac:	2300      	movs	r3, #0
 80167ae:	220a      	movs	r2, #10
 80167b0:	4648      	mov	r0, r9
 80167b2:	f000 fb79 	bl	8016ea8 <__multadd>
 80167b6:	45a8      	cmp	r8, r5
 80167b8:	9001      	str	r0, [sp, #4]
 80167ba:	f04f 0300 	mov.w	r3, #0
 80167be:	f04f 020a 	mov.w	r2, #10
 80167c2:	4641      	mov	r1, r8
 80167c4:	4648      	mov	r0, r9
 80167c6:	d107      	bne.n	80167d8 <_dtoa_r+0x9e8>
 80167c8:	f000 fb6e 	bl	8016ea8 <__multadd>
 80167cc:	4680      	mov	r8, r0
 80167ce:	4605      	mov	r5, r0
 80167d0:	9b05      	ldr	r3, [sp, #20]
 80167d2:	3301      	adds	r3, #1
 80167d4:	9305      	str	r3, [sp, #20]
 80167d6:	e775      	b.n	80166c4 <_dtoa_r+0x8d4>
 80167d8:	f000 fb66 	bl	8016ea8 <__multadd>
 80167dc:	4629      	mov	r1, r5
 80167de:	4680      	mov	r8, r0
 80167e0:	2300      	movs	r3, #0
 80167e2:	220a      	movs	r2, #10
 80167e4:	4648      	mov	r0, r9
 80167e6:	f000 fb5f 	bl	8016ea8 <__multadd>
 80167ea:	4605      	mov	r5, r0
 80167ec:	e7f0      	b.n	80167d0 <_dtoa_r+0x9e0>
 80167ee:	f1bb 0f00 	cmp.w	fp, #0
 80167f2:	bfcc      	ite	gt
 80167f4:	465e      	movgt	r6, fp
 80167f6:	2601      	movle	r6, #1
 80167f8:	443e      	add	r6, r7
 80167fa:	f04f 0800 	mov.w	r8, #0
 80167fe:	9901      	ldr	r1, [sp, #4]
 8016800:	2201      	movs	r2, #1
 8016802:	4648      	mov	r0, r9
 8016804:	f000 fcfc 	bl	8017200 <__lshift>
 8016808:	4621      	mov	r1, r4
 801680a:	9001      	str	r0, [sp, #4]
 801680c:	f000 fd64 	bl	80172d8 <__mcmp>
 8016810:	2800      	cmp	r0, #0
 8016812:	dcaf      	bgt.n	8016774 <_dtoa_r+0x984>
 8016814:	d102      	bne.n	801681c <_dtoa_r+0xa2c>
 8016816:	f01a 0f01 	tst.w	sl, #1
 801681a:	d1ab      	bne.n	8016774 <_dtoa_r+0x984>
 801681c:	4633      	mov	r3, r6
 801681e:	461e      	mov	r6, r3
 8016820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016824:	2a30      	cmp	r2, #48	@ 0x30
 8016826:	d0fa      	beq.n	801681e <_dtoa_r+0xa2e>
 8016828:	e5bb      	b.n	80163a2 <_dtoa_r+0x5b2>
 801682a:	429f      	cmp	r7, r3
 801682c:	d1a3      	bne.n	8016776 <_dtoa_r+0x986>
 801682e:	9b04      	ldr	r3, [sp, #16]
 8016830:	3301      	adds	r3, #1
 8016832:	9304      	str	r3, [sp, #16]
 8016834:	2331      	movs	r3, #49	@ 0x31
 8016836:	703b      	strb	r3, [r7, #0]
 8016838:	e5b3      	b.n	80163a2 <_dtoa_r+0x5b2>
 801683a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801683c:	4f16      	ldr	r7, [pc, #88]	@ (8016898 <_dtoa_r+0xaa8>)
 801683e:	b11b      	cbz	r3, 8016848 <_dtoa_r+0xa58>
 8016840:	f107 0308 	add.w	r3, r7, #8
 8016844:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016846:	6013      	str	r3, [r2, #0]
 8016848:	4638      	mov	r0, r7
 801684a:	b011      	add	sp, #68	@ 0x44
 801684c:	ecbd 8b02 	vpop	{d8}
 8016850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016854:	9b07      	ldr	r3, [sp, #28]
 8016856:	2b01      	cmp	r3, #1
 8016858:	f77f ae36 	ble.w	80164c8 <_dtoa_r+0x6d8>
 801685c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801685e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016860:	2001      	movs	r0, #1
 8016862:	e656      	b.n	8016512 <_dtoa_r+0x722>
 8016864:	f1bb 0f00 	cmp.w	fp, #0
 8016868:	f77f aed7 	ble.w	801661a <_dtoa_r+0x82a>
 801686c:	463e      	mov	r6, r7
 801686e:	9801      	ldr	r0, [sp, #4]
 8016870:	4621      	mov	r1, r4
 8016872:	f7ff fa32 	bl	8015cda <quorem>
 8016876:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801687a:	f806 ab01 	strb.w	sl, [r6], #1
 801687e:	1bf2      	subs	r2, r6, r7
 8016880:	4593      	cmp	fp, r2
 8016882:	ddb4      	ble.n	80167ee <_dtoa_r+0x9fe>
 8016884:	9901      	ldr	r1, [sp, #4]
 8016886:	2300      	movs	r3, #0
 8016888:	220a      	movs	r2, #10
 801688a:	4648      	mov	r0, r9
 801688c:	f000 fb0c 	bl	8016ea8 <__multadd>
 8016890:	9001      	str	r0, [sp, #4]
 8016892:	e7ec      	b.n	801686e <_dtoa_r+0xa7e>
 8016894:	08017f0c 	.word	0x08017f0c
 8016898:	08017e90 	.word	0x08017e90

0801689c <__sfputc_r>:
 801689c:	6893      	ldr	r3, [r2, #8]
 801689e:	3b01      	subs	r3, #1
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	b410      	push	{r4}
 80168a4:	6093      	str	r3, [r2, #8]
 80168a6:	da08      	bge.n	80168ba <__sfputc_r+0x1e>
 80168a8:	6994      	ldr	r4, [r2, #24]
 80168aa:	42a3      	cmp	r3, r4
 80168ac:	db01      	blt.n	80168b2 <__sfputc_r+0x16>
 80168ae:	290a      	cmp	r1, #10
 80168b0:	d103      	bne.n	80168ba <__sfputc_r+0x1e>
 80168b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168b6:	f000 be5a 	b.w	801756e <__swbuf_r>
 80168ba:	6813      	ldr	r3, [r2, #0]
 80168bc:	1c58      	adds	r0, r3, #1
 80168be:	6010      	str	r0, [r2, #0]
 80168c0:	7019      	strb	r1, [r3, #0]
 80168c2:	4608      	mov	r0, r1
 80168c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168c8:	4770      	bx	lr

080168ca <__sfputs_r>:
 80168ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168cc:	4606      	mov	r6, r0
 80168ce:	460f      	mov	r7, r1
 80168d0:	4614      	mov	r4, r2
 80168d2:	18d5      	adds	r5, r2, r3
 80168d4:	42ac      	cmp	r4, r5
 80168d6:	d101      	bne.n	80168dc <__sfputs_r+0x12>
 80168d8:	2000      	movs	r0, #0
 80168da:	e007      	b.n	80168ec <__sfputs_r+0x22>
 80168dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168e0:	463a      	mov	r2, r7
 80168e2:	4630      	mov	r0, r6
 80168e4:	f7ff ffda 	bl	801689c <__sfputc_r>
 80168e8:	1c43      	adds	r3, r0, #1
 80168ea:	d1f3      	bne.n	80168d4 <__sfputs_r+0xa>
 80168ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080168f0 <_vfiprintf_r>:
 80168f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f4:	460d      	mov	r5, r1
 80168f6:	b09d      	sub	sp, #116	@ 0x74
 80168f8:	4614      	mov	r4, r2
 80168fa:	4698      	mov	r8, r3
 80168fc:	4606      	mov	r6, r0
 80168fe:	b118      	cbz	r0, 8016908 <_vfiprintf_r+0x18>
 8016900:	6a03      	ldr	r3, [r0, #32]
 8016902:	b90b      	cbnz	r3, 8016908 <_vfiprintf_r+0x18>
 8016904:	f7ff f8fc 	bl	8015b00 <__sinit>
 8016908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801690a:	07d9      	lsls	r1, r3, #31
 801690c:	d405      	bmi.n	801691a <_vfiprintf_r+0x2a>
 801690e:	89ab      	ldrh	r3, [r5, #12]
 8016910:	059a      	lsls	r2, r3, #22
 8016912:	d402      	bmi.n	801691a <_vfiprintf_r+0x2a>
 8016914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016916:	f7ff f9d0 	bl	8015cba <__retarget_lock_acquire_recursive>
 801691a:	89ab      	ldrh	r3, [r5, #12]
 801691c:	071b      	lsls	r3, r3, #28
 801691e:	d501      	bpl.n	8016924 <_vfiprintf_r+0x34>
 8016920:	692b      	ldr	r3, [r5, #16]
 8016922:	b99b      	cbnz	r3, 801694c <_vfiprintf_r+0x5c>
 8016924:	4629      	mov	r1, r5
 8016926:	4630      	mov	r0, r6
 8016928:	f000 fe60 	bl	80175ec <__swsetup_r>
 801692c:	b170      	cbz	r0, 801694c <_vfiprintf_r+0x5c>
 801692e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016930:	07dc      	lsls	r4, r3, #31
 8016932:	d504      	bpl.n	801693e <_vfiprintf_r+0x4e>
 8016934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016938:	b01d      	add	sp, #116	@ 0x74
 801693a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801693e:	89ab      	ldrh	r3, [r5, #12]
 8016940:	0598      	lsls	r0, r3, #22
 8016942:	d4f7      	bmi.n	8016934 <_vfiprintf_r+0x44>
 8016944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016946:	f7ff f9b9 	bl	8015cbc <__retarget_lock_release_recursive>
 801694a:	e7f3      	b.n	8016934 <_vfiprintf_r+0x44>
 801694c:	2300      	movs	r3, #0
 801694e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016950:	2320      	movs	r3, #32
 8016952:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016956:	f8cd 800c 	str.w	r8, [sp, #12]
 801695a:	2330      	movs	r3, #48	@ 0x30
 801695c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016b0c <_vfiprintf_r+0x21c>
 8016960:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016964:	f04f 0901 	mov.w	r9, #1
 8016968:	4623      	mov	r3, r4
 801696a:	469a      	mov	sl, r3
 801696c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016970:	b10a      	cbz	r2, 8016976 <_vfiprintf_r+0x86>
 8016972:	2a25      	cmp	r2, #37	@ 0x25
 8016974:	d1f9      	bne.n	801696a <_vfiprintf_r+0x7a>
 8016976:	ebba 0b04 	subs.w	fp, sl, r4
 801697a:	d00b      	beq.n	8016994 <_vfiprintf_r+0xa4>
 801697c:	465b      	mov	r3, fp
 801697e:	4622      	mov	r2, r4
 8016980:	4629      	mov	r1, r5
 8016982:	4630      	mov	r0, r6
 8016984:	f7ff ffa1 	bl	80168ca <__sfputs_r>
 8016988:	3001      	adds	r0, #1
 801698a:	f000 80a7 	beq.w	8016adc <_vfiprintf_r+0x1ec>
 801698e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016990:	445a      	add	r2, fp
 8016992:	9209      	str	r2, [sp, #36]	@ 0x24
 8016994:	f89a 3000 	ldrb.w	r3, [sl]
 8016998:	2b00      	cmp	r3, #0
 801699a:	f000 809f 	beq.w	8016adc <_vfiprintf_r+0x1ec>
 801699e:	2300      	movs	r3, #0
 80169a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80169a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169a8:	f10a 0a01 	add.w	sl, sl, #1
 80169ac:	9304      	str	r3, [sp, #16]
 80169ae:	9307      	str	r3, [sp, #28]
 80169b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80169b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80169b6:	4654      	mov	r4, sl
 80169b8:	2205      	movs	r2, #5
 80169ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169be:	4853      	ldr	r0, [pc, #332]	@ (8016b0c <_vfiprintf_r+0x21c>)
 80169c0:	f7e9 fc8e 	bl	80002e0 <memchr>
 80169c4:	9a04      	ldr	r2, [sp, #16]
 80169c6:	b9d8      	cbnz	r0, 8016a00 <_vfiprintf_r+0x110>
 80169c8:	06d1      	lsls	r1, r2, #27
 80169ca:	bf44      	itt	mi
 80169cc:	2320      	movmi	r3, #32
 80169ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80169d2:	0713      	lsls	r3, r2, #28
 80169d4:	bf44      	itt	mi
 80169d6:	232b      	movmi	r3, #43	@ 0x2b
 80169d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80169dc:	f89a 3000 	ldrb.w	r3, [sl]
 80169e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80169e2:	d015      	beq.n	8016a10 <_vfiprintf_r+0x120>
 80169e4:	9a07      	ldr	r2, [sp, #28]
 80169e6:	4654      	mov	r4, sl
 80169e8:	2000      	movs	r0, #0
 80169ea:	f04f 0c0a 	mov.w	ip, #10
 80169ee:	4621      	mov	r1, r4
 80169f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169f4:	3b30      	subs	r3, #48	@ 0x30
 80169f6:	2b09      	cmp	r3, #9
 80169f8:	d94b      	bls.n	8016a92 <_vfiprintf_r+0x1a2>
 80169fa:	b1b0      	cbz	r0, 8016a2a <_vfiprintf_r+0x13a>
 80169fc:	9207      	str	r2, [sp, #28]
 80169fe:	e014      	b.n	8016a2a <_vfiprintf_r+0x13a>
 8016a00:	eba0 0308 	sub.w	r3, r0, r8
 8016a04:	fa09 f303 	lsl.w	r3, r9, r3
 8016a08:	4313      	orrs	r3, r2
 8016a0a:	9304      	str	r3, [sp, #16]
 8016a0c:	46a2      	mov	sl, r4
 8016a0e:	e7d2      	b.n	80169b6 <_vfiprintf_r+0xc6>
 8016a10:	9b03      	ldr	r3, [sp, #12]
 8016a12:	1d19      	adds	r1, r3, #4
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	9103      	str	r1, [sp, #12]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	bfbb      	ittet	lt
 8016a1c:	425b      	neglt	r3, r3
 8016a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8016a22:	9307      	strge	r3, [sp, #28]
 8016a24:	9307      	strlt	r3, [sp, #28]
 8016a26:	bfb8      	it	lt
 8016a28:	9204      	strlt	r2, [sp, #16]
 8016a2a:	7823      	ldrb	r3, [r4, #0]
 8016a2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8016a2e:	d10a      	bne.n	8016a46 <_vfiprintf_r+0x156>
 8016a30:	7863      	ldrb	r3, [r4, #1]
 8016a32:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a34:	d132      	bne.n	8016a9c <_vfiprintf_r+0x1ac>
 8016a36:	9b03      	ldr	r3, [sp, #12]
 8016a38:	1d1a      	adds	r2, r3, #4
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	9203      	str	r2, [sp, #12]
 8016a3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016a42:	3402      	adds	r4, #2
 8016a44:	9305      	str	r3, [sp, #20]
 8016a46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016b1c <_vfiprintf_r+0x22c>
 8016a4a:	7821      	ldrb	r1, [r4, #0]
 8016a4c:	2203      	movs	r2, #3
 8016a4e:	4650      	mov	r0, sl
 8016a50:	f7e9 fc46 	bl	80002e0 <memchr>
 8016a54:	b138      	cbz	r0, 8016a66 <_vfiprintf_r+0x176>
 8016a56:	9b04      	ldr	r3, [sp, #16]
 8016a58:	eba0 000a 	sub.w	r0, r0, sl
 8016a5c:	2240      	movs	r2, #64	@ 0x40
 8016a5e:	4082      	lsls	r2, r0
 8016a60:	4313      	orrs	r3, r2
 8016a62:	3401      	adds	r4, #1
 8016a64:	9304      	str	r3, [sp, #16]
 8016a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a6a:	4829      	ldr	r0, [pc, #164]	@ (8016b10 <_vfiprintf_r+0x220>)
 8016a6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016a70:	2206      	movs	r2, #6
 8016a72:	f7e9 fc35 	bl	80002e0 <memchr>
 8016a76:	2800      	cmp	r0, #0
 8016a78:	d03f      	beq.n	8016afa <_vfiprintf_r+0x20a>
 8016a7a:	4b26      	ldr	r3, [pc, #152]	@ (8016b14 <_vfiprintf_r+0x224>)
 8016a7c:	bb1b      	cbnz	r3, 8016ac6 <_vfiprintf_r+0x1d6>
 8016a7e:	9b03      	ldr	r3, [sp, #12]
 8016a80:	3307      	adds	r3, #7
 8016a82:	f023 0307 	bic.w	r3, r3, #7
 8016a86:	3308      	adds	r3, #8
 8016a88:	9303      	str	r3, [sp, #12]
 8016a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a8c:	443b      	add	r3, r7
 8016a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a90:	e76a      	b.n	8016968 <_vfiprintf_r+0x78>
 8016a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8016a96:	460c      	mov	r4, r1
 8016a98:	2001      	movs	r0, #1
 8016a9a:	e7a8      	b.n	80169ee <_vfiprintf_r+0xfe>
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	3401      	adds	r4, #1
 8016aa0:	9305      	str	r3, [sp, #20]
 8016aa2:	4619      	mov	r1, r3
 8016aa4:	f04f 0c0a 	mov.w	ip, #10
 8016aa8:	4620      	mov	r0, r4
 8016aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016aae:	3a30      	subs	r2, #48	@ 0x30
 8016ab0:	2a09      	cmp	r2, #9
 8016ab2:	d903      	bls.n	8016abc <_vfiprintf_r+0x1cc>
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d0c6      	beq.n	8016a46 <_vfiprintf_r+0x156>
 8016ab8:	9105      	str	r1, [sp, #20]
 8016aba:	e7c4      	b.n	8016a46 <_vfiprintf_r+0x156>
 8016abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8016ac0:	4604      	mov	r4, r0
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	e7f0      	b.n	8016aa8 <_vfiprintf_r+0x1b8>
 8016ac6:	ab03      	add	r3, sp, #12
 8016ac8:	9300      	str	r3, [sp, #0]
 8016aca:	462a      	mov	r2, r5
 8016acc:	4b12      	ldr	r3, [pc, #72]	@ (8016b18 <_vfiprintf_r+0x228>)
 8016ace:	a904      	add	r1, sp, #16
 8016ad0:	4630      	mov	r0, r6
 8016ad2:	f7fe fbe1 	bl	8015298 <_printf_float>
 8016ad6:	4607      	mov	r7, r0
 8016ad8:	1c78      	adds	r0, r7, #1
 8016ada:	d1d6      	bne.n	8016a8a <_vfiprintf_r+0x19a>
 8016adc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016ade:	07d9      	lsls	r1, r3, #31
 8016ae0:	d405      	bmi.n	8016aee <_vfiprintf_r+0x1fe>
 8016ae2:	89ab      	ldrh	r3, [r5, #12]
 8016ae4:	059a      	lsls	r2, r3, #22
 8016ae6:	d402      	bmi.n	8016aee <_vfiprintf_r+0x1fe>
 8016ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016aea:	f7ff f8e7 	bl	8015cbc <__retarget_lock_release_recursive>
 8016aee:	89ab      	ldrh	r3, [r5, #12]
 8016af0:	065b      	lsls	r3, r3, #25
 8016af2:	f53f af1f 	bmi.w	8016934 <_vfiprintf_r+0x44>
 8016af6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016af8:	e71e      	b.n	8016938 <_vfiprintf_r+0x48>
 8016afa:	ab03      	add	r3, sp, #12
 8016afc:	9300      	str	r3, [sp, #0]
 8016afe:	462a      	mov	r2, r5
 8016b00:	4b05      	ldr	r3, [pc, #20]	@ (8016b18 <_vfiprintf_r+0x228>)
 8016b02:	a904      	add	r1, sp, #16
 8016b04:	4630      	mov	r0, r6
 8016b06:	f7fe fe4f 	bl	80157a8 <_printf_i>
 8016b0a:	e7e4      	b.n	8016ad6 <_vfiprintf_r+0x1e6>
 8016b0c:	08017f1d 	.word	0x08017f1d
 8016b10:	08017f27 	.word	0x08017f27
 8016b14:	08015299 	.word	0x08015299
 8016b18:	080168cb 	.word	0x080168cb
 8016b1c:	08017f23 	.word	0x08017f23

08016b20 <malloc>:
 8016b20:	4b02      	ldr	r3, [pc, #8]	@ (8016b2c <malloc+0xc>)
 8016b22:	4601      	mov	r1, r0
 8016b24:	6818      	ldr	r0, [r3, #0]
 8016b26:	f000 b825 	b.w	8016b74 <_malloc_r>
 8016b2a:	bf00      	nop
 8016b2c:	24000140 	.word	0x24000140

08016b30 <sbrk_aligned>:
 8016b30:	b570      	push	{r4, r5, r6, lr}
 8016b32:	4e0f      	ldr	r6, [pc, #60]	@ (8016b70 <sbrk_aligned+0x40>)
 8016b34:	460c      	mov	r4, r1
 8016b36:	6831      	ldr	r1, [r6, #0]
 8016b38:	4605      	mov	r5, r0
 8016b3a:	b911      	cbnz	r1, 8016b42 <sbrk_aligned+0x12>
 8016b3c:	f000 fe64 	bl	8017808 <_sbrk_r>
 8016b40:	6030      	str	r0, [r6, #0]
 8016b42:	4621      	mov	r1, r4
 8016b44:	4628      	mov	r0, r5
 8016b46:	f000 fe5f 	bl	8017808 <_sbrk_r>
 8016b4a:	1c43      	adds	r3, r0, #1
 8016b4c:	d103      	bne.n	8016b56 <sbrk_aligned+0x26>
 8016b4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016b52:	4620      	mov	r0, r4
 8016b54:	bd70      	pop	{r4, r5, r6, pc}
 8016b56:	1cc4      	adds	r4, r0, #3
 8016b58:	f024 0403 	bic.w	r4, r4, #3
 8016b5c:	42a0      	cmp	r0, r4
 8016b5e:	d0f8      	beq.n	8016b52 <sbrk_aligned+0x22>
 8016b60:	1a21      	subs	r1, r4, r0
 8016b62:	4628      	mov	r0, r5
 8016b64:	f000 fe50 	bl	8017808 <_sbrk_r>
 8016b68:	3001      	adds	r0, #1
 8016b6a:	d1f2      	bne.n	8016b52 <sbrk_aligned+0x22>
 8016b6c:	e7ef      	b.n	8016b4e <sbrk_aligned+0x1e>
 8016b6e:	bf00      	nop
 8016b70:	24001874 	.word	0x24001874

08016b74 <_malloc_r>:
 8016b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b78:	1ccd      	adds	r5, r1, #3
 8016b7a:	f025 0503 	bic.w	r5, r5, #3
 8016b7e:	3508      	adds	r5, #8
 8016b80:	2d0c      	cmp	r5, #12
 8016b82:	bf38      	it	cc
 8016b84:	250c      	movcc	r5, #12
 8016b86:	2d00      	cmp	r5, #0
 8016b88:	4606      	mov	r6, r0
 8016b8a:	db01      	blt.n	8016b90 <_malloc_r+0x1c>
 8016b8c:	42a9      	cmp	r1, r5
 8016b8e:	d904      	bls.n	8016b9a <_malloc_r+0x26>
 8016b90:	230c      	movs	r3, #12
 8016b92:	6033      	str	r3, [r6, #0]
 8016b94:	2000      	movs	r0, #0
 8016b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016c70 <_malloc_r+0xfc>
 8016b9e:	f000 f915 	bl	8016dcc <__malloc_lock>
 8016ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8016ba6:	461c      	mov	r4, r3
 8016ba8:	bb44      	cbnz	r4, 8016bfc <_malloc_r+0x88>
 8016baa:	4629      	mov	r1, r5
 8016bac:	4630      	mov	r0, r6
 8016bae:	f7ff ffbf 	bl	8016b30 <sbrk_aligned>
 8016bb2:	1c43      	adds	r3, r0, #1
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	d158      	bne.n	8016c6a <_malloc_r+0xf6>
 8016bb8:	f8d8 4000 	ldr.w	r4, [r8]
 8016bbc:	4627      	mov	r7, r4
 8016bbe:	2f00      	cmp	r7, #0
 8016bc0:	d143      	bne.n	8016c4a <_malloc_r+0xd6>
 8016bc2:	2c00      	cmp	r4, #0
 8016bc4:	d04b      	beq.n	8016c5e <_malloc_r+0xea>
 8016bc6:	6823      	ldr	r3, [r4, #0]
 8016bc8:	4639      	mov	r1, r7
 8016bca:	4630      	mov	r0, r6
 8016bcc:	eb04 0903 	add.w	r9, r4, r3
 8016bd0:	f000 fe1a 	bl	8017808 <_sbrk_r>
 8016bd4:	4581      	cmp	r9, r0
 8016bd6:	d142      	bne.n	8016c5e <_malloc_r+0xea>
 8016bd8:	6821      	ldr	r1, [r4, #0]
 8016bda:	1a6d      	subs	r5, r5, r1
 8016bdc:	4629      	mov	r1, r5
 8016bde:	4630      	mov	r0, r6
 8016be0:	f7ff ffa6 	bl	8016b30 <sbrk_aligned>
 8016be4:	3001      	adds	r0, #1
 8016be6:	d03a      	beq.n	8016c5e <_malloc_r+0xea>
 8016be8:	6823      	ldr	r3, [r4, #0]
 8016bea:	442b      	add	r3, r5
 8016bec:	6023      	str	r3, [r4, #0]
 8016bee:	f8d8 3000 	ldr.w	r3, [r8]
 8016bf2:	685a      	ldr	r2, [r3, #4]
 8016bf4:	bb62      	cbnz	r2, 8016c50 <_malloc_r+0xdc>
 8016bf6:	f8c8 7000 	str.w	r7, [r8]
 8016bfa:	e00f      	b.n	8016c1c <_malloc_r+0xa8>
 8016bfc:	6822      	ldr	r2, [r4, #0]
 8016bfe:	1b52      	subs	r2, r2, r5
 8016c00:	d420      	bmi.n	8016c44 <_malloc_r+0xd0>
 8016c02:	2a0b      	cmp	r2, #11
 8016c04:	d917      	bls.n	8016c36 <_malloc_r+0xc2>
 8016c06:	1961      	adds	r1, r4, r5
 8016c08:	42a3      	cmp	r3, r4
 8016c0a:	6025      	str	r5, [r4, #0]
 8016c0c:	bf18      	it	ne
 8016c0e:	6059      	strne	r1, [r3, #4]
 8016c10:	6863      	ldr	r3, [r4, #4]
 8016c12:	bf08      	it	eq
 8016c14:	f8c8 1000 	streq.w	r1, [r8]
 8016c18:	5162      	str	r2, [r4, r5]
 8016c1a:	604b      	str	r3, [r1, #4]
 8016c1c:	4630      	mov	r0, r6
 8016c1e:	f000 f8db 	bl	8016dd8 <__malloc_unlock>
 8016c22:	f104 000b 	add.w	r0, r4, #11
 8016c26:	1d23      	adds	r3, r4, #4
 8016c28:	f020 0007 	bic.w	r0, r0, #7
 8016c2c:	1ac2      	subs	r2, r0, r3
 8016c2e:	bf1c      	itt	ne
 8016c30:	1a1b      	subne	r3, r3, r0
 8016c32:	50a3      	strne	r3, [r4, r2]
 8016c34:	e7af      	b.n	8016b96 <_malloc_r+0x22>
 8016c36:	6862      	ldr	r2, [r4, #4]
 8016c38:	42a3      	cmp	r3, r4
 8016c3a:	bf0c      	ite	eq
 8016c3c:	f8c8 2000 	streq.w	r2, [r8]
 8016c40:	605a      	strne	r2, [r3, #4]
 8016c42:	e7eb      	b.n	8016c1c <_malloc_r+0xa8>
 8016c44:	4623      	mov	r3, r4
 8016c46:	6864      	ldr	r4, [r4, #4]
 8016c48:	e7ae      	b.n	8016ba8 <_malloc_r+0x34>
 8016c4a:	463c      	mov	r4, r7
 8016c4c:	687f      	ldr	r7, [r7, #4]
 8016c4e:	e7b6      	b.n	8016bbe <_malloc_r+0x4a>
 8016c50:	461a      	mov	r2, r3
 8016c52:	685b      	ldr	r3, [r3, #4]
 8016c54:	42a3      	cmp	r3, r4
 8016c56:	d1fb      	bne.n	8016c50 <_malloc_r+0xdc>
 8016c58:	2300      	movs	r3, #0
 8016c5a:	6053      	str	r3, [r2, #4]
 8016c5c:	e7de      	b.n	8016c1c <_malloc_r+0xa8>
 8016c5e:	230c      	movs	r3, #12
 8016c60:	6033      	str	r3, [r6, #0]
 8016c62:	4630      	mov	r0, r6
 8016c64:	f000 f8b8 	bl	8016dd8 <__malloc_unlock>
 8016c68:	e794      	b.n	8016b94 <_malloc_r+0x20>
 8016c6a:	6005      	str	r5, [r0, #0]
 8016c6c:	e7d6      	b.n	8016c1c <_malloc_r+0xa8>
 8016c6e:	bf00      	nop
 8016c70:	24001878 	.word	0x24001878

08016c74 <__sflush_r>:
 8016c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c7c:	0716      	lsls	r6, r2, #28
 8016c7e:	4605      	mov	r5, r0
 8016c80:	460c      	mov	r4, r1
 8016c82:	d454      	bmi.n	8016d2e <__sflush_r+0xba>
 8016c84:	684b      	ldr	r3, [r1, #4]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	dc02      	bgt.n	8016c90 <__sflush_r+0x1c>
 8016c8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	dd48      	ble.n	8016d22 <__sflush_r+0xae>
 8016c90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016c92:	2e00      	cmp	r6, #0
 8016c94:	d045      	beq.n	8016d22 <__sflush_r+0xae>
 8016c96:	2300      	movs	r3, #0
 8016c98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016c9c:	682f      	ldr	r7, [r5, #0]
 8016c9e:	6a21      	ldr	r1, [r4, #32]
 8016ca0:	602b      	str	r3, [r5, #0]
 8016ca2:	d030      	beq.n	8016d06 <__sflush_r+0x92>
 8016ca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016ca6:	89a3      	ldrh	r3, [r4, #12]
 8016ca8:	0759      	lsls	r1, r3, #29
 8016caa:	d505      	bpl.n	8016cb8 <__sflush_r+0x44>
 8016cac:	6863      	ldr	r3, [r4, #4]
 8016cae:	1ad2      	subs	r2, r2, r3
 8016cb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016cb2:	b10b      	cbz	r3, 8016cb8 <__sflush_r+0x44>
 8016cb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016cb6:	1ad2      	subs	r2, r2, r3
 8016cb8:	2300      	movs	r3, #0
 8016cba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016cbc:	6a21      	ldr	r1, [r4, #32]
 8016cbe:	4628      	mov	r0, r5
 8016cc0:	47b0      	blx	r6
 8016cc2:	1c43      	adds	r3, r0, #1
 8016cc4:	89a3      	ldrh	r3, [r4, #12]
 8016cc6:	d106      	bne.n	8016cd6 <__sflush_r+0x62>
 8016cc8:	6829      	ldr	r1, [r5, #0]
 8016cca:	291d      	cmp	r1, #29
 8016ccc:	d82b      	bhi.n	8016d26 <__sflush_r+0xb2>
 8016cce:	4a2a      	ldr	r2, [pc, #168]	@ (8016d78 <__sflush_r+0x104>)
 8016cd0:	410a      	asrs	r2, r1
 8016cd2:	07d6      	lsls	r6, r2, #31
 8016cd4:	d427      	bmi.n	8016d26 <__sflush_r+0xb2>
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	6062      	str	r2, [r4, #4]
 8016cda:	04d9      	lsls	r1, r3, #19
 8016cdc:	6922      	ldr	r2, [r4, #16]
 8016cde:	6022      	str	r2, [r4, #0]
 8016ce0:	d504      	bpl.n	8016cec <__sflush_r+0x78>
 8016ce2:	1c42      	adds	r2, r0, #1
 8016ce4:	d101      	bne.n	8016cea <__sflush_r+0x76>
 8016ce6:	682b      	ldr	r3, [r5, #0]
 8016ce8:	b903      	cbnz	r3, 8016cec <__sflush_r+0x78>
 8016cea:	6560      	str	r0, [r4, #84]	@ 0x54
 8016cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016cee:	602f      	str	r7, [r5, #0]
 8016cf0:	b1b9      	cbz	r1, 8016d22 <__sflush_r+0xae>
 8016cf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016cf6:	4299      	cmp	r1, r3
 8016cf8:	d002      	beq.n	8016d00 <__sflush_r+0x8c>
 8016cfa:	4628      	mov	r0, r5
 8016cfc:	f000 fdd8 	bl	80178b0 <_free_r>
 8016d00:	2300      	movs	r3, #0
 8016d02:	6363      	str	r3, [r4, #52]	@ 0x34
 8016d04:	e00d      	b.n	8016d22 <__sflush_r+0xae>
 8016d06:	2301      	movs	r3, #1
 8016d08:	4628      	mov	r0, r5
 8016d0a:	47b0      	blx	r6
 8016d0c:	4602      	mov	r2, r0
 8016d0e:	1c50      	adds	r0, r2, #1
 8016d10:	d1c9      	bne.n	8016ca6 <__sflush_r+0x32>
 8016d12:	682b      	ldr	r3, [r5, #0]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d0c6      	beq.n	8016ca6 <__sflush_r+0x32>
 8016d18:	2b1d      	cmp	r3, #29
 8016d1a:	d001      	beq.n	8016d20 <__sflush_r+0xac>
 8016d1c:	2b16      	cmp	r3, #22
 8016d1e:	d11e      	bne.n	8016d5e <__sflush_r+0xea>
 8016d20:	602f      	str	r7, [r5, #0]
 8016d22:	2000      	movs	r0, #0
 8016d24:	e022      	b.n	8016d6c <__sflush_r+0xf8>
 8016d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016d2a:	b21b      	sxth	r3, r3
 8016d2c:	e01b      	b.n	8016d66 <__sflush_r+0xf2>
 8016d2e:	690f      	ldr	r7, [r1, #16]
 8016d30:	2f00      	cmp	r7, #0
 8016d32:	d0f6      	beq.n	8016d22 <__sflush_r+0xae>
 8016d34:	0793      	lsls	r3, r2, #30
 8016d36:	680e      	ldr	r6, [r1, #0]
 8016d38:	bf08      	it	eq
 8016d3a:	694b      	ldreq	r3, [r1, #20]
 8016d3c:	600f      	str	r7, [r1, #0]
 8016d3e:	bf18      	it	ne
 8016d40:	2300      	movne	r3, #0
 8016d42:	eba6 0807 	sub.w	r8, r6, r7
 8016d46:	608b      	str	r3, [r1, #8]
 8016d48:	f1b8 0f00 	cmp.w	r8, #0
 8016d4c:	dde9      	ble.n	8016d22 <__sflush_r+0xae>
 8016d4e:	6a21      	ldr	r1, [r4, #32]
 8016d50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016d52:	4643      	mov	r3, r8
 8016d54:	463a      	mov	r2, r7
 8016d56:	4628      	mov	r0, r5
 8016d58:	47b0      	blx	r6
 8016d5a:	2800      	cmp	r0, #0
 8016d5c:	dc08      	bgt.n	8016d70 <__sflush_r+0xfc>
 8016d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016d66:	81a3      	strh	r3, [r4, #12]
 8016d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d70:	4407      	add	r7, r0
 8016d72:	eba8 0800 	sub.w	r8, r8, r0
 8016d76:	e7e7      	b.n	8016d48 <__sflush_r+0xd4>
 8016d78:	dfbffffe 	.word	0xdfbffffe

08016d7c <_fflush_r>:
 8016d7c:	b538      	push	{r3, r4, r5, lr}
 8016d7e:	690b      	ldr	r3, [r1, #16]
 8016d80:	4605      	mov	r5, r0
 8016d82:	460c      	mov	r4, r1
 8016d84:	b913      	cbnz	r3, 8016d8c <_fflush_r+0x10>
 8016d86:	2500      	movs	r5, #0
 8016d88:	4628      	mov	r0, r5
 8016d8a:	bd38      	pop	{r3, r4, r5, pc}
 8016d8c:	b118      	cbz	r0, 8016d96 <_fflush_r+0x1a>
 8016d8e:	6a03      	ldr	r3, [r0, #32]
 8016d90:	b90b      	cbnz	r3, 8016d96 <_fflush_r+0x1a>
 8016d92:	f7fe feb5 	bl	8015b00 <__sinit>
 8016d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d0f3      	beq.n	8016d86 <_fflush_r+0xa>
 8016d9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016da0:	07d0      	lsls	r0, r2, #31
 8016da2:	d404      	bmi.n	8016dae <_fflush_r+0x32>
 8016da4:	0599      	lsls	r1, r3, #22
 8016da6:	d402      	bmi.n	8016dae <_fflush_r+0x32>
 8016da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016daa:	f7fe ff86 	bl	8015cba <__retarget_lock_acquire_recursive>
 8016dae:	4628      	mov	r0, r5
 8016db0:	4621      	mov	r1, r4
 8016db2:	f7ff ff5f 	bl	8016c74 <__sflush_r>
 8016db6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016db8:	07da      	lsls	r2, r3, #31
 8016dba:	4605      	mov	r5, r0
 8016dbc:	d4e4      	bmi.n	8016d88 <_fflush_r+0xc>
 8016dbe:	89a3      	ldrh	r3, [r4, #12]
 8016dc0:	059b      	lsls	r3, r3, #22
 8016dc2:	d4e1      	bmi.n	8016d88 <_fflush_r+0xc>
 8016dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016dc6:	f7fe ff79 	bl	8015cbc <__retarget_lock_release_recursive>
 8016dca:	e7dd      	b.n	8016d88 <_fflush_r+0xc>

08016dcc <__malloc_lock>:
 8016dcc:	4801      	ldr	r0, [pc, #4]	@ (8016dd4 <__malloc_lock+0x8>)
 8016dce:	f7fe bf74 	b.w	8015cba <__retarget_lock_acquire_recursive>
 8016dd2:	bf00      	nop
 8016dd4:	24001870 	.word	0x24001870

08016dd8 <__malloc_unlock>:
 8016dd8:	4801      	ldr	r0, [pc, #4]	@ (8016de0 <__malloc_unlock+0x8>)
 8016dda:	f7fe bf6f 	b.w	8015cbc <__retarget_lock_release_recursive>
 8016dde:	bf00      	nop
 8016de0:	24001870 	.word	0x24001870

08016de4 <_Balloc>:
 8016de4:	b570      	push	{r4, r5, r6, lr}
 8016de6:	69c6      	ldr	r6, [r0, #28]
 8016de8:	4604      	mov	r4, r0
 8016dea:	460d      	mov	r5, r1
 8016dec:	b976      	cbnz	r6, 8016e0c <_Balloc+0x28>
 8016dee:	2010      	movs	r0, #16
 8016df0:	f7ff fe96 	bl	8016b20 <malloc>
 8016df4:	4602      	mov	r2, r0
 8016df6:	61e0      	str	r0, [r4, #28]
 8016df8:	b920      	cbnz	r0, 8016e04 <_Balloc+0x20>
 8016dfa:	4b18      	ldr	r3, [pc, #96]	@ (8016e5c <_Balloc+0x78>)
 8016dfc:	4818      	ldr	r0, [pc, #96]	@ (8016e60 <_Balloc+0x7c>)
 8016dfe:	216b      	movs	r1, #107	@ 0x6b
 8016e00:	f000 fd24 	bl	801784c <__assert_func>
 8016e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016e08:	6006      	str	r6, [r0, #0]
 8016e0a:	60c6      	str	r6, [r0, #12]
 8016e0c:	69e6      	ldr	r6, [r4, #28]
 8016e0e:	68f3      	ldr	r3, [r6, #12]
 8016e10:	b183      	cbz	r3, 8016e34 <_Balloc+0x50>
 8016e12:	69e3      	ldr	r3, [r4, #28]
 8016e14:	68db      	ldr	r3, [r3, #12]
 8016e16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016e1a:	b9b8      	cbnz	r0, 8016e4c <_Balloc+0x68>
 8016e1c:	2101      	movs	r1, #1
 8016e1e:	fa01 f605 	lsl.w	r6, r1, r5
 8016e22:	1d72      	adds	r2, r6, #5
 8016e24:	0092      	lsls	r2, r2, #2
 8016e26:	4620      	mov	r0, r4
 8016e28:	f000 fd2e 	bl	8017888 <_calloc_r>
 8016e2c:	b160      	cbz	r0, 8016e48 <_Balloc+0x64>
 8016e2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016e32:	e00e      	b.n	8016e52 <_Balloc+0x6e>
 8016e34:	2221      	movs	r2, #33	@ 0x21
 8016e36:	2104      	movs	r1, #4
 8016e38:	4620      	mov	r0, r4
 8016e3a:	f000 fd25 	bl	8017888 <_calloc_r>
 8016e3e:	69e3      	ldr	r3, [r4, #28]
 8016e40:	60f0      	str	r0, [r6, #12]
 8016e42:	68db      	ldr	r3, [r3, #12]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d1e4      	bne.n	8016e12 <_Balloc+0x2e>
 8016e48:	2000      	movs	r0, #0
 8016e4a:	bd70      	pop	{r4, r5, r6, pc}
 8016e4c:	6802      	ldr	r2, [r0, #0]
 8016e4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016e52:	2300      	movs	r3, #0
 8016e54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016e58:	e7f7      	b.n	8016e4a <_Balloc+0x66>
 8016e5a:	bf00      	nop
 8016e5c:	08017e9d 	.word	0x08017e9d
 8016e60:	08017f2e 	.word	0x08017f2e

08016e64 <_Bfree>:
 8016e64:	b570      	push	{r4, r5, r6, lr}
 8016e66:	69c6      	ldr	r6, [r0, #28]
 8016e68:	4605      	mov	r5, r0
 8016e6a:	460c      	mov	r4, r1
 8016e6c:	b976      	cbnz	r6, 8016e8c <_Bfree+0x28>
 8016e6e:	2010      	movs	r0, #16
 8016e70:	f7ff fe56 	bl	8016b20 <malloc>
 8016e74:	4602      	mov	r2, r0
 8016e76:	61e8      	str	r0, [r5, #28]
 8016e78:	b920      	cbnz	r0, 8016e84 <_Bfree+0x20>
 8016e7a:	4b09      	ldr	r3, [pc, #36]	@ (8016ea0 <_Bfree+0x3c>)
 8016e7c:	4809      	ldr	r0, [pc, #36]	@ (8016ea4 <_Bfree+0x40>)
 8016e7e:	218f      	movs	r1, #143	@ 0x8f
 8016e80:	f000 fce4 	bl	801784c <__assert_func>
 8016e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016e88:	6006      	str	r6, [r0, #0]
 8016e8a:	60c6      	str	r6, [r0, #12]
 8016e8c:	b13c      	cbz	r4, 8016e9e <_Bfree+0x3a>
 8016e8e:	69eb      	ldr	r3, [r5, #28]
 8016e90:	6862      	ldr	r2, [r4, #4]
 8016e92:	68db      	ldr	r3, [r3, #12]
 8016e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016e98:	6021      	str	r1, [r4, #0]
 8016e9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016e9e:	bd70      	pop	{r4, r5, r6, pc}
 8016ea0:	08017e9d 	.word	0x08017e9d
 8016ea4:	08017f2e 	.word	0x08017f2e

08016ea8 <__multadd>:
 8016ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eac:	690d      	ldr	r5, [r1, #16]
 8016eae:	4607      	mov	r7, r0
 8016eb0:	460c      	mov	r4, r1
 8016eb2:	461e      	mov	r6, r3
 8016eb4:	f101 0c14 	add.w	ip, r1, #20
 8016eb8:	2000      	movs	r0, #0
 8016eba:	f8dc 3000 	ldr.w	r3, [ip]
 8016ebe:	b299      	uxth	r1, r3
 8016ec0:	fb02 6101 	mla	r1, r2, r1, r6
 8016ec4:	0c1e      	lsrs	r6, r3, #16
 8016ec6:	0c0b      	lsrs	r3, r1, #16
 8016ec8:	fb02 3306 	mla	r3, r2, r6, r3
 8016ecc:	b289      	uxth	r1, r1
 8016ece:	3001      	adds	r0, #1
 8016ed0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016ed4:	4285      	cmp	r5, r0
 8016ed6:	f84c 1b04 	str.w	r1, [ip], #4
 8016eda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016ede:	dcec      	bgt.n	8016eba <__multadd+0x12>
 8016ee0:	b30e      	cbz	r6, 8016f26 <__multadd+0x7e>
 8016ee2:	68a3      	ldr	r3, [r4, #8]
 8016ee4:	42ab      	cmp	r3, r5
 8016ee6:	dc19      	bgt.n	8016f1c <__multadd+0x74>
 8016ee8:	6861      	ldr	r1, [r4, #4]
 8016eea:	4638      	mov	r0, r7
 8016eec:	3101      	adds	r1, #1
 8016eee:	f7ff ff79 	bl	8016de4 <_Balloc>
 8016ef2:	4680      	mov	r8, r0
 8016ef4:	b928      	cbnz	r0, 8016f02 <__multadd+0x5a>
 8016ef6:	4602      	mov	r2, r0
 8016ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8016f2c <__multadd+0x84>)
 8016efa:	480d      	ldr	r0, [pc, #52]	@ (8016f30 <__multadd+0x88>)
 8016efc:	21ba      	movs	r1, #186	@ 0xba
 8016efe:	f000 fca5 	bl	801784c <__assert_func>
 8016f02:	6922      	ldr	r2, [r4, #16]
 8016f04:	3202      	adds	r2, #2
 8016f06:	f104 010c 	add.w	r1, r4, #12
 8016f0a:	0092      	lsls	r2, r2, #2
 8016f0c:	300c      	adds	r0, #12
 8016f0e:	f7fe fed6 	bl	8015cbe <memcpy>
 8016f12:	4621      	mov	r1, r4
 8016f14:	4638      	mov	r0, r7
 8016f16:	f7ff ffa5 	bl	8016e64 <_Bfree>
 8016f1a:	4644      	mov	r4, r8
 8016f1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016f20:	3501      	adds	r5, #1
 8016f22:	615e      	str	r6, [r3, #20]
 8016f24:	6125      	str	r5, [r4, #16]
 8016f26:	4620      	mov	r0, r4
 8016f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f2c:	08017f0c 	.word	0x08017f0c
 8016f30:	08017f2e 	.word	0x08017f2e

08016f34 <__hi0bits>:
 8016f34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016f38:	4603      	mov	r3, r0
 8016f3a:	bf36      	itet	cc
 8016f3c:	0403      	lslcc	r3, r0, #16
 8016f3e:	2000      	movcs	r0, #0
 8016f40:	2010      	movcc	r0, #16
 8016f42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016f46:	bf3c      	itt	cc
 8016f48:	021b      	lslcc	r3, r3, #8
 8016f4a:	3008      	addcc	r0, #8
 8016f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016f50:	bf3c      	itt	cc
 8016f52:	011b      	lslcc	r3, r3, #4
 8016f54:	3004      	addcc	r0, #4
 8016f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016f5a:	bf3c      	itt	cc
 8016f5c:	009b      	lslcc	r3, r3, #2
 8016f5e:	3002      	addcc	r0, #2
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	db05      	blt.n	8016f70 <__hi0bits+0x3c>
 8016f64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016f68:	f100 0001 	add.w	r0, r0, #1
 8016f6c:	bf08      	it	eq
 8016f6e:	2020      	moveq	r0, #32
 8016f70:	4770      	bx	lr

08016f72 <__lo0bits>:
 8016f72:	6803      	ldr	r3, [r0, #0]
 8016f74:	4602      	mov	r2, r0
 8016f76:	f013 0007 	ands.w	r0, r3, #7
 8016f7a:	d00b      	beq.n	8016f94 <__lo0bits+0x22>
 8016f7c:	07d9      	lsls	r1, r3, #31
 8016f7e:	d421      	bmi.n	8016fc4 <__lo0bits+0x52>
 8016f80:	0798      	lsls	r0, r3, #30
 8016f82:	bf49      	itett	mi
 8016f84:	085b      	lsrmi	r3, r3, #1
 8016f86:	089b      	lsrpl	r3, r3, #2
 8016f88:	2001      	movmi	r0, #1
 8016f8a:	6013      	strmi	r3, [r2, #0]
 8016f8c:	bf5c      	itt	pl
 8016f8e:	6013      	strpl	r3, [r2, #0]
 8016f90:	2002      	movpl	r0, #2
 8016f92:	4770      	bx	lr
 8016f94:	b299      	uxth	r1, r3
 8016f96:	b909      	cbnz	r1, 8016f9c <__lo0bits+0x2a>
 8016f98:	0c1b      	lsrs	r3, r3, #16
 8016f9a:	2010      	movs	r0, #16
 8016f9c:	b2d9      	uxtb	r1, r3
 8016f9e:	b909      	cbnz	r1, 8016fa4 <__lo0bits+0x32>
 8016fa0:	3008      	adds	r0, #8
 8016fa2:	0a1b      	lsrs	r3, r3, #8
 8016fa4:	0719      	lsls	r1, r3, #28
 8016fa6:	bf04      	itt	eq
 8016fa8:	091b      	lsreq	r3, r3, #4
 8016faa:	3004      	addeq	r0, #4
 8016fac:	0799      	lsls	r1, r3, #30
 8016fae:	bf04      	itt	eq
 8016fb0:	089b      	lsreq	r3, r3, #2
 8016fb2:	3002      	addeq	r0, #2
 8016fb4:	07d9      	lsls	r1, r3, #31
 8016fb6:	d403      	bmi.n	8016fc0 <__lo0bits+0x4e>
 8016fb8:	085b      	lsrs	r3, r3, #1
 8016fba:	f100 0001 	add.w	r0, r0, #1
 8016fbe:	d003      	beq.n	8016fc8 <__lo0bits+0x56>
 8016fc0:	6013      	str	r3, [r2, #0]
 8016fc2:	4770      	bx	lr
 8016fc4:	2000      	movs	r0, #0
 8016fc6:	4770      	bx	lr
 8016fc8:	2020      	movs	r0, #32
 8016fca:	4770      	bx	lr

08016fcc <__i2b>:
 8016fcc:	b510      	push	{r4, lr}
 8016fce:	460c      	mov	r4, r1
 8016fd0:	2101      	movs	r1, #1
 8016fd2:	f7ff ff07 	bl	8016de4 <_Balloc>
 8016fd6:	4602      	mov	r2, r0
 8016fd8:	b928      	cbnz	r0, 8016fe6 <__i2b+0x1a>
 8016fda:	4b05      	ldr	r3, [pc, #20]	@ (8016ff0 <__i2b+0x24>)
 8016fdc:	4805      	ldr	r0, [pc, #20]	@ (8016ff4 <__i2b+0x28>)
 8016fde:	f240 1145 	movw	r1, #325	@ 0x145
 8016fe2:	f000 fc33 	bl	801784c <__assert_func>
 8016fe6:	2301      	movs	r3, #1
 8016fe8:	6144      	str	r4, [r0, #20]
 8016fea:	6103      	str	r3, [r0, #16]
 8016fec:	bd10      	pop	{r4, pc}
 8016fee:	bf00      	nop
 8016ff0:	08017f0c 	.word	0x08017f0c
 8016ff4:	08017f2e 	.word	0x08017f2e

08016ff8 <__multiply>:
 8016ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ffc:	4614      	mov	r4, r2
 8016ffe:	690a      	ldr	r2, [r1, #16]
 8017000:	6923      	ldr	r3, [r4, #16]
 8017002:	429a      	cmp	r2, r3
 8017004:	bfa8      	it	ge
 8017006:	4623      	movge	r3, r4
 8017008:	460f      	mov	r7, r1
 801700a:	bfa4      	itt	ge
 801700c:	460c      	movge	r4, r1
 801700e:	461f      	movge	r7, r3
 8017010:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017014:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017018:	68a3      	ldr	r3, [r4, #8]
 801701a:	6861      	ldr	r1, [r4, #4]
 801701c:	eb0a 0609 	add.w	r6, sl, r9
 8017020:	42b3      	cmp	r3, r6
 8017022:	b085      	sub	sp, #20
 8017024:	bfb8      	it	lt
 8017026:	3101      	addlt	r1, #1
 8017028:	f7ff fedc 	bl	8016de4 <_Balloc>
 801702c:	b930      	cbnz	r0, 801703c <__multiply+0x44>
 801702e:	4602      	mov	r2, r0
 8017030:	4b44      	ldr	r3, [pc, #272]	@ (8017144 <__multiply+0x14c>)
 8017032:	4845      	ldr	r0, [pc, #276]	@ (8017148 <__multiply+0x150>)
 8017034:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017038:	f000 fc08 	bl	801784c <__assert_func>
 801703c:	f100 0514 	add.w	r5, r0, #20
 8017040:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017044:	462b      	mov	r3, r5
 8017046:	2200      	movs	r2, #0
 8017048:	4543      	cmp	r3, r8
 801704a:	d321      	bcc.n	8017090 <__multiply+0x98>
 801704c:	f107 0114 	add.w	r1, r7, #20
 8017050:	f104 0214 	add.w	r2, r4, #20
 8017054:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017058:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801705c:	9302      	str	r3, [sp, #8]
 801705e:	1b13      	subs	r3, r2, r4
 8017060:	3b15      	subs	r3, #21
 8017062:	f023 0303 	bic.w	r3, r3, #3
 8017066:	3304      	adds	r3, #4
 8017068:	f104 0715 	add.w	r7, r4, #21
 801706c:	42ba      	cmp	r2, r7
 801706e:	bf38      	it	cc
 8017070:	2304      	movcc	r3, #4
 8017072:	9301      	str	r3, [sp, #4]
 8017074:	9b02      	ldr	r3, [sp, #8]
 8017076:	9103      	str	r1, [sp, #12]
 8017078:	428b      	cmp	r3, r1
 801707a:	d80c      	bhi.n	8017096 <__multiply+0x9e>
 801707c:	2e00      	cmp	r6, #0
 801707e:	dd03      	ble.n	8017088 <__multiply+0x90>
 8017080:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017084:	2b00      	cmp	r3, #0
 8017086:	d05b      	beq.n	8017140 <__multiply+0x148>
 8017088:	6106      	str	r6, [r0, #16]
 801708a:	b005      	add	sp, #20
 801708c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017090:	f843 2b04 	str.w	r2, [r3], #4
 8017094:	e7d8      	b.n	8017048 <__multiply+0x50>
 8017096:	f8b1 a000 	ldrh.w	sl, [r1]
 801709a:	f1ba 0f00 	cmp.w	sl, #0
 801709e:	d024      	beq.n	80170ea <__multiply+0xf2>
 80170a0:	f104 0e14 	add.w	lr, r4, #20
 80170a4:	46a9      	mov	r9, r5
 80170a6:	f04f 0c00 	mov.w	ip, #0
 80170aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80170ae:	f8d9 3000 	ldr.w	r3, [r9]
 80170b2:	fa1f fb87 	uxth.w	fp, r7
 80170b6:	b29b      	uxth	r3, r3
 80170b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80170bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80170c0:	f8d9 7000 	ldr.w	r7, [r9]
 80170c4:	4463      	add	r3, ip
 80170c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80170ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80170ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80170d2:	b29b      	uxth	r3, r3
 80170d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80170d8:	4572      	cmp	r2, lr
 80170da:	f849 3b04 	str.w	r3, [r9], #4
 80170de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80170e2:	d8e2      	bhi.n	80170aa <__multiply+0xb2>
 80170e4:	9b01      	ldr	r3, [sp, #4]
 80170e6:	f845 c003 	str.w	ip, [r5, r3]
 80170ea:	9b03      	ldr	r3, [sp, #12]
 80170ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80170f0:	3104      	adds	r1, #4
 80170f2:	f1b9 0f00 	cmp.w	r9, #0
 80170f6:	d021      	beq.n	801713c <__multiply+0x144>
 80170f8:	682b      	ldr	r3, [r5, #0]
 80170fa:	f104 0c14 	add.w	ip, r4, #20
 80170fe:	46ae      	mov	lr, r5
 8017100:	f04f 0a00 	mov.w	sl, #0
 8017104:	f8bc b000 	ldrh.w	fp, [ip]
 8017108:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801710c:	fb09 770b 	mla	r7, r9, fp, r7
 8017110:	4457      	add	r7, sl
 8017112:	b29b      	uxth	r3, r3
 8017114:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017118:	f84e 3b04 	str.w	r3, [lr], #4
 801711c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017120:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017124:	f8be 3000 	ldrh.w	r3, [lr]
 8017128:	fb09 330a 	mla	r3, r9, sl, r3
 801712c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017130:	4562      	cmp	r2, ip
 8017132:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017136:	d8e5      	bhi.n	8017104 <__multiply+0x10c>
 8017138:	9f01      	ldr	r7, [sp, #4]
 801713a:	51eb      	str	r3, [r5, r7]
 801713c:	3504      	adds	r5, #4
 801713e:	e799      	b.n	8017074 <__multiply+0x7c>
 8017140:	3e01      	subs	r6, #1
 8017142:	e79b      	b.n	801707c <__multiply+0x84>
 8017144:	08017f0c 	.word	0x08017f0c
 8017148:	08017f2e 	.word	0x08017f2e

0801714c <__pow5mult>:
 801714c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017150:	4615      	mov	r5, r2
 8017152:	f012 0203 	ands.w	r2, r2, #3
 8017156:	4607      	mov	r7, r0
 8017158:	460e      	mov	r6, r1
 801715a:	d007      	beq.n	801716c <__pow5mult+0x20>
 801715c:	4c25      	ldr	r4, [pc, #148]	@ (80171f4 <__pow5mult+0xa8>)
 801715e:	3a01      	subs	r2, #1
 8017160:	2300      	movs	r3, #0
 8017162:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017166:	f7ff fe9f 	bl	8016ea8 <__multadd>
 801716a:	4606      	mov	r6, r0
 801716c:	10ad      	asrs	r5, r5, #2
 801716e:	d03d      	beq.n	80171ec <__pow5mult+0xa0>
 8017170:	69fc      	ldr	r4, [r7, #28]
 8017172:	b97c      	cbnz	r4, 8017194 <__pow5mult+0x48>
 8017174:	2010      	movs	r0, #16
 8017176:	f7ff fcd3 	bl	8016b20 <malloc>
 801717a:	4602      	mov	r2, r0
 801717c:	61f8      	str	r0, [r7, #28]
 801717e:	b928      	cbnz	r0, 801718c <__pow5mult+0x40>
 8017180:	4b1d      	ldr	r3, [pc, #116]	@ (80171f8 <__pow5mult+0xac>)
 8017182:	481e      	ldr	r0, [pc, #120]	@ (80171fc <__pow5mult+0xb0>)
 8017184:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017188:	f000 fb60 	bl	801784c <__assert_func>
 801718c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017190:	6004      	str	r4, [r0, #0]
 8017192:	60c4      	str	r4, [r0, #12]
 8017194:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017198:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801719c:	b94c      	cbnz	r4, 80171b2 <__pow5mult+0x66>
 801719e:	f240 2171 	movw	r1, #625	@ 0x271
 80171a2:	4638      	mov	r0, r7
 80171a4:	f7ff ff12 	bl	8016fcc <__i2b>
 80171a8:	2300      	movs	r3, #0
 80171aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80171ae:	4604      	mov	r4, r0
 80171b0:	6003      	str	r3, [r0, #0]
 80171b2:	f04f 0900 	mov.w	r9, #0
 80171b6:	07eb      	lsls	r3, r5, #31
 80171b8:	d50a      	bpl.n	80171d0 <__pow5mult+0x84>
 80171ba:	4631      	mov	r1, r6
 80171bc:	4622      	mov	r2, r4
 80171be:	4638      	mov	r0, r7
 80171c0:	f7ff ff1a 	bl	8016ff8 <__multiply>
 80171c4:	4631      	mov	r1, r6
 80171c6:	4680      	mov	r8, r0
 80171c8:	4638      	mov	r0, r7
 80171ca:	f7ff fe4b 	bl	8016e64 <_Bfree>
 80171ce:	4646      	mov	r6, r8
 80171d0:	106d      	asrs	r5, r5, #1
 80171d2:	d00b      	beq.n	80171ec <__pow5mult+0xa0>
 80171d4:	6820      	ldr	r0, [r4, #0]
 80171d6:	b938      	cbnz	r0, 80171e8 <__pow5mult+0x9c>
 80171d8:	4622      	mov	r2, r4
 80171da:	4621      	mov	r1, r4
 80171dc:	4638      	mov	r0, r7
 80171de:	f7ff ff0b 	bl	8016ff8 <__multiply>
 80171e2:	6020      	str	r0, [r4, #0]
 80171e4:	f8c0 9000 	str.w	r9, [r0]
 80171e8:	4604      	mov	r4, r0
 80171ea:	e7e4      	b.n	80171b6 <__pow5mult+0x6a>
 80171ec:	4630      	mov	r0, r6
 80171ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171f2:	bf00      	nop
 80171f4:	08017f88 	.word	0x08017f88
 80171f8:	08017e9d 	.word	0x08017e9d
 80171fc:	08017f2e 	.word	0x08017f2e

08017200 <__lshift>:
 8017200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017204:	460c      	mov	r4, r1
 8017206:	6849      	ldr	r1, [r1, #4]
 8017208:	6923      	ldr	r3, [r4, #16]
 801720a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801720e:	68a3      	ldr	r3, [r4, #8]
 8017210:	4607      	mov	r7, r0
 8017212:	4691      	mov	r9, r2
 8017214:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017218:	f108 0601 	add.w	r6, r8, #1
 801721c:	42b3      	cmp	r3, r6
 801721e:	db0b      	blt.n	8017238 <__lshift+0x38>
 8017220:	4638      	mov	r0, r7
 8017222:	f7ff fddf 	bl	8016de4 <_Balloc>
 8017226:	4605      	mov	r5, r0
 8017228:	b948      	cbnz	r0, 801723e <__lshift+0x3e>
 801722a:	4602      	mov	r2, r0
 801722c:	4b28      	ldr	r3, [pc, #160]	@ (80172d0 <__lshift+0xd0>)
 801722e:	4829      	ldr	r0, [pc, #164]	@ (80172d4 <__lshift+0xd4>)
 8017230:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017234:	f000 fb0a 	bl	801784c <__assert_func>
 8017238:	3101      	adds	r1, #1
 801723a:	005b      	lsls	r3, r3, #1
 801723c:	e7ee      	b.n	801721c <__lshift+0x1c>
 801723e:	2300      	movs	r3, #0
 8017240:	f100 0114 	add.w	r1, r0, #20
 8017244:	f100 0210 	add.w	r2, r0, #16
 8017248:	4618      	mov	r0, r3
 801724a:	4553      	cmp	r3, sl
 801724c:	db33      	blt.n	80172b6 <__lshift+0xb6>
 801724e:	6920      	ldr	r0, [r4, #16]
 8017250:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017254:	f104 0314 	add.w	r3, r4, #20
 8017258:	f019 091f 	ands.w	r9, r9, #31
 801725c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017260:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017264:	d02b      	beq.n	80172be <__lshift+0xbe>
 8017266:	f1c9 0e20 	rsb	lr, r9, #32
 801726a:	468a      	mov	sl, r1
 801726c:	2200      	movs	r2, #0
 801726e:	6818      	ldr	r0, [r3, #0]
 8017270:	fa00 f009 	lsl.w	r0, r0, r9
 8017274:	4310      	orrs	r0, r2
 8017276:	f84a 0b04 	str.w	r0, [sl], #4
 801727a:	f853 2b04 	ldr.w	r2, [r3], #4
 801727e:	459c      	cmp	ip, r3
 8017280:	fa22 f20e 	lsr.w	r2, r2, lr
 8017284:	d8f3      	bhi.n	801726e <__lshift+0x6e>
 8017286:	ebac 0304 	sub.w	r3, ip, r4
 801728a:	3b15      	subs	r3, #21
 801728c:	f023 0303 	bic.w	r3, r3, #3
 8017290:	3304      	adds	r3, #4
 8017292:	f104 0015 	add.w	r0, r4, #21
 8017296:	4584      	cmp	ip, r0
 8017298:	bf38      	it	cc
 801729a:	2304      	movcc	r3, #4
 801729c:	50ca      	str	r2, [r1, r3]
 801729e:	b10a      	cbz	r2, 80172a4 <__lshift+0xa4>
 80172a0:	f108 0602 	add.w	r6, r8, #2
 80172a4:	3e01      	subs	r6, #1
 80172a6:	4638      	mov	r0, r7
 80172a8:	612e      	str	r6, [r5, #16]
 80172aa:	4621      	mov	r1, r4
 80172ac:	f7ff fdda 	bl	8016e64 <_Bfree>
 80172b0:	4628      	mov	r0, r5
 80172b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80172ba:	3301      	adds	r3, #1
 80172bc:	e7c5      	b.n	801724a <__lshift+0x4a>
 80172be:	3904      	subs	r1, #4
 80172c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80172c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80172c8:	459c      	cmp	ip, r3
 80172ca:	d8f9      	bhi.n	80172c0 <__lshift+0xc0>
 80172cc:	e7ea      	b.n	80172a4 <__lshift+0xa4>
 80172ce:	bf00      	nop
 80172d0:	08017f0c 	.word	0x08017f0c
 80172d4:	08017f2e 	.word	0x08017f2e

080172d8 <__mcmp>:
 80172d8:	690a      	ldr	r2, [r1, #16]
 80172da:	4603      	mov	r3, r0
 80172dc:	6900      	ldr	r0, [r0, #16]
 80172de:	1a80      	subs	r0, r0, r2
 80172e0:	b530      	push	{r4, r5, lr}
 80172e2:	d10e      	bne.n	8017302 <__mcmp+0x2a>
 80172e4:	3314      	adds	r3, #20
 80172e6:	3114      	adds	r1, #20
 80172e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80172ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80172f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80172f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80172f8:	4295      	cmp	r5, r2
 80172fa:	d003      	beq.n	8017304 <__mcmp+0x2c>
 80172fc:	d205      	bcs.n	801730a <__mcmp+0x32>
 80172fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017302:	bd30      	pop	{r4, r5, pc}
 8017304:	42a3      	cmp	r3, r4
 8017306:	d3f3      	bcc.n	80172f0 <__mcmp+0x18>
 8017308:	e7fb      	b.n	8017302 <__mcmp+0x2a>
 801730a:	2001      	movs	r0, #1
 801730c:	e7f9      	b.n	8017302 <__mcmp+0x2a>
	...

08017310 <__mdiff>:
 8017310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017314:	4689      	mov	r9, r1
 8017316:	4606      	mov	r6, r0
 8017318:	4611      	mov	r1, r2
 801731a:	4648      	mov	r0, r9
 801731c:	4614      	mov	r4, r2
 801731e:	f7ff ffdb 	bl	80172d8 <__mcmp>
 8017322:	1e05      	subs	r5, r0, #0
 8017324:	d112      	bne.n	801734c <__mdiff+0x3c>
 8017326:	4629      	mov	r1, r5
 8017328:	4630      	mov	r0, r6
 801732a:	f7ff fd5b 	bl	8016de4 <_Balloc>
 801732e:	4602      	mov	r2, r0
 8017330:	b928      	cbnz	r0, 801733e <__mdiff+0x2e>
 8017332:	4b3f      	ldr	r3, [pc, #252]	@ (8017430 <__mdiff+0x120>)
 8017334:	f240 2137 	movw	r1, #567	@ 0x237
 8017338:	483e      	ldr	r0, [pc, #248]	@ (8017434 <__mdiff+0x124>)
 801733a:	f000 fa87 	bl	801784c <__assert_func>
 801733e:	2301      	movs	r3, #1
 8017340:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017344:	4610      	mov	r0, r2
 8017346:	b003      	add	sp, #12
 8017348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801734c:	bfbc      	itt	lt
 801734e:	464b      	movlt	r3, r9
 8017350:	46a1      	movlt	r9, r4
 8017352:	4630      	mov	r0, r6
 8017354:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017358:	bfba      	itte	lt
 801735a:	461c      	movlt	r4, r3
 801735c:	2501      	movlt	r5, #1
 801735e:	2500      	movge	r5, #0
 8017360:	f7ff fd40 	bl	8016de4 <_Balloc>
 8017364:	4602      	mov	r2, r0
 8017366:	b918      	cbnz	r0, 8017370 <__mdiff+0x60>
 8017368:	4b31      	ldr	r3, [pc, #196]	@ (8017430 <__mdiff+0x120>)
 801736a:	f240 2145 	movw	r1, #581	@ 0x245
 801736e:	e7e3      	b.n	8017338 <__mdiff+0x28>
 8017370:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017374:	6926      	ldr	r6, [r4, #16]
 8017376:	60c5      	str	r5, [r0, #12]
 8017378:	f109 0310 	add.w	r3, r9, #16
 801737c:	f109 0514 	add.w	r5, r9, #20
 8017380:	f104 0e14 	add.w	lr, r4, #20
 8017384:	f100 0b14 	add.w	fp, r0, #20
 8017388:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801738c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017390:	9301      	str	r3, [sp, #4]
 8017392:	46d9      	mov	r9, fp
 8017394:	f04f 0c00 	mov.w	ip, #0
 8017398:	9b01      	ldr	r3, [sp, #4]
 801739a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801739e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80173a2:	9301      	str	r3, [sp, #4]
 80173a4:	fa1f f38a 	uxth.w	r3, sl
 80173a8:	4619      	mov	r1, r3
 80173aa:	b283      	uxth	r3, r0
 80173ac:	1acb      	subs	r3, r1, r3
 80173ae:	0c00      	lsrs	r0, r0, #16
 80173b0:	4463      	add	r3, ip
 80173b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80173b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80173ba:	b29b      	uxth	r3, r3
 80173bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80173c0:	4576      	cmp	r6, lr
 80173c2:	f849 3b04 	str.w	r3, [r9], #4
 80173c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80173ca:	d8e5      	bhi.n	8017398 <__mdiff+0x88>
 80173cc:	1b33      	subs	r3, r6, r4
 80173ce:	3b15      	subs	r3, #21
 80173d0:	f023 0303 	bic.w	r3, r3, #3
 80173d4:	3415      	adds	r4, #21
 80173d6:	3304      	adds	r3, #4
 80173d8:	42a6      	cmp	r6, r4
 80173da:	bf38      	it	cc
 80173dc:	2304      	movcc	r3, #4
 80173de:	441d      	add	r5, r3
 80173e0:	445b      	add	r3, fp
 80173e2:	461e      	mov	r6, r3
 80173e4:	462c      	mov	r4, r5
 80173e6:	4544      	cmp	r4, r8
 80173e8:	d30e      	bcc.n	8017408 <__mdiff+0xf8>
 80173ea:	f108 0103 	add.w	r1, r8, #3
 80173ee:	1b49      	subs	r1, r1, r5
 80173f0:	f021 0103 	bic.w	r1, r1, #3
 80173f4:	3d03      	subs	r5, #3
 80173f6:	45a8      	cmp	r8, r5
 80173f8:	bf38      	it	cc
 80173fa:	2100      	movcc	r1, #0
 80173fc:	440b      	add	r3, r1
 80173fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017402:	b191      	cbz	r1, 801742a <__mdiff+0x11a>
 8017404:	6117      	str	r7, [r2, #16]
 8017406:	e79d      	b.n	8017344 <__mdiff+0x34>
 8017408:	f854 1b04 	ldr.w	r1, [r4], #4
 801740c:	46e6      	mov	lr, ip
 801740e:	0c08      	lsrs	r0, r1, #16
 8017410:	fa1c fc81 	uxtah	ip, ip, r1
 8017414:	4471      	add	r1, lr
 8017416:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801741a:	b289      	uxth	r1, r1
 801741c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017420:	f846 1b04 	str.w	r1, [r6], #4
 8017424:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017428:	e7dd      	b.n	80173e6 <__mdiff+0xd6>
 801742a:	3f01      	subs	r7, #1
 801742c:	e7e7      	b.n	80173fe <__mdiff+0xee>
 801742e:	bf00      	nop
 8017430:	08017f0c 	.word	0x08017f0c
 8017434:	08017f2e 	.word	0x08017f2e

08017438 <__d2b>:
 8017438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801743c:	460f      	mov	r7, r1
 801743e:	2101      	movs	r1, #1
 8017440:	ec59 8b10 	vmov	r8, r9, d0
 8017444:	4616      	mov	r6, r2
 8017446:	f7ff fccd 	bl	8016de4 <_Balloc>
 801744a:	4604      	mov	r4, r0
 801744c:	b930      	cbnz	r0, 801745c <__d2b+0x24>
 801744e:	4602      	mov	r2, r0
 8017450:	4b23      	ldr	r3, [pc, #140]	@ (80174e0 <__d2b+0xa8>)
 8017452:	4824      	ldr	r0, [pc, #144]	@ (80174e4 <__d2b+0xac>)
 8017454:	f240 310f 	movw	r1, #783	@ 0x30f
 8017458:	f000 f9f8 	bl	801784c <__assert_func>
 801745c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017464:	b10d      	cbz	r5, 801746a <__d2b+0x32>
 8017466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801746a:	9301      	str	r3, [sp, #4]
 801746c:	f1b8 0300 	subs.w	r3, r8, #0
 8017470:	d023      	beq.n	80174ba <__d2b+0x82>
 8017472:	4668      	mov	r0, sp
 8017474:	9300      	str	r3, [sp, #0]
 8017476:	f7ff fd7c 	bl	8016f72 <__lo0bits>
 801747a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801747e:	b1d0      	cbz	r0, 80174b6 <__d2b+0x7e>
 8017480:	f1c0 0320 	rsb	r3, r0, #32
 8017484:	fa02 f303 	lsl.w	r3, r2, r3
 8017488:	430b      	orrs	r3, r1
 801748a:	40c2      	lsrs	r2, r0
 801748c:	6163      	str	r3, [r4, #20]
 801748e:	9201      	str	r2, [sp, #4]
 8017490:	9b01      	ldr	r3, [sp, #4]
 8017492:	61a3      	str	r3, [r4, #24]
 8017494:	2b00      	cmp	r3, #0
 8017496:	bf0c      	ite	eq
 8017498:	2201      	moveq	r2, #1
 801749a:	2202      	movne	r2, #2
 801749c:	6122      	str	r2, [r4, #16]
 801749e:	b1a5      	cbz	r5, 80174ca <__d2b+0x92>
 80174a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80174a4:	4405      	add	r5, r0
 80174a6:	603d      	str	r5, [r7, #0]
 80174a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80174ac:	6030      	str	r0, [r6, #0]
 80174ae:	4620      	mov	r0, r4
 80174b0:	b003      	add	sp, #12
 80174b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174b6:	6161      	str	r1, [r4, #20]
 80174b8:	e7ea      	b.n	8017490 <__d2b+0x58>
 80174ba:	a801      	add	r0, sp, #4
 80174bc:	f7ff fd59 	bl	8016f72 <__lo0bits>
 80174c0:	9b01      	ldr	r3, [sp, #4]
 80174c2:	6163      	str	r3, [r4, #20]
 80174c4:	3020      	adds	r0, #32
 80174c6:	2201      	movs	r2, #1
 80174c8:	e7e8      	b.n	801749c <__d2b+0x64>
 80174ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80174ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80174d2:	6038      	str	r0, [r7, #0]
 80174d4:	6918      	ldr	r0, [r3, #16]
 80174d6:	f7ff fd2d 	bl	8016f34 <__hi0bits>
 80174da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80174de:	e7e5      	b.n	80174ac <__d2b+0x74>
 80174e0:	08017f0c 	.word	0x08017f0c
 80174e4:	08017f2e 	.word	0x08017f2e

080174e8 <__sread>:
 80174e8:	b510      	push	{r4, lr}
 80174ea:	460c      	mov	r4, r1
 80174ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174f0:	f000 f978 	bl	80177e4 <_read_r>
 80174f4:	2800      	cmp	r0, #0
 80174f6:	bfab      	itete	ge
 80174f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80174fa:	89a3      	ldrhlt	r3, [r4, #12]
 80174fc:	181b      	addge	r3, r3, r0
 80174fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017502:	bfac      	ite	ge
 8017504:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017506:	81a3      	strhlt	r3, [r4, #12]
 8017508:	bd10      	pop	{r4, pc}

0801750a <__swrite>:
 801750a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801750e:	461f      	mov	r7, r3
 8017510:	898b      	ldrh	r3, [r1, #12]
 8017512:	05db      	lsls	r3, r3, #23
 8017514:	4605      	mov	r5, r0
 8017516:	460c      	mov	r4, r1
 8017518:	4616      	mov	r6, r2
 801751a:	d505      	bpl.n	8017528 <__swrite+0x1e>
 801751c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017520:	2302      	movs	r3, #2
 8017522:	2200      	movs	r2, #0
 8017524:	f000 f94c 	bl	80177c0 <_lseek_r>
 8017528:	89a3      	ldrh	r3, [r4, #12]
 801752a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801752e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017532:	81a3      	strh	r3, [r4, #12]
 8017534:	4632      	mov	r2, r6
 8017536:	463b      	mov	r3, r7
 8017538:	4628      	mov	r0, r5
 801753a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801753e:	f000 b973 	b.w	8017828 <_write_r>

08017542 <__sseek>:
 8017542:	b510      	push	{r4, lr}
 8017544:	460c      	mov	r4, r1
 8017546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801754a:	f000 f939 	bl	80177c0 <_lseek_r>
 801754e:	1c43      	adds	r3, r0, #1
 8017550:	89a3      	ldrh	r3, [r4, #12]
 8017552:	bf15      	itete	ne
 8017554:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017556:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801755a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801755e:	81a3      	strheq	r3, [r4, #12]
 8017560:	bf18      	it	ne
 8017562:	81a3      	strhne	r3, [r4, #12]
 8017564:	bd10      	pop	{r4, pc}

08017566 <__sclose>:
 8017566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801756a:	f000 b8f7 	b.w	801775c <_close_r>

0801756e <__swbuf_r>:
 801756e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017570:	460e      	mov	r6, r1
 8017572:	4614      	mov	r4, r2
 8017574:	4605      	mov	r5, r0
 8017576:	b118      	cbz	r0, 8017580 <__swbuf_r+0x12>
 8017578:	6a03      	ldr	r3, [r0, #32]
 801757a:	b90b      	cbnz	r3, 8017580 <__swbuf_r+0x12>
 801757c:	f7fe fac0 	bl	8015b00 <__sinit>
 8017580:	69a3      	ldr	r3, [r4, #24]
 8017582:	60a3      	str	r3, [r4, #8]
 8017584:	89a3      	ldrh	r3, [r4, #12]
 8017586:	071a      	lsls	r2, r3, #28
 8017588:	d501      	bpl.n	801758e <__swbuf_r+0x20>
 801758a:	6923      	ldr	r3, [r4, #16]
 801758c:	b943      	cbnz	r3, 80175a0 <__swbuf_r+0x32>
 801758e:	4621      	mov	r1, r4
 8017590:	4628      	mov	r0, r5
 8017592:	f000 f82b 	bl	80175ec <__swsetup_r>
 8017596:	b118      	cbz	r0, 80175a0 <__swbuf_r+0x32>
 8017598:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801759c:	4638      	mov	r0, r7
 801759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175a0:	6823      	ldr	r3, [r4, #0]
 80175a2:	6922      	ldr	r2, [r4, #16]
 80175a4:	1a98      	subs	r0, r3, r2
 80175a6:	6963      	ldr	r3, [r4, #20]
 80175a8:	b2f6      	uxtb	r6, r6
 80175aa:	4283      	cmp	r3, r0
 80175ac:	4637      	mov	r7, r6
 80175ae:	dc05      	bgt.n	80175bc <__swbuf_r+0x4e>
 80175b0:	4621      	mov	r1, r4
 80175b2:	4628      	mov	r0, r5
 80175b4:	f7ff fbe2 	bl	8016d7c <_fflush_r>
 80175b8:	2800      	cmp	r0, #0
 80175ba:	d1ed      	bne.n	8017598 <__swbuf_r+0x2a>
 80175bc:	68a3      	ldr	r3, [r4, #8]
 80175be:	3b01      	subs	r3, #1
 80175c0:	60a3      	str	r3, [r4, #8]
 80175c2:	6823      	ldr	r3, [r4, #0]
 80175c4:	1c5a      	adds	r2, r3, #1
 80175c6:	6022      	str	r2, [r4, #0]
 80175c8:	701e      	strb	r6, [r3, #0]
 80175ca:	6962      	ldr	r2, [r4, #20]
 80175cc:	1c43      	adds	r3, r0, #1
 80175ce:	429a      	cmp	r2, r3
 80175d0:	d004      	beq.n	80175dc <__swbuf_r+0x6e>
 80175d2:	89a3      	ldrh	r3, [r4, #12]
 80175d4:	07db      	lsls	r3, r3, #31
 80175d6:	d5e1      	bpl.n	801759c <__swbuf_r+0x2e>
 80175d8:	2e0a      	cmp	r6, #10
 80175da:	d1df      	bne.n	801759c <__swbuf_r+0x2e>
 80175dc:	4621      	mov	r1, r4
 80175de:	4628      	mov	r0, r5
 80175e0:	f7ff fbcc 	bl	8016d7c <_fflush_r>
 80175e4:	2800      	cmp	r0, #0
 80175e6:	d0d9      	beq.n	801759c <__swbuf_r+0x2e>
 80175e8:	e7d6      	b.n	8017598 <__swbuf_r+0x2a>
	...

080175ec <__swsetup_r>:
 80175ec:	b538      	push	{r3, r4, r5, lr}
 80175ee:	4b29      	ldr	r3, [pc, #164]	@ (8017694 <__swsetup_r+0xa8>)
 80175f0:	4605      	mov	r5, r0
 80175f2:	6818      	ldr	r0, [r3, #0]
 80175f4:	460c      	mov	r4, r1
 80175f6:	b118      	cbz	r0, 8017600 <__swsetup_r+0x14>
 80175f8:	6a03      	ldr	r3, [r0, #32]
 80175fa:	b90b      	cbnz	r3, 8017600 <__swsetup_r+0x14>
 80175fc:	f7fe fa80 	bl	8015b00 <__sinit>
 8017600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017604:	0719      	lsls	r1, r3, #28
 8017606:	d422      	bmi.n	801764e <__swsetup_r+0x62>
 8017608:	06da      	lsls	r2, r3, #27
 801760a:	d407      	bmi.n	801761c <__swsetup_r+0x30>
 801760c:	2209      	movs	r2, #9
 801760e:	602a      	str	r2, [r5, #0]
 8017610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017614:	81a3      	strh	r3, [r4, #12]
 8017616:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801761a:	e033      	b.n	8017684 <__swsetup_r+0x98>
 801761c:	0758      	lsls	r0, r3, #29
 801761e:	d512      	bpl.n	8017646 <__swsetup_r+0x5a>
 8017620:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017622:	b141      	cbz	r1, 8017636 <__swsetup_r+0x4a>
 8017624:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017628:	4299      	cmp	r1, r3
 801762a:	d002      	beq.n	8017632 <__swsetup_r+0x46>
 801762c:	4628      	mov	r0, r5
 801762e:	f000 f93f 	bl	80178b0 <_free_r>
 8017632:	2300      	movs	r3, #0
 8017634:	6363      	str	r3, [r4, #52]	@ 0x34
 8017636:	89a3      	ldrh	r3, [r4, #12]
 8017638:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801763c:	81a3      	strh	r3, [r4, #12]
 801763e:	2300      	movs	r3, #0
 8017640:	6063      	str	r3, [r4, #4]
 8017642:	6923      	ldr	r3, [r4, #16]
 8017644:	6023      	str	r3, [r4, #0]
 8017646:	89a3      	ldrh	r3, [r4, #12]
 8017648:	f043 0308 	orr.w	r3, r3, #8
 801764c:	81a3      	strh	r3, [r4, #12]
 801764e:	6923      	ldr	r3, [r4, #16]
 8017650:	b94b      	cbnz	r3, 8017666 <__swsetup_r+0x7a>
 8017652:	89a3      	ldrh	r3, [r4, #12]
 8017654:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801765c:	d003      	beq.n	8017666 <__swsetup_r+0x7a>
 801765e:	4621      	mov	r1, r4
 8017660:	4628      	mov	r0, r5
 8017662:	f000 f83f 	bl	80176e4 <__smakebuf_r>
 8017666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801766a:	f013 0201 	ands.w	r2, r3, #1
 801766e:	d00a      	beq.n	8017686 <__swsetup_r+0x9a>
 8017670:	2200      	movs	r2, #0
 8017672:	60a2      	str	r2, [r4, #8]
 8017674:	6962      	ldr	r2, [r4, #20]
 8017676:	4252      	negs	r2, r2
 8017678:	61a2      	str	r2, [r4, #24]
 801767a:	6922      	ldr	r2, [r4, #16]
 801767c:	b942      	cbnz	r2, 8017690 <__swsetup_r+0xa4>
 801767e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017682:	d1c5      	bne.n	8017610 <__swsetup_r+0x24>
 8017684:	bd38      	pop	{r3, r4, r5, pc}
 8017686:	0799      	lsls	r1, r3, #30
 8017688:	bf58      	it	pl
 801768a:	6962      	ldrpl	r2, [r4, #20]
 801768c:	60a2      	str	r2, [r4, #8]
 801768e:	e7f4      	b.n	801767a <__swsetup_r+0x8e>
 8017690:	2000      	movs	r0, #0
 8017692:	e7f7      	b.n	8017684 <__swsetup_r+0x98>
 8017694:	24000140 	.word	0x24000140

08017698 <__swhatbuf_r>:
 8017698:	b570      	push	{r4, r5, r6, lr}
 801769a:	460c      	mov	r4, r1
 801769c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176a0:	2900      	cmp	r1, #0
 80176a2:	b096      	sub	sp, #88	@ 0x58
 80176a4:	4615      	mov	r5, r2
 80176a6:	461e      	mov	r6, r3
 80176a8:	da0d      	bge.n	80176c6 <__swhatbuf_r+0x2e>
 80176aa:	89a3      	ldrh	r3, [r4, #12]
 80176ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80176b0:	f04f 0100 	mov.w	r1, #0
 80176b4:	bf14      	ite	ne
 80176b6:	2340      	movne	r3, #64	@ 0x40
 80176b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80176bc:	2000      	movs	r0, #0
 80176be:	6031      	str	r1, [r6, #0]
 80176c0:	602b      	str	r3, [r5, #0]
 80176c2:	b016      	add	sp, #88	@ 0x58
 80176c4:	bd70      	pop	{r4, r5, r6, pc}
 80176c6:	466a      	mov	r2, sp
 80176c8:	f000 f858 	bl	801777c <_fstat_r>
 80176cc:	2800      	cmp	r0, #0
 80176ce:	dbec      	blt.n	80176aa <__swhatbuf_r+0x12>
 80176d0:	9901      	ldr	r1, [sp, #4]
 80176d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80176d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80176da:	4259      	negs	r1, r3
 80176dc:	4159      	adcs	r1, r3
 80176de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80176e2:	e7eb      	b.n	80176bc <__swhatbuf_r+0x24>

080176e4 <__smakebuf_r>:
 80176e4:	898b      	ldrh	r3, [r1, #12]
 80176e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176e8:	079d      	lsls	r5, r3, #30
 80176ea:	4606      	mov	r6, r0
 80176ec:	460c      	mov	r4, r1
 80176ee:	d507      	bpl.n	8017700 <__smakebuf_r+0x1c>
 80176f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80176f4:	6023      	str	r3, [r4, #0]
 80176f6:	6123      	str	r3, [r4, #16]
 80176f8:	2301      	movs	r3, #1
 80176fa:	6163      	str	r3, [r4, #20]
 80176fc:	b003      	add	sp, #12
 80176fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017700:	ab01      	add	r3, sp, #4
 8017702:	466a      	mov	r2, sp
 8017704:	f7ff ffc8 	bl	8017698 <__swhatbuf_r>
 8017708:	9f00      	ldr	r7, [sp, #0]
 801770a:	4605      	mov	r5, r0
 801770c:	4639      	mov	r1, r7
 801770e:	4630      	mov	r0, r6
 8017710:	f7ff fa30 	bl	8016b74 <_malloc_r>
 8017714:	b948      	cbnz	r0, 801772a <__smakebuf_r+0x46>
 8017716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801771a:	059a      	lsls	r2, r3, #22
 801771c:	d4ee      	bmi.n	80176fc <__smakebuf_r+0x18>
 801771e:	f023 0303 	bic.w	r3, r3, #3
 8017722:	f043 0302 	orr.w	r3, r3, #2
 8017726:	81a3      	strh	r3, [r4, #12]
 8017728:	e7e2      	b.n	80176f0 <__smakebuf_r+0xc>
 801772a:	89a3      	ldrh	r3, [r4, #12]
 801772c:	6020      	str	r0, [r4, #0]
 801772e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017732:	81a3      	strh	r3, [r4, #12]
 8017734:	9b01      	ldr	r3, [sp, #4]
 8017736:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801773a:	b15b      	cbz	r3, 8017754 <__smakebuf_r+0x70>
 801773c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017740:	4630      	mov	r0, r6
 8017742:	f000 f82d 	bl	80177a0 <_isatty_r>
 8017746:	b128      	cbz	r0, 8017754 <__smakebuf_r+0x70>
 8017748:	89a3      	ldrh	r3, [r4, #12]
 801774a:	f023 0303 	bic.w	r3, r3, #3
 801774e:	f043 0301 	orr.w	r3, r3, #1
 8017752:	81a3      	strh	r3, [r4, #12]
 8017754:	89a3      	ldrh	r3, [r4, #12]
 8017756:	431d      	orrs	r5, r3
 8017758:	81a5      	strh	r5, [r4, #12]
 801775a:	e7cf      	b.n	80176fc <__smakebuf_r+0x18>

0801775c <_close_r>:
 801775c:	b538      	push	{r3, r4, r5, lr}
 801775e:	4d06      	ldr	r5, [pc, #24]	@ (8017778 <_close_r+0x1c>)
 8017760:	2300      	movs	r3, #0
 8017762:	4604      	mov	r4, r0
 8017764:	4608      	mov	r0, r1
 8017766:	602b      	str	r3, [r5, #0]
 8017768:	f7eb fc2a 	bl	8002fc0 <_close>
 801776c:	1c43      	adds	r3, r0, #1
 801776e:	d102      	bne.n	8017776 <_close_r+0x1a>
 8017770:	682b      	ldr	r3, [r5, #0]
 8017772:	b103      	cbz	r3, 8017776 <_close_r+0x1a>
 8017774:	6023      	str	r3, [r4, #0]
 8017776:	bd38      	pop	{r3, r4, r5, pc}
 8017778:	2400187c 	.word	0x2400187c

0801777c <_fstat_r>:
 801777c:	b538      	push	{r3, r4, r5, lr}
 801777e:	4d07      	ldr	r5, [pc, #28]	@ (801779c <_fstat_r+0x20>)
 8017780:	2300      	movs	r3, #0
 8017782:	4604      	mov	r4, r0
 8017784:	4608      	mov	r0, r1
 8017786:	4611      	mov	r1, r2
 8017788:	602b      	str	r3, [r5, #0]
 801778a:	f7eb fc25 	bl	8002fd8 <_fstat>
 801778e:	1c43      	adds	r3, r0, #1
 8017790:	d102      	bne.n	8017798 <_fstat_r+0x1c>
 8017792:	682b      	ldr	r3, [r5, #0]
 8017794:	b103      	cbz	r3, 8017798 <_fstat_r+0x1c>
 8017796:	6023      	str	r3, [r4, #0]
 8017798:	bd38      	pop	{r3, r4, r5, pc}
 801779a:	bf00      	nop
 801779c:	2400187c 	.word	0x2400187c

080177a0 <_isatty_r>:
 80177a0:	b538      	push	{r3, r4, r5, lr}
 80177a2:	4d06      	ldr	r5, [pc, #24]	@ (80177bc <_isatty_r+0x1c>)
 80177a4:	2300      	movs	r3, #0
 80177a6:	4604      	mov	r4, r0
 80177a8:	4608      	mov	r0, r1
 80177aa:	602b      	str	r3, [r5, #0]
 80177ac:	f7eb fc24 	bl	8002ff8 <_isatty>
 80177b0:	1c43      	adds	r3, r0, #1
 80177b2:	d102      	bne.n	80177ba <_isatty_r+0x1a>
 80177b4:	682b      	ldr	r3, [r5, #0]
 80177b6:	b103      	cbz	r3, 80177ba <_isatty_r+0x1a>
 80177b8:	6023      	str	r3, [r4, #0]
 80177ba:	bd38      	pop	{r3, r4, r5, pc}
 80177bc:	2400187c 	.word	0x2400187c

080177c0 <_lseek_r>:
 80177c0:	b538      	push	{r3, r4, r5, lr}
 80177c2:	4d07      	ldr	r5, [pc, #28]	@ (80177e0 <_lseek_r+0x20>)
 80177c4:	4604      	mov	r4, r0
 80177c6:	4608      	mov	r0, r1
 80177c8:	4611      	mov	r1, r2
 80177ca:	2200      	movs	r2, #0
 80177cc:	602a      	str	r2, [r5, #0]
 80177ce:	461a      	mov	r2, r3
 80177d0:	f7eb fc1d 	bl	800300e <_lseek>
 80177d4:	1c43      	adds	r3, r0, #1
 80177d6:	d102      	bne.n	80177de <_lseek_r+0x1e>
 80177d8:	682b      	ldr	r3, [r5, #0]
 80177da:	b103      	cbz	r3, 80177de <_lseek_r+0x1e>
 80177dc:	6023      	str	r3, [r4, #0]
 80177de:	bd38      	pop	{r3, r4, r5, pc}
 80177e0:	2400187c 	.word	0x2400187c

080177e4 <_read_r>:
 80177e4:	b538      	push	{r3, r4, r5, lr}
 80177e6:	4d07      	ldr	r5, [pc, #28]	@ (8017804 <_read_r+0x20>)
 80177e8:	4604      	mov	r4, r0
 80177ea:	4608      	mov	r0, r1
 80177ec:	4611      	mov	r1, r2
 80177ee:	2200      	movs	r2, #0
 80177f0:	602a      	str	r2, [r5, #0]
 80177f2:	461a      	mov	r2, r3
 80177f4:	f7eb fbc7 	bl	8002f86 <_read>
 80177f8:	1c43      	adds	r3, r0, #1
 80177fa:	d102      	bne.n	8017802 <_read_r+0x1e>
 80177fc:	682b      	ldr	r3, [r5, #0]
 80177fe:	b103      	cbz	r3, 8017802 <_read_r+0x1e>
 8017800:	6023      	str	r3, [r4, #0]
 8017802:	bd38      	pop	{r3, r4, r5, pc}
 8017804:	2400187c 	.word	0x2400187c

08017808 <_sbrk_r>:
 8017808:	b538      	push	{r3, r4, r5, lr}
 801780a:	4d06      	ldr	r5, [pc, #24]	@ (8017824 <_sbrk_r+0x1c>)
 801780c:	2300      	movs	r3, #0
 801780e:	4604      	mov	r4, r0
 8017810:	4608      	mov	r0, r1
 8017812:	602b      	str	r3, [r5, #0]
 8017814:	f7eb fc08 	bl	8003028 <_sbrk>
 8017818:	1c43      	adds	r3, r0, #1
 801781a:	d102      	bne.n	8017822 <_sbrk_r+0x1a>
 801781c:	682b      	ldr	r3, [r5, #0]
 801781e:	b103      	cbz	r3, 8017822 <_sbrk_r+0x1a>
 8017820:	6023      	str	r3, [r4, #0]
 8017822:	bd38      	pop	{r3, r4, r5, pc}
 8017824:	2400187c 	.word	0x2400187c

08017828 <_write_r>:
 8017828:	b538      	push	{r3, r4, r5, lr}
 801782a:	4d07      	ldr	r5, [pc, #28]	@ (8017848 <_write_r+0x20>)
 801782c:	4604      	mov	r4, r0
 801782e:	4608      	mov	r0, r1
 8017830:	4611      	mov	r1, r2
 8017832:	2200      	movs	r2, #0
 8017834:	602a      	str	r2, [r5, #0]
 8017836:	461a      	mov	r2, r3
 8017838:	f7ea fadf 	bl	8001dfa <_write>
 801783c:	1c43      	adds	r3, r0, #1
 801783e:	d102      	bne.n	8017846 <_write_r+0x1e>
 8017840:	682b      	ldr	r3, [r5, #0]
 8017842:	b103      	cbz	r3, 8017846 <_write_r+0x1e>
 8017844:	6023      	str	r3, [r4, #0]
 8017846:	bd38      	pop	{r3, r4, r5, pc}
 8017848:	2400187c 	.word	0x2400187c

0801784c <__assert_func>:
 801784c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801784e:	4614      	mov	r4, r2
 8017850:	461a      	mov	r2, r3
 8017852:	4b09      	ldr	r3, [pc, #36]	@ (8017878 <__assert_func+0x2c>)
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	4605      	mov	r5, r0
 8017858:	68d8      	ldr	r0, [r3, #12]
 801785a:	b954      	cbnz	r4, 8017872 <__assert_func+0x26>
 801785c:	4b07      	ldr	r3, [pc, #28]	@ (801787c <__assert_func+0x30>)
 801785e:	461c      	mov	r4, r3
 8017860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017864:	9100      	str	r1, [sp, #0]
 8017866:	462b      	mov	r3, r5
 8017868:	4905      	ldr	r1, [pc, #20]	@ (8017880 <__assert_func+0x34>)
 801786a:	f000 f87d 	bl	8017968 <fiprintf>
 801786e:	f000 f89a 	bl	80179a6 <abort>
 8017872:	4b04      	ldr	r3, [pc, #16]	@ (8017884 <__assert_func+0x38>)
 8017874:	e7f4      	b.n	8017860 <__assert_func+0x14>
 8017876:	bf00      	nop
 8017878:	24000140 	.word	0x24000140
 801787c:	080181ce 	.word	0x080181ce
 8017880:	080181a0 	.word	0x080181a0
 8017884:	08018193 	.word	0x08018193

08017888 <_calloc_r>:
 8017888:	b570      	push	{r4, r5, r6, lr}
 801788a:	fba1 5402 	umull	r5, r4, r1, r2
 801788e:	b93c      	cbnz	r4, 80178a0 <_calloc_r+0x18>
 8017890:	4629      	mov	r1, r5
 8017892:	f7ff f96f 	bl	8016b74 <_malloc_r>
 8017896:	4606      	mov	r6, r0
 8017898:	b928      	cbnz	r0, 80178a6 <_calloc_r+0x1e>
 801789a:	2600      	movs	r6, #0
 801789c:	4630      	mov	r0, r6
 801789e:	bd70      	pop	{r4, r5, r6, pc}
 80178a0:	220c      	movs	r2, #12
 80178a2:	6002      	str	r2, [r0, #0]
 80178a4:	e7f9      	b.n	801789a <_calloc_r+0x12>
 80178a6:	462a      	mov	r2, r5
 80178a8:	4621      	mov	r1, r4
 80178aa:	f7fe f9cf 	bl	8015c4c <memset>
 80178ae:	e7f5      	b.n	801789c <_calloc_r+0x14>

080178b0 <_free_r>:
 80178b0:	b538      	push	{r3, r4, r5, lr}
 80178b2:	4605      	mov	r5, r0
 80178b4:	2900      	cmp	r1, #0
 80178b6:	d041      	beq.n	801793c <_free_r+0x8c>
 80178b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80178bc:	1f0c      	subs	r4, r1, #4
 80178be:	2b00      	cmp	r3, #0
 80178c0:	bfb8      	it	lt
 80178c2:	18e4      	addlt	r4, r4, r3
 80178c4:	f7ff fa82 	bl	8016dcc <__malloc_lock>
 80178c8:	4a1d      	ldr	r2, [pc, #116]	@ (8017940 <_free_r+0x90>)
 80178ca:	6813      	ldr	r3, [r2, #0]
 80178cc:	b933      	cbnz	r3, 80178dc <_free_r+0x2c>
 80178ce:	6063      	str	r3, [r4, #4]
 80178d0:	6014      	str	r4, [r2, #0]
 80178d2:	4628      	mov	r0, r5
 80178d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80178d8:	f7ff ba7e 	b.w	8016dd8 <__malloc_unlock>
 80178dc:	42a3      	cmp	r3, r4
 80178de:	d908      	bls.n	80178f2 <_free_r+0x42>
 80178e0:	6820      	ldr	r0, [r4, #0]
 80178e2:	1821      	adds	r1, r4, r0
 80178e4:	428b      	cmp	r3, r1
 80178e6:	bf01      	itttt	eq
 80178e8:	6819      	ldreq	r1, [r3, #0]
 80178ea:	685b      	ldreq	r3, [r3, #4]
 80178ec:	1809      	addeq	r1, r1, r0
 80178ee:	6021      	streq	r1, [r4, #0]
 80178f0:	e7ed      	b.n	80178ce <_free_r+0x1e>
 80178f2:	461a      	mov	r2, r3
 80178f4:	685b      	ldr	r3, [r3, #4]
 80178f6:	b10b      	cbz	r3, 80178fc <_free_r+0x4c>
 80178f8:	42a3      	cmp	r3, r4
 80178fa:	d9fa      	bls.n	80178f2 <_free_r+0x42>
 80178fc:	6811      	ldr	r1, [r2, #0]
 80178fe:	1850      	adds	r0, r2, r1
 8017900:	42a0      	cmp	r0, r4
 8017902:	d10b      	bne.n	801791c <_free_r+0x6c>
 8017904:	6820      	ldr	r0, [r4, #0]
 8017906:	4401      	add	r1, r0
 8017908:	1850      	adds	r0, r2, r1
 801790a:	4283      	cmp	r3, r0
 801790c:	6011      	str	r1, [r2, #0]
 801790e:	d1e0      	bne.n	80178d2 <_free_r+0x22>
 8017910:	6818      	ldr	r0, [r3, #0]
 8017912:	685b      	ldr	r3, [r3, #4]
 8017914:	6053      	str	r3, [r2, #4]
 8017916:	4408      	add	r0, r1
 8017918:	6010      	str	r0, [r2, #0]
 801791a:	e7da      	b.n	80178d2 <_free_r+0x22>
 801791c:	d902      	bls.n	8017924 <_free_r+0x74>
 801791e:	230c      	movs	r3, #12
 8017920:	602b      	str	r3, [r5, #0]
 8017922:	e7d6      	b.n	80178d2 <_free_r+0x22>
 8017924:	6820      	ldr	r0, [r4, #0]
 8017926:	1821      	adds	r1, r4, r0
 8017928:	428b      	cmp	r3, r1
 801792a:	bf04      	itt	eq
 801792c:	6819      	ldreq	r1, [r3, #0]
 801792e:	685b      	ldreq	r3, [r3, #4]
 8017930:	6063      	str	r3, [r4, #4]
 8017932:	bf04      	itt	eq
 8017934:	1809      	addeq	r1, r1, r0
 8017936:	6021      	streq	r1, [r4, #0]
 8017938:	6054      	str	r4, [r2, #4]
 801793a:	e7ca      	b.n	80178d2 <_free_r+0x22>
 801793c:	bd38      	pop	{r3, r4, r5, pc}
 801793e:	bf00      	nop
 8017940:	24001878 	.word	0x24001878

08017944 <__ascii_mbtowc>:
 8017944:	b082      	sub	sp, #8
 8017946:	b901      	cbnz	r1, 801794a <__ascii_mbtowc+0x6>
 8017948:	a901      	add	r1, sp, #4
 801794a:	b142      	cbz	r2, 801795e <__ascii_mbtowc+0x1a>
 801794c:	b14b      	cbz	r3, 8017962 <__ascii_mbtowc+0x1e>
 801794e:	7813      	ldrb	r3, [r2, #0]
 8017950:	600b      	str	r3, [r1, #0]
 8017952:	7812      	ldrb	r2, [r2, #0]
 8017954:	1e10      	subs	r0, r2, #0
 8017956:	bf18      	it	ne
 8017958:	2001      	movne	r0, #1
 801795a:	b002      	add	sp, #8
 801795c:	4770      	bx	lr
 801795e:	4610      	mov	r0, r2
 8017960:	e7fb      	b.n	801795a <__ascii_mbtowc+0x16>
 8017962:	f06f 0001 	mvn.w	r0, #1
 8017966:	e7f8      	b.n	801795a <__ascii_mbtowc+0x16>

08017968 <fiprintf>:
 8017968:	b40e      	push	{r1, r2, r3}
 801796a:	b503      	push	{r0, r1, lr}
 801796c:	4601      	mov	r1, r0
 801796e:	ab03      	add	r3, sp, #12
 8017970:	4805      	ldr	r0, [pc, #20]	@ (8017988 <fiprintf+0x20>)
 8017972:	f853 2b04 	ldr.w	r2, [r3], #4
 8017976:	6800      	ldr	r0, [r0, #0]
 8017978:	9301      	str	r3, [sp, #4]
 801797a:	f7fe ffb9 	bl	80168f0 <_vfiprintf_r>
 801797e:	b002      	add	sp, #8
 8017980:	f85d eb04 	ldr.w	lr, [sp], #4
 8017984:	b003      	add	sp, #12
 8017986:	4770      	bx	lr
 8017988:	24000140 	.word	0x24000140

0801798c <__ascii_wctomb>:
 801798c:	4603      	mov	r3, r0
 801798e:	4608      	mov	r0, r1
 8017990:	b141      	cbz	r1, 80179a4 <__ascii_wctomb+0x18>
 8017992:	2aff      	cmp	r2, #255	@ 0xff
 8017994:	d904      	bls.n	80179a0 <__ascii_wctomb+0x14>
 8017996:	228a      	movs	r2, #138	@ 0x8a
 8017998:	601a      	str	r2, [r3, #0]
 801799a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801799e:	4770      	bx	lr
 80179a0:	700a      	strb	r2, [r1, #0]
 80179a2:	2001      	movs	r0, #1
 80179a4:	4770      	bx	lr

080179a6 <abort>:
 80179a6:	b508      	push	{r3, lr}
 80179a8:	2006      	movs	r0, #6
 80179aa:	f000 f82b 	bl	8017a04 <raise>
 80179ae:	2001      	movs	r0, #1
 80179b0:	f7eb fade 	bl	8002f70 <_exit>

080179b4 <_raise_r>:
 80179b4:	291f      	cmp	r1, #31
 80179b6:	b538      	push	{r3, r4, r5, lr}
 80179b8:	4605      	mov	r5, r0
 80179ba:	460c      	mov	r4, r1
 80179bc:	d904      	bls.n	80179c8 <_raise_r+0x14>
 80179be:	2316      	movs	r3, #22
 80179c0:	6003      	str	r3, [r0, #0]
 80179c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80179c6:	bd38      	pop	{r3, r4, r5, pc}
 80179c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80179ca:	b112      	cbz	r2, 80179d2 <_raise_r+0x1e>
 80179cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80179d0:	b94b      	cbnz	r3, 80179e6 <_raise_r+0x32>
 80179d2:	4628      	mov	r0, r5
 80179d4:	f000 f830 	bl	8017a38 <_getpid_r>
 80179d8:	4622      	mov	r2, r4
 80179da:	4601      	mov	r1, r0
 80179dc:	4628      	mov	r0, r5
 80179de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179e2:	f000 b817 	b.w	8017a14 <_kill_r>
 80179e6:	2b01      	cmp	r3, #1
 80179e8:	d00a      	beq.n	8017a00 <_raise_r+0x4c>
 80179ea:	1c59      	adds	r1, r3, #1
 80179ec:	d103      	bne.n	80179f6 <_raise_r+0x42>
 80179ee:	2316      	movs	r3, #22
 80179f0:	6003      	str	r3, [r0, #0]
 80179f2:	2001      	movs	r0, #1
 80179f4:	e7e7      	b.n	80179c6 <_raise_r+0x12>
 80179f6:	2100      	movs	r1, #0
 80179f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80179fc:	4620      	mov	r0, r4
 80179fe:	4798      	blx	r3
 8017a00:	2000      	movs	r0, #0
 8017a02:	e7e0      	b.n	80179c6 <_raise_r+0x12>

08017a04 <raise>:
 8017a04:	4b02      	ldr	r3, [pc, #8]	@ (8017a10 <raise+0xc>)
 8017a06:	4601      	mov	r1, r0
 8017a08:	6818      	ldr	r0, [r3, #0]
 8017a0a:	f7ff bfd3 	b.w	80179b4 <_raise_r>
 8017a0e:	bf00      	nop
 8017a10:	24000140 	.word	0x24000140

08017a14 <_kill_r>:
 8017a14:	b538      	push	{r3, r4, r5, lr}
 8017a16:	4d07      	ldr	r5, [pc, #28]	@ (8017a34 <_kill_r+0x20>)
 8017a18:	2300      	movs	r3, #0
 8017a1a:	4604      	mov	r4, r0
 8017a1c:	4608      	mov	r0, r1
 8017a1e:	4611      	mov	r1, r2
 8017a20:	602b      	str	r3, [r5, #0]
 8017a22:	f7eb fa95 	bl	8002f50 <_kill>
 8017a26:	1c43      	adds	r3, r0, #1
 8017a28:	d102      	bne.n	8017a30 <_kill_r+0x1c>
 8017a2a:	682b      	ldr	r3, [r5, #0]
 8017a2c:	b103      	cbz	r3, 8017a30 <_kill_r+0x1c>
 8017a2e:	6023      	str	r3, [r4, #0]
 8017a30:	bd38      	pop	{r3, r4, r5, pc}
 8017a32:	bf00      	nop
 8017a34:	2400187c 	.word	0x2400187c

08017a38 <_getpid_r>:
 8017a38:	f7eb ba82 	b.w	8002f40 <_getpid>

08017a3c <_init>:
 8017a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a3e:	bf00      	nop
 8017a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a42:	bc08      	pop	{r3}
 8017a44:	469e      	mov	lr, r3
 8017a46:	4770      	bx	lr

08017a48 <_fini>:
 8017a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a4a:	bf00      	nop
 8017a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a4e:	bc08      	pop	{r3}
 8017a50:	469e      	mov	lr, r3
 8017a52:	4770      	bx	lr
