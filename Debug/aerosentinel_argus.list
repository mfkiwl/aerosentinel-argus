
aerosentinel_argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000164c4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08016768  08016768  00017768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016e90  08016e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016e98  08016e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016e9c  08016e9c  00017e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002f8  24000000  08016ea0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000014c4  240002f8  08017198  000182f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240017bc  08017198  000187bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000182f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035034  00000000  00000000  00018326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006d32  00000000  00000000  0004d35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c58  00000000  00000000  00054090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000022a9  00000000  00000000  00056ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042a29  00000000  00000000  00058f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c878  00000000  00000000  0009b9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017c4a0  00000000  00000000  000d8232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002546d2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000cb90  00000000  00000000  00254718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  002612a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f8 	.word	0x240002f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801674c 	.word	0x0801674c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002fc 	.word	0x240002fc
 80002dc:	0801674c 	.word	0x0801674c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SensorManager_Init>:
	{MPL3115A2_Init, "MPL3115A2"},
	{BNO086_Init, "BNO086"}
};


telemetry_init_status SensorManager_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
    printf("Sensors Initialization routine started.\n");
 8000686:	4826      	ldr	r0, [pc, #152]	@ (8000720 <SensorManager_Init+0xa0>)
 8000688:	f014 f960 	bl	801494c <puts>

    size_t num_sensors = sizeof(sensors) / sizeof(sensors[0]);
 800068c:	2305      	movs	r3, #5
 800068e:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	e024      	b.n	80006e8 <SensorManager_Init+0x68>
        int8_t status = sensors[i].init_function();
 800069e:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SensorManager_Init+0xa4>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006a6:	4798      	blx	r3
 80006a8:	4603      	mov	r3, r0
 80006aa:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 80006ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00b      	beq.n	80006cc <SensorManager_Init+0x4c>
            printf("%s initialization failed.\n", sensors[i].sensor_name);
 80006b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <SensorManager_Init+0xa4>)
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <SensorManager_Init+0xa8>)
 80006c2:	f014 f8db 	bl	801487c <iprintf>
            all_success = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e00a      	b.n	80006e2 <SensorManager_Init+0x62>
        } else {
            printf("[%s] device found! Initialization succeeded.\n", sensors[i].sensor_name);
 80006cc:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <SensorManager_Init+0xa4>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	4413      	add	r3, r2
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4814      	ldr	r0, [pc, #80]	@ (800072c <SensorManager_Init+0xac>)
 80006da:	f014 f8cf 	bl	801487c <iprintf>
            any_success = true;
 80006de:	2301      	movs	r3, #1
 80006e0:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3d6      	bcc.n	800069e <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d004      	beq.n	8000700 <SensorManager_Init+0x80>
        printf("All sensors initialized successfully.\n");
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <SensorManager_Init+0xb0>)
 80006f8:	f014 f928 	bl	801494c <puts>
        return TELEMETRY_INIT_SUCCESS;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e00b      	b.n	8000718 <SensorManager_Init+0x98>
    } else if (any_success) {
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <SensorManager_Init+0x90>
        printf("Partial initialization success.\n");
 8000706:	480b      	ldr	r0, [pc, #44]	@ (8000734 <SensorManager_Init+0xb4>)
 8000708:	f014 f920 	bl	801494c <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 800070c:	2301      	movs	r3, #1
 800070e:	e003      	b.n	8000718 <SensorManager_Init+0x98>
    } else {
        printf("All sensors initialization failed.\n");
 8000710:	4809      	ldr	r0, [pc, #36]	@ (8000738 <SensorManager_Init+0xb8>)
 8000712:	f014 f91b 	bl	801494c <puts>
        return TELEMETRY_INIT_FAILURE;
 8000716:	2302      	movs	r3, #2
    }
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08016794 	.word	0x08016794
 8000724:	24000000 	.word	0x24000000
 8000728:	080167bc 	.word	0x080167bc
 800072c:	080167d8 	.word	0x080167d8
 8000730:	08016808 	.word	0x08016808
 8000734:	08016830 	.word	0x08016830
 8000738:	08016850 	.word	0x08016850

0800073c <ADXL375_Init>:

/*
 * INITIALISATION
 */

int8_t ADXL375_Init(){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
    ToggleCSHigh();
 8000742:	f000 f8a7 	bl	8000894 <ToggleCSHigh>

    /* Use the global variable 'hspi1' directly */
    dev.spiHandle = &hspi1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <ADXL375_Init+0x80>)
 8000748:	4a1d      	ldr	r2, [pc, #116]	@ (80007c0 <ADXL375_Init+0x84>)
 800074a:	601a      	str	r2, [r3, #0]

    HAL_StatusTypeDef status;

    int8_t errorNum = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	71fb      	strb	r3, [r7, #7]

    /* confirm device address as 0xE5 */
    uint8_t confirmID;
    while(1) {
        status = ReadData(ADXL375_DEVID, &confirmID, 1);
 8000750:	1d7b      	adds	r3, r7, #5
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f860 	bl	800081c <ReadData>
 800075c:	4603      	mov	r3, r0
 800075e:	71bb      	strb	r3, [r7, #6]
        if (status == HAL_OK) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1f4      	bne.n	8000750 <ADXL375_Init+0x14>
            if (confirmID == 0xE5)
 8000766:	797b      	ldrb	r3, [r7, #5]
 8000768:	2be5      	cmp	r3, #229	@ 0xe5
 800076a:	d000      	beq.n	800076e <ADXL375_Init+0x32>
        status = ReadData(ADXL375_DEVID, &confirmID, 1);
 800076c:	e7f0      	b.n	8000750 <ADXL375_Init+0x14>
                break;
 800076e:	bf00      	nop
        }
    }

    /* set the required data rate */
    status = WriteData(ADXL375_BW_RATE, BW_RATE_DATA_RATE, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	210f      	movs	r1, #15
 8000774:	202c      	movs	r0, #44	@ 0x2c
 8000776:	f000 f825 	bl	80007c4 <WriteData>
 800077a:	4603      	mov	r3, r0
 800077c:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK) {
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <ADXL375_Init+0x54>
        errorNum++;
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	3301      	adds	r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	71fb      	strb	r3, [r7, #7]
    }

    /* if all well till now, enable measurement mode */
    status = WriteData(ADXL375_POWER_CTL, POWER_CTL_MEASURE_MODE, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2108      	movs	r1, #8
 8000794:	202d      	movs	r0, #45	@ 0x2d
 8000796:	f000 f815 	bl	80007c4 <WriteData>
 800079a:	4603      	mov	r3, r0
 800079c:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK)
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <ADXL375_Init+0x74>
        errorNum++;
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	3301      	adds	r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	71fb      	strb	r3, [r7, #7]

    return errorNum;
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	24000314 	.word	0x24000314
 80007c0:	24000814 	.word	0x24000814

080007c4 <WriteData>:
/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef WriteData(uint8_t address, uint8_t data, uint16_t len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	460b      	mov	r3, r1
 80007d0:	71bb      	strb	r3, [r7, #6]
 80007d2:	4613      	mov	r3, r2
 80007d4:	80bb      	strh	r3, [r7, #4]
    ToggleCSLow();
 80007d6:	f000 f869 	bl	80008ac <ToggleCSLow>

    /* Use the global 'dev' instance */
    HAL_StatusTypeDef status = HAL_SPI_Transmit(dev.spiHandle, &address, 1, HAL_MAX_DELAY);
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <WriteData+0x54>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	1df9      	adds	r1, r7, #7
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	2201      	movs	r2, #1
 80007e6:	f00a fa75 	bl	800acd4 <HAL_SPI_Transmit>
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d109      	bne.n	8000808 <WriteData+0x44>
        status = HAL_SPI_Transmit(dev.spiHandle, &data, 1, HAL_MAX_DELAY);
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <WriteData+0x54>)
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	1db9      	adds	r1, r7, #6
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	2201      	movs	r2, #1
 8000800:	f00a fa68 	bl	800acd4 <HAL_SPI_Transmit>
 8000804:	4603      	mov	r3, r0
 8000806:	73fb      	strb	r3, [r7, #15]

    ToggleCSHigh();
 8000808:	f000 f844 	bl	8000894 <ToggleCSHigh>

    return status;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	24000314 	.word	0x24000314

0800081c <ReadData>:


HAL_StatusTypeDef ReadData(uint8_t address, uint8_t *data, uint16_t len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	80bb      	strh	r3, [r7, #4]
    ToggleCSLow();
 800082c:	f000 f83e 	bl	80008ac <ToggleCSLow>

    uint8_t txBuffer = (address | 0x80);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73bb      	strb	r3, [r7, #14]

    if (len > 1) {
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d904      	bls.n	800084a <ReadData+0x2e>
        txBuffer = (txBuffer | 0xC0);
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000846:	b2db      	uxtb	r3, r3
 8000848:	73bb      	strb	r3, [r7, #14]
    }

    /* Use the global 'dev' instance */
    HAL_StatusTypeDef status = HAL_SPI_Transmit(dev.spiHandle, &txBuffer, 1, HAL_MAX_DELAY);
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <ReadData+0x74>)
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	f107 010e 	add.w	r1, r7, #14
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	2201      	movs	r2, #1
 8000858:	f00a fa3c 	bl	800acd4 <HAL_SPI_Transmit>
 800085c:	4603      	mov	r3, r0
 800085e:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(3);
 8000860:	2003      	movs	r0, #3
 8000862:	f002 f8e5 	bl	8002a30 <HAL_Delay>
    if (status == HAL_OK)
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d109      	bne.n	8000880 <ReadData+0x64>
        status = HAL_SPI_Receive(dev.spiHandle, data, len, HAL_MAX_DELAY);
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <ReadData+0x74>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	88ba      	ldrh	r2, [r7, #4]
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	6839      	ldr	r1, [r7, #0]
 8000878:	f00a fc1a 	bl	800b0b0 <HAL_SPI_Receive>
 800087c:	4603      	mov	r3, r0
 800087e:	73fb      	strb	r3, [r7, #15]

    ToggleCSHigh();
 8000880:	f000 f808 	bl	8000894 <ToggleCSHigh>

    return status;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	24000314 	.word	0x24000314

08000894 <ToggleCSHigh>:


void ToggleCSHigh()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2110      	movs	r1, #16
 800089c:	4802      	ldr	r0, [pc, #8]	@ (80008a8 <ToggleCSHigh+0x14>)
 800089e:	f002 fc47 	bl	8003130 <HAL_GPIO_WritePin>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	58020800 	.word	0x58020800

080008ac <ToggleCSLow>:

void ToggleCSLow()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2110      	movs	r1, #16
 80008b4:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <ToggleCSLow+0x14>)
 80008b6:	f002 fc3b 	bl	8003130 <HAL_GPIO_WritePin>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	58020800 	.word	0x58020800

080008c4 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80008cc:	23ff      	movs	r3, #255	@ 0xff
 80008ce:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 80008d4:	2300      	movs	r3, #0
 80008d6:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80008d8:	2300      	movs	r3, #0
 80008da:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 80008dc:	4a58      	ldr	r2, [pc, #352]	@ (8000a40 <bno055_init+0x17c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80008e2:	4b57      	ldr	r3, [pc, #348]	@ (8000a40 <bno055_init+0x17c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68dc      	ldr	r4, [r3, #12]
 80008e8:	4b55      	ldr	r3, [pc, #340]	@ (8000a40 <bno055_init+0x17c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	7a58      	ldrb	r0, [r3, #9]
 80008ee:	f107 020d 	add.w	r2, r7, #13
 80008f2:	2301      	movs	r3, #1
 80008f4:	2107      	movs	r1, #7
 80008f6:	47a0      	blx	r4
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80008fc:	4b50      	ldr	r3, [pc, #320]	@ (8000a40 <bno055_init+0x17c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	691c      	ldr	r4, [r3, #16]
 8000902:	4b4f      	ldr	r3, [pc, #316]	@ (8000a40 <bno055_init+0x17c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	7a58      	ldrb	r0, [r3, #9]
 8000908:	f107 020e 	add.w	r2, r7, #14
 800090c:	2301      	movs	r3, #1
 800090e:	2100      	movs	r1, #0
 8000910:	47a0      	blx	r4
 8000912:	4603      	mov	r3, r0
 8000914:	b2da      	uxtb	r2, r3
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4413      	add	r3, r2
 800091a:	b2db      	uxtb	r3, r3
 800091c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 800091e:	4b48      	ldr	r3, [pc, #288]	@ (8000a40 <bno055_init+0x17c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	7bba      	ldrb	r2, [r7, #14]
 8000924:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000926:	4b46      	ldr	r3, [pc, #280]	@ (8000a40 <bno055_init+0x17c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	691c      	ldr	r4, [r3, #16]
 800092c:	4b44      	ldr	r3, [pc, #272]	@ (8000a40 <bno055_init+0x17c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	7a58      	ldrb	r0, [r3, #9]
 8000932:	f107 020e 	add.w	r2, r7, #14
 8000936:	2301      	movs	r3, #1
 8000938:	2101      	movs	r1, #1
 800093a:	47a0      	blx	r4
 800093c:	4603      	mov	r3, r0
 800093e:	b2da      	uxtb	r2, r3
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	4413      	add	r3, r2
 8000944:	b2db      	uxtb	r3, r3
 8000946:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000948:	4b3d      	ldr	r3, [pc, #244]	@ (8000a40 <bno055_init+0x17c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	7bba      	ldrb	r2, [r7, #14]
 800094e:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000950:	4b3b      	ldr	r3, [pc, #236]	@ (8000a40 <bno055_init+0x17c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	691c      	ldr	r4, [r3, #16]
 8000956:	4b3a      	ldr	r3, [pc, #232]	@ (8000a40 <bno055_init+0x17c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	7a58      	ldrb	r0, [r3, #9]
 800095c:	f107 020e 	add.w	r2, r7, #14
 8000960:	2301      	movs	r3, #1
 8000962:	2102      	movs	r1, #2
 8000964:	47a0      	blx	r4
 8000966:	4603      	mov	r3, r0
 8000968:	b2da      	uxtb	r2, r3
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	4413      	add	r3, r2
 800096e:	b2db      	uxtb	r3, r3
 8000970:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000972:	4b33      	ldr	r3, [pc, #204]	@ (8000a40 <bno055_init+0x17c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	7bba      	ldrb	r2, [r7, #14]
 8000978:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800097a:	4b31      	ldr	r3, [pc, #196]	@ (8000a40 <bno055_init+0x17c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	691c      	ldr	r4, [r3, #16]
 8000980:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <bno055_init+0x17c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	7a58      	ldrb	r0, [r3, #9]
 8000986:	f107 020e 	add.w	r2, r7, #14
 800098a:	2301      	movs	r3, #1
 800098c:	2103      	movs	r1, #3
 800098e:	47a0      	blx	r4
 8000990:	4603      	mov	r3, r0
 8000992:	b2da      	uxtb	r2, r3
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	4413      	add	r3, r2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 800099c:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <bno055_init+0x17c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	7bba      	ldrb	r2, [r7, #14]
 80009a2:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <bno055_init+0x17c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	691c      	ldr	r4, [r3, #16]
 80009aa:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <bno055_init+0x17c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	7a58      	ldrb	r0, [r3, #9]
 80009b0:	f107 020e 	add.w	r2, r7, #14
 80009b4:	2301      	movs	r3, #1
 80009b6:	2106      	movs	r1, #6
 80009b8:	47a0      	blx	r4
 80009ba:	4603      	mov	r3, r0
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	4413      	add	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <bno055_init+0x17c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	7bba      	ldrb	r2, [r7, #14]
 80009cc:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <bno055_init+0x17c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	691c      	ldr	r4, [r3, #16]
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <bno055_init+0x17c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	7a58      	ldrb	r0, [r3, #9]
 80009da:	f107 0208 	add.w	r2, r7, #8
 80009de:	2302      	movs	r3, #2
 80009e0:	2104      	movs	r1, #4
 80009e2:	47a0      	blx	r4
 80009e4:	4603      	mov	r3, r0
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	4413      	add	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 80009f0:	7a3b      	ldrb	r3, [r7, #8]
 80009f2:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80009f4:	7a7b      	ldrb	r3, [r7, #9]
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	7a3b      	ldrb	r3, [r7, #8]
 80009fc:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <bno055_init+0x17c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000a02:	430a      	orrs	r2, r1
 8000a04:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000a06:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <bno055_init+0x17c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	691c      	ldr	r4, [r3, #16]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <bno055_init+0x17c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7a58      	ldrb	r0, [r3, #9]
 8000a14:	f107 020e 	add.w	r2, r7, #14
 8000a18:	2301      	movs	r3, #1
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	47a0      	blx	r4
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	4413      	add	r3, r2
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000a2a:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <bno055_init+0x17c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	7bba      	ldrb	r2, [r7, #14]
 8000a30:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2400032c 	.word	0x2400032c

08000a44 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	4613      	mov	r3, r2
 8000a52:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a54:	23ff      	movs	r3, #255	@ 0xff
 8000a56:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <bno055_write_register+0x48>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000a60:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000a64:	e00d      	b.n	8000a82 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <bno055_write_register+0x48>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68dc      	ldr	r4, [r3, #12]
 8000a6c:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <bno055_write_register+0x48>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	7a58      	ldrb	r0, [r3, #9]
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	79f9      	ldrb	r1, [r7, #7]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	47a0      	blx	r4
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2400032c 	.word	0x2400032c

08000a90 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a9a:	23ff      	movs	r3, #255	@ 0xff
 8000a9c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d102      	bne.n	8000ab0 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000aaa:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000aae:	e030      	b.n	8000b12 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	691c      	ldr	r4, [r3, #16]
 8000ab6:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	7a58      	ldrb	r0, [r3, #9]
 8000abc:	f107 020e 	add.w	r2, r7, #14
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	2107      	movs	r1, #7
 8000ac4:	47a0      	blx	r4
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d11b      	bne.n	8000b0a <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68dc      	ldr	r4, [r3, #12]
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	7a58      	ldrb	r0, [r3, #9]
 8000ae2:	f107 020e 	add.w	r2, r7, #14
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2107      	movs	r1, #7
 8000aea:	47a0      	blx	r4
 8000aec:	4603      	mov	r3, r0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	4413      	add	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d106      	bne.n	8000b0e <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	711a      	strb	r2, [r3, #4]
 8000b08:	e001      	b.n	8000b0e <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b0a:	23ff      	movs	r3, #255	@ 0xff
 8000b0c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2400032c 	.word	0x2400032c

08000b20 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b28:	23ff      	movs	r3, #255	@ 0xff
 8000b2a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000b30:	23ff      	movs	r3, #255	@ 0xff
 8000b32:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000b3c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000b40:	e02a      	b.n	8000b98 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000b42:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff ff9f 	bl	8000a90 <bno055_write_page_id>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d004      	beq.n	8000b68 <bno055_get_operation_mode+0x48>
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d113      	bne.n	8000b90 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	691c      	ldr	r4, [r3, #16]
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	7a58      	ldrb	r0, [r3, #9]
 8000b74:	f107 020d 	add.w	r2, r7, #13
 8000b78:	2301      	movs	r3, #1
 8000b7a:	213d      	movs	r1, #61	@ 0x3d
 8000b7c:	47a0      	blx	r4
 8000b7e:	4603      	mov	r3, r0
 8000b80:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000b82:	7b7b      	ldrb	r3, [r7, #13]
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e001      	b.n	8000b94 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b90:	23ff      	movs	r3, #255	@ 0xff
 8000b92:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd90      	pop	{r4, r7, pc}
 8000ba0:	2400032c 	.word	0x2400032c

08000ba4 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000bae:	23ff      	movs	r3, #255	@ 0xff
 8000bb0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000bba:	23ff      	movs	r3, #255	@ 0xff
 8000bbc:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000bc6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000bca:	e0ac      	b.n	8000d26 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffa5 	bl	8000b20 <bno055_get_operation_mode>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 809d 	bne.w	8000d1e <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d137      	bne.n	8000c5a <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bea:	4b51      	ldr	r3, [pc, #324]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	691c      	ldr	r4, [r3, #16]
 8000bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	7a58      	ldrb	r0, [r3, #9]
 8000bf6:	f107 020d 	add.w	r2, r7, #13
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	213d      	movs	r1, #61	@ 0x3d
 8000bfe:	47a0      	blx	r4
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f040 808a 	bne.w	8000d22 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000c0e:	7b7b      	ldrb	r3, [r7, #13]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	f023 030f 	bic.w	r3, r3, #15
 8000c16:	b25a      	sxtb	r2, r3
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000c2a:	4b41      	ldr	r3, [pc, #260]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68dc      	ldr	r4, [r3, #12]
 8000c30:	4b3f      	ldr	r3, [pc, #252]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	7a58      	ldrb	r0, [r3, #9]
 8000c36:	f107 020d 	add.w	r2, r7, #13
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	213d      	movs	r1, #61	@ 0x3d
 8000c3e:	47a0      	blx	r4
 8000c40:	4603      	mov	r3, r0
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	4413      	add	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000c4c:	4b38      	ldr	r3, [pc, #224]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000c56:	4798      	blx	r3
 8000c58:	e063      	b.n	8000d22 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	691c      	ldr	r4, [r3, #16]
 8000c60:	4b33      	ldr	r3, [pc, #204]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	7a58      	ldrb	r0, [r3, #9]
 8000c66:	f107 020d 	add.w	r2, r7, #13
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	213d      	movs	r1, #61	@ 0x3d
 8000c6e:	47a0      	blx	r4
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d116      	bne.n	8000caa <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000c7c:	7b7b      	ldrb	r3, [r7, #13]
 8000c7e:	f023 030f 	bic.w	r3, r3, #15
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000c86:	f107 030d 	add.w	r3, r7, #13
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	203d      	movs	r0, #61	@ 0x3d
 8000c90:	f7ff fed8 	bl	8000a44 <bno055_write_register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000ca0:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	2014      	movs	r0, #20
 8000ca8:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d038      	beq.n	8000d22 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	691c      	ldr	r4, [r3, #16]
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	7a58      	ldrb	r0, [r3, #9]
 8000cbc:	f107 020d 	add.w	r2, r7, #13
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	213d      	movs	r1, #61	@ 0x3d
 8000cc4:	47a0      	blx	r4
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d127      	bne.n	8000d22 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000cd2:	7b7b      	ldrb	r3, [r7, #13]
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	f023 030f 	bic.w	r3, r3, #15
 8000cda:	b25a      	sxtb	r2, r3
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68dc      	ldr	r4, [r3, #12]
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	7a58      	ldrb	r0, [r3, #9]
 8000cfa:	f107 020d 	add.w	r2, r7, #13
 8000cfe:	2301      	movs	r3, #1
 8000d00:	213d      	movs	r1, #61	@ 0x3d
 8000d02:	47a0      	blx	r4
 8000d04:	4603      	mov	r3, r0
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000d1a:	4798      	blx	r3
 8000d1c:	e001      	b.n	8000d22 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000d1e:	23ff      	movs	r3, #255	@ 0xff
 8000d20:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2400032c 	.word	0x2400032c

08000d34 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000d3e:	23ff      	movs	r3, #255	@ 0xff
 8000d40:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000d46:	2300      	movs	r3, #0
 8000d48:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000d4a:	23ff      	movs	r3, #255	@ 0xff
 8000d4c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d4e:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000d56:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000d5a:	e05f      	b.n	8000e1c <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fedd 	bl	8000b20 <bno055_get_operation_mode>
 8000d66:	4603      	mov	r3, r0
 8000d68:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d143      	bne.n	8000dfa <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff ff13 	bl	8000ba4 <bno055_set_operation_mode>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	4413      	add	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8000d8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d130      	bne.n	8000df4 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d92:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	691c      	ldr	r4, [r3, #16]
 8000d98:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	7a58      	ldrb	r0, [r3, #9]
 8000d9e:	f107 020d 	add.w	r2, r7, #13
 8000da2:	2301      	movs	r3, #1
 8000da4:	213e      	movs	r1, #62	@ 0x3e
 8000da6:	47a0      	blx	r4
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d124      	bne.n	8000dfe <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	f023 0303 	bic.w	r3, r3, #3
 8000dbc:	b25a      	sxtb	r2, r3
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68dc      	ldr	r4, [r3, #12]
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	7a58      	ldrb	r0, [r3, #9]
 8000ddc:	f107 020d 	add.w	r2, r7, #13
 8000de0:	2301      	movs	r3, #1
 8000de2:	213e      	movs	r1, #62	@ 0x3e
 8000de4:	47a0      	blx	r4
 8000de6:	4603      	mov	r3, r0
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	4413      	add	r3, r2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e004      	b.n	8000dfe <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000df4:	23ff      	movs	r3, #255	@ 0xff
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e001      	b.n	8000dfe <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000dfa:	23ff      	movs	r3, #255	@ 0xff
 8000dfc:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000dfe:	7b3b      	ldrb	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d009      	beq.n	8000e18 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000e04:	7b3b      	ldrb	r3, [r7, #12]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fecc 	bl	8000ba4 <bno055_set_operation_mode>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	4413      	add	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	2400032c 	.word	0x2400032c

08000e28 <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
signed char bno055_platform_read(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char ReadNumbr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	603a      	str	r2, [r7, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	460b      	mov	r3, r1
 8000e38:	71bb      	strb	r3, [r7, #6]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	81fb      	strh	r3, [r7, #14]

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8000e46:	1dba      	adds	r2, r7, #6
 8000e48:	89f9      	ldrh	r1, [r7, #14]
 8000e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <bno055_platform_read+0x50>)
 8000e54:	f002 fa22 	bl	800329c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BNO_I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8000e58:	797b      	ldrb	r3, [r7, #5]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	89f9      	ldrh	r1, [r7, #14]
 8000e5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e62:	9200      	str	r2, [sp, #0]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <bno055_platform_read+0x50>)
 8000e68:	f002 fb30 	bl	80034cc <HAL_I2C_Master_Receive>
    return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	24000744 	.word	0x24000744

08000e7c <bno055_platform_write>:
  *
  */


signed char bno055_platform_write(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char WriteNumbr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	603a      	str	r2, [r7, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	71bb      	strb	r3, [r7, #6]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	81fb      	strh	r3, [r7, #14]

    BNO_GTXBuffer[0] = subaddress;
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <bno055_platform_write+0x54>)
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	7013      	strb	r3, [r2, #0]
    memcpy(&BNO_GTXBuffer[1], pBuffer, WriteNumbr);
 8000ea0:	797b      	ldrb	r3, [r7, #5]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <bno055_platform_write+0x58>)
 8000ea8:	f013 feaf 	bl	8014c0a <memcpy>

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, BNO_GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8000eac:	797b      	ldrb	r3, [r7, #5]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	89f9      	ldrh	r1, [r7, #14]
 8000eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <bno055_platform_write+0x54>)
 8000ebe:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <bno055_platform_write+0x5c>)
 8000ec0:	f002 f9ec 	bl	800329c <HAL_I2C_Master_Transmit>
    return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000348 	.word	0x24000348
 8000ed4:	24000349 	.word	0x24000349
 8000ed8:	24000744 	.word	0x24000744

08000edc <DelayUs>:
  *
  */


void DelayUs(unsigned int Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
//		{
//			;
//		}
//	}

	HAL_Delay(Delay);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 fda3 	bl	8002a30 <HAL_Delay>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 0 -> no Error)
  *
  */
int8_t BNO055_Init(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 8000efa:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <BNO055_Init+0xb0>)
 8000efc:	4a2a      	ldr	r2, [pc, #168]	@ (8000fa8 <BNO055_Init+0xb4>)
 8000efe:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 8000f00:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <BNO055_Init+0xb0>)
 8000f02:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <BNO055_Init+0xb8>)
 8000f04:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = &DelayUs;
 8000f06:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <BNO055_Init+0xb0>)
 8000f08:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <BNO055_Init+0xbc>)
 8000f0a:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <BNO055_Init+0xb0>)
 8000f0e:	2228      	movs	r2, #40	@ 0x28
 8000f10:	725a      	strb	r2, [r3, #9]

	uint8_t value;
	bno055_platform_read(BNO055_I2C_ADDR1, 0x00, &value, 1);
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	2301      	movs	r3, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	2028      	movs	r0, #40	@ 0x28
 8000f1a:	f7ff ff85 	bl	8000e28 <bno055_platform_read>

	comres = bno055_init(&bno055_dev);
 8000f1e:	4821      	ldr	r0, [pc, #132]	@ (8000fa4 <BNO055_Init+0xb0>)
 8000f20:	f7ff fcd0 	bl	80008c4 <bno055_init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f2a:	601a      	str	r2, [r3, #0]
//	{
//		printf("bno055_init failed, comres=%d\r\n", comres);
//	}

	/* set the power mode as NORMAL*/
	power_mode = BNO055_POWER_MODE_NORMAL;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <BNO055_Init+0xc4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
	comres += bno055_set_power_mode(power_mode);
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <BNO055_Init+0xc4>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fefc 	bl	8000d34 <bno055_set_power_mode>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f48:	6013      	str	r3, [r2, #0]
		* 0x0A - BNO055_OPERATION_MODE_M4G
		* 0x0B - BNO055_OPERATION_MODE_NDOF_FMC_OFF
		* 0x0C - BNO055_OPERATION_MODE_NDOF
		* based on the user need configure the operation mode*/
	    // Set the operation mode to NDOF
		printf("Trying to set BNO055 operational mode...");
 8000f4a:	481c      	ldr	r0, [pc, #112]	@ (8000fbc <BNO055_Init+0xc8>)
 8000f4c:	f013 fc96 	bl	801487c <iprintf>
		while(op_mode_current != BNO055_OPERATION_MODE_NDOF){
 8000f50:	e016      	b.n	8000f80 <BNO055_Init+0x8c>
		    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8000f52:	200c      	movs	r0, #12
 8000f54:	f7ff fe26 	bl	8000ba4 <bno055_set_operation_mode>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f64:	6013      	str	r3, [r2, #0]
		    comres += bno055_get_operation_mode(&op_mode_current);
 8000f66:	4816      	ldr	r0, [pc, #88]	@ (8000fc0 <BNO055_Init+0xcc>)
 8000f68:	f7ff fdda 	bl	8000b20 <bno055_get_operation_mode>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f78:	6013      	str	r3, [r2, #0]
		    HAL_Delay(250);
 8000f7a:	20fa      	movs	r0, #250	@ 0xfa
 8000f7c:	f001 fd58 	bl	8002a30 <HAL_Delay>
		while(op_mode_current != BNO055_OPERATION_MODE_NDOF){
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <BNO055_Init+0xcc>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	d1e4      	bne.n	8000f52 <BNO055_Init+0x5e>
		}

		printf("Success! \n");
 8000f88:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <BNO055_Init+0xd0>)
 8000f8a:	f013 fcdf 	bl	801494c <puts>

	    HAL_Delay(1000);
 8000f8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f92:	f001 fd4d 	bl	8002a30 <HAL_Delay>
//			printf("BNO Units configuration failed\r\n", comres);
//		}



	return (int8_t)comres;
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <BNO055_Init+0xc0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b25b      	sxtb	r3, r3
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	24000330 	.word	0x24000330
 8000fa8:	08000e7d 	.word	0x08000e7d
 8000fac:	08000e29 	.word	0x08000e29
 8000fb0:	08000edd 	.word	0x08000edd
 8000fb4:	24000028 	.word	0x24000028
 8000fb8:	24000549 	.word	0x24000549
 8000fbc:	08016874 	.word	0x08016874
 8000fc0:	24000548 	.word	0x24000548
 8000fc4:	080168a0 	.word	0x080168a0

08000fc8 <waitForDeviceRdy>:
static uint16_t packetLength = 0;

// Global device context
BNO086 bno086_dev;

void waitForDeviceRdy(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) != GPIO_PIN_RESET){
 8000fcc:	bf00      	nop
 8000fce:	2110      	movs	r1, #16
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <waitForDeviceRdy+0x1c>)
 8000fd2:	f002 f895 	bl	8003100 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f8      	bne.n	8000fce <waitForDeviceRdy+0x6>
		;
	}
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	58020400 	.word	0x58020400

08000fe8 <BNO080_Begin>:

// Initialization and configuration

bool BNO080_Begin(uint8_t deviceAddress, uint8_t intPin)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	71bb      	strb	r3, [r7, #6]
    // Wait for device ready
    waitForDeviceRdy();
 8000ff8:	f7ff ffe6 	bl	8000fc8 <waitForDeviceRdy>

    // Store the I2C address (STM32 HAL uses 8-bit addresses)
    bno086_dev.deviceAddress = deviceAddress << 1;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b2d      	ldr	r3, [pc, #180]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001004:	711a      	strb	r2, [r3, #4]

    // Assign the I2C handle
    bno086_dev.hi2c = &hi2c1;
 8001006:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001008:	4a2c      	ldr	r2, [pc, #176]	@ (80010bc <BNO080_Begin+0xd4>)
 800100a:	601a      	str	r2, [r3, #0]

    // Initialize sequence numbers
    memset(bno086_dev.sequenceNumber, 0, sizeof(bno086_dev.sequenceNumber));
 800100c:	2206      	movs	r2, #6
 800100e:	2100      	movs	r1, #0
 8001010:	482b      	ldr	r0, [pc, #172]	@ (80010c0 <BNO080_Begin+0xd8>)
 8001012:	f013 fd7b 	bl	8014b0c <memset>
    bno086_dev.commandSequenceNumber = 0;
 8001016:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f

    // Initialize Q values (fixed-point scaling factors)
    bno086_dev.rotationVector_Q1 = 14;
 800101e:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001020:	220e      	movs	r2, #14
 8001022:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
    bno086_dev.rotationVectorAccuracy_Q1 = 12;
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001028:	220c      	movs	r2, #12
 800102a:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
    bno086_dev.accelerometer_Q1 = 8;
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001030:	2208      	movs	r2, #8
 8001032:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
    bno086_dev.linear_accelerometer_Q1 = 8;
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001038:	2208      	movs	r2, #8
 800103a:	f8a3 2126 	strh.w	r2, [r3, #294]	@ 0x126
    bno086_dev.gyro_Q1 = 9;
 800103e:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001040:	2209      	movs	r2, #9
 8001042:	f8a3 2128 	strh.w	r2, [r3, #296]	@ 0x128
    bno086_dev.magnetometer_Q1 = 4;
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001048:	2204      	movs	r2, #4
 800104a:	f8a3 212a 	strh.w	r2, [r3, #298]	@ 0x12a
    bno086_dev.angular_velocity_Q1 = 10;
 800104e:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001050:	220a      	movs	r2, #10
 8001052:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    bno086_dev.gravity_Q1 = 8;
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001058:	2208      	movs	r2, #8
 800105a:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

    // Initialize status flags
    bno086_dev.hasReset = false;
 800105e:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    bno086_dev.printDebug = false;
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

    // Reset the sensor (optional, you can uncomment if needed)
    // BNO080_SoftReset();

    // Check communication with the device
    bno086_dev.shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; // Request the product ID
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001070:	22f9      	movs	r2, #249	@ 0xf9
 8001072:	725a      	strb	r2, [r3, #9]
    bno086_dev.shtpData[1] = 0; // Reserved
 8001074:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <BNO080_Begin+0xd0>)
 8001076:	2200      	movs	r2, #0
 8001078:	729a      	strb	r2, [r3, #10]

    // Transmit packet on CHANNEL_CONTROL (channel 2), 2 bytes
    if (!BNO080_SendPacket(CHANNEL_CONTROL, 2))
 800107a:	2102      	movs	r1, #2
 800107c:	2002      	movs	r0, #2
 800107e:	f000 f8cf 	bl	8001220 <BNO080_SendPacket>
 8001082:	4603      	mov	r3, r0
 8001084:	f083 0301 	eor.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <BNO080_Begin+0xaa>
    {
        return false;
 800108e:	2300      	movs	r3, #0
 8001090:	e00d      	b.n	80010ae <BNO080_Begin+0xc6>
    }

    // Wait for response
    waitForDeviceRdy();
 8001092:	f7ff ff99 	bl	8000fc8 <waitForDeviceRdy>
    if (BNO080_ReceivePacket())
 8001096:	f000 f815 	bl	80010c4 <BNO080_ReceivePacket>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <BNO080_Begin+0xc4>
    {
        if (bno086_dev.shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <BNO080_Begin+0xd0>)
 80010a2:	7a5b      	ldrb	r3, [r3, #9]
 80010a4:	2bf8      	cmp	r3, #248	@ 0xf8
 80010a6:	d101      	bne.n	80010ac <BNO080_Begin+0xc4>
        {
            // Optionally process product ID information
            return true;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <BNO080_Begin+0xc6>
        }
    }

    return false; // Communication failed
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2400054c 	.word	0x2400054c
 80010bc:	2400069c 	.word	0x2400069c
 80010c0:	240005d5 	.word	0x240005d5

080010c4 <BNO080_ReceivePacket>:
    return true;
}

// Modify BNO080_ReceivePacket to wait for data ready
bool BNO080_ReceivePacket(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af02      	add	r7, sp, #8
    uint8_t header[4];
    uint8_t ret;
    uint16_t packetLength;

    // Wait for data ready signal
    waitForDeviceRdy();
 80010ca:	f7ff ff7d 	bl	8000fc8 <waitForDeviceRdy>

    // Read the 4-byte header
    ret = HAL_I2C_Master_Receive(bno086_dev.hi2c, bno086_dev.deviceAddress, header, 4, HAL_MAX_DELAY);
 80010ce:	4b28      	ldr	r3, [pc, #160]	@ (8001170 <BNO080_ReceivePacket+0xac>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <BNO080_ReceivePacket+0xac>)
 80010d4:	791b      	ldrb	r3, [r3, #4]
 80010d6:	4619      	mov	r1, r3
 80010d8:	463a      	mov	r2, r7
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2304      	movs	r3, #4
 80010e2:	f002 f9f3 	bl	80034cc <HAL_I2C_Master_Receive>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <BNO080_ReceivePacket+0x30>
    {
        return false;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e038      	b.n	8001166 <BNO080_ReceivePacket+0xa2>
    }

    // Store the header
    bno086_dev.shtpHeader[0] = header[0];
 80010f4:	783a      	ldrb	r2, [r7, #0]
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <BNO080_ReceivePacket+0xac>)
 80010f8:	715a      	strb	r2, [r3, #5]
    bno086_dev.shtpHeader[1] = header[1];
 80010fa:	787a      	ldrb	r2, [r7, #1]
 80010fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <BNO080_ReceivePacket+0xac>)
 80010fe:	719a      	strb	r2, [r3, #6]
    bno086_dev.shtpHeader[2] = header[2];
 8001100:	78ba      	ldrb	r2, [r7, #2]
 8001102:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <BNO080_ReceivePacket+0xac>)
 8001104:	71da      	strb	r2, [r3, #7]
    bno086_dev.shtpHeader[3] = header[3];
 8001106:	78fa      	ldrb	r2, [r7, #3]
 8001108:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <BNO080_ReceivePacket+0xac>)
 800110a:	721a      	strb	r2, [r3, #8]

    // Calculate the number of data bytes in this packet
    packetLength = ((uint16_t)header[1] << 8) | header[0];
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	783b      	ldrb	r3, [r7, #0]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	80bb      	strh	r3, [r7, #4]
    packetLength &= ~(1 << 15); // Clear the MSbit (continuation bit)
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001122:	80bb      	strh	r3, [r7, #4]

    if (packetLength == 0)
 8001124:	88bb      	ldrh	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <BNO080_ReceivePacket+0x6a>
    {
        // Packet is empty
        return false;
 800112a:	2300      	movs	r3, #0
 800112c:	e01b      	b.n	8001166 <BNO080_ReceivePacket+0xa2>
    }

    packetLength -= 4; // Remove the header bytes from the data count
 800112e:	88bb      	ldrh	r3, [r7, #4]
 8001130:	3b04      	subs	r3, #4
 8001132:	80bb      	strh	r3, [r7, #4]

    // Read the remaining data into shtpData
    if (!BNO080_GetData(packetLength))
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f81c 	bl	8001174 <BNO080_GetData>
 800113c:	4603      	mov	r3, r0
 800113e:	f083 0301 	eor.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <BNO080_ReceivePacket+0x88>
    {
        return false;
 8001148:	2300      	movs	r3, #0
 800114a:	e00c      	b.n	8001166 <BNO080_ReceivePacket+0xa2>
    }

    // Check for reset complete packet
    if (bno086_dev.shtpHeader[2] == CHANNEL_EXECUTABLE && bno086_dev.shtpData[0] == EXECUTABLE_RESET_COMPLETE)
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <BNO080_ReceivePacket+0xac>)
 800114e:	79db      	ldrb	r3, [r3, #7]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d107      	bne.n	8001164 <BNO080_ReceivePacket+0xa0>
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <BNO080_ReceivePacket+0xac>)
 8001156:	7a5b      	ldrb	r3, [r3, #9]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d103      	bne.n	8001164 <BNO080_ReceivePacket+0xa0>
    {
        bno086_dev.hasReset = true;
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <BNO080_ReceivePacket+0xac>)
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    return true;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2400054c 	.word	0x2400054c

08001174 <BNO080_GetData>:


bool BNO080_GetData(uint16_t bytesRemaining)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b091      	sub	sp, #68	@ 0x44
 8001178:	af02      	add	r7, sp, #8
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
    uint16_t dataSpot = 0; // Start at the beginning of shtpData array
 800117e:	2300      	movs	r3, #0
 8001180:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint8_t ret;

    while (bytesRemaining > 0)
 8001182:	e043      	b.n	800120c <BNO080_GetData+0x98>
    {
        uint16_t numberOfBytesToRead = bytesRemaining;
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	86bb      	strh	r3, [r7, #52]	@ 0x34

        // Adjust for I2C buffer limitations if necessary
        uint16_t maxI2CBufferSize = 28; // Adjust based on your MCU's I2C buffer size
 8001188:	231c      	movs	r3, #28
 800118a:	863b      	strh	r3, [r7, #48]	@ 0x30

        if (numberOfBytesToRead > (maxI2CBufferSize - 4))
 800118c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800118e:	1eda      	subs	r2, r3, #3
 8001190:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001192:	429a      	cmp	r2, r3
 8001194:	dc02      	bgt.n	800119c <BNO080_GetData+0x28>
            numberOfBytesToRead = (maxI2CBufferSize - 4);
 8001196:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001198:	3b04      	subs	r3, #4
 800119a:	86bb      	strh	r3, [r7, #52]	@ 0x34

        // Read numberOfBytesToRead + 4 bytes (header + data)
        uint8_t buffer[32]; // Adjust size if needed

        ret = HAL_I2C_Master_Receive(bno086_dev.hi2c, bno086_dev.deviceAddress, buffer, numberOfBytesToRead + 4, HAL_MAX_DELAY);
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <BNO080_GetData+0xa8>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <BNO080_GetData+0xa8>)
 80011a2:	791b      	ldrb	r3, [r3, #4]
 80011a4:	461c      	mov	r4, r3
 80011a6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80011a8:	3304      	adds	r3, #4
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f107 020c 	add.w	r2, r7, #12
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	9100      	str	r1, [sp, #0]
 80011b6:	4621      	mov	r1, r4
 80011b8:	f002 f988 	bl	80034cc <HAL_I2C_Master_Receive>
 80011bc:	4603      	mov	r3, r0
 80011be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (ret != HAL_OK)
 80011c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <BNO080_GetData+0x5a>
        {
            return false;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e022      	b.n	8001214 <BNO080_GetData+0xa0>
        }

        // Skip the first 4 bytes (header)
        for (uint16_t i = 0; i < numberOfBytesToRead; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80011d2:	e013      	b.n	80011fc <BNO080_GetData+0x88>
        {
            if (dataSpot < MAX_PACKET_SIZE)
 80011d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80011d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80011d8:	d80d      	bhi.n	80011f6 <BNO080_GetData+0x82>
            {
                bno086_dev.shtpData[dataSpot++] = buffer[i + 4]; // Skip header
 80011da:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80011dc:	1d1a      	adds	r2, r3, #4
 80011de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80011e0:	1c59      	adds	r1, r3, #1
 80011e2:	86f9      	strh	r1, [r7, #54]	@ 0x36
 80011e4:	4619      	mov	r1, r3
 80011e6:	f102 0338 	add.w	r3, r2, #56	@ 0x38
 80011ea:	443b      	add	r3, r7
 80011ec:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <BNO080_GetData+0xa8>)
 80011f2:	440b      	add	r3, r1
 80011f4:	725a      	strb	r2, [r3, #9]
        for (uint16_t i = 0; i < numberOfBytesToRead; i++)
 80011f6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80011f8:	3301      	adds	r3, #1
 80011fa:	867b      	strh	r3, [r7, #50]	@ 0x32
 80011fc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80011fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001200:	429a      	cmp	r2, r3
 8001202:	d3e7      	bcc.n	80011d4 <BNO080_GetData+0x60>
            }
        }

        bytesRemaining -= numberOfBytesToRead;
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	80fb      	strh	r3, [r7, #6]
    while (bytesRemaining > 0)
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1b8      	bne.n	8001184 <BNO080_GetData+0x10>
    }

    return true;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	373c      	adds	r7, #60	@ 0x3c
 8001218:	46bd      	mov	sp, r7
 800121a:	bd90      	pop	{r4, r7, pc}
 800121c:	2400054c 	.word	0x2400054c

08001220 <BNO080_SendPacket>:



bool BNO080_SendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b0a7      	sub	sp, #156	@ 0x9c
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	460a      	mov	r2, r1
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	4613      	mov	r3, r2
 800122e:	71bb      	strb	r3, [r7, #6]
    uint8_t packet[MAX_PACKET_SIZE];
    uint8_t ret;
    uint16_t len = dataLength + 4; // Add 4 bytes for the header
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	b29b      	uxth	r3, r3
 8001234:	3304      	adds	r3, #4
 8001236:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

    if (len > MAX_PACKET_SIZE)
 800123a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800123e:	2b80      	cmp	r3, #128	@ 0x80
 8001240:	d901      	bls.n	8001246 <BNO080_SendPacket+0x26>
    {
        // Packet too large
        return false;
 8001242:	2300      	movs	r3, #0
 8001244:	e03a      	b.n	80012bc <BNO080_SendPacket+0x9c>
    }

    // Build the packet header
    packet[0] = (len & 0xFF);               // Packet length LSB
 8001246:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800124a:	b2db      	uxtb	r3, r3
 800124c:	733b      	strb	r3, [r7, #12]
    packet[1] = (len >> 8) & 0xFF;          // Packet length MSB
 800124e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	b29b      	uxth	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	737b      	strb	r3, [r7, #13]
    packet[2] = channelNumber;              // Channel number
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	73bb      	strb	r3, [r7, #14]
    packet[3] = bno086_dev.sequenceNumber[channelNumber]++; // Sequence number
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4a18      	ldr	r2, [pc, #96]	@ (80012c4 <BNO080_SendPacket+0xa4>)
 8001262:	441a      	add	r2, r3
 8001264:	f892 2089 	ldrb.w	r2, [r2, #137]	@ 0x89
 8001268:	1c51      	adds	r1, r2, #1
 800126a:	b2c8      	uxtb	r0, r1
 800126c:	4915      	ldr	r1, [pc, #84]	@ (80012c4 <BNO080_SendPacket+0xa4>)
 800126e:	440b      	add	r3, r1
 8001270:	4601      	mov	r1, r0
 8001272:	f883 1089 	strb.w	r1, [r3, #137]	@ 0x89
 8001276:	4613      	mov	r3, r2
 8001278:	73fb      	strb	r3, [r7, #15]

    // Copy the data into the packet
    memcpy(&packet[4], bno086_dev.shtpData, dataLength);
 800127a:	79ba      	ldrb	r2, [r7, #6]
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	3304      	adds	r3, #4
 8001282:	4911      	ldr	r1, [pc, #68]	@ (80012c8 <BNO080_SendPacket+0xa8>)
 8001284:	4618      	mov	r0, r3
 8001286:	f013 fcc0 	bl	8014c0a <memcpy>

    // Send the packet over I2C
    ret = HAL_I2C_Master_Transmit(bno086_dev.hi2c, bno086_dev.deviceAddress, packet, len, HAL_MAX_DELAY);
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <BNO080_SendPacket+0xa4>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <BNO080_SendPacket+0xa4>)
 8001290:	791b      	ldrb	r3, [r3, #4]
 8001292:	461c      	mov	r4, r3
 8001294:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001298:	f107 020c 	add.w	r2, r7, #12
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	9100      	str	r1, [sp, #0]
 80012a2:	4621      	mov	r1, r4
 80012a4:	f001 fffa 	bl	800329c <HAL_I2C_Master_Transmit>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
    if (ret != HAL_OK)
 80012ae:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <BNO080_SendPacket+0x9a>
    {
        // Transmission failed
        return false;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <BNO080_SendPacket+0x9c>
    }

    return true;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3794      	adds	r7, #148	@ 0x94
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	2400054c 	.word	0x2400054c
 80012c8:	24000555 	.word	0x24000555

080012cc <BNO080_EnableRotationVector>:
}

// Sensor enabling functions

void BNO080_EnableRotationVector(uint16_t timeBetweenReports)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
    BNO080_SetFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	4619      	mov	r1, r3
 80012da:	2005      	movs	r0, #5
 80012dc:	f000 f804 	bl	80012e8 <BNO080_SetFeatureCommand>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <BNO080_SetFeatureCommand>:
}

// Command functions

void BNO080_SetFeatureCommand(uint8_t reportID, uint16_t timeBetweenReports)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	80bb      	strh	r3, [r7, #4]
    BNO080_SetFeatureCommand_Specific(reportID, timeBetweenReports, 0);
 80012f8:	88b9      	ldrh	r1, [r7, #4]
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2200      	movs	r2, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f804 	bl	800130c <BNO080_SetFeatureCommand_Specific>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <BNO080_SetFeatureCommand_Specific>:

void BNO080_SetFeatureCommand_Specific(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	603a      	str	r2, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	460b      	mov	r3, r1
 800131a:	80bb      	strh	r3, [r7, #4]
    uint32_t interval_us = timeBetweenReports * 1000; // Convert ms to us
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001322:	fb02 f303 	mul.w	r3, r2, r3
 8001326:	60fb      	str	r3, [r7, #12]

    bno086_dev.shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND; // Report ID
 8001328:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 800132a:	22fd      	movs	r2, #253	@ 0xfd
 800132c:	725a      	strb	r2, [r3, #9]
    bno086_dev.shtpData[1] = reportID;                        // Feature Report ID
 800132e:	4a23      	ldr	r2, [pc, #140]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	7293      	strb	r3, [r2, #10]
    bno086_dev.shtpData[2] = 0;                               // Feature flags
 8001334:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 8001336:	2200      	movs	r2, #0
 8001338:	72da      	strb	r2, [r3, #11]
    bno086_dev.shtpData[3] = 0;                               // Change sensitivity LSB
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 800133c:	2200      	movs	r2, #0
 800133e:	731a      	strb	r2, [r3, #12]
    bno086_dev.shtpData[4] = 0;                               // Change sensitivity MSB
 8001340:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 8001342:	2200      	movs	r2, #0
 8001344:	735a      	strb	r2, [r3, #13]
    bno086_dev.shtpData[5] = (interval_us >> 0) & 0xFF;       // Report interval LSB
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 800134c:	739a      	strb	r2, [r3, #14]
    bno086_dev.shtpData[6] = (interval_us >> 8) & 0xFF;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 8001356:	73da      	strb	r2, [r3, #15]
    bno086_dev.shtpData[7] = (interval_us >> 16) & 0xFF;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	0c1b      	lsrs	r3, r3, #16
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 8001360:	741a      	strb	r2, [r3, #16]
    bno086_dev.shtpData[8] = (interval_us >> 24) & 0xFF;      // Report interval MSB
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	0e1b      	lsrs	r3, r3, #24
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 800136a:	745a      	strb	r2, [r3, #17]
    bno086_dev.shtpData[9] = 0;                               // Batch Interval LSB
 800136c:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 800136e:	2200      	movs	r2, #0
 8001370:	749a      	strb	r2, [r3, #18]
    bno086_dev.shtpData[10] = 0;
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 8001374:	2200      	movs	r2, #0
 8001376:	74da      	strb	r2, [r3, #19]
    bno086_dev.shtpData[11] = 0;
 8001378:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 800137a:	2200      	movs	r2, #0
 800137c:	751a      	strb	r2, [r3, #20]
    bno086_dev.shtpData[12] = 0;                              // Batch Interval MSB
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 8001380:	2200      	movs	r2, #0
 8001382:	755a      	strb	r2, [r3, #21]
    bno086_dev.shtpData[13] = (specificConfig >> 0) & 0xFF;   // Sensor-specific config LSB
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 800138a:	759a      	strb	r2, [r3, #22]
    bno086_dev.shtpData[14] = (specificConfig >> 8) & 0xFF;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 8001394:	75da      	strb	r2, [r3, #23]
    bno086_dev.shtpData[15] = (specificConfig >> 16) & 0xFF;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	0c1b      	lsrs	r3, r3, #16
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 800139e:	761a      	strb	r2, [r3, #24]
    bno086_dev.shtpData[16] = (specificConfig >> 24) & 0xFF;  // Sensor-specific config MSB
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	0e1b      	lsrs	r3, r3, #24
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <BNO080_SetFeatureCommand_Specific+0xb0>)
 80013a8:	765a      	strb	r2, [r3, #25]

    // Send the packet
    BNO080_SendPacket(CHANNEL_CONTROL, 17);
 80013aa:	2111      	movs	r1, #17
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7ff ff37 	bl	8001220 <BNO080_SendPacket>
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2400054c 	.word	0x2400054c

080013c0 <BNO086_Init>:
// Metadata functions

// Implement the metadata functions as needed...


int8_t BNO086_Init(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	int8_t ret;
	ret = BNO080_Begin(BNO080_DEFAULT_ADDRESS, 255);
 80013c6:	21ff      	movs	r1, #255	@ 0xff
 80013c8:	204b      	movs	r0, #75	@ 0x4b
 80013ca:	f7ff fe0d 	bl	8000fe8 <BNO080_Begin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	if (ret != true) {
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d001      	beq.n	80013de <BNO086_Init+0x1e>
		return 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	e003      	b.n	80013e6 <BNO086_Init+0x26>
	}

	// Enable Rotation Vector reports every 100ms
	    BNO080_EnableRotationVector(100);
 80013de:	2064      	movs	r0, #100	@ 0x64
 80013e0:	f7ff ff74 	bl	80012cc <BNO080_EnableRotationVector>

	return 0;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <MPL3115A2_Init>:
#include <stdio.h>

MPL3115A2 mpl311_dev;
extern I2C_HandleTypeDef hi2c2;

int8_t MPL3115A2_Init() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af04      	add	r7, sp, #16
  mpl311_dev.hi2c = &hi2c2;
 80013f6:	4b2b      	ldr	r3, [pc, #172]	@ (80014a4 <MPL3115A2_Init+0xb4>)
 80013f8:	4a2b      	ldr	r2, [pc, #172]	@ (80014a8 <MPL3115A2_Init+0xb8>)
 80013fa:	601a      	str	r2, [r3, #0]

  // Read WHOAMI register
  uint8_t whoami = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	71fb      	strb	r3, [r7, #7]
  if (HAL_I2C_Mem_Read(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_WHOAMI,
 8001400:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <MPL3115A2_Init+0xb4>)
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	2301      	movs	r3, #1
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	220c      	movs	r2, #12
 8001416:	21c0      	movs	r1, #192	@ 0xc0
 8001418:	f002 fa62 	bl	80038e0 <HAL_I2C_Mem_Read>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <MPL3115A2_Init+0x38>
                       I2C_MEMADD_SIZE_8BIT, &whoami, 1, HAL_MAX_DELAY) != HAL_OK) {
    return -1; // I2C read error
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e039      	b.n	800149c <MPL3115A2_Init+0xac>
  }
  if (whoami != 0xC4) {
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2bc4      	cmp	r3, #196	@ 0xc4
 800142c:	d002      	beq.n	8001434 <MPL3115A2_Init+0x44>
    return -2; // WHOAMI mismatch error
 800142e:	f06f 0301 	mvn.w	r3, #1
 8001432:	e033      	b.n	800149c <MPL3115A2_Init+0xac>
  }

  HAL_Delay(10);
 8001434:	200a      	movs	r0, #10
 8001436:	f001 fafb 	bl	8002a30 <HAL_Delay>
//    }
//    HAL_Delay(10);
//  } while (ctrl_reg1 & MPL3115A2_CTRL_REG1_RST);

  // Set oversampling and altitude mode
  mpl311_dev.currentMode = MPL3115A2_ALTIMETER;
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MPL3115A2_Init+0xb4>)
 800143c:	2201      	movs	r2, #1
 800143e:	711a      	strb	r2, [r3, #4]
  mpl311_dev.ctrl_reg1.reg = MPL3115A2_CTRL_REG1_OS128 | MPL3115A2_CTRL_REG1_ALT;
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MPL3115A2_Init+0xb4>)
 8001442:	22b8      	movs	r2, #184	@ 0xb8
 8001444:	715a      	strb	r2, [r3, #5]
  if (HAL_I2C_Mem_Write(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1,
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MPL3115A2_Init+0xb4>)
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	2301      	movs	r3, #1
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <MPL3115A2_Init+0xbc>)
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	2226      	movs	r2, #38	@ 0x26
 800145c:	21c0      	movs	r1, #192	@ 0xc0
 800145e:	f002 f92b 	bl	80036b8 <HAL_I2C_Mem_Write>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <MPL3115A2_Init+0x7e>
                        I2C_MEMADD_SIZE_8BIT, &(mpl311_dev.ctrl_reg1.reg), 1, HAL_MAX_DELAY) != HAL_OK) {
    return -5; // I2C write error
 8001468:	f06f 0304 	mvn.w	r3, #4
 800146c:	e016      	b.n	800149c <MPL3115A2_Init+0xac>
  }

  // Enable data ready events for pressure/altitude and temperature
  uint8_t pt_data_cfg = MPL3115A2_PT_DATA_CFG_TDEFE | MPL3115A2_PT_DATA_CFG_PDEFE |
 800146e:	2307      	movs	r3, #7
 8001470:	71bb      	strb	r3, [r7, #6]
                        MPL3115A2_PT_DATA_CFG_DREM;
  if (HAL_I2C_Mem_Write(mpl311_dev.hi2c, MPL3115A2_ADDRESS, MPL3115A2_PT_DATA_CFG,
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MPL3115A2_Init+0xb4>)
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	2301      	movs	r3, #1
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	1dbb      	adds	r3, r7, #6
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	2213      	movs	r2, #19
 8001488:	21c0      	movs	r1, #192	@ 0xc0
 800148a:	f002 f915 	bl	80036b8 <HAL_I2C_Mem_Write>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <MPL3115A2_Init+0xaa>
                        I2C_MEMADD_SIZE_8BIT, &pt_data_cfg, 1, HAL_MAX_DELAY) != HAL_OK) {
    return -6; // I2C write error
 8001494:	f06f 0305 	mvn.w	r3, #5
 8001498:	e000      	b.n	800149c <MPL3115A2_Init+0xac>
  }

  return 0; // Initialization successful
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	24000680 	.word	0x24000680
 80014a8:	240006f0 	.word	0x240006f0
 80014ac:	24000685 	.word	0x24000685

080014b0 <ms5607_delay_func>:
#define STANDARD_TEMP 288.15         // Standard temperature at sea level in K
#define PASCAL_TO_HECTOPASCAL 100 	 //Divide the pressure by this number to get hPa
#define PASCAL_TO_KILOPASCAL 1000	 //Divide the pressure by this number to get kPa

void ms5607_delay_func(uint32_t period)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 80014b8:	e008      	b.n	80014cc <ms5607_delay_func+0x1c>
	{
		for(i = 0; i < 64; i++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	e002      	b.n	80014c6 <ms5607_delay_func+0x16>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3301      	adds	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80014ca:	d9f9      	bls.n	80014c0 <ms5607_delay_func+0x10>
	while(period--)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f1      	bne.n	80014ba <ms5607_delay_func+0xa>
		{
			;
		}
	}
//	HAL_Delay(period/1000);
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

  enableCSB();
 80014e8:	f000 f87c 	bl	80015e4 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <MS5607_Init+0x54>)
 80014ee:	221e      	movs	r2, #30
 80014f0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 80014f2:	230a      	movs	r3, #10
 80014f4:	2201      	movs	r2, #1
 80014f6:	4910      	ldr	r1, [pc, #64]	@ (8001538 <MS5607_Init+0x54>)
 80014f8:	4810      	ldr	r0, [pc, #64]	@ (800153c <MS5607_Init+0x58>)
 80014fa:	f009 fbeb 	bl	800acd4 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 80014fe:	bf00      	nop
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MS5607_Init+0x58>)
 8001502:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d0f9      	beq.n	8001500 <MS5607_Init+0x1c>
//  HAL_Delay(3);
  ms5607_delay_func(3000);
 800150c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001510:	f7ff ffce 	bl	80014b0 <ms5607_delay_func>
  disableCSB();
 8001514:	f000 f872 	bl	80015fc <disableCSB>

  MS5607PromRead(&promData);
 8001518:	4809      	ldr	r0, [pc, #36]	@ (8001540 <MS5607_Init+0x5c>)
 800151a:	f000 f813 	bl	8001544 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <MS5607_Init+0x5c>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <MS5607_Init+0x4a>
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MS5607_Init+0x5c>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	2bff      	cmp	r3, #255	@ 0xff
 800152c:	d101      	bne.n	8001532 <MS5607_Init+0x4e>
	 //printf("MS5607 Init fail! \n");
    return MS5607_STATE_FAILED;
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <MS5607_Init+0x50>
  } else {
	  //printf("MS5607 Init success! \n");
    return MS5607_STATE_READY;
 8001532:	2300      	movs	r3, #0
  }
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	24000688 	.word	0x24000688
 800153c:	2400089c 	.word	0x2400089c
 8001540:	2400068c 	.word	0x2400068c

08001544 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 8001550:	2300      	movs	r3, #0
 8001552:	75fb      	strb	r3, [r7, #23]
 8001554:	e01e      	b.n	8001594 <MS5607PromRead+0x50>
    SPITransmitData = PROM_READ(address);
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	b25b      	sxtb	r3, r3
 800155c:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8001560:	b25b      	sxtb	r3, r3
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MS5607PromRead+0x98>)
 8001566:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8001568:	f000 f83c 	bl	80015e4 <enableCSB>
    HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 800156c:	230a      	movs	r3, #10
 800156e:	2201      	movs	r2, #1
 8001570:	491a      	ldr	r1, [pc, #104]	@ (80015dc <MS5607PromRead+0x98>)
 8001572:	481b      	ldr	r0, [pc, #108]	@ (80015e0 <MS5607PromRead+0x9c>)
 8001574:	f009 fbae 	bl	800acd4 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(&hspi4, structPointer, 2, 10);
 8001578:	230a      	movs	r3, #10
 800157a:	2202      	movs	r2, #2
 800157c:	6939      	ldr	r1, [r7, #16]
 800157e:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MS5607PromRead+0x9c>)
 8001580:	f009 fd96 	bl	800b0b0 <HAL_SPI_Receive>
    disableCSB();
 8001584:	f000 f83a 	bl	80015fc <disableCSB>
    structPointer++;
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	3302      	adds	r3, #2
 800158c:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	3301      	adds	r3, #1
 8001592:	75fb      	strb	r3, [r7, #23]
 8001594:	7dfb      	ldrb	r3, [r7, #23]
 8001596:	2b07      	cmp	r3, #7
 8001598:	d9dd      	bls.n	8001556 <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	75fb      	strb	r3, [r7, #23]
 80015a2:	e012      	b.n	80015ca <MS5607PromRead+0x86>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	785a      	ldrb	r2, [r3, #1]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	7afa      	ldrb	r2, [r7, #11]
 80015bc:	701a      	strb	r2, [r3, #0]
    structPointer++;
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	3302      	adds	r3, #2
 80015c2:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	3301      	adds	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	d9e9      	bls.n	80015a4 <MS5607PromRead+0x60>
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	24000688 	.word	0x24000688
 80015e0:	2400089c 	.word	0x2400089c

080015e4 <enableCSB>:
int32_t MS5607GetPressurePa(void){
  return readings.pressure;
}

/* Sets the CS pin */
void enableCSB(void){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2108      	movs	r1, #8
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <enableCSB+0x14>)
 80015ee:	f001 fd9f 	bl	8003130 <HAL_GPIO_WritePin>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	58021000 	.word	0x58021000

080015fc <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2108      	movs	r1, #8
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <disableCSB+0x14>)
 8001606:	f001 fd93 	bl	8003130 <HAL_GPIO_WritePin>
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	58021000 	.word	0x58021000

08001614 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800161c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001620:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800162c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001630:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001634:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800163c:	e000      	b.n	8001640 <ITM_SendChar+0x2c>
    {
      __NOP();
 800163e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001640:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f9      	beq.n	800163e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800164a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
	int i=0;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e009      	b.n	800168c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ffc7 	bl	8001614 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	dbf1      	blt.n	8001678 <_write+0x16>
	}
	return len;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80016a2:	f000 fc09 	bl	8001eb8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a6:	f001 f931 	bl	800290c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016aa:	f000 f81d 	bl	80016e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80016ae:	f000 f89f 	bl	80017f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b2:	f000 faf5 	bl	8001ca0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016b6:	f000 f8b9 	bl	800182c <MX_I2C1_Init>
  MX_I2C2_Init();
 80016ba:	f000 f8f7 	bl	80018ac <MX_I2C2_Init>
  MX_I2C4_Init();
 80016be:	f000 f935 	bl	800192c <MX_I2C4_Init>
  MX_SDMMC1_SD_Init();
 80016c2:	f000 f973 	bl	80019ac <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80016c6:	f000 f993 	bl	80019f0 <MX_SPI1_Init>
  MX_SPI4_Init();
 80016ca:	f000 f9e9 	bl	8001aa0 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80016ce:	f000 fa3d 	bl	8001b4c <MX_USART2_UART_Init>
  MX_USART3_Init();
 80016d2:	f000 fa87 	bl	8001be4 <MX_USART3_Init>
  MX_FATFS_Init();
 80016d6:	f00e f9b5 	bl	800fa44 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80016da:	f011 fe9d 	bl	8013418 <MX_USB_DEVICE_Init>





  SensorManager_Init();
 80016de:	f7fe ffcf 	bl	8000680 <SensorManager_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016e2:	bf00      	nop
 80016e4:	e7fd      	b.n	80016e2 <main+0x44>
	...

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b09c      	sub	sp, #112	@ 0x70
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f2:	224c      	movs	r2, #76	@ 0x4c
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f013 fa08 	bl	8014b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2220      	movs	r2, #32
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f013 fa02 	bl	8014b0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001708:	2002      	movs	r0, #2
 800170a:	f004 f8b3 	bl	8005874 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <SystemClock_Config+0x100>)
 8001714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001716:	4a34      	ldr	r2, [pc, #208]	@ (80017e8 <SystemClock_Config+0x100>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800171e:	4b32      	ldr	r3, [pc, #200]	@ (80017e8 <SystemClock_Config+0x100>)
 8001720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <SystemClock_Config+0x104>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001730:	4a2e      	ldr	r2, [pc, #184]	@ (80017ec <SystemClock_Config+0x104>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b2c      	ldr	r3, [pc, #176]	@ (80017ec <SystemClock_Config+0x104>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001744:	bf00      	nop
 8001746:	4b29      	ldr	r3, [pc, #164]	@ (80017ec <SystemClock_Config+0x104>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800174e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001752:	d1f8      	bne.n	8001746 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001754:	2323      	movs	r3, #35	@ 0x23
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800175e:	2301      	movs	r3, #1
 8001760:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001762:	2340      	movs	r3, #64	@ 0x40
 8001764:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001766:	2301      	movs	r3, #1
 8001768:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	2302      	movs	r3, #2
 800176c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176e:	2302      	movs	r3, #2
 8001770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001772:	2302      	movs	r3, #2
 8001774:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001776:	230c      	movs	r3, #12
 8001778:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800177a:	2302      	movs	r3, #2
 800177c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800177e:	2303      	movs	r3, #3
 8001780:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001782:	2302      	movs	r3, #2
 8001784:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001786:	230c      	movs	r3, #12
 8001788:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800178a:	2302      	movs	r3, #2
 800178c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001796:	4618      	mov	r0, r3
 8001798:	f004 f8b6 	bl	8005908 <HAL_RCC_OscConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80017a2:	f000 fbb5 	bl	8001f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	233f      	movs	r3, #63	@ 0x3f
 80017a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2303      	movs	r3, #3
 80017ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017ba:	2340      	movs	r3, #64	@ 0x40
 80017bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017c4:	2340      	movs	r3, #64	@ 0x40
 80017c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2101      	movs	r1, #1
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 fcf5 	bl	80061bc <HAL_RCC_ClockConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80017d8:	f000 fb9a 	bl	8001f10 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80017dc:	f004 fea4 	bl	8006528 <HAL_RCC_EnableCSS>
}
 80017e0:	bf00      	nop
 80017e2:	3770      	adds	r7, #112	@ 0x70
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	58000400 	.word	0x58000400
 80017ec:	58024800 	.word	0x58024800

080017f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0b0      	sub	sp, #192	@ 0xc0
 80017f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f6:	463b      	mov	r3, r7
 80017f8:	22c0      	movs	r2, #192	@ 0xc0
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f013 f985 	bl	8014b0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001802:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800180e:	2300      	movs	r3, #0
 8001810:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	4618      	mov	r0, r3
 8001816:	f005 f889 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001820:	f000 fb76 	bl	8001f10 <Error_Handler>
  }
}
 8001824:	bf00      	nop
 8001826:	37c0      	adds	r7, #192	@ 0xc0
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <MX_I2C1_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	@ (80018a4 <MX_I2C1_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <MX_I2C1_Init+0x74>)
 8001838:	4a1b      	ldr	r2, [pc, #108]	@ (80018a8 <MX_I2C1_Init+0x7c>)
 800183a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <MX_I2C1_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001842:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <MX_I2C1_Init+0x74>)
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <MX_I2C1_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800184e:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_I2C1_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <MX_I2C1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_I2C1_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <MX_I2C1_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001866:	480e      	ldr	r0, [pc, #56]	@ (80018a0 <MX_I2C1_Init+0x74>)
 8001868:	f001 fc7c 	bl	8003164 <HAL_I2C_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001872:	f000 fb4d 	bl	8001f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	4809      	ldr	r0, [pc, #36]	@ (80018a0 <MX_I2C1_Init+0x74>)
 800187a:	f002 fc99 	bl	80041b0 <HAL_I2CEx_ConfigAnalogFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001884:	f000 fb44 	bl	8001f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_I2C1_Init+0x74>)
 800188c:	f002 fcdb 	bl	8004246 <HAL_I2CEx_ConfigDigitalFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001896:	f000 fb3b 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2400069c 	.word	0x2400069c
 80018a4:	40005400 	.word	0x40005400
 80018a8:	00909fce 	.word	0x00909fce

080018ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001924 <MX_I2C2_Init+0x78>)
 80018b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001928 <MX_I2C2_Init+0x7c>)
 80018ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80018bc:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c2:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c8:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018ce:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018e6:	480e      	ldr	r0, [pc, #56]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018e8:	f001 fc3c 	bl	8003164 <HAL_I2C_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018f2:	f000 fb0d 	bl	8001f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018f6:	2100      	movs	r1, #0
 80018f8:	4809      	ldr	r0, [pc, #36]	@ (8001920 <MX_I2C2_Init+0x74>)
 80018fa:	f002 fc59 	bl	80041b0 <HAL_I2CEx_ConfigAnalogFilter>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001904:	f000 fb04 	bl	8001f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001908:	2100      	movs	r1, #0
 800190a:	4805      	ldr	r0, [pc, #20]	@ (8001920 <MX_I2C2_Init+0x74>)
 800190c:	f002 fc9b 	bl	8004246 <HAL_I2CEx_ConfigDigitalFilter>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001916:	f000 fafb 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	240006f0 	.word	0x240006f0
 8001924:	40005800 	.word	0x40005800
 8001928:	00909fce 	.word	0x00909fce

0800192c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <MX_I2C4_Init+0x74>)
 8001932:	4a1c      	ldr	r2, [pc, #112]	@ (80019a4 <MX_I2C4_Init+0x78>)
 8001934:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909FCE;
 8001936:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <MX_I2C4_Init+0x74>)
 8001938:	4a1b      	ldr	r2, [pc, #108]	@ (80019a8 <MX_I2C4_Init+0x7c>)
 800193a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800193c:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <MX_I2C4_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <MX_I2C4_Init+0x74>)
 8001944:	2201      	movs	r2, #1
 8001946:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001948:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <MX_I2C4_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800194e:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_I2C4_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <MX_I2C4_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <MX_I2C4_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <MX_I2C4_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001966:	480e      	ldr	r0, [pc, #56]	@ (80019a0 <MX_I2C4_Init+0x74>)
 8001968:	f001 fbfc 	bl	8003164 <HAL_I2C_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001972:	f000 facd 	bl	8001f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001976:	2100      	movs	r1, #0
 8001978:	4809      	ldr	r0, [pc, #36]	@ (80019a0 <MX_I2C4_Init+0x74>)
 800197a:	f002 fc19 	bl	80041b0 <HAL_I2CEx_ConfigAnalogFilter>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001984:	f000 fac4 	bl	8001f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001988:	2100      	movs	r1, #0
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_I2C4_Init+0x74>)
 800198c:	f002 fc5b 	bl	8004246 <HAL_I2CEx_ConfigDigitalFilter>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001996:	f000 fabb 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	24000744 	.word	0x24000744
 80019a4:	58001c00 	.word	0x58001c00
 80019a8:	00909fce 	.word	0x00909fce

080019ac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80019b0:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019b2:	4a0e      	ldr	r2, [pc, #56]	@ (80019ec <MX_SDMMC1_SD_Init+0x40>)
 80019b4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019c8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  HAL_SD_Init(&hsd1);
 80019d6:	4804      	ldr	r0, [pc, #16]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019d8:	f007 fca6 	bl	8009328 <HAL_SD_Init>
  HAL_SD_InitCard(&hsd1);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019de:	f007 fd27 	bl	8009430 <HAL_SD_InitCard>
  //printf("%d \n",ret);
  /* USER CODE END SDMMC1_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	24000798 	.word	0x24000798
 80019ec:	52007000 	.word	0x52007000

080019f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019f4:	4b28      	ldr	r3, [pc, #160]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 80019f6:	4a29      	ldr	r2, [pc, #164]	@ (8001a9c <MX_SPI1_Init+0xac>)
 80019f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019fa:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 80019fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a02:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a08:	4b23      	ldr	r3, [pc, #140]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a0e:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a16:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a20:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a28:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001a2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a34:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001a40:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a54:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a60:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a78:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 8001a86:	f009 f801 	bl	800aa8c <HAL_SPI_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001a90:	f000 fa3e 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	24000814 	.word	0x24000814
 8001a9c:	40013000 	.word	0x40013000

08001aa0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001aa4:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001aa6:	4a28      	ldr	r2, [pc, #160]	@ (8001b48 <MX_SPI4_Init+0xa8>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001aaa:	4b26      	ldr	r3, [pc, #152]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001aac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ab0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ab2:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001aba:	2203      	movs	r2, #3
 8001abc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001abe:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001acc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ad0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001af2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001af6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <MX_SPI4_Init+0xa4>)
 8001b30:	f008 ffac 	bl	800aa8c <HAL_SPI_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001b3a:	f000 f9e9 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2400089c 	.word	0x2400089c
 8001b48:	40013400 	.word	0x40013400

08001b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b52:	4a23      	ldr	r2, [pc, #140]	@ (8001be0 <MX_USART2_UART_Init+0x94>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b94:	4811      	ldr	r0, [pc, #68]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001b96:	f009 fde6 	bl	800b766 <HAL_UART_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ba0:	f000 f9b6 	bl	8001f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001ba8:	f00a fdef 	bl	800c78a <HAL_UARTEx_SetTxFifoThreshold>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001bb2:	f000 f9ad 	bl	8001f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4808      	ldr	r0, [pc, #32]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001bba:	f00a fe24 	bl	800c806 <HAL_UARTEx_SetRxFifoThreshold>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc4:	f000 f9a4 	bl	8001f10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bc8:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <MX_USART2_UART_Init+0x90>)
 8001bca:	f00a fda5 	bl	800c718 <HAL_UARTEx_DisableFifoMode>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd4:	f000 f99c 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	24000924 	.word	0x24000924
 8001be0:	40004400 	.word	0x40004400

08001be4 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001be8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001bea:	4a2c      	ldr	r2, [pc, #176]	@ (8001c9c <MX_USART3_Init+0xb8>)
 8001bec:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001bee:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001bf6:	4b28      	ldr	r3, [pc, #160]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001bfc:	4b26      	ldr	r3, [pc, #152]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001c02:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001c08:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001c0e:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001c14:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001c2c:	481a      	ldr	r0, [pc, #104]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c2e:	f00a fe77 	bl	800c920 <HAL_USART_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8001c38:	f000 f96a 	bl	8001f10 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4816      	ldr	r0, [pc, #88]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c40:	f00b fd1c 	bl	800d67c <HAL_USARTEx_SetTxFifoThreshold>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8001c4a:	f000 f961 	bl	8001f10 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4811      	ldr	r0, [pc, #68]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c52:	f00b fd51 	bl	800d6f8 <HAL_USARTEx_SetRxFifoThreshold>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8001c5c:	f000 f958 	bl	8001f10 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8001c60:	2100      	movs	r1, #0
 8001c62:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c64:	f00b fc94 	bl	800d590 <HAL_USARTEx_ConfigNSS>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8001c6e:	f000 f94f 	bl	8001f10 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001c72:	4809      	ldr	r0, [pc, #36]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c74:	f00b fcc9 	bl	800d60a <HAL_USARTEx_DisableFifoMode>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8001c7e:	f000 f947 	bl	8001f10 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <MX_USART3_Init+0xb4>)
 8001c84:	f00b fc2f 	bl	800d4e6 <HAL_USARTEx_EnableSlaveMode>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8001c8e:	f000 f93f 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	240009b8 	.word	0x240009b8
 8001c9c:	40004800 	.word	0x40004800

08001ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	@ 0x30
 8001ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbc:	4a78      	ldr	r2, [pc, #480]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001cbe:	f043 0310 	orr.w	r3, r3, #16
 8001cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc6:	4b76      	ldr	r3, [pc, #472]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd4:	4b72      	ldr	r3, [pc, #456]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cda:	4a71      	ldr	r2, [pc, #452]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce4:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf2:	4b6b      	ldr	r3, [pc, #428]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf8:	4a69      	ldr	r2, [pc, #420]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d02:	4b67      	ldr	r3, [pc, #412]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b63      	ldr	r3, [pc, #396]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d16:	4a62      	ldr	r2, [pc, #392]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d20:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d34:	4a5a      	ldr	r2, [pc, #360]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3e:	4b58      	ldr	r3, [pc, #352]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4c:	4b54      	ldr	r3, [pc, #336]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d52:	4a53      	ldr	r2, [pc, #332]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d5c:	4b50      	ldr	r3, [pc, #320]	@ (8001ea0 <MX_GPIO_Init+0x200>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2108      	movs	r1, #8
 8001d6e:	484d      	ldr	r0, [pc, #308]	@ (8001ea4 <MX_GPIO_Init+0x204>)
 8001d70:	f001 f9de 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5607_ON_GPIO_Port, MS5607_ON_Pin, GPIO_PIN_SET);
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d7a:	484b      	ldr	r0, [pc, #300]	@ (8001ea8 <MX_GPIO_Init+0x208>)
 8001d7c:	f001 f9d8 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADXL375_ON_Pin|BNO055_ON_Pin, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	f248 0108 	movw	r1, #32776	@ 0x8008
 8001d86:	4849      	ldr	r0, [pc, #292]	@ (8001eac <MX_GPIO_Init+0x20c>)
 8001d88:	f001 f9d2 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2110      	movs	r1, #16
 8001d90:	4845      	ldr	r0, [pc, #276]	@ (8001ea8 <MX_GPIO_Init+0x208>)
 8001d92:	f001 f9cd 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MPL311_ON_Pin|BNO086_ON_Pin, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001d9c:	4841      	ldr	r0, [pc, #260]	@ (8001ea4 <MX_GPIO_Init+0x204>)
 8001d9e:	f001 f9c7 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001da8:	4841      	ldr	r0, [pc, #260]	@ (8001eb0 <MX_GPIO_Init+0x210>)
 8001daa:	f001 f9c1 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2110      	movs	r1, #16
 8001db2:	4840      	ldr	r0, [pc, #256]	@ (8001eb4 <MX_GPIO_Init+0x214>)
 8001db4:	f001 f9bc 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS_Pin MPL311_ON_Pin BNO086_ON_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|MPL311_ON_Pin|BNO086_ON_Pin;
 8001db8:	f244 030a 	movw	r3, #16394	@ 0x400a
 8001dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4834      	ldr	r0, [pc, #208]	@ (8001ea4 <MX_GPIO_Init+0x204>)
 8001dd2:	f000 ffe5 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS5607_ON_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = MS5607_ON_Pin|SPI1_CS_Pin;
 8001dd6:	f242 0310 	movw	r3, #8208	@ 0x2010
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	482e      	ldr	r0, [pc, #184]	@ (8001ea8 <MX_GPIO_Init+0x208>)
 8001df0:	f000 ffd6 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4829      	ldr	r0, [pc, #164]	@ (8001eac <MX_GPIO_Init+0x20c>)
 8001e08:	f000 ffca 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_ON_Pin BNO055_ON_Pin */
  GPIO_InitStruct.Pin = ADXL375_ON_Pin|BNO055_ON_Pin;
 8001e0c:	f248 0308 	movw	r3, #32776	@ 0x8008
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	4821      	ldr	r0, [pc, #132]	@ (8001eac <MX_GPIO_Init+0x20c>)
 8001e26:	f000 ffbb 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8001e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e30:	2301      	movs	r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	481b      	ldr	r0, [pc, #108]	@ (8001eb0 <MX_GPIO_Init+0x210>)
 8001e44:	f000 ffac 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4813      	ldr	r0, [pc, #76]	@ (8001eac <MX_GPIO_Init+0x20c>)
 8001e5e:	f000 ff9f 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8001e62:	2310      	movs	r3, #16
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	480e      	ldr	r0, [pc, #56]	@ (8001eb4 <MX_GPIO_Init+0x214>)
 8001e7a:	f000 ff91 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO086_RDY_Pin */
  GPIO_InitStruct.Pin = BNO086_RDY_Pin;
 8001e7e:	2310      	movs	r3, #16
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BNO086_RDY_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4807      	ldr	r0, [pc, #28]	@ (8001eb0 <MX_GPIO_Init+0x210>)
 8001e92:	f000 ff85 	bl	8002da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e96:	bf00      	nop
 8001e98:	3730      	adds	r7, #48	@ 0x30
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	58024400 	.word	0x58024400
 8001ea4:	58021000 	.word	0x58021000
 8001ea8:	58020800 	.word	0x58020800
 8001eac:	58020000 	.word	0x58020000
 8001eb0:	58020400 	.word	0x58020400
 8001eb4:	58020c00 	.word	0x58020c00

08001eb8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001eca:	f000 fef1 	bl	8002cb0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001eda:	231f      	movs	r3, #31
 8001edc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001ede:	2387      	movs	r3, #135	@ 0x87
 8001ee0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001eea:	2301      	movs	r3, #1
 8001eec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001efa:	463b      	mov	r3, r7
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 ff0f 	bl	8002d20 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f02:	2004      	movs	r0, #4
 8001f04:	f000 feec 	bl	8002ce0 <HAL_MPU_Enable>

}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <Error_Handler+0x8>

08001f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_MspInit+0x30>)
 8001f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f28:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <HAL_MspInit+0x30>)
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_MspInit+0x30>)
 8001f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	58024400 	.word	0x58024400

08001f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0be      	sub	sp, #248	@ 0xf8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 0320 	add.w	r3, r7, #32
 8001f6c:	22c0      	movs	r2, #192	@ 0xc0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f012 fdcb 	bl	8014b0c <memset>
  if(hi2c->Instance==I2C1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a73      	ldr	r2, [pc, #460]	@ (8002148 <HAL_I2C_MspInit+0x1f8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d146      	bne.n	800200e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f80:	f04f 0208 	mov.w	r2, #8
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f92:	f107 0320 	add.w	r3, r7, #32
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fcc8 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001fa2:	f7ff ffb5 	bl	8001f10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b69      	ldr	r3, [pc, #420]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fac:	4a67      	ldr	r2, [pc, #412]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb6:	4b65      	ldr	r3, [pc, #404]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc4:	23c0      	movs	r3, #192	@ 0xc0
 8001fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fca:	2312      	movs	r3, #18
 8001fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4859      	ldr	r0, [pc, #356]	@ (8002150 <HAL_I2C_MspInit+0x200>)
 8001fea:	f000 fed9 	bl	8002da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fee:	4b57      	ldr	r3, [pc, #348]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8001ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ff4:	4a55      	ldr	r2, [pc, #340]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8001ff6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ffe:	4b53      	ldr	r3, [pc, #332]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8002000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800200c:	e098      	b.n	8002140 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a50      	ldr	r2, [pc, #320]	@ (8002154 <HAL_I2C_MspInit+0x204>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d147      	bne.n	80020a8 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002018:	f04f 0208 	mov.w	r2, #8
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202a:	f107 0320 	add.w	r3, r7, #32
 800202e:	4618      	mov	r0, r3
 8002030:	f004 fc7c 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800203a:	f7ff ff69 	bl	8001f10 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	4b43      	ldr	r3, [pc, #268]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002044:	4a41      	ldr	r2, [pc, #260]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800204e:	4b3f      	ldr	r3, [pc, #252]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800205c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002060:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002064:	2312      	movs	r3, #18
 8002066:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002076:	2304      	movs	r3, #4
 8002078:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002080:	4619      	mov	r1, r3
 8002082:	4833      	ldr	r0, [pc, #204]	@ (8002150 <HAL_I2C_MspInit+0x200>)
 8002084:	f000 fe8c 	bl	8002da0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002088:	4b30      	ldr	r3, [pc, #192]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 800208a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800208e:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8002090:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002094:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002098:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 800209a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800209e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
}
 80020a6:	e04b      	b.n	8002140 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C4)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002158 <HAL_I2C_MspInit+0x208>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d146      	bne.n	8002140 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80020b2:	f04f 0210 	mov.w	r2, #16
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c4:	f107 0320 	add.w	r3, r7, #32
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fc2f 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 80020d4:	f7ff ff1c 	bl	8001f10 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d8:	4b1c      	ldr	r3, [pc, #112]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 80020da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020de:	4a1b      	ldr	r2, [pc, #108]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e8:	4b18      	ldr	r3, [pc, #96]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 80020ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80020f6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80020fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fe:	2312      	movs	r3, #18
 8002100:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002110:	2304      	movs	r3, #4
 8002112:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002116:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800211a:	4619      	mov	r1, r3
 800211c:	480f      	ldr	r0, [pc, #60]	@ (800215c <HAL_I2C_MspInit+0x20c>)
 800211e:	f000 fe3f 	bl	8002da0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002122:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8002124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002128:	4a08      	ldr	r2, [pc, #32]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 800212a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800212e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_I2C_MspInit+0x1fc>)
 8002134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
}
 8002140:	bf00      	nop
 8002142:	37f8      	adds	r7, #248	@ 0xf8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40005400 	.word	0x40005400
 800214c:	58024400 	.word	0x58024400
 8002150:	58020400 	.word	0x58020400
 8002154:	40005800 	.word	0x40005800
 8002158:	58001c00 	.word	0x58001c00
 800215c:	58020c00 	.word	0x58020c00

08002160 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0bc      	sub	sp, #240	@ 0xf0
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002178:	f107 0318 	add.w	r3, r7, #24
 800217c:	22c0      	movs	r2, #192	@ 0xc0
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f012 fcc3 	bl	8014b0c <memset>
  if(hsd->Instance==SDMMC1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a38      	ldr	r2, [pc, #224]	@ (800226c <HAL_SD_MspInit+0x10c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d169      	bne.n	8002264 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002190:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800219c:	2300      	movs	r3, #0
 800219e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a0:	f107 0318 	add.w	r3, r7, #24
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fbc1 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80021b0:	f7ff feae 	bl	8001f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80021b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002270 <HAL_SD_MspInit+0x110>)
 80021b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002270 <HAL_SD_MspInit+0x110>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80021c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <HAL_SD_MspInit+0x110>)
 80021c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d2:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <HAL_SD_MspInit+0x110>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	4a25      	ldr	r2, [pc, #148]	@ (8002270 <HAL_SD_MspInit+0x110>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021e2:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <HAL_SD_MspInit+0x110>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002270 <HAL_SD_MspInit+0x110>)
 80021f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002270 <HAL_SD_MspInit+0x110>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <HAL_SD_MspInit+0x110>)
 8002202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800220e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002212:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002228:	230c      	movs	r3, #12
 800222a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002232:	4619      	mov	r1, r3
 8002234:	480f      	ldr	r0, [pc, #60]	@ (8002274 <HAL_SD_MspInit+0x114>)
 8002236:	f000 fdb3 	bl	8002da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800223a:	2304      	movs	r3, #4
 800223c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002252:	230c      	movs	r3, #12
 8002254:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002258:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800225c:	4619      	mov	r1, r3
 800225e:	4806      	ldr	r0, [pc, #24]	@ (8002278 <HAL_SD_MspInit+0x118>)
 8002260:	f000 fd9e 	bl	8002da0 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002264:	bf00      	nop
 8002266:	37f0      	adds	r7, #240	@ 0xf0
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	52007000 	.word	0x52007000
 8002270:	58024400 	.word	0x58024400
 8002274:	58020800 	.word	0x58020800
 8002278:	58020c00 	.word	0x58020c00

0800227c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b0bc      	sub	sp, #240	@ 0xf0
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002294:	f107 0318 	add.w	r3, r7, #24
 8002298:	22c0      	movs	r2, #192	@ 0xc0
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f012 fc35 	bl	8014b0c <memset>
  if(hspi->Instance==SPI1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a4c      	ldr	r2, [pc, #304]	@ (80023d8 <HAL_SPI_MspInit+0x15c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d146      	bne.n	800233a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80022b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022be:	f107 0318 	add.w	r3, r7, #24
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 fb32 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80022ce:	f7ff fe1f 	bl	8001f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022d2:	4b42      	ldr	r3, [pc, #264]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 80022d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022d8:	4a40      	ldr	r2, [pc, #256]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 80022da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022e2:	4b3e      	ldr	r3, [pc, #248]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 80022e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	4b3a      	ldr	r3, [pc, #232]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f6:	4a39      	ldr	r2, [pc, #228]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002300:	4b36      	ldr	r3, [pc, #216]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800230e:	23e0      	movs	r3, #224	@ 0xe0
 8002310:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002326:	2305      	movs	r3, #5
 8002328:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002330:	4619      	mov	r1, r3
 8002332:	482b      	ldr	r0, [pc, #172]	@ (80023e0 <HAL_SPI_MspInit+0x164>)
 8002334:	f000 fd34 	bl	8002da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002338:	e049      	b.n	80023ce <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI4)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a29      	ldr	r2, [pc, #164]	@ (80023e4 <HAL_SPI_MspInit+0x168>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d144      	bne.n	80023ce <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002350:	2300      	movs	r3, #0
 8002352:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002354:	f107 0318 	add.w	r3, r7, #24
 8002358:	4618      	mov	r0, r3
 800235a:	f004 fae7 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002364:	f7ff fdd4 	bl	8001f10 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002368:	4b1c      	ldr	r3, [pc, #112]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 800236a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800236e:	4a1b      	ldr	r2, [pc, #108]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 8002370:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002374:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002378:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 800237a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800237e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238c:	4a13      	ldr	r2, [pc, #76]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002396:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_SPI_MspInit+0x160>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80023a4:	2364      	movs	r3, #100	@ 0x64
 80023a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80023bc:	2305      	movs	r3, #5
 80023be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023c6:	4619      	mov	r1, r3
 80023c8:	4807      	ldr	r0, [pc, #28]	@ (80023e8 <HAL_SPI_MspInit+0x16c>)
 80023ca:	f000 fce9 	bl	8002da0 <HAL_GPIO_Init>
}
 80023ce:	bf00      	nop
 80023d0:	37f0      	adds	r7, #240	@ 0xf0
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40013000 	.word	0x40013000
 80023dc:	58024400 	.word	0x58024400
 80023e0:	58020000 	.word	0x58020000
 80023e4:	40013400 	.word	0x40013400
 80023e8:	58021000 	.word	0x58021000

080023ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0ba      	sub	sp, #232	@ 0xe8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	22c0      	movs	r2, #192	@ 0xc0
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f012 fb7d 	bl	8014b0c <memset>
  if(huart->Instance==USART2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a26      	ldr	r2, [pc, #152]	@ (80024b0 <HAL_UART_MspInit+0xc4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d145      	bne.n	80024a8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800241c:	f04f 0202 	mov.w	r2, #2
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	4618      	mov	r0, r3
 8002434:	f004 fa7a 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800243e:	f7ff fd67 	bl	8001f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <HAL_UART_MspInit+0xc8>)
 8002444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002448:	4a1a      	ldr	r2, [pc, #104]	@ (80024b4 <HAL_UART_MspInit+0xc8>)
 800244a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800244e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002452:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <HAL_UART_MspInit+0xc8>)
 8002454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <HAL_UART_MspInit+0xc8>)
 8002462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002466:	4a13      	ldr	r2, [pc, #76]	@ (80024b4 <HAL_UART_MspInit+0xc8>)
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002470:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_UART_MspInit+0xc8>)
 8002472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800247e:	2360      	movs	r3, #96	@ 0x60
 8002480:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002496:	2307      	movs	r3, #7
 8002498:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800249c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <HAL_UART_MspInit+0xcc>)
 80024a4:	f000 fc7c 	bl	8002da0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80024a8:	bf00      	nop
 80024aa:	37e8      	adds	r7, #232	@ 0xe8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40004400 	.word	0x40004400
 80024b4:	58024400 	.word	0x58024400
 80024b8:	58020c00 	.word	0x58020c00

080024bc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0bc      	sub	sp, #240	@ 0xf0
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d4:	f107 0318 	add.w	r3, r7, #24
 80024d8:	22c0      	movs	r2, #192	@ 0xc0
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f012 fb15 	bl	8014b0c <memset>
  if(husart->Instance==USART3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a39      	ldr	r2, [pc, #228]	@ (80025cc <HAL_USART_MspInit+0x110>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d16b      	bne.n	80025c4 <HAL_USART_MspInit+0x108>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024ec:	f04f 0202 	mov.w	r2, #2
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fe:	f107 0318 	add.w	r3, r7, #24
 8002502:	4618      	mov	r0, r3
 8002504:	f004 fa12 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 800250e:	f7ff fcff 	bl	8001f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002512:	4b2f      	ldr	r3, [pc, #188]	@ (80025d0 <HAL_USART_MspInit+0x114>)
 8002514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002518:	4a2d      	ldr	r2, [pc, #180]	@ (80025d0 <HAL_USART_MspInit+0x114>)
 800251a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002522:	4b2b      	ldr	r3, [pc, #172]	@ (80025d0 <HAL_USART_MspInit+0x114>)
 8002524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <HAL_USART_MspInit+0x114>)
 8002532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002536:	4a26      	ldr	r2, [pc, #152]	@ (80025d0 <HAL_USART_MspInit+0x114>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002540:	4b23      	ldr	r3, [pc, #140]	@ (80025d0 <HAL_USART_MspInit+0x114>)
 8002542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800254e:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <HAL_USART_MspInit+0x114>)
 8002550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002554:	4a1e      	ldr	r2, [pc, #120]	@ (80025d0 <HAL_USART_MspInit+0x114>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800255e:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <HAL_USART_MspInit+0x114>)
 8002560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800256c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002570:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002586:	2307      	movs	r3, #7
 8002588:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002590:	4619      	mov	r1, r3
 8002592:	4810      	ldr	r0, [pc, #64]	@ (80025d4 <HAL_USART_MspInit+0x118>)
 8002594:	f000 fc04 	bl	8002da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8002598:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 800259c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025b2:	2307      	movs	r3, #7
 80025b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025bc:	4619      	mov	r1, r3
 80025be:	4806      	ldr	r0, [pc, #24]	@ (80025d8 <HAL_USART_MspInit+0x11c>)
 80025c0:	f000 fbee 	bl	8002da0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80025c4:	bf00      	nop
 80025c6:	37f0      	adds	r7, #240	@ 0xf0
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40004800 	.word	0x40004800
 80025d0:	58024400 	.word	0x58024400
 80025d4:	58020400 	.word	0x58020400
 80025d8:	58020c00 	.word	0x58020c00

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80025e0:	f004 f988 	bl	80068f4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <NMI_Handler+0x8>

080025e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <MemManage_Handler+0x4>

080025f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <UsageFault_Handler+0x4>

08002608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002636:	f000 f9db 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002644:	4802      	ldr	r0, [pc, #8]	@ (8002650 <OTG_FS_IRQHandler+0x10>)
 8002646:	f001 ff8b 	bl	8004560 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	24000f14 	.word	0x24000f14

08002654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return 1;
 8002658:	2301      	movs	r3, #1
}
 800265a:	4618      	mov	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_kill>:

int _kill(int pid, int sig)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800266e:	f012 fa9f 	bl	8014bb0 <__errno>
 8002672:	4603      	mov	r3, r0
 8002674:	2216      	movs	r2, #22
 8002676:	601a      	str	r2, [r3, #0]
  return -1;
 8002678:	f04f 33ff 	mov.w	r3, #4294967295
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_exit>:

void _exit (int status)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ffe7 	bl	8002664 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002696:	bf00      	nop
 8002698:	e7fd      	b.n	8002696 <_exit+0x12>

0800269a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e00a      	b.n	80026c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ac:	f3af 8000 	nop.w
 80026b0:	4601      	mov	r1, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	60ba      	str	r2, [r7, #8]
 80026b8:	b2ca      	uxtb	r2, r1
 80026ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3301      	adds	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	dbf0      	blt.n	80026ac <_read+0x12>
  }

  return len;
 80026ca:	687b      	ldr	r3, [r7, #4]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026fc:	605a      	str	r2, [r3, #4]
  return 0;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_isatty>:

int _isatty(int file)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002714:	2301      	movs	r3, #1
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002744:	4a14      	ldr	r2, [pc, #80]	@ (8002798 <_sbrk+0x5c>)
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <_sbrk+0x60>)
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <_sbrk+0x64>)
 800275a:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <_sbrk+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275e:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	429a      	cmp	r2, r3
 800276a:	d207      	bcs.n	800277c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800276c:	f012 fa20 	bl	8014bb0 <__errno>
 8002770:	4603      	mov	r3, r0
 8002772:	220c      	movs	r2, #12
 8002774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	e009      	b.n	8002790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800277c:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	4a05      	ldr	r2, [pc, #20]	@ (80027a0 <_sbrk+0x64>)
 800278c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	24080000 	.word	0x24080000
 800279c:	00000400 	.word	0x00000400
 80027a0:	24000a18 	.word	0x24000a18
 80027a4:	240017c0 	.word	0x240017c0

080027a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027ac:	4b37      	ldr	r3, [pc, #220]	@ (800288c <SystemInit+0xe4>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	4a36      	ldr	r2, [pc, #216]	@ (800288c <SystemInit+0xe4>)
 80027b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027bc:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <SystemInit+0xe8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	2b06      	cmp	r3, #6
 80027c6:	d807      	bhi.n	80027d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027c8:	4b31      	ldr	r3, [pc, #196]	@ (8002890 <SystemInit+0xe8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 030f 	bic.w	r3, r3, #15
 80027d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002890 <SystemInit+0xe8>)
 80027d2:	f043 0307 	orr.w	r3, r3, #7
 80027d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002894 <SystemInit+0xec>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002894 <SystemInit+0xec>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002894 <SystemInit+0xec>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002894 <SystemInit+0xec>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4929      	ldr	r1, [pc, #164]	@ (8002894 <SystemInit+0xec>)
 80027f0:	4b29      	ldr	r3, [pc, #164]	@ (8002898 <SystemInit+0xf0>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027f6:	4b26      	ldr	r3, [pc, #152]	@ (8002890 <SystemInit+0xe8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002802:	4b23      	ldr	r3, [pc, #140]	@ (8002890 <SystemInit+0xe8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 030f 	bic.w	r3, r3, #15
 800280a:	4a21      	ldr	r2, [pc, #132]	@ (8002890 <SystemInit+0xe8>)
 800280c:	f043 0307 	orr.w	r3, r3, #7
 8002810:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <SystemInit+0xec>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002818:	4b1e      	ldr	r3, [pc, #120]	@ (8002894 <SystemInit+0xec>)
 800281a:	2200      	movs	r2, #0
 800281c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800281e:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <SystemInit+0xec>)
 8002820:	2200      	movs	r2, #0
 8002822:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <SystemInit+0xec>)
 8002826:	4a1d      	ldr	r2, [pc, #116]	@ (800289c <SystemInit+0xf4>)
 8002828:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800282a:	4b1a      	ldr	r3, [pc, #104]	@ (8002894 <SystemInit+0xec>)
 800282c:	4a1c      	ldr	r2, [pc, #112]	@ (80028a0 <SystemInit+0xf8>)
 800282e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <SystemInit+0xec>)
 8002832:	4a1c      	ldr	r2, [pc, #112]	@ (80028a4 <SystemInit+0xfc>)
 8002834:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002836:	4b17      	ldr	r3, [pc, #92]	@ (8002894 <SystemInit+0xec>)
 8002838:	2200      	movs	r2, #0
 800283a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800283c:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <SystemInit+0xec>)
 800283e:	4a19      	ldr	r2, [pc, #100]	@ (80028a4 <SystemInit+0xfc>)
 8002840:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002842:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <SystemInit+0xec>)
 8002844:	2200      	movs	r2, #0
 8002846:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <SystemInit+0xec>)
 800284a:	4a16      	ldr	r2, [pc, #88]	@ (80028a4 <SystemInit+0xfc>)
 800284c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800284e:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <SystemInit+0xec>)
 8002850:	2200      	movs	r2, #0
 8002852:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002854:	4b0f      	ldr	r3, [pc, #60]	@ (8002894 <SystemInit+0xec>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0e      	ldr	r2, [pc, #56]	@ (8002894 <SystemInit+0xec>)
 800285a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800285e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <SystemInit+0xec>)
 8002862:	2200      	movs	r2, #0
 8002864:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <SystemInit+0x100>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <SystemInit+0x104>)
 800286c:	4013      	ands	r3, r2
 800286e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002872:	d202      	bcs.n	800287a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002874:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <SystemInit+0x108>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800287a:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <SystemInit+0x10c>)
 800287c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002880:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	52002000 	.word	0x52002000
 8002894:	58024400 	.word	0x58024400
 8002898:	eaf6ed7f 	.word	0xeaf6ed7f
 800289c:	02020200 	.word	0x02020200
 80028a0:	01ff0000 	.word	0x01ff0000
 80028a4:	01010280 	.word	0x01010280
 80028a8:	5c001000 	.word	0x5c001000
 80028ac:	ffff0000 	.word	0xffff0000
 80028b0:	51008108 	.word	0x51008108
 80028b4:	52004000 	.word	0x52004000

080028b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028bc:	f7ff ff74 	bl	80027a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c0:	480c      	ldr	r0, [pc, #48]	@ (80028f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028c2:	490d      	ldr	r1, [pc, #52]	@ (80028f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028c4:	4a0d      	ldr	r2, [pc, #52]	@ (80028fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c8:	e002      	b.n	80028d0 <LoopCopyDataInit>

080028ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ce:	3304      	adds	r3, #4

080028d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d4:	d3f9      	bcc.n	80028ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002900 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002904 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028dc:	e001      	b.n	80028e2 <LoopFillZerobss>

080028de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e0:	3204      	adds	r2, #4

080028e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e4:	d3fb      	bcc.n	80028de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028e6:	f012 f969 	bl	8014bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ea:	f7fe fed8 	bl	800169e <main>
  bx  lr
 80028ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80028f8:	240002f8 	.word	0x240002f8
  ldr r2, =_sidata
 80028fc:	08016ea0 	.word	0x08016ea0
  ldr r2, =_sbss
 8002900:	240002f8 	.word	0x240002f8
  ldr r4, =_ebss
 8002904:	240017bc 	.word	0x240017bc

08002908 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002908:	e7fe      	b.n	8002908 <ADC3_IRQHandler>
	...

0800290c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002912:	2003      	movs	r0, #3
 8002914:	f000 f98c 	bl	8002c30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002918:	f003 fe16 	bl	8006548 <HAL_RCC_GetSysClockFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <HAL_Init+0x68>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	4913      	ldr	r1, [pc, #76]	@ (8002978 <HAL_Init+0x6c>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002936:	4b0f      	ldr	r3, [pc, #60]	@ (8002974 <HAL_Init+0x68>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	4a0e      	ldr	r2, [pc, #56]	@ (8002978 <HAL_Init+0x6c>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	4a0b      	ldr	r2, [pc, #44]	@ (800297c <HAL_Init+0x70>)
 800294e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002950:	4a0b      	ldr	r2, [pc, #44]	@ (8002980 <HAL_Init+0x74>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002956:	200f      	movs	r0, #15
 8002958:	f000 f814 	bl	8002984 <HAL_InitTick>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e002      	b.n	800296c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002966:	f7ff fad9 	bl	8001f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	58024400 	.word	0x58024400
 8002978:	08016a9c 	.word	0x08016a9c
 800297c:	24000030 	.word	0x24000030
 8002980:	2400002c 	.word	0x2400002c

08002984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800298c:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_InitTick+0x60>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e021      	b.n	80029dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002998:	4b13      	ldr	r3, [pc, #76]	@ (80029e8 <HAL_InitTick+0x64>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <HAL_InitTick+0x60>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f971 	bl	8002c96 <HAL_SYSTICK_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00e      	b.n	80029dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d80a      	bhi.n	80029da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c4:	2200      	movs	r2, #0
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f000 f93b 	bl	8002c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d0:	4a06      	ldr	r2, [pc, #24]	@ (80029ec <HAL_InitTick+0x68>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	24000038 	.word	0x24000038
 80029e8:	2400002c 	.word	0x2400002c
 80029ec:	24000034 	.word	0x24000034

080029f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029f4:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_IncTick+0x20>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_IncTick+0x24>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4a04      	ldr	r2, [pc, #16]	@ (8002a14 <HAL_IncTick+0x24>)
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	24000038 	.word	0x24000038
 8002a14:	24000a1c 	.word	0x24000a1c

08002a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <HAL_GetTick+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	24000a1c 	.word	0x24000a1c

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff ffee 	bl	8002a18 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_Delay+0x44>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffde 	bl	8002a18 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	24000038 	.word	0x24000038

08002a78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a7c:	4b03      	ldr	r3, [pc, #12]	@ (8002a8c <HAL_GetREVID+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0c1b      	lsrs	r3, r3, #16
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	5c001000 	.word	0x5c001000

08002a90 <__NVIC_SetPriorityGrouping>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	@ (8002ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00
 8002ad4:	05fa0000 	.word	0x05fa0000

08002ad8 <__NVIC_GetPriorityGrouping>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_EnableIRQ>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db0b      	blt.n	8002b1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4907      	ldr	r1, [pc, #28]	@ (8002b2c <__NVIC_EnableIRQ+0x38>)
 8002b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2001      	movs	r0, #1
 8002b16:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <__NVIC_SetPriority>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	db0a      	blt.n	8002b5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	490c      	ldr	r1, [pc, #48]	@ (8002b7c <__NVIC_SetPriority+0x4c>)
 8002b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	440b      	add	r3, r1
 8002b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b58:	e00a      	b.n	8002b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4908      	ldr	r1, [pc, #32]	@ (8002b80 <__NVIC_SetPriority+0x50>)
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3b04      	subs	r3, #4
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	761a      	strb	r2, [r3, #24]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <NVIC_EncodePriority>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	@ 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f1c3 0307 	rsb	r3, r3, #7
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	bf28      	it	cs
 8002ba2:	2304      	movcs	r3, #4
 8002ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d902      	bls.n	8002bb4 <NVIC_EncodePriority+0x30>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3b03      	subs	r3, #3
 8002bb2:	e000      	b.n	8002bb6 <NVIC_EncodePriority+0x32>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	43d9      	mvns	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	4313      	orrs	r3, r2
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	@ 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <SysTick_Config>:
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bfc:	d301      	bcc.n	8002c02 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e00f      	b.n	8002c22 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c02:	4a0a      	ldr	r2, [pc, #40]	@ (8002c2c <SysTick_Config+0x40>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0a:	210f      	movs	r1, #15
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	f7ff ff8e 	bl	8002b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c14:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <SysTick_Config+0x40>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1a:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <SysTick_Config+0x40>)
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	e000e010 	.word	0xe000e010

08002c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff29 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c54:	f7ff ff40 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	f7ff ff90 	bl	8002b84 <NVIC_EncodePriority>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff5f 	bl	8002b30 <__NVIC_SetPriority>
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff33 	bl	8002af4 <__NVIC_EnableIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ffa4 	bl	8002bec <SysTick_Config>
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002cb4:	f3bf 8f5f 	dmb	sy
}
 8002cb8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002cba:	4b07      	ldr	r3, [pc, #28]	@ (8002cd8 <HAL_MPU_Disable+0x28>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	4a06      	ldr	r2, [pc, #24]	@ (8002cd8 <HAL_MPU_Disable+0x28>)
 8002cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002cc6:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <HAL_MPU_Disable+0x2c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	605a      	str	r2, [r3, #4]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00
 8002cdc:	e000ed90 	.word	0xe000ed90

08002ce0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d18 <HAL_MPU_Enable+0x38>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_MPU_Enable+0x3c>)
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	4a09      	ldr	r2, [pc, #36]	@ (8002d1c <HAL_MPU_Enable+0x3c>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002cfe:	f3bf 8f4f 	dsb	sy
}
 8002d02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d04:	f3bf 8f6f 	isb	sy
}
 8002d08:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000ed90 	.word	0xe000ed90
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	785a      	ldrb	r2, [r3, #1]
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d9c <HAL_MPU_ConfigRegion+0x7c>)
 8002d2e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002d30:	4b1a      	ldr	r3, [pc, #104]	@ (8002d9c <HAL_MPU_ConfigRegion+0x7c>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	4a19      	ldr	r2, [pc, #100]	@ (8002d9c <HAL_MPU_ConfigRegion+0x7c>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002d3c:	4a17      	ldr	r2, [pc, #92]	@ (8002d9c <HAL_MPU_ConfigRegion+0x7c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7b1b      	ldrb	r3, [r3, #12]
 8002d48:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7adb      	ldrb	r3, [r3, #11]
 8002d4e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7a9b      	ldrb	r3, [r3, #10]
 8002d56:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7b5b      	ldrb	r3, [r3, #13]
 8002d5e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	7b9b      	ldrb	r3, [r3, #14]
 8002d66:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7bdb      	ldrb	r3, [r3, #15]
 8002d6e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7a5b      	ldrb	r3, [r3, #9]
 8002d76:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7a1b      	ldrb	r3, [r3, #8]
 8002d7e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d80:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d88:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d8a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d8c:	6113      	str	r3, [r2, #16]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed90 	.word	0xe000ed90

08002da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	@ 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002dae:	4b89      	ldr	r3, [pc, #548]	@ (8002fd4 <HAL_GPIO_Init+0x234>)
 8002db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002db2:	e194      	b.n	80030de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8186 	beq.w	80030d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d005      	beq.n	8002de4 <HAL_GPIO_Init+0x44>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d130      	bne.n	8002e46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	f003 0201 	and.w	r2, r3, #1
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d017      	beq.n	8002e82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d123      	bne.n	8002ed6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	08da      	lsrs	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3208      	adds	r2, #8
 8002e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	08da      	lsrs	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3208      	adds	r2, #8
 8002ed0:	69b9      	ldr	r1, [r7, #24]
 8002ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 0203 	and.w	r2, r3, #3
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80e0 	beq.w	80030d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f18:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd8 <HAL_GPIO_Init+0x238>)
 8002f1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd8 <HAL_GPIO_Init+0x238>)
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f28:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd8 <HAL_GPIO_Init+0x238>)
 8002f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f36:	4a29      	ldr	r2, [pc, #164]	@ (8002fdc <HAL_GPIO_Init+0x23c>)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	220f      	movs	r2, #15
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a20      	ldr	r2, [pc, #128]	@ (8002fe0 <HAL_GPIO_Init+0x240>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d052      	beq.n	8003008 <HAL_GPIO_Init+0x268>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <HAL_GPIO_Init+0x244>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d031      	beq.n	8002fce <HAL_GPIO_Init+0x22e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe8 <HAL_GPIO_Init+0x248>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d02b      	beq.n	8002fca <HAL_GPIO_Init+0x22a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1d      	ldr	r2, [pc, #116]	@ (8002fec <HAL_GPIO_Init+0x24c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d025      	beq.n	8002fc6 <HAL_GPIO_Init+0x226>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff0 <HAL_GPIO_Init+0x250>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01f      	beq.n	8002fc2 <HAL_GPIO_Init+0x222>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff4 <HAL_GPIO_Init+0x254>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d019      	beq.n	8002fbe <HAL_GPIO_Init+0x21e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff8 <HAL_GPIO_Init+0x258>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_GPIO_Init+0x21a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a19      	ldr	r2, [pc, #100]	@ (8002ffc <HAL_GPIO_Init+0x25c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00d      	beq.n	8002fb6 <HAL_GPIO_Init+0x216>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a18      	ldr	r2, [pc, #96]	@ (8003000 <HAL_GPIO_Init+0x260>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <HAL_GPIO_Init+0x212>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a17      	ldr	r2, [pc, #92]	@ (8003004 <HAL_GPIO_Init+0x264>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_GPIO_Init+0x20e>
 8002faa:	2309      	movs	r3, #9
 8002fac:	e02d      	b.n	800300a <HAL_GPIO_Init+0x26a>
 8002fae:	230a      	movs	r3, #10
 8002fb0:	e02b      	b.n	800300a <HAL_GPIO_Init+0x26a>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	e029      	b.n	800300a <HAL_GPIO_Init+0x26a>
 8002fb6:	2307      	movs	r3, #7
 8002fb8:	e027      	b.n	800300a <HAL_GPIO_Init+0x26a>
 8002fba:	2306      	movs	r3, #6
 8002fbc:	e025      	b.n	800300a <HAL_GPIO_Init+0x26a>
 8002fbe:	2305      	movs	r3, #5
 8002fc0:	e023      	b.n	800300a <HAL_GPIO_Init+0x26a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	e021      	b.n	800300a <HAL_GPIO_Init+0x26a>
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e01f      	b.n	800300a <HAL_GPIO_Init+0x26a>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e01d      	b.n	800300a <HAL_GPIO_Init+0x26a>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e01b      	b.n	800300a <HAL_GPIO_Init+0x26a>
 8002fd2:	bf00      	nop
 8002fd4:	58000080 	.word	0x58000080
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	58000400 	.word	0x58000400
 8002fe0:	58020000 	.word	0x58020000
 8002fe4:	58020400 	.word	0x58020400
 8002fe8:	58020800 	.word	0x58020800
 8002fec:	58020c00 	.word	0x58020c00
 8002ff0:	58021000 	.word	0x58021000
 8002ff4:	58021400 	.word	0x58021400
 8002ff8:	58021800 	.word	0x58021800
 8002ffc:	58021c00 	.word	0x58021c00
 8003000:	58022000 	.word	0x58022000
 8003004:	58022400 	.word	0x58022400
 8003008:	2300      	movs	r3, #0
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	f002 0203 	and.w	r2, r2, #3
 8003010:	0092      	lsls	r2, r2, #2
 8003012:	4093      	lsls	r3, r2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800301a:	4938      	ldr	r1, [pc, #224]	@ (80030fc <HAL_GPIO_Init+0x35c>)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800304e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800307c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	3301      	adds	r3, #1
 80030dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f47f ae63 	bne.w	8002db4 <HAL_GPIO_Init+0x14>
  }
}
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	3724      	adds	r7, #36	@ 0x24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	58000400 	.word	0x58000400

08003100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	887b      	ldrh	r3, [r7, #2]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e001      	b.n	8003122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]
 800313c:	4613      	mov	r3, r2
 800313e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003140:	787b      	ldrb	r3, [r7, #1]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003146:	887a      	ldrh	r2, [r7, #2]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800314c:	e003      	b.n	8003156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	041a      	lsls	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	619a      	str	r2, [r3, #24]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e08b      	b.n	800328e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe fee0 	bl	8001f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	@ 0x24
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d107      	bne.n	80031de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	e006      	b.n	80031ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80031ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d108      	bne.n	8003206 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	e007      	b.n	8003216 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003214:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <HAL_I2C_Init+0x134>)
 8003222:	430b      	orrs	r3, r1
 8003224:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1a      	ldr	r2, [r3, #32]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	02008000 	.word	0x02008000

0800329c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	461a      	mov	r2, r3
 80032a8:	460b      	mov	r3, r1
 80032aa:	817b      	strh	r3, [r7, #10]
 80032ac:	4613      	mov	r3, r2
 80032ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	f040 80fd 	bne.w	80034b8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_I2C_Master_Transmit+0x30>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0f6      	b.n	80034ba <HAL_I2C_Master_Transmit+0x21e>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032d4:	f7ff fba0 	bl	8002a18 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2319      	movs	r3, #25
 80032e0:	2201      	movs	r2, #1
 80032e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fce0 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0e1      	b.n	80034ba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2221      	movs	r2, #33	@ 0x21
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2210      	movs	r2, #16
 8003302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	893a      	ldrh	r2, [r7, #8]
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	2bff      	cmp	r3, #255	@ 0xff
 8003326:	d906      	bls.n	8003336 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	22ff      	movs	r2, #255	@ 0xff
 800332c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800332e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	e007      	b.n	8003346 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003340:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003344:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d024      	beq.n	8003398 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	781a      	ldrb	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003382:	b2db      	uxtb	r3, r3
 8003384:	3301      	adds	r3, #1
 8003386:	b2da      	uxtb	r2, r3
 8003388:	8979      	ldrh	r1, [r7, #10]
 800338a:	4b4e      	ldr	r3, [pc, #312]	@ (80034c4 <HAL_I2C_Master_Transmit+0x228>)
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fedb 	bl	800414c <I2C_TransferConfig>
 8003396:	e066      	b.n	8003466 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339c:	b2da      	uxtb	r2, r3
 800339e:	8979      	ldrh	r1, [r7, #10]
 80033a0:	4b48      	ldr	r3, [pc, #288]	@ (80034c4 <HAL_I2C_Master_Transmit+0x228>)
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fed0 	bl	800414c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033ac:	e05b      	b.n	8003466 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	6a39      	ldr	r1, [r7, #32]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fcd3 	bl	8003d5e <I2C_WaitOnTXISFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07b      	b.n	80034ba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d034      	beq.n	8003466 <HAL_I2C_Master_Transmit+0x1ca>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	d130      	bne.n	8003466 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	2200      	movs	r2, #0
 800340c:	2180      	movs	r1, #128	@ 0x80
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 fc4c 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e04d      	b.n	80034ba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	2bff      	cmp	r3, #255	@ 0xff
 8003426:	d90e      	bls.n	8003446 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	22ff      	movs	r2, #255	@ 0xff
 800342c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	b2da      	uxtb	r2, r3
 8003434:	8979      	ldrh	r1, [r7, #10]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fe84 	bl	800414c <I2C_TransferConfig>
 8003444:	e00f      	b.n	8003466 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003454:	b2da      	uxtb	r2, r3
 8003456:	8979      	ldrh	r1, [r7, #10]
 8003458:	2300      	movs	r3, #0
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fe73 	bl	800414c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d19e      	bne.n	80033ae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	6a39      	ldr	r1, [r7, #32]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fcb9 	bl	8003dec <I2C_WaitOnSTOPFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e01a      	b.n	80034ba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2220      	movs	r2, #32
 800348a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <HAL_I2C_Master_Transmit+0x22c>)
 8003498:	400b      	ands	r3, r1
 800349a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	80002000 	.word	0x80002000
 80034c8:	fe00e800 	.word	0xfe00e800

080034cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	461a      	mov	r2, r3
 80034d8:	460b      	mov	r3, r1
 80034da:	817b      	strh	r3, [r7, #10]
 80034dc:	4613      	mov	r3, r2
 80034de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	f040 80db 	bne.w	80036a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_I2C_Master_Receive+0x30>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0d4      	b.n	80036a6 <HAL_I2C_Master_Receive+0x1da>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003504:	f7ff fa88 	bl	8002a18 <HAL_GetTick>
 8003508:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2319      	movs	r3, #25
 8003510:	2201      	movs	r2, #1
 8003512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fbc8 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0bf      	b.n	80036a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2222      	movs	r2, #34	@ 0x22
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2210      	movs	r2, #16
 8003532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	893a      	ldrh	r2, [r7, #8]
 8003546:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	2bff      	cmp	r3, #255	@ 0xff
 8003556:	d90e      	bls.n	8003576 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	22ff      	movs	r2, #255	@ 0xff
 800355c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003562:	b2da      	uxtb	r2, r3
 8003564:	8979      	ldrh	r1, [r7, #10]
 8003566:	4b52      	ldr	r3, [pc, #328]	@ (80036b0 <HAL_I2C_Master_Receive+0x1e4>)
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fdec 	bl	800414c <I2C_TransferConfig>
 8003574:	e06d      	b.n	8003652 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003584:	b2da      	uxtb	r2, r3
 8003586:	8979      	ldrh	r1, [r7, #10]
 8003588:	4b49      	ldr	r3, [pc, #292]	@ (80036b0 <HAL_I2C_Master_Receive+0x1e4>)
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fddb 	bl	800414c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003596:	e05c      	b.n	8003652 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	6a39      	ldr	r1, [r7, #32]
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 fc69 	bl	8003e74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e07c      	b.n	80036a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d034      	beq.n	8003652 <HAL_I2C_Master_Receive+0x186>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d130      	bne.n	8003652 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	2200      	movs	r2, #0
 80035f8:	2180      	movs	r1, #128	@ 0x80
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fb56 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e04d      	b.n	80036a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	2bff      	cmp	r3, #255	@ 0xff
 8003612:	d90e      	bls.n	8003632 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	22ff      	movs	r2, #255	@ 0xff
 8003618:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361e:	b2da      	uxtb	r2, r3
 8003620:	8979      	ldrh	r1, [r7, #10]
 8003622:	2300      	movs	r3, #0
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fd8e 	bl	800414c <I2C_TransferConfig>
 8003630:	e00f      	b.n	8003652 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003640:	b2da      	uxtb	r2, r3
 8003642:	8979      	ldrh	r1, [r7, #10]
 8003644:	2300      	movs	r3, #0
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 fd7d 	bl	800414c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d19d      	bne.n	8003598 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	6a39      	ldr	r1, [r7, #32]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fbc3 	bl	8003dec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e01a      	b.n	80036a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2220      	movs	r2, #32
 8003676:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <HAL_I2C_Master_Receive+0x1e8>)
 8003684:	400b      	ands	r3, r1
 8003686:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	80002400 	.word	0x80002400
 80036b4:	fe00e800 	.word	0xfe00e800

080036b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	4608      	mov	r0, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	817b      	strh	r3, [r7, #10]
 80036ca:	460b      	mov	r3, r1
 80036cc:	813b      	strh	r3, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b20      	cmp	r3, #32
 80036dc:	f040 80f9 	bne.w	80038d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_I2C_Mem_Write+0x34>
 80036e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0ed      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_I2C_Mem_Write+0x4e>
 8003702:	2302      	movs	r3, #2
 8003704:	e0e6      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800370e:	f7ff f983 	bl	8002a18 <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2319      	movs	r3, #25
 800371a:	2201      	movs	r2, #1
 800371c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fac3 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0d1      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2221      	movs	r2, #33	@ 0x21
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2240      	movs	r2, #64	@ 0x40
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003758:	88f8      	ldrh	r0, [r7, #6]
 800375a:	893a      	ldrh	r2, [r7, #8]
 800375c:	8979      	ldrh	r1, [r7, #10]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	4603      	mov	r3, r0
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f9d3 	bl	8003b14 <I2C_RequestMemoryWrite>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0a9      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	2bff      	cmp	r3, #255	@ 0xff
 8003788:	d90e      	bls.n	80037a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	22ff      	movs	r2, #255	@ 0xff
 800378e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003794:	b2da      	uxtb	r2, r3
 8003796:	8979      	ldrh	r1, [r7, #10]
 8003798:	2300      	movs	r3, #0
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fcd3 	bl	800414c <I2C_TransferConfig>
 80037a6:	e00f      	b.n	80037c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	8979      	ldrh	r1, [r7, #10]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fcc2 	bl	800414c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 fac6 	bl	8003d5e <I2C_WaitOnTXISFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e07b      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d034      	beq.n	8003880 <HAL_I2C_Mem_Write+0x1c8>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	d130      	bne.n	8003880 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003824:	2200      	movs	r2, #0
 8003826:	2180      	movs	r1, #128	@ 0x80
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fa3f 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e04d      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2bff      	cmp	r3, #255	@ 0xff
 8003840:	d90e      	bls.n	8003860 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	22ff      	movs	r2, #255	@ 0xff
 8003846:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384c:	b2da      	uxtb	r2, r3
 800384e:	8979      	ldrh	r1, [r7, #10]
 8003850:	2300      	movs	r3, #0
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fc77 	bl	800414c <I2C_TransferConfig>
 800385e:	e00f      	b.n	8003880 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386e:	b2da      	uxtb	r2, r3
 8003870:	8979      	ldrh	r1, [r7, #10]
 8003872:	2300      	movs	r3, #0
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fc66 	bl	800414c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d19e      	bne.n	80037c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 faac 	bl	8003dec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e01a      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2220      	movs	r2, #32
 80038a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <HAL_I2C_Mem_Write+0x224>)
 80038b2:	400b      	ands	r3, r1
 80038b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	fe00e800 	.word	0xfe00e800

080038e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	4608      	mov	r0, r1
 80038ea:	4611      	mov	r1, r2
 80038ec:	461a      	mov	r2, r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	817b      	strh	r3, [r7, #10]
 80038f2:	460b      	mov	r3, r1
 80038f4:	813b      	strh	r3, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b20      	cmp	r3, #32
 8003904:	f040 80fd 	bne.w	8003b02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_I2C_Mem_Read+0x34>
 800390e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d105      	bne.n	8003920 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800391a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0f1      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_I2C_Mem_Read+0x4e>
 800392a:	2302      	movs	r3, #2
 800392c:	e0ea      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003936:	f7ff f86f 	bl	8002a18 <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2319      	movs	r3, #25
 8003942:	2201      	movs	r2, #1
 8003944:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f9af 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0d5      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2222      	movs	r2, #34	@ 0x22
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2240      	movs	r2, #64	@ 0x40
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003978:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003980:	88f8      	ldrh	r0, [r7, #6]
 8003982:	893a      	ldrh	r2, [r7, #8]
 8003984:	8979      	ldrh	r1, [r7, #10]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	4603      	mov	r3, r0
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f913 	bl	8003bbc <I2C_RequestMemoryRead>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0ad      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2bff      	cmp	r3, #255	@ 0xff
 80039b0:	d90e      	bls.n	80039d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	22ff      	movs	r2, #255	@ 0xff
 80039b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	8979      	ldrh	r1, [r7, #10]
 80039c0:	4b52      	ldr	r3, [pc, #328]	@ (8003b0c <HAL_I2C_Mem_Read+0x22c>)
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fbbf 	bl	800414c <I2C_TransferConfig>
 80039ce:	e00f      	b.n	80039f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	8979      	ldrh	r1, [r7, #10]
 80039e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003b0c <HAL_I2C_Mem_Read+0x22c>)
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fbae 	bl	800414c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f6:	2200      	movs	r2, #0
 80039f8:	2104      	movs	r1, #4
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f956 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e07c      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d034      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x1d0>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d130      	bne.n	8003ab0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a54:	2200      	movs	r2, #0
 8003a56:	2180      	movs	r1, #128	@ 0x80
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f927 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e04d      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2bff      	cmp	r3, #255	@ 0xff
 8003a70:	d90e      	bls.n	8003a90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	22ff      	movs	r2, #255	@ 0xff
 8003a76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	2300      	movs	r3, #0
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fb5f 	bl	800414c <I2C_TransferConfig>
 8003a8e:	e00f      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	8979      	ldrh	r1, [r7, #10]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fb4e 	bl	800414c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d19a      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f994 	bl	8003dec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e01a      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <HAL_I2C_Mem_Read+0x230>)
 8003ae2:	400b      	ands	r3, r1
 8003ae4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
  }
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	80002400 	.word	0x80002400
 8003b10:	fe00e800 	.word	0xfe00e800

08003b14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	817b      	strh	r3, [r7, #10]
 8003b26:	460b      	mov	r3, r1
 8003b28:	813b      	strh	r3, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	8979      	ldrh	r1, [r7, #10]
 8003b34:	4b20      	ldr	r3, [pc, #128]	@ (8003bb8 <I2C_RequestMemoryWrite+0xa4>)
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fb05 	bl	800414c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	69b9      	ldr	r1, [r7, #24]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f909 	bl	8003d5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e02c      	b.n	8003bb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b5c:	893b      	ldrh	r3, [r7, #8]
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b66:	e015      	b.n	8003b94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b68:	893b      	ldrh	r3, [r7, #8]
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	69b9      	ldr	r1, [r7, #24]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f8ef 	bl	8003d5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e012      	b.n	8003bb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b8a:	893b      	ldrh	r3, [r7, #8]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2180      	movs	r1, #128	@ 0x80
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f884 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	80002000 	.word	0x80002000

08003bbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	817b      	strh	r3, [r7, #10]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	813b      	strh	r3, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	8979      	ldrh	r1, [r7, #10]
 8003bdc:	4b20      	ldr	r3, [pc, #128]	@ (8003c60 <I2C_RequestMemoryRead+0xa4>)
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2300      	movs	r3, #0
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fab2 	bl	800414c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	69b9      	ldr	r1, [r7, #24]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f8b6 	bl	8003d5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e02c      	b.n	8003c56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c02:	893b      	ldrh	r3, [r7, #8]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c0c:	e015      	b.n	8003c3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c0e:	893b      	ldrh	r3, [r7, #8]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	69b9      	ldr	r1, [r7, #24]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f89c 	bl	8003d5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e012      	b.n	8003c56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2140      	movs	r1, #64	@ 0x40
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f831 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	80002000 	.word	0x80002000

08003c64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d103      	bne.n	8003c82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d007      	beq.n	8003ca0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	619a      	str	r2, [r3, #24]
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbc:	e03b      	b.n	8003d36 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	6839      	ldr	r1, [r7, #0]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f962 	bl	8003f8c <I2C_IsErrorOccurred>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e041      	b.n	8003d56 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d02d      	beq.n	8003d36 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cda:	f7fe fe9d 	bl	8002a18 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d302      	bcc.n	8003cf0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d122      	bne.n	8003d36 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d113      	bne.n	8003d36 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00f      	b.n	8003d56 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	bf0c      	ite	eq
 8003d46:	2301      	moveq	r3, #1
 8003d48:	2300      	movne	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d0b4      	beq.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d6a:	e033      	b.n	8003dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f90b 	bl	8003f8c <I2C_IsErrorOccurred>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e031      	b.n	8003de4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d025      	beq.n	8003dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d88:	f7fe fe46 	bl	8002a18 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d302      	bcc.n	8003d9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11a      	bne.n	8003dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d013      	beq.n	8003dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e007      	b.n	8003de4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d1c4      	bne.n	8003d6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df8:	e02f      	b.n	8003e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f8c4 	bl	8003f8c <I2C_IsErrorOccurred>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02d      	b.n	8003e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0e:	f7fe fe03 	bl	8002a18 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d11a      	bne.n	8003e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d013      	beq.n	8003e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e36:	f043 0220 	orr.w	r2, r3, #32
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e007      	b.n	8003e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d1c8      	bne.n	8003dfa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003e84:	e071      	b.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f87e 	bl	8003f8c <I2C_IsErrorOccurred>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d13b      	bne.n	8003f20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d138      	bne.n	8003f20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d105      	bne.n	8003ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d121      	bne.n	8003f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2210      	movs	r2, #16
 8003edc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b24      	ldr	r3, [pc, #144]	@ (8003f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003ef8:	400b      	ands	r3, r1
 8003efa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	75fb      	strb	r3, [r7, #23]
 8003f18:	e002      	b.n	8003f20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003f20:	f7fe fd7a 	bl	8002a18 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d119      	bne.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d116      	bne.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d00f      	beq.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d002      	beq.n	8003f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d083      	beq.n	8003e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	fe00e800 	.word	0xfe00e800

08003f8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	@ 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d068      	beq.n	800408a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fc0:	e049      	b.n	8004056 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d045      	beq.n	8004056 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7fe fd25 	bl	8002a18 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <I2C_IsErrorOccurred+0x54>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d13a      	bne.n	8004056 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ff2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004002:	d121      	bne.n	8004048 <I2C_IsErrorOccurred+0xbc>
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800400a:	d01d      	beq.n	8004048 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	2b20      	cmp	r3, #32
 8004010:	d01a      	beq.n	8004048 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004020:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004022:	f7fe fcf9 	bl	8002a18 <HAL_GetTick>
 8004026:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004028:	e00e      	b.n	8004048 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800402a:	f7fe fcf5 	bl	8002a18 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b19      	cmp	r3, #25
 8004036:	d907      	bls.n	8004048 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f043 0320 	orr.w	r3, r3, #32
 800403e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004046:	e006      	b.n	8004056 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b20      	cmp	r3, #32
 8004054:	d1e9      	bne.n	800402a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b20      	cmp	r3, #32
 8004062:	d003      	beq.n	800406c <I2C_IsErrorOccurred+0xe0>
 8004064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0aa      	beq.n	8003fc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800406c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004070:	2b00      	cmp	r3, #0
 8004072:	d103      	bne.n	800407c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2220      	movs	r2, #32
 800407a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	f043 0304 	orr.w	r3, r3, #4
 8004082:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00b      	beq.n	80040f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	f043 0302 	orr.w	r3, r3, #2
 80040e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01c      	beq.n	800413a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff fdaf 	bl	8003c64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <I2C_IsErrorOccurred+0x1bc>)
 8004112:	400b      	ands	r3, r1
 8004114:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	431a      	orrs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800413a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800413e:	4618      	mov	r0, r3
 8004140:	3728      	adds	r7, #40	@ 0x28
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	fe00e800 	.word	0xfe00e800

0800414c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	4613      	mov	r3, r2
 800415c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800415e:	897b      	ldrh	r3, [r7, #10]
 8004160:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004164:	7a7b      	ldrb	r3, [r7, #9]
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800416c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	4313      	orrs	r3, r2
 8004176:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800417a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	0d5b      	lsrs	r3, r3, #21
 8004186:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800418a:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <I2C_TransferConfig+0x60>)
 800418c:	430b      	orrs	r3, r1
 800418e:	43db      	mvns	r3, r3
 8004190:	ea02 0103 	and.w	r1, r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	03ff63ff 	.word	0x03ff63ff

080041b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d138      	bne.n	8004238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e032      	b.n	800423a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2224      	movs	r2, #36	@ 0x24
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0201 	bic.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6819      	ldr	r1, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	e000      	b.n	800423a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004238:	2302      	movs	r3, #2
  }
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004246:	b480      	push	{r7}
 8004248:	b085      	sub	sp, #20
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b20      	cmp	r3, #32
 800425a:	d139      	bne.n	80042d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004266:	2302      	movs	r3, #2
 8004268:	e033      	b.n	80042d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2224      	movs	r2, #36	@ 0x24
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e000      	b.n	80042d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af02      	add	r7, sp, #8
 80042e4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0fe      	b.n	80044ee <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f00f fa67 	bl	80137d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2203      	movs	r2, #3
 800430e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f00a f965 	bl	800e5e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	7c1a      	ldrb	r2, [r3, #16]
 8004324:	f88d 2000 	strb.w	r2, [sp]
 8004328:	3304      	adds	r3, #4
 800432a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800432c:	f00a f836 	bl	800e39c <USB_CoreInit>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e0d5      	b.n	80044ee <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f00a f95d 	bl	800e608 <USB_SetCurrentMode>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0c6      	b.n	80044ee <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	e04a      	b.n	80043fc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	3315      	adds	r3, #21
 8004376:	2201      	movs	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800437a:	7bfa      	ldrb	r2, [r7, #15]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	3314      	adds	r3, #20
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800438e:	7bfa      	ldrb	r2, [r7, #15]
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	b298      	uxth	r0, r3
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	332e      	adds	r3, #46	@ 0x2e
 80043a2:	4602      	mov	r2, r0
 80043a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043a6:	7bfa      	ldrb	r2, [r7, #15]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	3318      	adds	r3, #24
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	331c      	adds	r3, #28
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	3320      	adds	r3, #32
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043e2:	7bfa      	ldrb	r2, [r7, #15]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	3324      	adds	r3, #36	@ 0x24
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	3301      	adds	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	791b      	ldrb	r3, [r3, #4]
 8004400:	7bfa      	ldrb	r2, [r7, #15]
 8004402:	429a      	cmp	r2, r3
 8004404:	d3af      	bcc.n	8004366 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e044      	b.n	8004496 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004434:	7bfa      	ldrb	r2, [r7, #15]
 8004436:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800444e:	7bfa      	ldrb	r2, [r7, #15]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800447a:	7bfa      	ldrb	r2, [r7, #15]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	3301      	adds	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	791b      	ldrb	r3, [r3, #4]
 800449a:	7bfa      	ldrb	r2, [r7, #15]
 800449c:	429a      	cmp	r2, r3
 800449e:	d3b5      	bcc.n	800440c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7c1a      	ldrb	r2, [r3, #16]
 80044a8:	f88d 2000 	strb.w	r2, [sp]
 80044ac:	3304      	adds	r3, #4
 80044ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044b0:	f00a f8f6 	bl	800e6a0 <USB_DevInit>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e013      	b.n	80044ee <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7b1b      	ldrb	r3, [r3, #12]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d102      	bne.n	80044e2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f001 f999 	bl	8005814 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f00b f935 	bl	800f756 <USB_DevDisconnect>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_PCD_Start+0x1c>
 800450e:	2302      	movs	r3, #2
 8004510:	e022      	b.n	8004558 <HAL_PCD_Start+0x62>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800452a:	2b01      	cmp	r3, #1
 800452c:	d105      	bne.n	800453a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f00a f840 	bl	800e5c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f00b f8e3 	bl	800f714 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b08d      	sub	sp, #52	@ 0x34
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f00b f9a1 	bl	800f8be <USB_GetMode>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	f040 84b9 	bne.w	8004ef6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f00b f905 	bl	800f798 <USB_ReadInterrupts>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 84af 	beq.w	8004ef4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f00b f8f2 	bl	800f798 <USB_ReadInterrupts>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d107      	bne.n	80045ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695a      	ldr	r2, [r3, #20]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f002 0202 	and.w	r2, r2, #2
 80045cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f00b f8e0 	bl	800f798 <USB_ReadInterrupts>
 80045d8:	4603      	mov	r3, r0
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d161      	bne.n	80046a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0210 	bic.w	r2, r2, #16
 80045f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f003 020f 	and.w	r2, r3, #15
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	3304      	adds	r3, #4
 8004610:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	0c5b      	lsrs	r3, r3, #17
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	2b02      	cmp	r3, #2
 800461c:	d124      	bne.n	8004668 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004624:	4013      	ands	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d035      	beq.n	8004696 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004634:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004638:	b29b      	uxth	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	6a38      	ldr	r0, [r7, #32]
 800463e:	f00a ff17 	bl	800f470 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800464e:	441a      	add	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004660:	441a      	add	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	615a      	str	r2, [r3, #20]
 8004666:	e016      	b.n	8004696 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	0c5b      	lsrs	r3, r3, #17
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	2b06      	cmp	r3, #6
 8004672:	d110      	bne.n	8004696 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800467a:	2208      	movs	r2, #8
 800467c:	4619      	mov	r1, r3
 800467e:	6a38      	ldr	r0, [r7, #32]
 8004680:	f00a fef6 	bl	800f470 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004690:	441a      	add	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699a      	ldr	r2, [r3, #24]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0210 	orr.w	r2, r2, #16
 80046a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f00b f874 	bl	800f798 <USB_ReadInterrupts>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046ba:	f040 80a7 	bne.w	800480c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f00b f879 	bl	800f7be <USB_ReadDevAllOutEpInterrupt>
 80046cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80046ce:	e099      	b.n	8004804 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 808e 	beq.w	80047f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f00b f89d 	bl	800f826 <USB_ReadDevOutEPInterrupt>
 80046ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004704:	461a      	mov	r2, r3
 8004706:	2301      	movs	r3, #1
 8004708:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800470a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fefb 	bl	8005508 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00c      	beq.n	8004736 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004728:	461a      	mov	r2, r3
 800472a:	2308      	movs	r3, #8
 800472c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800472e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 ffd1 	bl	80056d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474c:	461a      	mov	r2, r3
 800474e:	2310      	movs	r3, #16
 8004750:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d030      	beq.n	80047be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004764:	2b80      	cmp	r3, #128	@ 0x80
 8004766:	d109      	bne.n	800477c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004776:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800477a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800477c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	4413      	add	r3, r2
 800478e:	3304      	adds	r3, #4
 8004790:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	78db      	ldrb	r3, [r3, #3]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d108      	bne.n	80047ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f00f f93c 	bl	8013a24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b8:	461a      	mov	r2, r3
 80047ba:	2302      	movs	r3, #2
 80047bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d4:	461a      	mov	r2, r3
 80047d6:	2320      	movs	r3, #32
 80047d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d009      	beq.n	80047f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f0:	461a      	mov	r2, r3
 80047f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	3301      	adds	r3, #1
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80047fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	f47f af62 	bne.w	80046d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f00a ffc1 	bl	800f798 <USB_ReadInterrupts>
 8004816:	4603      	mov	r3, r0
 8004818:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800481c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004820:	f040 80db 	bne.w	80049da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f00a ffe2 	bl	800f7f2 <USB_ReadDevAllInEpInterrupt>
 800482e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004834:	e0cd      	b.n	80049d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80c2 	beq.w	80049c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f00b f808 	bl	800f862 <USB_ReadDevInEPInterrupt>
 8004852:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d057      	beq.n	800490e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	2201      	movs	r2, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	43db      	mvns	r3, r3
 8004878:	69f9      	ldr	r1, [r7, #28]
 800487a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800487e:	4013      	ands	r3, r2
 8004880:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800488e:	461a      	mov	r2, r3
 8004890:	2301      	movs	r3, #1
 8004892:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	799b      	ldrb	r3, [r3, #6]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d132      	bne.n	8004902 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	3320      	adds	r3, #32
 80048ac:	6819      	ldr	r1, [r3, #0]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b2:	4613      	mov	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4403      	add	r3, r0
 80048bc:	331c      	adds	r3, #28
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4419      	add	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c6:	4613      	mov	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4403      	add	r3, r0
 80048d0:	3320      	adds	r3, #32
 80048d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d113      	bne.n	8004902 <HAL_PCD_IRQHandler+0x3a2>
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	3324      	adds	r3, #36	@ 0x24
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d108      	bne.n	8004902 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048fa:	461a      	mov	r2, r3
 80048fc:	2101      	movs	r1, #1
 80048fe:	f00b f811 	bl	800f924 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	b2db      	uxtb	r3, r3
 8004906:	4619      	mov	r1, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f00f f806 	bl	801391a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004924:	461a      	mov	r2, r3
 8004926:	2308      	movs	r3, #8
 8004928:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004940:	461a      	mov	r2, r3
 8004942:	2310      	movs	r3, #16
 8004944:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495c:	461a      	mov	r2, r3
 800495e:	2340      	movs	r3, #64	@ 0x40
 8004960:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d023      	beq.n	80049b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800496c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800496e:	6a38      	ldr	r0, [r7, #32]
 8004970:	f009 fff4 	bl	800e95c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004976:	4613      	mov	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	3310      	adds	r3, #16
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4413      	add	r3, r2
 8004984:	3304      	adds	r3, #4
 8004986:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	78db      	ldrb	r3, [r3, #3]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d108      	bne.n	80049a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	b2db      	uxtb	r3, r3
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f00f f853 	bl	8013a48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ae:	461a      	mov	r2, r3
 80049b0:	2302      	movs	r3, #2
 80049b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80049be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fd15 	bl	80053f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	3301      	adds	r3, #1
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80049d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f47f af2e 	bne.w	8004836 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f00a feda 	bl	800f798 <USB_ReadInterrupts>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049ee:	d122      	bne.n	8004a36 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d108      	bne.n	8004a20 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a16:	2100      	movs	r1, #0
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 ff1f 	bl	800585c <HAL_PCDEx_LPM_Callback>
 8004a1e:	e002      	b.n	8004a26 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f00e fff1 	bl	8013a08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f00a feac 	bl	800f798 <USB_ReadInterrupts>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a4a:	d112      	bne.n	8004a72 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d102      	bne.n	8004a62 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f00e ffad 	bl	80139bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f00a fe8e 	bl	800f798 <USB_ReadInterrupts>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a86:	d121      	bne.n	8004acc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004a96:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d111      	bne.n	8004ac6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab0:	089b      	lsrs	r3, r3, #2
 8004ab2:	f003 020f 	and.w	r2, r3, #15
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004abc:	2101      	movs	r1, #1
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fecc 	bl	800585c <HAL_PCDEx_LPM_Callback>
 8004ac4:	e002      	b.n	8004acc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f00e ff78 	bl	80139bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f00a fe61 	bl	800f798 <USB_ReadInterrupts>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae0:	f040 80b7 	bne.w	8004c52 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2110      	movs	r1, #16
 8004afe:	4618      	mov	r0, r3
 8004b00:	f009 ff2c 	bl	800e95c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b04:	2300      	movs	r3, #0
 8004b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b08:	e046      	b.n	8004b98 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b16:	461a      	mov	r2, r3
 8004b18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b1c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b38:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b94:	3301      	adds	r3, #1
 8004b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	791b      	ldrb	r3, [r3, #4]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d3b2      	bcc.n	8004b0a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bb2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004bb6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	7bdb      	ldrb	r3, [r3, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d016      	beq.n	8004bee <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bd0:	f043 030b 	orr.w	r3, r3, #11
 8004bd4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004be6:	f043 030b 	orr.w	r3, r3, #11
 8004bea:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bec:	e015      	b.n	8004c1a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004c02:	4313      	orrs	r3, r2
 8004c04:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c14:	f043 030b 	orr.w	r3, r3, #11
 8004c18:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c28:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004c2c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f00a fe71 	bl	800f924 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695a      	ldr	r2, [r3, #20]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f00a fd9e 	bl	800f798 <USB_ReadInterrupts>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c66:	d123      	bne.n	8004cb0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f00a fe35 	bl	800f8dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f009 fee9 	bl	800ea4e <USB_GetDevSpeed>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	461a      	mov	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681c      	ldr	r4, [r3, #0]
 8004c88:	f001 fdd8 	bl	800683c <HAL_RCC_GetHCLKFreq>
 8004c8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c92:	461a      	mov	r2, r3
 8004c94:	4620      	mov	r0, r4
 8004c96:	f009 fbf3 	bl	800e480 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f00e fe65 	bl	801396a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f00a fd6f 	bl	800f798 <USB_ReadInterrupts>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d10a      	bne.n	8004cda <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f00e fe42 	bl	801394e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f002 0208 	and.w	r2, r2, #8
 8004cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f00a fd5a 	bl	800f798 <USB_ReadInterrupts>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cea:	2b80      	cmp	r3, #128	@ 0x80
 8004cec:	d123      	bne.n	8004d36 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfe:	e014      	b.n	8004d2a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d105      	bne.n	8004d24 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fb08 	bl	8005334 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	3301      	adds	r3, #1
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	791b      	ldrb	r3, [r3, #4]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d3e4      	bcc.n	8004d00 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f00a fd2c 	bl	800f798 <USB_ReadInterrupts>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d4a:	d13c      	bne.n	8004dc6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d50:	e02b      	b.n	8004daa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d66:	4613      	mov	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	3318      	adds	r3, #24
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d115      	bne.n	8004da4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	da12      	bge.n	8004da4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	3317      	adds	r3, #23
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fac8 	bl	8005334 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da6:	3301      	adds	r3, #1
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	791b      	ldrb	r3, [r3, #4]
 8004dae:	461a      	mov	r2, r3
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d3cd      	bcc.n	8004d52 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f00a fce4 	bl	800f798 <USB_ReadInterrupts>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dda:	d156      	bne.n	8004e8a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ddc:	2301      	movs	r3, #1
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de0:	e045      	b.n	8004e6e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df6:	4613      	mov	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d12e      	bne.n	8004e68 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	da2b      	bge.n	8004e68 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004e1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d121      	bne.n	8004e68 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e64:	6053      	str	r3, [r2, #4]
            break;
 8004e66:	e008      	b.n	8004e7a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	791b      	ldrb	r3, [r3, #4]
 8004e72:	461a      	mov	r2, r3
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d3b3      	bcc.n	8004de2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f00a fc82 	bl	800f798 <USB_ReadInterrupts>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e9e:	d10a      	bne.n	8004eb6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f00e fde3 	bl	8013a6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f00a fc6c 	bl	800f798 <USB_ReadInterrupts>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d115      	bne.n	8004ef6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f00e fdd3 	bl	8013a88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	e000      	b.n	8004ef6 <HAL_PCD_IRQHandler+0x996>
      return;
 8004ef4:	bf00      	nop
    }
  }
}
 8004ef6:	3734      	adds	r7, #52	@ 0x34
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd90      	pop	{r4, r7, pc}

08004efc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_PCD_SetAddress+0x1a>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e012      	b.n	8004f3c <HAL_PCD_SetAddress+0x40>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f00a fbcb 	bl	800f6c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	4611      	mov	r1, r2
 8004f50:	461a      	mov	r2, r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	70fb      	strb	r3, [r7, #3]
 8004f56:	460b      	mov	r3, r1
 8004f58:	803b      	strh	r3, [r7, #0]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	da0f      	bge.n	8004f8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	f003 020f 	and.w	r2, r3, #15
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	3310      	adds	r3, #16
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3304      	adds	r3, #4
 8004f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	705a      	strb	r2, [r3, #1]
 8004f88:	e00f      	b.n	8004faa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	f003 020f 	and.w	r2, r3, #15
 8004f90:	4613      	mov	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004fb6:	883a      	ldrh	r2, [r7, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	78ba      	ldrb	r2, [r7, #2]
 8004fc0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fd4:	78bb      	ldrb	r3, [r7, #2]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d102      	bne.n	8004fe0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_PCD_EP_Open+0xaa>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e00e      	b.n	800500c <HAL_PCD_EP_Open+0xc8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f009 fd4b 	bl	800ea98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800500a:	7afb      	ldrb	r3, [r7, #11]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005024:	2b00      	cmp	r3, #0
 8005026:	da0f      	bge.n	8005048 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	f003 020f 	and.w	r2, r3, #15
 800502e:	4613      	mov	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	3310      	adds	r3, #16
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	705a      	strb	r2, [r3, #1]
 8005046:	e00f      	b.n	8005068 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	f003 020f 	and.w	r2, r3, #15
 800504e:	4613      	mov	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	3304      	adds	r3, #4
 8005060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	b2da      	uxtb	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_PCD_EP_Close+0x6e>
 800507e:	2302      	movs	r3, #2
 8005080:	e00e      	b.n	80050a0 <HAL_PCD_EP_Close+0x8c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	4618      	mov	r0, r3
 8005092:	f009 fd89 	bl	800eba8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	460b      	mov	r3, r1
 80050b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050b8:	7afb      	ldrb	r3, [r7, #11]
 80050ba:	f003 020f 	and.w	r2, r3, #15
 80050be:	4613      	mov	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4413      	add	r3, r2
 80050ce:	3304      	adds	r3, #4
 80050d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2200      	movs	r2, #0
 80050e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2200      	movs	r2, #0
 80050e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ea:	7afb      	ldrb	r3, [r7, #11]
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	799b      	ldrb	r3, [r3, #6]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d102      	bne.n	8005104 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	799b      	ldrb	r3, [r3, #6]
 800510c:	461a      	mov	r2, r3
 800510e:	6979      	ldr	r1, [r7, #20]
 8005110:	f009 fe26 	bl	800ed60 <USB_EPStartXfer>

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	460b      	mov	r3, r1
 8005128:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	f003 020f 	and.w	r2, r3, #15
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005140:	681b      	ldr	r3, [r3, #0]
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	460b      	mov	r3, r1
 800515c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800515e:	7afb      	ldrb	r3, [r7, #11]
 8005160:	f003 020f 	and.w	r2, r3, #15
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	3310      	adds	r3, #16
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	3304      	adds	r3, #4
 8005174:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2201      	movs	r2, #1
 800518c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800518e:	7afb      	ldrb	r3, [r7, #11]
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	b2da      	uxtb	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	799b      	ldrb	r3, [r3, #6]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d102      	bne.n	80051a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	799b      	ldrb	r3, [r3, #6]
 80051b0:	461a      	mov	r2, r3
 80051b2:	6979      	ldr	r1, [r7, #20]
 80051b4:	f009 fdd4 	bl	800ed60 <USB_EPStartXfer>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	460b      	mov	r3, r1
 80051cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	7912      	ldrb	r2, [r2, #4]
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e04f      	b.n	8005280 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	da0f      	bge.n	8005208 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	f003 020f 	and.w	r2, r3, #15
 80051ee:	4613      	mov	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	3310      	adds	r3, #16
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	4413      	add	r3, r2
 80051fc:	3304      	adds	r3, #4
 80051fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	705a      	strb	r2, [r3, #1]
 8005206:	e00d      	b.n	8005224 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005208:	78fa      	ldrb	r2, [r7, #3]
 800520a:	4613      	mov	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	3304      	adds	r3, #4
 800521c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	b2da      	uxtb	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_PCD_EP_SetStall+0x82>
 8005240:	2302      	movs	r3, #2
 8005242:	e01d      	b.n	8005280 <HAL_PCD_EP_SetStall+0xbe>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68f9      	ldr	r1, [r7, #12]
 8005252:	4618      	mov	r0, r3
 8005254:	f00a f964 	bl	800f520 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	2b00      	cmp	r3, #0
 8005260:	d109      	bne.n	8005276 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7999      	ldrb	r1, [r3, #6]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005270:	461a      	mov	r2, r3
 8005272:	f00a fb57 	bl	800f924 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	7912      	ldrb	r2, [r2, #4]
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e042      	b.n	800532c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	da0f      	bge.n	80052ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	f003 020f 	and.w	r2, r3, #15
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	3310      	adds	r3, #16
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4413      	add	r3, r2
 80052c2:	3304      	adds	r3, #4
 80052c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	705a      	strb	r2, [r3, #1]
 80052cc:	e00f      	b.n	80052ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	f003 020f 	and.w	r2, r3, #15
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	4413      	add	r3, r2
 80052e4:	3304      	adds	r3, #4
 80052e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_PCD_EP_ClrStall+0x86>
 800530a:	2302      	movs	r3, #2
 800530c:	e00e      	b.n	800532c <HAL_PCD_EP_ClrStall+0xa4>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	4618      	mov	r0, r3
 800531e:	f00a f96d 	bl	800f5fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005344:	2b00      	cmp	r3, #0
 8005346:	da0c      	bge.n	8005362 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	f003 020f 	and.w	r2, r3, #15
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	3310      	adds	r3, #16
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	4413      	add	r3, r2
 800535c:	3304      	adds	r3, #4
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e00c      	b.n	800537c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	4413      	add	r3, r2
 8005378:	3304      	adds	r3, #4
 800537a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68f9      	ldr	r1, [r7, #12]
 8005382:	4618      	mov	r0, r3
 8005384:	f009 ff8c 	bl	800f2a0 <USB_EPStopXfer>
 8005388:	4603      	mov	r3, r0
 800538a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800538c:	7afb      	ldrb	r3, [r7, #11]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_PCD_EP_Flush+0x1a>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e01b      	b.n	80053e8 <HAL_PCD_EP_Flush+0x52>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80053b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	da09      	bge.n	80053d4 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f009 fac5 	bl	800e95c <USB_FlushTxFifo>
 80053d2:	e004      	b.n	80053de <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f009 faf1 	bl	800e9c0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08a      	sub	sp, #40	@ 0x28
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	3310      	adds	r3, #16
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	3304      	adds	r3, #4
 8005416:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	429a      	cmp	r2, r3
 8005422:	d901      	bls.n	8005428 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e06b      	b.n	8005500 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	429a      	cmp	r2, r3
 800543c:	d902      	bls.n	8005444 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3303      	adds	r3, #3
 8005448:	089b      	lsrs	r3, r3, #2
 800544a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800544c:	e02a      	b.n	80054a4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	429a      	cmp	r2, r3
 8005462:	d902      	bls.n	800546a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3303      	adds	r3, #3
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68d9      	ldr	r1, [r3, #12]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	b2da      	uxtb	r2, r3
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4603      	mov	r3, r0
 8005486:	6978      	ldr	r0, [r7, #20]
 8005488:	f009 ffb4 	bl	800f3f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	441a      	add	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	441a      	add	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d809      	bhi.n	80054ce <PCD_WriteEmptyTxFifo+0xde>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d203      	bcs.n	80054ce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1bf      	bne.n	800544e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d811      	bhi.n	80054fe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	2201      	movs	r2, #1
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054fa:	4013      	ands	r3, r2
 80054fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	333c      	adds	r3, #60	@ 0x3c
 8005520:	3304      	adds	r3, #4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	799b      	ldrb	r3, [r3, #6]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d17b      	bne.n	8005636 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d015      	beq.n	8005574 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4a61      	ldr	r2, [pc, #388]	@ (80056d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	f240 80b9 	bls.w	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80b3 	beq.w	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005570:	6093      	str	r3, [r2, #8]
 8005572:	e0a7      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558a:	461a      	mov	r2, r3
 800558c:	2320      	movs	r3, #32
 800558e:	6093      	str	r3, [r2, #8]
 8005590:	e098      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005598:	2b00      	cmp	r3, #0
 800559a:	f040 8093 	bne.w	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4a4b      	ldr	r2, [pc, #300]	@ (80056d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d90f      	bls.n	80055c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055bc:	461a      	mov	r2, r3
 80055be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055c2:	6093      	str	r3, [r2, #8]
 80055c4:	e07e      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	3304      	adds	r3, #4
 80055da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a1a      	ldr	r2, [r3, #32]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	0159      	lsls	r1, r3, #5
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	440b      	add	r3, r1
 80055e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f2:	1ad2      	subs	r2, r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d114      	bne.n	8005628 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005610:	461a      	mov	r2, r3
 8005612:	2101      	movs	r1, #1
 8005614:	f00a f986 	bl	800f924 <USB_EP0_OutStart>
 8005618:	e006      	b.n	8005628 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	441a      	add	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f00e f958 	bl	80138e4 <HAL_PCD_DataOutStageCallback>
 8005634:	e046      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4a26      	ldr	r2, [pc, #152]	@ (80056d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d124      	bne.n	8005688 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005654:	461a      	mov	r2, r3
 8005656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800565a:	6093      	str	r3, [r2, #8]
 800565c:	e032      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005674:	461a      	mov	r2, r3
 8005676:	2320      	movs	r3, #32
 8005678:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f00e f92f 	bl	80138e4 <HAL_PCD_DataOutStageCallback>
 8005686:	e01d      	b.n	80056c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d114      	bne.n	80056b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d108      	bne.n	80056b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056b0:	461a      	mov	r2, r3
 80056b2:	2100      	movs	r1, #0
 80056b4:	f00a f936 	bl	800f924 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f00e f910 	bl	80138e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	4f54300a 	.word	0x4f54300a
 80056d4:	4f54310a 	.word	0x4f54310a

080056d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	333c      	adds	r3, #60	@ 0x3c
 80056f0:	3304      	adds	r3, #4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a15      	ldr	r2, [pc, #84]	@ (8005760 <PCD_EP_OutSetupPacket_int+0x88>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d90e      	bls.n	800572c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005724:	461a      	mov	r2, r3
 8005726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800572a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f00e f8c7 	bl	80138c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a0a      	ldr	r2, [pc, #40]	@ (8005760 <PCD_EP_OutSetupPacket_int+0x88>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d90c      	bls.n	8005754 <PCD_EP_OutSetupPacket_int+0x7c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	799b      	ldrb	r3, [r3, #6]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d108      	bne.n	8005754 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800574c:	461a      	mov	r2, r3
 800574e:	2101      	movs	r1, #1
 8005750:	f00a f8e8 	bl	800f924 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	4f54300a 	.word	0x4f54300a

08005764 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	70fb      	strb	r3, [r7, #3]
 8005770:	4613      	mov	r3, r2
 8005772:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d107      	bne.n	8005792 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005782:	883b      	ldrh	r3, [r7, #0]
 8005784:	0419      	lsls	r1, r3, #16
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	430a      	orrs	r2, r1
 800578e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005790:	e028      	b.n	80057e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	0c1b      	lsrs	r3, r3, #16
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4413      	add	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]
 80057a4:	e00d      	b.n	80057c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	3340      	adds	r3, #64	@ 0x40
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	0c1b      	lsrs	r3, r3, #16
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4413      	add	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	3301      	adds	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d3ec      	bcc.n	80057a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80057cc:	883b      	ldrh	r3, [r7, #0]
 80057ce:	0418      	lsls	r0, r3, #16
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	4302      	orrs	r2, r0
 80057dc:	3340      	adds	r3, #64	@ 0x40
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	460b      	mov	r3, r1
 80057fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005842:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <HAL_PCDEx_ActivateLPM+0x44>)
 8005844:	4313      	orrs	r3, r2
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	10000003 	.word	0x10000003

0800585c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800587c:	4b19      	ldr	r3, [pc, #100]	@ (80058e4 <HAL_PWREx_ConfigSupply+0x70>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b04      	cmp	r3, #4
 8005886:	d00a      	beq.n	800589e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005888:	4b16      	ldr	r3, [pc, #88]	@ (80058e4 <HAL_PWREx_ConfigSupply+0x70>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	429a      	cmp	r2, r3
 8005894:	d001      	beq.n	800589a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e01f      	b.n	80058da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e01d      	b.n	80058da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800589e:	4b11      	ldr	r3, [pc, #68]	@ (80058e4 <HAL_PWREx_ConfigSupply+0x70>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f023 0207 	bic.w	r2, r3, #7
 80058a6:	490f      	ldr	r1, [pc, #60]	@ (80058e4 <HAL_PWREx_ConfigSupply+0x70>)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80058ae:	f7fd f8b3 	bl	8002a18 <HAL_GetTick>
 80058b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058b4:	e009      	b.n	80058ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058b6:	f7fd f8af 	bl	8002a18 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058c4:	d901      	bls.n	80058ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e007      	b.n	80058da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058ca:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <HAL_PWREx_ConfigSupply+0x70>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d6:	d1ee      	bne.n	80058b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	58024800 	.word	0x58024800

080058e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80058ec:	4b05      	ldr	r3, [pc, #20]	@ (8005904 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4a04      	ldr	r2, [pc, #16]	@ (8005904 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80058f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058f6:	60d3      	str	r3, [r2, #12]
}
 80058f8:	bf00      	nop
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	58024800 	.word	0x58024800

08005908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08c      	sub	sp, #48	@ 0x30
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f000 bc48 	b.w	80061ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8088 	beq.w	8005a3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800592a:	4b99      	ldr	r3, [pc, #612]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005934:	4b96      	ldr	r3, [pc, #600]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800593a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593c:	2b10      	cmp	r3, #16
 800593e:	d007      	beq.n	8005950 <HAL_RCC_OscConfig+0x48>
 8005940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005942:	2b18      	cmp	r3, #24
 8005944:	d111      	bne.n	800596a <HAL_RCC_OscConfig+0x62>
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d10c      	bne.n	800596a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005950:	4b8f      	ldr	r3, [pc, #572]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d06d      	beq.n	8005a38 <HAL_RCC_OscConfig+0x130>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d169      	bne.n	8005a38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f000 bc21 	b.w	80061ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005972:	d106      	bne.n	8005982 <HAL_RCC_OscConfig+0x7a>
 8005974:	4b86      	ldr	r3, [pc, #536]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a85      	ldr	r2, [pc, #532]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 800597a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	e02e      	b.n	80059e0 <HAL_RCC_OscConfig+0xd8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10c      	bne.n	80059a4 <HAL_RCC_OscConfig+0x9c>
 800598a:	4b81      	ldr	r3, [pc, #516]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a80      	ldr	r2, [pc, #512]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	4b7e      	ldr	r3, [pc, #504]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a7d      	ldr	r2, [pc, #500]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 800599c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e01d      	b.n	80059e0 <HAL_RCC_OscConfig+0xd8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCC_OscConfig+0xc0>
 80059ae:	4b78      	ldr	r3, [pc, #480]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a77      	ldr	r2, [pc, #476]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 80059b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b75      	ldr	r3, [pc, #468]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a74      	ldr	r2, [pc, #464]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e00b      	b.n	80059e0 <HAL_RCC_OscConfig+0xd8>
 80059c8:	4b71      	ldr	r3, [pc, #452]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a70      	ldr	r2, [pc, #448]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	4b6e      	ldr	r3, [pc, #440]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a6d      	ldr	r2, [pc, #436]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 80059da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d013      	beq.n	8005a10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7fd f816 	bl	8002a18 <HAL_GetTick>
 80059ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fd f812 	bl	8002a18 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	@ 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e3d4      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a02:	4b63      	ldr	r3, [pc, #396]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0f0      	beq.n	80059f0 <HAL_RCC_OscConfig+0xe8>
 8005a0e:	e014      	b.n	8005a3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a10:	f7fd f802 	bl	8002a18 <HAL_GetTick>
 8005a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a18:	f7fc fffe 	bl	8002a18 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b64      	cmp	r3, #100	@ 0x64
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e3c0      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a2a:	4b59      	ldr	r3, [pc, #356]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x110>
 8005a36:	e000      	b.n	8005a3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80ca 	beq.w	8005bdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a48:	4b51      	ldr	r3, [pc, #324]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a52:	4b4f      	ldr	r3, [pc, #316]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d007      	beq.n	8005a6e <HAL_RCC_OscConfig+0x166>
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	2b18      	cmp	r3, #24
 8005a62:	d156      	bne.n	8005b12 <HAL_RCC_OscConfig+0x20a>
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d151      	bne.n	8005b12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a6e:	4b48      	ldr	r3, [pc, #288]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_RCC_OscConfig+0x17e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e392      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a86:	4b42      	ldr	r3, [pc, #264]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f023 0219 	bic.w	r2, r3, #25
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	493f      	ldr	r1, [pc, #252]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fc ffbe 	bl	8002a18 <HAL_GetTick>
 8005a9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa0:	f7fc ffba 	bl	8002a18 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e37c      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ab2:	4b37      	ldr	r3, [pc, #220]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abe:	f7fc ffdb 	bl	8002a78 <HAL_GetREVID>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d817      	bhi.n	8005afc <HAL_RCC_OscConfig+0x1f4>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b40      	cmp	r3, #64	@ 0x40
 8005ad2:	d108      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
 8005ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005adc:	4a2c      	ldr	r2, [pc, #176]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ae2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ae4:	e07a      	b.n	8005bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	031b      	lsls	r3, r3, #12
 8005af4:	4926      	ldr	r1, [pc, #152]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005afa:	e06f      	b.n	8005bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005afc:	4b24      	ldr	r3, [pc, #144]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	061b      	lsls	r3, r3, #24
 8005b0a:	4921      	ldr	r1, [pc, #132]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b10:	e064      	b.n	8005bdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d047      	beq.n	8005baa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 0219 	bic.w	r2, r3, #25
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	491a      	ldr	r1, [pc, #104]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2c:	f7fc ff74 	bl	8002a18 <HAL_GetTick>
 8005b30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b34:	f7fc ff70 	bl	8002a18 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e332      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b46:	4b12      	ldr	r3, [pc, #72]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b52:	f7fc ff91 	bl	8002a78 <HAL_GetREVID>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d819      	bhi.n	8005b94 <HAL_RCC_OscConfig+0x28c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b40      	cmp	r3, #64	@ 0x40
 8005b66:	d108      	bne.n	8005b7a <HAL_RCC_OscConfig+0x272>
 8005b68:	4b09      	ldr	r3, [pc, #36]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005b70:	4a07      	ldr	r2, [pc, #28]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b76:	6053      	str	r3, [r2, #4]
 8005b78:	e030      	b.n	8005bdc <HAL_RCC_OscConfig+0x2d4>
 8005b7a:	4b05      	ldr	r3, [pc, #20]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	031b      	lsls	r3, r3, #12
 8005b88:	4901      	ldr	r1, [pc, #4]	@ (8005b90 <HAL_RCC_OscConfig+0x288>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	604b      	str	r3, [r1, #4]
 8005b8e:	e025      	b.n	8005bdc <HAL_RCC_OscConfig+0x2d4>
 8005b90:	58024400 	.word	0x58024400
 8005b94:	4b9a      	ldr	r3, [pc, #616]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	061b      	lsls	r3, r3, #24
 8005ba2:	4997      	ldr	r1, [pc, #604]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	604b      	str	r3, [r1, #4]
 8005ba8:	e018      	b.n	8005bdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005baa:	4b95      	ldr	r3, [pc, #596]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a94      	ldr	r2, [pc, #592]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005bb0:	f023 0301 	bic.w	r3, r3, #1
 8005bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb6:	f7fc ff2f 	bl	8002a18 <HAL_GetTick>
 8005bba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bbe:	f7fc ff2b 	bl	8002a18 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e2ed      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bd0:	4b8b      	ldr	r3, [pc, #556]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1f0      	bne.n	8005bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80a9 	beq.w	8005d3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bea:	4b85      	ldr	r3, [pc, #532]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bf4:	4b82      	ldr	r3, [pc, #520]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d007      	beq.n	8005c10 <HAL_RCC_OscConfig+0x308>
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b18      	cmp	r3, #24
 8005c04:	d13a      	bne.n	8005c7c <HAL_RCC_OscConfig+0x374>
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d135      	bne.n	8005c7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c10:	4b7b      	ldr	r3, [pc, #492]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_OscConfig+0x320>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	2b80      	cmp	r3, #128	@ 0x80
 8005c22:	d001      	beq.n	8005c28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e2c1      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c28:	f7fc ff26 	bl	8002a78 <HAL_GetREVID>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d817      	bhi.n	8005c66 <HAL_RCC_OscConfig+0x35e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d108      	bne.n	8005c50 <HAL_RCC_OscConfig+0x348>
 8005c3e:	4b70      	ldr	r3, [pc, #448]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005c46:	4a6e      	ldr	r2, [pc, #440]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005c48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c4e:	e075      	b.n	8005d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c50:	4b6b      	ldr	r3, [pc, #428]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	069b      	lsls	r3, r3, #26
 8005c5e:	4968      	ldr	r1, [pc, #416]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c64:	e06a      	b.n	8005d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c66:	4b66      	ldr	r3, [pc, #408]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	061b      	lsls	r3, r3, #24
 8005c74:	4962      	ldr	r1, [pc, #392]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c7a:	e05f      	b.n	8005d3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d042      	beq.n	8005d0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c84:	4b5e      	ldr	r3, [pc, #376]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a5d      	ldr	r2, [pc, #372]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fc fec2 	bl	8002a18 <HAL_GetTick>
 8005c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c98:	f7fc febe 	bl	8002a18 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e280      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005caa:	4b55      	ldr	r3, [pc, #340]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cb6:	f7fc fedf 	bl	8002a78 <HAL_GetREVID>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d817      	bhi.n	8005cf4 <HAL_RCC_OscConfig+0x3ec>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d108      	bne.n	8005cde <HAL_RCC_OscConfig+0x3d6>
 8005ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005cd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cda:	6053      	str	r3, [r2, #4]
 8005cdc:	e02e      	b.n	8005d3c <HAL_RCC_OscConfig+0x434>
 8005cde:	4b48      	ldr	r3, [pc, #288]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	069b      	lsls	r3, r3, #26
 8005cec:	4944      	ldr	r1, [pc, #272]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	604b      	str	r3, [r1, #4]
 8005cf2:	e023      	b.n	8005d3c <HAL_RCC_OscConfig+0x434>
 8005cf4:	4b42      	ldr	r3, [pc, #264]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	493f      	ldr	r1, [pc, #252]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60cb      	str	r3, [r1, #12]
 8005d08:	e018      	b.n	8005d3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005d10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d16:	f7fc fe7f 	bl	8002a18 <HAL_GetTick>
 8005d1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d1e:	f7fc fe7b 	bl	8002a18 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e23d      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d30:	4b33      	ldr	r3, [pc, #204]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f0      	bne.n	8005d1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d036      	beq.n	8005db6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d019      	beq.n	8005d84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d50:	4b2b      	ldr	r3, [pc, #172]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d54:	4a2a      	ldr	r2, [pc, #168]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5c:	f7fc fe5c 	bl	8002a18 <HAL_GetTick>
 8005d60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d64:	f7fc fe58 	bl	8002a18 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e21a      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d76:	4b22      	ldr	r3, [pc, #136]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f0      	beq.n	8005d64 <HAL_RCC_OscConfig+0x45c>
 8005d82:	e018      	b.n	8005db6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d84:	4b1e      	ldr	r3, [pc, #120]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d88:	4a1d      	ldr	r2, [pc, #116]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d90:	f7fc fe42 	bl	8002a18 <HAL_GetTick>
 8005d94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d98:	f7fc fe3e 	bl	8002a18 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e200      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005daa:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d039      	beq.n	8005e36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d01c      	beq.n	8005e04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005dca:	4b0d      	ldr	r3, [pc, #52]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a0c      	ldr	r2, [pc, #48]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005dd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dd6:	f7fc fe1f 	bl	8002a18 <HAL_GetTick>
 8005dda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dde:	f7fc fe1b 	bl	8002a18 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e1dd      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005df0:	4b03      	ldr	r3, [pc, #12]	@ (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCC_OscConfig+0x4d6>
 8005dfc:	e01b      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
 8005dfe:	bf00      	nop
 8005e00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e04:	4b9b      	ldr	r3, [pc, #620]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a9a      	ldr	r2, [pc, #616]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e10:	f7fc fe02 	bl	8002a18 <HAL_GetTick>
 8005e14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e18:	f7fc fdfe 	bl	8002a18 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e1c0      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e2a:	4b92      	ldr	r3, [pc, #584]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8081 	beq.w	8005f46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e44:	4b8c      	ldr	r3, [pc, #560]	@ (8006078 <HAL_RCC_OscConfig+0x770>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a8b      	ldr	r2, [pc, #556]	@ (8006078 <HAL_RCC_OscConfig+0x770>)
 8005e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e50:	f7fc fde2 	bl	8002a18 <HAL_GetTick>
 8005e54:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e58:	f7fc fdde 	bl	8002a18 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b64      	cmp	r3, #100	@ 0x64
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e1a0      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e6a:	4b83      	ldr	r3, [pc, #524]	@ (8006078 <HAL_RCC_OscConfig+0x770>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d106      	bne.n	8005e8c <HAL_RCC_OscConfig+0x584>
 8005e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e82:	4a7c      	ldr	r2, [pc, #496]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e8a:	e02d      	b.n	8005ee8 <HAL_RCC_OscConfig+0x5e0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10c      	bne.n	8005eae <HAL_RCC_OscConfig+0x5a6>
 8005e94:	4b77      	ldr	r3, [pc, #476]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e98:	4a76      	ldr	r2, [pc, #472]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
 8005e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ea0:	4b74      	ldr	r3, [pc, #464]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea4:	4a73      	ldr	r2, [pc, #460]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ea6:	f023 0304 	bic.w	r3, r3, #4
 8005eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eac:	e01c      	b.n	8005ee8 <HAL_RCC_OscConfig+0x5e0>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b05      	cmp	r3, #5
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x5c8>
 8005eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eba:	4a6e      	ldr	r2, [pc, #440]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ebc:	f043 0304 	orr.w	r3, r3, #4
 8005ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	4a6b      	ldr	r2, [pc, #428]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ece:	e00b      	b.n	8005ee8 <HAL_RCC_OscConfig+0x5e0>
 8005ed0:	4b68      	ldr	r3, [pc, #416]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed4:	4a67      	ldr	r2, [pc, #412]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005edc:	4b65      	ldr	r3, [pc, #404]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee0:	4a64      	ldr	r2, [pc, #400]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ee2:	f023 0304 	bic.w	r3, r3, #4
 8005ee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d015      	beq.n	8005f1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef0:	f7fc fd92 	bl	8002a18 <HAL_GetTick>
 8005ef4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ef6:	e00a      	b.n	8005f0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef8:	f7fc fd8e 	bl	8002a18 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e14e      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f0e:	4b59      	ldr	r3, [pc, #356]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0ee      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x5f0>
 8005f1a:	e014      	b.n	8005f46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1c:	f7fc fd7c 	bl	8002a18 <HAL_GetTick>
 8005f20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f22:	e00a      	b.n	8005f3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f24:	f7fc fd78 	bl	8002a18 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e138      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1ee      	bne.n	8005f24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 812d 	beq.w	80061aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f50:	4b48      	ldr	r3, [pc, #288]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f58:	2b18      	cmp	r3, #24
 8005f5a:	f000 80bd 	beq.w	80060d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	f040 809e 	bne.w	80060a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f68:	4b42      	ldr	r3, [pc, #264]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a41      	ldr	r2, [pc, #260]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f74:	f7fc fd50 	bl	8002a18 <HAL_GetTick>
 8005f78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7c:	f7fc fd4c 	bl	8002a18 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e10e      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f8e:	4b39      	ldr	r3, [pc, #228]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f9a:	4b36      	ldr	r3, [pc, #216]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005f9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f9e:	4b37      	ldr	r3, [pc, #220]	@ (800607c <HAL_RCC_OscConfig+0x774>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005faa:	0112      	lsls	r2, r2, #4
 8005fac:	430a      	orrs	r2, r1
 8005fae:	4931      	ldr	r1, [pc, #196]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	025b      	lsls	r3, r3, #9
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	061b      	lsls	r3, r3, #24
 8005fe0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005fe4:	4923      	ldr	r1, [pc, #140]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005fea:	4b22      	ldr	r3, [pc, #136]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fee:	4a21      	ldr	r2, [pc, #132]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8005ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ffa:	4b21      	ldr	r3, [pc, #132]	@ (8006080 <HAL_RCC_OscConfig+0x778>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006002:	00d2      	lsls	r2, r2, #3
 8006004:	491b      	ldr	r1, [pc, #108]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8006006:	4313      	orrs	r3, r2
 8006008:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800600a:	4b1a      	ldr	r3, [pc, #104]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	f023 020c 	bic.w	r2, r3, #12
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	4917      	ldr	r1, [pc, #92]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8006018:	4313      	orrs	r3, r2
 800601a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800601c:	4b15      	ldr	r3, [pc, #84]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	f023 0202 	bic.w	r2, r3, #2
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006028:	4912      	ldr	r1, [pc, #72]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 800602a:	4313      	orrs	r3, r2
 800602c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800602e:	4b11      	ldr	r3, [pc, #68]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8006030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006032:	4a10      	ldr	r2, [pc, #64]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8006034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006038:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800603a:	4b0e      	ldr	r3, [pc, #56]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 800603c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603e:	4a0d      	ldr	r2, [pc, #52]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8006040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006044:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006046:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8006048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604a:	4a0a      	ldr	r2, [pc, #40]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 800604c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006052:	4b08      	ldr	r3, [pc, #32]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	4a07      	ldr	r2, [pc, #28]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800605e:	4b05      	ldr	r3, [pc, #20]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a04      	ldr	r2, [pc, #16]	@ (8006074 <HAL_RCC_OscConfig+0x76c>)
 8006064:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606a:	f7fc fcd5 	bl	8002a18 <HAL_GetTick>
 800606e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006070:	e011      	b.n	8006096 <HAL_RCC_OscConfig+0x78e>
 8006072:	bf00      	nop
 8006074:	58024400 	.word	0x58024400
 8006078:	58024800 	.word	0x58024800
 800607c:	fffffc0c 	.word	0xfffffc0c
 8006080:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006084:	f7fc fcc8 	bl	8002a18 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e08a      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006096:	4b47      	ldr	r3, [pc, #284]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f0      	beq.n	8006084 <HAL_RCC_OscConfig+0x77c>
 80060a2:	e082      	b.n	80061aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a4:	4b43      	ldr	r3, [pc, #268]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a42      	ldr	r2, [pc, #264]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 80060aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fc fcb2 	bl	8002a18 <HAL_GetTick>
 80060b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b8:	f7fc fcae 	bl	8002a18 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e070      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ca:	4b3a      	ldr	r3, [pc, #232]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0x7b0>
 80060d6:	e068      	b.n	80061aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80060d8:	4b36      	ldr	r3, [pc, #216]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 80060da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80060de:	4b35      	ldr	r3, [pc, #212]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 80060e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d031      	beq.n	8006150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f003 0203 	and.w	r2, r3, #3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d12a      	bne.n	8006150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006106:	429a      	cmp	r2, r3
 8006108:	d122      	bne.n	8006150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006114:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006116:	429a      	cmp	r2, r3
 8006118:	d11a      	bne.n	8006150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	0a5b      	lsrs	r3, r3, #9
 800611e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006126:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006128:	429a      	cmp	r2, r3
 800612a:	d111      	bne.n	8006150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	0c1b      	lsrs	r3, r3, #16
 8006130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006138:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800613a:	429a      	cmp	r2, r3
 800613c:	d108      	bne.n	8006150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	0e1b      	lsrs	r3, r3, #24
 8006142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d001      	beq.n	8006154 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e02b      	b.n	80061ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006154:	4b17      	ldr	r3, [pc, #92]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 8006156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006158:	08db      	lsrs	r3, r3, #3
 800615a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800615e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	429a      	cmp	r2, r3
 8006168:	d01f      	beq.n	80061aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800616a:	4b12      	ldr	r3, [pc, #72]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616e:	4a11      	ldr	r2, [pc, #68]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 8006170:	f023 0301 	bic.w	r3, r3, #1
 8006174:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006176:	f7fc fc4f 	bl	8002a18 <HAL_GetTick>
 800617a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800617c:	bf00      	nop
 800617e:	f7fc fc4b 	bl	8002a18 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	4293      	cmp	r3, r2
 8006188:	d0f9      	beq.n	800617e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800618a:	4b0a      	ldr	r3, [pc, #40]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 800618c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <HAL_RCC_OscConfig+0x8b0>)
 8006190:	4013      	ands	r3, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006196:	00d2      	lsls	r2, r2, #3
 8006198:	4906      	ldr	r1, [pc, #24]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 800619a:	4313      	orrs	r3, r2
 800619c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800619e:	4b05      	ldr	r3, [pc, #20]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 80061a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a2:	4a04      	ldr	r2, [pc, #16]	@ (80061b4 <HAL_RCC_OscConfig+0x8ac>)
 80061a4:	f043 0301 	orr.w	r3, r3, #1
 80061a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3730      	adds	r7, #48	@ 0x30
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	58024400 	.word	0x58024400
 80061b8:	ffff0007 	.word	0xffff0007

080061bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e19c      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061d0:	4b8a      	ldr	r3, [pc, #552]	@ (80063fc <HAL_RCC_ClockConfig+0x240>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d910      	bls.n	8006200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061de:	4b87      	ldr	r3, [pc, #540]	@ (80063fc <HAL_RCC_ClockConfig+0x240>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f023 020f 	bic.w	r2, r3, #15
 80061e6:	4985      	ldr	r1, [pc, #532]	@ (80063fc <HAL_RCC_ClockConfig+0x240>)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b83      	ldr	r3, [pc, #524]	@ (80063fc <HAL_RCC_ClockConfig+0x240>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e184      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d010      	beq.n	800622e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	4b7b      	ldr	r3, [pc, #492]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006218:	429a      	cmp	r2, r3
 800621a:	d908      	bls.n	800622e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800621c:	4b78      	ldr	r3, [pc, #480]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	4975      	ldr	r1, [pc, #468]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800622a:	4313      	orrs	r3, r2
 800622c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d010      	beq.n	800625c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695a      	ldr	r2, [r3, #20]
 800623e:	4b70      	ldr	r3, [pc, #448]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006246:	429a      	cmp	r2, r3
 8006248:	d908      	bls.n	800625c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800624a:	4b6d      	ldr	r3, [pc, #436]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	496a      	ldr	r1, [pc, #424]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006258:	4313      	orrs	r3, r2
 800625a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	d010      	beq.n	800628a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	4b64      	ldr	r3, [pc, #400]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006274:	429a      	cmp	r2, r3
 8006276:	d908      	bls.n	800628a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006278:	4b61      	ldr	r3, [pc, #388]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	495e      	ldr	r1, [pc, #376]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006286:	4313      	orrs	r3, r2
 8006288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d010      	beq.n	80062b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	4b59      	ldr	r3, [pc, #356]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d908      	bls.n	80062b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062a6:	4b56      	ldr	r3, [pc, #344]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	4953      	ldr	r1, [pc, #332]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d010      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d908      	bls.n	80062e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f023 020f 	bic.w	r2, r3, #15
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	4947      	ldr	r1, [pc, #284]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d055      	beq.n	800639e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80062f2:	4b43      	ldr	r3, [pc, #268]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	4940      	ldr	r1, [pc, #256]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006300:	4313      	orrs	r3, r2
 8006302:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d107      	bne.n	800631c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800630c:	4b3c      	ldr	r3, [pc, #240]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d121      	bne.n	800635c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0f6      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d107      	bne.n	8006334 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006324:	4b36      	ldr	r3, [pc, #216]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d115      	bne.n	800635c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0ea      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d107      	bne.n	800634c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800633c:	4b30      	ldr	r3, [pc, #192]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0de      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800634c:	4b2c      	ldr	r3, [pc, #176]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0d6      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800635c:	4b28      	ldr	r3, [pc, #160]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f023 0207 	bic.w	r2, r3, #7
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	4925      	ldr	r1, [pc, #148]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800636a:	4313      	orrs	r3, r2
 800636c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636e:	f7fc fb53 	bl	8002a18 <HAL_GetTick>
 8006372:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006374:	e00a      	b.n	800638c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006376:	f7fc fb4f 	bl	8002a18 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006384:	4293      	cmp	r3, r2
 8006386:	d901      	bls.n	800638c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e0be      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638c:	4b1c      	ldr	r3, [pc, #112]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	429a      	cmp	r2, r3
 800639c:	d1eb      	bne.n	8006376 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d010      	beq.n	80063cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	4b14      	ldr	r3, [pc, #80]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d208      	bcs.n	80063cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ba:	4b11      	ldr	r3, [pc, #68]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f023 020f 	bic.w	r2, r3, #15
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	490e      	ldr	r1, [pc, #56]	@ (8006400 <HAL_RCC_ClockConfig+0x244>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063cc:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <HAL_RCC_ClockConfig+0x240>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d214      	bcs.n	8006404 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063da:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <HAL_RCC_ClockConfig+0x240>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f023 020f 	bic.w	r2, r3, #15
 80063e2:	4906      	ldr	r1, [pc, #24]	@ (80063fc <HAL_RCC_ClockConfig+0x240>)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ea:	4b04      	ldr	r3, [pc, #16]	@ (80063fc <HAL_RCC_ClockConfig+0x240>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d005      	beq.n	8006404 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e086      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
 80063fc:	52002000 	.word	0x52002000
 8006400:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d010      	beq.n	8006432 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	4b3f      	ldr	r3, [pc, #252]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800641c:	429a      	cmp	r2, r3
 800641e:	d208      	bcs.n	8006432 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006420:	4b3c      	ldr	r3, [pc, #240]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	4939      	ldr	r1, [pc, #228]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 800642e:	4313      	orrs	r3, r2
 8006430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d010      	beq.n	8006460 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	4b34      	ldr	r3, [pc, #208]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800644a:	429a      	cmp	r2, r3
 800644c:	d208      	bcs.n	8006460 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800644e:	4b31      	ldr	r3, [pc, #196]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	492e      	ldr	r1, [pc, #184]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 800645c:	4313      	orrs	r3, r2
 800645e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b00      	cmp	r3, #0
 800646a:	d010      	beq.n	800648e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	4b28      	ldr	r3, [pc, #160]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006478:	429a      	cmp	r2, r3
 800647a:	d208      	bcs.n	800648e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800647c:	4b25      	ldr	r3, [pc, #148]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	4922      	ldr	r1, [pc, #136]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 800648a:	4313      	orrs	r3, r2
 800648c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69da      	ldr	r2, [r3, #28]
 800649e:	4b1d      	ldr	r3, [pc, #116]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d208      	bcs.n	80064bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	4917      	ldr	r1, [pc, #92]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064bc:	f000 f844 	bl	8006548 <HAL_RCC_GetSysClockFreq>
 80064c0:	4602      	mov	r2, r0
 80064c2:	4b14      	ldr	r3, [pc, #80]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	0a1b      	lsrs	r3, r3, #8
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	4912      	ldr	r1, [pc, #72]	@ (8006518 <HAL_RCC_ClockConfig+0x35c>)
 80064ce:	5ccb      	ldrb	r3, [r1, r3]
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064da:	4b0e      	ldr	r3, [pc, #56]	@ (8006514 <HAL_RCC_ClockConfig+0x358>)
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006518 <HAL_RCC_ClockConfig+0x35c>)
 80064e4:	5cd3      	ldrb	r3, [r2, r3]
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
 80064f0:	4a0a      	ldr	r2, [pc, #40]	@ (800651c <HAL_RCC_ClockConfig+0x360>)
 80064f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006520 <HAL_RCC_ClockConfig+0x364>)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80064fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006524 <HAL_RCC_ClockConfig+0x368>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fc fa40 	bl	8002984 <HAL_InitTick>
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	58024400 	.word	0x58024400
 8006518:	08016a9c 	.word	0x08016a9c
 800651c:	24000030 	.word	0x24000030
 8006520:	2400002c 	.word	0x2400002c
 8006524:	24000034 	.word	0x24000034

08006528 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800652c:	4b05      	ldr	r3, [pc, #20]	@ (8006544 <HAL_RCC_EnableCSS+0x1c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a04      	ldr	r2, [pc, #16]	@ (8006544 <HAL_RCC_EnableCSS+0x1c>)
 8006532:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006536:	6013      	str	r3, [r2, #0]
}
 8006538:	bf00      	nop
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	58024400 	.word	0x58024400

08006548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006548:	b480      	push	{r7}
 800654a:	b089      	sub	sp, #36	@ 0x24
 800654c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800654e:	4bb3      	ldr	r3, [pc, #716]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006556:	2b18      	cmp	r3, #24
 8006558:	f200 8155 	bhi.w	8006806 <HAL_RCC_GetSysClockFreq+0x2be>
 800655c:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <HAL_RCC_GetSysClockFreq+0x1c>)
 800655e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006562:	bf00      	nop
 8006564:	080065c9 	.word	0x080065c9
 8006568:	08006807 	.word	0x08006807
 800656c:	08006807 	.word	0x08006807
 8006570:	08006807 	.word	0x08006807
 8006574:	08006807 	.word	0x08006807
 8006578:	08006807 	.word	0x08006807
 800657c:	08006807 	.word	0x08006807
 8006580:	08006807 	.word	0x08006807
 8006584:	080065ef 	.word	0x080065ef
 8006588:	08006807 	.word	0x08006807
 800658c:	08006807 	.word	0x08006807
 8006590:	08006807 	.word	0x08006807
 8006594:	08006807 	.word	0x08006807
 8006598:	08006807 	.word	0x08006807
 800659c:	08006807 	.word	0x08006807
 80065a0:	08006807 	.word	0x08006807
 80065a4:	080065f5 	.word	0x080065f5
 80065a8:	08006807 	.word	0x08006807
 80065ac:	08006807 	.word	0x08006807
 80065b0:	08006807 	.word	0x08006807
 80065b4:	08006807 	.word	0x08006807
 80065b8:	08006807 	.word	0x08006807
 80065bc:	08006807 	.word	0x08006807
 80065c0:	08006807 	.word	0x08006807
 80065c4:	080065fb 	.word	0x080065fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065c8:	4b94      	ldr	r3, [pc, #592]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d009      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065d4:	4b91      	ldr	r3, [pc, #580]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	08db      	lsrs	r3, r3, #3
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	4a90      	ldr	r2, [pc, #576]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
 80065e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80065e6:	e111      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065e8:	4b8d      	ldr	r3, [pc, #564]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065ea:	61bb      	str	r3, [r7, #24]
      break;
 80065ec:	e10e      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80065ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065f0:	61bb      	str	r3, [r7, #24]
      break;
 80065f2:	e10b      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80065f4:	4b8c      	ldr	r3, [pc, #560]	@ (8006828 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80065f6:	61bb      	str	r3, [r7, #24]
      break;
 80065f8:	e108      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065fa:	4b88      	ldr	r3, [pc, #544]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006604:	4b85      	ldr	r3, [pc, #532]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800660e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006610:	4b82      	ldr	r3, [pc, #520]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800661a:	4b80      	ldr	r3, [pc, #512]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800661e:	08db      	lsrs	r3, r3, #3
 8006620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	fb02 f303 	mul.w	r3, r2, r3
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006632:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 80e1 	beq.w	8006800 <HAL_RCC_GetSysClockFreq+0x2b8>
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b02      	cmp	r3, #2
 8006642:	f000 8083 	beq.w	800674c <HAL_RCC_GetSysClockFreq+0x204>
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b02      	cmp	r3, #2
 800664a:	f200 80a1 	bhi.w	8006790 <HAL_RCC_GetSysClockFreq+0x248>
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <HAL_RCC_GetSysClockFreq+0x114>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d056      	beq.n	8006708 <HAL_RCC_GetSysClockFreq+0x1c0>
 800665a:	e099      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800665c:	4b6f      	ldr	r3, [pc, #444]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02d      	beq.n	80066c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006668:	4b6c      	ldr	r3, [pc, #432]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	08db      	lsrs	r3, r3, #3
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	4a6b      	ldr	r2, [pc, #428]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006674:	fa22 f303 	lsr.w	r3, r2, r3
 8006678:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006692:	4b62      	ldr	r3, [pc, #392]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80066a6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800682c <HAL_RCC_GetSysClockFreq+0x2e4>
 80066aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80066c2:	e087      	b.n	80067d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006830 <HAL_RCC_GetSysClockFreq+0x2e8>
 80066d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d6:	4b51      	ldr	r3, [pc, #324]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800682c <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006706:	e065      	b.n	80067d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006712:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006834 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	4b40      	ldr	r3, [pc, #256]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	ed97 6a02 	vldr	s12, [r7, #8]
 800672e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800682c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800674a:	e043      	b.n	80067d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006756:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006838 <HAL_RCC_GetSysClockFreq+0x2f0>
 800675a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675e:	4b2f      	ldr	r3, [pc, #188]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006772:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800682c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800678e:	e021      	b.n	80067d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006834 <HAL_RCC_GetSysClockFreq+0x2ec>
 800679e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a2:	4b1e      	ldr	r3, [pc, #120]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800682c <HAL_RCC_GetSysClockFreq+0x2e4>
 80067ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80067d4:	4b11      	ldr	r3, [pc, #68]	@ (800681c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d8:	0a5b      	lsrs	r3, r3, #9
 80067da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067de:	3301      	adds	r3, #1
 80067e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	ee07 3a90 	vmov	s15, r3
 80067e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067f8:	ee17 3a90 	vmov	r3, s15
 80067fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80067fe:	e005      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	61bb      	str	r3, [r7, #24]
      break;
 8006804:	e002      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006806:	4b07      	ldr	r3, [pc, #28]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006808:	61bb      	str	r3, [r7, #24]
      break;
 800680a:	bf00      	nop
  }

  return sysclockfreq;
 800680c:	69bb      	ldr	r3, [r7, #24]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3724      	adds	r7, #36	@ 0x24
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	58024400 	.word	0x58024400
 8006820:	03d09000 	.word	0x03d09000
 8006824:	003d0900 	.word	0x003d0900
 8006828:	017d7840 	.word	0x017d7840
 800682c:	46000000 	.word	0x46000000
 8006830:	4c742400 	.word	0x4c742400
 8006834:	4a742400 	.word	0x4a742400
 8006838:	4bbebc20 	.word	0x4bbebc20

0800683c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006842:	f7ff fe81 	bl	8006548 <HAL_RCC_GetSysClockFreq>
 8006846:	4602      	mov	r2, r0
 8006848:	4b10      	ldr	r3, [pc, #64]	@ (800688c <HAL_RCC_GetHCLKFreq+0x50>)
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	490f      	ldr	r1, [pc, #60]	@ (8006890 <HAL_RCC_GetHCLKFreq+0x54>)
 8006854:	5ccb      	ldrb	r3, [r1, r3]
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	fa22 f303 	lsr.w	r3, r2, r3
 800685e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006860:	4b0a      	ldr	r3, [pc, #40]	@ (800688c <HAL_RCC_GetHCLKFreq+0x50>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	4a09      	ldr	r2, [pc, #36]	@ (8006890 <HAL_RCC_GetHCLKFreq+0x54>)
 800686a:	5cd3      	ldrb	r3, [r2, r3]
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	4a07      	ldr	r2, [pc, #28]	@ (8006894 <HAL_RCC_GetHCLKFreq+0x58>)
 8006878:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800687a:	4a07      	ldr	r2, [pc, #28]	@ (8006898 <HAL_RCC_GetHCLKFreq+0x5c>)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006880:	4b04      	ldr	r3, [pc, #16]	@ (8006894 <HAL_RCC_GetHCLKFreq+0x58>)
 8006882:	681b      	ldr	r3, [r3, #0]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	58024400 	.word	0x58024400
 8006890:	08016a9c 	.word	0x08016a9c
 8006894:	24000030 	.word	0x24000030
 8006898:	2400002c 	.word	0x2400002c

0800689c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068a0:	f7ff ffcc 	bl	800683c <HAL_RCC_GetHCLKFreq>
 80068a4:	4602      	mov	r2, r0
 80068a6:	4b06      	ldr	r3, [pc, #24]	@ (80068c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	091b      	lsrs	r3, r3, #4
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	4904      	ldr	r1, [pc, #16]	@ (80068c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068b2:	5ccb      	ldrb	r3, [r1, r3]
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068bc:	4618      	mov	r0, r3
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	58024400 	.word	0x58024400
 80068c4:	08016a9c 	.word	0x08016a9c

080068c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80068cc:	f7ff ffb6 	bl	800683c <HAL_RCC_GetHCLKFreq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	0a1b      	lsrs	r3, r3, #8
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	4904      	ldr	r1, [pc, #16]	@ (80068f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068de:	5ccb      	ldrb	r3, [r1, r3]
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	58024400 	.word	0x58024400
 80068f0:	08016a9c 	.word	0x08016a9c

080068f4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80068f8:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <HAL_RCC_NMI_IRQHandler+0x24>)
 80068fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006904:	d105      	bne.n	8006912 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006906:	f000 f809 	bl	800691c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800690a:	4b03      	ldr	r3, [pc, #12]	@ (8006918 <HAL_RCC_NMI_IRQHandler+0x24>)
 800690c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006910:	669a      	str	r2, [r3, #104]	@ 0x68
  }
}
 8006912:	bf00      	nop
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	58024400 	.word	0x58024400

0800691c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800692c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006930:	b0ca      	sub	sp, #296	@ 0x128
 8006932:	af00      	add	r7, sp, #0
 8006934:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006938:	2300      	movs	r3, #0
 800693a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800693e:	2300      	movs	r3, #0
 8006940:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006950:	2500      	movs	r5, #0
 8006952:	ea54 0305 	orrs.w	r3, r4, r5
 8006956:	d049      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800695e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006962:	d02f      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006964:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006968:	d828      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800696a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800696e:	d01a      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006974:	d822      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800697a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800697e:	d007      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006980:	e01c      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006982:	4bb8      	ldr	r3, [pc, #736]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	4ab7      	ldr	r2, [pc, #732]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800698c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800698e:	e01a      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006994:	3308      	adds	r3, #8
 8006996:	2102      	movs	r1, #2
 8006998:	4618      	mov	r0, r3
 800699a:	f002 fb61 	bl	8009060 <RCCEx_PLL2_Config>
 800699e:	4603      	mov	r3, r0
 80069a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069a4:	e00f      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069aa:	3328      	adds	r3, #40	@ 0x28
 80069ac:	2102      	movs	r1, #2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f002 fc08 	bl	80091c4 <RCCEx_PLL3_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069ba:	e004      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069c2:	e000      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80069c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069ce:	4ba5      	ldr	r3, [pc, #660]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069dc:	4aa1      	ldr	r2, [pc, #644]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069de:	430b      	orrs	r3, r1
 80069e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80069e2:	e003      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80069f8:	f04f 0900 	mov.w	r9, #0
 80069fc:	ea58 0309 	orrs.w	r3, r8, r9
 8006a00:	d047      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d82a      	bhi.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006a29 	.word	0x08006a29
 8006a18:	08006a37 	.word	0x08006a37
 8006a1c:	08006a4d 	.word	0x08006a4d
 8006a20:	08006a6b 	.word	0x08006a6b
 8006a24:	08006a6b 	.word	0x08006a6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a28:	4b8e      	ldr	r3, [pc, #568]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2c:	4a8d      	ldr	r2, [pc, #564]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a34:	e01a      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 fb0e 	bl	8009060 <RCCEx_PLL2_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a4a:	e00f      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a50:	3328      	adds	r3, #40	@ 0x28
 8006a52:	2100      	movs	r1, #0
 8006a54:	4618      	mov	r0, r3
 8006a56:	f002 fbb5 	bl	80091c4 <RCCEx_PLL3_Config>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a60:	e004      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a68:	e000      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10a      	bne.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a74:	4b7b      	ldr	r3, [pc, #492]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a78:	f023 0107 	bic.w	r1, r3, #7
 8006a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a82:	4a78      	ldr	r2, [pc, #480]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a84:	430b      	orrs	r3, r1
 8006a86:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a88:	e003      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006a9e:	f04f 0b00 	mov.w	fp, #0
 8006aa2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006aa6:	d04c      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ab2:	d030      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ab8:	d829      	bhi.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8006abc:	d02d      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006abe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ac0:	d825      	bhi.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ac2:	2b80      	cmp	r3, #128	@ 0x80
 8006ac4:	d018      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ac6:	2b80      	cmp	r3, #128	@ 0x80
 8006ac8:	d821      	bhi.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006ace:	2b40      	cmp	r3, #64	@ 0x40
 8006ad0:	d007      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006ad2:	e01c      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad4:	4b63      	ldr	r3, [pc, #396]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	4a62      	ldr	r2, [pc, #392]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ae0:	e01c      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	2100      	movs	r1, #0
 8006aea:	4618      	mov	r0, r3
 8006aec:	f002 fab8 	bl	8009060 <RCCEx_PLL2_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006af6:	e011      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afc:	3328      	adds	r3, #40	@ 0x28
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f002 fb5f 	bl	80091c4 <RCCEx_PLL3_Config>
 8006b06:	4603      	mov	r3, r0
 8006b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b0c:	e006      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b14:	e002      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b16:	bf00      	nop
 8006b18:	e000      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b24:	4b4f      	ldr	r3, [pc, #316]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b32:	4a4c      	ldr	r2, [pc, #304]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b38:	e003      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006b4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006b52:	2300      	movs	r3, #0
 8006b54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006b58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	d053      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b6e:	d035      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006b70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b74:	d82e      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b7a:	d031      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006b7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b80:	d828      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b86:	d01a      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b8c:	d822      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006b92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b96:	d007      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006b98:	e01c      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b9a:	4b32      	ldr	r3, [pc, #200]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9e:	4a31      	ldr	r2, [pc, #196]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ba6:	e01c      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	3308      	adds	r3, #8
 8006bae:	2100      	movs	r1, #0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f002 fa55 	bl	8009060 <RCCEx_PLL2_Config>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006bbc:	e011      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	3328      	adds	r3, #40	@ 0x28
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f002 fafc 	bl	80091c4 <RCCEx_PLL3_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bd2:	e006      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bda:	e002      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006bdc:	bf00      	nop
 8006bde:	e000      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006bea:	4b1e      	ldr	r3, [pc, #120]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c00:	e003      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006c16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006c20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006c24:	460b      	mov	r3, r1
 8006c26:	4313      	orrs	r3, r2
 8006c28:	d056      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c36:	d038      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c3c:	d831      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c42:	d034      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006c44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c48:	d82b      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c4e:	d01d      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006c50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c54:	d825      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d006      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006c5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c5e:	d00a      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c60:	e01f      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c62:	bf00      	nop
 8006c64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c68:	4ba2      	ldr	r3, [pc, #648]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6c:	4aa1      	ldr	r2, [pc, #644]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c74:	e01c      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f002 f9ee 	bl	8009060 <RCCEx_PLL2_Config>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c8a:	e011      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c90:	3328      	adds	r3, #40	@ 0x28
 8006c92:	2100      	movs	r1, #0
 8006c94:	4618      	mov	r0, r3
 8006c96:	f002 fa95 	bl	80091c4 <RCCEx_PLL3_Config>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ca0:	e006      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ca8:	e002      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006caa:	bf00      	nop
 8006cac:	e000      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10b      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006cb8:	4b8e      	ldr	r3, [pc, #568]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006cc8:	4a8a      	ldr	r2, [pc, #552]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cce:	e003      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006cee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	d03a      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cfe:	2b30      	cmp	r3, #48	@ 0x30
 8006d00:	d01f      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006d02:	2b30      	cmp	r3, #48	@ 0x30
 8006d04:	d819      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	d00c      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d815      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d019      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006d12:	2b10      	cmp	r3, #16
 8006d14:	d111      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d16:	4b77      	ldr	r3, [pc, #476]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1a:	4a76      	ldr	r2, [pc, #472]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d22:	e011      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d28:	3308      	adds	r3, #8
 8006d2a:	2102      	movs	r1, #2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f002 f997 	bl	8009060 <RCCEx_PLL2_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d38:	e006      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d40:	e002      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d50:	4b68      	ldr	r3, [pc, #416]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5e:	4a65      	ldr	r2, [pc, #404]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d60:	430b      	orrs	r3, r1
 8006d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d64:	e003      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006d7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	d051      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d98:	d035      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006d9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d9e:	d82e      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006da0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006da4:	d031      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006da6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006daa:	d828      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db0:	d01a      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db6:	d822      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc0:	d007      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006dc2:	e01c      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006dd0:	e01c      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f002 f940 	bl	8009060 <RCCEx_PLL2_Config>
 8006de0:	4603      	mov	r3, r0
 8006de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006de6:	e011      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dec:	3328      	adds	r3, #40	@ 0x28
 8006dee:	2100      	movs	r1, #0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f002 f9e7 	bl	80091c4 <RCCEx_PLL3_Config>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006dfc:	e006      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e04:	e002      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e06:	bf00      	nop
 8006e08:	e000      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e14:	4b37      	ldr	r3, [pc, #220]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e22:	4a34      	ldr	r2, [pc, #208]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e28:	e003      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e42:	2300      	movs	r3, #0
 8006e44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	d056      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e5c:	d033      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006e5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e62:	d82c      	bhi.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e68:	d02f      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006e6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e6e:	d826      	bhi.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e74:	d02b      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006e76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e7a:	d820      	bhi.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e80:	d012      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006e82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e86:	d81a      	bhi.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d022      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e90:	d115      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e96:	3308      	adds	r3, #8
 8006e98:	2101      	movs	r1, #1
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f002 f8e0 	bl	8009060 <RCCEx_PLL2_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ea6:	e015      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eac:	3328      	adds	r3, #40	@ 0x28
 8006eae:	2101      	movs	r1, #1
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f002 f987 	bl	80091c4 <RCCEx_PLL3_Config>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ebc:	e00a      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ec4:	e006      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ec6:	bf00      	nop
 8006ec8:	e004      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006eca:	bf00      	nop
 8006ecc:	e002      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ece:	bf00      	nop
 8006ed0:	e000      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10d      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006edc:	4b05      	ldr	r3, [pc, #20]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eea:	4a02      	ldr	r2, [pc, #8]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ef0:	e006      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ef2:	bf00      	nop
 8006ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006efc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f10:	2300      	movs	r3, #0
 8006f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	d055      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f2c:	d033      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f32:	d82c      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f38:	d02f      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f3e:	d826      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f44:	d02b      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006f46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f4a:	d820      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f50:	d012      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006f52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f56:	d81a      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d022      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006f5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f60:	d115      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	3308      	adds	r3, #8
 8006f68:	2101      	movs	r1, #1
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f002 f878 	bl	8009060 <RCCEx_PLL2_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006f76:	e015      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7c:	3328      	adds	r3, #40	@ 0x28
 8006f7e:	2101      	movs	r1, #1
 8006f80:	4618      	mov	r0, r3
 8006f82:	f002 f91f 	bl	80091c4 <RCCEx_PLL3_Config>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006f8c:	e00a      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f94:	e006      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f96:	bf00      	nop
 8006f98:	e004      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f9a:	bf00      	nop
 8006f9c:	e002      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f9e:	bf00      	nop
 8006fa0:	e000      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006fac:	4ba3      	ldr	r3, [pc, #652]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fbc:	4a9f      	ldr	r2, [pc, #636]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fc2:	e003      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006fe2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	d037      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff6:	d00e      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ffc:	d816      	bhi.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d018      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007006:	d111      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007008:	4b8c      	ldr	r3, [pc, #560]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	4a8b      	ldr	r2, [pc, #556]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007014:	e00f      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701a:	3308      	adds	r3, #8
 800701c:	2101      	movs	r1, #1
 800701e:	4618      	mov	r0, r3
 8007020:	f002 f81e 	bl	8009060 <RCCEx_PLL2_Config>
 8007024:	4603      	mov	r3, r0
 8007026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800702a:	e004      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007032:	e000      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800703e:	4b7f      	ldr	r3, [pc, #508]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007042:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704c:	4a7b      	ldr	r2, [pc, #492]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800704e:	430b      	orrs	r3, r1
 8007050:	6513      	str	r3, [r2, #80]	@ 0x50
 8007052:	e003      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800705c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800706c:	2300      	movs	r3, #0
 800706e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007072:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007076:	460b      	mov	r3, r1
 8007078:	4313      	orrs	r3, r2
 800707a:	d039      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007082:	2b03      	cmp	r3, #3
 8007084:	d81c      	bhi.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007086:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	080070c9 	.word	0x080070c9
 8007090:	0800709d 	.word	0x0800709d
 8007094:	080070ab 	.word	0x080070ab
 8007098:	080070c9 	.word	0x080070c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800709c:	4b67      	ldr	r3, [pc, #412]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800709e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a0:	4a66      	ldr	r2, [pc, #408]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80070a8:	e00f      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ae:	3308      	adds	r3, #8
 80070b0:	2102      	movs	r1, #2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 ffd4 	bl	8009060 <RCCEx_PLL2_Config>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80070be:	e004      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070c6:	e000      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80070c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80070d2:	4b5a      	ldr	r3, [pc, #360]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d6:	f023 0103 	bic.w	r1, r3, #3
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070e0:	4a56      	ldr	r2, [pc, #344]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e2:	430b      	orrs	r3, r1
 80070e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070e6:	e003      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80070fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007100:	2300      	movs	r3, #0
 8007102:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007106:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	f000 809f 	beq.w	8007250 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007112:	4b4b      	ldr	r3, [pc, #300]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a4a      	ldr	r2, [pc, #296]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800711c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800711e:	f7fb fc7b 	bl	8002a18 <HAL_GetTick>
 8007122:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007126:	e00b      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007128:	f7fb fc76 	bl	8002a18 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b64      	cmp	r3, #100	@ 0x64
 8007136:	d903      	bls.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800713e:	e005      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007140:	4b3f      	ldr	r3, [pc, #252]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0ed      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800714c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007150:	2b00      	cmp	r3, #0
 8007152:	d179      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007154:	4b39      	ldr	r3, [pc, #228]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007156:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007160:	4053      	eors	r3, r2
 8007162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007166:	2b00      	cmp	r3, #0
 8007168:	d015      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800716a:	4b34      	ldr	r3, [pc, #208]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800716c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800716e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007172:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007176:	4b31      	ldr	r3, [pc, #196]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800717a:	4a30      	ldr	r2, [pc, #192]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800717c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007180:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007182:	4b2e      	ldr	r3, [pc, #184]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007186:	4a2d      	ldr	r2, [pc, #180]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800718c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800718e:	4a2b      	ldr	r2, [pc, #172]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007194:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800719e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a2:	d118      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a4:	f7fb fc38 	bl	8002a18 <HAL_GetTick>
 80071a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071ac:	e00d      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ae:	f7fb fc33 	bl	8002a18 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80071b8:	1ad2      	subs	r2, r2, r3
 80071ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80071be:	429a      	cmp	r2, r3
 80071c0:	d903      	bls.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80071c8:	e005      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071ca:	4b1c      	ldr	r3, [pc, #112]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0eb      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80071d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d129      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ee:	d10e      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80071f0:	4b12      	ldr	r3, [pc, #72]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007200:	091a      	lsrs	r2, r3, #4
 8007202:	4b10      	ldr	r3, [pc, #64]	@ (8007244 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007204:	4013      	ands	r3, r2
 8007206:	4a0d      	ldr	r2, [pc, #52]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007208:	430b      	orrs	r3, r1
 800720a:	6113      	str	r3, [r2, #16]
 800720c:	e005      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800720e:	4b0b      	ldr	r3, [pc, #44]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	4a0a      	ldr	r2, [pc, #40]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007214:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007218:	6113      	str	r3, [r2, #16]
 800721a:	4b08      	ldr	r3, [pc, #32]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800721c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800721e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007222:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800722a:	4a04      	ldr	r2, [pc, #16]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800722c:	430b      	orrs	r3, r1
 800722e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007230:	e00e      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800723a:	e009      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800723c:	58024400 	.word	0x58024400
 8007240:	58024800 	.word	0x58024800
 8007244:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800724c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f002 0301 	and.w	r3, r2, #1
 800725c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007260:	2300      	movs	r3, #0
 8007262:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007266:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800726a:	460b      	mov	r3, r1
 800726c:	4313      	orrs	r3, r2
 800726e:	f000 8089 	beq.w	8007384 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007276:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007278:	2b28      	cmp	r3, #40	@ 0x28
 800727a:	d86b      	bhi.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800727c:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	0800735d 	.word	0x0800735d
 8007288:	08007355 	.word	0x08007355
 800728c:	08007355 	.word	0x08007355
 8007290:	08007355 	.word	0x08007355
 8007294:	08007355 	.word	0x08007355
 8007298:	08007355 	.word	0x08007355
 800729c:	08007355 	.word	0x08007355
 80072a0:	08007355 	.word	0x08007355
 80072a4:	08007329 	.word	0x08007329
 80072a8:	08007355 	.word	0x08007355
 80072ac:	08007355 	.word	0x08007355
 80072b0:	08007355 	.word	0x08007355
 80072b4:	08007355 	.word	0x08007355
 80072b8:	08007355 	.word	0x08007355
 80072bc:	08007355 	.word	0x08007355
 80072c0:	08007355 	.word	0x08007355
 80072c4:	0800733f 	.word	0x0800733f
 80072c8:	08007355 	.word	0x08007355
 80072cc:	08007355 	.word	0x08007355
 80072d0:	08007355 	.word	0x08007355
 80072d4:	08007355 	.word	0x08007355
 80072d8:	08007355 	.word	0x08007355
 80072dc:	08007355 	.word	0x08007355
 80072e0:	08007355 	.word	0x08007355
 80072e4:	0800735d 	.word	0x0800735d
 80072e8:	08007355 	.word	0x08007355
 80072ec:	08007355 	.word	0x08007355
 80072f0:	08007355 	.word	0x08007355
 80072f4:	08007355 	.word	0x08007355
 80072f8:	08007355 	.word	0x08007355
 80072fc:	08007355 	.word	0x08007355
 8007300:	08007355 	.word	0x08007355
 8007304:	0800735d 	.word	0x0800735d
 8007308:	08007355 	.word	0x08007355
 800730c:	08007355 	.word	0x08007355
 8007310:	08007355 	.word	0x08007355
 8007314:	08007355 	.word	0x08007355
 8007318:	08007355 	.word	0x08007355
 800731c:	08007355 	.word	0x08007355
 8007320:	08007355 	.word	0x08007355
 8007324:	0800735d 	.word	0x0800735d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732c:	3308      	adds	r3, #8
 800732e:	2101      	movs	r1, #1
 8007330:	4618      	mov	r0, r3
 8007332:	f001 fe95 	bl	8009060 <RCCEx_PLL2_Config>
 8007336:	4603      	mov	r3, r0
 8007338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800733c:	e00f      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800733e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007342:	3328      	adds	r3, #40	@ 0x28
 8007344:	2101      	movs	r1, #1
 8007346:	4618      	mov	r0, r3
 8007348:	f001 ff3c 	bl	80091c4 <RCCEx_PLL3_Config>
 800734c:	4603      	mov	r3, r0
 800734e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007352:	e004      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800735a:	e000      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800735c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800735e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10a      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007366:	4bbf      	ldr	r3, [pc, #764]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800736a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007374:	4abb      	ldr	r2, [pc, #748]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007376:	430b      	orrs	r3, r1
 8007378:	6553      	str	r3, [r2, #84]	@ 0x54
 800737a:	e003      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f002 0302 	and.w	r3, r2, #2
 8007390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007394:	2300      	movs	r3, #0
 8007396:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800739a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800739e:	460b      	mov	r3, r1
 80073a0:	4313      	orrs	r3, r2
 80073a2:	d041      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d824      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80073ae:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	08007401 	.word	0x08007401
 80073b8:	080073cd 	.word	0x080073cd
 80073bc:	080073e3 	.word	0x080073e3
 80073c0:	08007401 	.word	0x08007401
 80073c4:	08007401 	.word	0x08007401
 80073c8:	08007401 	.word	0x08007401
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d0:	3308      	adds	r3, #8
 80073d2:	2101      	movs	r1, #1
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fe43 	bl	8009060 <RCCEx_PLL2_Config>
 80073da:	4603      	mov	r3, r0
 80073dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80073e0:	e00f      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e6:	3328      	adds	r3, #40	@ 0x28
 80073e8:	2101      	movs	r1, #1
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 feea 	bl	80091c4 <RCCEx_PLL3_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80073f6:	e004      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073fe:	e000      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800740a:	4b96      	ldr	r3, [pc, #600]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800740c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740e:	f023 0107 	bic.w	r1, r3, #7
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007416:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007418:	4a92      	ldr	r2, [pc, #584]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800741a:	430b      	orrs	r3, r1
 800741c:	6553      	str	r3, [r2, #84]	@ 0x54
 800741e:	e003      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007424:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f002 0304 	and.w	r3, r2, #4
 8007434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007438:	2300      	movs	r3, #0
 800743a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800743e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007442:	460b      	mov	r3, r1
 8007444:	4313      	orrs	r3, r2
 8007446:	d044      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007450:	2b05      	cmp	r3, #5
 8007452:	d825      	bhi.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007454:	a201      	add	r2, pc, #4	@ (adr r2, 800745c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	080074a9 	.word	0x080074a9
 8007460:	08007475 	.word	0x08007475
 8007464:	0800748b 	.word	0x0800748b
 8007468:	080074a9 	.word	0x080074a9
 800746c:	080074a9 	.word	0x080074a9
 8007470:	080074a9 	.word	0x080074a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007478:	3308      	adds	r3, #8
 800747a:	2101      	movs	r1, #1
 800747c:	4618      	mov	r0, r3
 800747e:	f001 fdef 	bl	8009060 <RCCEx_PLL2_Config>
 8007482:	4603      	mov	r3, r0
 8007484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007488:	e00f      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800748a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748e:	3328      	adds	r3, #40	@ 0x28
 8007490:	2101      	movs	r1, #1
 8007492:	4618      	mov	r0, r3
 8007494:	f001 fe96 	bl	80091c4 <RCCEx_PLL3_Config>
 8007498:	4603      	mov	r3, r0
 800749a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800749e:	e004      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074a6:	e000      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80074a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074b2:	4b6c      	ldr	r3, [pc, #432]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074b6:	f023 0107 	bic.w	r1, r3, #7
 80074ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074c2:	4a68      	ldr	r2, [pc, #416]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074c4:	430b      	orrs	r3, r1
 80074c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80074c8:	e003      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	f002 0320 	and.w	r3, r2, #32
 80074de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074e2:	2300      	movs	r3, #0
 80074e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074ec:	460b      	mov	r3, r1
 80074ee:	4313      	orrs	r3, r2
 80074f0:	d055      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074fe:	d033      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007504:	d82c      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800750a:	d02f      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800750c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007510:	d826      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007512:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007516:	d02b      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007518:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800751c:	d820      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800751e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007522:	d012      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007528:	d81a      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d022      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800752e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007532:	d115      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007538:	3308      	adds	r3, #8
 800753a:	2100      	movs	r1, #0
 800753c:	4618      	mov	r0, r3
 800753e:	f001 fd8f 	bl	8009060 <RCCEx_PLL2_Config>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007548:	e015      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800754a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754e:	3328      	adds	r3, #40	@ 0x28
 8007550:	2102      	movs	r1, #2
 8007552:	4618      	mov	r0, r3
 8007554:	f001 fe36 	bl	80091c4 <RCCEx_PLL3_Config>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800755e:	e00a      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007566:	e006      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007568:	bf00      	nop
 800756a:	e004      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800756c:	bf00      	nop
 800756e:	e002      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007570:	bf00      	nop
 8007572:	e000      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10b      	bne.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800757e:	4b39      	ldr	r3, [pc, #228]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007582:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800758e:	4a35      	ldr	r2, [pc, #212]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007590:	430b      	orrs	r3, r1
 8007592:	6553      	str	r3, [r2, #84]	@ 0x54
 8007594:	e003      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80075aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075ae:	2300      	movs	r3, #0
 80075b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4313      	orrs	r3, r2
 80075bc:	d058      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80075ca:	d033      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80075cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80075d0:	d82c      	bhi.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075d6:	d02f      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80075d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075dc:	d826      	bhi.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075e2:	d02b      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80075e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075e8:	d820      	bhi.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ee:	d012      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80075f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075f4:	d81a      	bhi.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d022      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80075fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075fe:	d115      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007604:	3308      	adds	r3, #8
 8007606:	2100      	movs	r1, #0
 8007608:	4618      	mov	r0, r3
 800760a:	f001 fd29 	bl	8009060 <RCCEx_PLL2_Config>
 800760e:	4603      	mov	r3, r0
 8007610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007614:	e015      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761a:	3328      	adds	r3, #40	@ 0x28
 800761c:	2102      	movs	r1, #2
 800761e:	4618      	mov	r0, r3
 8007620:	f001 fdd0 	bl	80091c4 <RCCEx_PLL3_Config>
 8007624:	4603      	mov	r3, r0
 8007626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800762a:	e00a      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007632:	e006      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007634:	bf00      	nop
 8007636:	e004      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007638:	bf00      	nop
 800763a:	e002      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10e      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800764a:	4b06      	ldr	r3, [pc, #24]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800764c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800764e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007656:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800765a:	4a02      	ldr	r2, [pc, #8]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800765c:	430b      	orrs	r3, r1
 800765e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007660:	e006      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007662:	bf00      	nop
 8007664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800766c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800767c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007680:	2300      	movs	r3, #0
 8007682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007686:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800768a:	460b      	mov	r3, r1
 800768c:	4313      	orrs	r3, r2
 800768e:	d055      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007698:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800769c:	d033      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800769e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80076a2:	d82c      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076a8:	d02f      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80076aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076ae:	d826      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80076b4:	d02b      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80076b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80076ba:	d820      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076c0:	d012      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80076c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076c6:	d81a      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d022      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80076cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076d0:	d115      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	3308      	adds	r3, #8
 80076d8:	2100      	movs	r1, #0
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fcc0 	bl	8009060 <RCCEx_PLL2_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80076e6:	e015      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ec:	3328      	adds	r3, #40	@ 0x28
 80076ee:	2102      	movs	r1, #2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 fd67 	bl	80091c4 <RCCEx_PLL3_Config>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80076fc:	e00a      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007704:	e006      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007706:	bf00      	nop
 8007708:	e004      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800770a:	bf00      	nop
 800770c:	e002      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10b      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800771c:	4ba1      	ldr	r3, [pc, #644]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800771e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007720:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007728:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800772c:	4a9d      	ldr	r2, [pc, #628]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800772e:	430b      	orrs	r3, r1
 8007730:	6593      	str	r3, [r2, #88]	@ 0x58
 8007732:	e003      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800773c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f002 0308 	and.w	r3, r2, #8
 8007748:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800774c:	2300      	movs	r3, #0
 800774e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007752:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007756:	460b      	mov	r3, r1
 8007758:	4313      	orrs	r3, r2
 800775a:	d01e      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800775c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007768:	d10c      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800776a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776e:	3328      	adds	r3, #40	@ 0x28
 8007770:	2102      	movs	r1, #2
 8007772:	4618      	mov	r0, r3
 8007774:	f001 fd26 	bl	80091c4 <RCCEx_PLL3_Config>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007784:	4b87      	ldr	r3, [pc, #540]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007788:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800778c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007794:	4a83      	ldr	r2, [pc, #524]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007796:	430b      	orrs	r3, r1
 8007798:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	f002 0310 	and.w	r3, r2, #16
 80077a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077aa:	2300      	movs	r3, #0
 80077ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80077b4:	460b      	mov	r3, r1
 80077b6:	4313      	orrs	r3, r2
 80077b8:	d01e      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077c6:	d10c      	bne.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077cc:	3328      	adds	r3, #40	@ 0x28
 80077ce:	2102      	movs	r1, #2
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 fcf7 	bl	80091c4 <RCCEx_PLL3_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077e2:	4b70      	ldr	r3, [pc, #448]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80077ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077f2:	4a6c      	ldr	r2, [pc, #432]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077f4:	430b      	orrs	r3, r1
 80077f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007808:	2300      	movs	r3, #0
 800780a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800780e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007812:	460b      	mov	r3, r1
 8007814:	4313      	orrs	r3, r2
 8007816:	d03e      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007820:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007824:	d022      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800782a:	d81b      	bhi.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007834:	d00b      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007836:	e015      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783c:	3308      	adds	r3, #8
 800783e:	2100      	movs	r1, #0
 8007840:	4618      	mov	r0, r3
 8007842:	f001 fc0d 	bl	8009060 <RCCEx_PLL2_Config>
 8007846:	4603      	mov	r3, r0
 8007848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800784c:	e00f      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007852:	3328      	adds	r3, #40	@ 0x28
 8007854:	2102      	movs	r1, #2
 8007856:	4618      	mov	r0, r3
 8007858:	f001 fcb4 	bl	80091c4 <RCCEx_PLL3_Config>
 800785c:	4603      	mov	r3, r0
 800785e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007862:	e004      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800786a:	e000      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800786c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10b      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007876:	4b4b      	ldr	r3, [pc, #300]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007882:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007886:	4a47      	ldr	r2, [pc, #284]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007888:	430b      	orrs	r3, r1
 800788a:	6593      	str	r3, [r2, #88]	@ 0x58
 800788c:	e003      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80078a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078a4:	2300      	movs	r3, #0
 80078a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80078ac:	460b      	mov	r3, r1
 80078ae:	4313      	orrs	r3, r2
 80078b0:	d03b      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078be:	d01f      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80078c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078c4:	d818      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80078c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078ca:	d003      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80078cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078d0:	d007      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80078d2:	e011      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d4:	4b33      	ldr	r3, [pc, #204]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	4a32      	ldr	r2, [pc, #200]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80078e0:	e00f      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e6:	3328      	adds	r3, #40	@ 0x28
 80078e8:	2101      	movs	r1, #1
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 fc6a 	bl	80091c4 <RCCEx_PLL3_Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80078f6:	e004      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078fe:	e000      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800790a:	4b26      	ldr	r3, [pc, #152]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800790c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800790e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791a:	4a22      	ldr	r2, [pc, #136]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800791c:	430b      	orrs	r3, r1
 800791e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007920:	e003      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007936:	673b      	str	r3, [r7, #112]	@ 0x70
 8007938:	2300      	movs	r3, #0
 800793a:	677b      	str	r3, [r7, #116]	@ 0x74
 800793c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007940:	460b      	mov	r3, r1
 8007942:	4313      	orrs	r3, r2
 8007944:	d034      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007954:	d007      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007956:	e011      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007958:	4b12      	ldr	r3, [pc, #72]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800795a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795c:	4a11      	ldr	r2, [pc, #68]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800795e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007964:	e00e      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796a:	3308      	adds	r3, #8
 800796c:	2102      	movs	r1, #2
 800796e:	4618      	mov	r0, r3
 8007970:	f001 fb76 	bl	8009060 <RCCEx_PLL2_Config>
 8007974:	4603      	mov	r3, r0
 8007976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800797a:	e003      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10d      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800798c:	4b05      	ldr	r3, [pc, #20]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800798e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007990:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800799a:	4a02      	ldr	r2, [pc, #8]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800799c:	430b      	orrs	r3, r1
 800799e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079a0:	e006      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80079a2:	bf00      	nop
 80079a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80079b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80079bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079be:	2300      	movs	r3, #0
 80079c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80079c6:	460b      	mov	r3, r1
 80079c8:	4313      	orrs	r3, r2
 80079ca:	d00c      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d0:	3328      	adds	r3, #40	@ 0x28
 80079d2:	2102      	movs	r1, #2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 fbf5 	bl	80091c4 <RCCEx_PLL3_Config>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80079f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80079f4:	2300      	movs	r3, #0
 80079f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80079f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80079fc:	460b      	mov	r3, r1
 80079fe:	4313      	orrs	r3, r2
 8007a00:	d038      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a0e:	d018      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007a10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a14:	d811      	bhi.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a1a:	d014      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a20:	d80b      	bhi.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d011      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a2a:	d106      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a2c:	4bc3      	ldr	r3, [pc, #780]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a30:	4ac2      	ldr	r2, [pc, #776]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a38:	e008      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a40:	e004      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a42:	bf00      	nop
 8007a44:	e002      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a46:	bf00      	nop
 8007a48:	e000      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10b      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a54:	4bb9      	ldr	r3, [pc, #740]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a64:	4ab5      	ldr	r2, [pc, #724]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a66:	430b      	orrs	r3, r1
 8007a68:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a6a:	e003      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007a80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a82:	2300      	movs	r3, #0
 8007a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	d009      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a90:	4baa      	ldr	r3, [pc, #680]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a9e:	4aa7      	ldr	r2, [pc, #668]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ab0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ab6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007aba:	460b      	mov	r3, r1
 8007abc:	4313      	orrs	r3, r2
 8007abe:	d00a      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ac0:	4b9e      	ldr	r3, [pc, #632]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007acc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ad0:	4a9a      	ldr	r2, [pc, #616]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ae8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007aec:	460b      	mov	r3, r1
 8007aee:	4313      	orrs	r3, r2
 8007af0:	d009      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007af2:	4b92      	ldr	r3, [pc, #584]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b00:	4a8e      	ldr	r2, [pc, #568]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b02:	430b      	orrs	r3, r1
 8007b04:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b14:	2300      	movs	r3, #0
 8007b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	d00e      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b22:	4b86      	ldr	r3, [pc, #536]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	4a85      	ldr	r2, [pc, #532]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b2c:	6113      	str	r3, [r2, #16]
 8007b2e:	4b83      	ldr	r3, [pc, #524]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b30:	6919      	ldr	r1, [r3, #16]
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b3a:	4a80      	ldr	r2, [pc, #512]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b4e:	2300      	movs	r3, #0
 8007b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007b56:	460b      	mov	r3, r1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	d009      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b5c:	4b77      	ldr	r3, [pc, #476]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b60:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b6a:	4a74      	ldr	r2, [pc, #464]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b7e:	2300      	movs	r3, #0
 8007b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007b86:	460b      	mov	r3, r1
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	d00a      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b8c:	4b6b      	ldr	r3, [pc, #428]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b90:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b9c:	4a67      	ldr	r2, [pc, #412]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	2100      	movs	r1, #0
 8007bac:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	d011      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f001 fa4a 	bl	8009060 <RCCEx_PLL2_Config>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	2100      	movs	r1, #0
 8007bec:	6239      	str	r1, [r7, #32]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bf4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	d011      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	3308      	adds	r3, #8
 8007c04:	2101      	movs	r1, #1
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 fa2a 	bl	8009060 <RCCEx_PLL2_Config>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	61b9      	str	r1, [r7, #24]
 8007c2e:	f003 0304 	and.w	r3, r3, #4
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	d011      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c42:	3308      	adds	r3, #8
 8007c44:	2102      	movs	r1, #2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 fa0a 	bl	8009060 <RCCEx_PLL2_Config>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	6139      	str	r1, [r7, #16]
 8007c6e:	f003 0308 	and.w	r3, r3, #8
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	d011      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c82:	3328      	adds	r3, #40	@ 0x28
 8007c84:	2100      	movs	r1, #0
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 fa9c 	bl	80091c4 <RCCEx_PLL3_Config>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	2100      	movs	r1, #0
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	d011      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc2:	3328      	adds	r3, #40	@ 0x28
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 fa7c 	bl	80091c4 <RCCEx_PLL3_Config>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	2100      	movs	r1, #0
 8007cec:	6039      	str	r1, [r7, #0]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	607b      	str	r3, [r7, #4]
 8007cf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	d011      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	3328      	adds	r3, #40	@ 0x28
 8007d04:	2102      	movs	r1, #2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 fa5c 	bl	80091c4 <RCCEx_PLL3_Config>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007d22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e000      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007d36:	46bd      	mov	sp, r7
 8007d38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d3c:	58024400 	.word	0x58024400

08007d40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b090      	sub	sp, #64	@ 0x40
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d4e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007d52:	430b      	orrs	r3, r1
 8007d54:	f040 8094 	bne.w	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007d58:	4b9e      	ldr	r3, [pc, #632]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	f200 8087 	bhi.w	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007d85 	.word	0x08007d85
 8007d74:	08007dad 	.word	0x08007dad
 8007d78:	08007dd5 	.word	0x08007dd5
 8007d7c:	08007e71 	.word	0x08007e71
 8007d80:	08007dfd 	.word	0x08007dfd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d84:	4b93      	ldr	r3, [pc, #588]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d90:	d108      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 f810 	bl	8008dbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007da0:	f000 bd45 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da8:	f000 bd41 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dac:	4b89      	ldr	r3, [pc, #548]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007db8:	d108      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dba:	f107 0318 	add.w	r3, r7, #24
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fd54 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dc8:	f000 bd31 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd0:	f000 bd2d 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dd4:	4b7f      	ldr	r3, [pc, #508]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007de0:	d108      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007de2:	f107 030c 	add.w	r3, r7, #12
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fe94 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df0:	f000 bd1d 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df8:	f000 bd19 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dfc:	4b75      	ldr	r3, [pc, #468]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e06:	4b73      	ldr	r3, [pc, #460]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0304 	and.w	r3, r3, #4
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	d10c      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d109      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e18:	4b6e      	ldr	r3, [pc, #440]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	08db      	lsrs	r3, r3, #3
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	4a6d      	ldr	r2, [pc, #436]	@ (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
 8007e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e2a:	e01f      	b.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e2c:	4b69      	ldr	r3, [pc, #420]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e38:	d106      	bne.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e40:	d102      	bne.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e42:	4b66      	ldr	r3, [pc, #408]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e46:	e011      	b.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e48:	4b62      	ldr	r3, [pc, #392]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e54:	d106      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e5c:	d102      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e5e:	4b60      	ldr	r3, [pc, #384]	@ (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e62:	e003      	b.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e68:	f000 bce1 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e6c:	f000 bcdf 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e70:	4b5c      	ldr	r3, [pc, #368]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e74:	f000 bcdb 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7c:	f000 bcd7 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e84:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	f040 80ad 	bne.w	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007e8e:	4b51      	ldr	r3, [pc, #324]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e92:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007e96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e9e:	d056      	beq.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ea6:	f200 8090 	bhi.w	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eac:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eae:	f000 8088 	beq.w	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eb6:	f200 8088 	bhi.w	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebc:	2b80      	cmp	r3, #128	@ 0x80
 8007ebe:	d032      	beq.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec2:	2b80      	cmp	r3, #128	@ 0x80
 8007ec4:	f200 8081 	bhi.w	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	2b40      	cmp	r3, #64	@ 0x40
 8007ed2:	d014      	beq.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007ed4:	e079      	b.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ede:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ee2:	d108      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 ff67 	bl	8008dbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ef2:	f000 bc9c 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efa:	f000 bc98 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007efe:	4b35      	ldr	r3, [pc, #212]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f0a:	d108      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f0c:	f107 0318 	add.w	r3, r7, #24
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 fcab 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f1a:	f000 bc88 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f22:	f000 bc84 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f26:	4b2b      	ldr	r3, [pc, #172]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f32:	d108      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f34:	f107 030c 	add.w	r3, r7, #12
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fdeb 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f42:	f000 bc74 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f4a:	f000 bc70 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f4e:	4b21      	ldr	r3, [pc, #132]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f56:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f58:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d10c      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d109      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	08db      	lsrs	r3, r3, #3
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	4a18      	ldr	r2, [pc, #96]	@ (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f76:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f7c:	e01f      	b.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f7e:	4b15      	ldr	r3, [pc, #84]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f8a:	d106      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f92:	d102      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f94:	4b11      	ldr	r3, [pc, #68]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f98:	e011      	b.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fa6:	d106      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fae:	d102      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fb4:	e003      	b.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007fba:	f000 bc38 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fbe:	f000 bc36 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fc2:	4b08      	ldr	r3, [pc, #32]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc6:	f000 bc32 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fce:	f000 bc2e 	b.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fd2:	bf00      	nop
 8007fd4:	58024400 	.word	0x58024400
 8007fd8:	03d09000 	.word	0x03d09000
 8007fdc:	003d0900 	.word	0x003d0900
 8007fe0:	017d7840 	.word	0x017d7840
 8007fe4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007ff0:	430b      	orrs	r3, r1
 8007ff2:	f040 809c 	bne.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ffa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007ffe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008002:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008006:	d054      	beq.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800800e:	f200 808b 	bhi.w	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008014:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008018:	f000 8083 	beq.w	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008022:	f200 8081 	bhi.w	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008028:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800802c:	d02f      	beq.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008034:	d878      	bhi.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008042:	d012      	beq.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008044:	e070      	b.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008046:	4b8a      	ldr	r3, [pc, #552]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800804e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008052:	d107      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008058:	4618      	mov	r0, r3
 800805a:	f000 feaf 	bl	8008dbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800805e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008062:	e3e4      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008068:	e3e1      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800806a:	4b81      	ldr	r3, [pc, #516]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008076:	d107      	bne.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008078:	f107 0318 	add.w	r3, r7, #24
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fbf5 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008086:	e3d2      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800808c:	e3cf      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800808e:	4b78      	ldr	r3, [pc, #480]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800809a:	d107      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800809c:	f107 030c 	add.w	r3, r7, #12
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fd37 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080aa:	e3c0      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b0:	e3bd      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080b2:	4b6f      	ldr	r3, [pc, #444]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080bc:	4b6c      	ldr	r3, [pc, #432]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d10c      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80080c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080ce:	4b68      	ldr	r3, [pc, #416]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	08db      	lsrs	r3, r3, #3
 80080d4:	f003 0303 	and.w	r3, r3, #3
 80080d8:	4a66      	ldr	r2, [pc, #408]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80080da:	fa22 f303 	lsr.w	r3, r2, r3
 80080de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080e0:	e01e      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080e2:	4b63      	ldr	r3, [pc, #396]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ee:	d106      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80080f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080f6:	d102      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80080f8:	4b5f      	ldr	r3, [pc, #380]	@ (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80080fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080fc:	e010      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080fe:	4b5c      	ldr	r3, [pc, #368]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800810a:	d106      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800810c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008112:	d102      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008114:	4b59      	ldr	r3, [pc, #356]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008118:	e002      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800811e:	e386      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008120:	e385      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008122:	4b57      	ldr	r3, [pc, #348]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008126:	e382      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812c:	e37f      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800812e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008132:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008136:	430b      	orrs	r3, r1
 8008138:	f040 80a7 	bne.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800813c:	4b4c      	ldr	r3, [pc, #304]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800813e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008140:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008144:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800814c:	d055      	beq.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008154:	f200 8096 	bhi.w	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800815e:	f000 8084 	beq.w	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008164:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008168:	f200 808c 	bhi.w	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800816c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008172:	d030      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008176:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800817a:	f200 8083 	bhi.w	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	2b00      	cmp	r3, #0
 8008182:	d004      	beq.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008186:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800818a:	d012      	beq.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800818c:	e07a      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800818e:	4b38      	ldr	r3, [pc, #224]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008196:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800819a:	d107      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800819c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fe0b 	bl	8008dbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081aa:	e340      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081b0:	e33d      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081b2:	4b2f      	ldr	r3, [pc, #188]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081be:	d107      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081c0:	f107 0318 	add.w	r3, r7, #24
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fb51 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ce:	e32e      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081d4:	e32b      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081d6:	4b26      	ldr	r3, [pc, #152]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081e2:	d107      	bne.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081e4:	f107 030c 	add.w	r3, r7, #12
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fc93 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081f2:	e31c      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f8:	e319      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008202:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008204:	4b1a      	ldr	r3, [pc, #104]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b04      	cmp	r3, #4
 800820e:	d10c      	bne.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008212:	2b00      	cmp	r3, #0
 8008214:	d109      	bne.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008216:	4b16      	ldr	r3, [pc, #88]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	08db      	lsrs	r3, r3, #3
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	4a14      	ldr	r2, [pc, #80]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008222:	fa22 f303 	lsr.w	r3, r2, r3
 8008226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008228:	e01e      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800822a:	4b11      	ldr	r3, [pc, #68]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008236:	d106      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800823e:	d102      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008240:	4b0d      	ldr	r3, [pc, #52]	@ (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008244:	e010      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008246:	4b0a      	ldr	r3, [pc, #40]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800824e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008252:	d106      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800825a:	d102      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800825c:	4b07      	ldr	r3, [pc, #28]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800825e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008260:	e002      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008266:	e2e2      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008268:	e2e1      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800826a:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800826c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800826e:	e2de      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008270:	58024400 	.word	0x58024400
 8008274:	03d09000 	.word	0x03d09000
 8008278:	003d0900 	.word	0x003d0900
 800827c:	017d7840 	.word	0x017d7840
 8008280:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008288:	e2d1      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800828a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008292:	430b      	orrs	r3, r1
 8008294:	f040 809c 	bne.w	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008298:	4b93      	ldr	r3, [pc, #588]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800829a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800829c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80082a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082a8:	d054      	beq.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082b0:	f200 808b 	bhi.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082ba:	f000 8083 	beq.w	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80082be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082c4:	f200 8081 	bhi.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ce:	d02f      	beq.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80082d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082d6:	d878      	bhi.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80082de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e4:	d012      	beq.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80082e6:	e070      	b.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082e8:	4b7f      	ldr	r3, [pc, #508]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082f4:	d107      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fd5e 	bl	8008dbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008304:	e293      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800830a:	e290      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800830c:	4b76      	ldr	r3, [pc, #472]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008318:	d107      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800831a:	f107 0318 	add.w	r3, r7, #24
 800831e:	4618      	mov	r0, r3
 8008320:	f000 faa4 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008328:	e281      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800832e:	e27e      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008330:	4b6d      	ldr	r3, [pc, #436]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800833c:	d107      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800833e:	f107 030c 	add.w	r3, r7, #12
 8008342:	4618      	mov	r0, r3
 8008344:	f000 fbe6 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800834c:	e26f      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008352:	e26c      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008354:	4b64      	ldr	r3, [pc, #400]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008358:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800835c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800835e:	4b62      	ldr	r3, [pc, #392]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	2b04      	cmp	r3, #4
 8008368:	d10c      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800836a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836c:	2b00      	cmp	r3, #0
 800836e:	d109      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008370:	4b5d      	ldr	r3, [pc, #372]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	08db      	lsrs	r3, r3, #3
 8008376:	f003 0303 	and.w	r3, r3, #3
 800837a:	4a5c      	ldr	r2, [pc, #368]	@ (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800837c:	fa22 f303 	lsr.w	r3, r2, r3
 8008380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008382:	e01e      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008384:	4b58      	ldr	r3, [pc, #352]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800838c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008390:	d106      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008398:	d102      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800839a:	4b55      	ldr	r3, [pc, #340]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800839c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800839e:	e010      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083a0:	4b51      	ldr	r3, [pc, #324]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ac:	d106      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80083ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083b4:	d102      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083b6:	4b4f      	ldr	r3, [pc, #316]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083ba:	e002      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80083c0:	e235      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083c2:	e234      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083c4:	4b4c      	ldr	r3, [pc, #304]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c8:	e231      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ce:	e22e      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80083d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083d4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80083d8:	430b      	orrs	r3, r1
 80083da:	f040 808f 	bne.w	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80083de:	4b42      	ldr	r3, [pc, #264]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083e2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80083e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80083e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083ee:	d06b      	beq.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80083f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083f6:	d874      	bhi.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80083f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083fe:	d056      	beq.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008406:	d86c      	bhi.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800840e:	d03b      	beq.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008412:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008416:	d864      	bhi.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800841e:	d021      	beq.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008422:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008426:	d85c      	bhi.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842a:	2b00      	cmp	r3, #0
 800842c:	d004      	beq.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800842e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008434:	d004      	beq.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008436:	e054      	b.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008438:	f7fe fa30 	bl	800689c <HAL_RCC_GetPCLK1Freq>
 800843c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800843e:	e1f6      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008440:	4b29      	ldr	r3, [pc, #164]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008448:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800844c:	d107      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800844e:	f107 0318 	add.w	r3, r7, #24
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fa0a 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800845c:	e1e7      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008462:	e1e4      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008464:	4b20      	ldr	r3, [pc, #128]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800846c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008470:	d107      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008472:	f107 030c 	add.w	r3, r7, #12
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fb4c 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008480:	e1d5      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008486:	e1d2      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008488:	4b17      	ldr	r3, [pc, #92]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b04      	cmp	r3, #4
 8008492:	d109      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008494:	4b14      	ldr	r3, [pc, #80]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	08db      	lsrs	r3, r3, #3
 800849a:	f003 0303 	and.w	r3, r3, #3
 800849e:	4a13      	ldr	r2, [pc, #76]	@ (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80084a0:	fa22 f303 	lsr.w	r3, r2, r3
 80084a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084a6:	e1c2      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084ac:	e1bf      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80084ae:	4b0e      	ldr	r3, [pc, #56]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ba:	d102      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80084bc:	4b0c      	ldr	r3, [pc, #48]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084c0:	e1b5      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c6:	e1b2      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084c8:	4b07      	ldr	r3, [pc, #28]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084d4:	d102      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80084d6:	4b07      	ldr	r3, [pc, #28]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80084d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084da:	e1a8      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e0:	e1a5      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e6:	e1a2      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084e8:	58024400 	.word	0x58024400
 80084ec:	03d09000 	.word	0x03d09000
 80084f0:	003d0900 	.word	0x003d0900
 80084f4:	017d7840 	.word	0x017d7840
 80084f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80084fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008500:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008504:	430b      	orrs	r3, r1
 8008506:	d173      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008508:	4b9c      	ldr	r3, [pc, #624]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800850a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800850c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008510:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008518:	d02f      	beq.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800851a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008520:	d863      	bhi.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008524:	2b00      	cmp	r3, #0
 8008526:	d004      	beq.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800852e:	d012      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008530:	e05b      	b.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008532:	4b92      	ldr	r3, [pc, #584]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800853a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800853e:	d107      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008540:	f107 0318 	add.w	r3, r7, #24
 8008544:	4618      	mov	r0, r3
 8008546:	f000 f991 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854e:	e16e      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008554:	e16b      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008556:	4b89      	ldr	r3, [pc, #548]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800855e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008562:	d107      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008564:	f107 030c 	add.w	r3, r7, #12
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fad3 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008572:	e15c      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008578:	e159      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800857a:	4b80      	ldr	r3, [pc, #512]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800857c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008584:	4b7d      	ldr	r3, [pc, #500]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b04      	cmp	r3, #4
 800858e:	d10c      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008596:	4b79      	ldr	r3, [pc, #484]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	08db      	lsrs	r3, r3, #3
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	4a77      	ldr	r2, [pc, #476]	@ (8008780 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80085a2:	fa22 f303 	lsr.w	r3, r2, r3
 80085a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a8:	e01e      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085aa:	4b74      	ldr	r3, [pc, #464]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085b6:	d106      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80085b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085be:	d102      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085c0:	4b70      	ldr	r3, [pc, #448]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c4:	e010      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085c6:	4b6d      	ldr	r3, [pc, #436]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d2:	d106      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80085d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085da:	d102      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085dc:	4b6a      	ldr	r3, [pc, #424]	@ (8008788 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085e0:	e002      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085e6:	e122      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085e8:	e121      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ee:	e11e      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80085f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80085f8:	430b      	orrs	r3, r1
 80085fa:	d133      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80085fc:	4b5f      	ldr	r3, [pc, #380]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008604:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800860c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008612:	d012      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008614:	e023      	b.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008616:	4b59      	ldr	r3, [pc, #356]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800861e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008622:	d107      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fbc7 	bl	8008dbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008632:	e0fc      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008638:	e0f9      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800863a:	4b50      	ldr	r3, [pc, #320]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008646:	d107      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008648:	f107 0318 	add.w	r3, r7, #24
 800864c:	4618      	mov	r0, r3
 800864e:	f000 f90d 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008656:	e0ea      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008658:	2300      	movs	r3, #0
 800865a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800865c:	e0e7      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008662:	e0e4      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008668:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800866c:	430b      	orrs	r3, r1
 800866e:	f040 808d 	bne.w	800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008672:	4b42      	ldr	r3, [pc, #264]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008676:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800867a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800867c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008682:	d06b      	beq.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008686:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800868a:	d874      	bhi.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800868c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008692:	d056      	beq.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800869a:	d86c      	bhi.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800869c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80086a2:	d03b      	beq.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80086a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80086aa:	d864      	bhi.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086b2:	d021      	beq.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80086b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ba:	d85c      	bhi.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d004      	beq.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80086c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086c8:	d004      	beq.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80086ca:	e054      	b.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80086cc:	f000 f8b8 	bl	8008840 <HAL_RCCEx_GetD3PCLK1Freq>
 80086d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086d2:	e0ac      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086d4:	4b29      	ldr	r3, [pc, #164]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086e0:	d107      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086e2:	f107 0318 	add.w	r3, r7, #24
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 f8c0 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f0:	e09d      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f6:	e09a      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086f8:	4b20      	ldr	r3, [pc, #128]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008704:	d107      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008706:	f107 030c 	add.w	r3, r7, #12
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fa02 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008714:	e08b      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800871a:	e088      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800871c:	4b17      	ldr	r3, [pc, #92]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b04      	cmp	r3, #4
 8008726:	d109      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008728:	4b14      	ldr	r3, [pc, #80]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	4a13      	ldr	r2, [pc, #76]	@ (8008780 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008734:	fa22 f303 	lsr.w	r3, r2, r3
 8008738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800873a:	e078      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008740:	e075      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008742:	4b0e      	ldr	r3, [pc, #56]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800874e:	d102      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008750:	4b0c      	ldr	r3, [pc, #48]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008754:	e06b      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800875a:	e068      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800875c:	4b07      	ldr	r3, [pc, #28]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008768:	d102      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800876a:	4b07      	ldr	r3, [pc, #28]	@ (8008788 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800876c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800876e:	e05e      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008774:	e05b      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800877a:	e058      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800877c:	58024400 	.word	0x58024400
 8008780:	03d09000 	.word	0x03d09000
 8008784:	003d0900 	.word	0x003d0900
 8008788:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800878c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008790:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008794:	430b      	orrs	r3, r1
 8008796:	d148      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008798:	4b27      	ldr	r3, [pc, #156]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800879a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800879c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087a8:	d02a      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80087aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b0:	d838      	bhi.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80087b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087be:	d00d      	beq.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80087c0:	e030      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087ce:	d102      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80087d0:	4b1a      	ldr	r3, [pc, #104]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80087d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d4:	e02b      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087da:	e028      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087dc:	4b16      	ldr	r3, [pc, #88]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087e8:	d107      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fae4 	bl	8008dbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f8:	e019      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fe:	e016      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008800:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800880c:	d107      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800880e:	f107 0318 	add.w	r3, r7, #24
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f82a 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800881c:	e007      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008822:	e004      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008828:	e001      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800882e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008830:	4618      	mov	r0, r3
 8008832:	3740      	adds	r7, #64	@ 0x40
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	58024400 	.word	0x58024400
 800883c:	017d7840 	.word	0x017d7840

08008840 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008844:	f7fd fffa 	bl	800683c <HAL_RCC_GetHCLKFreq>
 8008848:	4602      	mov	r2, r0
 800884a:	4b06      	ldr	r3, [pc, #24]	@ (8008864 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	091b      	lsrs	r3, r3, #4
 8008850:	f003 0307 	and.w	r3, r3, #7
 8008854:	4904      	ldr	r1, [pc, #16]	@ (8008868 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008856:	5ccb      	ldrb	r3, [r1, r3]
 8008858:	f003 031f 	and.w	r3, r3, #31
 800885c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008860:	4618      	mov	r0, r3
 8008862:	bd80      	pop	{r7, pc}
 8008864:	58024400 	.word	0x58024400
 8008868:	08016a9c 	.word	0x08016a9c

0800886c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800886c:	b480      	push	{r7}
 800886e:	b089      	sub	sp, #36	@ 0x24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008874:	4ba1      	ldr	r3, [pc, #644]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008878:	f003 0303 	and.w	r3, r3, #3
 800887c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800887e:	4b9f      	ldr	r3, [pc, #636]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008882:	0b1b      	lsrs	r3, r3, #12
 8008884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008888:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800888a:	4b9c      	ldr	r3, [pc, #624]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800888c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888e:	091b      	lsrs	r3, r3, #4
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008896:	4b99      	ldr	r3, [pc, #612]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800889a:	08db      	lsrs	r3, r3, #3
 800889c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	fb02 f303 	mul.w	r3, r2, r3
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 8111 	beq.w	8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	f000 8083 	beq.w	80089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	f200 80a1 	bhi.w	8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d056      	beq.n	8008984 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80088d6:	e099      	b.n	8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088d8:	4b88      	ldr	r3, [pc, #544]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0320 	and.w	r3, r3, #32
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d02d      	beq.n	8008940 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088e4:	4b85      	ldr	r3, [pc, #532]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	08db      	lsrs	r3, r3, #3
 80088ea:	f003 0303 	and.w	r3, r3, #3
 80088ee:	4a84      	ldr	r2, [pc, #528]	@ (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80088f0:	fa22 f303 	lsr.w	r3, r2, r3
 80088f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	ee07 3a90 	vmov	s15, r3
 80088fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890e:	4b7b      	ldr	r3, [pc, #492]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008922:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800893e:	e087      	b.n	8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800894e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008952:	4b6a      	ldr	r3, [pc, #424]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895a:	ee07 3a90 	vmov	s15, r3
 800895e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008962:	ed97 6a03 	vldr	s12, [r7, #12]
 8008966:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800896a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008982:	e065      	b.n	8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008996:	4b59      	ldr	r3, [pc, #356]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089c6:	e043      	b.n	8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80089d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089da:	4b48      	ldr	r3, [pc, #288]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a0a:	e021      	b.n	8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a1e:	4b37      	ldr	r3, [pc, #220]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008a50:	4b2a      	ldr	r3, [pc, #168]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a54:	0a5b      	lsrs	r3, r3, #9
 8008a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a76:	ee17 2a90 	vmov	r2, s15
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a82:	0c1b      	lsrs	r3, r3, #16
 8008a84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a88:	ee07 3a90 	vmov	s15, r3
 8008a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa4:	ee17 2a90 	vmov	r2, s15
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008aac:	4b13      	ldr	r3, [pc, #76]	@ (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab0:	0e1b      	lsrs	r3, r3, #24
 8008ab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ad2:	ee17 2a90 	vmov	r2, s15
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ada:	e008      	b.n	8008aee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	609a      	str	r2, [r3, #8]
}
 8008aee:	bf00      	nop
 8008af0:	3724      	adds	r7, #36	@ 0x24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	58024400 	.word	0x58024400
 8008b00:	03d09000 	.word	0x03d09000
 8008b04:	46000000 	.word	0x46000000
 8008b08:	4c742400 	.word	0x4c742400
 8008b0c:	4a742400 	.word	0x4a742400
 8008b10:	4bbebc20 	.word	0x4bbebc20

08008b14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b089      	sub	sp, #36	@ 0x24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b1c:	4ba1      	ldr	r3, [pc, #644]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b20:	f003 0303 	and.w	r3, r3, #3
 8008b24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b26:	4b9f      	ldr	r3, [pc, #636]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2a:	0d1b      	lsrs	r3, r3, #20
 8008b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b32:	4b9c      	ldr	r3, [pc, #624]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b36:	0a1b      	lsrs	r3, r3, #8
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008b3e:	4b99      	ldr	r3, [pc, #612]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b42:	08db      	lsrs	r3, r3, #3
 8008b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	fb02 f303 	mul.w	r3, r2, r3
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8111 	beq.w	8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	f000 8083 	beq.w	8008c70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	f200 80a1 	bhi.w	8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d056      	beq.n	8008c2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008b7e:	e099      	b.n	8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b80:	4b88      	ldr	r3, [pc, #544]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0320 	and.w	r3, r3, #32
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d02d      	beq.n	8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b8c:	4b85      	ldr	r3, [pc, #532]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	08db      	lsrs	r3, r3, #3
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	4a84      	ldr	r2, [pc, #528]	@ (8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b98:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	ee07 3a90 	vmov	s15, r3
 8008ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008be6:	e087      	b.n	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008db0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c2a:	e065      	b.n	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3e:	4b59      	ldr	r3, [pc, #356]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c6e:	e043      	b.n	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008db8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c82:	4b48      	ldr	r3, [pc, #288]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cb2:	e021      	b.n	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc6:	4b37      	ldr	r3, [pc, #220]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfc:	0a5b      	lsrs	r3, r3, #9
 8008cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d1e:	ee17 2a90 	vmov	r2, s15
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d26:	4b1f      	ldr	r3, [pc, #124]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2a:	0c1b      	lsrs	r3, r3, #16
 8008d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d4c:	ee17 2a90 	vmov	r2, s15
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008d54:	4b13      	ldr	r3, [pc, #76]	@ (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d58:	0e1b      	lsrs	r3, r3, #24
 8008d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d7a:	ee17 2a90 	vmov	r2, s15
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d82:	e008      	b.n	8008d96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	609a      	str	r2, [r3, #8]
}
 8008d96:	bf00      	nop
 8008d98:	3724      	adds	r7, #36	@ 0x24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	58024400 	.word	0x58024400
 8008da8:	03d09000 	.word	0x03d09000
 8008dac:	46000000 	.word	0x46000000
 8008db0:	4c742400 	.word	0x4c742400
 8008db4:	4a742400 	.word	0x4a742400
 8008db8:	4bbebc20 	.word	0x4bbebc20

08008dbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b089      	sub	sp, #36	@ 0x24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dc4:	4ba0      	ldr	r3, [pc, #640]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc8:	f003 0303 	and.w	r3, r3, #3
 8008dcc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008dce:	4b9e      	ldr	r3, [pc, #632]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd2:	091b      	lsrs	r3, r3, #4
 8008dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dd8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008dda:	4b9b      	ldr	r3, [pc, #620]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008de4:	4b98      	ldr	r3, [pc, #608]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008de8:	08db      	lsrs	r3, r3, #3
 8008dea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	fb02 f303 	mul.w	r3, r2, r3
 8008df4:	ee07 3a90 	vmov	s15, r3
 8008df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 8111 	beq.w	800902a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	f000 8083 	beq.w	8008f16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	f200 80a1 	bhi.w	8008f5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d056      	beq.n	8008ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008e24:	e099      	b.n	8008f5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e26:	4b88      	ldr	r3, [pc, #544]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d02d      	beq.n	8008e8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e32:	4b85      	ldr	r3, [pc, #532]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	08db      	lsrs	r3, r3, #3
 8008e38:	f003 0303 	and.w	r3, r3, #3
 8008e3c:	4a83      	ldr	r2, [pc, #524]	@ (800904c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	ee07 3a90 	vmov	s15, r3
 8008e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e5c:	4b7a      	ldr	r3, [pc, #488]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e64:	ee07 3a90 	vmov	s15, r3
 8008e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e70:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009050 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e8c:	e087      	b.n	8008f9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	ee07 3a90 	vmov	s15, r3
 8008e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e98:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009054 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea0:	4b69      	ldr	r3, [pc, #420]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea8:	ee07 3a90 	vmov	s15, r3
 8008eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009050 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008eb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ecc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ed0:	e065      	b.n	8008f9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	ee07 3a90 	vmov	s15, r3
 8008ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008edc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee4:	4b58      	ldr	r3, [pc, #352]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eec:	ee07 3a90 	vmov	s15, r3
 8008ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ef8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009050 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f14:	e043      	b.n	8008f9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	ee07 3a90 	vmov	s15, r3
 8008f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f20:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800905c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f28:	4b47      	ldr	r3, [pc, #284]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f30:	ee07 3a90 	vmov	s15, r3
 8008f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f38:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f3c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009050 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f58:	e021      	b.n	8008f9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f64:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009054 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6c:	4b36      	ldr	r3, [pc, #216]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f74:	ee07 3a90 	vmov	s15, r3
 8008f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f80:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009050 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa2:	0a5b      	lsrs	r3, r3, #9
 8008fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fa8:	ee07 3a90 	vmov	s15, r3
 8008fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fc4:	ee17 2a90 	vmov	r2, s15
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd0:	0c1b      	lsrs	r3, r3, #16
 8008fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ff2:	ee17 2a90 	vmov	r2, s15
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008ffa:	4b13      	ldr	r3, [pc, #76]	@ (8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ffe:	0e1b      	lsrs	r3, r3, #24
 8009000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009004:	ee07 3a90 	vmov	s15, r3
 8009008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009014:	edd7 6a07 	vldr	s13, [r7, #28]
 8009018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800901c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009020:	ee17 2a90 	vmov	r2, s15
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009028:	e008      	b.n	800903c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	609a      	str	r2, [r3, #8]
}
 800903c:	bf00      	nop
 800903e:	3724      	adds	r7, #36	@ 0x24
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	58024400 	.word	0x58024400
 800904c:	03d09000 	.word	0x03d09000
 8009050:	46000000 	.word	0x46000000
 8009054:	4c742400 	.word	0x4c742400
 8009058:	4a742400 	.word	0x4a742400
 800905c:	4bbebc20 	.word	0x4bbebc20

08009060 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800906e:	4b53      	ldr	r3, [pc, #332]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009072:	f003 0303 	and.w	r3, r3, #3
 8009076:	2b03      	cmp	r3, #3
 8009078:	d101      	bne.n	800907e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e099      	b.n	80091b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800907e:	4b4f      	ldr	r3, [pc, #316]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a4e      	ldr	r2, [pc, #312]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009084:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800908a:	f7f9 fcc5 	bl	8002a18 <HAL_GetTick>
 800908e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009090:	e008      	b.n	80090a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009092:	f7f9 fcc1 	bl	8002a18 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	2b02      	cmp	r3, #2
 800909e:	d901      	bls.n	80090a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e086      	b.n	80091b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090a4:	4b45      	ldr	r3, [pc, #276]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1f0      	bne.n	8009092 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80090b0:	4b42      	ldr	r3, [pc, #264]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 80090b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	031b      	lsls	r3, r3, #12
 80090be:	493f      	ldr	r1, [pc, #252]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	025b      	lsls	r3, r3, #9
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	431a      	orrs	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	3b01      	subs	r3, #1
 80090e0:	041b      	lsls	r3, r3, #16
 80090e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80090e6:	431a      	orrs	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	061b      	lsls	r3, r3, #24
 80090f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80090f4:	4931      	ldr	r1, [pc, #196]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80090fa:	4b30      	ldr	r3, [pc, #192]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 80090fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	492d      	ldr	r1, [pc, #180]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009108:	4313      	orrs	r3, r2
 800910a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800910c:	4b2b      	ldr	r3, [pc, #172]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 800910e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009110:	f023 0220 	bic.w	r2, r3, #32
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	4928      	ldr	r1, [pc, #160]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 800911a:	4313      	orrs	r3, r2
 800911c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800911e:	4b27      	ldr	r3, [pc, #156]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009122:	4a26      	ldr	r2, [pc, #152]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009124:	f023 0310 	bic.w	r3, r3, #16
 8009128:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800912a:	4b24      	ldr	r3, [pc, #144]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 800912c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800912e:	4b24      	ldr	r3, [pc, #144]	@ (80091c0 <RCCEx_PLL2_Config+0x160>)
 8009130:	4013      	ands	r3, r2
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	69d2      	ldr	r2, [r2, #28]
 8009136:	00d2      	lsls	r2, r2, #3
 8009138:	4920      	ldr	r1, [pc, #128]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 800913a:	4313      	orrs	r3, r2
 800913c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800913e:	4b1f      	ldr	r3, [pc, #124]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009142:	4a1e      	ldr	r2, [pc, #120]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009144:	f043 0310 	orr.w	r3, r3, #16
 8009148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009150:	4b1a      	ldr	r3, [pc, #104]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009154:	4a19      	ldr	r2, [pc, #100]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009156:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800915a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800915c:	e00f      	b.n	800917e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d106      	bne.n	8009172 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009164:	4b15      	ldr	r3, [pc, #84]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009168:	4a14      	ldr	r2, [pc, #80]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 800916a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800916e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009170:	e005      	b.n	800917e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009172:	4b12      	ldr	r3, [pc, #72]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009176:	4a11      	ldr	r2, [pc, #68]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009178:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800917c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800917e:	4b0f      	ldr	r3, [pc, #60]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a0e      	ldr	r2, [pc, #56]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 8009184:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800918a:	f7f9 fc45 	bl	8002a18 <HAL_GetTick>
 800918e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009190:	e008      	b.n	80091a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009192:	f7f9 fc41 	bl	8002a18 <HAL_GetTick>
 8009196:	4602      	mov	r2, r0
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	2b02      	cmp	r3, #2
 800919e:	d901      	bls.n	80091a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e006      	b.n	80091b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091a4:	4b05      	ldr	r3, [pc, #20]	@ (80091bc <RCCEx_PLL2_Config+0x15c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d0f0      	beq.n	8009192 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	58024400 	.word	0x58024400
 80091c0:	ffff0007 	.word	0xffff0007

080091c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091d2:	4b53      	ldr	r3, [pc, #332]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80091d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d6:	f003 0303 	and.w	r3, r3, #3
 80091da:	2b03      	cmp	r3, #3
 80091dc:	d101      	bne.n	80091e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e099      	b.n	8009316 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091e2:	4b4f      	ldr	r3, [pc, #316]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a4e      	ldr	r2, [pc, #312]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80091e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091ee:	f7f9 fc13 	bl	8002a18 <HAL_GetTick>
 80091f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091f4:	e008      	b.n	8009208 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091f6:	f7f9 fc0f 	bl	8002a18 <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b02      	cmp	r3, #2
 8009202:	d901      	bls.n	8009208 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e086      	b.n	8009316 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009208:	4b45      	ldr	r3, [pc, #276]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1f0      	bne.n	80091f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009214:	4b42      	ldr	r3, [pc, #264]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 8009216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009218:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	051b      	lsls	r3, r3, #20
 8009222:	493f      	ldr	r1, [pc, #252]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 8009224:	4313      	orrs	r3, r2
 8009226:	628b      	str	r3, [r1, #40]	@ 0x28
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	3b01      	subs	r3, #1
 800922e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	3b01      	subs	r3, #1
 8009238:	025b      	lsls	r3, r3, #9
 800923a:	b29b      	uxth	r3, r3
 800923c:	431a      	orrs	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	3b01      	subs	r3, #1
 8009244:	041b      	lsls	r3, r3, #16
 8009246:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800924a:	431a      	orrs	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	3b01      	subs	r3, #1
 8009252:	061b      	lsls	r3, r3, #24
 8009254:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009258:	4931      	ldr	r1, [pc, #196]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 800925a:	4313      	orrs	r3, r2
 800925c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800925e:	4b30      	ldr	r3, [pc, #192]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 8009260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009262:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	492d      	ldr	r1, [pc, #180]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 800926c:	4313      	orrs	r3, r2
 800926e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009270:	4b2b      	ldr	r3, [pc, #172]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 8009272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009274:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	4928      	ldr	r1, [pc, #160]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 800927e:	4313      	orrs	r3, r2
 8009280:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009282:	4b27      	ldr	r3, [pc, #156]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 8009284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009286:	4a26      	ldr	r2, [pc, #152]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 8009288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800928c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800928e:	4b24      	ldr	r3, [pc, #144]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 8009290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009292:	4b24      	ldr	r3, [pc, #144]	@ (8009324 <RCCEx_PLL3_Config+0x160>)
 8009294:	4013      	ands	r3, r2
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	69d2      	ldr	r2, [r2, #28]
 800929a:	00d2      	lsls	r2, r2, #3
 800929c:	4920      	ldr	r1, [pc, #128]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 800929e:	4313      	orrs	r3, r2
 80092a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092a2:	4b1f      	ldr	r3, [pc, #124]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80092a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80092a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d106      	bne.n	80092c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80092b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80092b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b8:	4a19      	ldr	r2, [pc, #100]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80092ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80092be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092c0:	e00f      	b.n	80092e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d106      	bne.n	80092d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092c8:	4b15      	ldr	r3, [pc, #84]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	4a14      	ldr	r2, [pc, #80]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80092ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80092d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092d4:	e005      	b.n	80092e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092d6:	4b12      	ldr	r3, [pc, #72]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80092d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092da:	4a11      	ldr	r2, [pc, #68]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80092dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a0e      	ldr	r2, [pc, #56]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 80092e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ee:	f7f9 fb93 	bl	8002a18 <HAL_GetTick>
 80092f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092f4:	e008      	b.n	8009308 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80092f6:	f7f9 fb8f 	bl	8002a18 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	2b02      	cmp	r3, #2
 8009302:	d901      	bls.n	8009308 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e006      	b.n	8009316 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009308:	4b05      	ldr	r3, [pc, #20]	@ (8009320 <RCCEx_PLL3_Config+0x15c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0f0      	beq.n	80092f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	58024400 	.word	0x58024400
 8009324:	ffff0007 	.word	0xffff0007

08009328 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	@ 0x28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e075      	b.n	8009426 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d105      	bne.n	8009352 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7f8 ff07 	bl	8002160 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2204      	movs	r2, #4
 8009356:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f868 	bl	8009430 <HAL_SD_InitCard>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e05d      	b.n	8009426 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800936a:	f107 0308 	add.w	r3, r7, #8
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fdb5 	bl	8009ee0 <HAL_SD_GetCardStatus>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e052      	b.n	8009426 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009380:	7e3b      	ldrb	r3, [r7, #24]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009386:	7e7b      	ldrb	r3, [r7, #25]
 8009388:	b2db      	uxtb	r3, r3
 800938a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009390:	2b01      	cmp	r3, #1
 8009392:	d10a      	bne.n	80093aa <HAL_SD_Init+0x82>
 8009394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d102      	bne.n	80093a0 <HAL_SD_Init+0x78>
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80093a8:	e00b      	b.n	80093c2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d104      	bne.n	80093bc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80093ba:	e002      	b.n	80093c2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fe73 	bl	800a0b4 <HAL_SD_ConfigWideBusOperation>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e026      	b.n	8009426 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80093d8:	f7f9 fb1e 	bl	8002a18 <HAL_GetTick>
 80093dc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80093de:	e011      	b.n	8009404 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80093e0:	f7f9 fb1a 	bl	8002a18 <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ee:	d109      	bne.n	8009404 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80093f6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e010      	b.n	8009426 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 ff67 	bl	800a2d8 <HAL_SD_GetCardState>
 800940a:	4603      	mov	r3, r0
 800940c:	2b04      	cmp	r3, #4
 800940e:	d1e7      	bne.n	80093e0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3728      	adds	r7, #40	@ 0x28
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009430:	b590      	push	{r4, r7, lr}
 8009432:	b08d      	sub	sp, #52	@ 0x34
 8009434:	af02      	add	r7, sp, #8
 8009436:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009438:	2300      	movs	r3, #0
 800943a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800943c:	2300      	movs	r3, #0
 800943e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009440:	2300      	movs	r3, #0
 8009442:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009444:	2300      	movs	r3, #0
 8009446:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009448:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800944c:	f04f 0100 	mov.w	r1, #0
 8009450:	f7fe fc76 	bl	8007d40 <HAL_RCCEx_GetPeriphCLKFreq>
 8009454:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009458:	2b00      	cmp	r3, #0
 800945a:	d109      	bne.n	8009470 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800946a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e070      	b.n	8009552 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009472:	0a1b      	lsrs	r3, r3, #8
 8009474:	4a39      	ldr	r2, [pc, #228]	@ (800955c <HAL_SD_InitCard+0x12c>)
 8009476:	fba2 2303 	umull	r2, r3, r2, r3
 800947a:	091b      	lsrs	r3, r3, #4
 800947c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681c      	ldr	r4, [r3, #0]
 8009482:	466a      	mov	r2, sp
 8009484:	f107 0318 	add.w	r3, r7, #24
 8009488:	e893 0003 	ldmia.w	r3, {r0, r1}
 800948c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009490:	f107 030c 	add.w	r3, r7, #12
 8009494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009496:	4620      	mov	r0, r4
 8009498:	f004 f9b6 	bl	800d808 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f004 f9f9 	bl	800d898 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80094b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80094be:	4a28      	ldr	r2, [pc, #160]	@ (8009560 <HAL_SD_InitCard+0x130>)
 80094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c6:	3301      	adds	r3, #1
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7f9 fab1 	bl	8002a30 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fff0 	bl	800a4b4 <SD_PowerON>
 80094d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00b      	beq.n	80094f4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	431a      	orrs	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e02e      	b.n	8009552 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 ff0f 	bl	800a318 <SD_InitCard>
 80094fa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00b      	beq.n	800951a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	431a      	orrs	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e01b      	b.n	8009552 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009522:	4618      	mov	r0, r3
 8009524:	f004 fa4e 	bl	800d9c4 <SDMMC_CmdBlockLength>
 8009528:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00f      	beq.n	8009550 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a0b      	ldr	r2, [pc, #44]	@ (8009564 <HAL_SD_InitCard+0x134>)
 8009536:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	431a      	orrs	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e000      	b.n	8009552 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	372c      	adds	r7, #44	@ 0x2c
 8009556:	46bd      	mov	sp, r7
 8009558:	bd90      	pop	{r4, r7, pc}
 800955a:	bf00      	nop
 800955c:	014f8b59 	.word	0x014f8b59
 8009560:	00012110 	.word	0x00012110
 8009564:	1fe00fff 	.word	0x1fe00fff

08009568 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b092      	sub	sp, #72	@ 0x48
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
 8009574:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009576:	f7f9 fa4f 	bl	8002a18 <HAL_GetTick>
 800957a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d107      	bne.n	800959a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800958e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e167      	b.n	800986a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	f040 815a 	bne.w	800985c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80095ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	441a      	add	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d907      	bls.n	80095cc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095c0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e14e      	b.n	800986a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2203      	movs	r2, #3
 80095d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2200      	movs	r2, #0
 80095da:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d002      	beq.n	80095ea <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80095e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e6:	025b      	lsls	r3, r3, #9
 80095e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095ea:	f04f 33ff 	mov.w	r3, #4294967295
 80095ee:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	025b      	lsls	r3, r3, #9
 80095f4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80095f6:	2390      	movs	r3, #144	@ 0x90
 80095f8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80095fa:	2302      	movs	r3, #2
 80095fc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095fe:	2300      	movs	r3, #0
 8009600:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009602:	2300      	movs	r3, #0
 8009604:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f107 0214 	add.w	r2, r7, #20
 800960e:	4611      	mov	r1, r2
 8009610:	4618      	mov	r0, r3
 8009612:	f004 f9ab 	bl	800d96c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009624:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d90a      	bls.n	8009642 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2202      	movs	r2, #2
 8009630:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009638:	4618      	mov	r0, r3
 800963a:	f004 fa09 	bl	800da50 <SDMMC_CmdReadMultiBlock>
 800963e:	6478      	str	r0, [r7, #68]	@ 0x44
 8009640:	e009      	b.n	8009656 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2201      	movs	r2, #1
 8009646:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800964e:	4618      	mov	r0, r3
 8009650:	f004 f9db 	bl	800da0a <SDMMC_CmdReadSingleBlock>
 8009654:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009658:	2b00      	cmp	r3, #0
 800965a:	d012      	beq.n	8009682 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a84      	ldr	r2, [pc, #528]	@ (8009874 <HAL_SD_ReadBlocks+0x30c>)
 8009662:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800966a:	431a      	orrs	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e0f3      	b.n	800986a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009686:	e058      	b.n	800973a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800968e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d033      	beq.n	80096fe <HAL_SD_ReadBlocks+0x196>
 8009696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009698:	2b1f      	cmp	r3, #31
 800969a:	d930      	bls.n	80096fe <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800969c:	2300      	movs	r3, #0
 800969e:	643b      	str	r3, [r7, #64]	@ 0x40
 80096a0:	e027      	b.n	80096f2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f004 f8d8 	bl	800d85c <SDMMC_ReadFIFO>
 80096ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80096ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80096b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b8:	3301      	adds	r3, #1
 80096ba:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80096bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80096c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c8:	3301      	adds	r3, #1
 80096ca:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80096cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ce:	0c1b      	lsrs	r3, r3, #16
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80096d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d8:	3301      	adds	r3, #1
 80096da:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096de:	0e1b      	lsrs	r3, r3, #24
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80096e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e8:	3301      	adds	r3, #1
 80096ea:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 80096ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ee:	3301      	adds	r3, #1
 80096f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80096f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096f4:	2b07      	cmp	r3, #7
 80096f6:	d9d4      	bls.n	80096a2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80096f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fa:	3b20      	subs	r3, #32
 80096fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80096fe:	f7f9 f98b 	bl	8002a18 <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800970a:	429a      	cmp	r2, r3
 800970c:	d902      	bls.n	8009714 <HAL_SD_ReadBlocks+0x1ac>
 800970e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009710:	2b00      	cmp	r3, #0
 8009712:	d112      	bne.n	800973a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a56      	ldr	r2, [pc, #344]	@ (8009874 <HAL_SD_ReadBlocks+0x30c>)
 800971a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009720:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e097      	b.n	800986a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009740:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009744:	2b00      	cmp	r3, #0
 8009746:	d09f      	beq.n	8009688 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68da      	ldr	r2, [r3, #12]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009756:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800975e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009762:	2b00      	cmp	r3, #0
 8009764:	d022      	beq.n	80097ac <HAL_SD_ReadBlocks+0x244>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d91f      	bls.n	80097ac <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009770:	2b03      	cmp	r3, #3
 8009772:	d01b      	beq.n	80097ac <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4618      	mov	r0, r3
 800977a:	f004 f9d3 	bl	800db24 <SDMMC_CmdStopTransfer>
 800977e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009782:	2b00      	cmp	r3, #0
 8009784:	d012      	beq.n	80097ac <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a3a      	ldr	r2, [pc, #232]	@ (8009874 <HAL_SD_ReadBlocks+0x30c>)
 800978c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009794:	431a      	orrs	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e05e      	b.n	800986a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097b2:	f003 0308 	and.w	r3, r3, #8
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d012      	beq.n	80097e0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a2d      	ldr	r2, [pc, #180]	@ (8009874 <HAL_SD_ReadBlocks+0x30c>)
 80097c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c6:	f043 0208 	orr.w	r2, r3, #8
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e044      	b.n	800986a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d012      	beq.n	8009814 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a20      	ldr	r2, [pc, #128]	@ (8009874 <HAL_SD_ReadBlocks+0x30c>)
 80097f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097fa:	f043 0202 	orr.w	r2, r3, #2
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e02a      	b.n	800986a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d012      	beq.n	8009848 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a13      	ldr	r2, [pc, #76]	@ (8009874 <HAL_SD_ReadBlocks+0x30c>)
 8009828:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800982e:	f043 0220 	orr.w	r2, r3, #32
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e010      	b.n	800986a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a0a      	ldr	r2, [pc, #40]	@ (8009878 <HAL_SD_ReadBlocks+0x310>)
 800984e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	e006      	b.n	800986a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009860:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
  }
}
 800986a:	4618      	mov	r0, r3
 800986c:	3748      	adds	r7, #72	@ 0x48
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	1fe00fff 	.word	0x1fe00fff
 8009878:	18000f3a 	.word	0x18000f3a

0800987c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b092      	sub	sp, #72	@ 0x48
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800988a:	f7f9 f8c5 	bl	8002a18 <HAL_GetTick>
 800988e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d107      	bne.n	80098ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e16b      	b.n	8009b86 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	f040 815e 	bne.w	8009b78 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80098c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	441a      	add	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d907      	bls.n	80098e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098d4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e152      	b.n	8009b86 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2203      	movs	r2, #3
 80098e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2200      	movs	r2, #0
 80098ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d002      	beq.n	80098fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80098f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fa:	025b      	lsls	r3, r3, #9
 80098fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009902:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	025b      	lsls	r3, r3, #9
 8009908:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800990a:	2390      	movs	r3, #144	@ 0x90
 800990c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800990e:	2300      	movs	r3, #0
 8009910:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009912:	2300      	movs	r3, #0
 8009914:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009916:	2300      	movs	r3, #0
 8009918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f107 0218 	add.w	r2, r7, #24
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f004 f821 	bl	800d96c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009938:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d90a      	bls.n	8009956 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2220      	movs	r2, #32
 8009944:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800994c:	4618      	mov	r0, r3
 800994e:	f004 f8c5 	bl	800dadc <SDMMC_CmdWriteMultiBlock>
 8009952:	6478      	str	r0, [r7, #68]	@ 0x44
 8009954:	e009      	b.n	800996a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2210      	movs	r2, #16
 800995a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009962:	4618      	mov	r0, r3
 8009964:	f004 f897 	bl	800da96 <SDMMC_CmdWriteSingleBlock>
 8009968:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800996a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800996c:	2b00      	cmp	r3, #0
 800996e:	d012      	beq.n	8009996 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a86      	ldr	r2, [pc, #536]	@ (8009b90 <HAL_SD_WriteBlocks+0x314>)
 8009976:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800997c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800997e:	431a      	orrs	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e0f7      	b.n	8009b86 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800999a:	e05c      	b.n	8009a56 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d037      	beq.n	8009a1a <HAL_SD_WriteBlocks+0x19e>
 80099aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ac:	2b1f      	cmp	r3, #31
 80099ae:	d934      	bls.n	8009a1a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80099b0:	2300      	movs	r3, #0
 80099b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80099b4:	e02b      	b.n	8009a0e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80099b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80099bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099be:	3301      	adds	r3, #1
 80099c0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80099c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	021a      	lsls	r2, r3, #8
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80099ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d0:	3301      	adds	r3, #1
 80099d2:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80099d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	041a      	lsls	r2, r3, #16
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	4313      	orrs	r3, r2
 80099de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80099e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e2:	3301      	adds	r3, #1
 80099e4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80099e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	061a      	lsls	r2, r3, #24
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80099f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f4:	3301      	adds	r3, #1
 80099f6:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f107 0214 	add.w	r2, r7, #20
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f003 ff37 	bl	800d876 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a10:	2b07      	cmp	r3, #7
 8009a12:	d9d0      	bls.n	80099b6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a16:	3b20      	subs	r3, #32
 8009a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009a1a:	f7f8 fffd 	bl	8002a18 <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d902      	bls.n	8009a30 <HAL_SD_WriteBlocks+0x1b4>
 8009a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d112      	bne.n	8009a56 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a56      	ldr	r2, [pc, #344]	@ (8009b90 <HAL_SD_WriteBlocks+0x314>)
 8009a36:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e097      	b.n	8009b86 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a5c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d09b      	beq.n	800999c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68da      	ldr	r2, [r3, #12]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a72:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d022      	beq.n	8009ac8 <HAL_SD_WriteBlocks+0x24c>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d91f      	bls.n	8009ac8 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d01b      	beq.n	8009ac8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f004 f845 	bl	800db24 <SDMMC_CmdStopTransfer>
 8009a9a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d012      	beq.n	8009ac8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a3a      	ldr	r2, [pc, #232]	@ (8009b90 <HAL_SD_WriteBlocks+0x314>)
 8009aa8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e05e      	b.n	8009b86 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ace:	f003 0308 	and.w	r3, r3, #8
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d012      	beq.n	8009afc <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a2d      	ldr	r2, [pc, #180]	@ (8009b90 <HAL_SD_WriteBlocks+0x314>)
 8009adc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ae2:	f043 0208 	orr.w	r2, r3, #8
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e044      	b.n	8009b86 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d012      	beq.n	8009b30 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a20      	ldr	r2, [pc, #128]	@ (8009b90 <HAL_SD_WriteBlocks+0x314>)
 8009b10:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b16:	f043 0202 	orr.w	r2, r3, #2
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e02a      	b.n	8009b86 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b36:	f003 0310 	and.w	r3, r3, #16
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d012      	beq.n	8009b64 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a13      	ldr	r2, [pc, #76]	@ (8009b90 <HAL_SD_WriteBlocks+0x314>)
 8009b44:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b4a:	f043 0210 	orr.w	r2, r3, #16
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e010      	b.n	8009b86 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a0a      	ldr	r2, [pc, #40]	@ (8009b94 <HAL_SD_WriteBlocks+0x318>)
 8009b6a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	e006      	b.n	8009b86 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b7c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
  }
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3748      	adds	r7, #72	@ 0x48
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	1fe00fff 	.word	0x1fe00fff
 8009b94:	18000f3a 	.word	0x18000f3a

08009b98 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ba6:	0f9b      	lsrs	r3, r3, #30
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bb2:	0e9b      	lsrs	r3, r3, #26
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	f003 030f 	and.w	r3, r3, #15
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bc4:	0e1b      	lsrs	r3, r3, #24
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	f003 0303 	and.w	r3, r3, #3
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bd6:	0c1b      	lsrs	r3, r3, #16
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009be2:	0a1b      	lsrs	r3, r3, #8
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bf8:	0d1b      	lsrs	r3, r3, #20
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c04:	0c1b      	lsrs	r3, r3, #16
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	f003 030f 	and.w	r3, r3, #15
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c16:	0bdb      	lsrs	r3, r3, #15
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c28:	0b9b      	lsrs	r3, r3, #14
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c3a:	0b5b      	lsrs	r3, r3, #13
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c4c:	0b1b      	lsrs	r3, r3, #12
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d163      	bne.n	8009d30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c6c:	009a      	lsls	r2, r3, #2
 8009c6e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009c72:	4013      	ands	r3, r2
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009c78:	0f92      	lsrs	r2, r2, #30
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c84:	0edb      	lsrs	r3, r3, #27
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	f003 0307 	and.w	r3, r3, #7
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c96:	0e1b      	lsrs	r3, r3, #24
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	f003 0307 	and.w	r3, r3, #7
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ca8:	0d5b      	lsrs	r3, r3, #21
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	f003 0307 	and.w	r3, r3, #7
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cba:	0c9b      	lsrs	r3, r3, #18
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	f003 0307 	and.w	r3, r3, #7
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ccc:	0bdb      	lsrs	r3, r3, #15
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	f003 0307 	and.w	r3, r3, #7
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	7e1b      	ldrb	r3, [r3, #24]
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	f003 0307 	and.w	r3, r3, #7
 8009cee:	3302      	adds	r3, #2
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009cfa:	fb03 f202 	mul.w	r2, r3, r2
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	7a1b      	ldrb	r3, [r3, #8]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 030f 	and.w	r3, r3, #15
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	409a      	lsls	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009d1c:	0a52      	lsrs	r2, r2, #9
 8009d1e:	fb03 f202 	mul.w	r2, r3, r2
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8009d2e:	e031      	b.n	8009d94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d11d      	bne.n	8009d74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d3c:	041b      	lsls	r3, r3, #16
 8009d3e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d46:	0c1b      	lsrs	r3, r3, #16
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	3301      	adds	r3, #1
 8009d54:	029a      	lsls	r2, r3, #10
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d68:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	655a      	str	r2, [r3, #84]	@ 0x54
 8009d72:	e00f      	b.n	8009d94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a58      	ldr	r2, [pc, #352]	@ (8009edc <HAL_SD_GetCardCSD+0x344>)
 8009d7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e09d      	b.n	8009ed0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d98:	0b9b      	lsrs	r3, r3, #14
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009daa:	09db      	lsrs	r3, r3, #7
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dcc:	0fdb      	lsrs	r3, r3, #31
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dd8:	0f5b      	lsrs	r3, r3, #29
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	f003 0303 	and.w	r3, r3, #3
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dea:	0e9b      	lsrs	r3, r3, #26
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dfc:	0d9b      	lsrs	r3, r3, #22
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	f003 030f 	and.w	r3, r3, #15
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e0e:	0d5b      	lsrs	r3, r3, #21
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e2a:	0c1b      	lsrs	r3, r3, #16
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e3e:	0bdb      	lsrs	r3, r3, #15
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e52:	0b9b      	lsrs	r3, r3, #14
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	f003 0301 	and.w	r3, r3, #1
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e66:	0b5b      	lsrs	r3, r3, #13
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e7a:	0b1b      	lsrs	r3, r3, #12
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e8e:	0a9b      	lsrs	r3, r3, #10
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	f003 0303 	and.w	r3, r3, #3
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ea2:	0a1b      	lsrs	r3, r3, #8
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009eb6:	085b      	lsrs	r3, r3, #1
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	1fe00fff 	.word	0x1fe00fff

08009ee0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b094      	sub	sp, #80	@ 0x50
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d101      	bne.n	8009f00 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e0a7      	b.n	800a050 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009f00:	f107 0308 	add.w	r3, r7, #8
 8009f04:	4619      	mov	r1, r3
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fb62 	bl	800a5d0 <SD_SendSDStatus>
 8009f0c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d011      	beq.n	8009f38 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a4f      	ldr	r2, [pc, #316]	@ (800a058 <HAL_SD_GetCardStatus+0x178>)
 8009f1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f22:	431a      	orrs	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009f36:	e070      	b.n	800a01a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	099b      	lsrs	r3, r3, #6
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	f003 0303 	and.w	r3, r3, #3
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	095b      	lsrs	r3, r3, #5
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	0a1b      	lsrs	r3, r3, #8
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	0e1b      	lsrs	r3, r3, #24
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	061a      	lsls	r2, r3, #24
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	021b      	lsls	r3, r3, #8
 8009f7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009f7e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	0a1b      	lsrs	r3, r3, #8
 8009f84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009f88:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	0e1b      	lsrs	r3, r3, #24
 8009f8e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	0a1b      	lsrs	r3, r3, #8
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	0d1b      	lsrs	r3, r3, #20
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 030f 	and.w	r3, r3, #15
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	0c1b      	lsrs	r3, r3, #16
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	0a9b      	lsrs	r3, r3, #10
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	0a1b      	lsrs	r3, r3, #8
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	f003 0303 	and.w	r3, r3, #3
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	091b      	lsrs	r3, r3, #4
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	f003 030f 	and.w	r3, r3, #15
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	b2db      	uxtb	r3, r3
 800a006:	f003 030f 	and.w	r3, r3, #15
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	0e1b      	lsrs	r3, r3, #24
 800a014:	b2da      	uxtb	r2, r3
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a022:	4618      	mov	r0, r3
 800a024:	f003 fcce 	bl	800d9c4 <SDMMC_CmdBlockLength>
 800a028:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a02a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00d      	beq.n	800a04c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a08      	ldr	r2, [pc, #32]	@ (800a058 <HAL_SD_GetCardStatus+0x178>)
 800a036:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a03c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800a04c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a050:	4618      	mov	r0, r3
 800a052:	3750      	adds	r7, #80	@ 0x50
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	1fe00fff 	.word	0x1fe00fff

0800a05c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b08d      	sub	sp, #52	@ 0x34
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2203      	movs	r2, #3
 800a0c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d02e      	beq.n	800a132 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0da:	d106      	bne.n	800a0ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	635a      	str	r2, [r3, #52]	@ 0x34
 800a0e8:	e029      	b.n	800a13e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0f0:	d10a      	bne.n	800a108 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fb64 	bl	800a7c0 <SD_WideBus_Enable>
 800a0f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	431a      	orrs	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	635a      	str	r2, [r3, #52]	@ 0x34
 800a106:	e01a      	b.n	800a13e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10a      	bne.n	800a124 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fba1 	bl	800a856 <SD_WideBus_Disable>
 800a114:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	635a      	str	r2, [r3, #52]	@ 0x34
 800a122:	e00c      	b.n	800a13e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a128:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	635a      	str	r2, [r3, #52]	@ 0x34
 800a130:	e005      	b.n	800a13e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a136:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a142:	2b00      	cmp	r3, #0
 800a144:	d007      	beq.n	800a156 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a5f      	ldr	r2, [pc, #380]	@ (800a2c8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a14c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a154:	e096      	b.n	800a284 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a156:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a15a:	f04f 0100 	mov.w	r1, #0
 800a15e:	f7fd fdef 	bl	8007d40 <HAL_RCCEx_GetPeriphCLKFreq>
 800a162:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 8083 	beq.w	800a272 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	695a      	ldr	r2, [r3, #20]
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	4950      	ldr	r1, [pc, #320]	@ (800a2cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a18a:	fba1 1303 	umull	r1, r3, r1, r3
 800a18e:	0e1b      	lsrs	r3, r3, #24
 800a190:	429a      	cmp	r2, r3
 800a192:	d303      	bcc.n	800a19c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	695b      	ldr	r3, [r3, #20]
 800a198:	61bb      	str	r3, [r7, #24]
 800a19a:	e05a      	b.n	800a252 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1a4:	d103      	bne.n	800a1ae <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	61bb      	str	r3, [r7, #24]
 800a1ac:	e051      	b.n	800a252 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1b6:	d126      	bne.n	800a206 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10e      	bne.n	800a1de <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	4a43      	ldr	r2, [pc, #268]	@ (800a2d0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d906      	bls.n	800a1d6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	4a40      	ldr	r2, [pc, #256]	@ (800a2cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a1cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d0:	0e5b      	lsrs	r3, r3, #25
 800a1d2:	61bb      	str	r3, [r7, #24]
 800a1d4:	e03d      	b.n	800a252 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	61bb      	str	r3, [r7, #24]
 800a1dc:	e039      	b.n	800a252 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	69fa      	ldr	r2, [r7, #28]
 800a1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ea:	4a39      	ldr	r2, [pc, #228]	@ (800a2d0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d906      	bls.n	800a1fe <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	4a36      	ldr	r2, [pc, #216]	@ (800a2cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a1f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f8:	0e5b      	lsrs	r3, r3, #25
 800a1fa:	61bb      	str	r3, [r7, #24]
 800a1fc:	e029      	b.n	800a252 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	61bb      	str	r3, [r7, #24]
 800a204:	e025      	b.n	800a252 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10e      	bne.n	800a22c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	4a30      	ldr	r2, [pc, #192]	@ (800a2d4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d906      	bls.n	800a224 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	4a2c      	ldr	r2, [pc, #176]	@ (800a2cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a21a:	fba2 2303 	umull	r2, r3, r2, r3
 800a21e:	0e1b      	lsrs	r3, r3, #24
 800a220:	61bb      	str	r3, [r7, #24]
 800a222:	e016      	b.n	800a252 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	61bb      	str	r3, [r7, #24]
 800a22a:	e012      	b.n	800a252 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	fbb2 f3f3 	udiv	r3, r2, r3
 800a238:	4a26      	ldr	r2, [pc, #152]	@ (800a2d4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d906      	bls.n	800a24c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	4a22      	ldr	r2, [pc, #136]	@ (800a2cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a242:	fba2 2303 	umull	r2, r3, r2, r3
 800a246:	0e1b      	lsrs	r3, r3, #24
 800a248:	61bb      	str	r3, [r7, #24]
 800a24a:	e002      	b.n	800a252 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681c      	ldr	r4, [r3, #0]
 800a256:	466a      	mov	r2, sp
 800a258:	f107 0314 	add.w	r3, r7, #20
 800a25c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a260:	e882 0003 	stmia.w	r2, {r0, r1}
 800a264:	f107 0308 	add.w	r3, r7, #8
 800a268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a26a:	4620      	mov	r0, r4
 800a26c:	f003 facc 	bl	800d808 <SDMMC_Init>
 800a270:	e008      	b.n	800a284 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a276:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a28c:	4618      	mov	r0, r3
 800a28e:	f003 fb99 	bl	800d9c4 <SDMMC_CmdBlockLength>
 800a292:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00c      	beq.n	800a2b4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a0a      	ldr	r2, [pc, #40]	@ (800a2c8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a2a0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	431a      	orrs	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800a2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	372c      	adds	r7, #44	@ 0x2c
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd90      	pop	{r4, r7, pc}
 800a2c8:	1fe00fff 	.word	0x1fe00fff
 800a2cc:	55e63b89 	.word	0x55e63b89
 800a2d0:	02faf080 	.word	0x02faf080
 800a2d4:	017d7840 	.word	0x017d7840

0800a2d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a2e4:	f107 030c 	add.w	r3, r7, #12
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fa40 	bl	800a770 <SD_SendStatus>
 800a2f0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	431a      	orrs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	0a5b      	lsrs	r3, r3, #9
 800a308:	f003 030f 	and.w	r3, r3, #15
 800a30c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a30e:	693b      	ldr	r3, [r7, #16]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b090      	sub	sp, #64	@ 0x40
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a320:	2300      	movs	r3, #0
 800a322:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a324:	f7f8 fb78 	bl	8002a18 <HAL_GetTick>
 800a328:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4618      	mov	r0, r3
 800a330:	f003 fac3 	bl	800d8ba <SDMMC_GetPowerState>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d102      	bne.n	800a340 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a33a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a33e:	e0b5      	b.n	800a4ac <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a344:	2b03      	cmp	r3, #3
 800a346:	d02e      	beq.n	800a3a6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f003 fd0e 	bl	800dd6e <SDMMC_CmdSendCID>
 800a352:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <SD_InitCard+0x46>
    {
      return errorstate;
 800a35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35c:	e0a6      	b.n	800a4ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2100      	movs	r1, #0
 800a364:	4618      	mov	r0, r3
 800a366:	f003 faee 	bl	800d946 <SDMMC_GetResponse>
 800a36a:	4602      	mov	r2, r0
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2104      	movs	r1, #4
 800a376:	4618      	mov	r0, r3
 800a378:	f003 fae5 	bl	800d946 <SDMMC_GetResponse>
 800a37c:	4602      	mov	r2, r0
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2108      	movs	r1, #8
 800a388:	4618      	mov	r0, r3
 800a38a:	f003 fadc 	bl	800d946 <SDMMC_GetResponse>
 800a38e:	4602      	mov	r2, r0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	210c      	movs	r1, #12
 800a39a:	4618      	mov	r0, r3
 800a39c:	f003 fad3 	bl	800d946 <SDMMC_GetResponse>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d01d      	beq.n	800a3ea <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a3ae:	e019      	b.n	800a3e4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f107 020a 	add.w	r2, r7, #10
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f003 fd16 	bl	800ddec <SDMMC_CmdSetRelAdd>
 800a3c0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <SD_InitCard+0xb4>
      {
        return errorstate;
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	e06f      	b.n	800a4ac <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a3cc:	f7f8 fb24 	bl	8002a18 <HAL_GetTick>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d902      	bls.n	800a3e4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a3de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3e2:	e063      	b.n	800a4ac <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a3e4:	897b      	ldrh	r3, [r7, #10]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0e2      	beq.n	800a3b0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	d036      	beq.n	800a460 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a3f2:	897b      	ldrh	r3, [r7, #10]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a402:	041b      	lsls	r3, r3, #16
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f003 fcd0 	bl	800ddac <SDMMC_CmdSendCSD>
 800a40c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <SD_InitCard+0x100>
    {
      return errorstate;
 800a414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a416:	e049      	b.n	800a4ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2100      	movs	r1, #0
 800a41e:	4618      	mov	r0, r3
 800a420:	f003 fa91 	bl	800d946 <SDMMC_GetResponse>
 800a424:	4602      	mov	r2, r0
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2104      	movs	r1, #4
 800a430:	4618      	mov	r0, r3
 800a432:	f003 fa88 	bl	800d946 <SDMMC_GetResponse>
 800a436:	4602      	mov	r2, r0
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2108      	movs	r1, #8
 800a442:	4618      	mov	r0, r3
 800a444:	f003 fa7f 	bl	800d946 <SDMMC_GetResponse>
 800a448:	4602      	mov	r2, r0
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	210c      	movs	r1, #12
 800a454:	4618      	mov	r0, r3
 800a456:	f003 fa76 	bl	800d946 <SDMMC_GetResponse>
 800a45a:	4602      	mov	r2, r0
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2104      	movs	r1, #4
 800a466:	4618      	mov	r0, r3
 800a468:	f003 fa6d 	bl	800d946 <SDMMC_GetResponse>
 800a46c:	4603      	mov	r3, r0
 800a46e:	0d1a      	lsrs	r2, r3, #20
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a474:	f107 030c 	add.w	r3, r7, #12
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff fb8c 	bl	8009b98 <HAL_SD_GetCardCSD>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a486:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a48a:	e00f      	b.n	800a4ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a494:	041b      	lsls	r3, r3, #16
 800a496:	4619      	mov	r1, r3
 800a498:	4610      	mov	r0, r2
 800a49a:	f003 fb7f 	bl	800db9c <SDMMC_CmdSelDesel>
 800a49e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <SD_InitCard+0x192>
  {
    return errorstate;
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a8:	e000      	b.n	800a4ac <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3740      	adds	r7, #64	@ 0x40
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f003 fb88 	bl	800dbe2 <SDMMC_CmdGoIdleState>
 800a4d2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <SD_PowerON+0x2a>
  {
    return errorstate;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	e072      	b.n	800a5c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f003 fb9b 	bl	800dc1e <SDMMC_CmdOperCond>
 800a4e8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4f0:	d10d      	bne.n	800a50e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f003 fb70 	bl	800dbe2 <SDMMC_CmdGoIdleState>
 800a502:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d004      	beq.n	800a514 <SD_PowerON+0x60>
    {
      return errorstate;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	e05a      	b.n	800a5c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d137      	bne.n	800a58c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2100      	movs	r1, #0
 800a522:	4618      	mov	r0, r3
 800a524:	f003 fb9b 	bl	800dc5e <SDMMC_CmdAppCommand>
 800a528:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d02d      	beq.n	800a58c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a530:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a534:	e046      	b.n	800a5c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2100      	movs	r1, #0
 800a53c:	4618      	mov	r0, r3
 800a53e:	f003 fb8e 	bl	800dc5e <SDMMC_CmdAppCommand>
 800a542:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <SD_PowerON+0x9a>
    {
      return errorstate;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	e03a      	b.n	800a5c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	491e      	ldr	r1, [pc, #120]	@ (800a5cc <SD_PowerON+0x118>)
 800a554:	4618      	mov	r0, r3
 800a556:	f003 fba5 	bl	800dca4 <SDMMC_CmdAppOperCommand>
 800a55a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a562:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a566:	e02d      	b.n	800a5c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2100      	movs	r1, #0
 800a56e:	4618      	mov	r0, r3
 800a570:	f003 f9e9 	bl	800d946 <SDMMC_GetResponse>
 800a574:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	0fdb      	lsrs	r3, r3, #31
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d101      	bne.n	800a582 <SD_PowerON+0xce>
 800a57e:	2301      	movs	r3, #1
 800a580:	e000      	b.n	800a584 <SD_PowerON+0xd0>
 800a582:	2300      	movs	r3, #0
 800a584:	613b      	str	r3, [r7, #16]

    count++;
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	3301      	adds	r3, #1
 800a58a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a592:	4293      	cmp	r3, r2
 800a594:	d802      	bhi.n	800a59c <SD_PowerON+0xe8>
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0cc      	beq.n	800a536 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d902      	bls.n	800a5ac <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a5a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a5aa:	e00b      	b.n	800a5c4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3718      	adds	r7, #24
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	c1100000 	.word	0xc1100000

0800a5d0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08c      	sub	sp, #48	@ 0x30
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a5da:	f7f8 fa1d 	bl	8002a18 <HAL_GetTick>
 800a5de:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f003 f9ab 	bl	800d946 <SDMMC_GetResponse>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5fa:	d102      	bne.n	800a602 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a5fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a600:	e0b0      	b.n	800a764 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2140      	movs	r1, #64	@ 0x40
 800a608:	4618      	mov	r0, r3
 800a60a:	f003 f9db 	bl	800d9c4 <SDMMC_CmdBlockLength>
 800a60e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d005      	beq.n	800a622 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	e0a0      	b.n	800a764 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a62a:	041b      	lsls	r3, r3, #16
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f003 fb15 	bl	800dc5e <SDMMC_CmdAppCommand>
 800a634:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d005      	beq.n	800a648 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	e08d      	b.n	800a764 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a648:	f04f 33ff 	mov.w	r3, #4294967295
 800a64c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a64e:	2340      	movs	r3, #64	@ 0x40
 800a650:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a652:	2360      	movs	r3, #96	@ 0x60
 800a654:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a656:	2302      	movs	r3, #2
 800a658:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a65e:	2301      	movs	r3, #1
 800a660:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f107 0208 	add.w	r2, r7, #8
 800a66a:	4611      	mov	r1, r2
 800a66c:	4618      	mov	r0, r3
 800a66e:	f003 f97d 	bl	800d96c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4618      	mov	r0, r3
 800a678:	f003 fbfd 	bl	800de76 <SDMMC_CmdStatusRegister>
 800a67c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d02b      	beq.n	800a6dc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	e069      	b.n	800a764 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a696:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d013      	beq.n	800a6c6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a69e:	2300      	movs	r3, #0
 800a6a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6a2:	e00d      	b.n	800a6c0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f003 f8d7 	bl	800d85c <SDMMC_ReadFIFO>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b2:	601a      	str	r2, [r3, #0]
        pData++;
 800a6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800a6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6bc:	3301      	adds	r3, #1
 800a6be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c2:	2b07      	cmp	r3, #7
 800a6c4:	d9ee      	bls.n	800a6a4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a6c6:	f7f8 f9a7 	bl	8002a18 <HAL_GetTick>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d102      	bne.n	800a6dc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a6d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6da:	e043      	b.n	800a764 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0d2      	beq.n	800a690 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6f0:	f003 0308 	and.w	r3, r3, #8
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a6f8:	2308      	movs	r3, #8
 800a6fa:	e033      	b.n	800a764 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a702:	f003 0302 	and.w	r3, r3, #2
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a70a:	2302      	movs	r3, #2
 800a70c:	e02a      	b.n	800a764 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a714:	f003 0320 	and.w	r3, r3, #32
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d017      	beq.n	800a74c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a71c:	2320      	movs	r3, #32
 800a71e:	e021      	b.n	800a764 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4618      	mov	r0, r3
 800a726:	f003 f899 	bl	800d85c <SDMMC_ReadFIFO>
 800a72a:	4602      	mov	r2, r0
 800a72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72e:	601a      	str	r2, [r3, #0]
    pData++;
 800a730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a732:	3304      	adds	r3, #4
 800a734:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a736:	f7f8 f96f 	bl	8002a18 <HAL_GetTick>
 800a73a:	4602      	mov	r2, r0
 800a73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a744:	d102      	bne.n	800a74c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a746:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a74a:	e00b      	b.n	800a764 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a752:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e2      	bne.n	800a720 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a03      	ldr	r2, [pc, #12]	@ (800a76c <SD_SendSDStatus+0x19c>)
 800a760:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3730      	adds	r7, #48	@ 0x30
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	18000f3a 	.word	0x18000f3a

0800a770 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d102      	bne.n	800a786 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a780:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a784:	e018      	b.n	800a7b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a78e:	041b      	lsls	r3, r3, #16
 800a790:	4619      	mov	r1, r3
 800a792:	4610      	mov	r0, r2
 800a794:	f003 fb4c 	bl	800de30 <SDMMC_CmdSendStatus>
 800a798:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	e009      	b.n	800a7b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f003 f8cb 	bl	800d946 <SDMMC_GetResponse>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f003 f8b5 	bl	800d946 <SDMMC_GetResponse>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7e6:	d102      	bne.n	800a7ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a7e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a7ec:	e02f      	b.n	800a84e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a7ee:	f107 030c 	add.w	r3, r7, #12
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f879 	bl	800a8ec <SD_FindSCR>
 800a7fa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	e023      	b.n	800a84e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d01c      	beq.n	800a84a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a818:	041b      	lsls	r3, r3, #16
 800a81a:	4619      	mov	r1, r3
 800a81c:	4610      	mov	r0, r2
 800a81e:	f003 fa1e 	bl	800dc5e <SDMMC_CmdAppCommand>
 800a822:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	e00f      	b.n	800a84e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2102      	movs	r1, #2
 800a834:	4618      	mov	r0, r3
 800a836:	f003 fa55 	bl	800dce4 <SDMMC_CmdBusWidth>
 800a83a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	e003      	b.n	800a84e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a846:	2300      	movs	r3, #0
 800a848:	e001      	b.n	800a84e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a84a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b086      	sub	sp, #24
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a85e:	2300      	movs	r3, #0
 800a860:	60fb      	str	r3, [r7, #12]
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2100      	movs	r1, #0
 800a86c:	4618      	mov	r0, r3
 800a86e:	f003 f86a 	bl	800d946 <SDMMC_GetResponse>
 800a872:	4603      	mov	r3, r0
 800a874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a878:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a87c:	d102      	bne.n	800a884 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a87e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a882:	e02f      	b.n	800a8e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a884:	f107 030c 	add.w	r3, r7, #12
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f82e 	bl	800a8ec <SD_FindSCR>
 800a890:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	e023      	b.n	800a8e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d01c      	beq.n	800a8e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8ae:	041b      	lsls	r3, r3, #16
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	f003 f9d3 	bl	800dc5e <SDMMC_CmdAppCommand>
 800a8b8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d001      	beq.n	800a8c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	e00f      	b.n	800a8e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f003 fa0a 	bl	800dce4 <SDMMC_CmdBusWidth>
 800a8d0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d001      	beq.n	800a8dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	e003      	b.n	800a8e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	e001      	b.n	800a8e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a8e0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3718      	adds	r7, #24
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08e      	sub	sp, #56	@ 0x38
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a8f6:	f7f8 f88f 	bl	8002a18 <HAL_GetTick>
 800a8fa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a900:	2300      	movs	r3, #0
 800a902:	60bb      	str	r3, [r7, #8]
 800a904:	2300      	movs	r3, #0
 800a906:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2108      	movs	r1, #8
 800a912:	4618      	mov	r0, r3
 800a914:	f003 f856 	bl	800d9c4 <SDMMC_CmdBlockLength>
 800a918:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a922:	e0ad      	b.n	800aa80 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a92c:	041b      	lsls	r3, r3, #16
 800a92e:	4619      	mov	r1, r3
 800a930:	4610      	mov	r0, r2
 800a932:	f003 f994 	bl	800dc5e <SDMMC_CmdAppCommand>
 800a936:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a940:	e09e      	b.n	800aa80 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a942:	f04f 33ff 	mov.w	r3, #4294967295
 800a946:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a948:	2308      	movs	r3, #8
 800a94a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a94c:	2330      	movs	r3, #48	@ 0x30
 800a94e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a950:	2302      	movs	r3, #2
 800a952:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a954:	2300      	movs	r3, #0
 800a956:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a958:	2301      	movs	r3, #1
 800a95a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f107 0210 	add.w	r2, r7, #16
 800a964:	4611      	mov	r1, r2
 800a966:	4618      	mov	r0, r3
 800a968:	f003 f800 	bl	800d96c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4618      	mov	r0, r3
 800a972:	f003 f9da 	bl	800dd2a <SDMMC_CmdSendSCR>
 800a976:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d027      	beq.n	800a9ce <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a980:	e07e      	b.n	800aa80 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a988:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d113      	bne.n	800a9b8 <SD_FindSCR+0xcc>
 800a990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a992:	2b00      	cmp	r3, #0
 800a994:	d110      	bne.n	800a9b8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f002 ff5e 	bl	800d85c <SDMMC_ReadFIFO>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f002 ff57 	bl	800d85c <SDMMC_ReadFIFO>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	60fb      	str	r3, [r7, #12]
      index++;
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a9b8:	f7f8 f82e 	bl	8002a18 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c6:	d102      	bne.n	800a9ce <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a9c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9cc:	e058      	b.n	800aa80 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9d4:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a9d8:	4013      	ands	r3, r2
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0d1      	beq.n	800a982 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9e4:	f003 0308 	and.w	r3, r3, #8
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d005      	beq.n	800a9f8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a9f4:	2308      	movs	r3, #8
 800a9f6:	e043      	b.n	800aa80 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9fe:	f003 0302 	and.w	r3, r3, #2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d005      	beq.n	800aa12 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aa0e:	2302      	movs	r3, #2
 800aa10:	e036      	b.n	800aa80 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa18:	f003 0320 	and.w	r3, r3, #32
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d005      	beq.n	800aa2c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2220      	movs	r2, #32
 800aa26:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aa28:	2320      	movs	r3, #32
 800aa2a:	e029      	b.n	800aa80 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a15      	ldr	r2, [pc, #84]	@ (800aa88 <SD_FindSCR+0x19c>)
 800aa32:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	061a      	lsls	r2, r3, #24
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	021b      	lsls	r3, r3, #8
 800aa3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aa40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	0a1b      	lsrs	r3, r3, #8
 800aa46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800aa4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	0e1b      	lsrs	r3, r3, #24
 800aa50:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800aa52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa54:	601a      	str	r2, [r3, #0]
    scr++;
 800aa56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa58:	3304      	adds	r3, #4
 800aa5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	061a      	lsls	r2, r3, #24
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	021b      	lsls	r3, r3, #8
 800aa64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aa68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	0a1b      	lsrs	r3, r3, #8
 800aa6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800aa72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	0e1b      	lsrs	r3, r3, #24
 800aa78:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800aa7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3738      	adds	r7, #56	@ 0x38
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	18000f3a 	.word	0x18000f3a

0800aa8c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e10f      	b.n	800acbe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a87      	ldr	r2, [pc, #540]	@ (800acc8 <HAL_SPI_Init+0x23c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00f      	beq.n	800aace <HAL_SPI_Init+0x42>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a86      	ldr	r2, [pc, #536]	@ (800accc <HAL_SPI_Init+0x240>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d00a      	beq.n	800aace <HAL_SPI_Init+0x42>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a84      	ldr	r2, [pc, #528]	@ (800acd0 <HAL_SPI_Init+0x244>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d005      	beq.n	800aace <HAL_SPI_Init+0x42>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	2b0f      	cmp	r3, #15
 800aac8:	d901      	bls.n	800aace <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e0f7      	b.n	800acbe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fe2e 	bl	800b730 <SPI_GetPacketSize>
 800aad4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a7b      	ldr	r2, [pc, #492]	@ (800acc8 <HAL_SPI_Init+0x23c>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d00c      	beq.n	800aafa <HAL_SPI_Init+0x6e>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a79      	ldr	r2, [pc, #484]	@ (800accc <HAL_SPI_Init+0x240>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d007      	beq.n	800aafa <HAL_SPI_Init+0x6e>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a78      	ldr	r2, [pc, #480]	@ (800acd0 <HAL_SPI_Init+0x244>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d002      	beq.n	800aafa <HAL_SPI_Init+0x6e>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	d811      	bhi.n	800ab1e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aafe:	4a72      	ldr	r2, [pc, #456]	@ (800acc8 <HAL_SPI_Init+0x23c>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d009      	beq.n	800ab18 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a70      	ldr	r2, [pc, #448]	@ (800accc <HAL_SPI_Init+0x240>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d004      	beq.n	800ab18 <HAL_SPI_Init+0x8c>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a6f      	ldr	r2, [pc, #444]	@ (800acd0 <HAL_SPI_Init+0x244>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d104      	bne.n	800ab22 <HAL_SPI_Init+0x96>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b10      	cmp	r3, #16
 800ab1c:	d901      	bls.n	800ab22 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e0cd      	b.n	800acbe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d106      	bne.n	800ab3c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7f7 fba0 	bl	800227c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f022 0201 	bic.w	r2, r2, #1
 800ab52:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ab5e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab68:	d119      	bne.n	800ab9e <HAL_SPI_Init+0x112>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab72:	d103      	bne.n	800ab7c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d008      	beq.n	800ab8e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10c      	bne.n	800ab9e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ab88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab8c:	d107      	bne.n	800ab9e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ab9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00f      	beq.n	800abca <HAL_SPI_Init+0x13e>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	2b06      	cmp	r3, #6
 800abb0:	d90b      	bls.n	800abca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	430a      	orrs	r2, r1
 800abc6:	601a      	str	r2, [r3, #0]
 800abc8:	e007      	b.n	800abda <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800abd8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	69da      	ldr	r2, [r3, #28]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe2:	431a      	orrs	r2, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	431a      	orrs	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abec:	ea42 0103 	orr.w	r1, r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68da      	ldr	r2, [r3, #12]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac04:	431a      	orrs	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	431a      	orrs	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	431a      	orrs	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	431a      	orrs	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac2e:	431a      	orrs	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	431a      	orrs	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac3a:	ea42 0103 	orr.w	r1, r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d113      	bne.n	800ac7a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac64:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ac78:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f022 0201 	bic.w	r2, r2, #1
 800ac88:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00a      	beq.n	800acac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	430a      	orrs	r2, r1
 800acaa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	40013000 	.word	0x40013000
 800accc:	40003800 	.word	0x40003800
 800acd0:	40003c00 	.word	0x40003c00

0800acd4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af02      	add	r7, sp, #8
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	603b      	str	r3, [r7, #0]
 800ace0:	4613      	mov	r3, r2
 800ace2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3320      	adds	r3, #32
 800acea:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acec:	f7f7 fe94 	bl	8002a18 <HAL_GetTick>
 800acf0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d001      	beq.n	800ad02 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800acfe:	2302      	movs	r3, #2
 800ad00:	e1d1      	b.n	800b0a6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d002      	beq.n	800ad0e <HAL_SPI_Transmit+0x3a>
 800ad08:	88fb      	ldrh	r3, [r7, #6]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d101      	bne.n	800ad12 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e1c9      	b.n	800b0a6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d101      	bne.n	800ad20 <HAL_SPI_Transmit+0x4c>
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	e1c2      	b.n	800b0a6 <HAL_SPI_Transmit+0x3d2>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2203      	movs	r2, #3
 800ad2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	88fa      	ldrh	r2, [r7, #6]
 800ad42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	88fa      	ldrh	r2, [r7, #6]
 800ad4a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ad78:	d108      	bne.n	800ad8c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	e009      	b.n	800ada0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ad9e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	4b96      	ldr	r3, [pc, #600]	@ (800b000 <HAL_SPI_Transmit+0x32c>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	88f9      	ldrh	r1, [r7, #6]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	6812      	ldr	r2, [r2, #0]
 800adb0:	430b      	orrs	r3, r1
 800adb2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f042 0201 	orr.w	r2, r2, #1
 800adc2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800adcc:	d107      	bne.n	800adde <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800addc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	2b0f      	cmp	r3, #15
 800ade4:	d947      	bls.n	800ae76 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ade6:	e03f      	b.n	800ae68 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	f003 0302 	and.w	r3, r3, #2
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d114      	bne.n	800ae20 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6812      	ldr	r2, [r2, #0]
 800ae00:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae06:	1d1a      	adds	r2, r3, #4
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	3b01      	subs	r3, #1
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ae1e:	e023      	b.n	800ae68 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae20:	f7f7 fdfa 	bl	8002a18 <HAL_GetTick>
 800ae24:	4602      	mov	r2, r0
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d803      	bhi.n	800ae38 <HAL_SPI_Transmit+0x164>
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae36:	d102      	bne.n	800ae3e <HAL_SPI_Transmit+0x16a>
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d114      	bne.n	800ae68 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f000 fba8 	bl	800b594 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e11e      	b.n	800b0a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1b9      	bne.n	800ade8 <HAL_SPI_Transmit+0x114>
 800ae74:	e0f1      	b.n	800b05a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	2b07      	cmp	r3, #7
 800ae7c:	f240 80e6 	bls.w	800b04c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ae80:	e05d      	b.n	800af3e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d132      	bne.n	800aef6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d918      	bls.n	800aece <HAL_SPI_Transmit+0x1fa>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d014      	beq.n	800aece <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6812      	ldr	r2, [r2, #0]
 800aeae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aeb4:	1d1a      	adds	r2, r3, #4
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	3b02      	subs	r3, #2
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aecc:	e037      	b.n	800af3e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aed2:	881a      	ldrh	r2, [r3, #0]
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aedc:	1c9a      	adds	r2, r3, #2
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	3b01      	subs	r3, #1
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aef4:	e023      	b.n	800af3e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aef6:	f7f7 fd8f 	bl	8002a18 <HAL_GetTick>
 800aefa:	4602      	mov	r2, r0
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	429a      	cmp	r2, r3
 800af04:	d803      	bhi.n	800af0e <HAL_SPI_Transmit+0x23a>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0c:	d102      	bne.n	800af14 <HAL_SPI_Transmit+0x240>
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d114      	bne.n	800af3e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f000 fb3d 	bl	800b594 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e0b3      	b.n	800b0a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af44:	b29b      	uxth	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	d19b      	bne.n	800ae82 <HAL_SPI_Transmit+0x1ae>
 800af4a:	e086      	b.n	800b05a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	2b02      	cmp	r3, #2
 800af58:	d154      	bne.n	800b004 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af60:	b29b      	uxth	r3, r3
 800af62:	2b03      	cmp	r3, #3
 800af64:	d918      	bls.n	800af98 <HAL_SPI_Transmit+0x2c4>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af6a:	2b40      	cmp	r3, #64	@ 0x40
 800af6c:	d914      	bls.n	800af98 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	6812      	ldr	r2, [r2, #0]
 800af78:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af7e:	1d1a      	adds	r2, r3, #4
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	3b04      	subs	r3, #4
 800af8e:	b29a      	uxth	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800af96:	e059      	b.n	800b04c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d917      	bls.n	800afd4 <HAL_SPI_Transmit+0x300>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d013      	beq.n	800afd4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afb0:	881a      	ldrh	r2, [r3, #0]
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afba:	1c9a      	adds	r2, r3, #2
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	3b02      	subs	r3, #2
 800afca:	b29a      	uxth	r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800afd2:	e03b      	b.n	800b04c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3320      	adds	r3, #32
 800afde:	7812      	ldrb	r2, [r2, #0]
 800afe0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afe6:	1c5a      	adds	r2, r3, #1
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	3b01      	subs	r3, #1
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800affe:	e025      	b.n	800b04c <HAL_SPI_Transmit+0x378>
 800b000:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b004:	f7f7 fd08 	bl	8002a18 <HAL_GetTick>
 800b008:	4602      	mov	r2, r0
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d803      	bhi.n	800b01c <HAL_SPI_Transmit+0x348>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01a:	d102      	bne.n	800b022 <HAL_SPI_Transmit+0x34e>
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d114      	bne.n	800b04c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f000 fab6 	bl	800b594 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b02e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	e02c      	b.n	800b0a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b052:	b29b      	uxth	r3, r3
 800b054:	2b00      	cmp	r3, #0
 800b056:	f47f af79 	bne.w	800af4c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2200      	movs	r2, #0
 800b062:	2108      	movs	r1, #8
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 fb35 	bl	800b6d4 <SPI_WaitOnFlagUntilTimeout>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d007      	beq.n	800b080 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b076:	f043 0220 	orr.w	r2, r3, #32
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f000 fa87 	bl	800b594 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e000      	b.n	800b0a6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
  }
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3718      	adds	r7, #24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop

0800b0b0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	603b      	str	r3, [r7, #0]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0c4:	095b      	lsrs	r3, r3, #5
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3330      	adds	r3, #48	@ 0x30
 800b0d2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0d4:	f7f7 fca0 	bl	8002a18 <HAL_GetTick>
 800b0d8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d001      	beq.n	800b0ea <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	e250      	b.n	800b58c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <HAL_SPI_Receive+0x46>
 800b0f0:	88fb      	ldrh	r3, [r7, #6]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e248      	b.n	800b58c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b100:	2b01      	cmp	r3, #1
 800b102:	d101      	bne.n	800b108 <HAL_SPI_Receive+0x58>
 800b104:	2302      	movs	r3, #2
 800b106:	e241      	b.n	800b58c <HAL_SPI_Receive+0x4dc>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2204      	movs	r2, #4
 800b114:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	88fa      	ldrh	r2, [r7, #6]
 800b12a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	88fa      	ldrh	r2, [r7, #6]
 800b132:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b160:	d108      	bne.n	800b174 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	e009      	b.n	800b188 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b186:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	4b95      	ldr	r3, [pc, #596]	@ (800b3e4 <HAL_SPI_Receive+0x334>)
 800b190:	4013      	ands	r3, r2
 800b192:	88f9      	ldrh	r1, [r7, #6]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	6812      	ldr	r2, [r2, #0]
 800b198:	430b      	orrs	r3, r1
 800b19a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1b4:	d107      	bne.n	800b1c6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	2b0f      	cmp	r3, #15
 800b1cc:	d96c      	bls.n	800b2a8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b1ce:	e064      	b.n	800b29a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	695b      	ldr	r3, [r3, #20]
 800b1d6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	695b      	ldr	r3, [r3, #20]
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d114      	bne.n	800b210 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b1f0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1f6:	1d1a      	adds	r2, r3, #4
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b202:	b29b      	uxth	r3, r3
 800b204:	3b01      	subs	r3, #1
 800b206:	b29a      	uxth	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b20e:	e044      	b.n	800b29a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b216:	b29b      	uxth	r3, r3
 800b218:	8bfa      	ldrh	r2, [r7, #30]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d919      	bls.n	800b252 <HAL_SPI_Receive+0x1a2>
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d014      	beq.n	800b252 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b230:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b232:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b238:	1d1a      	adds	r2, r3, #4
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b244:	b29b      	uxth	r3, r3
 800b246:	3b01      	subs	r3, #1
 800b248:	b29a      	uxth	r2, r3
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b250:	e023      	b.n	800b29a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b252:	f7f7 fbe1 	bl	8002a18 <HAL_GetTick>
 800b256:	4602      	mov	r2, r0
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d803      	bhi.n	800b26a <HAL_SPI_Receive+0x1ba>
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b268:	d102      	bne.n	800b270 <HAL_SPI_Receive+0x1c0>
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d114      	bne.n	800b29a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 f98f 	bl	800b594 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b27c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2201      	movs	r2, #1
 800b28a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e178      	b.n	800b58c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d194      	bne.n	800b1d0 <HAL_SPI_Receive+0x120>
 800b2a6:	e15e      	b.n	800b566 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	2b07      	cmp	r3, #7
 800b2ae:	f240 8153 	bls.w	800b558 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b2b2:	e08f      	b.n	800b3d4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d114      	bne.n	800b2f4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	8812      	ldrh	r2, [r2, #0]
 800b2d2:	b292      	uxth	r2, r2
 800b2d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2da:	1c9a      	adds	r2, r3, #2
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b2f2:	e06f      	b.n	800b3d4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	8bfa      	ldrh	r2, [r7, #30]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d924      	bls.n	800b34c <HAL_SPI_Receive+0x29c>
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01f      	beq.n	800b34c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	8812      	ldrh	r2, [r2, #0]
 800b314:	b292      	uxth	r2, r2
 800b316:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b31c:	1c9a      	adds	r2, r3, #2
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b326:	69ba      	ldr	r2, [r7, #24]
 800b328:	8812      	ldrh	r2, [r2, #0]
 800b32a:	b292      	uxth	r2, r2
 800b32c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b332:	1c9a      	adds	r2, r3, #2
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b33e:	b29b      	uxth	r3, r3
 800b340:	3b02      	subs	r3, #2
 800b342:	b29a      	uxth	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b34a:	e043      	b.n	800b3d4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b352:	b29b      	uxth	r3, r3
 800b354:	2b01      	cmp	r3, #1
 800b356:	d119      	bne.n	800b38c <HAL_SPI_Receive+0x2dc>
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d014      	beq.n	800b38c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b366:	69ba      	ldr	r2, [r7, #24]
 800b368:	8812      	ldrh	r2, [r2, #0]
 800b36a:	b292      	uxth	r2, r2
 800b36c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b372:	1c9a      	adds	r2, r3, #2
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b37e:	b29b      	uxth	r3, r3
 800b380:	3b01      	subs	r3, #1
 800b382:	b29a      	uxth	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b38a:	e023      	b.n	800b3d4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b38c:	f7f7 fb44 	bl	8002a18 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d803      	bhi.n	800b3a4 <HAL_SPI_Receive+0x2f4>
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a2:	d102      	bne.n	800b3aa <HAL_SPI_Receive+0x2fa>
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d114      	bne.n	800b3d4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f000 f8f2 	bl	800b594 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e0db      	b.n	800b58c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f47f af69 	bne.w	800b2b4 <HAL_SPI_Receive+0x204>
 800b3e2:	e0c0      	b.n	800b566 <HAL_SPI_Receive+0x4b6>
 800b3e4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	695b      	ldr	r3, [r3, #20]
 800b3f6:	f003 0301 	and.w	r3, r3, #1
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d117      	bne.n	800b42e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b40a:	7812      	ldrb	r2, [r2, #0]
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b414:	1c5a      	adds	r2, r3, #1
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b420:	b29b      	uxth	r3, r3
 800b422:	3b01      	subs	r3, #1
 800b424:	b29a      	uxth	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b42c:	e094      	b.n	800b558 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b434:	b29b      	uxth	r3, r3
 800b436:	8bfa      	ldrh	r2, [r7, #30]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d946      	bls.n	800b4ca <HAL_SPI_Receive+0x41a>
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b442:	2b00      	cmp	r3, #0
 800b444:	d041      	beq.n	800b4ca <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b452:	7812      	ldrb	r2, [r2, #0]
 800b454:	b2d2      	uxtb	r2, r2
 800b456:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b46e:	7812      	ldrb	r2, [r2, #0]
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b478:	1c5a      	adds	r2, r3, #1
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b48a:	7812      	ldrb	r2, [r2, #0]
 800b48c:	b2d2      	uxtb	r2, r2
 800b48e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4a6:	7812      	ldrb	r2, [r2, #0]
 800b4a8:	b2d2      	uxtb	r2, r2
 800b4aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4b0:	1c5a      	adds	r2, r3, #1
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	3b04      	subs	r3, #4
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b4c8:	e046      	b.n	800b558 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d81c      	bhi.n	800b510 <HAL_SPI_Receive+0x460>
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d017      	beq.n	800b510 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4ec:	7812      	ldrb	r2, [r2, #0]
 800b4ee:	b2d2      	uxtb	r2, r2
 800b4f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4f6:	1c5a      	adds	r2, r3, #1
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b502:	b29b      	uxth	r3, r3
 800b504:	3b01      	subs	r3, #1
 800b506:	b29a      	uxth	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b50e:	e023      	b.n	800b558 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b510:	f7f7 fa82 	bl	8002a18 <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d803      	bhi.n	800b528 <HAL_SPI_Receive+0x478>
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b526:	d102      	bne.n	800b52e <HAL_SPI_Receive+0x47e>
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d114      	bne.n	800b558 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f000 f830 	bl	800b594 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b53a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b554:	2303      	movs	r3, #3
 800b556:	e019      	b.n	800b58c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b55e:	b29b      	uxth	r3, r3
 800b560:	2b00      	cmp	r3, #0
 800b562:	f47f af41 	bne.w	800b3e8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f000 f814 	bl	800b594 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b582:	2b00      	cmp	r3, #0
 800b584:	d001      	beq.n	800b58a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800b58a:	2300      	movs	r3, #0
  }
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3720      	adds	r7, #32
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	699a      	ldr	r2, [r3, #24]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f042 0208 	orr.w	r2, r2, #8
 800b5b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	699a      	ldr	r2, [r3, #24]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f042 0210 	orr.w	r2, r2, #16
 800b5c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f022 0201 	bic.w	r2, r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6919      	ldr	r1, [r3, #16]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	4b3c      	ldr	r3, [pc, #240]	@ (800b6d0 <SPI_CloseTransfer+0x13c>)
 800b5e0:	400b      	ands	r3, r1
 800b5e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	689a      	ldr	r2, [r3, #8]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b5f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b04      	cmp	r3, #4
 800b5fe:	d014      	beq.n	800b62a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f003 0320 	and.w	r3, r3, #32
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00f      	beq.n	800b62a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b610:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	699a      	ldr	r2, [r3, #24]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f042 0220 	orr.w	r2, r2, #32
 800b628:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b03      	cmp	r3, #3
 800b634:	d014      	beq.n	800b660 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00f      	beq.n	800b660 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b646:	f043 0204 	orr.w	r2, r3, #4
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	699a      	ldr	r2, [r3, #24]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b65e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00f      	beq.n	800b68a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b670:	f043 0201 	orr.w	r2, r3, #1
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	699a      	ldr	r2, [r3, #24]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b688:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00f      	beq.n	800b6b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b69a:	f043 0208 	orr.w	r2, r3, #8
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	699a      	ldr	r2, [r3, #24]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b6b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b6c4:	bf00      	nop
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	fffffc90 	.word	0xfffffc90

0800b6d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	603b      	str	r3, [r7, #0]
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b6e4:	e010      	b.n	800b708 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6e6:	f7f7 f997 	bl	8002a18 <HAL_GetTick>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d803      	bhi.n	800b6fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fc:	d102      	bne.n	800b704 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b704:	2303      	movs	r3, #3
 800b706:	e00f      	b.n	800b728 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	695a      	ldr	r2, [r3, #20]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	4013      	ands	r3, r2
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	429a      	cmp	r2, r3
 800b716:	bf0c      	ite	eq
 800b718:	2301      	moveq	r3, #1
 800b71a:	2300      	movne	r3, #0
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	461a      	mov	r2, r3
 800b720:	79fb      	ldrb	r3, [r7, #7]
 800b722:	429a      	cmp	r2, r3
 800b724:	d0df      	beq.n	800b6e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b73c:	095b      	lsrs	r3, r3, #5
 800b73e:	3301      	adds	r3, #1
 800b740:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	3301      	adds	r3, #1
 800b748:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	3307      	adds	r3, #7
 800b74e:	08db      	lsrs	r3, r3, #3
 800b750:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	fb02 f303 	mul.w	r3, r2, r3
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e042      	b.n	800b7fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d106      	bne.n	800b790 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7f6 fe2e 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2224      	movs	r2, #36	@ 0x24
 800b794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f022 0201 	bic.w	r2, r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fd91 	bl	800c2d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f826 	bl	800b808 <UART_SetConfig>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d101      	bne.n	800b7c6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e01b      	b.n	800b7fe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b7d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	689a      	ldr	r2, [r3, #8]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b7e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f042 0201 	orr.w	r2, r2, #1
 800b7f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fe10 	bl	800c41c <UART_CheckIdleState>
 800b7fc:	4603      	mov	r3, r0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b80c:	b092      	sub	sp, #72	@ 0x48
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	689a      	ldr	r2, [r3, #8]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	431a      	orrs	r2, r3
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	431a      	orrs	r2, r3
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	69db      	ldr	r3, [r3, #28]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	4bbe      	ldr	r3, [pc, #760]	@ (800bb30 <UART_SetConfig+0x328>)
 800b838:	4013      	ands	r3, r2
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	6812      	ldr	r2, [r2, #0]
 800b83e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b840:	430b      	orrs	r3, r1
 800b842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	68da      	ldr	r2, [r3, #12]
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	430a      	orrs	r2, r1
 800b858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4ab3      	ldr	r2, [pc, #716]	@ (800bb34 <UART_SetConfig+0x32c>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d004      	beq.n	800b874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b870:	4313      	orrs	r3, r2
 800b872:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689a      	ldr	r2, [r3, #8]
 800b87a:	4baf      	ldr	r3, [pc, #700]	@ (800bb38 <UART_SetConfig+0x330>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	6812      	ldr	r2, [r2, #0]
 800b882:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b884:	430b      	orrs	r3, r1
 800b886:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b88e:	f023 010f 	bic.w	r1, r3, #15
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	430a      	orrs	r2, r1
 800b89c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4aa6      	ldr	r2, [pc, #664]	@ (800bb3c <UART_SetConfig+0x334>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d177      	bne.n	800b998 <UART_SetConfig+0x190>
 800b8a8:	4ba5      	ldr	r3, [pc, #660]	@ (800bb40 <UART_SetConfig+0x338>)
 800b8aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b8b0:	2b28      	cmp	r3, #40	@ 0x28
 800b8b2:	d86d      	bhi.n	800b990 <UART_SetConfig+0x188>
 800b8b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b8bc <UART_SetConfig+0xb4>)
 800b8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ba:	bf00      	nop
 800b8bc:	0800b961 	.word	0x0800b961
 800b8c0:	0800b991 	.word	0x0800b991
 800b8c4:	0800b991 	.word	0x0800b991
 800b8c8:	0800b991 	.word	0x0800b991
 800b8cc:	0800b991 	.word	0x0800b991
 800b8d0:	0800b991 	.word	0x0800b991
 800b8d4:	0800b991 	.word	0x0800b991
 800b8d8:	0800b991 	.word	0x0800b991
 800b8dc:	0800b969 	.word	0x0800b969
 800b8e0:	0800b991 	.word	0x0800b991
 800b8e4:	0800b991 	.word	0x0800b991
 800b8e8:	0800b991 	.word	0x0800b991
 800b8ec:	0800b991 	.word	0x0800b991
 800b8f0:	0800b991 	.word	0x0800b991
 800b8f4:	0800b991 	.word	0x0800b991
 800b8f8:	0800b991 	.word	0x0800b991
 800b8fc:	0800b971 	.word	0x0800b971
 800b900:	0800b991 	.word	0x0800b991
 800b904:	0800b991 	.word	0x0800b991
 800b908:	0800b991 	.word	0x0800b991
 800b90c:	0800b991 	.word	0x0800b991
 800b910:	0800b991 	.word	0x0800b991
 800b914:	0800b991 	.word	0x0800b991
 800b918:	0800b991 	.word	0x0800b991
 800b91c:	0800b979 	.word	0x0800b979
 800b920:	0800b991 	.word	0x0800b991
 800b924:	0800b991 	.word	0x0800b991
 800b928:	0800b991 	.word	0x0800b991
 800b92c:	0800b991 	.word	0x0800b991
 800b930:	0800b991 	.word	0x0800b991
 800b934:	0800b991 	.word	0x0800b991
 800b938:	0800b991 	.word	0x0800b991
 800b93c:	0800b981 	.word	0x0800b981
 800b940:	0800b991 	.word	0x0800b991
 800b944:	0800b991 	.word	0x0800b991
 800b948:	0800b991 	.word	0x0800b991
 800b94c:	0800b991 	.word	0x0800b991
 800b950:	0800b991 	.word	0x0800b991
 800b954:	0800b991 	.word	0x0800b991
 800b958:	0800b991 	.word	0x0800b991
 800b95c:	0800b989 	.word	0x0800b989
 800b960:	2301      	movs	r3, #1
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b966:	e222      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b968:	2304      	movs	r3, #4
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96e:	e21e      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b970:	2308      	movs	r3, #8
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b976:	e21a      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b978:	2310      	movs	r3, #16
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97e:	e216      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b980:	2320      	movs	r3, #32
 800b982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b986:	e212      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b988:	2340      	movs	r3, #64	@ 0x40
 800b98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98e:	e20e      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b990:	2380      	movs	r3, #128	@ 0x80
 800b992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b996:	e20a      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a69      	ldr	r2, [pc, #420]	@ (800bb44 <UART_SetConfig+0x33c>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d130      	bne.n	800ba04 <UART_SetConfig+0x1fc>
 800b9a2:	4b67      	ldr	r3, [pc, #412]	@ (800bb40 <UART_SetConfig+0x338>)
 800b9a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	2b05      	cmp	r3, #5
 800b9ac:	d826      	bhi.n	800b9fc <UART_SetConfig+0x1f4>
 800b9ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b4 <UART_SetConfig+0x1ac>)
 800b9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b4:	0800b9cd 	.word	0x0800b9cd
 800b9b8:	0800b9d5 	.word	0x0800b9d5
 800b9bc:	0800b9dd 	.word	0x0800b9dd
 800b9c0:	0800b9e5 	.word	0x0800b9e5
 800b9c4:	0800b9ed 	.word	0x0800b9ed
 800b9c8:	0800b9f5 	.word	0x0800b9f5
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d2:	e1ec      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b9d4:	2304      	movs	r3, #4
 800b9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9da:	e1e8      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b9dc:	2308      	movs	r3, #8
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e2:	e1e4      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b9e4:	2310      	movs	r3, #16
 800b9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ea:	e1e0      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b9ec:	2320      	movs	r3, #32
 800b9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9f2:	e1dc      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b9f4:	2340      	movs	r3, #64	@ 0x40
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fa:	e1d8      	b.n	800bdae <UART_SetConfig+0x5a6>
 800b9fc:	2380      	movs	r3, #128	@ 0x80
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba02:	e1d4      	b.n	800bdae <UART_SetConfig+0x5a6>
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a4f      	ldr	r2, [pc, #316]	@ (800bb48 <UART_SetConfig+0x340>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d130      	bne.n	800ba70 <UART_SetConfig+0x268>
 800ba0e:	4b4c      	ldr	r3, [pc, #304]	@ (800bb40 <UART_SetConfig+0x338>)
 800ba10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba12:	f003 0307 	and.w	r3, r3, #7
 800ba16:	2b05      	cmp	r3, #5
 800ba18:	d826      	bhi.n	800ba68 <UART_SetConfig+0x260>
 800ba1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba20 <UART_SetConfig+0x218>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba39 	.word	0x0800ba39
 800ba24:	0800ba41 	.word	0x0800ba41
 800ba28:	0800ba49 	.word	0x0800ba49
 800ba2c:	0800ba51 	.word	0x0800ba51
 800ba30:	0800ba59 	.word	0x0800ba59
 800ba34:	0800ba61 	.word	0x0800ba61
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba3e:	e1b6      	b.n	800bdae <UART_SetConfig+0x5a6>
 800ba40:	2304      	movs	r3, #4
 800ba42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba46:	e1b2      	b.n	800bdae <UART_SetConfig+0x5a6>
 800ba48:	2308      	movs	r3, #8
 800ba4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba4e:	e1ae      	b.n	800bdae <UART_SetConfig+0x5a6>
 800ba50:	2310      	movs	r3, #16
 800ba52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba56:	e1aa      	b.n	800bdae <UART_SetConfig+0x5a6>
 800ba58:	2320      	movs	r3, #32
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5e:	e1a6      	b.n	800bdae <UART_SetConfig+0x5a6>
 800ba60:	2340      	movs	r3, #64	@ 0x40
 800ba62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba66:	e1a2      	b.n	800bdae <UART_SetConfig+0x5a6>
 800ba68:	2380      	movs	r3, #128	@ 0x80
 800ba6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6e:	e19e      	b.n	800bdae <UART_SetConfig+0x5a6>
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a35      	ldr	r2, [pc, #212]	@ (800bb4c <UART_SetConfig+0x344>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d130      	bne.n	800badc <UART_SetConfig+0x2d4>
 800ba7a:	4b31      	ldr	r3, [pc, #196]	@ (800bb40 <UART_SetConfig+0x338>)
 800ba7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba7e:	f003 0307 	and.w	r3, r3, #7
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	d826      	bhi.n	800bad4 <UART_SetConfig+0x2cc>
 800ba86:	a201      	add	r2, pc, #4	@ (adr r2, 800ba8c <UART_SetConfig+0x284>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800baa5 	.word	0x0800baa5
 800ba90:	0800baad 	.word	0x0800baad
 800ba94:	0800bab5 	.word	0x0800bab5
 800ba98:	0800babd 	.word	0x0800babd
 800ba9c:	0800bac5 	.word	0x0800bac5
 800baa0:	0800bacd 	.word	0x0800bacd
 800baa4:	2300      	movs	r3, #0
 800baa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baaa:	e180      	b.n	800bdae <UART_SetConfig+0x5a6>
 800baac:	2304      	movs	r3, #4
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bab2:	e17c      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bab4:	2308      	movs	r3, #8
 800bab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baba:	e178      	b.n	800bdae <UART_SetConfig+0x5a6>
 800babc:	2310      	movs	r3, #16
 800babe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bac2:	e174      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bac4:	2320      	movs	r3, #32
 800bac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baca:	e170      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bacc:	2340      	movs	r3, #64	@ 0x40
 800bace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad2:	e16c      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bad4:	2380      	movs	r3, #128	@ 0x80
 800bad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bada:	e168      	b.n	800bdae <UART_SetConfig+0x5a6>
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a1b      	ldr	r2, [pc, #108]	@ (800bb50 <UART_SetConfig+0x348>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d142      	bne.n	800bb6c <UART_SetConfig+0x364>
 800bae6:	4b16      	ldr	r3, [pc, #88]	@ (800bb40 <UART_SetConfig+0x338>)
 800bae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baea:	f003 0307 	and.w	r3, r3, #7
 800baee:	2b05      	cmp	r3, #5
 800baf0:	d838      	bhi.n	800bb64 <UART_SetConfig+0x35c>
 800baf2:	a201      	add	r2, pc, #4	@ (adr r2, 800baf8 <UART_SetConfig+0x2f0>)
 800baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf8:	0800bb11 	.word	0x0800bb11
 800bafc:	0800bb19 	.word	0x0800bb19
 800bb00:	0800bb21 	.word	0x0800bb21
 800bb04:	0800bb29 	.word	0x0800bb29
 800bb08:	0800bb55 	.word	0x0800bb55
 800bb0c:	0800bb5d 	.word	0x0800bb5d
 800bb10:	2300      	movs	r3, #0
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb16:	e14a      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bb18:	2304      	movs	r3, #4
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1e:	e146      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bb20:	2308      	movs	r3, #8
 800bb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb26:	e142      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bb28:	2310      	movs	r3, #16
 800bb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb2e:	e13e      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bb30:	cfff69f3 	.word	0xcfff69f3
 800bb34:	58000c00 	.word	0x58000c00
 800bb38:	11fff4ff 	.word	0x11fff4ff
 800bb3c:	40011000 	.word	0x40011000
 800bb40:	58024400 	.word	0x58024400
 800bb44:	40004400 	.word	0x40004400
 800bb48:	40004800 	.word	0x40004800
 800bb4c:	40004c00 	.word	0x40004c00
 800bb50:	40005000 	.word	0x40005000
 800bb54:	2320      	movs	r3, #32
 800bb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5a:	e128      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bb5c:	2340      	movs	r3, #64	@ 0x40
 800bb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb62:	e124      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bb64:	2380      	movs	r3, #128	@ 0x80
 800bb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6a:	e120      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4acb      	ldr	r2, [pc, #812]	@ (800bea0 <UART_SetConfig+0x698>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d176      	bne.n	800bc64 <UART_SetConfig+0x45c>
 800bb76:	4bcb      	ldr	r3, [pc, #812]	@ (800bea4 <UART_SetConfig+0x69c>)
 800bb78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb7e:	2b28      	cmp	r3, #40	@ 0x28
 800bb80:	d86c      	bhi.n	800bc5c <UART_SetConfig+0x454>
 800bb82:	a201      	add	r2, pc, #4	@ (adr r2, 800bb88 <UART_SetConfig+0x380>)
 800bb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb88:	0800bc2d 	.word	0x0800bc2d
 800bb8c:	0800bc5d 	.word	0x0800bc5d
 800bb90:	0800bc5d 	.word	0x0800bc5d
 800bb94:	0800bc5d 	.word	0x0800bc5d
 800bb98:	0800bc5d 	.word	0x0800bc5d
 800bb9c:	0800bc5d 	.word	0x0800bc5d
 800bba0:	0800bc5d 	.word	0x0800bc5d
 800bba4:	0800bc5d 	.word	0x0800bc5d
 800bba8:	0800bc35 	.word	0x0800bc35
 800bbac:	0800bc5d 	.word	0x0800bc5d
 800bbb0:	0800bc5d 	.word	0x0800bc5d
 800bbb4:	0800bc5d 	.word	0x0800bc5d
 800bbb8:	0800bc5d 	.word	0x0800bc5d
 800bbbc:	0800bc5d 	.word	0x0800bc5d
 800bbc0:	0800bc5d 	.word	0x0800bc5d
 800bbc4:	0800bc5d 	.word	0x0800bc5d
 800bbc8:	0800bc3d 	.word	0x0800bc3d
 800bbcc:	0800bc5d 	.word	0x0800bc5d
 800bbd0:	0800bc5d 	.word	0x0800bc5d
 800bbd4:	0800bc5d 	.word	0x0800bc5d
 800bbd8:	0800bc5d 	.word	0x0800bc5d
 800bbdc:	0800bc5d 	.word	0x0800bc5d
 800bbe0:	0800bc5d 	.word	0x0800bc5d
 800bbe4:	0800bc5d 	.word	0x0800bc5d
 800bbe8:	0800bc45 	.word	0x0800bc45
 800bbec:	0800bc5d 	.word	0x0800bc5d
 800bbf0:	0800bc5d 	.word	0x0800bc5d
 800bbf4:	0800bc5d 	.word	0x0800bc5d
 800bbf8:	0800bc5d 	.word	0x0800bc5d
 800bbfc:	0800bc5d 	.word	0x0800bc5d
 800bc00:	0800bc5d 	.word	0x0800bc5d
 800bc04:	0800bc5d 	.word	0x0800bc5d
 800bc08:	0800bc4d 	.word	0x0800bc4d
 800bc0c:	0800bc5d 	.word	0x0800bc5d
 800bc10:	0800bc5d 	.word	0x0800bc5d
 800bc14:	0800bc5d 	.word	0x0800bc5d
 800bc18:	0800bc5d 	.word	0x0800bc5d
 800bc1c:	0800bc5d 	.word	0x0800bc5d
 800bc20:	0800bc5d 	.word	0x0800bc5d
 800bc24:	0800bc5d 	.word	0x0800bc5d
 800bc28:	0800bc55 	.word	0x0800bc55
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc32:	e0bc      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bc34:	2304      	movs	r3, #4
 800bc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc3a:	e0b8      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bc3c:	2308      	movs	r3, #8
 800bc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc42:	e0b4      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bc44:	2310      	movs	r3, #16
 800bc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4a:	e0b0      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bc4c:	2320      	movs	r3, #32
 800bc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc52:	e0ac      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bc54:	2340      	movs	r3, #64	@ 0x40
 800bc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5a:	e0a8      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bc5c:	2380      	movs	r3, #128	@ 0x80
 800bc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc62:	e0a4      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a8f      	ldr	r2, [pc, #572]	@ (800bea8 <UART_SetConfig+0x6a0>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d130      	bne.n	800bcd0 <UART_SetConfig+0x4c8>
 800bc6e:	4b8d      	ldr	r3, [pc, #564]	@ (800bea4 <UART_SetConfig+0x69c>)
 800bc70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc72:	f003 0307 	and.w	r3, r3, #7
 800bc76:	2b05      	cmp	r3, #5
 800bc78:	d826      	bhi.n	800bcc8 <UART_SetConfig+0x4c0>
 800bc7a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc80 <UART_SetConfig+0x478>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bc99 	.word	0x0800bc99
 800bc84:	0800bca1 	.word	0x0800bca1
 800bc88:	0800bca9 	.word	0x0800bca9
 800bc8c:	0800bcb1 	.word	0x0800bcb1
 800bc90:	0800bcb9 	.word	0x0800bcb9
 800bc94:	0800bcc1 	.word	0x0800bcc1
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc9e:	e086      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bca0:	2304      	movs	r3, #4
 800bca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bca6:	e082      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bca8:	2308      	movs	r3, #8
 800bcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcae:	e07e      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bcb0:	2310      	movs	r3, #16
 800bcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcb6:	e07a      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bcb8:	2320      	movs	r3, #32
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcbe:	e076      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bcc0:	2340      	movs	r3, #64	@ 0x40
 800bcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc6:	e072      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bcc8:	2380      	movs	r3, #128	@ 0x80
 800bcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcce:	e06e      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a75      	ldr	r2, [pc, #468]	@ (800beac <UART_SetConfig+0x6a4>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d130      	bne.n	800bd3c <UART_SetConfig+0x534>
 800bcda:	4b72      	ldr	r3, [pc, #456]	@ (800bea4 <UART_SetConfig+0x69c>)
 800bcdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcde:	f003 0307 	and.w	r3, r3, #7
 800bce2:	2b05      	cmp	r3, #5
 800bce4:	d826      	bhi.n	800bd34 <UART_SetConfig+0x52c>
 800bce6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcec <UART_SetConfig+0x4e4>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bd05 	.word	0x0800bd05
 800bcf0:	0800bd0d 	.word	0x0800bd0d
 800bcf4:	0800bd15 	.word	0x0800bd15
 800bcf8:	0800bd1d 	.word	0x0800bd1d
 800bcfc:	0800bd25 	.word	0x0800bd25
 800bd00:	0800bd2d 	.word	0x0800bd2d
 800bd04:	2300      	movs	r3, #0
 800bd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd0a:	e050      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd0c:	2304      	movs	r3, #4
 800bd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd12:	e04c      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd14:	2308      	movs	r3, #8
 800bd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd1a:	e048      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd1c:	2310      	movs	r3, #16
 800bd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd22:	e044      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd24:	2320      	movs	r3, #32
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2a:	e040      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd2c:	2340      	movs	r3, #64	@ 0x40
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd32:	e03c      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd34:	2380      	movs	r3, #128	@ 0x80
 800bd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3a:	e038      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a5b      	ldr	r2, [pc, #364]	@ (800beb0 <UART_SetConfig+0x6a8>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d130      	bne.n	800bda8 <UART_SetConfig+0x5a0>
 800bd46:	4b57      	ldr	r3, [pc, #348]	@ (800bea4 <UART_SetConfig+0x69c>)
 800bd48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd4a:	f003 0307 	and.w	r3, r3, #7
 800bd4e:	2b05      	cmp	r3, #5
 800bd50:	d826      	bhi.n	800bda0 <UART_SetConfig+0x598>
 800bd52:	a201      	add	r2, pc, #4	@ (adr r2, 800bd58 <UART_SetConfig+0x550>)
 800bd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd58:	0800bd71 	.word	0x0800bd71
 800bd5c:	0800bd79 	.word	0x0800bd79
 800bd60:	0800bd81 	.word	0x0800bd81
 800bd64:	0800bd89 	.word	0x0800bd89
 800bd68:	0800bd91 	.word	0x0800bd91
 800bd6c:	0800bd99 	.word	0x0800bd99
 800bd70:	2302      	movs	r3, #2
 800bd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd76:	e01a      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd78:	2304      	movs	r3, #4
 800bd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd7e:	e016      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd80:	2308      	movs	r3, #8
 800bd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd86:	e012      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd88:	2310      	movs	r3, #16
 800bd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd8e:	e00e      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd90:	2320      	movs	r3, #32
 800bd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd96:	e00a      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bd98:	2340      	movs	r3, #64	@ 0x40
 800bd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd9e:	e006      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bda0:	2380      	movs	r3, #128	@ 0x80
 800bda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bda6:	e002      	b.n	800bdae <UART_SetConfig+0x5a6>
 800bda8:	2380      	movs	r3, #128	@ 0x80
 800bdaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a3f      	ldr	r2, [pc, #252]	@ (800beb0 <UART_SetConfig+0x6a8>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	f040 80f8 	bne.w	800bfaa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bdba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	dc46      	bgt.n	800be50 <UART_SetConfig+0x648>
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	f2c0 8082 	blt.w	800becc <UART_SetConfig+0x6c4>
 800bdc8:	3b02      	subs	r3, #2
 800bdca:	2b1e      	cmp	r3, #30
 800bdcc:	d87e      	bhi.n	800becc <UART_SetConfig+0x6c4>
 800bdce:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd4 <UART_SetConfig+0x5cc>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800be57 	.word	0x0800be57
 800bdd8:	0800becd 	.word	0x0800becd
 800bddc:	0800be5f 	.word	0x0800be5f
 800bde0:	0800becd 	.word	0x0800becd
 800bde4:	0800becd 	.word	0x0800becd
 800bde8:	0800becd 	.word	0x0800becd
 800bdec:	0800be6f 	.word	0x0800be6f
 800bdf0:	0800becd 	.word	0x0800becd
 800bdf4:	0800becd 	.word	0x0800becd
 800bdf8:	0800becd 	.word	0x0800becd
 800bdfc:	0800becd 	.word	0x0800becd
 800be00:	0800becd 	.word	0x0800becd
 800be04:	0800becd 	.word	0x0800becd
 800be08:	0800becd 	.word	0x0800becd
 800be0c:	0800be7f 	.word	0x0800be7f
 800be10:	0800becd 	.word	0x0800becd
 800be14:	0800becd 	.word	0x0800becd
 800be18:	0800becd 	.word	0x0800becd
 800be1c:	0800becd 	.word	0x0800becd
 800be20:	0800becd 	.word	0x0800becd
 800be24:	0800becd 	.word	0x0800becd
 800be28:	0800becd 	.word	0x0800becd
 800be2c:	0800becd 	.word	0x0800becd
 800be30:	0800becd 	.word	0x0800becd
 800be34:	0800becd 	.word	0x0800becd
 800be38:	0800becd 	.word	0x0800becd
 800be3c:	0800becd 	.word	0x0800becd
 800be40:	0800becd 	.word	0x0800becd
 800be44:	0800becd 	.word	0x0800becd
 800be48:	0800becd 	.word	0x0800becd
 800be4c:	0800bebf 	.word	0x0800bebf
 800be50:	2b40      	cmp	r3, #64	@ 0x40
 800be52:	d037      	beq.n	800bec4 <UART_SetConfig+0x6bc>
 800be54:	e03a      	b.n	800becc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be56:	f7fc fcf3 	bl	8008840 <HAL_RCCEx_GetD3PCLK1Freq>
 800be5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be5c:	e03c      	b.n	800bed8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be62:	4618      	mov	r0, r3
 800be64:	f7fc fd02 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be6c:	e034      	b.n	800bed8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be6e:	f107 0318 	add.w	r3, r7, #24
 800be72:	4618      	mov	r0, r3
 800be74:	f7fc fe4e 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be7c:	e02c      	b.n	800bed8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be7e:	4b09      	ldr	r3, [pc, #36]	@ (800bea4 <UART_SetConfig+0x69c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 0320 	and.w	r3, r3, #32
 800be86:	2b00      	cmp	r3, #0
 800be88:	d016      	beq.n	800beb8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be8a:	4b06      	ldr	r3, [pc, #24]	@ (800bea4 <UART_SetConfig+0x69c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	08db      	lsrs	r3, r3, #3
 800be90:	f003 0303 	and.w	r3, r3, #3
 800be94:	4a07      	ldr	r2, [pc, #28]	@ (800beb4 <UART_SetConfig+0x6ac>)
 800be96:	fa22 f303 	lsr.w	r3, r2, r3
 800be9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be9c:	e01c      	b.n	800bed8 <UART_SetConfig+0x6d0>
 800be9e:	bf00      	nop
 800bea0:	40011400 	.word	0x40011400
 800bea4:	58024400 	.word	0x58024400
 800bea8:	40007800 	.word	0x40007800
 800beac:	40007c00 	.word	0x40007c00
 800beb0:	58000c00 	.word	0x58000c00
 800beb4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800beb8:	4b9d      	ldr	r3, [pc, #628]	@ (800c130 <UART_SetConfig+0x928>)
 800beba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bebc:	e00c      	b.n	800bed8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bebe:	4b9d      	ldr	r3, [pc, #628]	@ (800c134 <UART_SetConfig+0x92c>)
 800bec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bec2:	e009      	b.n	800bed8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beca:	e005      	b.n	800bed8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800becc:	2300      	movs	r3, #0
 800bece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bed6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 81de 	beq.w	800c29c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee4:	4a94      	ldr	r2, [pc, #592]	@ (800c138 <UART_SetConfig+0x930>)
 800bee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beea:	461a      	mov	r2, r3
 800beec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beee:	fbb3 f3f2 	udiv	r3, r3, r2
 800bef2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	685a      	ldr	r2, [r3, #4]
 800bef8:	4613      	mov	r3, r2
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	4413      	add	r3, r2
 800befe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d305      	bcc.n	800bf10 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d903      	bls.n	800bf18 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bf16:	e1c1      	b.n	800c29c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	60bb      	str	r3, [r7, #8]
 800bf1e:	60fa      	str	r2, [r7, #12]
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf24:	4a84      	ldr	r2, [pc, #528]	@ (800c138 <UART_SetConfig+0x930>)
 800bf26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	603b      	str	r3, [r7, #0]
 800bf30:	607a      	str	r2, [r7, #4]
 800bf32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bf3a:	f7f4 fa29 	bl	8000390 <__aeabi_uldivmod>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	4610      	mov	r0, r2
 800bf44:	4619      	mov	r1, r3
 800bf46:	f04f 0200 	mov.w	r2, #0
 800bf4a:	f04f 0300 	mov.w	r3, #0
 800bf4e:	020b      	lsls	r3, r1, #8
 800bf50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf54:	0202      	lsls	r2, r0, #8
 800bf56:	6979      	ldr	r1, [r7, #20]
 800bf58:	6849      	ldr	r1, [r1, #4]
 800bf5a:	0849      	lsrs	r1, r1, #1
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	460c      	mov	r4, r1
 800bf60:	4605      	mov	r5, r0
 800bf62:	eb12 0804 	adds.w	r8, r2, r4
 800bf66:	eb43 0905 	adc.w	r9, r3, r5
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	469a      	mov	sl, r3
 800bf72:	4693      	mov	fp, r2
 800bf74:	4652      	mov	r2, sl
 800bf76:	465b      	mov	r3, fp
 800bf78:	4640      	mov	r0, r8
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	f7f4 fa08 	bl	8000390 <__aeabi_uldivmod>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4613      	mov	r3, r2
 800bf86:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf8e:	d308      	bcc.n	800bfa2 <UART_SetConfig+0x79a>
 800bf90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf96:	d204      	bcs.n	800bfa2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf9e:	60da      	str	r2, [r3, #12]
 800bfa0:	e17c      	b.n	800c29c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bfa8:	e178      	b.n	800c29c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	69db      	ldr	r3, [r3, #28]
 800bfae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfb2:	f040 80c5 	bne.w	800c140 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bfb6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bfba:	2b20      	cmp	r3, #32
 800bfbc:	dc48      	bgt.n	800c050 <UART_SetConfig+0x848>
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	db7b      	blt.n	800c0ba <UART_SetConfig+0x8b2>
 800bfc2:	2b20      	cmp	r3, #32
 800bfc4:	d879      	bhi.n	800c0ba <UART_SetConfig+0x8b2>
 800bfc6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfcc <UART_SetConfig+0x7c4>)
 800bfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfcc:	0800c057 	.word	0x0800c057
 800bfd0:	0800c05f 	.word	0x0800c05f
 800bfd4:	0800c0bb 	.word	0x0800c0bb
 800bfd8:	0800c0bb 	.word	0x0800c0bb
 800bfdc:	0800c067 	.word	0x0800c067
 800bfe0:	0800c0bb 	.word	0x0800c0bb
 800bfe4:	0800c0bb 	.word	0x0800c0bb
 800bfe8:	0800c0bb 	.word	0x0800c0bb
 800bfec:	0800c077 	.word	0x0800c077
 800bff0:	0800c0bb 	.word	0x0800c0bb
 800bff4:	0800c0bb 	.word	0x0800c0bb
 800bff8:	0800c0bb 	.word	0x0800c0bb
 800bffc:	0800c0bb 	.word	0x0800c0bb
 800c000:	0800c0bb 	.word	0x0800c0bb
 800c004:	0800c0bb 	.word	0x0800c0bb
 800c008:	0800c0bb 	.word	0x0800c0bb
 800c00c:	0800c087 	.word	0x0800c087
 800c010:	0800c0bb 	.word	0x0800c0bb
 800c014:	0800c0bb 	.word	0x0800c0bb
 800c018:	0800c0bb 	.word	0x0800c0bb
 800c01c:	0800c0bb 	.word	0x0800c0bb
 800c020:	0800c0bb 	.word	0x0800c0bb
 800c024:	0800c0bb 	.word	0x0800c0bb
 800c028:	0800c0bb 	.word	0x0800c0bb
 800c02c:	0800c0bb 	.word	0x0800c0bb
 800c030:	0800c0bb 	.word	0x0800c0bb
 800c034:	0800c0bb 	.word	0x0800c0bb
 800c038:	0800c0bb 	.word	0x0800c0bb
 800c03c:	0800c0bb 	.word	0x0800c0bb
 800c040:	0800c0bb 	.word	0x0800c0bb
 800c044:	0800c0bb 	.word	0x0800c0bb
 800c048:	0800c0bb 	.word	0x0800c0bb
 800c04c:	0800c0ad 	.word	0x0800c0ad
 800c050:	2b40      	cmp	r3, #64	@ 0x40
 800c052:	d02e      	beq.n	800c0b2 <UART_SetConfig+0x8aa>
 800c054:	e031      	b.n	800c0ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c056:	f7fa fc21 	bl	800689c <HAL_RCC_GetPCLK1Freq>
 800c05a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c05c:	e033      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c05e:	f7fa fc33 	bl	80068c8 <HAL_RCC_GetPCLK2Freq>
 800c062:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c064:	e02f      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fc fbfe 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c074:	e027      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c076:	f107 0318 	add.w	r3, r7, #24
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fc fd4a 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c084:	e01f      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c086:	4b2d      	ldr	r3, [pc, #180]	@ (800c13c <UART_SetConfig+0x934>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f003 0320 	and.w	r3, r3, #32
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d009      	beq.n	800c0a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c092:	4b2a      	ldr	r3, [pc, #168]	@ (800c13c <UART_SetConfig+0x934>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	08db      	lsrs	r3, r3, #3
 800c098:	f003 0303 	and.w	r3, r3, #3
 800c09c:	4a24      	ldr	r2, [pc, #144]	@ (800c130 <UART_SetConfig+0x928>)
 800c09e:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0a4:	e00f      	b.n	800c0c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c0a6:	4b22      	ldr	r3, [pc, #136]	@ (800c130 <UART_SetConfig+0x928>)
 800c0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0aa:	e00c      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0ac:	4b21      	ldr	r3, [pc, #132]	@ (800c134 <UART_SetConfig+0x92c>)
 800c0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0b0:	e009      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0b8:	e005      	b.n	800c0c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c0c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 80e7 	beq.w	800c29c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d2:	4a19      	ldr	r2, [pc, #100]	@ (800c138 <UART_SetConfig+0x930>)
 800c0d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0e0:	005a      	lsls	r2, r3, #1
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	085b      	lsrs	r3, r3, #1
 800c0e8:	441a      	add	r2, r3
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f6:	2b0f      	cmp	r3, #15
 800c0f8:	d916      	bls.n	800c128 <UART_SetConfig+0x920>
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c100:	d212      	bcs.n	800c128 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c104:	b29b      	uxth	r3, r3
 800c106:	f023 030f 	bic.w	r3, r3, #15
 800c10a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10e:	085b      	lsrs	r3, r3, #1
 800c110:	b29b      	uxth	r3, r3
 800c112:	f003 0307 	and.w	r3, r3, #7
 800c116:	b29a      	uxth	r2, r3
 800c118:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c11a:	4313      	orrs	r3, r2
 800c11c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c124:	60da      	str	r2, [r3, #12]
 800c126:	e0b9      	b.n	800c29c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c12e:	e0b5      	b.n	800c29c <UART_SetConfig+0xa94>
 800c130:	03d09000 	.word	0x03d09000
 800c134:	003d0900 	.word	0x003d0900
 800c138:	08016aac 	.word	0x08016aac
 800c13c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c140:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c144:	2b20      	cmp	r3, #32
 800c146:	dc49      	bgt.n	800c1dc <UART_SetConfig+0x9d4>
 800c148:	2b00      	cmp	r3, #0
 800c14a:	db7c      	blt.n	800c246 <UART_SetConfig+0xa3e>
 800c14c:	2b20      	cmp	r3, #32
 800c14e:	d87a      	bhi.n	800c246 <UART_SetConfig+0xa3e>
 800c150:	a201      	add	r2, pc, #4	@ (adr r2, 800c158 <UART_SetConfig+0x950>)
 800c152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c156:	bf00      	nop
 800c158:	0800c1e3 	.word	0x0800c1e3
 800c15c:	0800c1eb 	.word	0x0800c1eb
 800c160:	0800c247 	.word	0x0800c247
 800c164:	0800c247 	.word	0x0800c247
 800c168:	0800c1f3 	.word	0x0800c1f3
 800c16c:	0800c247 	.word	0x0800c247
 800c170:	0800c247 	.word	0x0800c247
 800c174:	0800c247 	.word	0x0800c247
 800c178:	0800c203 	.word	0x0800c203
 800c17c:	0800c247 	.word	0x0800c247
 800c180:	0800c247 	.word	0x0800c247
 800c184:	0800c247 	.word	0x0800c247
 800c188:	0800c247 	.word	0x0800c247
 800c18c:	0800c247 	.word	0x0800c247
 800c190:	0800c247 	.word	0x0800c247
 800c194:	0800c247 	.word	0x0800c247
 800c198:	0800c213 	.word	0x0800c213
 800c19c:	0800c247 	.word	0x0800c247
 800c1a0:	0800c247 	.word	0x0800c247
 800c1a4:	0800c247 	.word	0x0800c247
 800c1a8:	0800c247 	.word	0x0800c247
 800c1ac:	0800c247 	.word	0x0800c247
 800c1b0:	0800c247 	.word	0x0800c247
 800c1b4:	0800c247 	.word	0x0800c247
 800c1b8:	0800c247 	.word	0x0800c247
 800c1bc:	0800c247 	.word	0x0800c247
 800c1c0:	0800c247 	.word	0x0800c247
 800c1c4:	0800c247 	.word	0x0800c247
 800c1c8:	0800c247 	.word	0x0800c247
 800c1cc:	0800c247 	.word	0x0800c247
 800c1d0:	0800c247 	.word	0x0800c247
 800c1d4:	0800c247 	.word	0x0800c247
 800c1d8:	0800c239 	.word	0x0800c239
 800c1dc:	2b40      	cmp	r3, #64	@ 0x40
 800c1de:	d02e      	beq.n	800c23e <UART_SetConfig+0xa36>
 800c1e0:	e031      	b.n	800c246 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1e2:	f7fa fb5b 	bl	800689c <HAL_RCC_GetPCLK1Freq>
 800c1e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1e8:	e033      	b.n	800c252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1ea:	f7fa fb6d 	bl	80068c8 <HAL_RCC_GetPCLK2Freq>
 800c1ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1f0:	e02f      	b.n	800c252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fc fb38 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c200:	e027      	b.n	800c252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c202:	f107 0318 	add.w	r3, r7, #24
 800c206:	4618      	mov	r0, r3
 800c208:	f7fc fc84 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c210:	e01f      	b.n	800c252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c212:	4b2d      	ldr	r3, [pc, #180]	@ (800c2c8 <UART_SetConfig+0xac0>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f003 0320 	and.w	r3, r3, #32
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d009      	beq.n	800c232 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c21e:	4b2a      	ldr	r3, [pc, #168]	@ (800c2c8 <UART_SetConfig+0xac0>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	08db      	lsrs	r3, r3, #3
 800c224:	f003 0303 	and.w	r3, r3, #3
 800c228:	4a28      	ldr	r2, [pc, #160]	@ (800c2cc <UART_SetConfig+0xac4>)
 800c22a:	fa22 f303 	lsr.w	r3, r2, r3
 800c22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c230:	e00f      	b.n	800c252 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c232:	4b26      	ldr	r3, [pc, #152]	@ (800c2cc <UART_SetConfig+0xac4>)
 800c234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c236:	e00c      	b.n	800c252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c238:	4b25      	ldr	r3, [pc, #148]	@ (800c2d0 <UART_SetConfig+0xac8>)
 800c23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c23c:	e009      	b.n	800c252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c23e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c244:	e005      	b.n	800c252 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c246:	2300      	movs	r3, #0
 800c248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c250:	bf00      	nop
    }

    if (pclk != 0U)
 800c252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c254:	2b00      	cmp	r3, #0
 800c256:	d021      	beq.n	800c29c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25c:	4a1d      	ldr	r2, [pc, #116]	@ (800c2d4 <UART_SetConfig+0xacc>)
 800c25e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c262:	461a      	mov	r2, r3
 800c264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c266:	fbb3 f2f2 	udiv	r2, r3, r2
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	085b      	lsrs	r3, r3, #1
 800c270:	441a      	add	r2, r3
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	fbb2 f3f3 	udiv	r3, r2, r3
 800c27a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27e:	2b0f      	cmp	r3, #15
 800c280:	d909      	bls.n	800c296 <UART_SetConfig+0xa8e>
 800c282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c288:	d205      	bcs.n	800c296 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	60da      	str	r2, [r3, #12]
 800c294:	e002      	b.n	800c29c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c2b8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3748      	adds	r7, #72	@ 0x48
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c2c6:	bf00      	nop
 800c2c8:	58024400 	.word	0x58024400
 800c2cc:	03d09000 	.word	0x03d09000
 800c2d0:	003d0900 	.word	0x003d0900
 800c2d4:	08016aac 	.word	0x08016aac

0800c2d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e4:	f003 0308 	and.w	r3, r3, #8
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00a      	beq.n	800c302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	430a      	orrs	r2, r1
 800c300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00a      	beq.n	800c324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	430a      	orrs	r2, r1
 800c322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c328:	f003 0302 	and.w	r3, r3, #2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00a      	beq.n	800c346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	430a      	orrs	r2, r1
 800c344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c34a:	f003 0304 	and.w	r3, r3, #4
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00a      	beq.n	800c368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	430a      	orrs	r2, r1
 800c366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c36c:	f003 0310 	and.w	r3, r3, #16
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00a      	beq.n	800c38a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	430a      	orrs	r2, r1
 800c388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c38e:	f003 0320 	and.w	r3, r3, #32
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00a      	beq.n	800c3ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	430a      	orrs	r2, r1
 800c3aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d01a      	beq.n	800c3ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3d6:	d10a      	bne.n	800c3ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00a      	beq.n	800c410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	430a      	orrs	r2, r1
 800c40e:	605a      	str	r2, [r3, #4]
  }
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b098      	sub	sp, #96	@ 0x60
 800c420:	af02      	add	r7, sp, #8
 800c422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c42c:	f7f6 faf4 	bl	8002a18 <HAL_GetTick>
 800c430:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f003 0308 	and.w	r3, r3, #8
 800c43c:	2b08      	cmp	r3, #8
 800c43e:	d12f      	bne.n	800c4a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c448:	2200      	movs	r2, #0
 800c44a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f88e 	bl	800c570 <UART_WaitOnFlagUntilTimeout>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d022      	beq.n	800c4a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c462:	e853 3f00 	ldrex	r3, [r3]
 800c466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c46a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c46e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	461a      	mov	r2, r3
 800c476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c478:	647b      	str	r3, [r7, #68]	@ 0x44
 800c47a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c47e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c480:	e841 2300 	strex	r3, r2, [r1]
 800c484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1e6      	bne.n	800c45a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2220      	movs	r2, #32
 800c490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c49c:	2303      	movs	r3, #3
 800c49e:	e063      	b.n	800c568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 0304 	and.w	r3, r3, #4
 800c4aa:	2b04      	cmp	r3, #4
 800c4ac:	d149      	bne.n	800c542 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f857 	bl	800c570 <UART_WaitOnFlagUntilTimeout>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d03c      	beq.n	800c542 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d0:	e853 3f00 	ldrex	r3, [r3]
 800c4d4:	623b      	str	r3, [r7, #32]
   return(result);
 800c4d6:	6a3b      	ldr	r3, [r7, #32]
 800c4d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4ee:	e841 2300 	strex	r3, r2, [r1]
 800c4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1e6      	bne.n	800c4c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	3308      	adds	r3, #8
 800c500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	60fb      	str	r3, [r7, #12]
   return(result);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f023 0301 	bic.w	r3, r3, #1
 800c510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	3308      	adds	r3, #8
 800c518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c51a:	61fa      	str	r2, [r7, #28]
 800c51c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51e:	69b9      	ldr	r1, [r7, #24]
 800c520:	69fa      	ldr	r2, [r7, #28]
 800c522:	e841 2300 	strex	r3, r2, [r1]
 800c526:	617b      	str	r3, [r7, #20]
   return(result);
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1e5      	bne.n	800c4fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2220      	movs	r2, #32
 800c532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c53e:	2303      	movs	r3, #3
 800c540:	e012      	b.n	800c568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2220      	movs	r2, #32
 800c546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2220      	movs	r2, #32
 800c54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3758      	adds	r7, #88	@ 0x58
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	603b      	str	r3, [r7, #0]
 800c57c:	4613      	mov	r3, r2
 800c57e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c580:	e04f      	b.n	800c622 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c588:	d04b      	beq.n	800c622 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c58a:	f7f6 fa45 	bl	8002a18 <HAL_GetTick>
 800c58e:	4602      	mov	r2, r0
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	69ba      	ldr	r2, [r7, #24]
 800c596:	429a      	cmp	r2, r3
 800c598:	d302      	bcc.n	800c5a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d101      	bne.n	800c5a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c5a0:	2303      	movs	r3, #3
 800c5a2:	e04e      	b.n	800c642 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f003 0304 	and.w	r3, r3, #4
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d037      	beq.n	800c622 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b80      	cmp	r3, #128	@ 0x80
 800c5b6:	d034      	beq.n	800c622 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	2b40      	cmp	r3, #64	@ 0x40
 800c5bc:	d031      	beq.n	800c622 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	69db      	ldr	r3, [r3, #28]
 800c5c4:	f003 0308 	and.w	r3, r3, #8
 800c5c8:	2b08      	cmp	r3, #8
 800c5ca:	d110      	bne.n	800c5ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2208      	movs	r2, #8
 800c5d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f000 f839 	bl	800c64c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2208      	movs	r2, #8
 800c5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e029      	b.n	800c642 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	69db      	ldr	r3, [r3, #28]
 800c5f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c5f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c5fc:	d111      	bne.n	800c622 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 f81f 	bl	800c64c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2220      	movs	r2, #32
 800c612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c61e:	2303      	movs	r3, #3
 800c620:	e00f      	b.n	800c642 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	69da      	ldr	r2, [r3, #28]
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	4013      	ands	r3, r2
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	429a      	cmp	r2, r3
 800c630:	bf0c      	ite	eq
 800c632:	2301      	moveq	r3, #1
 800c634:	2300      	movne	r3, #0
 800c636:	b2db      	uxtb	r3, r3
 800c638:	461a      	mov	r2, r3
 800c63a:	79fb      	ldrb	r3, [r7, #7]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d0a0      	beq.n	800c582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
	...

0800c64c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b095      	sub	sp, #84	@ 0x54
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c65c:	e853 3f00 	ldrex	r3, [r3]
 800c660:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	461a      	mov	r2, r3
 800c670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c672:	643b      	str	r3, [r7, #64]	@ 0x40
 800c674:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c676:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c678:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c67a:	e841 2300 	strex	r3, r2, [r1]
 800c67e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1e6      	bne.n	800c654 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	3308      	adds	r3, #8
 800c68c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68e:	6a3b      	ldr	r3, [r7, #32]
 800c690:	e853 3f00 	ldrex	r3, [r3]
 800c694:	61fb      	str	r3, [r7, #28]
   return(result);
 800c696:	69fa      	ldr	r2, [r7, #28]
 800c698:	4b1e      	ldr	r3, [pc, #120]	@ (800c714 <UART_EndRxTransfer+0xc8>)
 800c69a:	4013      	ands	r3, r2
 800c69c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	3308      	adds	r3, #8
 800c6a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6ae:	e841 2300 	strex	r3, r2, [r1]
 800c6b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1e5      	bne.n	800c686 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d118      	bne.n	800c6f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	e853 3f00 	ldrex	r3, [r3]
 800c6ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	f023 0310 	bic.w	r3, r3, #16
 800c6d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	461a      	mov	r2, r3
 800c6de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6e0:	61bb      	str	r3, [r7, #24]
 800c6e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e4:	6979      	ldr	r1, [r7, #20]
 800c6e6:	69ba      	ldr	r2, [r7, #24]
 800c6e8:	e841 2300 	strex	r3, r2, [r1]
 800c6ec:	613b      	str	r3, [r7, #16]
   return(result);
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1e6      	bne.n	800c6c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2220      	movs	r2, #32
 800c6f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c708:	bf00      	nop
 800c70a:	3754      	adds	r7, #84	@ 0x54
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr
 800c714:	effffffe 	.word	0xeffffffe

0800c718 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c726:	2b01      	cmp	r3, #1
 800c728:	d101      	bne.n	800c72e <HAL_UARTEx_DisableFifoMode+0x16>
 800c72a:	2302      	movs	r3, #2
 800c72c:	e027      	b.n	800c77e <HAL_UARTEx_DisableFifoMode+0x66>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2201      	movs	r2, #1
 800c732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2224      	movs	r2, #36	@ 0x24
 800c73a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f022 0201 	bic.w	r2, r2, #1
 800c754:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c75c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2220      	movs	r2, #32
 800c770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3714      	adds	r7, #20
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr

0800c78a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b084      	sub	sp, #16
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d101      	bne.n	800c7a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c79e:	2302      	movs	r3, #2
 800c7a0:	e02d      	b.n	800c7fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2224      	movs	r2, #36	@ 0x24
 800c7ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f022 0201 	bic.w	r2, r2, #1
 800c7c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	683a      	ldr	r2, [r7, #0]
 800c7da:	430a      	orrs	r2, r1
 800c7dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f850 	bl	800c884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2220      	movs	r2, #32
 800c7f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b084      	sub	sp, #16
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c816:	2b01      	cmp	r3, #1
 800c818:	d101      	bne.n	800c81e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c81a:	2302      	movs	r3, #2
 800c81c:	e02d      	b.n	800c87a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2224      	movs	r2, #36	@ 0x24
 800c82a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f022 0201 	bic.w	r2, r2, #1
 800c844:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	430a      	orrs	r2, r1
 800c858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f812 	bl	800c884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2220      	movs	r2, #32
 800c86c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
	...

0800c884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c890:	2b00      	cmp	r3, #0
 800c892:	d108      	bne.n	800c8a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c8a4:	e031      	b.n	800c90a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c8a6:	2310      	movs	r3, #16
 800c8a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c8aa:	2310      	movs	r3, #16
 800c8ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	0e5b      	lsrs	r3, r3, #25
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	f003 0307 	and.w	r3, r3, #7
 800c8bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	0f5b      	lsrs	r3, r3, #29
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	f003 0307 	and.w	r3, r3, #7
 800c8cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8ce:	7bbb      	ldrb	r3, [r7, #14]
 800c8d0:	7b3a      	ldrb	r2, [r7, #12]
 800c8d2:	4911      	ldr	r1, [pc, #68]	@ (800c918 <UARTEx_SetNbDataToProcess+0x94>)
 800c8d4:	5c8a      	ldrb	r2, [r1, r2]
 800c8d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8da:	7b3a      	ldrb	r2, [r7, #12]
 800c8dc:	490f      	ldr	r1, [pc, #60]	@ (800c91c <UARTEx_SetNbDataToProcess+0x98>)
 800c8de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	7b7a      	ldrb	r2, [r7, #13]
 800c8f0:	4909      	ldr	r1, [pc, #36]	@ (800c918 <UARTEx_SetNbDataToProcess+0x94>)
 800c8f2:	5c8a      	ldrb	r2, [r1, r2]
 800c8f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8f8:	7b7a      	ldrb	r2, [r7, #13]
 800c8fa:	4908      	ldr	r1, [pc, #32]	@ (800c91c <UARTEx_SetNbDataToProcess+0x98>)
 800c8fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800c902:	b29a      	uxth	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c90a:	bf00      	nop
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	08016ac4 	.word	0x08016ac4
 800c91c:	08016acc 	.word	0x08016acc

0800c920 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d101      	bne.n	800c932 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	e03c      	b.n	800c9ac <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d106      	bne.n	800c94c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7f5 fdb8 	bl	80024bc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2202      	movs	r2, #2
 800c950:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f022 0201 	bic.w	r2, r2, #1
 800c962:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f85b 	bl	800ca20 <USART_SetConfig>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d101      	bne.n	800c974 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	e01b      	b.n	800c9ac <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	685a      	ldr	r2, [r3, #4]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c982:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	689a      	ldr	r2, [r3, #8]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c992:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f042 0201 	orr.w	r2, r2, #1
 800c9a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fd5b 	bl	800d460 <USART_CheckIdleState>
 800c9aa:	4603      	mov	r3, r0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	603b      	str	r3, [r7, #0]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c9c4:	e018      	b.n	800c9f8 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9cc:	d014      	beq.n	800c9f8 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9ce:	f7f6 f823 	bl	8002a18 <HAL_GetTick>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	69ba      	ldr	r2, [r7, #24]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d302      	bcc.n	800c9e4 <USART_WaitOnFlagUntilTimeout+0x30>
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d109      	bne.n	800c9f8 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	e00f      	b.n	800ca18 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	69da      	ldr	r2, [r3, #28]
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	4013      	ands	r3, r2
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	bf0c      	ite	eq
 800ca08:	2301      	moveq	r3, #1
 800ca0a:	2300      	movne	r3, #0
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	461a      	mov	r2, r3
 800ca10:	79fb      	ldrb	r3, [r7, #7]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d0d7      	beq.n	800c9c6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b08e      	sub	sp, #56	@ 0x38
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	689a      	ldr	r2, [r3, #8]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	695b      	ldr	r3, [r3, #20]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	4bc9      	ldr	r3, [pc, #804]	@ (800cd74 <USART_SetConfig+0x354>)
 800ca50:	4013      	ands	r3, r2
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	6812      	ldr	r2, [r2, #0]
 800ca56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca58:	430b      	orrs	r3, r1
 800ca5a:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800ca5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ca60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	699a      	ldr	r2, [r3, #24]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	69db      	ldr	r3, [r3, #28]
 800ca74:	4313      	orrs	r3, r2
 800ca76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca82:	4313      	orrs	r3, r2
 800ca84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	4bba      	ldr	r3, [pc, #744]	@ (800cd78 <USART_SetConfig+0x358>)
 800ca8e:	4013      	ands	r3, r2
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	6812      	ldr	r2, [r2, #0]
 800ca94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca96:	430b      	orrs	r3, r1
 800ca98:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caa0:	f023 010f 	bic.w	r1, r3, #15
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	430a      	orrs	r2, r1
 800caae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4ab1      	ldr	r2, [pc, #708]	@ (800cd7c <USART_SetConfig+0x35c>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d176      	bne.n	800cba8 <USART_SetConfig+0x188>
 800caba:	4bb1      	ldr	r3, [pc, #708]	@ (800cd80 <USART_SetConfig+0x360>)
 800cabc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cabe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cac2:	2b28      	cmp	r3, #40	@ 0x28
 800cac4:	d86c      	bhi.n	800cba0 <USART_SetConfig+0x180>
 800cac6:	a201      	add	r2, pc, #4	@ (adr r2, 800cacc <USART_SetConfig+0xac>)
 800cac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cacc:	0800cb71 	.word	0x0800cb71
 800cad0:	0800cba1 	.word	0x0800cba1
 800cad4:	0800cba1 	.word	0x0800cba1
 800cad8:	0800cba1 	.word	0x0800cba1
 800cadc:	0800cba1 	.word	0x0800cba1
 800cae0:	0800cba1 	.word	0x0800cba1
 800cae4:	0800cba1 	.word	0x0800cba1
 800cae8:	0800cba1 	.word	0x0800cba1
 800caec:	0800cb79 	.word	0x0800cb79
 800caf0:	0800cba1 	.word	0x0800cba1
 800caf4:	0800cba1 	.word	0x0800cba1
 800caf8:	0800cba1 	.word	0x0800cba1
 800cafc:	0800cba1 	.word	0x0800cba1
 800cb00:	0800cba1 	.word	0x0800cba1
 800cb04:	0800cba1 	.word	0x0800cba1
 800cb08:	0800cba1 	.word	0x0800cba1
 800cb0c:	0800cb81 	.word	0x0800cb81
 800cb10:	0800cba1 	.word	0x0800cba1
 800cb14:	0800cba1 	.word	0x0800cba1
 800cb18:	0800cba1 	.word	0x0800cba1
 800cb1c:	0800cba1 	.word	0x0800cba1
 800cb20:	0800cba1 	.word	0x0800cba1
 800cb24:	0800cba1 	.word	0x0800cba1
 800cb28:	0800cba1 	.word	0x0800cba1
 800cb2c:	0800cb89 	.word	0x0800cb89
 800cb30:	0800cba1 	.word	0x0800cba1
 800cb34:	0800cba1 	.word	0x0800cba1
 800cb38:	0800cba1 	.word	0x0800cba1
 800cb3c:	0800cba1 	.word	0x0800cba1
 800cb40:	0800cba1 	.word	0x0800cba1
 800cb44:	0800cba1 	.word	0x0800cba1
 800cb48:	0800cba1 	.word	0x0800cba1
 800cb4c:	0800cb91 	.word	0x0800cb91
 800cb50:	0800cba1 	.word	0x0800cba1
 800cb54:	0800cba1 	.word	0x0800cba1
 800cb58:	0800cba1 	.word	0x0800cba1
 800cb5c:	0800cba1 	.word	0x0800cba1
 800cb60:	0800cba1 	.word	0x0800cba1
 800cb64:	0800cba1 	.word	0x0800cba1
 800cb68:	0800cba1 	.word	0x0800cba1
 800cb6c:	0800cb99 	.word	0x0800cb99
 800cb70:	2301      	movs	r3, #1
 800cb72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cb76:	e112      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cb78:	2302      	movs	r3, #2
 800cb7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cb7e:	e10e      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cb80:	2304      	movs	r3, #4
 800cb82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cb86:	e10a      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cb88:	2308      	movs	r3, #8
 800cb8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cb8e:	e106      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cb90:	2310      	movs	r3, #16
 800cb92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cb96:	e102      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cb98:	2320      	movs	r3, #32
 800cb9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cb9e:	e0fe      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cba0:	2340      	movs	r3, #64	@ 0x40
 800cba2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cba6:	e0fa      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a75      	ldr	r2, [pc, #468]	@ (800cd84 <USART_SetConfig+0x364>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d130      	bne.n	800cc14 <USART_SetConfig+0x1f4>
 800cbb2:	4b73      	ldr	r3, [pc, #460]	@ (800cd80 <USART_SetConfig+0x360>)
 800cbb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbb6:	f003 0307 	and.w	r3, r3, #7
 800cbba:	2b05      	cmp	r3, #5
 800cbbc:	d826      	bhi.n	800cc0c <USART_SetConfig+0x1ec>
 800cbbe:	a201      	add	r2, pc, #4	@ (adr r2, 800cbc4 <USART_SetConfig+0x1a4>)
 800cbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc4:	0800cbdd 	.word	0x0800cbdd
 800cbc8:	0800cbe5 	.word	0x0800cbe5
 800cbcc:	0800cbed 	.word	0x0800cbed
 800cbd0:	0800cbf5 	.word	0x0800cbf5
 800cbd4:	0800cbfd 	.word	0x0800cbfd
 800cbd8:	0800cc05 	.word	0x0800cc05
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cbe2:	e0dc      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cbe4:	2302      	movs	r3, #2
 800cbe6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cbea:	e0d8      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cbec:	2304      	movs	r3, #4
 800cbee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cbf2:	e0d4      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cbf4:	2308      	movs	r3, #8
 800cbf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cbfa:	e0d0      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cbfc:	2310      	movs	r3, #16
 800cbfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc02:	e0cc      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cc04:	2320      	movs	r3, #32
 800cc06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc0a:	e0c8      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cc0c:	2340      	movs	r3, #64	@ 0x40
 800cc0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc12:	e0c4      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a5b      	ldr	r2, [pc, #364]	@ (800cd88 <USART_SetConfig+0x368>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d130      	bne.n	800cc80 <USART_SetConfig+0x260>
 800cc1e:	4b58      	ldr	r3, [pc, #352]	@ (800cd80 <USART_SetConfig+0x360>)
 800cc20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	2b05      	cmp	r3, #5
 800cc28:	d826      	bhi.n	800cc78 <USART_SetConfig+0x258>
 800cc2a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc30 <USART_SetConfig+0x210>)
 800cc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc30:	0800cc49 	.word	0x0800cc49
 800cc34:	0800cc51 	.word	0x0800cc51
 800cc38:	0800cc59 	.word	0x0800cc59
 800cc3c:	0800cc61 	.word	0x0800cc61
 800cc40:	0800cc69 	.word	0x0800cc69
 800cc44:	0800cc71 	.word	0x0800cc71
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc4e:	e0a6      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cc50:	2302      	movs	r3, #2
 800cc52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc56:	e0a2      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cc58:	2304      	movs	r3, #4
 800cc5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc5e:	e09e      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cc60:	2308      	movs	r3, #8
 800cc62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc66:	e09a      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cc68:	2310      	movs	r3, #16
 800cc6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc6e:	e096      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cc70:	2320      	movs	r3, #32
 800cc72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc76:	e092      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cc78:	2340      	movs	r3, #64	@ 0x40
 800cc7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc7e:	e08e      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a41      	ldr	r2, [pc, #260]	@ (800cd8c <USART_SetConfig+0x36c>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	f040 8086 	bne.w	800cd98 <USART_SetConfig+0x378>
 800cc8c:	4b3c      	ldr	r3, [pc, #240]	@ (800cd80 <USART_SetConfig+0x360>)
 800cc8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc94:	2b28      	cmp	r3, #40	@ 0x28
 800cc96:	d87b      	bhi.n	800cd90 <USART_SetConfig+0x370>
 800cc98:	a201      	add	r2, pc, #4	@ (adr r2, 800cca0 <USART_SetConfig+0x280>)
 800cc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9e:	bf00      	nop
 800cca0:	0800cd45 	.word	0x0800cd45
 800cca4:	0800cd91 	.word	0x0800cd91
 800cca8:	0800cd91 	.word	0x0800cd91
 800ccac:	0800cd91 	.word	0x0800cd91
 800ccb0:	0800cd91 	.word	0x0800cd91
 800ccb4:	0800cd91 	.word	0x0800cd91
 800ccb8:	0800cd91 	.word	0x0800cd91
 800ccbc:	0800cd91 	.word	0x0800cd91
 800ccc0:	0800cd4d 	.word	0x0800cd4d
 800ccc4:	0800cd91 	.word	0x0800cd91
 800ccc8:	0800cd91 	.word	0x0800cd91
 800cccc:	0800cd91 	.word	0x0800cd91
 800ccd0:	0800cd91 	.word	0x0800cd91
 800ccd4:	0800cd91 	.word	0x0800cd91
 800ccd8:	0800cd91 	.word	0x0800cd91
 800ccdc:	0800cd91 	.word	0x0800cd91
 800cce0:	0800cd55 	.word	0x0800cd55
 800cce4:	0800cd91 	.word	0x0800cd91
 800cce8:	0800cd91 	.word	0x0800cd91
 800ccec:	0800cd91 	.word	0x0800cd91
 800ccf0:	0800cd91 	.word	0x0800cd91
 800ccf4:	0800cd91 	.word	0x0800cd91
 800ccf8:	0800cd91 	.word	0x0800cd91
 800ccfc:	0800cd91 	.word	0x0800cd91
 800cd00:	0800cd5d 	.word	0x0800cd5d
 800cd04:	0800cd91 	.word	0x0800cd91
 800cd08:	0800cd91 	.word	0x0800cd91
 800cd0c:	0800cd91 	.word	0x0800cd91
 800cd10:	0800cd91 	.word	0x0800cd91
 800cd14:	0800cd91 	.word	0x0800cd91
 800cd18:	0800cd91 	.word	0x0800cd91
 800cd1c:	0800cd91 	.word	0x0800cd91
 800cd20:	0800cd65 	.word	0x0800cd65
 800cd24:	0800cd91 	.word	0x0800cd91
 800cd28:	0800cd91 	.word	0x0800cd91
 800cd2c:	0800cd91 	.word	0x0800cd91
 800cd30:	0800cd91 	.word	0x0800cd91
 800cd34:	0800cd91 	.word	0x0800cd91
 800cd38:	0800cd91 	.word	0x0800cd91
 800cd3c:	0800cd91 	.word	0x0800cd91
 800cd40:	0800cd6d 	.word	0x0800cd6d
 800cd44:	2301      	movs	r3, #1
 800cd46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd4a:	e028      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd52:	e024      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cd54:	2304      	movs	r3, #4
 800cd56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd5a:	e020      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cd5c:	2308      	movs	r3, #8
 800cd5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd62:	e01c      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cd64:	2310      	movs	r3, #16
 800cd66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd6a:	e018      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cd6c:	2320      	movs	r3, #32
 800cd6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd72:	e014      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cd74:	cfff69f3 	.word	0xcfff69f3
 800cd78:	ffffc0f6 	.word	0xffffc0f6
 800cd7c:	40011000 	.word	0x40011000
 800cd80:	58024400 	.word	0x58024400
 800cd84:	40004400 	.word	0x40004400
 800cd88:	40004800 	.word	0x40004800
 800cd8c:	40011400 	.word	0x40011400
 800cd90:	2340      	movs	r3, #64	@ 0x40
 800cd92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd96:	e002      	b.n	800cd9e <USART_SetConfig+0x37e>
 800cd98:	2340      	movs	r3, #64	@ 0x40
 800cd9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800cd9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cda2:	2b20      	cmp	r3, #32
 800cda4:	f200 8329 	bhi.w	800d3fa <USART_SetConfig+0x9da>
 800cda8:	a201      	add	r2, pc, #4	@ (adr r2, 800cdb0 <USART_SetConfig+0x390>)
 800cdaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdae:	bf00      	nop
 800cdb0:	0800ce35 	.word	0x0800ce35
 800cdb4:	0800ceeb 	.word	0x0800ceeb
 800cdb8:	0800cfa1 	.word	0x0800cfa1
 800cdbc:	0800d3fb 	.word	0x0800d3fb
 800cdc0:	0800d05b 	.word	0x0800d05b
 800cdc4:	0800d3fb 	.word	0x0800d3fb
 800cdc8:	0800d3fb 	.word	0x0800d3fb
 800cdcc:	0800d3fb 	.word	0x0800d3fb
 800cdd0:	0800d115 	.word	0x0800d115
 800cdd4:	0800d3fb 	.word	0x0800d3fb
 800cdd8:	0800d3fb 	.word	0x0800d3fb
 800cddc:	0800d3fb 	.word	0x0800d3fb
 800cde0:	0800d3fb 	.word	0x0800d3fb
 800cde4:	0800d3fb 	.word	0x0800d3fb
 800cde8:	0800d3fb 	.word	0x0800d3fb
 800cdec:	0800d3fb 	.word	0x0800d3fb
 800cdf0:	0800d28d 	.word	0x0800d28d
 800cdf4:	0800d3fb 	.word	0x0800d3fb
 800cdf8:	0800d3fb 	.word	0x0800d3fb
 800cdfc:	0800d3fb 	.word	0x0800d3fb
 800ce00:	0800d3fb 	.word	0x0800d3fb
 800ce04:	0800d3fb 	.word	0x0800d3fb
 800ce08:	0800d3fb 	.word	0x0800d3fb
 800ce0c:	0800d3fb 	.word	0x0800d3fb
 800ce10:	0800d3fb 	.word	0x0800d3fb
 800ce14:	0800d3fb 	.word	0x0800d3fb
 800ce18:	0800d3fb 	.word	0x0800d3fb
 800ce1c:	0800d3fb 	.word	0x0800d3fb
 800ce20:	0800d3fb 	.word	0x0800d3fb
 800ce24:	0800d3fb 	.word	0x0800d3fb
 800ce28:	0800d3fb 	.word	0x0800d3fb
 800ce2c:	0800d3fb 	.word	0x0800d3fb
 800ce30:	0800d349 	.word	0x0800d349
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce34:	f7f9 fd32 	bl	800689c <HAL_RCC_GetPCLK1Freq>
 800ce38:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d044      	beq.n	800cecc <USART_SetConfig+0x4ac>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d03e      	beq.n	800cec8 <USART_SetConfig+0x4a8>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d038      	beq.n	800cec4 <USART_SetConfig+0x4a4>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	d032      	beq.n	800cec0 <USART_SetConfig+0x4a0>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce5e:	2b04      	cmp	r3, #4
 800ce60:	d02c      	beq.n	800cebc <USART_SetConfig+0x49c>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce66:	2b05      	cmp	r3, #5
 800ce68:	d026      	beq.n	800ceb8 <USART_SetConfig+0x498>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce6e:	2b06      	cmp	r3, #6
 800ce70:	d020      	beq.n	800ceb4 <USART_SetConfig+0x494>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce76:	2b07      	cmp	r3, #7
 800ce78:	d01a      	beq.n	800ceb0 <USART_SetConfig+0x490>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce7e:	2b08      	cmp	r3, #8
 800ce80:	d014      	beq.n	800ceac <USART_SetConfig+0x48c>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce86:	2b09      	cmp	r3, #9
 800ce88:	d00e      	beq.n	800cea8 <USART_SetConfig+0x488>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce8e:	2b0a      	cmp	r3, #10
 800ce90:	d008      	beq.n	800cea4 <USART_SetConfig+0x484>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce96:	2b0b      	cmp	r3, #11
 800ce98:	d102      	bne.n	800cea0 <USART_SetConfig+0x480>
 800ce9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce9e:	e016      	b.n	800cece <USART_SetConfig+0x4ae>
 800cea0:	2301      	movs	r3, #1
 800cea2:	e014      	b.n	800cece <USART_SetConfig+0x4ae>
 800cea4:	2380      	movs	r3, #128	@ 0x80
 800cea6:	e012      	b.n	800cece <USART_SetConfig+0x4ae>
 800cea8:	2340      	movs	r3, #64	@ 0x40
 800ceaa:	e010      	b.n	800cece <USART_SetConfig+0x4ae>
 800ceac:	2320      	movs	r3, #32
 800ceae:	e00e      	b.n	800cece <USART_SetConfig+0x4ae>
 800ceb0:	2310      	movs	r3, #16
 800ceb2:	e00c      	b.n	800cece <USART_SetConfig+0x4ae>
 800ceb4:	230c      	movs	r3, #12
 800ceb6:	e00a      	b.n	800cece <USART_SetConfig+0x4ae>
 800ceb8:	230a      	movs	r3, #10
 800ceba:	e008      	b.n	800cece <USART_SetConfig+0x4ae>
 800cebc:	2308      	movs	r3, #8
 800cebe:	e006      	b.n	800cece <USART_SetConfig+0x4ae>
 800cec0:	2306      	movs	r3, #6
 800cec2:	e004      	b.n	800cece <USART_SetConfig+0x4ae>
 800cec4:	2304      	movs	r3, #4
 800cec6:	e002      	b.n	800cece <USART_SetConfig+0x4ae>
 800cec8:	2302      	movs	r3, #2
 800ceca:	e000      	b.n	800cece <USART_SetConfig+0x4ae>
 800cecc:	2301      	movs	r3, #1
 800cece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ced0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ced4:	005a      	lsls	r2, r3, #1
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	085b      	lsrs	r3, r3, #1
 800cedc:	441a      	add	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cee6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cee8:	e28b      	b.n	800d402 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800ceea:	f7f9 fced 	bl	80068c8 <HAL_RCC_GetPCLK2Freq>
 800ceee:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d044      	beq.n	800cf82 <USART_SetConfig+0x562>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d03e      	beq.n	800cf7e <USART_SetConfig+0x55e>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	d038      	beq.n	800cf7a <USART_SetConfig+0x55a>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf0c:	2b03      	cmp	r3, #3
 800cf0e:	d032      	beq.n	800cf76 <USART_SetConfig+0x556>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf14:	2b04      	cmp	r3, #4
 800cf16:	d02c      	beq.n	800cf72 <USART_SetConfig+0x552>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf1c:	2b05      	cmp	r3, #5
 800cf1e:	d026      	beq.n	800cf6e <USART_SetConfig+0x54e>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf24:	2b06      	cmp	r3, #6
 800cf26:	d020      	beq.n	800cf6a <USART_SetConfig+0x54a>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf2c:	2b07      	cmp	r3, #7
 800cf2e:	d01a      	beq.n	800cf66 <USART_SetConfig+0x546>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf34:	2b08      	cmp	r3, #8
 800cf36:	d014      	beq.n	800cf62 <USART_SetConfig+0x542>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf3c:	2b09      	cmp	r3, #9
 800cf3e:	d00e      	beq.n	800cf5e <USART_SetConfig+0x53e>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf44:	2b0a      	cmp	r3, #10
 800cf46:	d008      	beq.n	800cf5a <USART_SetConfig+0x53a>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf4c:	2b0b      	cmp	r3, #11
 800cf4e:	d102      	bne.n	800cf56 <USART_SetConfig+0x536>
 800cf50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf54:	e016      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf56:	2301      	movs	r3, #1
 800cf58:	e014      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf5a:	2380      	movs	r3, #128	@ 0x80
 800cf5c:	e012      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf5e:	2340      	movs	r3, #64	@ 0x40
 800cf60:	e010      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf62:	2320      	movs	r3, #32
 800cf64:	e00e      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf66:	2310      	movs	r3, #16
 800cf68:	e00c      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf6a:	230c      	movs	r3, #12
 800cf6c:	e00a      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf6e:	230a      	movs	r3, #10
 800cf70:	e008      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf72:	2308      	movs	r3, #8
 800cf74:	e006      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf76:	2306      	movs	r3, #6
 800cf78:	e004      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf7a:	2304      	movs	r3, #4
 800cf7c:	e002      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e000      	b.n	800cf84 <USART_SetConfig+0x564>
 800cf82:	2301      	movs	r3, #1
 800cf84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf86:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf8a:	005a      	lsls	r2, r3, #1
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	085b      	lsrs	r3, r3, #1
 800cf92:	441a      	add	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf9c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cf9e:	e230      	b.n	800d402 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfa0:	f107 0318 	add.w	r3, r7, #24
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fb fc61 	bl	800886c <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800cfaa:	69fa      	ldr	r2, [r7, #28]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d044      	beq.n	800d03e <USART_SetConfig+0x61e>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d03e      	beq.n	800d03a <USART_SetConfig+0x61a>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d038      	beq.n	800d036 <USART_SetConfig+0x616>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfc8:	2b03      	cmp	r3, #3
 800cfca:	d032      	beq.n	800d032 <USART_SetConfig+0x612>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfd0:	2b04      	cmp	r3, #4
 800cfd2:	d02c      	beq.n	800d02e <USART_SetConfig+0x60e>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfd8:	2b05      	cmp	r3, #5
 800cfda:	d026      	beq.n	800d02a <USART_SetConfig+0x60a>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfe0:	2b06      	cmp	r3, #6
 800cfe2:	d020      	beq.n	800d026 <USART_SetConfig+0x606>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfe8:	2b07      	cmp	r3, #7
 800cfea:	d01a      	beq.n	800d022 <USART_SetConfig+0x602>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff0:	2b08      	cmp	r3, #8
 800cff2:	d014      	beq.n	800d01e <USART_SetConfig+0x5fe>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff8:	2b09      	cmp	r3, #9
 800cffa:	d00e      	beq.n	800d01a <USART_SetConfig+0x5fa>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d000:	2b0a      	cmp	r3, #10
 800d002:	d008      	beq.n	800d016 <USART_SetConfig+0x5f6>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d008:	2b0b      	cmp	r3, #11
 800d00a:	d102      	bne.n	800d012 <USART_SetConfig+0x5f2>
 800d00c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d010:	e016      	b.n	800d040 <USART_SetConfig+0x620>
 800d012:	2301      	movs	r3, #1
 800d014:	e014      	b.n	800d040 <USART_SetConfig+0x620>
 800d016:	2380      	movs	r3, #128	@ 0x80
 800d018:	e012      	b.n	800d040 <USART_SetConfig+0x620>
 800d01a:	2340      	movs	r3, #64	@ 0x40
 800d01c:	e010      	b.n	800d040 <USART_SetConfig+0x620>
 800d01e:	2320      	movs	r3, #32
 800d020:	e00e      	b.n	800d040 <USART_SetConfig+0x620>
 800d022:	2310      	movs	r3, #16
 800d024:	e00c      	b.n	800d040 <USART_SetConfig+0x620>
 800d026:	230c      	movs	r3, #12
 800d028:	e00a      	b.n	800d040 <USART_SetConfig+0x620>
 800d02a:	230a      	movs	r3, #10
 800d02c:	e008      	b.n	800d040 <USART_SetConfig+0x620>
 800d02e:	2308      	movs	r3, #8
 800d030:	e006      	b.n	800d040 <USART_SetConfig+0x620>
 800d032:	2306      	movs	r3, #6
 800d034:	e004      	b.n	800d040 <USART_SetConfig+0x620>
 800d036:	2304      	movs	r3, #4
 800d038:	e002      	b.n	800d040 <USART_SetConfig+0x620>
 800d03a:	2302      	movs	r3, #2
 800d03c:	e000      	b.n	800d040 <USART_SetConfig+0x620>
 800d03e:	2301      	movs	r3, #1
 800d040:	fbb2 f3f3 	udiv	r3, r2, r3
 800d044:	005a      	lsls	r2, r3, #1
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	085b      	lsrs	r3, r3, #1
 800d04c:	441a      	add	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	fbb2 f3f3 	udiv	r3, r2, r3
 800d056:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800d058:	e1d3      	b.n	800d402 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d05a:	f107 030c 	add.w	r3, r7, #12
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fb fd58 	bl	8008b14 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800d064:	693a      	ldr	r2, [r7, #16]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d044      	beq.n	800d0f8 <USART_SetConfig+0x6d8>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d072:	2b01      	cmp	r3, #1
 800d074:	d03e      	beq.n	800d0f4 <USART_SetConfig+0x6d4>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d038      	beq.n	800d0f0 <USART_SetConfig+0x6d0>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d082:	2b03      	cmp	r3, #3
 800d084:	d032      	beq.n	800d0ec <USART_SetConfig+0x6cc>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d08a:	2b04      	cmp	r3, #4
 800d08c:	d02c      	beq.n	800d0e8 <USART_SetConfig+0x6c8>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d092:	2b05      	cmp	r3, #5
 800d094:	d026      	beq.n	800d0e4 <USART_SetConfig+0x6c4>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d09a:	2b06      	cmp	r3, #6
 800d09c:	d020      	beq.n	800d0e0 <USART_SetConfig+0x6c0>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0a2:	2b07      	cmp	r3, #7
 800d0a4:	d01a      	beq.n	800d0dc <USART_SetConfig+0x6bc>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0aa:	2b08      	cmp	r3, #8
 800d0ac:	d014      	beq.n	800d0d8 <USART_SetConfig+0x6b8>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0b2:	2b09      	cmp	r3, #9
 800d0b4:	d00e      	beq.n	800d0d4 <USART_SetConfig+0x6b4>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ba:	2b0a      	cmp	r3, #10
 800d0bc:	d008      	beq.n	800d0d0 <USART_SetConfig+0x6b0>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0c2:	2b0b      	cmp	r3, #11
 800d0c4:	d102      	bne.n	800d0cc <USART_SetConfig+0x6ac>
 800d0c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0ca:	e016      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e014      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0d0:	2380      	movs	r3, #128	@ 0x80
 800d0d2:	e012      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0d4:	2340      	movs	r3, #64	@ 0x40
 800d0d6:	e010      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0d8:	2320      	movs	r3, #32
 800d0da:	e00e      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0dc:	2310      	movs	r3, #16
 800d0de:	e00c      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0e0:	230c      	movs	r3, #12
 800d0e2:	e00a      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0e4:	230a      	movs	r3, #10
 800d0e6:	e008      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0e8:	2308      	movs	r3, #8
 800d0ea:	e006      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0ec:	2306      	movs	r3, #6
 800d0ee:	e004      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0f0:	2304      	movs	r3, #4
 800d0f2:	e002      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	e000      	b.n	800d0fa <USART_SetConfig+0x6da>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0fe:	005a      	lsls	r2, r3, #1
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	085b      	lsrs	r3, r3, #1
 800d106:	441a      	add	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d110:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800d112:	e176      	b.n	800d402 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d114:	4b89      	ldr	r3, [pc, #548]	@ (800d33c <USART_SetConfig+0x91c>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f003 0320 	and.w	r3, r3, #32
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d05d      	beq.n	800d1dc <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800d120:	4b86      	ldr	r3, [pc, #536]	@ (800d33c <USART_SetConfig+0x91c>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	08db      	lsrs	r3, r3, #3
 800d126:	f003 0303 	and.w	r3, r3, #3
 800d12a:	4a85      	ldr	r2, [pc, #532]	@ (800d340 <USART_SetConfig+0x920>)
 800d12c:	40da      	lsrs	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d132:	2b00      	cmp	r3, #0
 800d134:	d044      	beq.n	800d1c0 <USART_SetConfig+0x7a0>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d03e      	beq.n	800d1bc <USART_SetConfig+0x79c>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d142:	2b02      	cmp	r3, #2
 800d144:	d038      	beq.n	800d1b8 <USART_SetConfig+0x798>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d14a:	2b03      	cmp	r3, #3
 800d14c:	d032      	beq.n	800d1b4 <USART_SetConfig+0x794>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d152:	2b04      	cmp	r3, #4
 800d154:	d02c      	beq.n	800d1b0 <USART_SetConfig+0x790>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d15a:	2b05      	cmp	r3, #5
 800d15c:	d026      	beq.n	800d1ac <USART_SetConfig+0x78c>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d162:	2b06      	cmp	r3, #6
 800d164:	d020      	beq.n	800d1a8 <USART_SetConfig+0x788>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d16a:	2b07      	cmp	r3, #7
 800d16c:	d01a      	beq.n	800d1a4 <USART_SetConfig+0x784>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d172:	2b08      	cmp	r3, #8
 800d174:	d014      	beq.n	800d1a0 <USART_SetConfig+0x780>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d17a:	2b09      	cmp	r3, #9
 800d17c:	d00e      	beq.n	800d19c <USART_SetConfig+0x77c>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d182:	2b0a      	cmp	r3, #10
 800d184:	d008      	beq.n	800d198 <USART_SetConfig+0x778>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d18a:	2b0b      	cmp	r3, #11
 800d18c:	d102      	bne.n	800d194 <USART_SetConfig+0x774>
 800d18e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d192:	e016      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d194:	2301      	movs	r3, #1
 800d196:	e014      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d198:	2380      	movs	r3, #128	@ 0x80
 800d19a:	e012      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d19c:	2340      	movs	r3, #64	@ 0x40
 800d19e:	e010      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d1a0:	2320      	movs	r3, #32
 800d1a2:	e00e      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d1a4:	2310      	movs	r3, #16
 800d1a6:	e00c      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d1a8:	230c      	movs	r3, #12
 800d1aa:	e00a      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d1ac:	230a      	movs	r3, #10
 800d1ae:	e008      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d1b0:	2308      	movs	r3, #8
 800d1b2:	e006      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d1b4:	2306      	movs	r3, #6
 800d1b6:	e004      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d1b8:	2304      	movs	r3, #4
 800d1ba:	e002      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d1bc:	2302      	movs	r3, #2
 800d1be:	e000      	b.n	800d1c2 <USART_SetConfig+0x7a2>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1c6:	005a      	lsls	r2, r3, #1
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	085b      	lsrs	r3, r3, #1
 800d1ce:	441a      	add	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1d8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800d1da:	e112      	b.n	800d402 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d044      	beq.n	800d26e <USART_SetConfig+0x84e>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d03e      	beq.n	800d26a <USART_SetConfig+0x84a>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f0:	2b02      	cmp	r3, #2
 800d1f2:	d038      	beq.n	800d266 <USART_SetConfig+0x846>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f8:	2b03      	cmp	r3, #3
 800d1fa:	d032      	beq.n	800d262 <USART_SetConfig+0x842>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d200:	2b04      	cmp	r3, #4
 800d202:	d02c      	beq.n	800d25e <USART_SetConfig+0x83e>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d208:	2b05      	cmp	r3, #5
 800d20a:	d026      	beq.n	800d25a <USART_SetConfig+0x83a>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d210:	2b06      	cmp	r3, #6
 800d212:	d020      	beq.n	800d256 <USART_SetConfig+0x836>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d218:	2b07      	cmp	r3, #7
 800d21a:	d01a      	beq.n	800d252 <USART_SetConfig+0x832>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d220:	2b08      	cmp	r3, #8
 800d222:	d014      	beq.n	800d24e <USART_SetConfig+0x82e>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d228:	2b09      	cmp	r3, #9
 800d22a:	d00e      	beq.n	800d24a <USART_SetConfig+0x82a>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d230:	2b0a      	cmp	r3, #10
 800d232:	d008      	beq.n	800d246 <USART_SetConfig+0x826>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d238:	2b0b      	cmp	r3, #11
 800d23a:	d102      	bne.n	800d242 <USART_SetConfig+0x822>
 800d23c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d240:	e016      	b.n	800d270 <USART_SetConfig+0x850>
 800d242:	2301      	movs	r3, #1
 800d244:	e014      	b.n	800d270 <USART_SetConfig+0x850>
 800d246:	2380      	movs	r3, #128	@ 0x80
 800d248:	e012      	b.n	800d270 <USART_SetConfig+0x850>
 800d24a:	2340      	movs	r3, #64	@ 0x40
 800d24c:	e010      	b.n	800d270 <USART_SetConfig+0x850>
 800d24e:	2320      	movs	r3, #32
 800d250:	e00e      	b.n	800d270 <USART_SetConfig+0x850>
 800d252:	2310      	movs	r3, #16
 800d254:	e00c      	b.n	800d270 <USART_SetConfig+0x850>
 800d256:	230c      	movs	r3, #12
 800d258:	e00a      	b.n	800d270 <USART_SetConfig+0x850>
 800d25a:	230a      	movs	r3, #10
 800d25c:	e008      	b.n	800d270 <USART_SetConfig+0x850>
 800d25e:	2308      	movs	r3, #8
 800d260:	e006      	b.n	800d270 <USART_SetConfig+0x850>
 800d262:	2306      	movs	r3, #6
 800d264:	e004      	b.n	800d270 <USART_SetConfig+0x850>
 800d266:	2304      	movs	r3, #4
 800d268:	e002      	b.n	800d270 <USART_SetConfig+0x850>
 800d26a:	2302      	movs	r3, #2
 800d26c:	e000      	b.n	800d270 <USART_SetConfig+0x850>
 800d26e:	2301      	movs	r3, #1
 800d270:	4a33      	ldr	r2, [pc, #204]	@ (800d340 <USART_SetConfig+0x920>)
 800d272:	fbb2 f3f3 	udiv	r3, r2, r3
 800d276:	005a      	lsls	r2, r3, #1
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	085b      	lsrs	r3, r3, #1
 800d27e:	441a      	add	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	fbb2 f3f3 	udiv	r3, r2, r3
 800d288:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d28a:	e0ba      	b.n	800d402 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d290:	2b00      	cmp	r3, #0
 800d292:	d044      	beq.n	800d31e <USART_SetConfig+0x8fe>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d03e      	beq.n	800d31a <USART_SetConfig+0x8fa>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d038      	beq.n	800d316 <USART_SetConfig+0x8f6>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2a8:	2b03      	cmp	r3, #3
 800d2aa:	d032      	beq.n	800d312 <USART_SetConfig+0x8f2>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b0:	2b04      	cmp	r3, #4
 800d2b2:	d02c      	beq.n	800d30e <USART_SetConfig+0x8ee>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b8:	2b05      	cmp	r3, #5
 800d2ba:	d026      	beq.n	800d30a <USART_SetConfig+0x8ea>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2c0:	2b06      	cmp	r3, #6
 800d2c2:	d020      	beq.n	800d306 <USART_SetConfig+0x8e6>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2c8:	2b07      	cmp	r3, #7
 800d2ca:	d01a      	beq.n	800d302 <USART_SetConfig+0x8e2>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d0:	2b08      	cmp	r3, #8
 800d2d2:	d014      	beq.n	800d2fe <USART_SetConfig+0x8de>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d8:	2b09      	cmp	r3, #9
 800d2da:	d00e      	beq.n	800d2fa <USART_SetConfig+0x8da>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e0:	2b0a      	cmp	r3, #10
 800d2e2:	d008      	beq.n	800d2f6 <USART_SetConfig+0x8d6>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e8:	2b0b      	cmp	r3, #11
 800d2ea:	d102      	bne.n	800d2f2 <USART_SetConfig+0x8d2>
 800d2ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2f0:	e016      	b.n	800d320 <USART_SetConfig+0x900>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e014      	b.n	800d320 <USART_SetConfig+0x900>
 800d2f6:	2380      	movs	r3, #128	@ 0x80
 800d2f8:	e012      	b.n	800d320 <USART_SetConfig+0x900>
 800d2fa:	2340      	movs	r3, #64	@ 0x40
 800d2fc:	e010      	b.n	800d320 <USART_SetConfig+0x900>
 800d2fe:	2320      	movs	r3, #32
 800d300:	e00e      	b.n	800d320 <USART_SetConfig+0x900>
 800d302:	2310      	movs	r3, #16
 800d304:	e00c      	b.n	800d320 <USART_SetConfig+0x900>
 800d306:	230c      	movs	r3, #12
 800d308:	e00a      	b.n	800d320 <USART_SetConfig+0x900>
 800d30a:	230a      	movs	r3, #10
 800d30c:	e008      	b.n	800d320 <USART_SetConfig+0x900>
 800d30e:	2308      	movs	r3, #8
 800d310:	e006      	b.n	800d320 <USART_SetConfig+0x900>
 800d312:	2306      	movs	r3, #6
 800d314:	e004      	b.n	800d320 <USART_SetConfig+0x900>
 800d316:	2304      	movs	r3, #4
 800d318:	e002      	b.n	800d320 <USART_SetConfig+0x900>
 800d31a:	2302      	movs	r3, #2
 800d31c:	e000      	b.n	800d320 <USART_SetConfig+0x900>
 800d31e:	2301      	movs	r3, #1
 800d320:	4a08      	ldr	r2, [pc, #32]	@ (800d344 <USART_SetConfig+0x924>)
 800d322:	fbb2 f3f3 	udiv	r3, r2, r3
 800d326:	005a      	lsls	r2, r3, #1
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	085b      	lsrs	r3, r3, #1
 800d32e:	441a      	add	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	fbb2 f3f3 	udiv	r3, r2, r3
 800d338:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d33a:	e062      	b.n	800d402 <USART_SetConfig+0x9e2>
 800d33c:	58024400 	.word	0x58024400
 800d340:	03d09000 	.word	0x03d09000
 800d344:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d044      	beq.n	800d3da <USART_SetConfig+0x9ba>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d354:	2b01      	cmp	r3, #1
 800d356:	d03e      	beq.n	800d3d6 <USART_SetConfig+0x9b6>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d038      	beq.n	800d3d2 <USART_SetConfig+0x9b2>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d364:	2b03      	cmp	r3, #3
 800d366:	d032      	beq.n	800d3ce <USART_SetConfig+0x9ae>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d36c:	2b04      	cmp	r3, #4
 800d36e:	d02c      	beq.n	800d3ca <USART_SetConfig+0x9aa>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d374:	2b05      	cmp	r3, #5
 800d376:	d026      	beq.n	800d3c6 <USART_SetConfig+0x9a6>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d37c:	2b06      	cmp	r3, #6
 800d37e:	d020      	beq.n	800d3c2 <USART_SetConfig+0x9a2>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d384:	2b07      	cmp	r3, #7
 800d386:	d01a      	beq.n	800d3be <USART_SetConfig+0x99e>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d38c:	2b08      	cmp	r3, #8
 800d38e:	d014      	beq.n	800d3ba <USART_SetConfig+0x99a>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d394:	2b09      	cmp	r3, #9
 800d396:	d00e      	beq.n	800d3b6 <USART_SetConfig+0x996>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d39c:	2b0a      	cmp	r3, #10
 800d39e:	d008      	beq.n	800d3b2 <USART_SetConfig+0x992>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a4:	2b0b      	cmp	r3, #11
 800d3a6:	d102      	bne.n	800d3ae <USART_SetConfig+0x98e>
 800d3a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d3ac:	e016      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e014      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3b2:	2380      	movs	r3, #128	@ 0x80
 800d3b4:	e012      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3b6:	2340      	movs	r3, #64	@ 0x40
 800d3b8:	e010      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3ba:	2320      	movs	r3, #32
 800d3bc:	e00e      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3be:	2310      	movs	r3, #16
 800d3c0:	e00c      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3c2:	230c      	movs	r3, #12
 800d3c4:	e00a      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3c6:	230a      	movs	r3, #10
 800d3c8:	e008      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3ca:	2308      	movs	r3, #8
 800d3cc:	e006      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3ce:	2306      	movs	r3, #6
 800d3d0:	e004      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3d2:	2304      	movs	r3, #4
 800d3d4:	e002      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	e000      	b.n	800d3dc <USART_SetConfig+0x9bc>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3e4:	005a      	lsls	r2, r3, #1
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	085b      	lsrs	r3, r3, #1
 800d3ec:	441a      	add	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3f6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d3f8:	e003      	b.n	800d402 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800d400:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800d402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d404:	2b0f      	cmp	r3, #15
 800d406:	d916      	bls.n	800d436 <USART_SetConfig+0xa16>
 800d408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d40e:	d212      	bcs.n	800d436 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d412:	b29b      	uxth	r3, r3
 800d414:	f023 030f 	bic.w	r3, r3, #15
 800d418:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41c:	085b      	lsrs	r3, r3, #1
 800d41e:	b29b      	uxth	r3, r3
 800d420:	f003 0307 	and.w	r3, r3, #7
 800d424:	b29a      	uxth	r2, r3
 800d426:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d428:	4313      	orrs	r3, r2
 800d42a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d432:	60da      	str	r2, [r3, #12]
 800d434:	e002      	b.n	800d43c <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800d436:	2301      	movs	r3, #1
 800d438:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2201      	movs	r2, #1
 800d440:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2201      	movs	r2, #1
 800d446:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2200      	movs	r2, #0
 800d452:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800d454:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3738      	adds	r7, #56	@ 0x38
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af02      	add	r7, sp, #8
 800d466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d46e:	f7f5 fad3 	bl	8002a18 <HAL_GetTick>
 800d472:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f003 0308 	and.w	r3, r3, #8
 800d47e:	2b08      	cmp	r3, #8
 800d480:	d10e      	bne.n	800d4a0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800d482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7ff fa8f 	bl	800c9b4 <USART_WaitOnFlagUntilTimeout>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d49c:	2303      	movs	r3, #3
 800d49e:	e01e      	b.n	800d4de <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 0304 	and.w	r3, r3, #4
 800d4aa:	2b04      	cmp	r3, #4
 800d4ac:	d10e      	bne.n	800d4cc <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800d4ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7ff fa79 	bl	800c9b4 <USART_WaitOnFlagUntilTimeout>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4c8:	2303      	movs	r3, #3
 800d4ca:	e008      	b.n	800d4de <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b085      	sub	sp, #20
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d101      	bne.n	800d4fc <HAL_USARTEx_EnableSlaveMode+0x16>
 800d4f8:	2302      	movs	r3, #2
 800d4fa:	e043      	b.n	800d584 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2202      	movs	r2, #2
 800d508:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f022 0201 	bic.w	r2, r2, #1
 800d522:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	689a      	ldr	r2, [r3, #8]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d542:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	685a      	ldr	r2, [r3, #4]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f042 0201 	orr.w	r2, r2, #1
 800d552:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68fa      	ldr	r2, [r7, #12]
 800d55a:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f042 0201 	orr.w	r2, r2, #1
 800d578:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3714      	adds	r7, #20
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d101      	bne.n	800d5a8 <HAL_USARTEx_ConfigNSS+0x18>
 800d5a4:	2302      	movs	r3, #2
 800d5a6:	e02a      	b.n	800d5fe <HAL_USARTEx_ConfigNSS+0x6e>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2202      	movs	r2, #2
 800d5b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f022 0201 	bic.w	r2, r2, #1
 800d5ce:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	f023 0108 	bic.w	r1, r3, #8
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	683a      	ldr	r2, [r7, #0]
 800d5e0:	430a      	orrs	r2, r1
 800d5e2:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3714      	adds	r7, #20
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800d60a:	b480      	push	{r7}
 800d60c:	b085      	sub	sp, #20
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d101      	bne.n	800d620 <HAL_USARTEx_DisableFifoMode+0x16>
 800d61c:	2302      	movs	r3, #2
 800d61e:	e027      	b.n	800d670 <HAL_USARTEx_DisableFifoMode+0x66>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2202      	movs	r2, #2
 800d62c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f022 0201 	bic.w	r2, r2, #1
 800d646:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d64e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d66e:	2300      	movs	r3, #0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3714      	adds	r7, #20
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d101      	bne.n	800d694 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800d690:	2302      	movs	r3, #2
 800d692:	e02d      	b.n	800d6f0 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f022 0201 	bic.w	r2, r2, #1
 800d6ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	430a      	orrs	r2, r1
 800d6ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 f84f 	bl	800d774 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3710      	adds	r7, #16
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d101      	bne.n	800d710 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800d70c:	2302      	movs	r3, #2
 800d70e:	e02d      	b.n	800d76c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2202      	movs	r2, #2
 800d71c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f022 0201 	bic.w	r2, r2, #1
 800d736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	430a      	orrs	r2, r1
 800d74a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 f811 	bl	800d774 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	68fa      	ldr	r2, [r7, #12]
 800d758:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d780:	2b00      	cmp	r3, #0
 800d782:	d106      	bne.n	800d792 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2201      	movs	r2, #1
 800d78e:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d790:	e02f      	b.n	800d7f2 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d792:	2310      	movs	r3, #16
 800d794:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d796:	2310      	movs	r3, #16
 800d798:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800d7a0:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	f003 0307 	and.w	r3, r3, #7
 800d7a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800d7b0:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	f003 0307 	and.w	r3, r3, #7
 800d7b8:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7ba:	7bbb      	ldrb	r3, [r7, #14]
 800d7bc:	7b3a      	ldrb	r2, [r7, #12]
 800d7be:	4910      	ldr	r1, [pc, #64]	@ (800d800 <USARTEx_SetNbDataToProcess+0x8c>)
 800d7c0:	5c8a      	ldrb	r2, [r1, r2]
 800d7c2:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800d7c6:	7b3a      	ldrb	r2, [r7, #12]
 800d7c8:	490e      	ldr	r1, [pc, #56]	@ (800d804 <USARTEx_SetNbDataToProcess+0x90>)
 800d7ca:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7d6:	7bfb      	ldrb	r3, [r7, #15]
 800d7d8:	7b7a      	ldrb	r2, [r7, #13]
 800d7da:	4909      	ldr	r1, [pc, #36]	@ (800d800 <USARTEx_SetNbDataToProcess+0x8c>)
 800d7dc:	5c8a      	ldrb	r2, [r1, r2]
 800d7de:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800d7e2:	7b7a      	ldrb	r2, [r7, #13]
 800d7e4:	4907      	ldr	r1, [pc, #28]	@ (800d804 <USARTEx_SetNbDataToProcess+0x90>)
 800d7e6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800d7f2:	bf00      	nop
 800d7f4:	3714      	adds	r7, #20
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
 800d7fe:	bf00      	nop
 800d800:	08016ad4 	.word	0x08016ad4
 800d804:	08016adc 	.word	0x08016adc

0800d808 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d808:	b084      	sub	sp, #16
 800d80a:	b480      	push	{r7}
 800d80c:	b085      	sub	sp, #20
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
 800d812:	f107 001c 	add.w	r0, r7, #28
 800d816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d81a:	2300      	movs	r3, #0
 800d81c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d81e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d820:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d822:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d826:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d82a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d82e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	4313      	orrs	r3, r2
 800d834:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	685a      	ldr	r2, [r3, #4]
 800d83a:	4b07      	ldr	r3, [pc, #28]	@ (800d858 <SDMMC_Init+0x50>)
 800d83c:	4013      	ands	r3, r2
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	431a      	orrs	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	b004      	add	sp, #16
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop
 800d858:	ffc02c00 	.word	0xffc02c00

0800d85c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	370c      	adds	r7, #12
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr

0800d876 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d876:	b480      	push	{r7}
 800d878:	b083      	sub	sp, #12
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f043 0203 	orr.w	r2, r3, #3
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	370c      	adds	r7, #12
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr

0800d8ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d8ba:	b480      	push	{r7}
 800d8bc:	b083      	sub	sp, #12
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f003 0303 	and.w	r3, r3, #3
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
	...

0800d8d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d8f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d8fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d902:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	4313      	orrs	r3, r2
 800d908:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	68da      	ldr	r2, [r3, #12]
 800d90e:	4b06      	ldr	r3, [pc, #24]	@ (800d928 <SDMMC_SendCommand+0x50>)
 800d910:	4013      	ands	r3, r2
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	431a      	orrs	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	fffee0c0 	.word	0xfffee0c0

0800d92c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	691b      	ldr	r3, [r3, #16]
 800d938:	b2db      	uxtb	r3, r3
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	370c      	adds	r7, #12
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d946:	b480      	push	{r7}
 800d948:	b085      	sub	sp, #20
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	3314      	adds	r3, #20
 800d954:	461a      	mov	r2, r3
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	4413      	add	r3, r2
 800d95a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
}
 800d960:	4618      	mov	r0, r3
 800d962:	3714      	adds	r7, #20
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	685a      	ldr	r2, [r3, #4]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d992:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d998:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d99e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	431a      	orrs	r2, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d9b6:	2300      	movs	r3, #0

}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3714      	adds	r7, #20
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d9d2:	2310      	movs	r3, #16
 800d9d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d9da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d9e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9e6:	f107 0308 	add.w	r3, r7, #8
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f7ff ff73 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d9f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9f6:	2110      	movs	r1, #16
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fa5f 	bl	800debc <SDMMC_GetCmdResp1>
 800d9fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da00:	69fb      	ldr	r3, [r7, #28]
}
 800da02:	4618      	mov	r0, r3
 800da04:	3720      	adds	r7, #32
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}

0800da0a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b088      	sub	sp, #32
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
 800da12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800da18:	2311      	movs	r3, #17
 800da1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da22:	2300      	movs	r3, #0
 800da24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da2c:	f107 0308 	add.w	r3, r7, #8
 800da30:	4619      	mov	r1, r3
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7ff ff50 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800da38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da3c:	2111      	movs	r1, #17
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 fa3c 	bl	800debc <SDMMC_GetCmdResp1>
 800da44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da46:	69fb      	ldr	r3, [r7, #28]
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3720      	adds	r7, #32
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b088      	sub	sp, #32
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800da5e:	2312      	movs	r3, #18
 800da60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da68:	2300      	movs	r3, #0
 800da6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da72:	f107 0308 	add.w	r3, r7, #8
 800da76:	4619      	mov	r1, r3
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7ff ff2d 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800da7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da82:	2112      	movs	r1, #18
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fa19 	bl	800debc <SDMMC_GetCmdResp1>
 800da8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da8c:	69fb      	ldr	r3, [r7, #28]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3720      	adds	r7, #32
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b088      	sub	sp, #32
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800daa4:	2318      	movs	r3, #24
 800daa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800daa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800daac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800daae:	2300      	movs	r3, #0
 800dab0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dab6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dab8:	f107 0308 	add.w	r3, r7, #8
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff ff0a 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dac8:	2118      	movs	r1, #24
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 f9f6 	bl	800debc <SDMMC_GetCmdResp1>
 800dad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dad2:	69fb      	ldr	r3, [r7, #28]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3720      	adds	r7, #32
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b088      	sub	sp, #32
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800daea:	2319      	movs	r3, #25
 800daec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800daee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800daf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800daf4:	2300      	movs	r3, #0
 800daf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800daf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dafc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dafe:	f107 0308 	add.w	r3, r7, #8
 800db02:	4619      	mov	r1, r3
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f7ff fee7 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800db0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db0e:	2119      	movs	r1, #25
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 f9d3 	bl	800debc <SDMMC_GetCmdResp1>
 800db16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db18:	69fb      	ldr	r3, [r7, #28]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3720      	adds	r7, #32
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
	...

0800db24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b088      	sub	sp, #32
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800db2c:	2300      	movs	r3, #0
 800db2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800db30:	230c      	movs	r3, #12
 800db32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800db38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db3a:	2300      	movs	r3, #0
 800db3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db42:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db5c:	f107 0308 	add.w	r3, r7, #8
 800db60:	4619      	mov	r1, r3
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f7ff feb8 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800db68:	4a0b      	ldr	r2, [pc, #44]	@ (800db98 <SDMMC_CmdStopTransfer+0x74>)
 800db6a:	210c      	movs	r1, #12
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 f9a5 	bl	800debc <SDMMC_GetCmdResp1>
 800db72:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db86:	d101      	bne.n	800db8c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800db88:	2300      	movs	r3, #0
 800db8a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800db8c:	69fb      	ldr	r3, [r7, #28]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3720      	adds	r7, #32
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	05f5e100 	.word	0x05f5e100

0800db9c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b088      	sub	sp, #32
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dbaa:	2307      	movs	r3, #7
 800dbac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dbb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dbbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbbe:	f107 0308 	add.w	r3, r7, #8
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f7ff fe87 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dbca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbce:	2107      	movs	r1, #7
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 f973 	bl	800debc <SDMMC_GetCmdResp1>
 800dbd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbd8:	69fb      	ldr	r3, [r7, #28]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3720      	adds	r7, #32
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b088      	sub	sp, #32
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dbea:	2300      	movs	r3, #0
 800dbec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dbfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc00:	f107 0308 	add.w	r3, r7, #8
 800dc04:	4619      	mov	r1, r3
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7ff fe66 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 fb97 	bl	800e340 <SDMMC_GetCmdError>
 800dc12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc14:	69fb      	ldr	r3, [r7, #28]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3720      	adds	r7, #32
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b088      	sub	sp, #32
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dc26:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800dc2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dc2c:	2308      	movs	r3, #8
 800dc2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc36:	2300      	movs	r3, #0
 800dc38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc40:	f107 0308 	add.w	r3, r7, #8
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7ff fe46 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fb29 	bl	800e2a4 <SDMMC_GetCmdResp7>
 800dc52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc54:	69fb      	ldr	r3, [r7, #28]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3720      	adds	r7, #32
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b088      	sub	sp, #32
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dc6c:	2337      	movs	r3, #55	@ 0x37
 800dc6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc76:	2300      	movs	r3, #0
 800dc78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc80:	f107 0308 	add.w	r3, r7, #8
 800dc84:	4619      	mov	r1, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7ff fe26 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dc8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc90:	2137      	movs	r1, #55	@ 0x37
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f912 	bl	800debc <SDMMC_GetCmdResp1>
 800dc98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc9a:	69fb      	ldr	r3, [r7, #28]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3720      	adds	r7, #32
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b088      	sub	sp, #32
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dcb2:	2329      	movs	r3, #41	@ 0x29
 800dcb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dcba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dcc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcc6:	f107 0308 	add.w	r3, r7, #8
 800dcca:	4619      	mov	r1, r3
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7ff fe03 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 fa2e 	bl	800e134 <SDMMC_GetCmdResp3>
 800dcd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcda:	69fb      	ldr	r3, [r7, #28]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3720      	adds	r7, #32
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b088      	sub	sp, #32
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dcf2:	2306      	movs	r3, #6
 800dcf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dcfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd06:	f107 0308 	add.w	r3, r7, #8
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f7ff fde3 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dd12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd16:	2106      	movs	r1, #6
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f8cf 	bl	800debc <SDMMC_GetCmdResp1>
 800dd1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd20:	69fb      	ldr	r3, [r7, #28]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3720      	adds	r7, #32
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b088      	sub	sp, #32
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd32:	2300      	movs	r3, #0
 800dd34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dd36:	2333      	movs	r3, #51	@ 0x33
 800dd38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd40:	2300      	movs	r3, #0
 800dd42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd4a:	f107 0308 	add.w	r3, r7, #8
 800dd4e:	4619      	mov	r1, r3
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7ff fdc1 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dd56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd5a:	2133      	movs	r1, #51	@ 0x33
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 f8ad 	bl	800debc <SDMMC_GetCmdResp1>
 800dd62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd64:	69fb      	ldr	r3, [r7, #28]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3720      	adds	r7, #32
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b088      	sub	sp, #32
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dd76:	2300      	movs	r3, #0
 800dd78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dd7a:	2302      	movs	r3, #2
 800dd7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dd7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800dd82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd84:	2300      	movs	r3, #0
 800dd86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd8e:	f107 0308 	add.w	r3, r7, #8
 800dd92:	4619      	mov	r1, r3
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff fd9f 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 f980 	bl	800e0a0 <SDMMC_GetCmdResp2>
 800dda0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dda2:	69fb      	ldr	r3, [r7, #28]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3720      	adds	r7, #32
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ddba:	2309      	movs	r3, #9
 800ddbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ddbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ddc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ddcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddce:	f107 0308 	add.w	r3, r7, #8
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7ff fd7f 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 f960 	bl	800e0a0 <SDMMC_GetCmdResp2>
 800dde0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dde2:	69fb      	ldr	r3, [r7, #28]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3720      	adds	r7, #32
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b088      	sub	sp, #32
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ddfa:	2303      	movs	r3, #3
 800ddfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de04:	2300      	movs	r3, #0
 800de06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de0e:	f107 0308 	add.w	r3, r7, #8
 800de12:	4619      	mov	r1, r3
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7ff fd5f 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	2103      	movs	r1, #3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 f9c8 	bl	800e1b4 <SDMMC_GetCmdResp6>
 800de24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de26:	69fb      	ldr	r3, [r7, #28]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3720      	adds	r7, #32
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800de3e:	230d      	movs	r3, #13
 800de40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de48:	2300      	movs	r3, #0
 800de4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de52:	f107 0308 	add.w	r3, r7, #8
 800de56:	4619      	mov	r1, r3
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff fd3d 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800de5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de62:	210d      	movs	r1, #13
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 f829 	bl	800debc <SDMMC_GetCmdResp1>
 800de6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de6c:	69fb      	ldr	r3, [r7, #28]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3720      	adds	r7, #32
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b088      	sub	sp, #32
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800de7e:	2300      	movs	r3, #0
 800de80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800de82:	230d      	movs	r3, #13
 800de84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de8c:	2300      	movs	r3, #0
 800de8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de96:	f107 0308 	add.w	r3, r7, #8
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7ff fd1b 	bl	800d8d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800dea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dea6:	210d      	movs	r1, #13
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 f807 	bl	800debc <SDMMC_GetCmdResp1>
 800deae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800deb0:	69fb      	ldr	r3, [r7, #28]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3720      	adds	r7, #32
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
	...

0800debc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b088      	sub	sp, #32
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	460b      	mov	r3, r1
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800deca:	4b70      	ldr	r3, [pc, #448]	@ (800e08c <SDMMC_GetCmdResp1+0x1d0>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4a70      	ldr	r2, [pc, #448]	@ (800e090 <SDMMC_GetCmdResp1+0x1d4>)
 800ded0:	fba2 2303 	umull	r2, r3, r2, r3
 800ded4:	0a5a      	lsrs	r2, r3, #9
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	fb02 f303 	mul.w	r3, r2, r3
 800dedc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	1e5a      	subs	r2, r3, #1
 800dee2:	61fa      	str	r2, [r7, #28]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d102      	bne.n	800deee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dee8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800deec:	e0c9      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800def2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800def4:	69ba      	ldr	r2, [r7, #24]
 800def6:	4b67      	ldr	r3, [pc, #412]	@ (800e094 <SDMMC_GetCmdResp1+0x1d8>)
 800def8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800defa:	2b00      	cmp	r3, #0
 800defc:	d0ef      	beq.n	800dede <SDMMC_GetCmdResp1+0x22>
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1ea      	bne.n	800dede <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df0c:	f003 0304 	and.w	r3, r3, #4
 800df10:	2b00      	cmp	r3, #0
 800df12:	d004      	beq.n	800df1e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2204      	movs	r2, #4
 800df18:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df1a:	2304      	movs	r3, #4
 800df1c:	e0b1      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	2b00      	cmp	r3, #0
 800df28:	d004      	beq.n	800df34 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2201      	movs	r2, #1
 800df2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df30:	2301      	movs	r3, #1
 800df32:	e0a6      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	4a58      	ldr	r2, [pc, #352]	@ (800e098 <SDMMC_GetCmdResp1+0x1dc>)
 800df38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7ff fcf6 	bl	800d92c <SDMMC_GetCommandResponse>
 800df40:	4603      	mov	r3, r0
 800df42:	461a      	mov	r2, r3
 800df44:	7afb      	ldrb	r3, [r7, #11]
 800df46:	4293      	cmp	r3, r2
 800df48:	d001      	beq.n	800df4e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df4a:	2301      	movs	r3, #1
 800df4c:	e099      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800df4e:	2100      	movs	r1, #0
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f7ff fcf8 	bl	800d946 <SDMMC_GetResponse>
 800df56:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df58:	697a      	ldr	r2, [r7, #20]
 800df5a:	4b50      	ldr	r3, [pc, #320]	@ (800e09c <SDMMC_GetCmdResp1+0x1e0>)
 800df5c:	4013      	ands	r3, r2
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d101      	bne.n	800df66 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800df62:	2300      	movs	r3, #0
 800df64:	e08d      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	da02      	bge.n	800df72 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800df70:	e087      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d001      	beq.n	800df80 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800df7c:	2340      	movs	r3, #64	@ 0x40
 800df7e:	e080      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800df86:	2b00      	cmp	r3, #0
 800df88:	d001      	beq.n	800df8e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800df8a:	2380      	movs	r3, #128	@ 0x80
 800df8c:	e079      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800df94:	2b00      	cmp	r3, #0
 800df96:	d002      	beq.n	800df9e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800df98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df9c:	e071      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d002      	beq.n	800dfae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dfa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfac:	e069      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dfb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfbc:	e061      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d002      	beq.n	800dfce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dfc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dfcc:	e059      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dfd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dfdc:	e051      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dfe8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dfec:	e049      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dff8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dffc:	e041      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e008:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e00c:	e039      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e018:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e01c:	e031      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e028:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e02c:	e029      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e038:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e03c:	e021      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e048:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e04c:	e019      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e058:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e05c:	e011      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e068:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e06c:	e009      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f003 0308 	and.w	r3, r3, #8
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e078:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e07c:	e001      	b.n	800e082 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e07e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e082:	4618      	mov	r0, r3
 800e084:	3720      	adds	r7, #32
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	2400002c 	.word	0x2400002c
 800e090:	10624dd3 	.word	0x10624dd3
 800e094:	00200045 	.word	0x00200045
 800e098:	002000c5 	.word	0x002000c5
 800e09c:	fdffe008 	.word	0xfdffe008

0800e0a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e0a8:	4b1f      	ldr	r3, [pc, #124]	@ (800e128 <SDMMC_GetCmdResp2+0x88>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a1f      	ldr	r2, [pc, #124]	@ (800e12c <SDMMC_GetCmdResp2+0x8c>)
 800e0ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e0b2:	0a5b      	lsrs	r3, r3, #9
 800e0b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0b8:	fb02 f303 	mul.w	r3, r2, r3
 800e0bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	1e5a      	subs	r2, r3, #1
 800e0c2:	60fa      	str	r2, [r7, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d102      	bne.n	800e0ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e0cc:	e026      	b.n	800e11c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d0ef      	beq.n	800e0be <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1ea      	bne.n	800e0be <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0ec:	f003 0304 	and.w	r3, r3, #4
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d004      	beq.n	800e0fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2204      	movs	r2, #4
 800e0f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0fa:	2304      	movs	r3, #4
 800e0fc:	e00e      	b.n	800e11c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e102:	f003 0301 	and.w	r3, r3, #1
 800e106:	2b00      	cmp	r3, #0
 800e108:	d004      	beq.n	800e114 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e110:	2301      	movs	r3, #1
 800e112:	e003      	b.n	800e11c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a06      	ldr	r2, [pc, #24]	@ (800e130 <SDMMC_GetCmdResp2+0x90>)
 800e118:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e11a:	2300      	movs	r3, #0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3714      	adds	r7, #20
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr
 800e128:	2400002c 	.word	0x2400002c
 800e12c:	10624dd3 	.word	0x10624dd3
 800e130:	002000c5 	.word	0x002000c5

0800e134 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e134:	b480      	push	{r7}
 800e136:	b085      	sub	sp, #20
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e13c:	4b1a      	ldr	r3, [pc, #104]	@ (800e1a8 <SDMMC_GetCmdResp3+0x74>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4a1a      	ldr	r2, [pc, #104]	@ (800e1ac <SDMMC_GetCmdResp3+0x78>)
 800e142:	fba2 2303 	umull	r2, r3, r2, r3
 800e146:	0a5b      	lsrs	r3, r3, #9
 800e148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e14c:	fb02 f303 	mul.w	r3, r2, r3
 800e150:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	1e5a      	subs	r2, r3, #1
 800e156:	60fa      	str	r2, [r7, #12]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d102      	bne.n	800e162 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e15c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e160:	e01b      	b.n	800e19a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e166:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d0ef      	beq.n	800e152 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d1ea      	bne.n	800e152 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e180:	f003 0304 	and.w	r3, r3, #4
 800e184:	2b00      	cmp	r3, #0
 800e186:	d004      	beq.n	800e192 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2204      	movs	r2, #4
 800e18c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e18e:	2304      	movs	r3, #4
 800e190:	e003      	b.n	800e19a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4a06      	ldr	r2, [pc, #24]	@ (800e1b0 <SDMMC_GetCmdResp3+0x7c>)
 800e196:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	2400002c 	.word	0x2400002c
 800e1ac:	10624dd3 	.word	0x10624dd3
 800e1b0:	002000c5 	.word	0x002000c5

0800e1b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b088      	sub	sp, #32
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	607a      	str	r2, [r7, #4]
 800e1c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e1c2:	4b35      	ldr	r3, [pc, #212]	@ (800e298 <SDMMC_GetCmdResp6+0xe4>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a35      	ldr	r2, [pc, #212]	@ (800e29c <SDMMC_GetCmdResp6+0xe8>)
 800e1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800e1cc:	0a5b      	lsrs	r3, r3, #9
 800e1ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1d2:	fb02 f303 	mul.w	r3, r2, r3
 800e1d6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	1e5a      	subs	r2, r3, #1
 800e1dc:	61fa      	str	r2, [r7, #28]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d102      	bne.n	800e1e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e1e6:	e052      	b.n	800e28e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1ec:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1ee:	69bb      	ldr	r3, [r7, #24]
 800e1f0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d0ef      	beq.n	800e1d8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d1ea      	bne.n	800e1d8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e206:	f003 0304 	and.w	r3, r3, #4
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d004      	beq.n	800e218 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2204      	movs	r2, #4
 800e212:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e214:	2304      	movs	r3, #4
 800e216:	e03a      	b.n	800e28e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e21c:	f003 0301 	and.w	r3, r3, #1
 800e220:	2b00      	cmp	r3, #0
 800e222:	d004      	beq.n	800e22e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2201      	movs	r2, #1
 800e228:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e22a:	2301      	movs	r3, #1
 800e22c:	e02f      	b.n	800e28e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f7ff fb7c 	bl	800d92c <SDMMC_GetCommandResponse>
 800e234:	4603      	mov	r3, r0
 800e236:	461a      	mov	r2, r3
 800e238:	7afb      	ldrb	r3, [r7, #11]
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d001      	beq.n	800e242 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e23e:	2301      	movs	r3, #1
 800e240:	e025      	b.n	800e28e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	4a16      	ldr	r2, [pc, #88]	@ (800e2a0 <SDMMC_GetCmdResp6+0xec>)
 800e246:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e248:	2100      	movs	r1, #0
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f7ff fb7b 	bl	800d946 <SDMMC_GetResponse>
 800e250:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d106      	bne.n	800e26a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	0c1b      	lsrs	r3, r3, #16
 800e260:	b29a      	uxth	r2, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e266:	2300      	movs	r3, #0
 800e268:	e011      	b.n	800e28e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e278:	e009      	b.n	800e28e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e288:	e001      	b.n	800e28e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e28a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3720      	adds	r7, #32
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	2400002c 	.word	0x2400002c
 800e29c:	10624dd3 	.word	0x10624dd3
 800e2a0:	002000c5 	.word	0x002000c5

0800e2a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e2ac:	4b22      	ldr	r3, [pc, #136]	@ (800e338 <SDMMC_GetCmdResp7+0x94>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a22      	ldr	r2, [pc, #136]	@ (800e33c <SDMMC_GetCmdResp7+0x98>)
 800e2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b6:	0a5b      	lsrs	r3, r3, #9
 800e2b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2bc:	fb02 f303 	mul.w	r3, r2, r3
 800e2c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	1e5a      	subs	r2, r3, #1
 800e2c6:	60fa      	str	r2, [r7, #12]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d102      	bne.n	800e2d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e2d0:	e02c      	b.n	800e32c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d0ef      	beq.n	800e2c2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1ea      	bne.n	800e2c2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2f0:	f003 0304 	and.w	r3, r3, #4
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d004      	beq.n	800e302 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2204      	movs	r2, #4
 800e2fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2fe:	2304      	movs	r3, #4
 800e300:	e014      	b.n	800e32c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e306:	f003 0301 	and.w	r3, r3, #1
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d004      	beq.n	800e318 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2201      	movs	r2, #1
 800e312:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e314:	2301      	movs	r3, #1
 800e316:	e009      	b.n	800e32c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e31c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2240      	movs	r2, #64	@ 0x40
 800e328:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e32a:	2300      	movs	r3, #0

}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3714      	adds	r7, #20
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr
 800e338:	2400002c 	.word	0x2400002c
 800e33c:	10624dd3 	.word	0x10624dd3

0800e340 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e348:	4b11      	ldr	r3, [pc, #68]	@ (800e390 <SDMMC_GetCmdError+0x50>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a11      	ldr	r2, [pc, #68]	@ (800e394 <SDMMC_GetCmdError+0x54>)
 800e34e:	fba2 2303 	umull	r2, r3, r2, r3
 800e352:	0a5b      	lsrs	r3, r3, #9
 800e354:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e358:	fb02 f303 	mul.w	r3, r2, r3
 800e35c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	1e5a      	subs	r2, r3, #1
 800e362:	60fa      	str	r2, [r7, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d102      	bne.n	800e36e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e368:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e36c:	e009      	b.n	800e382 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e376:	2b00      	cmp	r3, #0
 800e378:	d0f1      	beq.n	800e35e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	4a06      	ldr	r2, [pc, #24]	@ (800e398 <SDMMC_GetCmdError+0x58>)
 800e37e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3714      	adds	r7, #20
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	2400002c 	.word	0x2400002c
 800e394:	10624dd3 	.word	0x10624dd3
 800e398:	002000c5 	.word	0x002000c5

0800e39c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e39c:	b084      	sub	sp, #16
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b084      	sub	sp, #16
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
 800e3a6:	f107 001c 	add.w	r0, r7, #28
 800e3aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e3ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d121      	bne.n	800e3fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68da      	ldr	r2, [r3, #12]
 800e3c6:	4b2c      	ldr	r3, [pc, #176]	@ (800e478 <USB_CoreInit+0xdc>)
 800e3c8:	4013      	ands	r3, r2
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e3da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d105      	bne.n	800e3ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f001 faf6 	bl	800f9e0 <USB_CoreReset>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	73fb      	strb	r3, [r7, #15]
 800e3f8:	e01b      	b.n	800e432 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f001 faea 	bl	800f9e0 <USB_CoreReset>
 800e40c:	4603      	mov	r3, r0
 800e40e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e410:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e414:	2b00      	cmp	r3, #0
 800e416:	d106      	bne.n	800e426 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e41c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	639a      	str	r2, [r3, #56]	@ 0x38
 800e424:	e005      	b.n	800e432 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e42a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e432:	7fbb      	ldrb	r3, [r7, #30]
 800e434:	2b01      	cmp	r3, #1
 800e436:	d116      	bne.n	800e466 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e446:	4b0d      	ldr	r3, [pc, #52]	@ (800e47c <USB_CoreInit+0xe0>)
 800e448:	4313      	orrs	r3, r2
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	f043 0206 	orr.w	r2, r3, #6
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	f043 0220 	orr.w	r2, r3, #32
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e466:	7bfb      	ldrb	r3, [r7, #15]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e472:	b004      	add	sp, #16
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	ffbdffbf 	.word	0xffbdffbf
 800e47c:	03ee0000 	.word	0x03ee0000

0800e480 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e480:	b480      	push	{r7}
 800e482:	b087      	sub	sp, #28
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	4613      	mov	r3, r2
 800e48c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e48e:	79fb      	ldrb	r3, [r7, #7]
 800e490:	2b02      	cmp	r3, #2
 800e492:	d165      	bne.n	800e560 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	4a41      	ldr	r2, [pc, #260]	@ (800e59c <USB_SetTurnaroundTime+0x11c>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d906      	bls.n	800e4aa <USB_SetTurnaroundTime+0x2a>
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	4a40      	ldr	r2, [pc, #256]	@ (800e5a0 <USB_SetTurnaroundTime+0x120>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d202      	bcs.n	800e4aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e4a4:	230f      	movs	r3, #15
 800e4a6:	617b      	str	r3, [r7, #20]
 800e4a8:	e062      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	4a3c      	ldr	r2, [pc, #240]	@ (800e5a0 <USB_SetTurnaroundTime+0x120>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d306      	bcc.n	800e4c0 <USB_SetTurnaroundTime+0x40>
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	4a3b      	ldr	r2, [pc, #236]	@ (800e5a4 <USB_SetTurnaroundTime+0x124>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d202      	bcs.n	800e4c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e4ba:	230e      	movs	r3, #14
 800e4bc:	617b      	str	r3, [r7, #20]
 800e4be:	e057      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	4a38      	ldr	r2, [pc, #224]	@ (800e5a4 <USB_SetTurnaroundTime+0x124>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d306      	bcc.n	800e4d6 <USB_SetTurnaroundTime+0x56>
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	4a37      	ldr	r2, [pc, #220]	@ (800e5a8 <USB_SetTurnaroundTime+0x128>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d202      	bcs.n	800e4d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e4d0:	230d      	movs	r3, #13
 800e4d2:	617b      	str	r3, [r7, #20]
 800e4d4:	e04c      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	4a33      	ldr	r2, [pc, #204]	@ (800e5a8 <USB_SetTurnaroundTime+0x128>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d306      	bcc.n	800e4ec <USB_SetTurnaroundTime+0x6c>
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	4a32      	ldr	r2, [pc, #200]	@ (800e5ac <USB_SetTurnaroundTime+0x12c>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d802      	bhi.n	800e4ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e4e6:	230c      	movs	r3, #12
 800e4e8:	617b      	str	r3, [r7, #20]
 800e4ea:	e041      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	4a2f      	ldr	r2, [pc, #188]	@ (800e5ac <USB_SetTurnaroundTime+0x12c>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d906      	bls.n	800e502 <USB_SetTurnaroundTime+0x82>
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	4a2e      	ldr	r2, [pc, #184]	@ (800e5b0 <USB_SetTurnaroundTime+0x130>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d802      	bhi.n	800e502 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e4fc:	230b      	movs	r3, #11
 800e4fe:	617b      	str	r3, [r7, #20]
 800e500:	e036      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	4a2a      	ldr	r2, [pc, #168]	@ (800e5b0 <USB_SetTurnaroundTime+0x130>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d906      	bls.n	800e518 <USB_SetTurnaroundTime+0x98>
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	4a29      	ldr	r2, [pc, #164]	@ (800e5b4 <USB_SetTurnaroundTime+0x134>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d802      	bhi.n	800e518 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e512:	230a      	movs	r3, #10
 800e514:	617b      	str	r3, [r7, #20]
 800e516:	e02b      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	4a26      	ldr	r2, [pc, #152]	@ (800e5b4 <USB_SetTurnaroundTime+0x134>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d906      	bls.n	800e52e <USB_SetTurnaroundTime+0xae>
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	4a25      	ldr	r2, [pc, #148]	@ (800e5b8 <USB_SetTurnaroundTime+0x138>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d202      	bcs.n	800e52e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e528:	2309      	movs	r3, #9
 800e52a:	617b      	str	r3, [r7, #20]
 800e52c:	e020      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	4a21      	ldr	r2, [pc, #132]	@ (800e5b8 <USB_SetTurnaroundTime+0x138>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d306      	bcc.n	800e544 <USB_SetTurnaroundTime+0xc4>
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	4a20      	ldr	r2, [pc, #128]	@ (800e5bc <USB_SetTurnaroundTime+0x13c>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d802      	bhi.n	800e544 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e53e:	2308      	movs	r3, #8
 800e540:	617b      	str	r3, [r7, #20]
 800e542:	e015      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	4a1d      	ldr	r2, [pc, #116]	@ (800e5bc <USB_SetTurnaroundTime+0x13c>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d906      	bls.n	800e55a <USB_SetTurnaroundTime+0xda>
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	4a1c      	ldr	r2, [pc, #112]	@ (800e5c0 <USB_SetTurnaroundTime+0x140>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d202      	bcs.n	800e55a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e554:	2307      	movs	r3, #7
 800e556:	617b      	str	r3, [r7, #20]
 800e558:	e00a      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e55a:	2306      	movs	r3, #6
 800e55c:	617b      	str	r3, [r7, #20]
 800e55e:	e007      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e560:	79fb      	ldrb	r3, [r7, #7]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d102      	bne.n	800e56c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e566:	2309      	movs	r3, #9
 800e568:	617b      	str	r3, [r7, #20]
 800e56a:	e001      	b.n	800e570 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e56c:	2309      	movs	r3, #9
 800e56e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	68da      	ldr	r2, [r3, #12]
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	029b      	lsls	r3, r3, #10
 800e584:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e588:	431a      	orrs	r2, r3
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	4618      	mov	r0, r3
 800e592:	371c      	adds	r7, #28
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr
 800e59c:	00d8acbf 	.word	0x00d8acbf
 800e5a0:	00e4e1c0 	.word	0x00e4e1c0
 800e5a4:	00f42400 	.word	0x00f42400
 800e5a8:	01067380 	.word	0x01067380
 800e5ac:	011a499f 	.word	0x011a499f
 800e5b0:	01312cff 	.word	0x01312cff
 800e5b4:	014ca43f 	.word	0x014ca43f
 800e5b8:	016e3600 	.word	0x016e3600
 800e5bc:	01a6ab1f 	.word	0x01a6ab1f
 800e5c0:	01e84800 	.word	0x01e84800

0800e5c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	f043 0201 	orr.w	r2, r3, #1
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	370c      	adds	r7, #12
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr

0800e5e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5e6:	b480      	push	{r7}
 800e5e8:	b083      	sub	sp, #12
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	f023 0201 	bic.w	r2, r3, #1
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	460b      	mov	r3, r1
 800e612:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e614:	2300      	movs	r3, #0
 800e616:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e624:	78fb      	ldrb	r3, [r7, #3]
 800e626:	2b01      	cmp	r3, #1
 800e628:	d115      	bne.n	800e656 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e636:	200a      	movs	r0, #10
 800e638:	f7f4 f9fa 	bl	8002a30 <HAL_Delay>
      ms += 10U;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	330a      	adds	r3, #10
 800e640:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f001 f93b 	bl	800f8be <USB_GetMode>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d01e      	beq.n	800e68c <USB_SetCurrentMode+0x84>
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2bc7      	cmp	r3, #199	@ 0xc7
 800e652:	d9f0      	bls.n	800e636 <USB_SetCurrentMode+0x2e>
 800e654:	e01a      	b.n	800e68c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e656:	78fb      	ldrb	r3, [r7, #3]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d115      	bne.n	800e688 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	68db      	ldr	r3, [r3, #12]
 800e660:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e668:	200a      	movs	r0, #10
 800e66a:	f7f4 f9e1 	bl	8002a30 <HAL_Delay>
      ms += 10U;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	330a      	adds	r3, #10
 800e672:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f001 f922 	bl	800f8be <USB_GetMode>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d005      	beq.n	800e68c <USB_SetCurrentMode+0x84>
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2bc7      	cmp	r3, #199	@ 0xc7
 800e684:	d9f0      	bls.n	800e668 <USB_SetCurrentMode+0x60>
 800e686:	e001      	b.n	800e68c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e688:	2301      	movs	r3, #1
 800e68a:	e005      	b.n	800e698 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2bc8      	cmp	r3, #200	@ 0xc8
 800e690:	d101      	bne.n	800e696 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e692:	2301      	movs	r3, #1
 800e694:	e000      	b.n	800e698 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e696:	2300      	movs	r3, #0
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e6a0:	b084      	sub	sp, #16
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b086      	sub	sp, #24
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
 800e6aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e6ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	613b      	str	r3, [r7, #16]
 800e6be:	e009      	b.n	800e6d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	3340      	adds	r3, #64	@ 0x40
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	4413      	add	r3, r2
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	613b      	str	r3, [r7, #16]
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	2b0e      	cmp	r3, #14
 800e6d8:	d9f2      	bls.n	800e6c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e6da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d11c      	bne.n	800e71c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e6f0:	f043 0302 	orr.w	r3, r3, #2
 800e6f4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	601a      	str	r2, [r3, #0]
 800e71a:	e005      	b.n	800e728 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e720:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e72e:	461a      	mov	r2, r3
 800e730:	2300      	movs	r3, #0
 800e732:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e734:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d10d      	bne.n	800e758 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e73c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e740:	2b00      	cmp	r3, #0
 800e742:	d104      	bne.n	800e74e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e744:	2100      	movs	r1, #0
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f968 	bl	800ea1c <USB_SetDevSpeed>
 800e74c:	e008      	b.n	800e760 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e74e:	2101      	movs	r1, #1
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 f963 	bl	800ea1c <USB_SetDevSpeed>
 800e756:	e003      	b.n	800e760 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e758:	2103      	movs	r1, #3
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 f95e 	bl	800ea1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e760:	2110      	movs	r1, #16
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 f8fa 	bl	800e95c <USB_FlushTxFifo>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d001      	beq.n	800e772 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e76e:	2301      	movs	r3, #1
 800e770:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 f924 	bl	800e9c0 <USB_FlushRxFifo>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d001      	beq.n	800e782 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e77e:	2301      	movs	r3, #1
 800e780:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e788:	461a      	mov	r2, r3
 800e78a:	2300      	movs	r3, #0
 800e78c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e794:	461a      	mov	r2, r3
 800e796:	2300      	movs	r3, #0
 800e798:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	613b      	str	r3, [r7, #16]
 800e7aa:	e043      	b.n	800e834 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e7be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e7c2:	d118      	bne.n	800e7f6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d10a      	bne.n	800e7e0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	015a      	lsls	r2, r3, #5
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e7dc:	6013      	str	r3, [r2, #0]
 800e7de:	e013      	b.n	800e808 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	015a      	lsls	r2, r3, #5
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e7f2:	6013      	str	r3, [r2, #0]
 800e7f4:	e008      	b.n	800e808 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	015a      	lsls	r2, r3, #5
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e802:	461a      	mov	r2, r3
 800e804:	2300      	movs	r3, #0
 800e806:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	015a      	lsls	r2, r3, #5
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	4413      	add	r3, r2
 800e810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e814:	461a      	mov	r2, r3
 800e816:	2300      	movs	r3, #0
 800e818:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	015a      	lsls	r2, r3, #5
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	4413      	add	r3, r2
 800e822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e826:	461a      	mov	r2, r3
 800e828:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e82c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	3301      	adds	r3, #1
 800e832:	613b      	str	r3, [r7, #16]
 800e834:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e838:	461a      	mov	r2, r3
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d3b5      	bcc.n	800e7ac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e840:	2300      	movs	r3, #0
 800e842:	613b      	str	r3, [r7, #16]
 800e844:	e043      	b.n	800e8ce <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	015a      	lsls	r2, r3, #5
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	4413      	add	r3, r2
 800e84e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e85c:	d118      	bne.n	800e890 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10a      	bne.n	800e87a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	015a      	lsls	r2, r3, #5
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	4413      	add	r3, r2
 800e86c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e870:	461a      	mov	r2, r3
 800e872:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e876:	6013      	str	r3, [r2, #0]
 800e878:	e013      	b.n	800e8a2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	015a      	lsls	r2, r3, #5
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	4413      	add	r3, r2
 800e882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e886:	461a      	mov	r2, r3
 800e888:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e88c:	6013      	str	r3, [r2, #0]
 800e88e:	e008      	b.n	800e8a2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	015a      	lsls	r2, r3, #5
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	4413      	add	r3, r2
 800e898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e89c:	461a      	mov	r2, r3
 800e89e:	2300      	movs	r3, #0
 800e8a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	015a      	lsls	r2, r3, #5
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	015a      	lsls	r2, r3, #5
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e8c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	613b      	str	r3, [r7, #16]
 800e8ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d3b5      	bcc.n	800e846 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	68fa      	ldr	r2, [r7, #12]
 800e8e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e8e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e8ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e8fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e8fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e900:	2b00      	cmp	r3, #0
 800e902:	d105      	bne.n	800e910 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	699b      	ldr	r3, [r3, #24]
 800e908:	f043 0210 	orr.w	r2, r3, #16
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	699a      	ldr	r2, [r3, #24]
 800e914:	4b0f      	ldr	r3, [pc, #60]	@ (800e954 <USB_DevInit+0x2b4>)
 800e916:	4313      	orrs	r3, r2
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e91c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e920:	2b00      	cmp	r3, #0
 800e922:	d005      	beq.n	800e930 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	f043 0208 	orr.w	r2, r3, #8
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e930:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e934:	2b01      	cmp	r3, #1
 800e936:	d105      	bne.n	800e944 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	699a      	ldr	r2, [r3, #24]
 800e93c:	4b06      	ldr	r3, [pc, #24]	@ (800e958 <USB_DevInit+0x2b8>)
 800e93e:	4313      	orrs	r3, r2
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e944:	7dfb      	ldrb	r3, [r7, #23]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3718      	adds	r7, #24
 800e94a:	46bd      	mov	sp, r7
 800e94c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e950:	b004      	add	sp, #16
 800e952:	4770      	bx	lr
 800e954:	803c3800 	.word	0x803c3800
 800e958:	40000004 	.word	0x40000004

0800e95c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b085      	sub	sp, #20
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e966:	2300      	movs	r3, #0
 800e968:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	3301      	adds	r3, #1
 800e96e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e976:	d901      	bls.n	800e97c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e978:	2303      	movs	r3, #3
 800e97a:	e01b      	b.n	800e9b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	691b      	ldr	r3, [r3, #16]
 800e980:	2b00      	cmp	r3, #0
 800e982:	daf2      	bge.n	800e96a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e984:	2300      	movs	r3, #0
 800e986:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	019b      	lsls	r3, r3, #6
 800e98c:	f043 0220 	orr.w	r2, r3, #32
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	3301      	adds	r3, #1
 800e998:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e9a0:	d901      	bls.n	800e9a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e9a2:	2303      	movs	r3, #3
 800e9a4:	e006      	b.n	800e9b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	691b      	ldr	r3, [r3, #16]
 800e9aa:	f003 0320 	and.w	r3, r3, #32
 800e9ae:	2b20      	cmp	r3, #32
 800e9b0:	d0f0      	beq.n	800e994 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3714      	adds	r7, #20
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr

0800e9c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e9d8:	d901      	bls.n	800e9de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e9da:	2303      	movs	r3, #3
 800e9dc:	e018      	b.n	800ea10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	691b      	ldr	r3, [r3, #16]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	daf2      	bge.n	800e9cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2210      	movs	r2, #16
 800e9ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e9fc:	d901      	bls.n	800ea02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e9fe:	2303      	movs	r3, #3
 800ea00:	e006      	b.n	800ea10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	f003 0310 	and.w	r3, r3, #16
 800ea0a:	2b10      	cmp	r3, #16
 800ea0c:	d0f0      	beq.n	800e9f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	460b      	mov	r3, r1
 800ea26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	78fb      	ldrb	r3, [r7, #3]
 800ea36:	68f9      	ldr	r1, [r7, #12]
 800ea38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3714      	adds	r7, #20
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr

0800ea4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ea4e:	b480      	push	{r7}
 800ea50:	b087      	sub	sp, #28
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	f003 0306 	and.w	r3, r3, #6
 800ea66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d102      	bne.n	800ea74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	75fb      	strb	r3, [r7, #23]
 800ea72:	e00a      	b.n	800ea8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2b02      	cmp	r3, #2
 800ea78:	d002      	beq.n	800ea80 <USB_GetDevSpeed+0x32>
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2b06      	cmp	r3, #6
 800ea7e:	d102      	bne.n	800ea86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ea80:	2302      	movs	r3, #2
 800ea82:	75fb      	strb	r3, [r7, #23]
 800ea84:	e001      	b.n	800ea8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ea86:	230f      	movs	r3, #15
 800ea88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ea8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	371c      	adds	r7, #28
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	785b      	ldrb	r3, [r3, #1]
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d139      	bne.n	800eb28 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eaba:	69da      	ldr	r2, [r3, #28]
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	f003 030f 	and.w	r3, r3, #15
 800eac4:	2101      	movs	r1, #1
 800eac6:	fa01 f303 	lsl.w	r3, r1, r3
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	68f9      	ldr	r1, [r7, #12]
 800eace:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ead2:	4313      	orrs	r3, r2
 800ead4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	015a      	lsls	r2, r3, #5
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	4413      	add	r3, r2
 800eade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d153      	bne.n	800eb94 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	015a      	lsls	r2, r3, #5
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	791b      	ldrb	r3, [r3, #4]
 800eb06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	059b      	lsls	r3, r3, #22
 800eb0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb10:	431a      	orrs	r2, r3
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	0159      	lsls	r1, r3, #5
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	440b      	add	r3, r1
 800eb1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb1e:	4619      	mov	r1, r3
 800eb20:	4b20      	ldr	r3, [pc, #128]	@ (800eba4 <USB_ActivateEndpoint+0x10c>)
 800eb22:	4313      	orrs	r3, r2
 800eb24:	600b      	str	r3, [r1, #0]
 800eb26:	e035      	b.n	800eb94 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb2e:	69da      	ldr	r2, [r3, #28]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	f003 030f 	and.w	r3, r3, #15
 800eb38:	2101      	movs	r1, #1
 800eb3a:	fa01 f303 	lsl.w	r3, r1, r3
 800eb3e:	041b      	lsls	r3, r3, #16
 800eb40:	68f9      	ldr	r1, [r7, #12]
 800eb42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eb46:	4313      	orrs	r3, r2
 800eb48:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	015a      	lsls	r2, r3, #5
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	4413      	add	r3, r2
 800eb52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d119      	bne.n	800eb94 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	015a      	lsls	r2, r3, #5
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	4413      	add	r3, r2
 800eb68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	791b      	ldrb	r3, [r3, #4]
 800eb7a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eb7c:	430b      	orrs	r3, r1
 800eb7e:	431a      	orrs	r2, r3
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	0159      	lsls	r1, r3, #5
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	440b      	add	r3, r1
 800eb88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	4b05      	ldr	r3, [pc, #20]	@ (800eba4 <USB_ActivateEndpoint+0x10c>)
 800eb90:	4313      	orrs	r3, r2
 800eb92:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3714      	adds	r7, #20
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr
 800eba2:	bf00      	nop
 800eba4:	10008000 	.word	0x10008000

0800eba8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	785b      	ldrb	r3, [r3, #1]
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d161      	bne.n	800ec88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	015a      	lsls	r2, r3, #5
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	4413      	add	r3, r2
 800ebcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ebd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ebda:	d11f      	bne.n	800ec1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	015a      	lsls	r2, r3, #5
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	0151      	lsls	r1, r2, #5
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	440a      	add	r2, r1
 800ebf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ebf6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ebfa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	015a      	lsls	r2, r3, #5
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	4413      	add	r3, r2
 800ec04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	0151      	lsls	r1, r2, #5
 800ec0e:	68fa      	ldr	r2, [r7, #12]
 800ec10:	440a      	add	r2, r1
 800ec12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	f003 030f 	and.w	r3, r3, #15
 800ec2c:	2101      	movs	r1, #1
 800ec2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	43db      	mvns	r3, r3
 800ec36:	68f9      	ldr	r1, [r7, #12]
 800ec38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ec3c:	4013      	ands	r3, r2
 800ec3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec46:	69da      	ldr	r2, [r3, #28]
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	f003 030f 	and.w	r3, r3, #15
 800ec50:	2101      	movs	r1, #1
 800ec52:	fa01 f303 	lsl.w	r3, r1, r3
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	43db      	mvns	r3, r3
 800ec5a:	68f9      	ldr	r1, [r7, #12]
 800ec5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ec60:	4013      	ands	r3, r2
 800ec62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	015a      	lsls	r2, r3, #5
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	0159      	lsls	r1, r3, #5
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	440b      	add	r3, r1
 800ec7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec7e:	4619      	mov	r1, r3
 800ec80:	4b35      	ldr	r3, [pc, #212]	@ (800ed58 <USB_DeactivateEndpoint+0x1b0>)
 800ec82:	4013      	ands	r3, r2
 800ec84:	600b      	str	r3, [r1, #0]
 800ec86:	e060      	b.n	800ed4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	015a      	lsls	r2, r3, #5
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	4413      	add	r3, r2
 800ec90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec9e:	d11f      	bne.n	800ece0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	015a      	lsls	r2, r3, #5
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	4413      	add	r3, r2
 800eca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	68ba      	ldr	r2, [r7, #8]
 800ecb0:	0151      	lsls	r1, r2, #5
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	440a      	add	r2, r1
 800ecb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ecbe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	015a      	lsls	r2, r3, #5
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	68ba      	ldr	r2, [r7, #8]
 800ecd0:	0151      	lsls	r1, r2, #5
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	440a      	add	r2, r1
 800ecd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ecde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ece6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	f003 030f 	and.w	r3, r3, #15
 800ecf0:	2101      	movs	r1, #1
 800ecf2:	fa01 f303 	lsl.w	r3, r1, r3
 800ecf6:	041b      	lsls	r3, r3, #16
 800ecf8:	43db      	mvns	r3, r3
 800ecfa:	68f9      	ldr	r1, [r7, #12]
 800ecfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ed00:	4013      	ands	r3, r2
 800ed02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed0a:	69da      	ldr	r2, [r3, #28]
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	f003 030f 	and.w	r3, r3, #15
 800ed14:	2101      	movs	r1, #1
 800ed16:	fa01 f303 	lsl.w	r3, r1, r3
 800ed1a:	041b      	lsls	r3, r3, #16
 800ed1c:	43db      	mvns	r3, r3
 800ed1e:	68f9      	ldr	r1, [r7, #12]
 800ed20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ed24:	4013      	ands	r3, r2
 800ed26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	015a      	lsls	r2, r3, #5
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	4413      	add	r3, r2
 800ed30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	0159      	lsls	r1, r3, #5
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	440b      	add	r3, r1
 800ed3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed42:	4619      	mov	r1, r3
 800ed44:	4b05      	ldr	r3, [pc, #20]	@ (800ed5c <USB_DeactivateEndpoint+0x1b4>)
 800ed46:	4013      	ands	r3, r2
 800ed48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ed4a:	2300      	movs	r3, #0
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3714      	adds	r7, #20
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr
 800ed58:	ec337800 	.word	0xec337800
 800ed5c:	eff37800 	.word	0xeff37800

0800ed60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b08a      	sub	sp, #40	@ 0x28
 800ed64:	af02      	add	r7, sp, #8
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	785b      	ldrb	r3, [r3, #1]
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	f040 8181 	bne.w	800f084 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	691b      	ldr	r3, [r3, #16]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d132      	bne.n	800edf0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	015a      	lsls	r2, r3, #5
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	4413      	add	r3, r2
 800ed92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed96:	691a      	ldr	r2, [r3, #16]
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	0159      	lsls	r1, r3, #5
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	440b      	add	r3, r1
 800eda0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eda4:	4619      	mov	r1, r3
 800eda6:	4ba5      	ldr	r3, [pc, #660]	@ (800f03c <USB_EPStartXfer+0x2dc>)
 800eda8:	4013      	ands	r3, r2
 800edaa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	015a      	lsls	r2, r3, #5
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	4413      	add	r3, r2
 800edb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edb8:	691b      	ldr	r3, [r3, #16]
 800edba:	69ba      	ldr	r2, [r7, #24]
 800edbc:	0151      	lsls	r1, r2, #5
 800edbe:	69fa      	ldr	r2, [r7, #28]
 800edc0:	440a      	add	r2, r1
 800edc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800edca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800edcc:	69bb      	ldr	r3, [r7, #24]
 800edce:	015a      	lsls	r2, r3, #5
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	4413      	add	r3, r2
 800edd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edd8:	691a      	ldr	r2, [r3, #16]
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	0159      	lsls	r1, r3, #5
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	440b      	add	r3, r1
 800ede2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ede6:	4619      	mov	r1, r3
 800ede8:	4b95      	ldr	r3, [pc, #596]	@ (800f040 <USB_EPStartXfer+0x2e0>)
 800edea:	4013      	ands	r3, r2
 800edec:	610b      	str	r3, [r1, #16]
 800edee:	e092      	b.n	800ef16 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	015a      	lsls	r2, r3, #5
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	4413      	add	r3, r2
 800edf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edfc:	691a      	ldr	r2, [r3, #16]
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	0159      	lsls	r1, r3, #5
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	440b      	add	r3, r1
 800ee06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	4b8c      	ldr	r3, [pc, #560]	@ (800f040 <USB_EPStartXfer+0x2e0>)
 800ee0e:	4013      	ands	r3, r2
 800ee10:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	015a      	lsls	r2, r3, #5
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	4413      	add	r3, r2
 800ee1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee1e:	691a      	ldr	r2, [r3, #16]
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	0159      	lsls	r1, r3, #5
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	440b      	add	r3, r1
 800ee28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	4b83      	ldr	r3, [pc, #524]	@ (800f03c <USB_EPStartXfer+0x2dc>)
 800ee30:	4013      	ands	r3, r2
 800ee32:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d11a      	bne.n	800ee70 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	691a      	ldr	r2, [r3, #16]
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d903      	bls.n	800ee4e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	689a      	ldr	r2, [r3, #8]
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	015a      	lsls	r2, r3, #5
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	4413      	add	r3, r2
 800ee56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee5a:	691b      	ldr	r3, [r3, #16]
 800ee5c:	69ba      	ldr	r2, [r7, #24]
 800ee5e:	0151      	lsls	r1, r2, #5
 800ee60:	69fa      	ldr	r2, [r7, #28]
 800ee62:	440a      	add	r2, r1
 800ee64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ee6c:	6113      	str	r3, [r2, #16]
 800ee6e:	e01b      	b.n	800eea8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	015a      	lsls	r2, r3, #5
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	4413      	add	r3, r2
 800ee78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee7c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	6919      	ldr	r1, [r3, #16]
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	440b      	add	r3, r1
 800ee88:	1e59      	subs	r1, r3, #1
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ee92:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ee94:	4b6b      	ldr	r3, [pc, #428]	@ (800f044 <USB_EPStartXfer+0x2e4>)
 800ee96:	400b      	ands	r3, r1
 800ee98:	69b9      	ldr	r1, [r7, #24]
 800ee9a:	0148      	lsls	r0, r1, #5
 800ee9c:	69f9      	ldr	r1, [r7, #28]
 800ee9e:	4401      	add	r1, r0
 800eea0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800eea4:	4313      	orrs	r3, r2
 800eea6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	015a      	lsls	r2, r3, #5
 800eeac:	69fb      	ldr	r3, [r7, #28]
 800eeae:	4413      	add	r3, r2
 800eeb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eeb4:	691a      	ldr	r2, [r3, #16]
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	691b      	ldr	r3, [r3, #16]
 800eeba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eebe:	69b9      	ldr	r1, [r7, #24]
 800eec0:	0148      	lsls	r0, r1, #5
 800eec2:	69f9      	ldr	r1, [r7, #28]
 800eec4:	4401      	add	r1, r0
 800eec6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800eeca:	4313      	orrs	r3, r2
 800eecc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	791b      	ldrb	r3, [r3, #4]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d11f      	bne.n	800ef16 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	015a      	lsls	r2, r3, #5
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	4413      	add	r3, r2
 800eede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eee2:	691b      	ldr	r3, [r3, #16]
 800eee4:	69ba      	ldr	r2, [r7, #24]
 800eee6:	0151      	lsls	r1, r2, #5
 800eee8:	69fa      	ldr	r2, [r7, #28]
 800eeea:	440a      	add	r2, r1
 800eeec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eef0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800eef4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	015a      	lsls	r2, r3, #5
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	4413      	add	r3, r2
 800eefe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	69ba      	ldr	r2, [r7, #24]
 800ef06:	0151      	lsls	r1, r2, #5
 800ef08:	69fa      	ldr	r2, [r7, #28]
 800ef0a:	440a      	add	r2, r1
 800ef0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ef14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ef16:	79fb      	ldrb	r3, [r7, #7]
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d14b      	bne.n	800efb4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	69db      	ldr	r3, [r3, #28]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d009      	beq.n	800ef38 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	015a      	lsls	r2, r3, #5
 800ef28:	69fb      	ldr	r3, [r7, #28]
 800ef2a:	4413      	add	r3, r2
 800ef2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef30:	461a      	mov	r2, r3
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	69db      	ldr	r3, [r3, #28]
 800ef36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	791b      	ldrb	r3, [r3, #4]
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d128      	bne.n	800ef92 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d110      	bne.n	800ef72 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	015a      	lsls	r2, r3, #5
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	4413      	add	r3, r2
 800ef58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	69ba      	ldr	r2, [r7, #24]
 800ef60:	0151      	lsls	r1, r2, #5
 800ef62:	69fa      	ldr	r2, [r7, #28]
 800ef64:	440a      	add	r2, r1
 800ef66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef6a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ef6e:	6013      	str	r3, [r2, #0]
 800ef70:	e00f      	b.n	800ef92 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	015a      	lsls	r2, r3, #5
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	4413      	add	r3, r2
 800ef7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	69ba      	ldr	r2, [r7, #24]
 800ef82:	0151      	lsls	r1, r2, #5
 800ef84:	69fa      	ldr	r2, [r7, #28]
 800ef86:	440a      	add	r2, r1
 800ef88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	015a      	lsls	r2, r3, #5
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	4413      	add	r3, r2
 800ef9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	69ba      	ldr	r2, [r7, #24]
 800efa2:	0151      	lsls	r1, r2, #5
 800efa4:	69fa      	ldr	r2, [r7, #28]
 800efa6:	440a      	add	r2, r1
 800efa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800efb0:	6013      	str	r3, [r2, #0]
 800efb2:	e16a      	b.n	800f28a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	015a      	lsls	r2, r3, #5
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	4413      	add	r3, r2
 800efbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	69ba      	ldr	r2, [r7, #24]
 800efc4:	0151      	lsls	r1, r2, #5
 800efc6:	69fa      	ldr	r2, [r7, #28]
 800efc8:	440a      	add	r2, r1
 800efca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800efd2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	791b      	ldrb	r3, [r3, #4]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d015      	beq.n	800f008 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	691b      	ldr	r3, [r3, #16]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f000 8152 	beq.w	800f28a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	781b      	ldrb	r3, [r3, #0]
 800eff2:	f003 030f 	and.w	r3, r3, #15
 800eff6:	2101      	movs	r1, #1
 800eff8:	fa01 f303 	lsl.w	r3, r1, r3
 800effc:	69f9      	ldr	r1, [r7, #28]
 800effe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f002:	4313      	orrs	r3, r2
 800f004:	634b      	str	r3, [r1, #52]	@ 0x34
 800f006:	e140      	b.n	800f28a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f00e:	689b      	ldr	r3, [r3, #8]
 800f010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f014:	2b00      	cmp	r3, #0
 800f016:	d117      	bne.n	800f048 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	015a      	lsls	r2, r3, #5
 800f01c:	69fb      	ldr	r3, [r7, #28]
 800f01e:	4413      	add	r3, r2
 800f020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	69ba      	ldr	r2, [r7, #24]
 800f028:	0151      	lsls	r1, r2, #5
 800f02a:	69fa      	ldr	r2, [r7, #28]
 800f02c:	440a      	add	r2, r1
 800f02e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f032:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f036:	6013      	str	r3, [r2, #0]
 800f038:	e016      	b.n	800f068 <USB_EPStartXfer+0x308>
 800f03a:	bf00      	nop
 800f03c:	e007ffff 	.word	0xe007ffff
 800f040:	fff80000 	.word	0xfff80000
 800f044:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f048:	69bb      	ldr	r3, [r7, #24]
 800f04a:	015a      	lsls	r2, r3, #5
 800f04c:	69fb      	ldr	r3, [r7, #28]
 800f04e:	4413      	add	r3, r2
 800f050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	69ba      	ldr	r2, [r7, #24]
 800f058:	0151      	lsls	r1, r2, #5
 800f05a:	69fa      	ldr	r2, [r7, #28]
 800f05c:	440a      	add	r2, r1
 800f05e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f066:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	68d9      	ldr	r1, [r3, #12]
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	781a      	ldrb	r2, [r3, #0]
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	b298      	uxth	r0, r3
 800f076:	79fb      	ldrb	r3, [r7, #7]
 800f078:	9300      	str	r3, [sp, #0]
 800f07a:	4603      	mov	r3, r0
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	f000 f9b9 	bl	800f3f4 <USB_WritePacket>
 800f082:	e102      	b.n	800f28a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	015a      	lsls	r2, r3, #5
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	4413      	add	r3, r2
 800f08c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f090:	691a      	ldr	r2, [r3, #16]
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	0159      	lsls	r1, r3, #5
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	440b      	add	r3, r1
 800f09a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f09e:	4619      	mov	r1, r3
 800f0a0:	4b7c      	ldr	r3, [pc, #496]	@ (800f294 <USB_EPStartXfer+0x534>)
 800f0a2:	4013      	ands	r3, r2
 800f0a4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	015a      	lsls	r2, r3, #5
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0b2:	691a      	ldr	r2, [r3, #16]
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	0159      	lsls	r1, r3, #5
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	440b      	add	r3, r1
 800f0bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	4b75      	ldr	r3, [pc, #468]	@ (800f298 <USB_EPStartXfer+0x538>)
 800f0c4:	4013      	ands	r3, r2
 800f0c6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800f0c8:	69bb      	ldr	r3, [r7, #24]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d12f      	bne.n	800f12e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	691b      	ldr	r3, [r3, #16]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d003      	beq.n	800f0de <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	689a      	ldr	r2, [r3, #8]
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	689a      	ldr	r2, [r3, #8]
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	015a      	lsls	r2, r3, #5
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0f2:	691a      	ldr	r2, [r3, #16]
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	6a1b      	ldr	r3, [r3, #32]
 800f0f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0fc:	69b9      	ldr	r1, [r7, #24]
 800f0fe:	0148      	lsls	r0, r1, #5
 800f100:	69f9      	ldr	r1, [r7, #28]
 800f102:	4401      	add	r1, r0
 800f104:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f108:	4313      	orrs	r3, r2
 800f10a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	015a      	lsls	r2, r3, #5
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	4413      	add	r3, r2
 800f114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	69ba      	ldr	r2, [r7, #24]
 800f11c:	0151      	lsls	r1, r2, #5
 800f11e:	69fa      	ldr	r2, [r7, #28]
 800f120:	440a      	add	r2, r1
 800f122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f126:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f12a:	6113      	str	r3, [r2, #16]
 800f12c:	e05f      	b.n	800f1ee <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	691b      	ldr	r3, [r3, #16]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d123      	bne.n	800f17e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	015a      	lsls	r2, r3, #5
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	4413      	add	r3, r2
 800f13e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f142:	691a      	ldr	r2, [r3, #16]
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	689b      	ldr	r3, [r3, #8]
 800f148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f14c:	69b9      	ldr	r1, [r7, #24]
 800f14e:	0148      	lsls	r0, r1, #5
 800f150:	69f9      	ldr	r1, [r7, #28]
 800f152:	4401      	add	r1, r0
 800f154:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f158:	4313      	orrs	r3, r2
 800f15a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	015a      	lsls	r2, r3, #5
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	4413      	add	r3, r2
 800f164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f168:	691b      	ldr	r3, [r3, #16]
 800f16a:	69ba      	ldr	r2, [r7, #24]
 800f16c:	0151      	lsls	r1, r2, #5
 800f16e:	69fa      	ldr	r2, [r7, #28]
 800f170:	440a      	add	r2, r1
 800f172:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f176:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f17a:	6113      	str	r3, [r2, #16]
 800f17c:	e037      	b.n	800f1ee <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	691a      	ldr	r2, [r3, #16]
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	689b      	ldr	r3, [r3, #8]
 800f186:	4413      	add	r3, r2
 800f188:	1e5a      	subs	r2, r3, #1
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f192:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	8afa      	ldrh	r2, [r7, #22]
 800f19a:	fb03 f202 	mul.w	r2, r3, r2
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f1a2:	69bb      	ldr	r3, [r7, #24]
 800f1a4:	015a      	lsls	r2, r3, #5
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1ae:	691a      	ldr	r2, [r3, #16]
 800f1b0:	8afb      	ldrh	r3, [r7, #22]
 800f1b2:	04d9      	lsls	r1, r3, #19
 800f1b4:	4b39      	ldr	r3, [pc, #228]	@ (800f29c <USB_EPStartXfer+0x53c>)
 800f1b6:	400b      	ands	r3, r1
 800f1b8:	69b9      	ldr	r1, [r7, #24]
 800f1ba:	0148      	lsls	r0, r1, #5
 800f1bc:	69f9      	ldr	r1, [r7, #28]
 800f1be:	4401      	add	r1, r0
 800f1c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	015a      	lsls	r2, r3, #5
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1d4:	691a      	ldr	r2, [r3, #16]
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	6a1b      	ldr	r3, [r3, #32]
 800f1da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f1de:	69b9      	ldr	r1, [r7, #24]
 800f1e0:	0148      	lsls	r0, r1, #5
 800f1e2:	69f9      	ldr	r1, [r7, #28]
 800f1e4:	4401      	add	r1, r0
 800f1e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f1ee:	79fb      	ldrb	r3, [r7, #7]
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d10d      	bne.n	800f210 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d009      	beq.n	800f210 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	68d9      	ldr	r1, [r3, #12]
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	015a      	lsls	r2, r3, #5
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	4413      	add	r3, r2
 800f208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f20c:	460a      	mov	r2, r1
 800f20e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	791b      	ldrb	r3, [r3, #4]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d128      	bne.n	800f26a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f224:	2b00      	cmp	r3, #0
 800f226:	d110      	bne.n	800f24a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	015a      	lsls	r2, r3, #5
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	4413      	add	r3, r2
 800f230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	69ba      	ldr	r2, [r7, #24]
 800f238:	0151      	lsls	r1, r2, #5
 800f23a:	69fa      	ldr	r2, [r7, #28]
 800f23c:	440a      	add	r2, r1
 800f23e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f242:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f246:	6013      	str	r3, [r2, #0]
 800f248:	e00f      	b.n	800f26a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	015a      	lsls	r2, r3, #5
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	4413      	add	r3, r2
 800f252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	69ba      	ldr	r2, [r7, #24]
 800f25a:	0151      	lsls	r1, r2, #5
 800f25c:	69fa      	ldr	r2, [r7, #28]
 800f25e:	440a      	add	r2, r1
 800f260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f268:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	015a      	lsls	r2, r3, #5
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	4413      	add	r3, r2
 800f272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	69ba      	ldr	r2, [r7, #24]
 800f27a:	0151      	lsls	r1, r2, #5
 800f27c:	69fa      	ldr	r2, [r7, #28]
 800f27e:	440a      	add	r2, r1
 800f280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f284:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f288:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3720      	adds	r7, #32
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	fff80000 	.word	0xfff80000
 800f298:	e007ffff 	.word	0xe007ffff
 800f29c:	1ff80000 	.word	0x1ff80000

0800f2a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b087      	sub	sp, #28
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	785b      	ldrb	r3, [r3, #1]
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d14a      	bne.n	800f354 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	015a      	lsls	r2, r3, #5
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f2d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f2d6:	f040 8086 	bne.w	800f3e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	015a      	lsls	r2, r3, #5
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	683a      	ldr	r2, [r7, #0]
 800f2ec:	7812      	ldrb	r2, [r2, #0]
 800f2ee:	0151      	lsls	r1, r2, #5
 800f2f0:	693a      	ldr	r2, [r7, #16]
 800f2f2:	440a      	add	r2, r1
 800f2f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f2f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f2fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	015a      	lsls	r2, r3, #5
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	4413      	add	r3, r2
 800f308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	7812      	ldrb	r2, [r2, #0]
 800f312:	0151      	lsls	r1, r2, #5
 800f314:	693a      	ldr	r2, [r7, #16]
 800f316:	440a      	add	r2, r1
 800f318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f31c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f320:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	3301      	adds	r3, #1
 800f326:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f32e:	4293      	cmp	r3, r2
 800f330:	d902      	bls.n	800f338 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f332:	2301      	movs	r3, #1
 800f334:	75fb      	strb	r3, [r7, #23]
          break;
 800f336:	e056      	b.n	800f3e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	015a      	lsls	r2, r3, #5
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	4413      	add	r3, r2
 800f342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f34c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f350:	d0e7      	beq.n	800f322 <USB_EPStopXfer+0x82>
 800f352:	e048      	b.n	800f3e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	015a      	lsls	r2, r3, #5
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	4413      	add	r3, r2
 800f35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f36c:	d13b      	bne.n	800f3e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	015a      	lsls	r2, r3, #5
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	4413      	add	r3, r2
 800f378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	683a      	ldr	r2, [r7, #0]
 800f380:	7812      	ldrb	r2, [r2, #0]
 800f382:	0151      	lsls	r1, r2, #5
 800f384:	693a      	ldr	r2, [r7, #16]
 800f386:	440a      	add	r2, r1
 800f388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f38c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f390:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	015a      	lsls	r2, r3, #5
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	4413      	add	r3, r2
 800f39c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	683a      	ldr	r2, [r7, #0]
 800f3a4:	7812      	ldrb	r2, [r2, #0]
 800f3a6:	0151      	lsls	r1, r2, #5
 800f3a8:	693a      	ldr	r2, [r7, #16]
 800f3aa:	440a      	add	r2, r1
 800f3ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f3b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d902      	bls.n	800f3cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	75fb      	strb	r3, [r7, #23]
          break;
 800f3ca:	e00c      	b.n	800f3e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	015a      	lsls	r2, r3, #5
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f3e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f3e4:	d0e7      	beq.n	800f3b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	371c      	adds	r7, #28
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b089      	sub	sp, #36	@ 0x24
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	4611      	mov	r1, r2
 800f400:	461a      	mov	r2, r3
 800f402:	460b      	mov	r3, r1
 800f404:	71fb      	strb	r3, [r7, #7]
 800f406:	4613      	mov	r3, r2
 800f408:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f412:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f416:	2b00      	cmp	r3, #0
 800f418:	d123      	bne.n	800f462 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f41a:	88bb      	ldrh	r3, [r7, #4]
 800f41c:	3303      	adds	r3, #3
 800f41e:	089b      	lsrs	r3, r3, #2
 800f420:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f422:	2300      	movs	r3, #0
 800f424:	61bb      	str	r3, [r7, #24]
 800f426:	e018      	b.n	800f45a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f428:	79fb      	ldrb	r3, [r7, #7]
 800f42a:	031a      	lsls	r2, r3, #12
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	4413      	add	r3, r2
 800f430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f434:	461a      	mov	r2, r3
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	3301      	adds	r3, #1
 800f440:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	3301      	adds	r3, #1
 800f446:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	3301      	adds	r3, #1
 800f44c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	3301      	adds	r3, #1
 800f452:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	3301      	adds	r3, #1
 800f458:	61bb      	str	r3, [r7, #24]
 800f45a:	69ba      	ldr	r2, [r7, #24]
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d3e2      	bcc.n	800f428 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f462:	2300      	movs	r3, #0
}
 800f464:	4618      	mov	r0, r3
 800f466:	3724      	adds	r7, #36	@ 0x24
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f470:	b480      	push	{r7}
 800f472:	b08b      	sub	sp, #44	@ 0x2c
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	4613      	mov	r3, r2
 800f47c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f486:	88fb      	ldrh	r3, [r7, #6]
 800f488:	089b      	lsrs	r3, r3, #2
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f48e:	88fb      	ldrh	r3, [r7, #6]
 800f490:	f003 0303 	and.w	r3, r3, #3
 800f494:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f496:	2300      	movs	r3, #0
 800f498:	623b      	str	r3, [r7, #32]
 800f49a:	e014      	b.n	800f4c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4a6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4bc:	3301      	adds	r3, #1
 800f4be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f4c0:	6a3b      	ldr	r3, [r7, #32]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	623b      	str	r3, [r7, #32]
 800f4c6:	6a3a      	ldr	r2, [r7, #32]
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d3e6      	bcc.n	800f49c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f4ce:	8bfb      	ldrh	r3, [r7, #30]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d01e      	beq.n	800f512 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f4de:	461a      	mov	r2, r3
 800f4e0:	f107 0310 	add.w	r3, r7, #16
 800f4e4:	6812      	ldr	r2, [r2, #0]
 800f4e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f4e8:	693a      	ldr	r2, [r7, #16]
 800f4ea:	6a3b      	ldr	r3, [r7, #32]
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	00db      	lsls	r3, r3, #3
 800f4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800f4f4:	b2da      	uxtb	r2, r3
 800f4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f8:	701a      	strb	r2, [r3, #0]
      i++;
 800f4fa:	6a3b      	ldr	r3, [r7, #32]
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	623b      	str	r3, [r7, #32]
      pDest++;
 800f500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f502:	3301      	adds	r3, #1
 800f504:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f506:	8bfb      	ldrh	r3, [r7, #30]
 800f508:	3b01      	subs	r3, #1
 800f50a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f50c:	8bfb      	ldrh	r3, [r7, #30]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d1ea      	bne.n	800f4e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f514:	4618      	mov	r0, r3
 800f516:	372c      	adds	r7, #44	@ 0x2c
 800f518:	46bd      	mov	sp, r7
 800f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51e:	4770      	bx	lr

0800f520 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	785b      	ldrb	r3, [r3, #1]
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d12c      	bne.n	800f596 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	015a      	lsls	r2, r3, #5
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	4413      	add	r3, r2
 800f544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	db12      	blt.n	800f574 <USB_EPSetStall+0x54>
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d00f      	beq.n	800f574 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	015a      	lsls	r2, r3, #5
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	4413      	add	r3, r2
 800f55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	68ba      	ldr	r2, [r7, #8]
 800f564:	0151      	lsls	r1, r2, #5
 800f566:	68fa      	ldr	r2, [r7, #12]
 800f568:	440a      	add	r2, r1
 800f56a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f56e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f572:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	015a      	lsls	r2, r3, #5
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	4413      	add	r3, r2
 800f57c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	68ba      	ldr	r2, [r7, #8]
 800f584:	0151      	lsls	r1, r2, #5
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	440a      	add	r2, r1
 800f58a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f58e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f592:	6013      	str	r3, [r2, #0]
 800f594:	e02b      	b.n	800f5ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	015a      	lsls	r2, r3, #5
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	4413      	add	r3, r2
 800f59e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	db12      	blt.n	800f5ce <USB_EPSetStall+0xae>
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00f      	beq.n	800f5ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	015a      	lsls	r2, r3, #5
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	68ba      	ldr	r2, [r7, #8]
 800f5be:	0151      	lsls	r1, r2, #5
 800f5c0:	68fa      	ldr	r2, [r7, #12]
 800f5c2:	440a      	add	r2, r1
 800f5c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f5c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f5cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	015a      	lsls	r2, r3, #5
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	68ba      	ldr	r2, [r7, #8]
 800f5de:	0151      	lsls	r1, r2, #5
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	440a      	add	r2, r1
 800f5e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f5e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f5ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f5ee:	2300      	movs	r3, #0
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3714      	adds	r7, #20
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	785b      	ldrb	r3, [r3, #1]
 800f614:	2b01      	cmp	r3, #1
 800f616:	d128      	bne.n	800f66a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	015a      	lsls	r2, r3, #5
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	4413      	add	r3, r2
 800f620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	0151      	lsls	r1, r2, #5
 800f62a:	68fa      	ldr	r2, [r7, #12]
 800f62c:	440a      	add	r2, r1
 800f62e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f632:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f636:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	791b      	ldrb	r3, [r3, #4]
 800f63c:	2b03      	cmp	r3, #3
 800f63e:	d003      	beq.n	800f648 <USB_EPClearStall+0x4c>
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	791b      	ldrb	r3, [r3, #4]
 800f644:	2b02      	cmp	r3, #2
 800f646:	d138      	bne.n	800f6ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	015a      	lsls	r2, r3, #5
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	4413      	add	r3, r2
 800f650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	68ba      	ldr	r2, [r7, #8]
 800f658:	0151      	lsls	r1, r2, #5
 800f65a:	68fa      	ldr	r2, [r7, #12]
 800f65c:	440a      	add	r2, r1
 800f65e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f666:	6013      	str	r3, [r2, #0]
 800f668:	e027      	b.n	800f6ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	015a      	lsls	r2, r3, #5
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	4413      	add	r3, r2
 800f672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	68ba      	ldr	r2, [r7, #8]
 800f67a:	0151      	lsls	r1, r2, #5
 800f67c:	68fa      	ldr	r2, [r7, #12]
 800f67e:	440a      	add	r2, r1
 800f680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f684:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f688:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	791b      	ldrb	r3, [r3, #4]
 800f68e:	2b03      	cmp	r3, #3
 800f690:	d003      	beq.n	800f69a <USB_EPClearStall+0x9e>
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	791b      	ldrb	r3, [r3, #4]
 800f696:	2b02      	cmp	r3, #2
 800f698:	d10f      	bne.n	800f6ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	015a      	lsls	r2, r3, #5
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	4413      	add	r3, r2
 800f6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	68ba      	ldr	r2, [r7, #8]
 800f6aa:	0151      	lsls	r1, r2, #5
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	440a      	add	r2, r1
 800f6b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f6b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f6b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f6e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f6ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	78fb      	ldrb	r3, [r7, #3]
 800f6f6:	011b      	lsls	r3, r3, #4
 800f6f8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f6fc:	68f9      	ldr	r1, [r7, #12]
 800f6fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f702:	4313      	orrs	r3, r2
 800f704:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f706:	2300      	movs	r3, #0
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3714      	adds	r7, #20
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr

0800f714 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	68fa      	ldr	r2, [r7, #12]
 800f72a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f72e:	f023 0303 	bic.w	r3, r3, #3
 800f732:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f742:	f023 0302 	bic.w	r3, r3, #2
 800f746:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3714      	adds	r7, #20
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr

0800f756 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f756:	b480      	push	{r7}
 800f758:	b085      	sub	sp, #20
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f770:	f023 0303 	bic.w	r3, r3, #3
 800f774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f784:	f043 0302 	orr.w	r3, r3, #2
 800f788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3714      	adds	r7, #20
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f798:	b480      	push	{r7}
 800f79a:	b085      	sub	sp, #20
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	695b      	ldr	r3, [r3, #20]
 800f7a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	699b      	ldr	r3, [r3, #24]
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3714      	adds	r7, #20
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr

0800f7be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f7be:	b480      	push	{r7}
 800f7c0:	b085      	sub	sp, #20
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f7d0:	699b      	ldr	r3, [r3, #24]
 800f7d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f7da:	69db      	ldr	r3, [r3, #28]
 800f7dc:	68ba      	ldr	r2, [r7, #8]
 800f7de:	4013      	ands	r3, r2
 800f7e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	0c1b      	lsrs	r3, r3, #16
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3714      	adds	r7, #20
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr

0800f7f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f7f2:	b480      	push	{r7}
 800f7f4:	b085      	sub	sp, #20
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f804:	699b      	ldr	r3, [r3, #24]
 800f806:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f80e:	69db      	ldr	r3, [r3, #28]
 800f810:	68ba      	ldr	r2, [r7, #8]
 800f812:	4013      	ands	r3, r2
 800f814:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	b29b      	uxth	r3, r3
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f826:	b480      	push	{r7}
 800f828:	b085      	sub	sp, #20
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	460b      	mov	r3, r1
 800f830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f836:	78fb      	ldrb	r3, [r7, #3]
 800f838:	015a      	lsls	r2, r3, #5
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	4413      	add	r3, r2
 800f83e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	4013      	ands	r3, r2
 800f852:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f854:	68bb      	ldr	r3, [r7, #8]
}
 800f856:	4618      	mov	r0, r3
 800f858:	3714      	adds	r7, #20
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr

0800f862 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f862:	b480      	push	{r7}
 800f864:	b087      	sub	sp, #28
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
 800f86a:	460b      	mov	r3, r1
 800f86c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f878:	691b      	ldr	r3, [r3, #16]
 800f87a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f884:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f886:	78fb      	ldrb	r3, [r7, #3]
 800f888:	f003 030f 	and.w	r3, r3, #15
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	fa22 f303 	lsr.w	r3, r2, r3
 800f892:	01db      	lsls	r3, r3, #7
 800f894:	b2db      	uxtb	r3, r3
 800f896:	693a      	ldr	r2, [r7, #16]
 800f898:	4313      	orrs	r3, r2
 800f89a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f89c:	78fb      	ldrb	r3, [r7, #3]
 800f89e:	015a      	lsls	r2, r3, #5
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	693a      	ldr	r2, [r7, #16]
 800f8ac:	4013      	ands	r3, r2
 800f8ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f8b0:	68bb      	ldr	r3, [r7, #8]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	371c      	adds	r7, #28
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr

0800f8be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f8be:	b480      	push	{r7}
 800f8c0:	b083      	sub	sp, #12
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	695b      	ldr	r3, [r3, #20]
 800f8ca:	f003 0301 	and.w	r3, r3, #1
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	370c      	adds	r7, #12
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr
	...

0800f8dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b085      	sub	sp, #20
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	4b09      	ldr	r3, [pc, #36]	@ (800f920 <USB_ActivateSetup+0x44>)
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f90c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f912:	2300      	movs	r3, #0
}
 800f914:	4618      	mov	r0, r3
 800f916:	3714      	adds	r7, #20
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr
 800f920:	fffff800 	.word	0xfffff800

0800f924 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f924:	b480      	push	{r7}
 800f926:	b087      	sub	sp, #28
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	460b      	mov	r3, r1
 800f92e:	607a      	str	r2, [r7, #4]
 800f930:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	333c      	adds	r3, #60	@ 0x3c
 800f93a:	3304      	adds	r3, #4
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	4a26      	ldr	r2, [pc, #152]	@ (800f9dc <USB_EP0_OutStart+0xb8>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d90a      	bls.n	800f95e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f954:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f958:	d101      	bne.n	800f95e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f95a:	2300      	movs	r3, #0
 800f95c:	e037      	b.n	800f9ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f964:	461a      	mov	r2, r3
 800f966:	2300      	movs	r3, #0
 800f968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f970:	691b      	ldr	r3, [r3, #16]
 800f972:	697a      	ldr	r2, [r7, #20]
 800f974:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f978:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f97c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f984:	691b      	ldr	r3, [r3, #16]
 800f986:	697a      	ldr	r2, [r7, #20]
 800f988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f98c:	f043 0318 	orr.w	r3, r3, #24
 800f990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f998:	691b      	ldr	r3, [r3, #16]
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f9a0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f9a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f9a6:	7afb      	ldrb	r3, [r7, #11]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d10f      	bne.n	800f9cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	697a      	ldr	r2, [r7, #20]
 800f9c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f9c6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f9ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f9cc:	2300      	movs	r3, #0
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	371c      	adds	r7, #28
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr
 800f9da:	bf00      	nop
 800f9dc:	4f54300a 	.word	0x4f54300a

0800f9e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b085      	sub	sp, #20
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f9f8:	d901      	bls.n	800f9fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f9fa:	2303      	movs	r3, #3
 800f9fc:	e01b      	b.n	800fa36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	691b      	ldr	r3, [r3, #16]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	daf2      	bge.n	800f9ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fa06:	2300      	movs	r3, #0
 800fa08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	f043 0201 	orr.w	r2, r3, #1
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fa22:	d901      	bls.n	800fa28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fa24:	2303      	movs	r3, #3
 800fa26:	e006      	b.n	800fa36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	691b      	ldr	r3, [r3, #16]
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d0f0      	beq.n	800fa16 <USB_CoreReset+0x36>

  return HAL_OK;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3714      	adds	r7, #20
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
	...

0800fa44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fa48:	4904      	ldr	r1, [pc, #16]	@ (800fa5c <MX_FATFS_Init+0x18>)
 800fa4a:	4805      	ldr	r0, [pc, #20]	@ (800fa60 <MX_FATFS_Init+0x1c>)
 800fa4c:	f003 fcd4 	bl	80133f8 <FATFS_LinkDriver>
 800fa50:	4603      	mov	r3, r0
 800fa52:	461a      	mov	r2, r3
 800fa54:	4b03      	ldr	r3, [pc, #12]	@ (800fa64 <MX_FATFS_Init+0x20>)
 800fa56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fa58:	bf00      	nop
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	24000a24 	.word	0x24000a24
 800fa60:	08016ae4 	.word	0x08016ae4
 800fa64:	24000a20 	.word	0x24000a20

0800fa68 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fa72:	f000 f879 	bl	800fb68 <BSP_SD_IsDetected>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d001      	beq.n	800fa80 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fa7c:	2302      	movs	r3, #2
 800fa7e:	e012      	b.n	800faa6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fa80:	480b      	ldr	r0, [pc, #44]	@ (800fab0 <BSP_SD_Init+0x48>)
 800fa82:	f7f9 fc51 	bl	8009328 <HAL_SD_Init>
 800fa86:	4603      	mov	r3, r0
 800fa88:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fa8a:	79fb      	ldrb	r3, [r7, #7]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d109      	bne.n	800faa4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fa90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800fa94:	4806      	ldr	r0, [pc, #24]	@ (800fab0 <BSP_SD_Init+0x48>)
 800fa96:	f7fa fb0d 	bl	800a0b4 <HAL_SD_ConfigWideBusOperation>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d001      	beq.n	800faa4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800faa0:	2301      	movs	r3, #1
 800faa2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800faa4:	79fb      	ldrb	r3, [r7, #7]
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3708      	adds	r7, #8
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	24000798 	.word	0x24000798

0800fab4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b088      	sub	sp, #32
 800fab8:	af02      	add	r7, sp, #8
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
 800fac0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fac2:	2300      	movs	r3, #0
 800fac4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	9300      	str	r3, [sp, #0]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	68ba      	ldr	r2, [r7, #8]
 800face:	68f9      	ldr	r1, [r7, #12]
 800fad0:	4806      	ldr	r0, [pc, #24]	@ (800faec <BSP_SD_ReadBlocks+0x38>)
 800fad2:	f7f9 fd49 	bl	8009568 <HAL_SD_ReadBlocks>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d001      	beq.n	800fae0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fadc:	2301      	movs	r3, #1
 800fade:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3718      	adds	r7, #24
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	24000798 	.word	0x24000798

0800faf0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b088      	sub	sp, #32
 800faf4:	af02      	add	r7, sp, #8
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
 800fafc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fafe:	2300      	movs	r3, #0
 800fb00:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	9300      	str	r3, [sp, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	68ba      	ldr	r2, [r7, #8]
 800fb0a:	68f9      	ldr	r1, [r7, #12]
 800fb0c:	4806      	ldr	r0, [pc, #24]	@ (800fb28 <BSP_SD_WriteBlocks+0x38>)
 800fb0e:	f7f9 feb5 	bl	800987c <HAL_SD_WriteBlocks>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d001      	beq.n	800fb1c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3718      	adds	r7, #24
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	24000798 	.word	0x24000798

0800fb2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fb30:	4805      	ldr	r0, [pc, #20]	@ (800fb48 <BSP_SD_GetCardState+0x1c>)
 800fb32:	f7fa fbd1 	bl	800a2d8 <HAL_SD_GetCardState>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b04      	cmp	r3, #4
 800fb3a:	bf14      	ite	ne
 800fb3c:	2301      	movne	r3, #1
 800fb3e:	2300      	moveq	r3, #0
 800fb40:	b2db      	uxtb	r3, r3
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	24000798 	.word	0x24000798

0800fb4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fb54:	6879      	ldr	r1, [r7, #4]
 800fb56:	4803      	ldr	r0, [pc, #12]	@ (800fb64 <BSP_SD_GetCardInfo+0x18>)
 800fb58:	f7fa fa80 	bl	800a05c <HAL_SD_GetCardInfo>
}
 800fb5c:	bf00      	nop
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	24000798 	.word	0x24000798

0800fb68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fb72:	f000 f80b 	bl	800fb8c <BSP_PlatformIsDetected>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d101      	bne.n	800fb80 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fb80:	79fb      	ldrb	r3, [r7, #7]
 800fb82:	b2db      	uxtb	r3, r3
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fb92:	2301      	movs	r3, #1
 800fb94:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fb96:	2102      	movs	r1, #2
 800fb98:	4806      	ldr	r0, [pc, #24]	@ (800fbb4 <BSP_PlatformIsDetected+0x28>)
 800fb9a:	f7f3 fab1 	bl	8003100 <HAL_GPIO_ReadPin>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800fba4:	2300      	movs	r3, #0
 800fba6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fba8:	79fb      	ldrb	r3, [r7, #7]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	58020000 	.word	0x58020000

0800fbb8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fbc2:	4b0b      	ldr	r3, [pc, #44]	@ (800fbf0 <SD_CheckStatus+0x38>)
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fbc8:	f7ff ffb0 	bl	800fb2c <BSP_SD_GetCardState>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d107      	bne.n	800fbe2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fbd2:	4b07      	ldr	r3, [pc, #28]	@ (800fbf0 <SD_CheckStatus+0x38>)
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	f023 0301 	bic.w	r3, r3, #1
 800fbdc:	b2da      	uxtb	r2, r3
 800fbde:	4b04      	ldr	r3, [pc, #16]	@ (800fbf0 <SD_CheckStatus+0x38>)
 800fbe0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fbe2:	4b03      	ldr	r3, [pc, #12]	@ (800fbf0 <SD_CheckStatus+0x38>)
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	b2db      	uxtb	r3, r3
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3708      	adds	r7, #8
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	24000039 	.word	0x24000039

0800fbf4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800fbfe:	4b0b      	ldr	r3, [pc, #44]	@ (800fc2c <SD_initialize+0x38>)
 800fc00:	2201      	movs	r2, #1
 800fc02:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fc04:	f7ff ff30 	bl	800fa68 <BSP_SD_Init>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d107      	bne.n	800fc1e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800fc0e:	79fb      	ldrb	r3, [r7, #7]
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7ff ffd1 	bl	800fbb8 <SD_CheckStatus>
 800fc16:	4603      	mov	r3, r0
 800fc18:	461a      	mov	r2, r3
 800fc1a:	4b04      	ldr	r3, [pc, #16]	@ (800fc2c <SD_initialize+0x38>)
 800fc1c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fc1e:	4b03      	ldr	r3, [pc, #12]	@ (800fc2c <SD_initialize+0x38>)
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	b2db      	uxtb	r3, r3
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3708      	adds	r7, #8
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	24000039 	.word	0x24000039

0800fc30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	4603      	mov	r3, r0
 800fc38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fc3a:	79fb      	ldrb	r3, [r7, #7]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7ff ffbb 	bl	800fbb8 <SD_CheckStatus>
 800fc42:	4603      	mov	r3, r0
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b086      	sub	sp, #24
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60b9      	str	r1, [r7, #8]
 800fc54:	607a      	str	r2, [r7, #4]
 800fc56:	603b      	str	r3, [r7, #0]
 800fc58:	4603      	mov	r3, r0
 800fc5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800fc60:	f04f 33ff 	mov.w	r3, #4294967295
 800fc64:	683a      	ldr	r2, [r7, #0]
 800fc66:	6879      	ldr	r1, [r7, #4]
 800fc68:	68b8      	ldr	r0, [r7, #8]
 800fc6a:	f7ff ff23 	bl	800fab4 <BSP_SD_ReadBlocks>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d107      	bne.n	800fc84 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fc74:	bf00      	nop
 800fc76:	f7ff ff59 	bl	800fb2c <BSP_SD_GetCardState>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d1fa      	bne.n	800fc76 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800fc80:	2300      	movs	r3, #0
 800fc82:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800fc84:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3718      	adds	r7, #24
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b086      	sub	sp, #24
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]
 800fc98:	603b      	str	r3, [r7, #0]
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fc9e:	2301      	movs	r3, #1
 800fca0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800fca2:	f04f 33ff 	mov.w	r3, #4294967295
 800fca6:	683a      	ldr	r2, [r7, #0]
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	68b8      	ldr	r0, [r7, #8]
 800fcac:	f7ff ff20 	bl	800faf0 <BSP_SD_WriteBlocks>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d107      	bne.n	800fcc6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800fcb6:	bf00      	nop
 800fcb8:	f7ff ff38 	bl	800fb2c <BSP_SD_GetCardState>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d1fa      	bne.n	800fcb8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800fcc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3718      	adds	r7, #24
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b08c      	sub	sp, #48	@ 0x30
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	603a      	str	r2, [r7, #0]
 800fcda:	71fb      	strb	r3, [r7, #7]
 800fcdc:	460b      	mov	r3, r1
 800fcde:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fce0:	2301      	movs	r3, #1
 800fce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fce6:	4b25      	ldr	r3, [pc, #148]	@ (800fd7c <SD_ioctl+0xac>)
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	f003 0301 	and.w	r3, r3, #1
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <SD_ioctl+0x28>
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	e03c      	b.n	800fd72 <SD_ioctl+0xa2>

  switch (cmd)
 800fcf8:	79bb      	ldrb	r3, [r7, #6]
 800fcfa:	2b03      	cmp	r3, #3
 800fcfc:	d834      	bhi.n	800fd68 <SD_ioctl+0x98>
 800fcfe:	a201      	add	r2, pc, #4	@ (adr r2, 800fd04 <SD_ioctl+0x34>)
 800fd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd04:	0800fd15 	.word	0x0800fd15
 800fd08:	0800fd1d 	.word	0x0800fd1d
 800fd0c:	0800fd35 	.word	0x0800fd35
 800fd10:	0800fd4f 	.word	0x0800fd4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fd14:	2300      	movs	r3, #0
 800fd16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd1a:	e028      	b.n	800fd6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd1c:	f107 0308 	add.w	r3, r7, #8
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7ff ff13 	bl	800fb4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fd26:	6a3a      	ldr	r2, [r7, #32]
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd32:	e01c      	b.n	800fd6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd34:	f107 0308 	add.w	r3, r7, #8
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7ff ff07 	bl	800fb4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd40:	b29a      	uxth	r2, r3
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fd46:	2300      	movs	r3, #0
 800fd48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd4c:	e00f      	b.n	800fd6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd4e:	f107 0308 	add.w	r3, r7, #8
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7ff fefa 	bl	800fb4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd5a:	0a5a      	lsrs	r2, r3, #9
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fd60:	2300      	movs	r3, #0
 800fd62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd66:	e002      	b.n	800fd6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fd68:	2304      	movs	r3, #4
 800fd6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800fd6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3730      	adds	r7, #48	@ 0x30
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	24000039 	.word	0x24000039

0800fd80 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	460b      	mov	r3, r1
 800fd8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800fd8c:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800fd90:	f004 f836 	bl	8013e00 <USBD_static_malloc>
 800fd94:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d109      	bne.n	800fdb0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	32b0      	adds	r2, #176	@ 0xb0
 800fda6:	2100      	movs	r1, #0
 800fda8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fdac:	2302      	movs	r3, #2
 800fdae:	e06e      	b.n	800fe8e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	32b0      	adds	r2, #176	@ 0xb0
 800fdba:	68f9      	ldr	r1, [r7, #12]
 800fdbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	32b0      	adds	r2, #176	@ 0xb0
 800fdca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	7c1b      	ldrb	r3, [r3, #16]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d12b      	bne.n	800fe34 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800fddc:	4b2e      	ldr	r3, [pc, #184]	@ (800fe98 <USBD_MSC_Init+0x118>)
 800fdde:	7819      	ldrb	r1, [r3, #0]
 800fde0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fde4:	2202      	movs	r2, #2
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f003 fec7 	bl	8013b7a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800fdec:	4b2a      	ldr	r3, [pc, #168]	@ (800fe98 <USBD_MSC_Init+0x118>)
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	f003 020f 	and.w	r2, r3, #15
 800fdf4:	6879      	ldr	r1, [r7, #4]
 800fdf6:	4613      	mov	r3, r2
 800fdf8:	009b      	lsls	r3, r3, #2
 800fdfa:	4413      	add	r3, r2
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	440b      	add	r3, r1
 800fe00:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe04:	2201      	movs	r2, #1
 800fe06:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800fe08:	4b24      	ldr	r3, [pc, #144]	@ (800fe9c <USBD_MSC_Init+0x11c>)
 800fe0a:	7819      	ldrb	r1, [r3, #0]
 800fe0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe10:	2202      	movs	r2, #2
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f003 feb1 	bl	8013b7a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800fe18:	4b20      	ldr	r3, [pc, #128]	@ (800fe9c <USBD_MSC_Init+0x11c>)
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	f003 020f 	and.w	r2, r3, #15
 800fe20:	6879      	ldr	r1, [r7, #4]
 800fe22:	4613      	mov	r3, r2
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	4413      	add	r3, r2
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	440b      	add	r3, r1
 800fe2c:	3324      	adds	r3, #36	@ 0x24
 800fe2e:	2201      	movs	r2, #1
 800fe30:	801a      	strh	r2, [r3, #0]
 800fe32:	e028      	b.n	800fe86 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800fe34:	4b18      	ldr	r3, [pc, #96]	@ (800fe98 <USBD_MSC_Init+0x118>)
 800fe36:	7819      	ldrb	r1, [r3, #0]
 800fe38:	2340      	movs	r3, #64	@ 0x40
 800fe3a:	2202      	movs	r2, #2
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f003 fe9c 	bl	8013b7a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800fe42:	4b15      	ldr	r3, [pc, #84]	@ (800fe98 <USBD_MSC_Init+0x118>)
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	f003 020f 	and.w	r2, r3, #15
 800fe4a:	6879      	ldr	r1, [r7, #4]
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	009b      	lsls	r3, r3, #2
 800fe50:	4413      	add	r3, r2
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	440b      	add	r3, r1
 800fe56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800fe5e:	4b0f      	ldr	r3, [pc, #60]	@ (800fe9c <USBD_MSC_Init+0x11c>)
 800fe60:	7819      	ldrb	r1, [r3, #0]
 800fe62:	2340      	movs	r3, #64	@ 0x40
 800fe64:	2202      	movs	r2, #2
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f003 fe87 	bl	8013b7a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800fe6c:	4b0b      	ldr	r3, [pc, #44]	@ (800fe9c <USBD_MSC_Init+0x11c>)
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	f003 020f 	and.w	r2, r3, #15
 800fe74:	6879      	ldr	r1, [r7, #4]
 800fe76:	4613      	mov	r3, r2
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	4413      	add	r3, r2
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	440b      	add	r3, r1
 800fe80:	3324      	adds	r3, #36	@ 0x24
 800fe82:	2201      	movs	r2, #1
 800fe84:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 fa2c 	bl	80102e4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800fe8c:	2300      	movs	r3, #0
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	2400009f 	.word	0x2400009f
 800fe9c:	2400009e 	.word	0x2400009e

0800fea0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	460b      	mov	r3, r1
 800feaa:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800feac:	4b26      	ldr	r3, [pc, #152]	@ (800ff48 <USBD_MSC_DeInit+0xa8>)
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	4619      	mov	r1, r3
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f003 fe87 	bl	8013bc6 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800feb8:	4b23      	ldr	r3, [pc, #140]	@ (800ff48 <USBD_MSC_DeInit+0xa8>)
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	f003 020f 	and.w	r2, r3, #15
 800fec0:	6879      	ldr	r1, [r7, #4]
 800fec2:	4613      	mov	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	4413      	add	r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	440b      	add	r3, r1
 800fecc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fed0:	2200      	movs	r2, #0
 800fed2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800fed4:	4b1d      	ldr	r3, [pc, #116]	@ (800ff4c <USBD_MSC_DeInit+0xac>)
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	4619      	mov	r1, r3
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f003 fe73 	bl	8013bc6 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800fee0:	4b1a      	ldr	r3, [pc, #104]	@ (800ff4c <USBD_MSC_DeInit+0xac>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	f003 020f 	and.w	r2, r3, #15
 800fee8:	6879      	ldr	r1, [r7, #4]
 800feea:	4613      	mov	r3, r2
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	4413      	add	r3, r2
 800fef0:	009b      	lsls	r3, r3, #2
 800fef2:	440b      	add	r3, r1
 800fef4:	3324      	adds	r3, #36	@ 0x24
 800fef6:	2200      	movs	r2, #0
 800fef8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	32b0      	adds	r2, #176	@ 0xb0
 800ff04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d018      	beq.n	800ff3e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f000 fa67 	bl	80103e0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	32b0      	adds	r2, #176	@ 0xb0
 800ff1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff20:	4618      	mov	r0, r3
 800ff22:	f003 ff7b 	bl	8013e1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	32b0      	adds	r2, #176	@ 0xb0
 800ff30:	2100      	movs	r1, #0
 800ff32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ff3e:	2300      	movs	r3, #0
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3708      	adds	r7, #8
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	2400009f 	.word	0x2400009f
 800ff4c:	2400009e 	.word	0x2400009e

0800ff50 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b086      	sub	sp, #24
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	32b0      	adds	r2, #176	@ 0xb0
 800ff64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff68:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d101      	bne.n	800ff7c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800ff78:	2303      	movs	r3, #3
 800ff7a:	e0e1      	b.n	8010140 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d053      	beq.n	8010030 <USBD_MSC_Setup+0xe0>
 800ff88:	2b20      	cmp	r3, #32
 800ff8a:	f040 80d1 	bne.w	8010130 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	785b      	ldrb	r3, [r3, #1]
 800ff92:	2bfe      	cmp	r3, #254	@ 0xfe
 800ff94:	d002      	beq.n	800ff9c <USBD_MSC_Setup+0x4c>
 800ff96:	2bff      	cmp	r3, #255	@ 0xff
 800ff98:	d02a      	beq.n	800fff0 <USBD_MSC_Setup+0xa0>
 800ff9a:	e041      	b.n	8010020 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	885b      	ldrh	r3, [r3, #2]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d11e      	bne.n	800ffe2 <USBD_MSC_Setup+0x92>
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	88db      	ldrh	r3, [r3, #6]
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d11a      	bne.n	800ffe2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	da15      	bge.n	800ffe2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	33b0      	adds	r3, #176	@ 0xb0
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	4413      	add	r3, r2
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	4798      	blx	r3
 800ffca:	4603      	mov	r3, r0
 800ffcc:	461a      	mov	r2, r3
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f003 f95d 	bl	8013298 <USBD_CtlSendData>
 800ffde:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ffe0:	e025      	b.n	801002e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800ffe2:	6839      	ldr	r1, [r7, #0]
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f003 f8da 	bl	801319e <USBD_CtlError>
            ret = USBD_FAIL;
 800ffea:	2303      	movs	r3, #3
 800ffec:	75fb      	strb	r3, [r7, #23]
          break;
 800ffee:	e01e      	b.n	801002e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	885b      	ldrh	r3, [r3, #2]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d10c      	bne.n	8010012 <USBD_MSC_Setup+0xc2>
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	88db      	ldrh	r3, [r3, #6]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d108      	bne.n	8010012 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010006:	2b00      	cmp	r3, #0
 8010008:	db03      	blt.n	8010012 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 f9b4 	bl	8010378 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010010:	e00d      	b.n	801002e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8010012:	6839      	ldr	r1, [r7, #0]
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f003 f8c2 	bl	801319e <USBD_CtlError>
            ret = USBD_FAIL;
 801001a:	2303      	movs	r3, #3
 801001c:	75fb      	strb	r3, [r7, #23]
          break;
 801001e:	e006      	b.n	801002e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8010020:	6839      	ldr	r1, [r7, #0]
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f003 f8bb 	bl	801319e <USBD_CtlError>
          ret = USBD_FAIL;
 8010028:	2303      	movs	r3, #3
 801002a:	75fb      	strb	r3, [r7, #23]
          break;
 801002c:	bf00      	nop
      }
      break;
 801002e:	e086      	b.n	801013e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	785b      	ldrb	r3, [r3, #1]
 8010034:	2b0b      	cmp	r3, #11
 8010036:	d872      	bhi.n	801011e <USBD_MSC_Setup+0x1ce>
 8010038:	a201      	add	r2, pc, #4	@ (adr r2, 8010040 <USBD_MSC_Setup+0xf0>)
 801003a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801003e:	bf00      	nop
 8010040:	08010071 	.word	0x08010071
 8010044:	080100ed 	.word	0x080100ed
 8010048:	0801011f 	.word	0x0801011f
 801004c:	0801011f 	.word	0x0801011f
 8010050:	0801011f 	.word	0x0801011f
 8010054:	0801011f 	.word	0x0801011f
 8010058:	0801011f 	.word	0x0801011f
 801005c:	0801011f 	.word	0x0801011f
 8010060:	0801011f 	.word	0x0801011f
 8010064:	0801011f 	.word	0x0801011f
 8010068:	0801009b 	.word	0x0801009b
 801006c:	080100c5 	.word	0x080100c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010076:	b2db      	uxtb	r3, r3
 8010078:	2b03      	cmp	r3, #3
 801007a:	d107      	bne.n	801008c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801007c:	f107 030e 	add.w	r3, r7, #14
 8010080:	2202      	movs	r2, #2
 8010082:	4619      	mov	r1, r3
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f003 f907 	bl	8013298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801008a:	e050      	b.n	801012e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801008c:	6839      	ldr	r1, [r7, #0]
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f003 f885 	bl	801319e <USBD_CtlError>
            ret = USBD_FAIL;
 8010094:	2303      	movs	r3, #3
 8010096:	75fb      	strb	r3, [r7, #23]
          break;
 8010098:	e049      	b.n	801012e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	2b03      	cmp	r3, #3
 80100a4:	d107      	bne.n	80100b6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	3304      	adds	r3, #4
 80100aa:	2201      	movs	r2, #1
 80100ac:	4619      	mov	r1, r3
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f003 f8f2 	bl	8013298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80100b4:	e03b      	b.n	801012e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f003 f870 	bl	801319e <USBD_CtlError>
            ret = USBD_FAIL;
 80100be:	2303      	movs	r3, #3
 80100c0:	75fb      	strb	r3, [r7, #23]
          break;
 80100c2:	e034      	b.n	801012e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	2b03      	cmp	r3, #3
 80100ce:	d106      	bne.n	80100de <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	885b      	ldrh	r3, [r3, #2]
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	461a      	mov	r2, r3
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80100dc:	e027      	b.n	801012e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80100de:	6839      	ldr	r1, [r7, #0]
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f003 f85c 	bl	801319e <USBD_CtlError>
            ret = USBD_FAIL;
 80100e6:	2303      	movs	r3, #3
 80100e8:	75fb      	strb	r3, [r7, #23]
          break;
 80100ea:	e020      	b.n	801012e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	2b03      	cmp	r3, #3
 80100f6:	d119      	bne.n	801012c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	885b      	ldrh	r3, [r3, #2]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d115      	bne.n	801012c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	889b      	ldrh	r3, [r3, #4]
 8010104:	b2db      	uxtb	r3, r3
 8010106:	4619      	mov	r1, r3
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f003 fd7b 	bl	8013c04 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	889b      	ldrh	r3, [r3, #4]
 8010112:	b2db      	uxtb	r3, r3
 8010114:	4619      	mov	r1, r3
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 fb2e 	bl	8010778 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801011c:	e006      	b.n	801012c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 801011e:	6839      	ldr	r1, [r7, #0]
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f003 f83c 	bl	801319e <USBD_CtlError>
          ret = USBD_FAIL;
 8010126:	2303      	movs	r3, #3
 8010128:	75fb      	strb	r3, [r7, #23]
          break;
 801012a:	e000      	b.n	801012e <USBD_MSC_Setup+0x1de>
          break;
 801012c:	bf00      	nop
      }
      break;
 801012e:	e006      	b.n	801013e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8010130:	6839      	ldr	r1, [r7, #0]
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f003 f833 	bl	801319e <USBD_CtlError>
      ret = USBD_FAIL;
 8010138:	2303      	movs	r3, #3
 801013a:	75fb      	strb	r3, [r7, #23]
      break;
 801013c:	bf00      	nop
  }

  return (uint8_t)ret;
 801013e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010140:	4618      	mov	r0, r3
 8010142:	3718      	adds	r7, #24
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	460b      	mov	r3, r1
 8010152:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8010154:	78fb      	ldrb	r3, [r7, #3]
 8010156:	4619      	mov	r1, r3
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f000 f959 	bl	8010410 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801015e:	2300      	movs	r3, #0
}
 8010160:	4618      	mov	r0, r3
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	460b      	mov	r3, r1
 8010172:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8010174:	78fb      	ldrb	r3, [r7, #3]
 8010176:	4619      	mov	r1, r3
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 f983 	bl	8010484 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8010190:	2181      	movs	r1, #129	@ 0x81
 8010192:	4812      	ldr	r0, [pc, #72]	@ (80101dc <USBD_MSC_GetHSCfgDesc+0x54>)
 8010194:	f002 f9a4 	bl	80124e0 <USBD_GetEpDesc>
 8010198:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801019a:	2101      	movs	r1, #1
 801019c:	480f      	ldr	r0, [pc, #60]	@ (80101dc <USBD_MSC_GetHSCfgDesc+0x54>)
 801019e:	f002 f99f 	bl	80124e0 <USBD_GetEpDesc>
 80101a2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d006      	beq.n	80101b8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2200      	movs	r2, #0
 80101ae:	711a      	strb	r2, [r3, #4]
 80101b0:	2200      	movs	r2, #0
 80101b2:	f042 0202 	orr.w	r2, r2, #2
 80101b6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d006      	beq.n	80101cc <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	2200      	movs	r2, #0
 80101c2:	711a      	strb	r2, [r3, #4]
 80101c4:	2200      	movs	r2, #0
 80101c6:	f042 0202 	orr.w	r2, r2, #2
 80101ca:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2220      	movs	r2, #32
 80101d0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80101d2:	4b02      	ldr	r3, [pc, #8]	@ (80101dc <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3710      	adds	r7, #16
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	24000074 	.word	0x24000074

080101e0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80101e8:	2181      	movs	r1, #129	@ 0x81
 80101ea:	4812      	ldr	r0, [pc, #72]	@ (8010234 <USBD_MSC_GetFSCfgDesc+0x54>)
 80101ec:	f002 f978 	bl	80124e0 <USBD_GetEpDesc>
 80101f0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80101f2:	2101      	movs	r1, #1
 80101f4:	480f      	ldr	r0, [pc, #60]	@ (8010234 <USBD_MSC_GetFSCfgDesc+0x54>)
 80101f6:	f002 f973 	bl	80124e0 <USBD_GetEpDesc>
 80101fa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d006      	beq.n	8010210 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2200      	movs	r2, #0
 8010206:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801020a:	711a      	strb	r2, [r3, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d006      	beq.n	8010224 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	2200      	movs	r2, #0
 801021a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801021e:	711a      	strb	r2, [r3, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2220      	movs	r2, #32
 8010228:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801022a:	4b02      	ldr	r3, [pc, #8]	@ (8010234 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 801022c:	4618      	mov	r0, r3
 801022e:	3710      	adds	r7, #16
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	24000074 	.word	0x24000074

08010238 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8010240:	2181      	movs	r1, #129	@ 0x81
 8010242:	4812      	ldr	r0, [pc, #72]	@ (801028c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8010244:	f002 f94c 	bl	80124e0 <USBD_GetEpDesc>
 8010248:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801024a:	2101      	movs	r1, #1
 801024c:	480f      	ldr	r0, [pc, #60]	@ (801028c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801024e:	f002 f947 	bl	80124e0 <USBD_GetEpDesc>
 8010252:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d006      	beq.n	8010268 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2200      	movs	r2, #0
 801025e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010262:	711a      	strb	r2, [r3, #4]
 8010264:	2200      	movs	r2, #0
 8010266:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d006      	beq.n	801027c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	2200      	movs	r2, #0
 8010272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010276:	711a      	strb	r2, [r3, #4]
 8010278:	2200      	movs	r2, #0
 801027a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2220      	movs	r2, #32
 8010280:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8010282:	4b02      	ldr	r3, [pc, #8]	@ (801028c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8010284:	4618      	mov	r0, r3
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	24000074 	.word	0x24000074

08010290 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	220a      	movs	r2, #10
 801029c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801029e:	4b03      	ldr	r3, [pc, #12]	@ (80102ac <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	370c      	adds	r7, #12
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr
 80102ac:	24000094 	.word	0x24000094

080102b0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d101      	bne.n	80102c4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80102c0:	2303      	movs	r3, #3
 80102c2:	e009      	b.n	80102d8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80102ca:	687a      	ldr	r2, [r7, #4]
 80102cc:	33b0      	adds	r3, #176	@ 0xb0
 80102ce:	009b      	lsls	r3, r3, #2
 80102d0:	4413      	add	r3, r2
 80102d2:	683a      	ldr	r2, [r7, #0]
 80102d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80102d6:	2300      	movs	r3, #0
}
 80102d8:	4618      	mov	r0, r3
 80102da:	370c      	adds	r7, #12
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr

080102e4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	32b0      	adds	r2, #176	@ 0xb0
 80102f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102fa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d032      	beq.n	8010368 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2200      	movs	r2, #0
 8010306:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2200      	movs	r2, #0
 801030c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2200      	movs	r2, #0
 8010312:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2200      	movs	r2, #0
 801031a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2200      	movs	r2, #0
 8010322:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801032c:	687a      	ldr	r2, [r7, #4]
 801032e:	33b0      	adds	r3, #176	@ 0xb0
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	4413      	add	r3, r2
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2000      	movs	r0, #0
 801033a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 801033c:	4b0c      	ldr	r3, [pc, #48]	@ (8010370 <MSC_BOT_Init+0x8c>)
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	4619      	mov	r1, r3
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f003 fc5e 	bl	8013c04 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8010348:	4b0a      	ldr	r3, [pc, #40]	@ (8010374 <MSC_BOT_Init+0x90>)
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	4619      	mov	r1, r3
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f003 fc58 	bl	8013c04 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8010354:	4b06      	ldr	r3, [pc, #24]	@ (8010370 <MSC_BOT_Init+0x8c>)
 8010356:	7819      	ldrb	r1, [r3, #0]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 801035e:	231f      	movs	r3, #31
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f003 fd18 	bl	8013d96 <USBD_LL_PrepareReceive>
 8010366:	e000      	b.n	801036a <MSC_BOT_Init+0x86>
    return;
 8010368:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801036a:	3710      	adds	r7, #16
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}
 8010370:	2400009f 	.word	0x2400009f
 8010374:	2400009e 	.word	0x2400009e

08010378 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	32b0      	adds	r2, #176	@ 0xb0
 801038a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801038e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d01b      	beq.n	80103ce <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	2200      	movs	r2, #0
 801039a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2201      	movs	r2, #1
 80103a0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80103a2:	4b0d      	ldr	r3, [pc, #52]	@ (80103d8 <MSC_BOT_Reset+0x60>)
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	4619      	mov	r1, r3
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f003 fc69 	bl	8013c80 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80103ae:	4b0b      	ldr	r3, [pc, #44]	@ (80103dc <MSC_BOT_Reset+0x64>)
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	4619      	mov	r1, r3
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f003 fc63 	bl	8013c80 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80103ba:	4b08      	ldr	r3, [pc, #32]	@ (80103dc <MSC_BOT_Reset+0x64>)
 80103bc:	7819      	ldrb	r1, [r3, #0]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80103c4:	231f      	movs	r3, #31
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f003 fce5 	bl	8013d96 <USBD_LL_PrepareReceive>
 80103cc:	e000      	b.n	80103d0 <MSC_BOT_Reset+0x58>
    return;
 80103ce:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	2400009e 	.word	0x2400009e
 80103dc:	2400009f 	.word	0x2400009f

080103e0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b085      	sub	sp, #20
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	32b0      	adds	r2, #176	@ 0xb0
 80103f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103f6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d002      	beq.n	8010404 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2200      	movs	r2, #0
 8010402:	721a      	strb	r2, [r3, #8]
  }
}
 8010404:	bf00      	nop
 8010406:	3714      	adds	r7, #20
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr

08010410 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	460b      	mov	r3, r1
 801041a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	32b0      	adds	r2, #176	@ 0xb0
 8010426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801042a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d020      	beq.n	8010474 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	7a1b      	ldrb	r3, [r3, #8]
 8010436:	2b02      	cmp	r3, #2
 8010438:	d005      	beq.n	8010446 <MSC_BOT_DataIn+0x36>
 801043a:	2b02      	cmp	r3, #2
 801043c:	db1c      	blt.n	8010478 <MSC_BOT_DataIn+0x68>
 801043e:	3b03      	subs	r3, #3
 8010440:	2b01      	cmp	r3, #1
 8010442:	d819      	bhi.n	8010478 <MSC_BOT_DataIn+0x68>
 8010444:	e011      	b.n	801046a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8010452:	461a      	mov	r2, r3
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 f9c9 	bl	80107ec <SCSI_ProcessCmd>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	da0d      	bge.n	801047c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010460:	2101      	movs	r1, #1
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 f90c 	bl	8010680 <MSC_BOT_SendCSW>
      }
      break;
 8010468:	e008      	b.n	801047c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801046a:	2100      	movs	r1, #0
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f000 f907 	bl	8010680 <MSC_BOT_SendCSW>
      break;
 8010472:	e004      	b.n	801047e <MSC_BOT_DataIn+0x6e>
    return;
 8010474:	bf00      	nop
 8010476:	e002      	b.n	801047e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8010478:	bf00      	nop
 801047a:	e000      	b.n	801047e <MSC_BOT_DataIn+0x6e>
      break;
 801047c:	bf00      	nop
  }
}
 801047e:	3710      	adds	r7, #16
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	460b      	mov	r3, r1
 801048e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	32b0      	adds	r2, #176	@ 0xb0
 801049a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801049e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d01c      	beq.n	80104e0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	7a1b      	ldrb	r3, [r3, #8]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d002      	beq.n	80104b4 <MSC_BOT_DataOut+0x30>
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d004      	beq.n	80104bc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80104b2:	e018      	b.n	80104e6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 f819 	bl	80104ec <MSC_BOT_CBW_Decode>
      break;
 80104ba:	e014      	b.n	80104e6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80104c8:	461a      	mov	r2, r3
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 f98e 	bl	80107ec <SCSI_ProcessCmd>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	da06      	bge.n	80104e4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80104d6:	2101      	movs	r1, #1
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 f8d1 	bl	8010680 <MSC_BOT_SendCSW>
      break;
 80104de:	e001      	b.n	80104e4 <MSC_BOT_DataOut+0x60>
    return;
 80104e0:	bf00      	nop
 80104e2:	e000      	b.n	80104e6 <MSC_BOT_DataOut+0x62>
      break;
 80104e4:	bf00      	nop
  }
}
 80104e6:	3710      	adds	r7, #16
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	32b0      	adds	r2, #176	@ 0xb0
 80104fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010502:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d079      	beq.n	80105fe <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8010522:	4b3a      	ldr	r3, [pc, #232]	@ (801060c <MSC_BOT_CBW_Decode+0x120>)
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	4619      	mov	r1, r3
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f003 fc55 	bl	8013dd8 <USBD_LL_GetRxDataSize>
 801052e:	4603      	mov	r3, r0
 8010530:	2b1f      	cmp	r3, #31
 8010532:	d114      	bne.n	801055e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801053a:	4a35      	ldr	r2, [pc, #212]	@ (8010610 <MSC_BOT_CBW_Decode+0x124>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d10e      	bne.n	801055e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010546:	2b01      	cmp	r3, #1
 8010548:	d809      	bhi.n	801055e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8010550:	2b00      	cmp	r3, #0
 8010552:	d004      	beq.n	801055e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801055a:	2b10      	cmp	r3, #16
 801055c:	d90e      	bls.n	801057c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010564:	2320      	movs	r3, #32
 8010566:	2205      	movs	r2, #5
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f000 fe54 	bl	8011216 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2202      	movs	r2, #2
 8010572:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f000 f8bd 	bl	80106f4 <MSC_BOT_Abort>
 801057a:	e043      	b.n	8010604 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8010588:	461a      	mov	r2, r3
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f000 f92e 	bl	80107ec <SCSI_ProcessCmd>
 8010590:	4603      	mov	r3, r0
 8010592:	2b00      	cmp	r3, #0
 8010594:	da0c      	bge.n	80105b0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	7a1b      	ldrb	r3, [r3, #8]
 801059a:	2b05      	cmp	r3, #5
 801059c:	d104      	bne.n	80105a8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801059e:	2101      	movs	r1, #1
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 f86d 	bl	8010680 <MSC_BOT_SendCSW>
 80105a6:	e02d      	b.n	8010604 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 f8a3 	bl	80106f4 <MSC_BOT_Abort>
 80105ae:	e029      	b.n	8010604 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	7a1b      	ldrb	r3, [r3, #8]
 80105b4:	2b02      	cmp	r3, #2
 80105b6:	d024      	beq.n	8010602 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d020      	beq.n	8010602 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80105c4:	2b03      	cmp	r3, #3
 80105c6:	d01c      	beq.n	8010602 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d009      	beq.n	80105e4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f103 0110 	add.w	r1, r3, #16
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	461a      	mov	r2, r3
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 f819 	bl	8010614 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80105e2:	e00f      	b.n	8010604 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d104      	bne.n	80105f6 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80105ec:	2100      	movs	r1, #0
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 f846 	bl	8010680 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80105f4:	e006      	b.n	8010604 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 f87c 	bl	80106f4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80105fc:	e002      	b.n	8010604 <MSC_BOT_CBW_Decode+0x118>
    return;
 80105fe:	bf00      	nop
 8010600:	e000      	b.n	8010604 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8010602:	bf00      	nop
    }
  }
}
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	2400009f 	.word	0x2400009f
 8010610:	43425355 	.word	0x43425355

08010614 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	32b0      	adds	r2, #176	@ 0xb0
 801062a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801062e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d01e      	beq.n	8010674 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801063c:	687a      	ldr	r2, [r7, #4]
 801063e:	4293      	cmp	r3, r2
 8010640:	bf28      	it	cs
 8010642:	4613      	movcs	r3, r2
 8010644:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	1ad2      	subs	r2, r2, r3
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	2200      	movs	r2, #0
 801065a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	2204      	movs	r2, #4
 8010662:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8010664:	4b05      	ldr	r3, [pc, #20]	@ (801067c <MSC_BOT_SendData+0x68>)
 8010666:	7819      	ldrb	r1, [r3, #0]
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	68ba      	ldr	r2, [r7, #8]
 801066c:	68f8      	ldr	r0, [r7, #12]
 801066e:	f003 fb71 	bl	8013d54 <USBD_LL_Transmit>
 8010672:	e000      	b.n	8010676 <MSC_BOT_SendData+0x62>
    return;
 8010674:	bf00      	nop
}
 8010676:	3718      	adds	r7, #24
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	2400009e 	.word	0x2400009e

08010680 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	460b      	mov	r3, r1
 801068a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	32b0      	adds	r2, #176	@ 0xb0
 8010696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801069a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d01d      	beq.n	80106de <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	4a10      	ldr	r2, [pc, #64]	@ (80106e8 <MSC_BOT_SendCSW+0x68>)
 80106a6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	78fa      	ldrb	r2, [r7, #3]
 80106ae:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2200      	movs	r2, #0
 80106b6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80106b8:	4b0c      	ldr	r3, [pc, #48]	@ (80106ec <MSC_BOT_SendCSW+0x6c>)
 80106ba:	7819      	ldrb	r1, [r3, #0]
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 80106c2:	230d      	movs	r3, #13
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f003 fb45 	bl	8013d54 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80106ca:	4b09      	ldr	r3, [pc, #36]	@ (80106f0 <MSC_BOT_SendCSW+0x70>)
 80106cc:	7819      	ldrb	r1, [r3, #0]
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80106d4:	231f      	movs	r3, #31
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f003 fb5d 	bl	8013d96 <USBD_LL_PrepareReceive>
 80106dc:	e000      	b.n	80106e0 <MSC_BOT_SendCSW+0x60>
    return;
 80106de:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80106e0:	3710      	adds	r7, #16
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	53425355 	.word	0x53425355
 80106ec:	2400009e 	.word	0x2400009e
 80106f0:	2400009f 	.word	0x2400009f

080106f4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	32b0      	adds	r2, #176	@ 0xb0
 8010706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801070a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d02a      	beq.n	8010768 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8010718:	2b00      	cmp	r3, #0
 801071a:	d10e      	bne.n	801073a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8010722:	2b00      	cmp	r3, #0
 8010724:	d009      	beq.n	801073a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801072a:	2b00      	cmp	r3, #0
 801072c:	d105      	bne.n	801073a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801072e:	4b10      	ldr	r3, [pc, #64]	@ (8010770 <MSC_BOT_Abort+0x7c>)
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	4619      	mov	r1, r3
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f003 fa84 	bl	8013c42 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801073a:	4b0e      	ldr	r3, [pc, #56]	@ (8010774 <MSC_BOT_Abort+0x80>)
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	4619      	mov	r1, r3
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f003 fa7e 	bl	8013c42 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	7a5b      	ldrb	r3, [r3, #9]
 801074a:	2b02      	cmp	r3, #2
 801074c:	d10d      	bne.n	801076a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801074e:	4b09      	ldr	r3, [pc, #36]	@ (8010774 <MSC_BOT_Abort+0x80>)
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	4619      	mov	r1, r3
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f003 fa74 	bl	8013c42 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801075a:	4b05      	ldr	r3, [pc, #20]	@ (8010770 <MSC_BOT_Abort+0x7c>)
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	4619      	mov	r1, r3
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f003 fa6e 	bl	8013c42 <USBD_LL_StallEP>
 8010766:	e000      	b.n	801076a <MSC_BOT_Abort+0x76>
    return;
 8010768:	bf00      	nop
  }
}
 801076a:	3710      	adds	r7, #16
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	2400009f 	.word	0x2400009f
 8010774:	2400009e 	.word	0x2400009e

08010778 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	460b      	mov	r3, r1
 8010782:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	32b0      	adds	r2, #176	@ 0xb0
 801078e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010792:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d01d      	beq.n	80107d6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	7a5b      	ldrb	r3, [r3, #9]
 801079e:	2b02      	cmp	r3, #2
 80107a0:	d10c      	bne.n	80107bc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80107a2:	4b10      	ldr	r3, [pc, #64]	@ (80107e4 <MSC_BOT_CplClrFeature+0x6c>)
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	4619      	mov	r1, r3
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f003 fa4a 	bl	8013c42 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80107ae:	4b0e      	ldr	r3, [pc, #56]	@ (80107e8 <MSC_BOT_CplClrFeature+0x70>)
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	4619      	mov	r1, r3
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f003 fa44 	bl	8013c42 <USBD_LL_StallEP>
 80107ba:	e00f      	b.n	80107dc <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80107bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	da0a      	bge.n	80107da <MSC_BOT_CplClrFeature+0x62>
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	7a5b      	ldrb	r3, [r3, #9]
 80107c8:	2b01      	cmp	r3, #1
 80107ca:	d006      	beq.n	80107da <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80107cc:	2101      	movs	r1, #1
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f7ff ff56 	bl	8010680 <MSC_BOT_SendCSW>
 80107d4:	e002      	b.n	80107dc <MSC_BOT_CplClrFeature+0x64>
    return;
 80107d6:	bf00      	nop
 80107d8:	e000      	b.n	80107dc <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80107da:	bf00      	nop
  }
}
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	2400009e 	.word	0x2400009e
 80107e8:	2400009f 	.word	0x2400009f

080107ec <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b086      	sub	sp, #24
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	460b      	mov	r3, r1
 80107f6:	607a      	str	r2, [r7, #4]
 80107f8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	32b0      	adds	r2, #176	@ 0xb0
 8010804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010808:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d102      	bne.n	8010816 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8010810:	f04f 33ff 	mov.w	r3, #4294967295
 8010814:	e168      	b.n	8010ae8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	2baa      	cmp	r3, #170	@ 0xaa
 801081c:	f000 8144 	beq.w	8010aa8 <SCSI_ProcessCmd+0x2bc>
 8010820:	2baa      	cmp	r3, #170	@ 0xaa
 8010822:	f300 8153 	bgt.w	8010acc <SCSI_ProcessCmd+0x2e0>
 8010826:	2ba8      	cmp	r3, #168	@ 0xa8
 8010828:	f000 812c 	beq.w	8010a84 <SCSI_ProcessCmd+0x298>
 801082c:	2ba8      	cmp	r3, #168	@ 0xa8
 801082e:	f300 814d 	bgt.w	8010acc <SCSI_ProcessCmd+0x2e0>
 8010832:	2b5a      	cmp	r3, #90	@ 0x5a
 8010834:	f300 80c0 	bgt.w	80109b8 <SCSI_ProcessCmd+0x1cc>
 8010838:	2b00      	cmp	r3, #0
 801083a:	f2c0 8147 	blt.w	8010acc <SCSI_ProcessCmd+0x2e0>
 801083e:	2b5a      	cmp	r3, #90	@ 0x5a
 8010840:	f200 8144 	bhi.w	8010acc <SCSI_ProcessCmd+0x2e0>
 8010844:	a201      	add	r2, pc, #4	@ (adr r2, 801084c <SCSI_ProcessCmd+0x60>)
 8010846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801084a:	bf00      	nop
 801084c:	080109bf 	.word	0x080109bf
 8010850:	08010acd 	.word	0x08010acd
 8010854:	08010acd 	.word	0x08010acd
 8010858:	080109d1 	.word	0x080109d1
 801085c:	08010acd 	.word	0x08010acd
 8010860:	08010acd 	.word	0x08010acd
 8010864:	08010acd 	.word	0x08010acd
 8010868:	08010acd 	.word	0x08010acd
 801086c:	08010acd 	.word	0x08010acd
 8010870:	08010acd 	.word	0x08010acd
 8010874:	08010acd 	.word	0x08010acd
 8010878:	08010acd 	.word	0x08010acd
 801087c:	08010acd 	.word	0x08010acd
 8010880:	08010acd 	.word	0x08010acd
 8010884:	08010acd 	.word	0x08010acd
 8010888:	08010acd 	.word	0x08010acd
 801088c:	08010acd 	.word	0x08010acd
 8010890:	08010acd 	.word	0x08010acd
 8010894:	080109e3 	.word	0x080109e3
 8010898:	08010acd 	.word	0x08010acd
 801089c:	08010acd 	.word	0x08010acd
 80108a0:	08010acd 	.word	0x08010acd
 80108a4:	08010acd 	.word	0x08010acd
 80108a8:	08010acd 	.word	0x08010acd
 80108ac:	08010acd 	.word	0x08010acd
 80108b0:	08010acd 	.word	0x08010acd
 80108b4:	08010a19 	.word	0x08010a19
 80108b8:	080109f5 	.word	0x080109f5
 80108bc:	08010acd 	.word	0x08010acd
 80108c0:	08010acd 	.word	0x08010acd
 80108c4:	08010a07 	.word	0x08010a07
 80108c8:	08010acd 	.word	0x08010acd
 80108cc:	08010acd 	.word	0x08010acd
 80108d0:	08010acd 	.word	0x08010acd
 80108d4:	08010acd 	.word	0x08010acd
 80108d8:	08010a3d 	.word	0x08010a3d
 80108dc:	08010acd 	.word	0x08010acd
 80108e0:	08010a4f 	.word	0x08010a4f
 80108e4:	08010acd 	.word	0x08010acd
 80108e8:	08010acd 	.word	0x08010acd
 80108ec:	08010a73 	.word	0x08010a73
 80108f0:	08010acd 	.word	0x08010acd
 80108f4:	08010a97 	.word	0x08010a97
 80108f8:	08010acd 	.word	0x08010acd
 80108fc:	08010acd 	.word	0x08010acd
 8010900:	08010acd 	.word	0x08010acd
 8010904:	08010acd 	.word	0x08010acd
 8010908:	08010abb 	.word	0x08010abb
 801090c:	08010acd 	.word	0x08010acd
 8010910:	08010acd 	.word	0x08010acd
 8010914:	08010acd 	.word	0x08010acd
 8010918:	08010acd 	.word	0x08010acd
 801091c:	08010acd 	.word	0x08010acd
 8010920:	08010acd 	.word	0x08010acd
 8010924:	08010acd 	.word	0x08010acd
 8010928:	08010acd 	.word	0x08010acd
 801092c:	08010acd 	.word	0x08010acd
 8010930:	08010acd 	.word	0x08010acd
 8010934:	08010acd 	.word	0x08010acd
 8010938:	08010acd 	.word	0x08010acd
 801093c:	08010acd 	.word	0x08010acd
 8010940:	08010acd 	.word	0x08010acd
 8010944:	08010acd 	.word	0x08010acd
 8010948:	08010acd 	.word	0x08010acd
 801094c:	08010acd 	.word	0x08010acd
 8010950:	08010acd 	.word	0x08010acd
 8010954:	08010acd 	.word	0x08010acd
 8010958:	08010acd 	.word	0x08010acd
 801095c:	08010acd 	.word	0x08010acd
 8010960:	08010acd 	.word	0x08010acd
 8010964:	08010acd 	.word	0x08010acd
 8010968:	08010acd 	.word	0x08010acd
 801096c:	08010acd 	.word	0x08010acd
 8010970:	08010acd 	.word	0x08010acd
 8010974:	08010acd 	.word	0x08010acd
 8010978:	08010acd 	.word	0x08010acd
 801097c:	08010acd 	.word	0x08010acd
 8010980:	08010acd 	.word	0x08010acd
 8010984:	08010acd 	.word	0x08010acd
 8010988:	08010acd 	.word	0x08010acd
 801098c:	08010acd 	.word	0x08010acd
 8010990:	08010acd 	.word	0x08010acd
 8010994:	08010acd 	.word	0x08010acd
 8010998:	08010acd 	.word	0x08010acd
 801099c:	08010acd 	.word	0x08010acd
 80109a0:	08010acd 	.word	0x08010acd
 80109a4:	08010acd 	.word	0x08010acd
 80109a8:	08010acd 	.word	0x08010acd
 80109ac:	08010acd 	.word	0x08010acd
 80109b0:	08010acd 	.word	0x08010acd
 80109b4:	08010a2b 	.word	0x08010a2b
 80109b8:	2b9e      	cmp	r3, #158	@ 0x9e
 80109ba:	d051      	beq.n	8010a60 <SCSI_ProcessCmd+0x274>
 80109bc:	e086      	b.n	8010acc <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80109be:	7afb      	ldrb	r3, [r7, #11]
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	4619      	mov	r1, r3
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f000 f893 	bl	8010af0 <SCSI_TestUnitReady>
 80109ca:	4603      	mov	r3, r0
 80109cc:	75fb      	strb	r3, [r7, #23]
      break;
 80109ce:	e089      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80109d0:	7afb      	ldrb	r3, [r7, #11]
 80109d2:	687a      	ldr	r2, [r7, #4]
 80109d4:	4619      	mov	r1, r3
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f000 fb9a 	bl	8011110 <SCSI_RequestSense>
 80109dc:	4603      	mov	r3, r0
 80109de:	75fb      	strb	r3, [r7, #23]
      break;
 80109e0:	e080      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80109e2:	7afb      	ldrb	r3, [r7, #11]
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	4619      	mov	r1, r3
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f000 f8db 	bl	8010ba4 <SCSI_Inquiry>
 80109ee:	4603      	mov	r3, r0
 80109f0:	75fb      	strb	r3, [r7, #23]
      break;
 80109f2:	e077      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80109f4:	7afb      	ldrb	r3, [r7, #11]
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	4619      	mov	r1, r3
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	f000 fc56 	bl	80112ac <SCSI_StartStopUnit>
 8010a00:	4603      	mov	r3, r0
 8010a02:	75fb      	strb	r3, [r7, #23]
      break;
 8010a04:	e06e      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8010a06:	7afb      	ldrb	r3, [r7, #11]
 8010a08:	687a      	ldr	r2, [r7, #4]
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	f000 fca2 	bl	8011356 <SCSI_AllowPreventRemovable>
 8010a12:	4603      	mov	r3, r0
 8010a14:	75fb      	strb	r3, [r7, #23]
      break;
 8010a16:	e065      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8010a18:	7afb      	ldrb	r3, [r7, #11]
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	f000 faea 	bl	8010ff8 <SCSI_ModeSense6>
 8010a24:	4603      	mov	r3, r0
 8010a26:	75fb      	strb	r3, [r7, #23]
      break;
 8010a28:	e05c      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8010a2a:	7afb      	ldrb	r3, [r7, #11]
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	4619      	mov	r1, r3
 8010a30:	68f8      	ldr	r0, [r7, #12]
 8010a32:	f000 fb27 	bl	8011084 <SCSI_ModeSense10>
 8010a36:	4603      	mov	r3, r0
 8010a38:	75fb      	strb	r3, [r7, #23]
      break;
 8010a3a:	e053      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8010a3c:	7afb      	ldrb	r3, [r7, #11]
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	4619      	mov	r1, r3
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	f000 fa5c 	bl	8010f00 <SCSI_ReadFormatCapacity>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8010a4c:	e04a      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8010a4e:	7afb      	ldrb	r3, [r7, #11]
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	4619      	mov	r1, r3
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f000 f921 	bl	8010c9c <SCSI_ReadCapacity10>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8010a5e:	e041      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8010a60:	7afb      	ldrb	r3, [r7, #11]
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	4619      	mov	r1, r3
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f000 f996 	bl	8010d98 <SCSI_ReadCapacity16>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8010a70:	e038      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8010a72:	7afb      	ldrb	r3, [r7, #11]
 8010a74:	687a      	ldr	r2, [r7, #4]
 8010a76:	4619      	mov	r1, r3
 8010a78:	68f8      	ldr	r0, [r7, #12]
 8010a7a:	f000 fc99 	bl	80113b0 <SCSI_Read10>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	75fb      	strb	r3, [r7, #23]
      break;
 8010a82:	e02f      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8010a84:	7afb      	ldrb	r3, [r7, #11]
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	4619      	mov	r1, r3
 8010a8a:	68f8      	ldr	r0, [r7, #12]
 8010a8c:	f000 fd3a 	bl	8011504 <SCSI_Read12>
 8010a90:	4603      	mov	r3, r0
 8010a92:	75fb      	strb	r3, [r7, #23]
      break;
 8010a94:	e026      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8010a96:	7afb      	ldrb	r3, [r7, #11]
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	68f8      	ldr	r0, [r7, #12]
 8010a9e:	f000 fde5 	bl	801166c <SCSI_Write10>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8010aa6:	e01d      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8010aa8:	7afb      	ldrb	r3, [r7, #11]
 8010aaa:	687a      	ldr	r2, [r7, #4]
 8010aac:	4619      	mov	r1, r3
 8010aae:	68f8      	ldr	r0, [r7, #12]
 8010ab0:	f000 feb2 	bl	8011818 <SCSI_Write12>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8010ab8:	e014      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8010aba:	7afb      	ldrb	r3, [r7, #11]
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	4619      	mov	r1, r3
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f000 ff8f 	bl	80119e4 <SCSI_Verify10>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8010aca:	e00b      	b.n	8010ae4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8010acc:	7af9      	ldrb	r1, [r7, #11]
 8010ace:	2320      	movs	r3, #32
 8010ad0:	2205      	movs	r2, #5
 8010ad2:	68f8      	ldr	r0, [r7, #12]
 8010ad4:	f000 fb9f 	bl	8011216 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	2202      	movs	r2, #2
 8010adc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8010ade:	23ff      	movs	r3, #255	@ 0xff
 8010ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8010ae2:	bf00      	nop
  }

  return ret;
 8010ae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3718      	adds	r7, #24
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b086      	sub	sp, #24
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	460b      	mov	r3, r1
 8010afa:	607a      	str	r2, [r7, #4]
 8010afc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	32b0      	adds	r2, #176	@ 0xb0
 8010b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b0c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d102      	bne.n	8010b1a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8010b14:	f04f 33ff 	mov.w	r3, #4294967295
 8010b18:	e03f      	b.n	8010b9a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8010b1a:	697b      	ldr	r3, [r7, #20]
 8010b1c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00a      	beq.n	8010b3a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010b2a:	2320      	movs	r3, #32
 8010b2c:	2205      	movs	r2, #5
 8010b2e:	68f8      	ldr	r0, [r7, #12]
 8010b30:	f000 fb71 	bl	8011216 <SCSI_SenseCode>

    return -1;
 8010b34:	f04f 33ff 	mov.w	r3, #4294967295
 8010b38:	e02f      	b.n	8010b9a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8010b40:	2b02      	cmp	r3, #2
 8010b42:	d10b      	bne.n	8010b5c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010b44:	7af9      	ldrb	r1, [r7, #11]
 8010b46:	233a      	movs	r3, #58	@ 0x3a
 8010b48:	2202      	movs	r2, #2
 8010b4a:	68f8      	ldr	r0, [r7, #12]
 8010b4c:	f000 fb63 	bl	8011216 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	2205      	movs	r2, #5
 8010b54:	721a      	strb	r2, [r3, #8]
    return -1;
 8010b56:	f04f 33ff 	mov.w	r3, #4294967295
 8010b5a:	e01e      	b.n	8010b9a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010b62:	68fa      	ldr	r2, [r7, #12]
 8010b64:	33b0      	adds	r3, #176	@ 0xb0
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	4413      	add	r3, r2
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	689b      	ldr	r3, [r3, #8]
 8010b6e:	7afa      	ldrb	r2, [r7, #11]
 8010b70:	4610      	mov	r0, r2
 8010b72:	4798      	blx	r3
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d00b      	beq.n	8010b92 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010b7a:	7af9      	ldrb	r1, [r7, #11]
 8010b7c:	233a      	movs	r3, #58	@ 0x3a
 8010b7e:	2202      	movs	r2, #2
 8010b80:	68f8      	ldr	r0, [r7, #12]
 8010b82:	f000 fb48 	bl	8011216 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	2205      	movs	r2, #5
 8010b8a:	721a      	strb	r2, [r3, #8]

    return -1;
 8010b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b90:	e003      	b.n	8010b9a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	2200      	movs	r2, #0
 8010b96:	60da      	str	r2, [r3, #12]

  return 0;
 8010b98:	2300      	movs	r3, #0
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3718      	adds	r7, #24
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
	...

08010ba4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b088      	sub	sp, #32
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	460b      	mov	r3, r1
 8010bae:	607a      	str	r2, [r7, #4]
 8010bb0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	32b0      	adds	r2, #176	@ 0xb0
 8010bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bc0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d102      	bne.n	8010bce <SCSI_Inquiry+0x2a>
  {
    return -1;
 8010bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8010bcc:	e05e      	b.n	8010c8c <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d10a      	bne.n	8010bee <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010bd8:	69bb      	ldr	r3, [r7, #24]
 8010bda:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010bde:	2320      	movs	r3, #32
 8010be0:	2205      	movs	r2, #5
 8010be2:	68f8      	ldr	r0, [r7, #12]
 8010be4:	f000 fb17 	bl	8011216 <SCSI_SenseCode>
    return -1;
 8010be8:	f04f 33ff 	mov.w	r3, #4294967295
 8010bec:	e04e      	b.n	8010c8c <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	f003 0301 	and.w	r3, r3, #1
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d020      	beq.n	8010c3e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	3302      	adds	r3, #2
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d105      	bne.n	8010c12 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8010c06:	2206      	movs	r2, #6
 8010c08:	4922      	ldr	r1, [pc, #136]	@ (8010c94 <SCSI_Inquiry+0xf0>)
 8010c0a:	69b8      	ldr	r0, [r7, #24]
 8010c0c:	f001 f870 	bl	8011cf0 <SCSI_UpdateBotData>
 8010c10:	e03b      	b.n	8010c8a <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	3302      	adds	r3, #2
 8010c16:	781b      	ldrb	r3, [r3, #0]
 8010c18:	2b80      	cmp	r3, #128	@ 0x80
 8010c1a:	d105      	bne.n	8010c28 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8010c1c:	2208      	movs	r2, #8
 8010c1e:	491e      	ldr	r1, [pc, #120]	@ (8010c98 <SCSI_Inquiry+0xf4>)
 8010c20:	69b8      	ldr	r0, [r7, #24]
 8010c22:	f001 f865 	bl	8011cf0 <SCSI_UpdateBotData>
 8010c26:	e030      	b.n	8010c8a <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010c2e:	2324      	movs	r3, #36	@ 0x24
 8010c30:	2205      	movs	r2, #5
 8010c32:	68f8      	ldr	r0, [r7, #12]
 8010c34:	f000 faef 	bl	8011216 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8010c38:	f04f 33ff 	mov.w	r3, #4294967295
 8010c3c:	e026      	b.n	8010c8c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c44:	68fa      	ldr	r2, [r7, #12]
 8010c46:	33b0      	adds	r3, #176	@ 0xb0
 8010c48:	009b      	lsls	r3, r3, #2
 8010c4a:	4413      	add	r3, r2
 8010c4c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8010c4e:	69d9      	ldr	r1, [r3, #28]
 8010c50:	7afa      	ldrb	r2, [r7, #11]
 8010c52:	4613      	mov	r3, r2
 8010c54:	00db      	lsls	r3, r3, #3
 8010c56:	4413      	add	r3, r2
 8010c58:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8010c5a:	440b      	add	r3, r1
 8010c5c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	3304      	adds	r3, #4
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	3305      	adds	r3, #5
 8010c66:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	3304      	adds	r3, #4
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	461a      	mov	r2, r3
 8010c70:	8bfb      	ldrh	r3, [r7, #30]
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d303      	bcc.n	8010c7e <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	3304      	adds	r3, #4
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8010c7e:	8bfb      	ldrh	r3, [r7, #30]
 8010c80:	461a      	mov	r2, r3
 8010c82:	6979      	ldr	r1, [r7, #20]
 8010c84:	69b8      	ldr	r0, [r7, #24]
 8010c86:	f001 f833 	bl	8011cf0 <SCSI_UpdateBotData>
  }

  return 0;
 8010c8a:	2300      	movs	r3, #0
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3720      	adds	r7, #32
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	240000a0 	.word	0x240000a0
 8010c98:	240000a8 	.word	0x240000a8

08010c9c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b086      	sub	sp, #24
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	60f8      	str	r0, [r7, #12]
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	607a      	str	r2, [r7, #4]
 8010ca8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	32b0      	adds	r2, #176	@ 0xb0
 8010cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cb8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d102      	bne.n	8010cc6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8010cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8010cc4:	e064      	b.n	8010d90 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010ccc:	68fa      	ldr	r2, [r7, #12]
 8010cce:	33b0      	adds	r3, #176	@ 0xb0
 8010cd0:	009b      	lsls	r3, r3, #2
 8010cd2:	4413      	add	r3, r2
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	697a      	ldr	r2, [r7, #20]
 8010cda:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8010cde:	697a      	ldr	r2, [r7, #20]
 8010ce0:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8010ce4:	7af8      	ldrb	r0, [r7, #11]
 8010ce6:	4798      	blx	r3
 8010ce8:	4603      	mov	r3, r0
 8010cea:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010cec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d104      	bne.n	8010cfe <SCSI_ReadCapacity10+0x62>
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8010cfa:	2b02      	cmp	r3, #2
 8010cfc:	d108      	bne.n	8010d10 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010cfe:	7af9      	ldrb	r1, [r7, #11]
 8010d00:	233a      	movs	r3, #58	@ 0x3a
 8010d02:	2202      	movs	r2, #2
 8010d04:	68f8      	ldr	r0, [r7, #12]
 8010d06:	f000 fa86 	bl	8011216 <SCSI_SenseCode>
    return -1;
 8010d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d0e:	e03f      	b.n	8010d90 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010d16:	3b01      	subs	r3, #1
 8010d18:	0e1b      	lsrs	r3, r3, #24
 8010d1a:	b2da      	uxtb	r2, r3
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010d26:	3b01      	subs	r3, #1
 8010d28:	0c1b      	lsrs	r3, r3, #16
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010d36:	3b01      	subs	r3, #1
 8010d38:	0a1b      	lsrs	r3, r3, #8
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	b2da      	uxtb	r2, r3
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010d56:	161b      	asrs	r3, r3, #24
 8010d58:	b2da      	uxtb	r2, r3
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010d64:	141b      	asrs	r3, r3, #16
 8010d66:	b2da      	uxtb	r2, r3
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010d72:	0a1b      	lsrs	r3, r3, #8
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010d82:	b2da      	uxtb	r2, r3
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	2208      	movs	r2, #8
 8010d8c:	60da      	str	r2, [r3, #12]

  return 0;
 8010d8e:	2300      	movs	r3, #0

}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3718      	adds	r7, #24
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}

08010d98 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b088      	sub	sp, #32
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	460b      	mov	r3, r1
 8010da2:	607a      	str	r2, [r7, #4]
 8010da4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	32b0      	adds	r2, #176	@ 0xb0
 8010db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010db4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d102      	bne.n	8010dc2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8010dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010dc0:	e09a      	b.n	8010ef8 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010dc8:	68fa      	ldr	r2, [r7, #12]
 8010dca:	33b0      	adds	r3, #176	@ 0xb0
 8010dcc:	009b      	lsls	r3, r3, #2
 8010dce:	4413      	add	r3, r2
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	69ba      	ldr	r2, [r7, #24]
 8010dd6:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8010dda:	69ba      	ldr	r2, [r7, #24]
 8010ddc:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8010de0:	7af8      	ldrb	r0, [r7, #11]
 8010de2:	4798      	blx	r3
 8010de4:	4603      	mov	r3, r0
 8010de6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d104      	bne.n	8010dfa <SCSI_ReadCapacity16+0x62>
 8010df0:	69bb      	ldr	r3, [r7, #24]
 8010df2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8010df6:	2b02      	cmp	r3, #2
 8010df8:	d108      	bne.n	8010e0c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010dfa:	7af9      	ldrb	r1, [r7, #11]
 8010dfc:	233a      	movs	r3, #58	@ 0x3a
 8010dfe:	2202      	movs	r2, #2
 8010e00:	68f8      	ldr	r0, [r7, #12]
 8010e02:	f000 fa08 	bl	8011216 <SCSI_SenseCode>
    return -1;
 8010e06:	f04f 33ff 	mov.w	r3, #4294967295
 8010e0a:	e075      	b.n	8010ef8 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	330a      	adds	r3, #10
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	330b      	adds	r3, #11
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010e1c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	330c      	adds	r3, #12
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010e26:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	320d      	adds	r2, #13
 8010e2c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010e2e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010e34:	2300      	movs	r3, #0
 8010e36:	61fb      	str	r3, [r7, #28]
 8010e38:	e008      	b.n	8010e4c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8010e3a:	69ba      	ldr	r2, [r7, #24]
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	4413      	add	r3, r2
 8010e40:	3310      	adds	r3, #16
 8010e42:	2200      	movs	r2, #0
 8010e44:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	3301      	adds	r3, #1
 8010e4a:	61fb      	str	r3, [r7, #28]
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	69fa      	ldr	r2, [r7, #28]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d3f1      	bcc.n	8010e3a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	0e1b      	lsrs	r3, r3, #24
 8010e60:	b2da      	uxtb	r2, r3
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	0c1b      	lsrs	r3, r3, #16
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	0a1b      	lsrs	r3, r3, #8
 8010e80:	b2da      	uxtb	r2, r3
 8010e82:	69bb      	ldr	r3, [r7, #24]
 8010e84:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	3b01      	subs	r3, #1
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	69bb      	ldr	r3, [r7, #24]
 8010e94:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010e9c:	161b      	asrs	r3, r3, #24
 8010e9e:	b2da      	uxtb	r2, r3
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010eaa:	141b      	asrs	r3, r3, #16
 8010eac:	b2da      	uxtb	r2, r3
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010eb2:	69bb      	ldr	r3, [r7, #24]
 8010eb4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010eb8:	0a1b      	lsrs	r3, r3, #8
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	69bb      	ldr	r3, [r7, #24]
 8010ec0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8010ec2:	69bb      	ldr	r3, [r7, #24]
 8010ec4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010ec8:	b2da      	uxtb	r2, r3
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	330a      	adds	r3, #10
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	330b      	adds	r3, #11
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010ede:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	330c      	adds	r3, #12
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010ee8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	320d      	adds	r2, #13
 8010eee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010ef0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	60da      	str	r2, [r3, #12]

  return 0;
 8010ef6:	2300      	movs	r3, #0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3720      	adds	r7, #32
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b088      	sub	sp, #32
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	460b      	mov	r3, r1
 8010f0a:	607a      	str	r2, [r7, #4]
 8010f0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	32b0      	adds	r2, #176	@ 0xb0
 8010f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f1c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8010f1e:	69bb      	ldr	r3, [r7, #24]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d102      	bne.n	8010f2a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8010f24:	f04f 33ff 	mov.w	r3, #4294967295
 8010f28:	e061      	b.n	8010fee <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010f30:	68fa      	ldr	r2, [r7, #12]
 8010f32:	33b0      	adds	r3, #176	@ 0xb0
 8010f34:	009b      	lsls	r3, r3, #2
 8010f36:	4413      	add	r3, r2
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	f107 0214 	add.w	r2, r7, #20
 8010f40:	f107 0110 	add.w	r1, r7, #16
 8010f44:	7af8      	ldrb	r0, [r7, #11]
 8010f46:	4798      	blx	r3
 8010f48:	4603      	mov	r3, r0
 8010f4a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d104      	bne.n	8010f5e <SCSI_ReadFormatCapacity+0x5e>
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8010f5a:	2b02      	cmp	r3, #2
 8010f5c:	d108      	bne.n	8010f70 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010f5e:	7af9      	ldrb	r1, [r7, #11]
 8010f60:	233a      	movs	r3, #58	@ 0x3a
 8010f62:	2202      	movs	r2, #2
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f000 f956 	bl	8011216 <SCSI_SenseCode>
    return -1;
 8010f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f6e:	e03e      	b.n	8010fee <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8010f70:	2300      	movs	r3, #0
 8010f72:	83fb      	strh	r3, [r7, #30]
 8010f74:	e007      	b.n	8010f86 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8010f76:	8bfb      	ldrh	r3, [r7, #30]
 8010f78:	69ba      	ldr	r2, [r7, #24]
 8010f7a:	4413      	add	r3, r2
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8010f80:	8bfb      	ldrh	r3, [r7, #30]
 8010f82:	3301      	adds	r3, #1
 8010f84:	83fb      	strh	r3, [r7, #30]
 8010f86:	8bfb      	ldrh	r3, [r7, #30]
 8010f88:	2b0b      	cmp	r3, #11
 8010f8a:	d9f4      	bls.n	8010f76 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	2208      	movs	r2, #8
 8010f90:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	3b01      	subs	r3, #1
 8010f96:	0e1b      	lsrs	r3, r3, #24
 8010f98:	b2da      	uxtb	r2, r3
 8010f9a:	69bb      	ldr	r3, [r7, #24]
 8010f9c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	3b01      	subs	r3, #1
 8010fa2:	0c1b      	lsrs	r3, r3, #16
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	3b01      	subs	r3, #1
 8010fae:	0a1b      	lsrs	r3, r3, #8
 8010fb0:	b2da      	uxtb	r2, r3
 8010fb2:	69bb      	ldr	r3, [r7, #24]
 8010fb4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	b2db      	uxtb	r3, r3
 8010fba:	3b01      	subs	r3, #1
 8010fbc:	b2da      	uxtb	r2, r3
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8010fc2:	69bb      	ldr	r3, [r7, #24]
 8010fc4:	2202      	movs	r2, #2
 8010fc6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8010fc8:	8abb      	ldrh	r3, [r7, #20]
 8010fca:	141b      	asrs	r3, r3, #16
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8010fd2:	8abb      	ldrh	r3, [r7, #20]
 8010fd4:	0a1b      	lsrs	r3, r3, #8
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	b2da      	uxtb	r2, r3
 8010fda:	69bb      	ldr	r3, [r7, #24]
 8010fdc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8010fde:	8abb      	ldrh	r3, [r7, #20]
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8010fe6:	69bb      	ldr	r3, [r7, #24]
 8010fe8:	220c      	movs	r2, #12
 8010fea:	60da      	str	r2, [r3, #12]

  return 0;
 8010fec:	2300      	movs	r3, #0
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3720      	adds	r7, #32
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
	...

08010ff8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b086      	sub	sp, #24
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	60f8      	str	r0, [r7, #12]
 8011000:	460b      	mov	r3, r1
 8011002:	607a      	str	r2, [r7, #4]
 8011004:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	32b0      	adds	r2, #176	@ 0xb0
 8011010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011014:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8011016:	2304      	movs	r3, #4
 8011018:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d102      	bne.n	8011026 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8011020:	f04f 33ff 	mov.w	r3, #4294967295
 8011024:	e027      	b.n	8011076 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801102c:	68fa      	ldr	r2, [r7, #12]
 801102e:	33b0      	adds	r3, #176	@ 0xb0
 8011030:	009b      	lsls	r3, r3, #2
 8011032:	4413      	add	r3, r2
 8011034:	685b      	ldr	r3, [r3, #4]
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	7afa      	ldrb	r2, [r7, #11]
 801103a:	4610      	mov	r0, r2
 801103c:	4798      	blx	r3
 801103e:	4603      	mov	r3, r0
 8011040:	2b00      	cmp	r3, #0
 8011042:	d006      	beq.n	8011052 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8011044:	4b0e      	ldr	r3, [pc, #56]	@ (8011080 <SCSI_ModeSense6+0x88>)
 8011046:	789b      	ldrb	r3, [r3, #2]
 8011048:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801104c:	b2da      	uxtb	r2, r3
 801104e:	4b0c      	ldr	r3, [pc, #48]	@ (8011080 <SCSI_ModeSense6+0x88>)
 8011050:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	3304      	adds	r3, #4
 8011056:	781b      	ldrb	r3, [r3, #0]
 8011058:	461a      	mov	r2, r3
 801105a:	8afb      	ldrh	r3, [r7, #22]
 801105c:	4293      	cmp	r3, r2
 801105e:	d303      	bcc.n	8011068 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	3304      	adds	r3, #4
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8011068:	8afb      	ldrh	r3, [r7, #22]
 801106a:	461a      	mov	r2, r3
 801106c:	4904      	ldr	r1, [pc, #16]	@ (8011080 <SCSI_ModeSense6+0x88>)
 801106e:	6938      	ldr	r0, [r7, #16]
 8011070:	f000 fe3e 	bl	8011cf0 <SCSI_UpdateBotData>

  return 0;
 8011074:	2300      	movs	r3, #0
}
 8011076:	4618      	mov	r0, r3
 8011078:	3718      	adds	r7, #24
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	240000b0 	.word	0x240000b0

08011084 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	460b      	mov	r3, r1
 801108e:	607a      	str	r2, [r7, #4]
 8011090:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	32b0      	adds	r2, #176	@ 0xb0
 801109c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110a0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80110a2:	2308      	movs	r3, #8
 80110a4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d102      	bne.n	80110b2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80110ac:	f04f 33ff 	mov.w	r3, #4294967295
 80110b0:	e027      	b.n	8011102 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	33b0      	adds	r3, #176	@ 0xb0
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	4413      	add	r3, r2
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	7afa      	ldrb	r2, [r7, #11]
 80110c6:	4610      	mov	r0, r2
 80110c8:	4798      	blx	r3
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d006      	beq.n	80110de <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 80110d0:	4b0e      	ldr	r3, [pc, #56]	@ (801110c <SCSI_ModeSense10+0x88>)
 80110d2:	78db      	ldrb	r3, [r3, #3]
 80110d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80110d8:	b2da      	uxtb	r2, r3
 80110da:	4b0c      	ldr	r3, [pc, #48]	@ (801110c <SCSI_ModeSense10+0x88>)
 80110dc:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	3308      	adds	r3, #8
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	461a      	mov	r2, r3
 80110e6:	8afb      	ldrh	r3, [r7, #22]
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d303      	bcc.n	80110f4 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	3308      	adds	r3, #8
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80110f4:	8afb      	ldrh	r3, [r7, #22]
 80110f6:	461a      	mov	r2, r3
 80110f8:	4904      	ldr	r1, [pc, #16]	@ (801110c <SCSI_ModeSense10+0x88>)
 80110fa:	6938      	ldr	r0, [r7, #16]
 80110fc:	f000 fdf8 	bl	8011cf0 <SCSI_UpdateBotData>

  return 0;
 8011100:	2300      	movs	r3, #0
}
 8011102:	4618      	mov	r0, r3
 8011104:	3718      	adds	r7, #24
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	240000b4 	.word	0x240000b4

08011110 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	460b      	mov	r3, r1
 801111a:	607a      	str	r2, [r7, #4]
 801111c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	32b0      	adds	r2, #176	@ 0xb0
 8011128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801112c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d102      	bne.n	801113a <SCSI_RequestSense+0x2a>
  {
    return -1;
 8011134:	f04f 33ff 	mov.w	r3, #4294967295
 8011138:	e069      	b.n	801120e <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011140:	2b00      	cmp	r3, #0
 8011142:	d10a      	bne.n	801115a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801114a:	2320      	movs	r3, #32
 801114c:	2205      	movs	r2, #5
 801114e:	68f8      	ldr	r0, [r7, #12]
 8011150:	f000 f861 	bl	8011216 <SCSI_SenseCode>
    return -1;
 8011154:	f04f 33ff 	mov.w	r3, #4294967295
 8011158:	e059      	b.n	801120e <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801115a:	2300      	movs	r3, #0
 801115c:	75fb      	strb	r3, [r7, #23]
 801115e:	e007      	b.n	8011170 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8011160:	7dfb      	ldrb	r3, [r7, #23]
 8011162:	693a      	ldr	r2, [r7, #16]
 8011164:	4413      	add	r3, r2
 8011166:	2200      	movs	r2, #0
 8011168:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801116a:	7dfb      	ldrb	r3, [r7, #23]
 801116c:	3301      	adds	r3, #1
 801116e:	75fb      	strb	r3, [r7, #23]
 8011170:	7dfb      	ldrb	r3, [r7, #23]
 8011172:	2b11      	cmp	r3, #17
 8011174:	d9f4      	bls.n	8011160 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	2270      	movs	r2, #112	@ 0x70
 801117a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801117c:	693b      	ldr	r3, [r7, #16]
 801117e:	220c      	movs	r2, #12
 8011180:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801118e:	429a      	cmp	r2, r3
 8011190:	d02e      	beq.n	80111f0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8011198:	461a      	mov	r2, r3
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	3248      	adds	r2, #72	@ 0x48
 801119e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80111ac:	693a      	ldr	r2, [r7, #16]
 80111ae:	3348      	adds	r3, #72	@ 0x48
 80111b0:	00db      	lsls	r3, r3, #3
 80111b2:	4413      	add	r3, r2
 80111b4:	791a      	ldrb	r2, [r3, #4]
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80111c0:	693a      	ldr	r2, [r7, #16]
 80111c2:	3348      	adds	r3, #72	@ 0x48
 80111c4:	00db      	lsls	r3, r3, #3
 80111c6:	4413      	add	r3, r2
 80111c8:	795a      	ldrb	r2, [r3, #5]
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80111d4:	3301      	adds	r3, #1
 80111d6:	b2da      	uxtb	r2, r3
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80111e4:	2b04      	cmp	r3, #4
 80111e6:	d103      	bne.n	80111f0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	2200      	movs	r2, #0
 80111ec:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	2212      	movs	r2, #18
 80111f4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	3304      	adds	r3, #4
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	2b12      	cmp	r3, #18
 80111fe:	d805      	bhi.n	801120c <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	3304      	adds	r3, #4
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	461a      	mov	r2, r3
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3718      	adds	r7, #24
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8011216:	b480      	push	{r7}
 8011218:	b085      	sub	sp, #20
 801121a:	af00      	add	r7, sp, #0
 801121c:	6078      	str	r0, [r7, #4]
 801121e:	4608      	mov	r0, r1
 8011220:	4611      	mov	r1, r2
 8011222:	461a      	mov	r2, r3
 8011224:	4603      	mov	r3, r0
 8011226:	70fb      	strb	r3, [r7, #3]
 8011228:	460b      	mov	r3, r1
 801122a:	70bb      	strb	r3, [r7, #2]
 801122c:	4613      	mov	r3, r2
 801122e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	32b0      	adds	r2, #176	@ 0xb0
 801123a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801123e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d02c      	beq.n	80112a0 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801124c:	461a      	mov	r2, r3
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	3248      	adds	r2, #72	@ 0x48
 8011252:	78b9      	ldrb	r1, [r7, #2]
 8011254:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801125e:	68fa      	ldr	r2, [r7, #12]
 8011260:	3348      	adds	r3, #72	@ 0x48
 8011262:	00db      	lsls	r3, r3, #3
 8011264:	4413      	add	r3, r2
 8011266:	787a      	ldrb	r2, [r7, #1]
 8011268:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8011270:	68fa      	ldr	r2, [r7, #12]
 8011272:	3348      	adds	r3, #72	@ 0x48
 8011274:	00db      	lsls	r3, r3, #3
 8011276:	4413      	add	r3, r2
 8011278:	2200      	movs	r2, #0
 801127a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8011282:	3301      	adds	r3, #1
 8011284:	b2da      	uxtb	r2, r3
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8011292:	2b04      	cmp	r3, #4
 8011294:	d105      	bne.n	80112a2 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2200      	movs	r2, #0
 801129a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 801129e:	e000      	b.n	80112a2 <SCSI_SenseCode+0x8c>
    return;
 80112a0:	bf00      	nop
  }
}
 80112a2:	3714      	adds	r7, #20
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr

080112ac <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b086      	sub	sp, #24
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	460b      	mov	r3, r1
 80112b6:	607a      	str	r2, [r7, #4]
 80112b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	32b0      	adds	r2, #176	@ 0xb0
 80112c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112c8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d102      	bne.n	80112d6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80112d0:	f04f 33ff 	mov.w	r3, #4294967295
 80112d4:	e03b      	b.n	801134e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80112dc:	2b01      	cmp	r3, #1
 80112de:	d10f      	bne.n	8011300 <SCSI_StartStopUnit+0x54>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	3304      	adds	r3, #4
 80112e4:	781b      	ldrb	r3, [r3, #0]
 80112e6:	f003 0303 	and.w	r3, r3, #3
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	d108      	bne.n	8011300 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80112ee:	7af9      	ldrb	r1, [r7, #11]
 80112f0:	2324      	movs	r3, #36	@ 0x24
 80112f2:	2205      	movs	r2, #5
 80112f4:	68f8      	ldr	r0, [r7, #12]
 80112f6:	f7ff ff8e 	bl	8011216 <SCSI_SenseCode>

    return -1;
 80112fa:	f04f 33ff 	mov.w	r3, #4294967295
 80112fe:	e026      	b.n	801134e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	3304      	adds	r3, #4
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	f003 0303 	and.w	r3, r3, #3
 801130a:	2b01      	cmp	r3, #1
 801130c:	d104      	bne.n	8011318 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	2200      	movs	r2, #0
 8011312:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8011316:	e016      	b.n	8011346 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	3304      	adds	r3, #4
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	f003 0303 	and.w	r3, r3, #3
 8011322:	2b02      	cmp	r3, #2
 8011324:	d104      	bne.n	8011330 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	2202      	movs	r2, #2
 801132a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 801132e:	e00a      	b.n	8011346 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	3304      	adds	r3, #4
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	f003 0303 	and.w	r3, r3, #3
 801133a:	2b03      	cmp	r3, #3
 801133c:	d103      	bne.n	8011346 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	2200      	movs	r2, #0
 8011342:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	2200      	movs	r2, #0
 801134a:	60da      	str	r2, [r3, #12]

  return 0;
 801134c:	2300      	movs	r3, #0
}
 801134e:	4618      	mov	r0, r3
 8011350:	3718      	adds	r7, #24
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011356:	b480      	push	{r7}
 8011358:	b087      	sub	sp, #28
 801135a:	af00      	add	r7, sp, #0
 801135c:	60f8      	str	r0, [r7, #12]
 801135e:	460b      	mov	r3, r1
 8011360:	607a      	str	r2, [r7, #4]
 8011362:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	32b0      	adds	r2, #176	@ 0xb0
 801136e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011372:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d102      	bne.n	8011380 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801137a:	f04f 33ff 	mov.w	r3, #4294967295
 801137e:	e011      	b.n	80113a4 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	3304      	adds	r3, #4
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d104      	bne.n	8011394 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	2200      	movs	r2, #0
 801138e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8011392:	e003      	b.n	801139c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	2201      	movs	r2, #1
 8011398:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	2200      	movs	r2, #0
 80113a0:	60da      	str	r2, [r3, #12]

  return 0;
 80113a2:	2300      	movs	r3, #0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	371c      	adds	r7, #28
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr

080113b0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b086      	sub	sp, #24
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	60f8      	str	r0, [r7, #12]
 80113b8:	460b      	mov	r3, r1
 80113ba:	607a      	str	r2, [r7, #4]
 80113bc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	32b0      	adds	r2, #176	@ 0xb0
 80113c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113cc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d102      	bne.n	80113da <SCSI_Read10+0x2a>
  {
    return -1;
 80113d4:	f04f 33ff 	mov.w	r3, #4294967295
 80113d8:	e090      	b.n	80114fc <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	7a1b      	ldrb	r3, [r3, #8]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	f040 8082 	bne.w	80114e8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80113ea:	b25b      	sxtb	r3, r3
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	db0a      	blt.n	8011406 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80113f6:	2320      	movs	r3, #32
 80113f8:	2205      	movs	r2, #5
 80113fa:	68f8      	ldr	r0, [r7, #12]
 80113fc:	f7ff ff0b 	bl	8011216 <SCSI_SenseCode>
      return -1;
 8011400:	f04f 33ff 	mov.w	r3, #4294967295
 8011404:	e07a      	b.n	80114fc <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 801140c:	2b02      	cmp	r3, #2
 801140e:	d108      	bne.n	8011422 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011410:	7af9      	ldrb	r1, [r7, #11]
 8011412:	233a      	movs	r3, #58	@ 0x3a
 8011414:	2202      	movs	r2, #2
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	f7ff fefd 	bl	8011216 <SCSI_SenseCode>

      return -1;
 801141c:	f04f 33ff 	mov.w	r3, #4294967295
 8011420:	e06c      	b.n	80114fc <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011428:	68fa      	ldr	r2, [r7, #12]
 801142a:	33b0      	adds	r3, #176	@ 0xb0
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	4413      	add	r3, r2
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	689b      	ldr	r3, [r3, #8]
 8011434:	7afa      	ldrb	r2, [r7, #11]
 8011436:	4610      	mov	r0, r2
 8011438:	4798      	blx	r3
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d008      	beq.n	8011452 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011440:	7af9      	ldrb	r1, [r7, #11]
 8011442:	233a      	movs	r3, #58	@ 0x3a
 8011444:	2202      	movs	r2, #2
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	f7ff fee5 	bl	8011216 <SCSI_SenseCode>
      return -1;
 801144c:	f04f 33ff 	mov.w	r3, #4294967295
 8011450:	e054      	b.n	80114fc <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	3302      	adds	r3, #2
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	3303      	adds	r3, #3
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011462:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	3304      	adds	r3, #4
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801146c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801146e:	687a      	ldr	r2, [r7, #4]
 8011470:	3205      	adds	r2, #5
 8011472:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011474:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	3307      	adds	r3, #7
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	021b      	lsls	r3, r3, #8
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	3208      	adds	r2, #8
 8011488:	7812      	ldrb	r2, [r2, #0]
 801148a:	431a      	orrs	r2, r3
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 801149e:	7af9      	ldrb	r1, [r7, #11]
 80114a0:	68f8      	ldr	r0, [r7, #12]
 80114a2:	f000 fadc 	bl	8011a5e <SCSI_CheckAddressRange>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	da02      	bge.n	80114b2 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80114ac:	f04f 33ff 	mov.w	r3, #4294967295
 80114b0:	e024      	b.n	80114fc <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80114be:	6979      	ldr	r1, [r7, #20]
 80114c0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 80114c4:	fb01 f303 	mul.w	r3, r1, r3
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d00a      	beq.n	80114e2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80114d2:	2320      	movs	r3, #32
 80114d4:	2205      	movs	r2, #5
 80114d6:	68f8      	ldr	r0, [r7, #12]
 80114d8:	f7ff fe9d 	bl	8011216 <SCSI_SenseCode>
      return -1;
 80114dc:	f04f 33ff 	mov.w	r3, #4294967295
 80114e0:	e00c      	b.n	80114fc <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	2202      	movs	r2, #2
 80114e6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80114ee:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80114f0:	7afb      	ldrb	r3, [r7, #11]
 80114f2:	4619      	mov	r1, r3
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	f000 fadf 	bl	8011ab8 <SCSI_ProcessRead>
 80114fa:	4603      	mov	r3, r0
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3718      	adds	r7, #24
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b086      	sub	sp, #24
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	460b      	mov	r3, r1
 801150e:	607a      	str	r2, [r7, #4]
 8011510:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	32b0      	adds	r2, #176	@ 0xb0
 801151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011520:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d102      	bne.n	801152e <SCSI_Read12+0x2a>
  {
    return -1;
 8011528:	f04f 33ff 	mov.w	r3, #4294967295
 801152c:	e09a      	b.n	8011664 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	7a1b      	ldrb	r3, [r3, #8]
 8011532:	2b00      	cmp	r3, #0
 8011534:	f040 808c 	bne.w	8011650 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 801153e:	b25b      	sxtb	r3, r3
 8011540:	2b00      	cmp	r3, #0
 8011542:	db0a      	blt.n	801155a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801154a:	2320      	movs	r3, #32
 801154c:	2205      	movs	r2, #5
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f7ff fe61 	bl	8011216 <SCSI_SenseCode>
      return -1;
 8011554:	f04f 33ff 	mov.w	r3, #4294967295
 8011558:	e084      	b.n	8011664 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8011560:	2b02      	cmp	r3, #2
 8011562:	d108      	bne.n	8011576 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011564:	7af9      	ldrb	r1, [r7, #11]
 8011566:	233a      	movs	r3, #58	@ 0x3a
 8011568:	2202      	movs	r2, #2
 801156a:	68f8      	ldr	r0, [r7, #12]
 801156c:	f7ff fe53 	bl	8011216 <SCSI_SenseCode>
      return -1;
 8011570:	f04f 33ff 	mov.w	r3, #4294967295
 8011574:	e076      	b.n	8011664 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801157c:	68fa      	ldr	r2, [r7, #12]
 801157e:	33b0      	adds	r3, #176	@ 0xb0
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	4413      	add	r3, r2
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	689b      	ldr	r3, [r3, #8]
 8011588:	7afa      	ldrb	r2, [r7, #11]
 801158a:	4610      	mov	r0, r2
 801158c:	4798      	blx	r3
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d008      	beq.n	80115a6 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011594:	7af9      	ldrb	r1, [r7, #11]
 8011596:	233a      	movs	r3, #58	@ 0x3a
 8011598:	2202      	movs	r2, #2
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f7ff fe3b 	bl	8011216 <SCSI_SenseCode>
      return -1;
 80115a0:	f04f 33ff 	mov.w	r3, #4294967295
 80115a4:	e05e      	b.n	8011664 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	3302      	adds	r3, #2
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	3303      	adds	r3, #3
 80115b2:	781b      	ldrb	r3, [r3, #0]
 80115b4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80115b6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	3304      	adds	r3, #4
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80115c0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	3205      	adds	r2, #5
 80115c6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80115c8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	3306      	adds	r3, #6
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	3307      	adds	r3, #7
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80115e0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	3308      	adds	r3, #8
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80115ea:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80115ec:	687a      	ldr	r2, [r7, #4]
 80115ee:	3209      	adds	r2, #9
 80115f0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80115f2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011606:	7af9      	ldrb	r1, [r7, #11]
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f000 fa28 	bl	8011a5e <SCSI_CheckAddressRange>
 801160e:	4603      	mov	r3, r0
 8011610:	2b00      	cmp	r3, #0
 8011612:	da02      	bge.n	801161a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011614:	f04f 33ff 	mov.w	r3, #4294967295
 8011618:	e024      	b.n	8011664 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011626:	6979      	ldr	r1, [r7, #20]
 8011628:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 801162c:	fb01 f303 	mul.w	r3, r1, r3
 8011630:	429a      	cmp	r2, r3
 8011632:	d00a      	beq.n	801164a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801163a:	2320      	movs	r3, #32
 801163c:	2205      	movs	r2, #5
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	f7ff fde9 	bl	8011216 <SCSI_SenseCode>
      return -1;
 8011644:	f04f 33ff 	mov.w	r3, #4294967295
 8011648:	e00c      	b.n	8011664 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	2202      	movs	r2, #2
 801164e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011656:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8011658:	7afb      	ldrb	r3, [r7, #11]
 801165a:	4619      	mov	r1, r3
 801165c:	68f8      	ldr	r0, [r7, #12]
 801165e:	f000 fa2b 	bl	8011ab8 <SCSI_ProcessRead>
 8011662:	4603      	mov	r3, r0
}
 8011664:	4618      	mov	r0, r3
 8011666:	3718      	adds	r7, #24
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}

0801166c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b086      	sub	sp, #24
 8011670:	af00      	add	r7, sp, #0
 8011672:	60f8      	str	r0, [r7, #12]
 8011674:	460b      	mov	r3, r1
 8011676:	607a      	str	r2, [r7, #4]
 8011678:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	32b0      	adds	r2, #176	@ 0xb0
 8011684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011688:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d102      	bne.n	8011696 <SCSI_Write10+0x2a>
  {
    return -1;
 8011690:	f04f 33ff 	mov.w	r3, #4294967295
 8011694:	e0ba      	b.n	801180c <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	7a1b      	ldrb	r3, [r3, #8]
 801169a:	2b00      	cmp	r3, #0
 801169c:	f040 80b0 	bne.w	8011800 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d10a      	bne.n	80116c0 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80116b0:	2320      	movs	r3, #32
 80116b2:	2205      	movs	r2, #5
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f7ff fdae 	bl	8011216 <SCSI_SenseCode>
      return -1;
 80116ba:	f04f 33ff 	mov.w	r3, #4294967295
 80116be:	e0a5      	b.n	801180c <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80116c6:	b25b      	sxtb	r3, r3
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	da0a      	bge.n	80116e2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80116d2:	2320      	movs	r3, #32
 80116d4:	2205      	movs	r2, #5
 80116d6:	68f8      	ldr	r0, [r7, #12]
 80116d8:	f7ff fd9d 	bl	8011216 <SCSI_SenseCode>
      return -1;
 80116dc:	f04f 33ff 	mov.w	r3, #4294967295
 80116e0:	e094      	b.n	801180c <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	33b0      	adds	r3, #176	@ 0xb0
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4413      	add	r3, r2
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	689b      	ldr	r3, [r3, #8]
 80116f4:	7afa      	ldrb	r2, [r7, #11]
 80116f6:	4610      	mov	r0, r2
 80116f8:	4798      	blx	r3
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d008      	beq.n	8011712 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011700:	7af9      	ldrb	r1, [r7, #11]
 8011702:	233a      	movs	r3, #58	@ 0x3a
 8011704:	2202      	movs	r2, #2
 8011706:	68f8      	ldr	r0, [r7, #12]
 8011708:	f7ff fd85 	bl	8011216 <SCSI_SenseCode>
      return -1;
 801170c:	f04f 33ff 	mov.w	r3, #4294967295
 8011710:	e07c      	b.n	801180c <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011718:	68fa      	ldr	r2, [r7, #12]
 801171a:	33b0      	adds	r3, #176	@ 0xb0
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	4413      	add	r3, r2
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	68db      	ldr	r3, [r3, #12]
 8011724:	7afa      	ldrb	r2, [r7, #11]
 8011726:	4610      	mov	r0, r2
 8011728:	4798      	blx	r3
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d008      	beq.n	8011742 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011730:	7af9      	ldrb	r1, [r7, #11]
 8011732:	2327      	movs	r3, #39	@ 0x27
 8011734:	2202      	movs	r2, #2
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	f7ff fd6d 	bl	8011216 <SCSI_SenseCode>
      return -1;
 801173c:	f04f 33ff 	mov.w	r3, #4294967295
 8011740:	e064      	b.n	801180c <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	3302      	adds	r3, #2
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	3303      	adds	r3, #3
 801174e:	781b      	ldrb	r3, [r3, #0]
 8011750:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011752:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	3304      	adds	r3, #4
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801175c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801175e:	687a      	ldr	r2, [r7, #4]
 8011760:	3205      	adds	r2, #5
 8011762:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011764:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	3307      	adds	r3, #7
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	3208      	adds	r2, #8
 8011778:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801177a:	431a      	orrs	r2, r3
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 801178e:	7af9      	ldrb	r1, [r7, #11]
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	f000 f964 	bl	8011a5e <SCSI_CheckAddressRange>
 8011796:	4603      	mov	r3, r0
 8011798:	2b00      	cmp	r3, #0
 801179a:	da02      	bge.n	80117a2 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801179c:	f04f 33ff 	mov.w	r3, #4294967295
 80117a0:	e034      	b.n	801180c <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80117a8:	697a      	ldr	r2, [r7, #20]
 80117aa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80117ae:	fb02 f303 	mul.w	r3, r2, r3
 80117b2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80117ba:	693a      	ldr	r2, [r7, #16]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d00a      	beq.n	80117d6 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80117c6:	2320      	movs	r3, #32
 80117c8:	2205      	movs	r2, #5
 80117ca:	68f8      	ldr	r0, [r7, #12]
 80117cc:	f7ff fd23 	bl	8011216 <SCSI_SenseCode>
      return -1;
 80117d0:	f04f 33ff 	mov.w	r3, #4294967295
 80117d4:	e01a      	b.n	801180c <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80117dc:	bf28      	it	cs
 80117de:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80117e2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	2201      	movs	r2, #1
 80117e8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80117ea:	4b0a      	ldr	r3, [pc, #40]	@ (8011814 <SCSI_Write10+0x1a8>)
 80117ec:	7819      	ldrb	r1, [r3, #0]
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	f103 0210 	add.w	r2, r3, #16
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	f002 facd 	bl	8013d96 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80117fc:	2300      	movs	r3, #0
 80117fe:	e005      	b.n	801180c <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8011800:	7afb      	ldrb	r3, [r7, #11]
 8011802:	4619      	mov	r1, r3
 8011804:	68f8      	ldr	r0, [r7, #12]
 8011806:	f000 f9dd 	bl	8011bc4 <SCSI_ProcessWrite>
 801180a:	4603      	mov	r3, r0
}
 801180c:	4618      	mov	r0, r3
 801180e:	3718      	adds	r7, #24
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}
 8011814:	2400009f 	.word	0x2400009f

08011818 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b086      	sub	sp, #24
 801181c:	af00      	add	r7, sp, #0
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	460b      	mov	r3, r1
 8011822:	607a      	str	r2, [r7, #4]
 8011824:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	32b0      	adds	r2, #176	@ 0xb0
 8011830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011834:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d102      	bne.n	8011842 <SCSI_Write12+0x2a>
  {
    return -1;
 801183c:	f04f 33ff 	mov.w	r3, #4294967295
 8011840:	e0ca      	b.n	80119d8 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	7a1b      	ldrb	r3, [r3, #8]
 8011846:	2b00      	cmp	r3, #0
 8011848:	f040 80c0 	bne.w	80119cc <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011852:	2b00      	cmp	r3, #0
 8011854:	d10a      	bne.n	801186c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801185c:	2320      	movs	r3, #32
 801185e:	2205      	movs	r2, #5
 8011860:	68f8      	ldr	r0, [r7, #12]
 8011862:	f7ff fcd8 	bl	8011216 <SCSI_SenseCode>
      return -1;
 8011866:	f04f 33ff 	mov.w	r3, #4294967295
 801186a:	e0b5      	b.n	80119d8 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8011872:	b25b      	sxtb	r3, r3
 8011874:	2b00      	cmp	r3, #0
 8011876:	da0a      	bge.n	801188e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801187e:	2320      	movs	r3, #32
 8011880:	2205      	movs	r2, #5
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	f7ff fcc7 	bl	8011216 <SCSI_SenseCode>
      return -1;
 8011888:	f04f 33ff 	mov.w	r3, #4294967295
 801188c:	e0a4      	b.n	80119d8 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011894:	68fa      	ldr	r2, [r7, #12]
 8011896:	33b0      	adds	r3, #176	@ 0xb0
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	4413      	add	r3, r2
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	689b      	ldr	r3, [r3, #8]
 80118a0:	7afa      	ldrb	r2, [r7, #11]
 80118a2:	4610      	mov	r0, r2
 80118a4:	4798      	blx	r3
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d00b      	beq.n	80118c4 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80118ac:	7af9      	ldrb	r1, [r7, #11]
 80118ae:	233a      	movs	r3, #58	@ 0x3a
 80118b0:	2202      	movs	r2, #2
 80118b2:	68f8      	ldr	r0, [r7, #12]
 80118b4:	f7ff fcaf 	bl	8011216 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	2205      	movs	r2, #5
 80118bc:	721a      	strb	r2, [r3, #8]
      return -1;
 80118be:	f04f 33ff 	mov.w	r3, #4294967295
 80118c2:	e089      	b.n	80119d8 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80118ca:	68fa      	ldr	r2, [r7, #12]
 80118cc:	33b0      	adds	r3, #176	@ 0xb0
 80118ce:	009b      	lsls	r3, r3, #2
 80118d0:	4413      	add	r3, r2
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	68db      	ldr	r3, [r3, #12]
 80118d6:	7afa      	ldrb	r2, [r7, #11]
 80118d8:	4610      	mov	r0, r2
 80118da:	4798      	blx	r3
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d00b      	beq.n	80118fa <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80118e2:	7af9      	ldrb	r1, [r7, #11]
 80118e4:	2327      	movs	r3, #39	@ 0x27
 80118e6:	2202      	movs	r2, #2
 80118e8:	68f8      	ldr	r0, [r7, #12]
 80118ea:	f7ff fc94 	bl	8011216 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	2205      	movs	r2, #5
 80118f2:	721a      	strb	r2, [r3, #8]
      return -1;
 80118f4:	f04f 33ff 	mov.w	r3, #4294967295
 80118f8:	e06e      	b.n	80119d8 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	3302      	adds	r3, #2
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	3303      	adds	r3, #3
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801190a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	3304      	adds	r3, #4
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011914:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	3205      	adds	r2, #5
 801191a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801191c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	3306      	adds	r3, #6
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	3307      	adds	r3, #7
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011934:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	3308      	adds	r3, #8
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801193e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011940:	687a      	ldr	r2, [r7, #4]
 8011942:	3209      	adds	r2, #9
 8011944:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011946:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 801195a:	7af9      	ldrb	r1, [r7, #11]
 801195c:	68f8      	ldr	r0, [r7, #12]
 801195e:	f000 f87e 	bl	8011a5e <SCSI_CheckAddressRange>
 8011962:	4603      	mov	r3, r0
 8011964:	2b00      	cmp	r3, #0
 8011966:	da02      	bge.n	801196e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011968:	f04f 33ff 	mov.w	r3, #4294967295
 801196c:	e034      	b.n	80119d8 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011974:	697a      	ldr	r2, [r7, #20]
 8011976:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 801197a:	fb02 f303 	mul.w	r3, r2, r3
 801197e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011986:	693a      	ldr	r2, [r7, #16]
 8011988:	429a      	cmp	r2, r3
 801198a:	d00a      	beq.n	80119a2 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8011992:	2320      	movs	r3, #32
 8011994:	2205      	movs	r2, #5
 8011996:	68f8      	ldr	r0, [r7, #12]
 8011998:	f7ff fc3d 	bl	8011216 <SCSI_SenseCode>
      return -1;
 801199c:	f04f 33ff 	mov.w	r3, #4294967295
 80119a0:	e01a      	b.n	80119d8 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80119a8:	bf28      	it	cs
 80119aa:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80119ae:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	2201      	movs	r2, #1
 80119b4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80119b6:	4b0a      	ldr	r3, [pc, #40]	@ (80119e0 <SCSI_Write12+0x1c8>)
 80119b8:	7819      	ldrb	r1, [r3, #0]
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	f103 0210 	add.w	r2, r3, #16
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	68f8      	ldr	r0, [r7, #12]
 80119c4:	f002 f9e7 	bl	8013d96 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80119c8:	2300      	movs	r3, #0
 80119ca:	e005      	b.n	80119d8 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80119cc:	7afb      	ldrb	r3, [r7, #11]
 80119ce:	4619      	mov	r1, r3
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f000 f8f7 	bl	8011bc4 <SCSI_ProcessWrite>
 80119d6:	4603      	mov	r3, r0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3718      	adds	r7, #24
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	2400009f 	.word	0x2400009f

080119e4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b086      	sub	sp, #24
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	60f8      	str	r0, [r7, #12]
 80119ec:	460b      	mov	r3, r1
 80119ee:	607a      	str	r2, [r7, #4]
 80119f0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	32b0      	adds	r2, #176	@ 0xb0
 80119fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a00:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d102      	bne.n	8011a0e <SCSI_Verify10+0x2a>
  {
    return -1;
 8011a08:	f04f 33ff 	mov.w	r3, #4294967295
 8011a0c:	e023      	b.n	8011a56 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	3301      	adds	r3, #1
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	f003 0302 	and.w	r3, r3, #2
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d008      	beq.n	8011a2e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011a1c:	7af9      	ldrb	r1, [r7, #11]
 8011a1e:	2324      	movs	r3, #36	@ 0x24
 8011a20:	2205      	movs	r2, #5
 8011a22:	68f8      	ldr	r0, [r7, #12]
 8011a24:	f7ff fbf7 	bl	8011216 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8011a28:	f04f 33ff 	mov.w	r3, #4294967295
 8011a2c:	e013      	b.n	8011a56 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011a3a:	7af9      	ldrb	r1, [r7, #11]
 8011a3c:	68f8      	ldr	r0, [r7, #12]
 8011a3e:	f000 f80e 	bl	8011a5e <SCSI_CheckAddressRange>
 8011a42:	4603      	mov	r3, r0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	da02      	bge.n	8011a4e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8011a48:	f04f 33ff 	mov.w	r3, #4294967295
 8011a4c:	e003      	b.n	8011a56 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	2200      	movs	r2, #0
 8011a52:	60da      	str	r2, [r3, #12]

  return 0;
 8011a54:	2300      	movs	r3, #0
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3718      	adds	r7, #24
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}

08011a5e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8011a5e:	b580      	push	{r7, lr}
 8011a60:	b086      	sub	sp, #24
 8011a62:	af00      	add	r7, sp, #0
 8011a64:	60f8      	str	r0, [r7, #12]
 8011a66:	607a      	str	r2, [r7, #4]
 8011a68:	603b      	str	r3, [r7, #0]
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	32b0      	adds	r2, #176	@ 0xb0
 8011a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a7c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d102      	bne.n	8011a8a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8011a84:	f04f 33ff 	mov.w	r3, #4294967295
 8011a88:	e011      	b.n	8011aae <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8011a8a:	687a      	ldr	r2, [r7, #4]
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	441a      	add	r2, r3
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d908      	bls.n	8011aac <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8011a9a:	7af9      	ldrb	r1, [r7, #11]
 8011a9c:	2321      	movs	r3, #33	@ 0x21
 8011a9e:	2205      	movs	r2, #5
 8011aa0:	68f8      	ldr	r0, [r7, #12]
 8011aa2:	f7ff fbb8 	bl	8011216 <SCSI_SenseCode>
    return -1;
 8011aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8011aaa:	e000      	b.n	8011aae <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8011aac:	2300      	movs	r3, #0
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3718      	adds	r7, #24
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
	...

08011ab8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011ab8:	b590      	push	{r4, r7, lr}
 8011aba:	b085      	sub	sp, #20
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	32b0      	adds	r2, #176	@ 0xb0
 8011ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ad2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d102      	bne.n	8011ae0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8011ada:	f04f 33ff 	mov.w	r3, #4294967295
 8011ade:	e06a      	b.n	8011bb6 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011ae6:	68fa      	ldr	r2, [r7, #12]
 8011ae8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8011aec:	fb02 f303 	mul.w	r3, r2, r3
 8011af0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011af8:	bf28      	it	cs
 8011afa:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8011afe:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	33b0      	adds	r3, #176	@ 0xb0
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	4413      	add	r3, r2
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	691c      	ldr	r4, [r3, #16]
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	f103 0110 	add.w	r1, r3, #16
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011b24:	4618      	mov	r0, r3
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	78f8      	ldrb	r0, [r7, #3]
 8011b30:	47a0      	blx	r4
 8011b32:	4603      	mov	r3, r0
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	da08      	bge.n	8011b4a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8011b38:	78f9      	ldrb	r1, [r7, #3]
 8011b3a:	2311      	movs	r3, #17
 8011b3c:	2204      	movs	r2, #4
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f7ff fb69 	bl	8011216 <SCSI_SenseCode>
    return -1;
 8011b44:	f04f 33ff 	mov.w	r3, #4294967295
 8011b48:	e035      	b.n	8011bb6 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8011b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8011bc0 <SCSI_ProcessRead+0x108>)
 8011b4c:	7819      	ldrb	r1, [r3, #0]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	f103 0210 	add.w	r2, r3, #16
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f002 f8fc 	bl	8013d54 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011b68:	4619      	mov	r1, r3
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b70:	441a      	add	r2, r3
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011b84:	4619      	mov	r1, r3
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b8c:	1ad2      	subs	r2, r2, r3
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	1ad2      	subs	r2, r2, r3
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d102      	bne.n	8011bb4 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2203      	movs	r2, #3
 8011bb2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8011bb4:	2300      	movs	r3, #0
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3714      	adds	r7, #20
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd90      	pop	{r4, r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	2400009e 	.word	0x2400009e

08011bc4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011bc4:	b590      	push	{r4, r7, lr}
 8011bc6:	b085      	sub	sp, #20
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	460b      	mov	r3, r1
 8011bce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	32b0      	adds	r2, #176	@ 0xb0
 8011bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bde:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d102      	bne.n	8011bec <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8011be6:	f04f 33ff 	mov.w	r3, #4294967295
 8011bea:	e07a      	b.n	8011ce2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011bf2:	68fa      	ldr	r2, [r7, #12]
 8011bf4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8011bf8:	fb02 f303 	mul.w	r3, r2, r3
 8011bfc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c04:	bf28      	it	cs
 8011c06:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8011c0a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	33b0      	adds	r3, #176	@ 0xb0
 8011c16:	009b      	lsls	r3, r3, #2
 8011c18:	4413      	add	r3, r2
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	695c      	ldr	r4, [r3, #20]
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	f103 0110 	add.w	r1, r3, #16
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011c30:	4618      	mov	r0, r3
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	78f8      	ldrb	r0, [r7, #3]
 8011c3c:	47a0      	blx	r4
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	da08      	bge.n	8011c56 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8011c44:	78f9      	ldrb	r1, [r7, #3]
 8011c46:	2303      	movs	r3, #3
 8011c48:	2204      	movs	r2, #4
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7ff fae3 	bl	8011216 <SCSI_SenseCode>
    return -1;
 8011c50:	f04f 33ff 	mov.w	r3, #4294967295
 8011c54:	e045      	b.n	8011ce2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011c62:	4619      	mov	r1, r3
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c6a:	441a      	add	r2, r3
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011c7e:	4619      	mov	r1, r3
 8011c80:	68bb      	ldr	r3, [r7, #8]
 8011c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c86:	1ad2      	subs	r2, r2, r3
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	1ad2      	subs	r2, r2, r3
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d104      	bne.n	8011cb2 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011ca8:	2100      	movs	r1, #0
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f7fe fce8 	bl	8010680 <MSC_BOT_SendCSW>
 8011cb0:	e016      	b.n	8011ce0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011cb8:	68fa      	ldr	r2, [r7, #12]
 8011cba:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8011cbe:	fb02 f303 	mul.w	r3, r2, r3
 8011cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011cc6:	bf28      	it	cs
 8011cc8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8011ccc:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8011cce:	4b07      	ldr	r3, [pc, #28]	@ (8011cec <SCSI_ProcessWrite+0x128>)
 8011cd0:	7819      	ldrb	r1, [r3, #0]
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	f103 0210 	add.w	r2, r3, #16
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f002 f85b 	bl	8013d96 <USBD_LL_PrepareReceive>
  }

  return 0;
 8011ce0:	2300      	movs	r3, #0
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3714      	adds	r7, #20
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd90      	pop	{r4, r7, pc}
 8011cea:	bf00      	nop
 8011cec:	2400009f 	.word	0x2400009f

08011cf0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b087      	sub	sp, #28
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	4613      	mov	r3, r2
 8011cfc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8011cfe:	88fb      	ldrh	r3, [r7, #6]
 8011d00:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d102      	bne.n	8011d0e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8011d08:	f04f 33ff 	mov.w	r3, #4294967295
 8011d0c:	e013      	b.n	8011d36 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8011d0e:	8afa      	ldrh	r2, [r7, #22]
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8011d14:	e00b      	b.n	8011d2e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8011d16:	8afb      	ldrh	r3, [r7, #22]
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8011d1c:	8afb      	ldrh	r3, [r7, #22]
 8011d1e:	68ba      	ldr	r2, [r7, #8]
 8011d20:	441a      	add	r2, r3
 8011d22:	8afb      	ldrh	r3, [r7, #22]
 8011d24:	7811      	ldrb	r1, [r2, #0]
 8011d26:	68fa      	ldr	r2, [r7, #12]
 8011d28:	4413      	add	r3, r2
 8011d2a:	460a      	mov	r2, r1
 8011d2c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8011d2e:	8afb      	ldrh	r3, [r7, #22]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1f0      	bne.n	8011d16 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8011d34:	2300      	movs	r3, #0
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	371c      	adds	r7, #28
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr

08011d42 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b086      	sub	sp, #24
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	60f8      	str	r0, [r7, #12]
 8011d4a:	60b9      	str	r1, [r7, #8]
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d101      	bne.n	8011d5a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011d56:	2303      	movs	r3, #3
 8011d58:	e01f      	b.n	8011d9a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	2200      	movs	r2, #0
 8011d66:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d003      	beq.n	8011d80 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	68ba      	ldr	r2, [r7, #8]
 8011d7c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	2201      	movs	r2, #1
 8011d84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	79fa      	ldrb	r2, [r7, #7]
 8011d8c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011d8e:	68f8      	ldr	r0, [r7, #12]
 8011d90:	f001 fe88 	bl	8013aa4 <USBD_LL_Init>
 8011d94:	4603      	mov	r3, r0
 8011d96:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3718      	adds	r7, #24
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b084      	sub	sp, #16
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
 8011daa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011dac:	2300      	movs	r3, #0
 8011dae:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d101      	bne.n	8011dba <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011db6:	2303      	movs	r3, #3
 8011db8:	e025      	b.n	8011e06 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	683a      	ldr	r2, [r7, #0]
 8011dbe:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	32ae      	adds	r2, #174	@ 0xae
 8011dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d00f      	beq.n	8011df6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	32ae      	adds	r2, #174	@ 0xae
 8011de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011de6:	f107 020e 	add.w	r2, r7, #14
 8011dea:	4610      	mov	r0, r2
 8011dec:	4798      	blx	r3
 8011dee:	4602      	mov	r2, r0
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011dfc:	1c5a      	adds	r2, r3, #1
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011e04:	2300      	movs	r3, #0
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3710      	adds	r7, #16
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}

08011e0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011e0e:	b580      	push	{r7, lr}
 8011e10:	b082      	sub	sp, #8
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f001 fe94 	bl	8013b44 <USBD_LL_Start>
 8011e1c:	4603      	mov	r3, r0
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3708      	adds	r7, #8
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}

08011e26 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011e26:	b480      	push	{r7}
 8011e28:	b083      	sub	sp, #12
 8011e2a:	af00      	add	r7, sp, #0
 8011e2c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011e2e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	370c      	adds	r7, #12
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr

08011e3c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	460b      	mov	r3, r1
 8011e46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d009      	beq.n	8011e6a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	78fa      	ldrb	r2, [r7, #3]
 8011e60:	4611      	mov	r1, r2
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	4798      	blx	r3
 8011e66:	4603      	mov	r3, r0
 8011e68:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3710      	adds	r7, #16
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}

08011e74 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	460b      	mov	r3, r1
 8011e7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e80:	2300      	movs	r3, #0
 8011e82:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	78fa      	ldrb	r2, [r7, #3]
 8011e8e:	4611      	mov	r1, r2
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	4798      	blx	r3
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d001      	beq.n	8011e9e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011e9a:	2303      	movs	r3, #3
 8011e9c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3710      	adds	r7, #16
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b084      	sub	sp, #16
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
 8011eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011eb8:	6839      	ldr	r1, [r7, #0]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f001 f935 	bl	801312a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2201      	movs	r2, #1
 8011ec4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011ece:	461a      	mov	r2, r3
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011edc:	f003 031f 	and.w	r3, r3, #31
 8011ee0:	2b02      	cmp	r3, #2
 8011ee2:	d01a      	beq.n	8011f1a <USBD_LL_SetupStage+0x72>
 8011ee4:	2b02      	cmp	r3, #2
 8011ee6:	d822      	bhi.n	8011f2e <USBD_LL_SetupStage+0x86>
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d002      	beq.n	8011ef2 <USBD_LL_SetupStage+0x4a>
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	d00a      	beq.n	8011f06 <USBD_LL_SetupStage+0x5e>
 8011ef0:	e01d      	b.n	8011f2e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011ef8:	4619      	mov	r1, r3
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 fb62 	bl	80125c4 <USBD_StdDevReq>
 8011f00:	4603      	mov	r3, r0
 8011f02:	73fb      	strb	r3, [r7, #15]
      break;
 8011f04:	e020      	b.n	8011f48 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f0c:	4619      	mov	r1, r3
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 fbca 	bl	80126a8 <USBD_StdItfReq>
 8011f14:	4603      	mov	r3, r0
 8011f16:	73fb      	strb	r3, [r7, #15]
      break;
 8011f18:	e016      	b.n	8011f48 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f20:	4619      	mov	r1, r3
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 fc2c 	bl	8012780 <USBD_StdEPReq>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8011f2c:	e00c      	b.n	8011f48 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011f34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f001 fe80 	bl	8013c42 <USBD_LL_StallEP>
 8011f42:	4603      	mov	r3, r0
 8011f44:	73fb      	strb	r3, [r7, #15]
      break;
 8011f46:	bf00      	nop
  }

  return ret;
 8011f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}

08011f52 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011f52:	b580      	push	{r7, lr}
 8011f54:	b086      	sub	sp, #24
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	60f8      	str	r0, [r7, #12]
 8011f5a:	460b      	mov	r3, r1
 8011f5c:	607a      	str	r2, [r7, #4]
 8011f5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011f60:	2300      	movs	r3, #0
 8011f62:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011f64:	7afb      	ldrb	r3, [r7, #11]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d16e      	bne.n	8012048 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011f70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011f78:	2b03      	cmp	r3, #3
 8011f7a:	f040 8098 	bne.w	80120ae <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	689a      	ldr	r2, [r3, #8]
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	68db      	ldr	r3, [r3, #12]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d913      	bls.n	8011fb2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	689a      	ldr	r2, [r3, #8]
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	68db      	ldr	r3, [r3, #12]
 8011f92:	1ad2      	subs	r2, r2, r3
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	68da      	ldr	r2, [r3, #12]
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	689b      	ldr	r3, [r3, #8]
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	bf28      	it	cs
 8011fa4:	4613      	movcs	r3, r2
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	6879      	ldr	r1, [r7, #4]
 8011faa:	68f8      	ldr	r0, [r7, #12]
 8011fac:	f001 f9a0 	bl	80132f0 <USBD_CtlContinueRx>
 8011fb0:	e07d      	b.n	80120ae <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011fb8:	f003 031f 	and.w	r3, r3, #31
 8011fbc:	2b02      	cmp	r3, #2
 8011fbe:	d014      	beq.n	8011fea <USBD_LL_DataOutStage+0x98>
 8011fc0:	2b02      	cmp	r3, #2
 8011fc2:	d81d      	bhi.n	8012000 <USBD_LL_DataOutStage+0xae>
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d002      	beq.n	8011fce <USBD_LL_DataOutStage+0x7c>
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d003      	beq.n	8011fd4 <USBD_LL_DataOutStage+0x82>
 8011fcc:	e018      	b.n	8012000 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	75bb      	strb	r3, [r7, #22]
            break;
 8011fd2:	e018      	b.n	8012006 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011fda:	b2db      	uxtb	r3, r3
 8011fdc:	4619      	mov	r1, r3
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f000 fa64 	bl	80124ac <USBD_CoreFindIF>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	75bb      	strb	r3, [r7, #22]
            break;
 8011fe8:	e00d      	b.n	8012006 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	68f8      	ldr	r0, [r7, #12]
 8011ff6:	f000 fa66 	bl	80124c6 <USBD_CoreFindEP>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8011ffe:	e002      	b.n	8012006 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012000:	2300      	movs	r3, #0
 8012002:	75bb      	strb	r3, [r7, #22]
            break;
 8012004:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012006:	7dbb      	ldrb	r3, [r7, #22]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d119      	bne.n	8012040 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012012:	b2db      	uxtb	r3, r3
 8012014:	2b03      	cmp	r3, #3
 8012016:	d113      	bne.n	8012040 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012018:	7dba      	ldrb	r2, [r7, #22]
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	32ae      	adds	r2, #174	@ 0xae
 801201e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012022:	691b      	ldr	r3, [r3, #16]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d00b      	beq.n	8012040 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012028:	7dba      	ldrb	r2, [r7, #22]
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012030:	7dba      	ldrb	r2, [r7, #22]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	32ae      	adds	r2, #174	@ 0xae
 8012036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801203a:	691b      	ldr	r3, [r3, #16]
 801203c:	68f8      	ldr	r0, [r7, #12]
 801203e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012040:	68f8      	ldr	r0, [r7, #12]
 8012042:	f001 f966 	bl	8013312 <USBD_CtlSendStatus>
 8012046:	e032      	b.n	80120ae <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012048:	7afb      	ldrb	r3, [r7, #11]
 801204a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801204e:	b2db      	uxtb	r3, r3
 8012050:	4619      	mov	r1, r3
 8012052:	68f8      	ldr	r0, [r7, #12]
 8012054:	f000 fa37 	bl	80124c6 <USBD_CoreFindEP>
 8012058:	4603      	mov	r3, r0
 801205a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801205c:	7dbb      	ldrb	r3, [r7, #22]
 801205e:	2bff      	cmp	r3, #255	@ 0xff
 8012060:	d025      	beq.n	80120ae <USBD_LL_DataOutStage+0x15c>
 8012062:	7dbb      	ldrb	r3, [r7, #22]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d122      	bne.n	80120ae <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801206e:	b2db      	uxtb	r3, r3
 8012070:	2b03      	cmp	r3, #3
 8012072:	d117      	bne.n	80120a4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012074:	7dba      	ldrb	r2, [r7, #22]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	32ae      	adds	r2, #174	@ 0xae
 801207a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801207e:	699b      	ldr	r3, [r3, #24]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d00f      	beq.n	80120a4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012084:	7dba      	ldrb	r2, [r7, #22]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801208c:	7dba      	ldrb	r2, [r7, #22]
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	32ae      	adds	r2, #174	@ 0xae
 8012092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012096:	699b      	ldr	r3, [r3, #24]
 8012098:	7afa      	ldrb	r2, [r7, #11]
 801209a:	4611      	mov	r1, r2
 801209c:	68f8      	ldr	r0, [r7, #12]
 801209e:	4798      	blx	r3
 80120a0:	4603      	mov	r3, r0
 80120a2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80120a4:	7dfb      	ldrb	r3, [r7, #23]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d001      	beq.n	80120ae <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80120aa:	7dfb      	ldrb	r3, [r7, #23]
 80120ac:	e000      	b.n	80120b0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80120ae:	2300      	movs	r3, #0
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3718      	adds	r7, #24
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b086      	sub	sp, #24
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	460b      	mov	r3, r1
 80120c2:	607a      	str	r2, [r7, #4]
 80120c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80120c6:	7afb      	ldrb	r3, [r7, #11]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d16f      	bne.n	80121ac <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	3314      	adds	r3, #20
 80120d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80120d8:	2b02      	cmp	r3, #2
 80120da:	d15a      	bne.n	8012192 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	689a      	ldr	r2, [r3, #8]
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d914      	bls.n	8012112 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	689a      	ldr	r2, [r3, #8]
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	1ad2      	subs	r2, r2, r3
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	689b      	ldr	r3, [r3, #8]
 80120fa:	461a      	mov	r2, r3
 80120fc:	6879      	ldr	r1, [r7, #4]
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f001 f8e5 	bl	80132ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012104:	2300      	movs	r3, #0
 8012106:	2200      	movs	r2, #0
 8012108:	2100      	movs	r1, #0
 801210a:	68f8      	ldr	r0, [r7, #12]
 801210c:	f001 fe43 	bl	8013d96 <USBD_LL_PrepareReceive>
 8012110:	e03f      	b.n	8012192 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	68da      	ldr	r2, [r3, #12]
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	689b      	ldr	r3, [r3, #8]
 801211a:	429a      	cmp	r2, r3
 801211c:	d11c      	bne.n	8012158 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	685a      	ldr	r2, [r3, #4]
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012126:	429a      	cmp	r2, r3
 8012128:	d316      	bcc.n	8012158 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	685a      	ldr	r2, [r3, #4]
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012134:	429a      	cmp	r2, r3
 8012136:	d20f      	bcs.n	8012158 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012138:	2200      	movs	r2, #0
 801213a:	2100      	movs	r1, #0
 801213c:	68f8      	ldr	r0, [r7, #12]
 801213e:	f001 f8c6 	bl	80132ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2200      	movs	r2, #0
 8012146:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801214a:	2300      	movs	r3, #0
 801214c:	2200      	movs	r2, #0
 801214e:	2100      	movs	r1, #0
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f001 fe20 	bl	8013d96 <USBD_LL_PrepareReceive>
 8012156:	e01c      	b.n	8012192 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801215e:	b2db      	uxtb	r3, r3
 8012160:	2b03      	cmp	r3, #3
 8012162:	d10f      	bne.n	8012184 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801216a:	68db      	ldr	r3, [r3, #12]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d009      	beq.n	8012184 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	2200      	movs	r2, #0
 8012174:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	68f8      	ldr	r0, [r7, #12]
 8012182:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012184:	2180      	movs	r1, #128	@ 0x80
 8012186:	68f8      	ldr	r0, [r7, #12]
 8012188:	f001 fd5b 	bl	8013c42 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f001 f8d3 	bl	8013338 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012198:	2b00      	cmp	r3, #0
 801219a:	d03a      	beq.n	8012212 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801219c:	68f8      	ldr	r0, [r7, #12]
 801219e:	f7ff fe42 	bl	8011e26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	2200      	movs	r2, #0
 80121a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80121aa:	e032      	b.n	8012212 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80121ac:	7afb      	ldrb	r3, [r7, #11]
 80121ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80121b2:	b2db      	uxtb	r3, r3
 80121b4:	4619      	mov	r1, r3
 80121b6:	68f8      	ldr	r0, [r7, #12]
 80121b8:	f000 f985 	bl	80124c6 <USBD_CoreFindEP>
 80121bc:	4603      	mov	r3, r0
 80121be:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80121c0:	7dfb      	ldrb	r3, [r7, #23]
 80121c2:	2bff      	cmp	r3, #255	@ 0xff
 80121c4:	d025      	beq.n	8012212 <USBD_LL_DataInStage+0x15a>
 80121c6:	7dfb      	ldrb	r3, [r7, #23]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d122      	bne.n	8012212 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	2b03      	cmp	r3, #3
 80121d6:	d11c      	bne.n	8012212 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80121d8:	7dfa      	ldrb	r2, [r7, #23]
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	32ae      	adds	r2, #174	@ 0xae
 80121de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121e2:	695b      	ldr	r3, [r3, #20]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d014      	beq.n	8012212 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80121e8:	7dfa      	ldrb	r2, [r7, #23]
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80121f0:	7dfa      	ldrb	r2, [r7, #23]
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	32ae      	adds	r2, #174	@ 0xae
 80121f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121fa:	695b      	ldr	r3, [r3, #20]
 80121fc:	7afa      	ldrb	r2, [r7, #11]
 80121fe:	4611      	mov	r1, r2
 8012200:	68f8      	ldr	r0, [r7, #12]
 8012202:	4798      	blx	r3
 8012204:	4603      	mov	r3, r0
 8012206:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012208:	7dbb      	ldrb	r3, [r7, #22]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d001      	beq.n	8012212 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801220e:	7dbb      	ldrb	r3, [r7, #22]
 8012210:	e000      	b.n	8012214 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012212:	2300      	movs	r3, #0
}
 8012214:	4618      	mov	r0, r3
 8012216:	3718      	adds	r7, #24
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012224:	2300      	movs	r3, #0
 8012226:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2201      	movs	r2, #1
 801222c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2200      	movs	r2, #0
 8012234:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2200      	movs	r2, #0
 801223c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2200      	movs	r2, #0
 8012242:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2200      	movs	r2, #0
 801224a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012254:	2b00      	cmp	r3, #0
 8012256:	d014      	beq.n	8012282 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d00e      	beq.n	8012282 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	6852      	ldr	r2, [r2, #4]
 8012270:	b2d2      	uxtb	r2, r2
 8012272:	4611      	mov	r1, r2
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	4798      	blx	r3
 8012278:	4603      	mov	r3, r0
 801227a:	2b00      	cmp	r3, #0
 801227c:	d001      	beq.n	8012282 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801227e:	2303      	movs	r3, #3
 8012280:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012282:	2340      	movs	r3, #64	@ 0x40
 8012284:	2200      	movs	r2, #0
 8012286:	2100      	movs	r1, #0
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f001 fc76 	bl	8013b7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2201      	movs	r2, #1
 8012292:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2240      	movs	r2, #64	@ 0x40
 801229a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801229e:	2340      	movs	r3, #64	@ 0x40
 80122a0:	2200      	movs	r2, #0
 80122a2:	2180      	movs	r1, #128	@ 0x80
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f001 fc68 	bl	8013b7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2201      	movs	r2, #1
 80122ae:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2240      	movs	r2, #64	@ 0x40
 80122b4:	621a      	str	r2, [r3, #32]

  return ret;
 80122b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80122b8:	4618      	mov	r0, r3
 80122ba:	3710      	adds	r7, #16
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}

080122c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80122c0:	b480      	push	{r7}
 80122c2:	b083      	sub	sp, #12
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
 80122c8:	460b      	mov	r3, r1
 80122ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	78fa      	ldrb	r2, [r7, #3]
 80122d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80122d2:	2300      	movs	r3, #0
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	370c      	adds	r7, #12
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122ee:	b2db      	uxtb	r3, r3
 80122f0:	2b04      	cmp	r3, #4
 80122f2:	d006      	beq.n	8012302 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122fa:	b2da      	uxtb	r2, r3
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	2204      	movs	r2, #4
 8012306:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801230a:	2300      	movs	r3, #0
}
 801230c:	4618      	mov	r0, r3
 801230e:	370c      	adds	r7, #12
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr

08012318 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012318:	b480      	push	{r7}
 801231a:	b083      	sub	sp, #12
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012326:	b2db      	uxtb	r3, r3
 8012328:	2b04      	cmp	r3, #4
 801232a:	d106      	bne.n	801233a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012332:	b2da      	uxtb	r2, r3
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801233a:	2300      	movs	r3, #0
}
 801233c:	4618      	mov	r0, r3
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr

08012348 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012356:	b2db      	uxtb	r3, r3
 8012358:	2b03      	cmp	r3, #3
 801235a:	d110      	bne.n	801237e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012362:	2b00      	cmp	r3, #0
 8012364:	d00b      	beq.n	801237e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801236c:	69db      	ldr	r3, [r3, #28]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d005      	beq.n	801237e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012378:	69db      	ldr	r3, [r3, #28]
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801237e:	2300      	movs	r3, #0
}
 8012380:	4618      	mov	r0, r3
 8012382:	3708      	adds	r7, #8
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	460b      	mov	r3, r1
 8012392:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	32ae      	adds	r2, #174	@ 0xae
 801239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d101      	bne.n	80123aa <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80123a6:	2303      	movs	r3, #3
 80123a8:	e01c      	b.n	80123e4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	2b03      	cmp	r3, #3
 80123b4:	d115      	bne.n	80123e2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	32ae      	adds	r2, #174	@ 0xae
 80123c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123c4:	6a1b      	ldr	r3, [r3, #32]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d00b      	beq.n	80123e2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	32ae      	adds	r2, #174	@ 0xae
 80123d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123d8:	6a1b      	ldr	r3, [r3, #32]
 80123da:	78fa      	ldrb	r2, [r7, #3]
 80123dc:	4611      	mov	r1, r2
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80123e2:	2300      	movs	r3, #0
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3708      	adds	r7, #8
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	460b      	mov	r3, r1
 80123f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	32ae      	adds	r2, #174	@ 0xae
 8012402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d101      	bne.n	801240e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801240a:	2303      	movs	r3, #3
 801240c:	e01c      	b.n	8012448 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012414:	b2db      	uxtb	r3, r3
 8012416:	2b03      	cmp	r3, #3
 8012418:	d115      	bne.n	8012446 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	32ae      	adds	r2, #174	@ 0xae
 8012424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801242a:	2b00      	cmp	r3, #0
 801242c:	d00b      	beq.n	8012446 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	32ae      	adds	r2, #174	@ 0xae
 8012438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801243e:	78fa      	ldrb	r2, [r7, #3]
 8012440:	4611      	mov	r1, r2
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012446:	2300      	movs	r3, #0
}
 8012448:	4618      	mov	r0, r3
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012450:	b480      	push	{r7}
 8012452:	b083      	sub	sp, #12
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	370c      	adds	r7, #12
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr

08012466 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012466:	b580      	push	{r7, lr}
 8012468:	b084      	sub	sp, #16
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801246e:	2300      	movs	r3, #0
 8012470:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2201      	movs	r2, #1
 8012476:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012480:	2b00      	cmp	r3, #0
 8012482:	d00e      	beq.n	80124a2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	6852      	ldr	r2, [r2, #4]
 8012490:	b2d2      	uxtb	r2, r2
 8012492:	4611      	mov	r1, r2
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	4798      	blx	r3
 8012498:	4603      	mov	r3, r0
 801249a:	2b00      	cmp	r3, #0
 801249c:	d001      	beq.n	80124a2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801249e:	2303      	movs	r3, #3
 80124a0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80124a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	3710      	adds	r7, #16
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80124ac:	b480      	push	{r7}
 80124ae:	b083      	sub	sp, #12
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	460b      	mov	r3, r1
 80124b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80124b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	370c      	adds	r7, #12
 80124be:	46bd      	mov	sp, r7
 80124c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c4:	4770      	bx	lr

080124c6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80124c6:	b480      	push	{r7}
 80124c8:	b083      	sub	sp, #12
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
 80124ce:	460b      	mov	r3, r1
 80124d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80124d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	370c      	adds	r7, #12
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr

080124e0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b086      	sub	sp, #24
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	460b      	mov	r3, r1
 80124ea:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80124f4:	2300      	movs	r3, #0
 80124f6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	885b      	ldrh	r3, [r3, #2]
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	7812      	ldrb	r2, [r2, #0]
 8012502:	4293      	cmp	r3, r2
 8012504:	d91f      	bls.n	8012546 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801250c:	e013      	b.n	8012536 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801250e:	f107 030a 	add.w	r3, r7, #10
 8012512:	4619      	mov	r1, r3
 8012514:	6978      	ldr	r0, [r7, #20]
 8012516:	f000 f81b 	bl	8012550 <USBD_GetNextDesc>
 801251a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	785b      	ldrb	r3, [r3, #1]
 8012520:	2b05      	cmp	r3, #5
 8012522:	d108      	bne.n	8012536 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	789b      	ldrb	r3, [r3, #2]
 801252c:	78fa      	ldrb	r2, [r7, #3]
 801252e:	429a      	cmp	r2, r3
 8012530:	d008      	beq.n	8012544 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012532:	2300      	movs	r3, #0
 8012534:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	885b      	ldrh	r3, [r3, #2]
 801253a:	b29a      	uxth	r2, r3
 801253c:	897b      	ldrh	r3, [r7, #10]
 801253e:	429a      	cmp	r2, r3
 8012540:	d8e5      	bhi.n	801250e <USBD_GetEpDesc+0x2e>
 8012542:	e000      	b.n	8012546 <USBD_GetEpDesc+0x66>
          break;
 8012544:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012546:	693b      	ldr	r3, [r7, #16]
}
 8012548:	4618      	mov	r0, r3
 801254a:	3718      	adds	r7, #24
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012550:	b480      	push	{r7}
 8012552:	b085      	sub	sp, #20
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	881b      	ldrh	r3, [r3, #0]
 8012562:	68fa      	ldr	r2, [r7, #12]
 8012564:	7812      	ldrb	r2, [r2, #0]
 8012566:	4413      	add	r3, r2
 8012568:	b29a      	uxth	r2, r3
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	461a      	mov	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	4413      	add	r3, r2
 8012578:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801257a:	68fb      	ldr	r3, [r7, #12]
}
 801257c:	4618      	mov	r0, r3
 801257e:	3714      	adds	r7, #20
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr

08012588 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012588:	b480      	push	{r7}
 801258a:	b087      	sub	sp, #28
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	781b      	ldrb	r3, [r3, #0]
 8012598:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	3301      	adds	r3, #1
 801259e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80125a6:	8a3b      	ldrh	r3, [r7, #16]
 80125a8:	021b      	lsls	r3, r3, #8
 80125aa:	b21a      	sxth	r2, r3
 80125ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80125b0:	4313      	orrs	r3, r2
 80125b2:	b21b      	sxth	r3, r3
 80125b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80125b6:	89fb      	ldrh	r3, [r7, #14]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	371c      	adds	r7, #28
 80125bc:	46bd      	mov	sp, r7
 80125be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c2:	4770      	bx	lr

080125c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80125ce:	2300      	movs	r3, #0
 80125d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80125da:	2b40      	cmp	r3, #64	@ 0x40
 80125dc:	d005      	beq.n	80125ea <USBD_StdDevReq+0x26>
 80125de:	2b40      	cmp	r3, #64	@ 0x40
 80125e0:	d857      	bhi.n	8012692 <USBD_StdDevReq+0xce>
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00f      	beq.n	8012606 <USBD_StdDevReq+0x42>
 80125e6:	2b20      	cmp	r3, #32
 80125e8:	d153      	bne.n	8012692 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	32ae      	adds	r2, #174	@ 0xae
 80125f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125f8:	689b      	ldr	r3, [r3, #8]
 80125fa:	6839      	ldr	r1, [r7, #0]
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	4798      	blx	r3
 8012600:	4603      	mov	r3, r0
 8012602:	73fb      	strb	r3, [r7, #15]
      break;
 8012604:	e04a      	b.n	801269c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	785b      	ldrb	r3, [r3, #1]
 801260a:	2b09      	cmp	r3, #9
 801260c:	d83b      	bhi.n	8012686 <USBD_StdDevReq+0xc2>
 801260e:	a201      	add	r2, pc, #4	@ (adr r2, 8012614 <USBD_StdDevReq+0x50>)
 8012610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012614:	08012669 	.word	0x08012669
 8012618:	0801267d 	.word	0x0801267d
 801261c:	08012687 	.word	0x08012687
 8012620:	08012673 	.word	0x08012673
 8012624:	08012687 	.word	0x08012687
 8012628:	08012647 	.word	0x08012647
 801262c:	0801263d 	.word	0x0801263d
 8012630:	08012687 	.word	0x08012687
 8012634:	0801265f 	.word	0x0801265f
 8012638:	08012651 	.word	0x08012651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801263c:	6839      	ldr	r1, [r7, #0]
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f000 fa3c 	bl	8012abc <USBD_GetDescriptor>
          break;
 8012644:	e024      	b.n	8012690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012646:	6839      	ldr	r1, [r7, #0]
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f000 fbcb 	bl	8012de4 <USBD_SetAddress>
          break;
 801264e:	e01f      	b.n	8012690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012650:	6839      	ldr	r1, [r7, #0]
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 fc0a 	bl	8012e6c <USBD_SetConfig>
 8012658:	4603      	mov	r3, r0
 801265a:	73fb      	strb	r3, [r7, #15]
          break;
 801265c:	e018      	b.n	8012690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801265e:	6839      	ldr	r1, [r7, #0]
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 fcad 	bl	8012fc0 <USBD_GetConfig>
          break;
 8012666:	e013      	b.n	8012690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012668:	6839      	ldr	r1, [r7, #0]
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f000 fcde 	bl	801302c <USBD_GetStatus>
          break;
 8012670:	e00e      	b.n	8012690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012672:	6839      	ldr	r1, [r7, #0]
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f000 fd0d 	bl	8013094 <USBD_SetFeature>
          break;
 801267a:	e009      	b.n	8012690 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801267c:	6839      	ldr	r1, [r7, #0]
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	f000 fd31 	bl	80130e6 <USBD_ClrFeature>
          break;
 8012684:	e004      	b.n	8012690 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012686:	6839      	ldr	r1, [r7, #0]
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 fd88 	bl	801319e <USBD_CtlError>
          break;
 801268e:	bf00      	nop
      }
      break;
 8012690:	e004      	b.n	801269c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012692:	6839      	ldr	r1, [r7, #0]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f000 fd82 	bl	801319e <USBD_CtlError>
      break;
 801269a:	bf00      	nop
  }

  return ret;
 801269c:	7bfb      	ldrb	r3, [r7, #15]
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3710      	adds	r7, #16
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop

080126a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80126b2:	2300      	movs	r3, #0
 80126b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80126be:	2b40      	cmp	r3, #64	@ 0x40
 80126c0:	d005      	beq.n	80126ce <USBD_StdItfReq+0x26>
 80126c2:	2b40      	cmp	r3, #64	@ 0x40
 80126c4:	d852      	bhi.n	801276c <USBD_StdItfReq+0xc4>
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d001      	beq.n	80126ce <USBD_StdItfReq+0x26>
 80126ca:	2b20      	cmp	r3, #32
 80126cc:	d14e      	bne.n	801276c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	3b01      	subs	r3, #1
 80126d8:	2b02      	cmp	r3, #2
 80126da:	d840      	bhi.n	801275e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	889b      	ldrh	r3, [r3, #4]
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	2b01      	cmp	r3, #1
 80126e4:	d836      	bhi.n	8012754 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	889b      	ldrh	r3, [r3, #4]
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	4619      	mov	r1, r3
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7ff fedc 	bl	80124ac <USBD_CoreFindIF>
 80126f4:	4603      	mov	r3, r0
 80126f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80126f8:	7bbb      	ldrb	r3, [r7, #14]
 80126fa:	2bff      	cmp	r3, #255	@ 0xff
 80126fc:	d01d      	beq.n	801273a <USBD_StdItfReq+0x92>
 80126fe:	7bbb      	ldrb	r3, [r7, #14]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d11a      	bne.n	801273a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012704:	7bba      	ldrb	r2, [r7, #14]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	32ae      	adds	r2, #174	@ 0xae
 801270a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801270e:	689b      	ldr	r3, [r3, #8]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d00f      	beq.n	8012734 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012714:	7bba      	ldrb	r2, [r7, #14]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801271c:	7bba      	ldrb	r2, [r7, #14]
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	32ae      	adds	r2, #174	@ 0xae
 8012722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012726:	689b      	ldr	r3, [r3, #8]
 8012728:	6839      	ldr	r1, [r7, #0]
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	4798      	blx	r3
 801272e:	4603      	mov	r3, r0
 8012730:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012732:	e004      	b.n	801273e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012734:	2303      	movs	r3, #3
 8012736:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012738:	e001      	b.n	801273e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801273a:	2303      	movs	r3, #3
 801273c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	88db      	ldrh	r3, [r3, #6]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d110      	bne.n	8012768 <USBD_StdItfReq+0xc0>
 8012746:	7bfb      	ldrb	r3, [r7, #15]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d10d      	bne.n	8012768 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f000 fde0 	bl	8013312 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012752:	e009      	b.n	8012768 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012754:	6839      	ldr	r1, [r7, #0]
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f000 fd21 	bl	801319e <USBD_CtlError>
          break;
 801275c:	e004      	b.n	8012768 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801275e:	6839      	ldr	r1, [r7, #0]
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f000 fd1c 	bl	801319e <USBD_CtlError>
          break;
 8012766:	e000      	b.n	801276a <USBD_StdItfReq+0xc2>
          break;
 8012768:	bf00      	nop
      }
      break;
 801276a:	e004      	b.n	8012776 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801276c:	6839      	ldr	r1, [r7, #0]
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f000 fd15 	bl	801319e <USBD_CtlError>
      break;
 8012774:	bf00      	nop
  }

  return ret;
 8012776:	7bfb      	ldrb	r3, [r7, #15]
}
 8012778:	4618      	mov	r0, r3
 801277a:	3710      	adds	r7, #16
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}

08012780 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b084      	sub	sp, #16
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
 8012788:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801278a:	2300      	movs	r3, #0
 801278c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	889b      	ldrh	r3, [r3, #4]
 8012792:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801279c:	2b40      	cmp	r3, #64	@ 0x40
 801279e:	d007      	beq.n	80127b0 <USBD_StdEPReq+0x30>
 80127a0:	2b40      	cmp	r3, #64	@ 0x40
 80127a2:	f200 817f 	bhi.w	8012aa4 <USBD_StdEPReq+0x324>
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d02a      	beq.n	8012800 <USBD_StdEPReq+0x80>
 80127aa:	2b20      	cmp	r3, #32
 80127ac:	f040 817a 	bne.w	8012aa4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80127b0:	7bbb      	ldrb	r3, [r7, #14]
 80127b2:	4619      	mov	r1, r3
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f7ff fe86 	bl	80124c6 <USBD_CoreFindEP>
 80127ba:	4603      	mov	r3, r0
 80127bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80127be:	7b7b      	ldrb	r3, [r7, #13]
 80127c0:	2bff      	cmp	r3, #255	@ 0xff
 80127c2:	f000 8174 	beq.w	8012aae <USBD_StdEPReq+0x32e>
 80127c6:	7b7b      	ldrb	r3, [r7, #13]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	f040 8170 	bne.w	8012aae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80127ce:	7b7a      	ldrb	r2, [r7, #13]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80127d6:	7b7a      	ldrb	r2, [r7, #13]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	32ae      	adds	r2, #174	@ 0xae
 80127dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127e0:	689b      	ldr	r3, [r3, #8]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	f000 8163 	beq.w	8012aae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80127e8:	7b7a      	ldrb	r2, [r7, #13]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	32ae      	adds	r2, #174	@ 0xae
 80127ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	6839      	ldr	r1, [r7, #0]
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	4798      	blx	r3
 80127fa:	4603      	mov	r3, r0
 80127fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80127fe:	e156      	b.n	8012aae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	785b      	ldrb	r3, [r3, #1]
 8012804:	2b03      	cmp	r3, #3
 8012806:	d008      	beq.n	801281a <USBD_StdEPReq+0x9a>
 8012808:	2b03      	cmp	r3, #3
 801280a:	f300 8145 	bgt.w	8012a98 <USBD_StdEPReq+0x318>
 801280e:	2b00      	cmp	r3, #0
 8012810:	f000 809b 	beq.w	801294a <USBD_StdEPReq+0x1ca>
 8012814:	2b01      	cmp	r3, #1
 8012816:	d03c      	beq.n	8012892 <USBD_StdEPReq+0x112>
 8012818:	e13e      	b.n	8012a98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012820:	b2db      	uxtb	r3, r3
 8012822:	2b02      	cmp	r3, #2
 8012824:	d002      	beq.n	801282c <USBD_StdEPReq+0xac>
 8012826:	2b03      	cmp	r3, #3
 8012828:	d016      	beq.n	8012858 <USBD_StdEPReq+0xd8>
 801282a:	e02c      	b.n	8012886 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801282c:	7bbb      	ldrb	r3, [r7, #14]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d00d      	beq.n	801284e <USBD_StdEPReq+0xce>
 8012832:	7bbb      	ldrb	r3, [r7, #14]
 8012834:	2b80      	cmp	r3, #128	@ 0x80
 8012836:	d00a      	beq.n	801284e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012838:	7bbb      	ldrb	r3, [r7, #14]
 801283a:	4619      	mov	r1, r3
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f001 fa00 	bl	8013c42 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012842:	2180      	movs	r1, #128	@ 0x80
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f001 f9fc 	bl	8013c42 <USBD_LL_StallEP>
 801284a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801284c:	e020      	b.n	8012890 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801284e:	6839      	ldr	r1, [r7, #0]
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f000 fca4 	bl	801319e <USBD_CtlError>
              break;
 8012856:	e01b      	b.n	8012890 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	885b      	ldrh	r3, [r3, #2]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d10e      	bne.n	801287e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012860:	7bbb      	ldrb	r3, [r7, #14]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d00b      	beq.n	801287e <USBD_StdEPReq+0xfe>
 8012866:	7bbb      	ldrb	r3, [r7, #14]
 8012868:	2b80      	cmp	r3, #128	@ 0x80
 801286a:	d008      	beq.n	801287e <USBD_StdEPReq+0xfe>
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	88db      	ldrh	r3, [r3, #6]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d104      	bne.n	801287e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012874:	7bbb      	ldrb	r3, [r7, #14]
 8012876:	4619      	mov	r1, r3
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f001 f9e2 	bl	8013c42 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f000 fd47 	bl	8013312 <USBD_CtlSendStatus>

              break;
 8012884:	e004      	b.n	8012890 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012886:	6839      	ldr	r1, [r7, #0]
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f000 fc88 	bl	801319e <USBD_CtlError>
              break;
 801288e:	bf00      	nop
          }
          break;
 8012890:	e107      	b.n	8012aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012898:	b2db      	uxtb	r3, r3
 801289a:	2b02      	cmp	r3, #2
 801289c:	d002      	beq.n	80128a4 <USBD_StdEPReq+0x124>
 801289e:	2b03      	cmp	r3, #3
 80128a0:	d016      	beq.n	80128d0 <USBD_StdEPReq+0x150>
 80128a2:	e04b      	b.n	801293c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80128a4:	7bbb      	ldrb	r3, [r7, #14]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d00d      	beq.n	80128c6 <USBD_StdEPReq+0x146>
 80128aa:	7bbb      	ldrb	r3, [r7, #14]
 80128ac:	2b80      	cmp	r3, #128	@ 0x80
 80128ae:	d00a      	beq.n	80128c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80128b0:	7bbb      	ldrb	r3, [r7, #14]
 80128b2:	4619      	mov	r1, r3
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f001 f9c4 	bl	8013c42 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80128ba:	2180      	movs	r1, #128	@ 0x80
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f001 f9c0 	bl	8013c42 <USBD_LL_StallEP>
 80128c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80128c4:	e040      	b.n	8012948 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80128c6:	6839      	ldr	r1, [r7, #0]
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f000 fc68 	bl	801319e <USBD_CtlError>
              break;
 80128ce:	e03b      	b.n	8012948 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	885b      	ldrh	r3, [r3, #2]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d136      	bne.n	8012946 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80128d8:	7bbb      	ldrb	r3, [r7, #14]
 80128da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d004      	beq.n	80128ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80128e2:	7bbb      	ldrb	r3, [r7, #14]
 80128e4:	4619      	mov	r1, r3
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f001 f9ca 	bl	8013c80 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f000 fd10 	bl	8013312 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80128f2:	7bbb      	ldrb	r3, [r7, #14]
 80128f4:	4619      	mov	r1, r3
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f7ff fde5 	bl	80124c6 <USBD_CoreFindEP>
 80128fc:	4603      	mov	r3, r0
 80128fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012900:	7b7b      	ldrb	r3, [r7, #13]
 8012902:	2bff      	cmp	r3, #255	@ 0xff
 8012904:	d01f      	beq.n	8012946 <USBD_StdEPReq+0x1c6>
 8012906:	7b7b      	ldrb	r3, [r7, #13]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d11c      	bne.n	8012946 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801290c:	7b7a      	ldrb	r2, [r7, #13]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012914:	7b7a      	ldrb	r2, [r7, #13]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	32ae      	adds	r2, #174	@ 0xae
 801291a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801291e:	689b      	ldr	r3, [r3, #8]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d010      	beq.n	8012946 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012924:	7b7a      	ldrb	r2, [r7, #13]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	32ae      	adds	r2, #174	@ 0xae
 801292a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801292e:	689b      	ldr	r3, [r3, #8]
 8012930:	6839      	ldr	r1, [r7, #0]
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	4798      	blx	r3
 8012936:	4603      	mov	r3, r0
 8012938:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801293a:	e004      	b.n	8012946 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801293c:	6839      	ldr	r1, [r7, #0]
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f000 fc2d 	bl	801319e <USBD_CtlError>
              break;
 8012944:	e000      	b.n	8012948 <USBD_StdEPReq+0x1c8>
              break;
 8012946:	bf00      	nop
          }
          break;
 8012948:	e0ab      	b.n	8012aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012950:	b2db      	uxtb	r3, r3
 8012952:	2b02      	cmp	r3, #2
 8012954:	d002      	beq.n	801295c <USBD_StdEPReq+0x1dc>
 8012956:	2b03      	cmp	r3, #3
 8012958:	d032      	beq.n	80129c0 <USBD_StdEPReq+0x240>
 801295a:	e097      	b.n	8012a8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801295c:	7bbb      	ldrb	r3, [r7, #14]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d007      	beq.n	8012972 <USBD_StdEPReq+0x1f2>
 8012962:	7bbb      	ldrb	r3, [r7, #14]
 8012964:	2b80      	cmp	r3, #128	@ 0x80
 8012966:	d004      	beq.n	8012972 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012968:	6839      	ldr	r1, [r7, #0]
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f000 fc17 	bl	801319e <USBD_CtlError>
                break;
 8012970:	e091      	b.n	8012a96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012976:	2b00      	cmp	r3, #0
 8012978:	da0b      	bge.n	8012992 <USBD_StdEPReq+0x212>
 801297a:	7bbb      	ldrb	r3, [r7, #14]
 801297c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012980:	4613      	mov	r3, r2
 8012982:	009b      	lsls	r3, r3, #2
 8012984:	4413      	add	r3, r2
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	3310      	adds	r3, #16
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	4413      	add	r3, r2
 801298e:	3304      	adds	r3, #4
 8012990:	e00b      	b.n	80129aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012992:	7bbb      	ldrb	r3, [r7, #14]
 8012994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012998:	4613      	mov	r3, r2
 801299a:	009b      	lsls	r3, r3, #2
 801299c:	4413      	add	r3, r2
 801299e:	009b      	lsls	r3, r3, #2
 80129a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	4413      	add	r3, r2
 80129a8:	3304      	adds	r3, #4
 80129aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	2200      	movs	r2, #0
 80129b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	2202      	movs	r2, #2
 80129b6:	4619      	mov	r1, r3
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f000 fc6d 	bl	8013298 <USBD_CtlSendData>
              break;
 80129be:	e06a      	b.n	8012a96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80129c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	da11      	bge.n	80129ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80129c8:	7bbb      	ldrb	r3, [r7, #14]
 80129ca:	f003 020f 	and.w	r2, r3, #15
 80129ce:	6879      	ldr	r1, [r7, #4]
 80129d0:	4613      	mov	r3, r2
 80129d2:	009b      	lsls	r3, r3, #2
 80129d4:	4413      	add	r3, r2
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	440b      	add	r3, r1
 80129da:	3324      	adds	r3, #36	@ 0x24
 80129dc:	881b      	ldrh	r3, [r3, #0]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d117      	bne.n	8012a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80129e2:	6839      	ldr	r1, [r7, #0]
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f000 fbda 	bl	801319e <USBD_CtlError>
                  break;
 80129ea:	e054      	b.n	8012a96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80129ec:	7bbb      	ldrb	r3, [r7, #14]
 80129ee:	f003 020f 	and.w	r2, r3, #15
 80129f2:	6879      	ldr	r1, [r7, #4]
 80129f4:	4613      	mov	r3, r2
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	4413      	add	r3, r2
 80129fa:	009b      	lsls	r3, r3, #2
 80129fc:	440b      	add	r3, r1
 80129fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012a02:	881b      	ldrh	r3, [r3, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d104      	bne.n	8012a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012a08:	6839      	ldr	r1, [r7, #0]
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f000 fbc7 	bl	801319e <USBD_CtlError>
                  break;
 8012a10:	e041      	b.n	8012a96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	da0b      	bge.n	8012a32 <USBD_StdEPReq+0x2b2>
 8012a1a:	7bbb      	ldrb	r3, [r7, #14]
 8012a1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012a20:	4613      	mov	r3, r2
 8012a22:	009b      	lsls	r3, r3, #2
 8012a24:	4413      	add	r3, r2
 8012a26:	009b      	lsls	r3, r3, #2
 8012a28:	3310      	adds	r3, #16
 8012a2a:	687a      	ldr	r2, [r7, #4]
 8012a2c:	4413      	add	r3, r2
 8012a2e:	3304      	adds	r3, #4
 8012a30:	e00b      	b.n	8012a4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012a32:	7bbb      	ldrb	r3, [r7, #14]
 8012a34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a38:	4613      	mov	r3, r2
 8012a3a:	009b      	lsls	r3, r3, #2
 8012a3c:	4413      	add	r3, r2
 8012a3e:	009b      	lsls	r3, r3, #2
 8012a40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	4413      	add	r3, r2
 8012a48:	3304      	adds	r3, #4
 8012a4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012a4c:	7bbb      	ldrb	r3, [r7, #14]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d002      	beq.n	8012a58 <USBD_StdEPReq+0x2d8>
 8012a52:	7bbb      	ldrb	r3, [r7, #14]
 8012a54:	2b80      	cmp	r3, #128	@ 0x80
 8012a56:	d103      	bne.n	8012a60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	601a      	str	r2, [r3, #0]
 8012a5e:	e00e      	b.n	8012a7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012a60:	7bbb      	ldrb	r3, [r7, #14]
 8012a62:	4619      	mov	r1, r3
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f001 f92a 	bl	8013cbe <USBD_LL_IsStallEP>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d003      	beq.n	8012a78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	2201      	movs	r2, #1
 8012a74:	601a      	str	r2, [r3, #0]
 8012a76:	e002      	b.n	8012a7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	2202      	movs	r2, #2
 8012a82:	4619      	mov	r1, r3
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f000 fc07 	bl	8013298 <USBD_CtlSendData>
              break;
 8012a8a:	e004      	b.n	8012a96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012a8c:	6839      	ldr	r1, [r7, #0]
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f000 fb85 	bl	801319e <USBD_CtlError>
              break;
 8012a94:	bf00      	nop
          }
          break;
 8012a96:	e004      	b.n	8012aa2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012a98:	6839      	ldr	r1, [r7, #0]
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f000 fb7f 	bl	801319e <USBD_CtlError>
          break;
 8012aa0:	bf00      	nop
      }
      break;
 8012aa2:	e005      	b.n	8012ab0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012aa4:	6839      	ldr	r1, [r7, #0]
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f000 fb79 	bl	801319e <USBD_CtlError>
      break;
 8012aac:	e000      	b.n	8012ab0 <USBD_StdEPReq+0x330>
      break;
 8012aae:	bf00      	nop
  }

  return ret;
 8012ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3710      	adds	r7, #16
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}
	...

08012abc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012aca:	2300      	movs	r3, #0
 8012acc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	885b      	ldrh	r3, [r3, #2]
 8012ad6:	0a1b      	lsrs	r3, r3, #8
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	3b01      	subs	r3, #1
 8012adc:	2b0e      	cmp	r3, #14
 8012ade:	f200 8152 	bhi.w	8012d86 <USBD_GetDescriptor+0x2ca>
 8012ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8012ae8 <USBD_GetDescriptor+0x2c>)
 8012ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ae8:	08012b59 	.word	0x08012b59
 8012aec:	08012b71 	.word	0x08012b71
 8012af0:	08012bb1 	.word	0x08012bb1
 8012af4:	08012d87 	.word	0x08012d87
 8012af8:	08012d87 	.word	0x08012d87
 8012afc:	08012d27 	.word	0x08012d27
 8012b00:	08012d53 	.word	0x08012d53
 8012b04:	08012d87 	.word	0x08012d87
 8012b08:	08012d87 	.word	0x08012d87
 8012b0c:	08012d87 	.word	0x08012d87
 8012b10:	08012d87 	.word	0x08012d87
 8012b14:	08012d87 	.word	0x08012d87
 8012b18:	08012d87 	.word	0x08012d87
 8012b1c:	08012d87 	.word	0x08012d87
 8012b20:	08012b25 	.word	0x08012b25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b2a:	69db      	ldr	r3, [r3, #28]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d00b      	beq.n	8012b48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b36:	69db      	ldr	r3, [r3, #28]
 8012b38:	687a      	ldr	r2, [r7, #4]
 8012b3a:	7c12      	ldrb	r2, [r2, #16]
 8012b3c:	f107 0108 	add.w	r1, r7, #8
 8012b40:	4610      	mov	r0, r2
 8012b42:	4798      	blx	r3
 8012b44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b46:	e126      	b.n	8012d96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012b48:	6839      	ldr	r1, [r7, #0]
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f000 fb27 	bl	801319e <USBD_CtlError>
        err++;
 8012b50:	7afb      	ldrb	r3, [r7, #11]
 8012b52:	3301      	adds	r3, #1
 8012b54:	72fb      	strb	r3, [r7, #11]
      break;
 8012b56:	e11e      	b.n	8012d96 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	7c12      	ldrb	r2, [r2, #16]
 8012b64:	f107 0108 	add.w	r1, r7, #8
 8012b68:	4610      	mov	r0, r2
 8012b6a:	4798      	blx	r3
 8012b6c:	60f8      	str	r0, [r7, #12]
      break;
 8012b6e:	e112      	b.n	8012d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	7c1b      	ldrb	r3, [r3, #16]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d10d      	bne.n	8012b94 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b80:	f107 0208 	add.w	r2, r7, #8
 8012b84:	4610      	mov	r0, r2
 8012b86:	4798      	blx	r3
 8012b88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	2202      	movs	r2, #2
 8012b90:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012b92:	e100      	b.n	8012d96 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b9c:	f107 0208 	add.w	r2, r7, #8
 8012ba0:	4610      	mov	r0, r2
 8012ba2:	4798      	blx	r3
 8012ba4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	2202      	movs	r2, #2
 8012bac:	701a      	strb	r2, [r3, #0]
      break;
 8012bae:	e0f2      	b.n	8012d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	885b      	ldrh	r3, [r3, #2]
 8012bb4:	b2db      	uxtb	r3, r3
 8012bb6:	2b05      	cmp	r3, #5
 8012bb8:	f200 80ac 	bhi.w	8012d14 <USBD_GetDescriptor+0x258>
 8012bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8012bc4 <USBD_GetDescriptor+0x108>)
 8012bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bc2:	bf00      	nop
 8012bc4:	08012bdd 	.word	0x08012bdd
 8012bc8:	08012c11 	.word	0x08012c11
 8012bcc:	08012c45 	.word	0x08012c45
 8012bd0:	08012c79 	.word	0x08012c79
 8012bd4:	08012cad 	.word	0x08012cad
 8012bd8:	08012ce1 	.word	0x08012ce1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d00b      	beq.n	8012c00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	687a      	ldr	r2, [r7, #4]
 8012bf2:	7c12      	ldrb	r2, [r2, #16]
 8012bf4:	f107 0108 	add.w	r1, r7, #8
 8012bf8:	4610      	mov	r0, r2
 8012bfa:	4798      	blx	r3
 8012bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bfe:	e091      	b.n	8012d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c00:	6839      	ldr	r1, [r7, #0]
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f000 facb 	bl	801319e <USBD_CtlError>
            err++;
 8012c08:	7afb      	ldrb	r3, [r7, #11]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8012c0e:	e089      	b.n	8012d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c16:	689b      	ldr	r3, [r3, #8]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d00b      	beq.n	8012c34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c22:	689b      	ldr	r3, [r3, #8]
 8012c24:	687a      	ldr	r2, [r7, #4]
 8012c26:	7c12      	ldrb	r2, [r2, #16]
 8012c28:	f107 0108 	add.w	r1, r7, #8
 8012c2c:	4610      	mov	r0, r2
 8012c2e:	4798      	blx	r3
 8012c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c32:	e077      	b.n	8012d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c34:	6839      	ldr	r1, [r7, #0]
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f000 fab1 	bl	801319e <USBD_CtlError>
            err++;
 8012c3c:	7afb      	ldrb	r3, [r7, #11]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	72fb      	strb	r3, [r7, #11]
          break;
 8012c42:	e06f      	b.n	8012d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d00b      	beq.n	8012c68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c56:	68db      	ldr	r3, [r3, #12]
 8012c58:	687a      	ldr	r2, [r7, #4]
 8012c5a:	7c12      	ldrb	r2, [r2, #16]
 8012c5c:	f107 0108 	add.w	r1, r7, #8
 8012c60:	4610      	mov	r0, r2
 8012c62:	4798      	blx	r3
 8012c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c66:	e05d      	b.n	8012d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c68:	6839      	ldr	r1, [r7, #0]
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 fa97 	bl	801319e <USBD_CtlError>
            err++;
 8012c70:	7afb      	ldrb	r3, [r7, #11]
 8012c72:	3301      	adds	r3, #1
 8012c74:	72fb      	strb	r3, [r7, #11]
          break;
 8012c76:	e055      	b.n	8012d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c7e:	691b      	ldr	r3, [r3, #16]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d00b      	beq.n	8012c9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c8a:	691b      	ldr	r3, [r3, #16]
 8012c8c:	687a      	ldr	r2, [r7, #4]
 8012c8e:	7c12      	ldrb	r2, [r2, #16]
 8012c90:	f107 0108 	add.w	r1, r7, #8
 8012c94:	4610      	mov	r0, r2
 8012c96:	4798      	blx	r3
 8012c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c9a:	e043      	b.n	8012d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c9c:	6839      	ldr	r1, [r7, #0]
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f000 fa7d 	bl	801319e <USBD_CtlError>
            err++;
 8012ca4:	7afb      	ldrb	r3, [r7, #11]
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8012caa:	e03b      	b.n	8012d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cb2:	695b      	ldr	r3, [r3, #20]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d00b      	beq.n	8012cd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cbe:	695b      	ldr	r3, [r3, #20]
 8012cc0:	687a      	ldr	r2, [r7, #4]
 8012cc2:	7c12      	ldrb	r2, [r2, #16]
 8012cc4:	f107 0108 	add.w	r1, r7, #8
 8012cc8:	4610      	mov	r0, r2
 8012cca:	4798      	blx	r3
 8012ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cce:	e029      	b.n	8012d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012cd0:	6839      	ldr	r1, [r7, #0]
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f000 fa63 	bl	801319e <USBD_CtlError>
            err++;
 8012cd8:	7afb      	ldrb	r3, [r7, #11]
 8012cda:	3301      	adds	r3, #1
 8012cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8012cde:	e021      	b.n	8012d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012ce6:	699b      	ldr	r3, [r3, #24]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d00b      	beq.n	8012d04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cf2:	699b      	ldr	r3, [r3, #24]
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	7c12      	ldrb	r2, [r2, #16]
 8012cf8:	f107 0108 	add.w	r1, r7, #8
 8012cfc:	4610      	mov	r0, r2
 8012cfe:	4798      	blx	r3
 8012d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012d02:	e00f      	b.n	8012d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012d04:	6839      	ldr	r1, [r7, #0]
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f000 fa49 	bl	801319e <USBD_CtlError>
            err++;
 8012d0c:	7afb      	ldrb	r3, [r7, #11]
 8012d0e:	3301      	adds	r3, #1
 8012d10:	72fb      	strb	r3, [r7, #11]
          break;
 8012d12:	e007      	b.n	8012d24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012d14:	6839      	ldr	r1, [r7, #0]
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f000 fa41 	bl	801319e <USBD_CtlError>
          err++;
 8012d1c:	7afb      	ldrb	r3, [r7, #11]
 8012d1e:	3301      	adds	r3, #1
 8012d20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012d22:	bf00      	nop
      }
      break;
 8012d24:	e037      	b.n	8012d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	7c1b      	ldrb	r3, [r3, #16]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d109      	bne.n	8012d42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d36:	f107 0208 	add.w	r2, r7, #8
 8012d3a:	4610      	mov	r0, r2
 8012d3c:	4798      	blx	r3
 8012d3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d40:	e029      	b.n	8012d96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d42:	6839      	ldr	r1, [r7, #0]
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f000 fa2a 	bl	801319e <USBD_CtlError>
        err++;
 8012d4a:	7afb      	ldrb	r3, [r7, #11]
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8012d50:	e021      	b.n	8012d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	7c1b      	ldrb	r3, [r3, #16]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d10d      	bne.n	8012d76 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d62:	f107 0208 	add.w	r2, r7, #8
 8012d66:	4610      	mov	r0, r2
 8012d68:	4798      	blx	r3
 8012d6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	2207      	movs	r2, #7
 8012d72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d74:	e00f      	b.n	8012d96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d76:	6839      	ldr	r1, [r7, #0]
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f000 fa10 	bl	801319e <USBD_CtlError>
        err++;
 8012d7e:	7afb      	ldrb	r3, [r7, #11]
 8012d80:	3301      	adds	r3, #1
 8012d82:	72fb      	strb	r3, [r7, #11]
      break;
 8012d84:	e007      	b.n	8012d96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012d86:	6839      	ldr	r1, [r7, #0]
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f000 fa08 	bl	801319e <USBD_CtlError>
      err++;
 8012d8e:	7afb      	ldrb	r3, [r7, #11]
 8012d90:	3301      	adds	r3, #1
 8012d92:	72fb      	strb	r3, [r7, #11]
      break;
 8012d94:	bf00      	nop
  }

  if (err != 0U)
 8012d96:	7afb      	ldrb	r3, [r7, #11]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d11e      	bne.n	8012dda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	88db      	ldrh	r3, [r3, #6]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d016      	beq.n	8012dd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012da4:	893b      	ldrh	r3, [r7, #8]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d00e      	beq.n	8012dc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	88da      	ldrh	r2, [r3, #6]
 8012dae:	893b      	ldrh	r3, [r7, #8]
 8012db0:	4293      	cmp	r3, r2
 8012db2:	bf28      	it	cs
 8012db4:	4613      	movcs	r3, r2
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012dba:	893b      	ldrh	r3, [r7, #8]
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	68f9      	ldr	r1, [r7, #12]
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f000 fa69 	bl	8013298 <USBD_CtlSendData>
 8012dc6:	e009      	b.n	8012ddc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012dc8:	6839      	ldr	r1, [r7, #0]
 8012dca:	6878      	ldr	r0, [r7, #4]
 8012dcc:	f000 f9e7 	bl	801319e <USBD_CtlError>
 8012dd0:	e004      	b.n	8012ddc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f000 fa9d 	bl	8013312 <USBD_CtlSendStatus>
 8012dd8:	e000      	b.n	8012ddc <USBD_GetDescriptor+0x320>
    return;
 8012dda:	bf00      	nop
  }
}
 8012ddc:	3710      	adds	r7, #16
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
 8012de2:	bf00      	nop

08012de4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	889b      	ldrh	r3, [r3, #4]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d131      	bne.n	8012e5a <USBD_SetAddress+0x76>
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	88db      	ldrh	r3, [r3, #6]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d12d      	bne.n	8012e5a <USBD_SetAddress+0x76>
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	885b      	ldrh	r3, [r3, #2]
 8012e02:	2b7f      	cmp	r3, #127	@ 0x7f
 8012e04:	d829      	bhi.n	8012e5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	885b      	ldrh	r3, [r3, #2]
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012e10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e18:	b2db      	uxtb	r3, r3
 8012e1a:	2b03      	cmp	r3, #3
 8012e1c:	d104      	bne.n	8012e28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012e1e:	6839      	ldr	r1, [r7, #0]
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f000 f9bc 	bl	801319e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e26:	e01d      	b.n	8012e64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	7bfa      	ldrb	r2, [r7, #15]
 8012e2c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012e30:	7bfb      	ldrb	r3, [r7, #15]
 8012e32:	4619      	mov	r1, r3
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f000 ff6e 	bl	8013d16 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f000 fa69 	bl	8013312 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012e40:	7bfb      	ldrb	r3, [r7, #15]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d004      	beq.n	8012e50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2202      	movs	r2, #2
 8012e4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e4e:	e009      	b.n	8012e64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2201      	movs	r2, #1
 8012e54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e58:	e004      	b.n	8012e64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012e5a:	6839      	ldr	r1, [r7, #0]
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f000 f99e 	bl	801319e <USBD_CtlError>
  }
}
 8012e62:	bf00      	nop
 8012e64:	bf00      	nop
 8012e66:	3710      	adds	r7, #16
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e76:	2300      	movs	r3, #0
 8012e78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	885b      	ldrh	r3, [r3, #2]
 8012e7e:	b2da      	uxtb	r2, r3
 8012e80:	4b4e      	ldr	r3, [pc, #312]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012e82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012e84:	4b4d      	ldr	r3, [pc, #308]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012e86:	781b      	ldrb	r3, [r3, #0]
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	d905      	bls.n	8012e98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012e8c:	6839      	ldr	r1, [r7, #0]
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f000 f985 	bl	801319e <USBD_CtlError>
    return USBD_FAIL;
 8012e94:	2303      	movs	r3, #3
 8012e96:	e08c      	b.n	8012fb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e9e:	b2db      	uxtb	r3, r3
 8012ea0:	2b02      	cmp	r3, #2
 8012ea2:	d002      	beq.n	8012eaa <USBD_SetConfig+0x3e>
 8012ea4:	2b03      	cmp	r3, #3
 8012ea6:	d029      	beq.n	8012efc <USBD_SetConfig+0x90>
 8012ea8:	e075      	b.n	8012f96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012eaa:	4b44      	ldr	r3, [pc, #272]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d020      	beq.n	8012ef4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012eb2:	4b42      	ldr	r3, [pc, #264]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f7fe ffba 	bl	8011e3c <USBD_SetClassConfig>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012ecc:	7bfb      	ldrb	r3, [r7, #15]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d008      	beq.n	8012ee4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012ed2:	6839      	ldr	r1, [r7, #0]
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f000 f962 	bl	801319e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2202      	movs	r2, #2
 8012ede:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012ee2:	e065      	b.n	8012fb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f000 fa14 	bl	8013312 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	2203      	movs	r2, #3
 8012eee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012ef2:	e05d      	b.n	8012fb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f000 fa0c 	bl	8013312 <USBD_CtlSendStatus>
      break;
 8012efa:	e059      	b.n	8012fb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012efc:	4b2f      	ldr	r3, [pc, #188]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d112      	bne.n	8012f2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2202      	movs	r2, #2
 8012f08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	461a      	mov	r2, r3
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f16:	4b29      	ldr	r3, [pc, #164]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f7fe ffa9 	bl	8011e74 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f000 f9f5 	bl	8013312 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f28:	e042      	b.n	8012fb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012f2a:	4b24      	ldr	r3, [pc, #144]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	461a      	mov	r2, r3
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d02a      	beq.n	8012f8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	b2db      	uxtb	r3, r3
 8012f3e:	4619      	mov	r1, r3
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f7fe ff97 	bl	8011e74 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012f46:	4b1d      	ldr	r3, [pc, #116]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012f50:	4b1a      	ldr	r3, [pc, #104]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	4619      	mov	r1, r3
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f7fe ff70 	bl	8011e3c <USBD_SetClassConfig>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012f60:	7bfb      	ldrb	r3, [r7, #15]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d00f      	beq.n	8012f86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012f66:	6839      	ldr	r1, [r7, #0]
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f000 f918 	bl	801319e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	685b      	ldr	r3, [r3, #4]
 8012f72:	b2db      	uxtb	r3, r3
 8012f74:	4619      	mov	r1, r3
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f7fe ff7c 	bl	8011e74 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2202      	movs	r2, #2
 8012f80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012f84:	e014      	b.n	8012fb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f000 f9c3 	bl	8013312 <USBD_CtlSendStatus>
      break;
 8012f8c:	e010      	b.n	8012fb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f000 f9bf 	bl	8013312 <USBD_CtlSendStatus>
      break;
 8012f94:	e00c      	b.n	8012fb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012f96:	6839      	ldr	r1, [r7, #0]
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f000 f900 	bl	801319e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f9e:	4b07      	ldr	r3, [pc, #28]	@ (8012fbc <USBD_SetConfig+0x150>)
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f7fe ff65 	bl	8011e74 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012faa:	2303      	movs	r3, #3
 8012fac:	73fb      	strb	r3, [r7, #15]
      break;
 8012fae:	bf00      	nop
  }

  return ret;
 8012fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3710      	adds	r7, #16
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	24000a28 	.word	0x24000a28

08012fc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	88db      	ldrh	r3, [r3, #6]
 8012fce:	2b01      	cmp	r3, #1
 8012fd0:	d004      	beq.n	8012fdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012fd2:	6839      	ldr	r1, [r7, #0]
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f000 f8e2 	bl	801319e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012fda:	e023      	b.n	8013024 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	2b02      	cmp	r3, #2
 8012fe6:	dc02      	bgt.n	8012fee <USBD_GetConfig+0x2e>
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	dc03      	bgt.n	8012ff4 <USBD_GetConfig+0x34>
 8012fec:	e015      	b.n	801301a <USBD_GetConfig+0x5a>
 8012fee:	2b03      	cmp	r3, #3
 8012ff0:	d00b      	beq.n	801300a <USBD_GetConfig+0x4a>
 8012ff2:	e012      	b.n	801301a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	3308      	adds	r3, #8
 8012ffe:	2201      	movs	r2, #1
 8013000:	4619      	mov	r1, r3
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	f000 f948 	bl	8013298 <USBD_CtlSendData>
        break;
 8013008:	e00c      	b.n	8013024 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	3304      	adds	r3, #4
 801300e:	2201      	movs	r2, #1
 8013010:	4619      	mov	r1, r3
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f000 f940 	bl	8013298 <USBD_CtlSendData>
        break;
 8013018:	e004      	b.n	8013024 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801301a:	6839      	ldr	r1, [r7, #0]
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f000 f8be 	bl	801319e <USBD_CtlError>
        break;
 8013022:	bf00      	nop
}
 8013024:	bf00      	nop
 8013026:	3708      	adds	r7, #8
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}

0801302c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b082      	sub	sp, #8
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
 8013034:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801303c:	b2db      	uxtb	r3, r3
 801303e:	3b01      	subs	r3, #1
 8013040:	2b02      	cmp	r3, #2
 8013042:	d81e      	bhi.n	8013082 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	88db      	ldrh	r3, [r3, #6]
 8013048:	2b02      	cmp	r3, #2
 801304a:	d004      	beq.n	8013056 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801304c:	6839      	ldr	r1, [r7, #0]
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f000 f8a5 	bl	801319e <USBD_CtlError>
        break;
 8013054:	e01a      	b.n	801308c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2201      	movs	r2, #1
 801305a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013062:	2b00      	cmp	r3, #0
 8013064:	d005      	beq.n	8013072 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	68db      	ldr	r3, [r3, #12]
 801306a:	f043 0202 	orr.w	r2, r3, #2
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	330c      	adds	r3, #12
 8013076:	2202      	movs	r2, #2
 8013078:	4619      	mov	r1, r3
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f000 f90c 	bl	8013298 <USBD_CtlSendData>
      break;
 8013080:	e004      	b.n	801308c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013082:	6839      	ldr	r1, [r7, #0]
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f000 f88a 	bl	801319e <USBD_CtlError>
      break;
 801308a:	bf00      	nop
  }
}
 801308c:	bf00      	nop
 801308e:	3708      	adds	r7, #8
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	885b      	ldrh	r3, [r3, #2]
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d107      	bne.n	80130b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2201      	movs	r2, #1
 80130aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 f92f 	bl	8013312 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80130b4:	e013      	b.n	80130de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	885b      	ldrh	r3, [r3, #2]
 80130ba:	2b02      	cmp	r3, #2
 80130bc:	d10b      	bne.n	80130d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	889b      	ldrh	r3, [r3, #4]
 80130c2:	0a1b      	lsrs	r3, r3, #8
 80130c4:	b29b      	uxth	r3, r3
 80130c6:	b2da      	uxtb	r2, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f000 f91f 	bl	8013312 <USBD_CtlSendStatus>
}
 80130d4:	e003      	b.n	80130de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80130d6:	6839      	ldr	r1, [r7, #0]
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f000 f860 	bl	801319e <USBD_CtlError>
}
 80130de:	bf00      	nop
 80130e0:	3708      	adds	r7, #8
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b082      	sub	sp, #8
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
 80130ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80130f6:	b2db      	uxtb	r3, r3
 80130f8:	3b01      	subs	r3, #1
 80130fa:	2b02      	cmp	r3, #2
 80130fc:	d80b      	bhi.n	8013116 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	885b      	ldrh	r3, [r3, #2]
 8013102:	2b01      	cmp	r3, #1
 8013104:	d10c      	bne.n	8013120 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2200      	movs	r2, #0
 801310a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f000 f8ff 	bl	8013312 <USBD_CtlSendStatus>
      }
      break;
 8013114:	e004      	b.n	8013120 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013116:	6839      	ldr	r1, [r7, #0]
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f000 f840 	bl	801319e <USBD_CtlError>
      break;
 801311e:	e000      	b.n	8013122 <USBD_ClrFeature+0x3c>
      break;
 8013120:	bf00      	nop
  }
}
 8013122:	bf00      	nop
 8013124:	3708      	adds	r7, #8
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}

0801312a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801312a:	b580      	push	{r7, lr}
 801312c:	b084      	sub	sp, #16
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
 8013132:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	781a      	ldrb	r2, [r3, #0]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	3301      	adds	r3, #1
 8013144:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	781a      	ldrb	r2, [r3, #0]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	3301      	adds	r3, #1
 8013152:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f7ff fa17 	bl	8012588 <SWAPBYTE>
 801315a:	4603      	mov	r3, r0
 801315c:	461a      	mov	r2, r3
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	3301      	adds	r3, #1
 8013166:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	3301      	adds	r3, #1
 801316c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f7ff fa0a 	bl	8012588 <SWAPBYTE>
 8013174:	4603      	mov	r3, r0
 8013176:	461a      	mov	r2, r3
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	3301      	adds	r3, #1
 8013180:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	3301      	adds	r3, #1
 8013186:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013188:	68f8      	ldr	r0, [r7, #12]
 801318a:	f7ff f9fd 	bl	8012588 <SWAPBYTE>
 801318e:	4603      	mov	r3, r0
 8013190:	461a      	mov	r2, r3
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	80da      	strh	r2, [r3, #6]
}
 8013196:	bf00      	nop
 8013198:	3710      	adds	r7, #16
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}

0801319e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801319e:	b580      	push	{r7, lr}
 80131a0:	b082      	sub	sp, #8
 80131a2:	af00      	add	r7, sp, #0
 80131a4:	6078      	str	r0, [r7, #4]
 80131a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80131a8:	2180      	movs	r1, #128	@ 0x80
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f000 fd49 	bl	8013c42 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80131b0:	2100      	movs	r1, #0
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f000 fd45 	bl	8013c42 <USBD_LL_StallEP>
}
 80131b8:	bf00      	nop
 80131ba:	3708      	adds	r7, #8
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b086      	sub	sp, #24
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	60b9      	str	r1, [r7, #8]
 80131ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80131cc:	2300      	movs	r3, #0
 80131ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d042      	beq.n	801325c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80131da:	6938      	ldr	r0, [r7, #16]
 80131dc:	f000 f842 	bl	8013264 <USBD_GetLen>
 80131e0:	4603      	mov	r3, r0
 80131e2:	3301      	adds	r3, #1
 80131e4:	005b      	lsls	r3, r3, #1
 80131e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80131ea:	d808      	bhi.n	80131fe <USBD_GetString+0x3e>
 80131ec:	6938      	ldr	r0, [r7, #16]
 80131ee:	f000 f839 	bl	8013264 <USBD_GetLen>
 80131f2:	4603      	mov	r3, r0
 80131f4:	3301      	adds	r3, #1
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	005b      	lsls	r3, r3, #1
 80131fa:	b29a      	uxth	r2, r3
 80131fc:	e001      	b.n	8013202 <USBD_GetString+0x42>
 80131fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013206:	7dfb      	ldrb	r3, [r7, #23]
 8013208:	68ba      	ldr	r2, [r7, #8]
 801320a:	4413      	add	r3, r2
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	7812      	ldrb	r2, [r2, #0]
 8013210:	701a      	strb	r2, [r3, #0]
  idx++;
 8013212:	7dfb      	ldrb	r3, [r7, #23]
 8013214:	3301      	adds	r3, #1
 8013216:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013218:	7dfb      	ldrb	r3, [r7, #23]
 801321a:	68ba      	ldr	r2, [r7, #8]
 801321c:	4413      	add	r3, r2
 801321e:	2203      	movs	r2, #3
 8013220:	701a      	strb	r2, [r3, #0]
  idx++;
 8013222:	7dfb      	ldrb	r3, [r7, #23]
 8013224:	3301      	adds	r3, #1
 8013226:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013228:	e013      	b.n	8013252 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801322a:	7dfb      	ldrb	r3, [r7, #23]
 801322c:	68ba      	ldr	r2, [r7, #8]
 801322e:	4413      	add	r3, r2
 8013230:	693a      	ldr	r2, [r7, #16]
 8013232:	7812      	ldrb	r2, [r2, #0]
 8013234:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	3301      	adds	r3, #1
 801323a:	613b      	str	r3, [r7, #16]
    idx++;
 801323c:	7dfb      	ldrb	r3, [r7, #23]
 801323e:	3301      	adds	r3, #1
 8013240:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013242:	7dfb      	ldrb	r3, [r7, #23]
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	4413      	add	r3, r2
 8013248:	2200      	movs	r2, #0
 801324a:	701a      	strb	r2, [r3, #0]
    idx++;
 801324c:	7dfb      	ldrb	r3, [r7, #23]
 801324e:	3301      	adds	r3, #1
 8013250:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d1e7      	bne.n	801322a <USBD_GetString+0x6a>
 801325a:	e000      	b.n	801325e <USBD_GetString+0x9e>
    return;
 801325c:	bf00      	nop
  }
}
 801325e:	3718      	adds	r7, #24
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013264:	b480      	push	{r7}
 8013266:	b085      	sub	sp, #20
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801326c:	2300      	movs	r3, #0
 801326e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013274:	e005      	b.n	8013282 <USBD_GetLen+0x1e>
  {
    len++;
 8013276:	7bfb      	ldrb	r3, [r7, #15]
 8013278:	3301      	adds	r3, #1
 801327a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	3301      	adds	r3, #1
 8013280:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d1f5      	bne.n	8013276 <USBD_GetLen+0x12>
  }

  return len;
 801328a:	7bfb      	ldrb	r3, [r7, #15]
}
 801328c:	4618      	mov	r0, r3
 801328e:	3714      	adds	r7, #20
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b084      	sub	sp, #16
 801329c:	af00      	add	r7, sp, #0
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2202      	movs	r2, #2
 80132a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	687a      	ldr	r2, [r7, #4]
 80132b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	687a      	ldr	r2, [r7, #4]
 80132b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	68ba      	ldr	r2, [r7, #8]
 80132bc:	2100      	movs	r1, #0
 80132be:	68f8      	ldr	r0, [r7, #12]
 80132c0:	f000 fd48 	bl	8013d54 <USBD_LL_Transmit>

  return USBD_OK;
 80132c4:	2300      	movs	r3, #0
}
 80132c6:	4618      	mov	r0, r3
 80132c8:	3710      	adds	r7, #16
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}

080132ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80132ce:	b580      	push	{r7, lr}
 80132d0:	b084      	sub	sp, #16
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	60f8      	str	r0, [r7, #12]
 80132d6:	60b9      	str	r1, [r7, #8]
 80132d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	68ba      	ldr	r2, [r7, #8]
 80132de:	2100      	movs	r1, #0
 80132e0:	68f8      	ldr	r0, [r7, #12]
 80132e2:	f000 fd37 	bl	8013d54 <USBD_LL_Transmit>

  return USBD_OK;
 80132e6:	2300      	movs	r3, #0
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3710      	adds	r7, #16
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b084      	sub	sp, #16
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	60f8      	str	r0, [r7, #12]
 80132f8:	60b9      	str	r1, [r7, #8]
 80132fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	68ba      	ldr	r2, [r7, #8]
 8013300:	2100      	movs	r1, #0
 8013302:	68f8      	ldr	r0, [r7, #12]
 8013304:	f000 fd47 	bl	8013d96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013308:	2300      	movs	r3, #0
}
 801330a:	4618      	mov	r0, r3
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}

08013312 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013312:	b580      	push	{r7, lr}
 8013314:	b082      	sub	sp, #8
 8013316:	af00      	add	r7, sp, #0
 8013318:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2204      	movs	r2, #4
 801331e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013322:	2300      	movs	r3, #0
 8013324:	2200      	movs	r2, #0
 8013326:	2100      	movs	r1, #0
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f000 fd13 	bl	8013d54 <USBD_LL_Transmit>

  return USBD_OK;
 801332e:	2300      	movs	r3, #0
}
 8013330:	4618      	mov	r0, r3
 8013332:	3708      	adds	r7, #8
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2205      	movs	r2, #5
 8013344:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013348:	2300      	movs	r3, #0
 801334a:	2200      	movs	r2, #0
 801334c:	2100      	movs	r1, #0
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f000 fd21 	bl	8013d96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013354:	2300      	movs	r3, #0
}
 8013356:	4618      	mov	r0, r3
 8013358:	3708      	adds	r7, #8
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
	...

08013360 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013360:	b480      	push	{r7}
 8013362:	b087      	sub	sp, #28
 8013364:	af00      	add	r7, sp, #0
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	4613      	mov	r3, r2
 801336c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801336e:	2301      	movs	r3, #1
 8013370:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013372:	2300      	movs	r3, #0
 8013374:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013376:	4b1f      	ldr	r3, [pc, #124]	@ (80133f4 <FATFS_LinkDriverEx+0x94>)
 8013378:	7a5b      	ldrb	r3, [r3, #9]
 801337a:	b2db      	uxtb	r3, r3
 801337c:	2b00      	cmp	r3, #0
 801337e:	d131      	bne.n	80133e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013380:	4b1c      	ldr	r3, [pc, #112]	@ (80133f4 <FATFS_LinkDriverEx+0x94>)
 8013382:	7a5b      	ldrb	r3, [r3, #9]
 8013384:	b2db      	uxtb	r3, r3
 8013386:	461a      	mov	r2, r3
 8013388:	4b1a      	ldr	r3, [pc, #104]	@ (80133f4 <FATFS_LinkDriverEx+0x94>)
 801338a:	2100      	movs	r1, #0
 801338c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801338e:	4b19      	ldr	r3, [pc, #100]	@ (80133f4 <FATFS_LinkDriverEx+0x94>)
 8013390:	7a5b      	ldrb	r3, [r3, #9]
 8013392:	b2db      	uxtb	r3, r3
 8013394:	4a17      	ldr	r2, [pc, #92]	@ (80133f4 <FATFS_LinkDriverEx+0x94>)
 8013396:	009b      	lsls	r3, r3, #2
 8013398:	4413      	add	r3, r2
 801339a:	68fa      	ldr	r2, [r7, #12]
 801339c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801339e:	4b15      	ldr	r3, [pc, #84]	@ (80133f4 <FATFS_LinkDriverEx+0x94>)
 80133a0:	7a5b      	ldrb	r3, [r3, #9]
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	461a      	mov	r2, r3
 80133a6:	4b13      	ldr	r3, [pc, #76]	@ (80133f4 <FATFS_LinkDriverEx+0x94>)
 80133a8:	4413      	add	r3, r2
 80133aa:	79fa      	ldrb	r2, [r7, #7]
 80133ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80133ae:	4b11      	ldr	r3, [pc, #68]	@ (80133f4 <FATFS_LinkDriverEx+0x94>)
 80133b0:	7a5b      	ldrb	r3, [r3, #9]
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	1c5a      	adds	r2, r3, #1
 80133b6:	b2d1      	uxtb	r1, r2
 80133b8:	4a0e      	ldr	r2, [pc, #56]	@ (80133f4 <FATFS_LinkDriverEx+0x94>)
 80133ba:	7251      	strb	r1, [r2, #9]
 80133bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80133be:	7dbb      	ldrb	r3, [r7, #22]
 80133c0:	3330      	adds	r3, #48	@ 0x30
 80133c2:	b2da      	uxtb	r2, r3
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	3301      	adds	r3, #1
 80133cc:	223a      	movs	r2, #58	@ 0x3a
 80133ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	3302      	adds	r3, #2
 80133d4:	222f      	movs	r2, #47	@ 0x2f
 80133d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	3303      	adds	r3, #3
 80133dc:	2200      	movs	r2, #0
 80133de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80133e0:	2300      	movs	r3, #0
 80133e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80133e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	371c      	adds	r7, #28
 80133ea:	46bd      	mov	sp, r7
 80133ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f0:	4770      	bx	lr
 80133f2:	bf00      	nop
 80133f4:	24000a2c 	.word	0x24000a2c

080133f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013402:	2200      	movs	r2, #0
 8013404:	6839      	ldr	r1, [r7, #0]
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f7ff ffaa 	bl	8013360 <FATFS_LinkDriverEx>
 801340c:	4603      	mov	r3, r0
}
 801340e:	4618      	mov	r0, r3
 8013410:	3708      	adds	r7, #8
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
	...

08013418 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801341c:	2200      	movs	r2, #0
 801341e:	4913      	ldr	r1, [pc, #76]	@ (801346c <MX_USB_DEVICE_Init+0x54>)
 8013420:	4813      	ldr	r0, [pc, #76]	@ (8013470 <MX_USB_DEVICE_Init+0x58>)
 8013422:	f7fe fc8e 	bl	8011d42 <USBD_Init>
 8013426:	4603      	mov	r3, r0
 8013428:	2b00      	cmp	r3, #0
 801342a:	d001      	beq.n	8013430 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801342c:	f7ee fd70 	bl	8001f10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8013430:	4910      	ldr	r1, [pc, #64]	@ (8013474 <MX_USB_DEVICE_Init+0x5c>)
 8013432:	480f      	ldr	r0, [pc, #60]	@ (8013470 <MX_USB_DEVICE_Init+0x58>)
 8013434:	f7fe fcb5 	bl	8011da2 <USBD_RegisterClass>
 8013438:	4603      	mov	r3, r0
 801343a:	2b00      	cmp	r3, #0
 801343c:	d001      	beq.n	8013442 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801343e:	f7ee fd67 	bl	8001f10 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8013442:	490d      	ldr	r1, [pc, #52]	@ (8013478 <MX_USB_DEVICE_Init+0x60>)
 8013444:	480a      	ldr	r0, [pc, #40]	@ (8013470 <MX_USB_DEVICE_Init+0x58>)
 8013446:	f7fc ff33 	bl	80102b0 <USBD_MSC_RegisterStorage>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d001      	beq.n	8013454 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013450:	f7ee fd5e 	bl	8001f10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013454:	4806      	ldr	r0, [pc, #24]	@ (8013470 <MX_USB_DEVICE_Init+0x58>)
 8013456:	f7fe fcda 	bl	8011e0e <USBD_Start>
 801345a:	4603      	mov	r3, r0
 801345c:	2b00      	cmp	r3, #0
 801345e:	d001      	beq.n	8013464 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013460:	f7ee fd56 	bl	8001f10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8013464:	f7f2 fa40 	bl	80058e8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013468:	bf00      	nop
 801346a:	bd80      	pop	{r7, pc}
 801346c:	240000bc 	.word	0x240000bc
 8013470:	24000a38 	.word	0x24000a38
 8013474:	2400003c 	.word	0x2400003c
 8013478:	24000110 	.word	0x24000110

0801347c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	4603      	mov	r3, r0
 8013484:	6039      	str	r1, [r7, #0]
 8013486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	2212      	movs	r2, #18
 801348c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801348e:	4b03      	ldr	r3, [pc, #12]	@ (801349c <USBD_FS_DeviceDescriptor+0x20>)
}
 8013490:	4618      	mov	r0, r3
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr
 801349c:	240000dc 	.word	0x240000dc

080134a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b083      	sub	sp, #12
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	4603      	mov	r3, r0
 80134a8:	6039      	str	r1, [r7, #0]
 80134aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	2204      	movs	r2, #4
 80134b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80134b2:	4b03      	ldr	r3, [pc, #12]	@ (80134c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	370c      	adds	r7, #12
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr
 80134c0:	240000f0 	.word	0x240000f0

080134c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	4603      	mov	r3, r0
 80134cc:	6039      	str	r1, [r7, #0]
 80134ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80134d0:	79fb      	ldrb	r3, [r7, #7]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d105      	bne.n	80134e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80134d6:	683a      	ldr	r2, [r7, #0]
 80134d8:	4907      	ldr	r1, [pc, #28]	@ (80134f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80134da:	4808      	ldr	r0, [pc, #32]	@ (80134fc <USBD_FS_ProductStrDescriptor+0x38>)
 80134dc:	f7ff fe70 	bl	80131c0 <USBD_GetString>
 80134e0:	e004      	b.n	80134ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80134e2:	683a      	ldr	r2, [r7, #0]
 80134e4:	4904      	ldr	r1, [pc, #16]	@ (80134f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80134e6:	4805      	ldr	r0, [pc, #20]	@ (80134fc <USBD_FS_ProductStrDescriptor+0x38>)
 80134e8:	f7ff fe6a 	bl	80131c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80134ec:	4b02      	ldr	r3, [pc, #8]	@ (80134f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3708      	adds	r7, #8
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	24000d14 	.word	0x24000d14
 80134fc:	08016a58 	.word	0x08016a58

08013500 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b082      	sub	sp, #8
 8013504:	af00      	add	r7, sp, #0
 8013506:	4603      	mov	r3, r0
 8013508:	6039      	str	r1, [r7, #0]
 801350a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801350c:	683a      	ldr	r2, [r7, #0]
 801350e:	4904      	ldr	r1, [pc, #16]	@ (8013520 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013510:	4804      	ldr	r0, [pc, #16]	@ (8013524 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013512:	f7ff fe55 	bl	80131c0 <USBD_GetString>
  return USBD_StrDesc;
 8013516:	4b02      	ldr	r3, [pc, #8]	@ (8013520 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013518:	4618      	mov	r0, r3
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	24000d14 	.word	0x24000d14
 8013524:	08016a6c 	.word	0x08016a6c

08013528 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	4603      	mov	r3, r0
 8013530:	6039      	str	r1, [r7, #0]
 8013532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	221a      	movs	r2, #26
 8013538:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801353a:	f000 f843 	bl	80135c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801353e:	4b02      	ldr	r3, [pc, #8]	@ (8013548 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013540:	4618      	mov	r0, r3
 8013542:	3708      	adds	r7, #8
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}
 8013548:	240000f4 	.word	0x240000f4

0801354c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	4603      	mov	r3, r0
 8013554:	6039      	str	r1, [r7, #0]
 8013556:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013558:	79fb      	ldrb	r3, [r7, #7]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d105      	bne.n	801356a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801355e:	683a      	ldr	r2, [r7, #0]
 8013560:	4907      	ldr	r1, [pc, #28]	@ (8013580 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013562:	4808      	ldr	r0, [pc, #32]	@ (8013584 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013564:	f7ff fe2c 	bl	80131c0 <USBD_GetString>
 8013568:	e004      	b.n	8013574 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801356a:	683a      	ldr	r2, [r7, #0]
 801356c:	4904      	ldr	r1, [pc, #16]	@ (8013580 <USBD_FS_ConfigStrDescriptor+0x34>)
 801356e:	4805      	ldr	r0, [pc, #20]	@ (8013584 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013570:	f7ff fe26 	bl	80131c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013574:	4b02      	ldr	r3, [pc, #8]	@ (8013580 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013576:	4618      	mov	r0, r3
 8013578:	3708      	adds	r7, #8
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}
 801357e:	bf00      	nop
 8013580:	24000d14 	.word	0x24000d14
 8013584:	08016a80 	.word	0x08016a80

08013588 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b082      	sub	sp, #8
 801358c:	af00      	add	r7, sp, #0
 801358e:	4603      	mov	r3, r0
 8013590:	6039      	str	r1, [r7, #0]
 8013592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013594:	79fb      	ldrb	r3, [r7, #7]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d105      	bne.n	80135a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801359a:	683a      	ldr	r2, [r7, #0]
 801359c:	4907      	ldr	r1, [pc, #28]	@ (80135bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801359e:	4808      	ldr	r0, [pc, #32]	@ (80135c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80135a0:	f7ff fe0e 	bl	80131c0 <USBD_GetString>
 80135a4:	e004      	b.n	80135b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80135a6:	683a      	ldr	r2, [r7, #0]
 80135a8:	4904      	ldr	r1, [pc, #16]	@ (80135bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80135aa:	4805      	ldr	r0, [pc, #20]	@ (80135c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80135ac:	f7ff fe08 	bl	80131c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80135b0:	4b02      	ldr	r3, [pc, #8]	@ (80135bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3708      	adds	r7, #8
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	24000d14 	.word	0x24000d14
 80135c0:	08016a8c 	.word	0x08016a8c

080135c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b084      	sub	sp, #16
 80135c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80135ca:	4b0f      	ldr	r3, [pc, #60]	@ (8013608 <Get_SerialNum+0x44>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80135d0:	4b0e      	ldr	r3, [pc, #56]	@ (801360c <Get_SerialNum+0x48>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80135d6:	4b0e      	ldr	r3, [pc, #56]	@ (8013610 <Get_SerialNum+0x4c>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80135dc:	68fa      	ldr	r2, [r7, #12]
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4413      	add	r3, r2
 80135e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d009      	beq.n	80135fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80135ea:	2208      	movs	r2, #8
 80135ec:	4909      	ldr	r1, [pc, #36]	@ (8013614 <Get_SerialNum+0x50>)
 80135ee:	68f8      	ldr	r0, [r7, #12]
 80135f0:	f000 f814 	bl	801361c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80135f4:	2204      	movs	r2, #4
 80135f6:	4908      	ldr	r1, [pc, #32]	@ (8013618 <Get_SerialNum+0x54>)
 80135f8:	68b8      	ldr	r0, [r7, #8]
 80135fa:	f000 f80f 	bl	801361c <IntToUnicode>
  }
}
 80135fe:	bf00      	nop
 8013600:	3710      	adds	r7, #16
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	1ff1e800 	.word	0x1ff1e800
 801360c:	1ff1e804 	.word	0x1ff1e804
 8013610:	1ff1e808 	.word	0x1ff1e808
 8013614:	240000f6 	.word	0x240000f6
 8013618:	24000106 	.word	0x24000106

0801361c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801361c:	b480      	push	{r7}
 801361e:	b087      	sub	sp, #28
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	4613      	mov	r3, r2
 8013628:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801362a:	2300      	movs	r3, #0
 801362c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801362e:	2300      	movs	r3, #0
 8013630:	75fb      	strb	r3, [r7, #23]
 8013632:	e027      	b.n	8013684 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	0f1b      	lsrs	r3, r3, #28
 8013638:	2b09      	cmp	r3, #9
 801363a:	d80b      	bhi.n	8013654 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	0f1b      	lsrs	r3, r3, #28
 8013640:	b2da      	uxtb	r2, r3
 8013642:	7dfb      	ldrb	r3, [r7, #23]
 8013644:	005b      	lsls	r3, r3, #1
 8013646:	4619      	mov	r1, r3
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	440b      	add	r3, r1
 801364c:	3230      	adds	r2, #48	@ 0x30
 801364e:	b2d2      	uxtb	r2, r2
 8013650:	701a      	strb	r2, [r3, #0]
 8013652:	e00a      	b.n	801366a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	0f1b      	lsrs	r3, r3, #28
 8013658:	b2da      	uxtb	r2, r3
 801365a:	7dfb      	ldrb	r3, [r7, #23]
 801365c:	005b      	lsls	r3, r3, #1
 801365e:	4619      	mov	r1, r3
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	440b      	add	r3, r1
 8013664:	3237      	adds	r2, #55	@ 0x37
 8013666:	b2d2      	uxtb	r2, r2
 8013668:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	011b      	lsls	r3, r3, #4
 801366e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013670:	7dfb      	ldrb	r3, [r7, #23]
 8013672:	005b      	lsls	r3, r3, #1
 8013674:	3301      	adds	r3, #1
 8013676:	68ba      	ldr	r2, [r7, #8]
 8013678:	4413      	add	r3, r2
 801367a:	2200      	movs	r2, #0
 801367c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801367e:	7dfb      	ldrb	r3, [r7, #23]
 8013680:	3301      	adds	r3, #1
 8013682:	75fb      	strb	r3, [r7, #23]
 8013684:	7dfa      	ldrb	r2, [r7, #23]
 8013686:	79fb      	ldrb	r3, [r7, #7]
 8013688:	429a      	cmp	r2, r3
 801368a:	d3d3      	bcc.n	8013634 <IntToUnicode+0x18>
  }
}
 801368c:	bf00      	nop
 801368e:	bf00      	nop
 8013690:	371c      	adds	r7, #28
 8013692:	46bd      	mov	sp, r7
 8013694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013698:	4770      	bx	lr

0801369a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801369a:	b480      	push	{r7}
 801369c:	b083      	sub	sp, #12
 801369e:	af00      	add	r7, sp, #0
 80136a0:	4603      	mov	r3, r0
 80136a2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80136a4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	370c      	adds	r7, #12
 80136aa:	46bd      	mov	sp, r7
 80136ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b0:	4770      	bx	lr
	...

080136b4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b08e      	sub	sp, #56	@ 0x38
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	4603      	mov	r3, r0
 80136bc:	60b9      	str	r1, [r7, #8]
 80136be:	607a      	str	r2, [r7, #4]
 80136c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
    HAL_SD_CardInfoTypeDef info;
    int8_t ret = -1;
 80136c2:	23ff      	movs	r3, #255	@ 0xff
 80136c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Retrieve the card info
    if (HAL_SD_GetCardInfo(&hsd1, &info) == HAL_OK)
 80136c8:	f107 0310 	add.w	r3, r7, #16
 80136cc:	4619      	mov	r1, r3
 80136ce:	480b      	ldr	r0, [pc, #44]	@ (80136fc <STORAGE_GetCapacity_FS+0x48>)
 80136d0:	f7f6 fcc4 	bl	800a05c <HAL_SD_GetCardInfo>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d10a      	bne.n	80136f0 <STORAGE_GetCapacity_FS+0x3c>
    {
        // Ensure the correct values are returned
        *block_num = info.LogBlockNbr - 1;
 80136da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136dc:	1e5a      	subs	r2, r3, #1
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	601a      	str	r2, [r3, #0]
        *block_size = info.LogBlockSize;
 80136e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136e4:	b29a      	uxth	r2, r3
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	801a      	strh	r2, [r3, #0]
        ret = USBD_OK;
 80136ea:	2300      	movs	r3, #0
 80136ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return ret;
 80136f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3738      	adds	r7, #56	@ 0x38
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	24000798 	.word	0x24000798

08013700 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8013700:	b480      	push	{r7}
 8013702:	b083      	sub	sp, #12
 8013704:	af00      	add	r7, sp, #0
 8013706:	4603      	mov	r3, r0
 8013708:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801370a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801370c:	4618      	mov	r0, r3
 801370e:	370c      	adds	r7, #12
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr

08013718 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8013718:	b480      	push	{r7}
 801371a:	b083      	sub	sp, #12
 801371c:	af00      	add	r7, sp, #0
 801371e:	4603      	mov	r3, r0
 8013720:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8013722:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013724:	4618      	mov	r0, r3
 8013726:	370c      	adds	r7, #12
 8013728:	46bd      	mov	sp, r7
 801372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372e:	4770      	bx	lr

08013730 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b088      	sub	sp, #32
 8013734:	af02      	add	r7, sp, #8
 8013736:	60b9      	str	r1, [r7, #8]
 8013738:	607a      	str	r2, [r7, #4]
 801373a:	461a      	mov	r2, r3
 801373c:	4603      	mov	r3, r0
 801373e:	73fb      	strb	r3, [r7, #15]
 8013740:	4613      	mov	r3, r2
 8013742:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 8013744:	23ff      	movs	r3, #255	@ 0xff
 8013746:	75fb      	strb	r3, [r7, #23]

	  HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8013748:	89bb      	ldrh	r3, [r7, #12]
 801374a:	f04f 32ff 	mov.w	r2, #4294967295
 801374e:	9200      	str	r2, [sp, #0]
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	68b9      	ldr	r1, [r7, #8]
 8013754:	4808      	ldr	r0, [pc, #32]	@ (8013778 <STORAGE_Read_FS+0x48>)
 8013756:	f7f5 ff07 	bl	8009568 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 801375a:	bf00      	nop
 801375c:	4806      	ldr	r0, [pc, #24]	@ (8013778 <STORAGE_Read_FS+0x48>)
 801375e:	f7f6 fdbb 	bl	800a2d8 <HAL_SD_GetCardState>
 8013762:	4603      	mov	r3, r0
 8013764:	2b04      	cmp	r3, #4
 8013766:	d1f9      	bne.n	801375c <STORAGE_Read_FS+0x2c>
	  ret = 0;
 8013768:	2300      	movs	r3, #0
 801376a:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801376c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8013770:	4618      	mov	r0, r3
 8013772:	3718      	adds	r7, #24
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}
 8013778:	24000798 	.word	0x24000798

0801377c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b088      	sub	sp, #32
 8013780:	af02      	add	r7, sp, #8
 8013782:	60b9      	str	r1, [r7, #8]
 8013784:	607a      	str	r2, [r7, #4]
 8013786:	461a      	mov	r2, r3
 8013788:	4603      	mov	r3, r0
 801378a:	73fb      	strb	r3, [r7, #15]
 801378c:	4613      	mov	r3, r2
 801378e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	  int8_t ret = -1;
 8013790:	23ff      	movs	r3, #255	@ 0xff
 8013792:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8013794:	89bb      	ldrh	r3, [r7, #12]
 8013796:	f04f 32ff 	mov.w	r2, #4294967295
 801379a:	9200      	str	r2, [sp, #0]
 801379c:	687a      	ldr	r2, [r7, #4]
 801379e:	68b9      	ldr	r1, [r7, #8]
 80137a0:	4808      	ldr	r0, [pc, #32]	@ (80137c4 <STORAGE_Write_FS+0x48>)
 80137a2:	f7f6 f86b 	bl	800987c <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80137a6:	bf00      	nop
 80137a8:	4806      	ldr	r0, [pc, #24]	@ (80137c4 <STORAGE_Write_FS+0x48>)
 80137aa:	f7f6 fd95 	bl	800a2d8 <HAL_SD_GetCardState>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b04      	cmp	r3, #4
 80137b2:	d1f9      	bne.n	80137a8 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 80137b4:	2300      	movs	r3, #0
 80137b6:	75fb      	strb	r3, [r7, #23]
	  return ret;
 80137b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 80137bc:	4618      	mov	r0, r3
 80137be:	3718      	adds	r7, #24
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	24000798 	.word	0x24000798

080137c8 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80137c8:	b480      	push	{r7}
 80137ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80137cc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	46bd      	mov	sp, r7
 80137d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d6:	4770      	bx	lr

080137d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b0ba      	sub	sp, #232	@ 0xe8
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80137e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80137e4:	2200      	movs	r2, #0
 80137e6:	601a      	str	r2, [r3, #0]
 80137e8:	605a      	str	r2, [r3, #4]
 80137ea:	609a      	str	r2, [r3, #8]
 80137ec:	60da      	str	r2, [r3, #12]
 80137ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80137f0:	f107 0310 	add.w	r3, r7, #16
 80137f4:	22c0      	movs	r2, #192	@ 0xc0
 80137f6:	2100      	movs	r1, #0
 80137f8:	4618      	mov	r0, r3
 80137fa:	f001 f987 	bl	8014b0c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	4a2c      	ldr	r2, [pc, #176]	@ (80138b4 <HAL_PCD_MspInit+0xdc>)
 8013804:	4293      	cmp	r3, r2
 8013806:	d151      	bne.n	80138ac <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013808:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801380c:	f04f 0300 	mov.w	r3, #0
 8013810:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013814:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8013818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801381c:	f107 0310 	add.w	r3, r7, #16
 8013820:	4618      	mov	r0, r3
 8013822:	f7f3 f883 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d001      	beq.n	8013830 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801382c:	f7ee fb70 	bl	8001f10 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8013830:	f7f2 f85a 	bl	80058e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013834:	4b20      	ldr	r3, [pc, #128]	@ (80138b8 <HAL_PCD_MspInit+0xe0>)
 8013836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801383a:	4a1f      	ldr	r2, [pc, #124]	@ (80138b8 <HAL_PCD_MspInit+0xe0>)
 801383c:	f043 0301 	orr.w	r3, r3, #1
 8013840:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8013844:	4b1c      	ldr	r3, [pc, #112]	@ (80138b8 <HAL_PCD_MspInit+0xe0>)
 8013846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801384a:	f003 0301 	and.w	r3, r3, #1
 801384e:	60fb      	str	r3, [r7, #12]
 8013850:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013852:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8013856:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801385a:	2302      	movs	r3, #2
 801385c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013860:	2300      	movs	r3, #0
 8013862:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013866:	2300      	movs	r3, #0
 8013868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801386c:	230a      	movs	r3, #10
 801386e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013872:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8013876:	4619      	mov	r1, r3
 8013878:	4810      	ldr	r0, [pc, #64]	@ (80138bc <HAL_PCD_MspInit+0xe4>)
 801387a:	f7ef fa91 	bl	8002da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801387e:	4b0e      	ldr	r3, [pc, #56]	@ (80138b8 <HAL_PCD_MspInit+0xe0>)
 8013880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013884:	4a0c      	ldr	r2, [pc, #48]	@ (80138b8 <HAL_PCD_MspInit+0xe0>)
 8013886:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801388a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801388e:	4b0a      	ldr	r3, [pc, #40]	@ (80138b8 <HAL_PCD_MspInit+0xe0>)
 8013890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013898:	60bb      	str	r3, [r7, #8]
 801389a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801389c:	2200      	movs	r2, #0
 801389e:	2100      	movs	r1, #0
 80138a0:	2065      	movs	r0, #101	@ 0x65
 80138a2:	f7ef f9d0 	bl	8002c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80138a6:	2065      	movs	r0, #101	@ 0x65
 80138a8:	f7ef f9e7 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80138ac:	bf00      	nop
 80138ae:	37e8      	adds	r7, #232	@ 0xe8
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}
 80138b4:	40080000 	.word	0x40080000
 80138b8:	58024400 	.word	0x58024400
 80138bc:	58020000 	.word	0x58020000

080138c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b082      	sub	sp, #8
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80138d4:	4619      	mov	r1, r3
 80138d6:	4610      	mov	r0, r2
 80138d8:	f7fe fae6 	bl	8011ea8 <USBD_LL_SetupStage>
}
 80138dc:	bf00      	nop
 80138de:	3708      	adds	r7, #8
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}

080138e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b082      	sub	sp, #8
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	460b      	mov	r3, r1
 80138ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80138f6:	78fa      	ldrb	r2, [r7, #3]
 80138f8:	6879      	ldr	r1, [r7, #4]
 80138fa:	4613      	mov	r3, r2
 80138fc:	00db      	lsls	r3, r3, #3
 80138fe:	4413      	add	r3, r2
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	440b      	add	r3, r1
 8013904:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013908:	681a      	ldr	r2, [r3, #0]
 801390a:	78fb      	ldrb	r3, [r7, #3]
 801390c:	4619      	mov	r1, r3
 801390e:	f7fe fb20 	bl	8011f52 <USBD_LL_DataOutStage>
}
 8013912:	bf00      	nop
 8013914:	3708      	adds	r7, #8
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}

0801391a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801391a:	b580      	push	{r7, lr}
 801391c:	b082      	sub	sp, #8
 801391e:	af00      	add	r7, sp, #0
 8013920:	6078      	str	r0, [r7, #4]
 8013922:	460b      	mov	r3, r1
 8013924:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801392c:	78fa      	ldrb	r2, [r7, #3]
 801392e:	6879      	ldr	r1, [r7, #4]
 8013930:	4613      	mov	r3, r2
 8013932:	00db      	lsls	r3, r3, #3
 8013934:	4413      	add	r3, r2
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	440b      	add	r3, r1
 801393a:	3320      	adds	r3, #32
 801393c:	681a      	ldr	r2, [r3, #0]
 801393e:	78fb      	ldrb	r3, [r7, #3]
 8013940:	4619      	mov	r1, r3
 8013942:	f7fe fbb9 	bl	80120b8 <USBD_LL_DataInStage>
}
 8013946:	bf00      	nop
 8013948:	3708      	adds	r7, #8
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}

0801394e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801394e:	b580      	push	{r7, lr}
 8013950:	b082      	sub	sp, #8
 8013952:	af00      	add	r7, sp, #0
 8013954:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801395c:	4618      	mov	r0, r3
 801395e:	f7fe fcf3 	bl	8012348 <USBD_LL_SOF>
}
 8013962:	bf00      	nop
 8013964:	3708      	adds	r7, #8
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}

0801396a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801396a:	b580      	push	{r7, lr}
 801396c:	b084      	sub	sp, #16
 801396e:	af00      	add	r7, sp, #0
 8013970:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013972:	2301      	movs	r3, #1
 8013974:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	79db      	ldrb	r3, [r3, #7]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d102      	bne.n	8013984 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801397e:	2300      	movs	r3, #0
 8013980:	73fb      	strb	r3, [r7, #15]
 8013982:	e008      	b.n	8013996 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	79db      	ldrb	r3, [r3, #7]
 8013988:	2b02      	cmp	r3, #2
 801398a:	d102      	bne.n	8013992 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801398c:	2301      	movs	r3, #1
 801398e:	73fb      	strb	r3, [r7, #15]
 8013990:	e001      	b.n	8013996 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013992:	f7ee fabd 	bl	8001f10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801399c:	7bfa      	ldrb	r2, [r7, #15]
 801399e:	4611      	mov	r1, r2
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7fe fc8d 	bl	80122c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7fe fc35 	bl	801221c <USBD_LL_Reset>
}
 80139b2:	bf00      	nop
 80139b4:	3710      	adds	r7, #16
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
	...

080139bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b082      	sub	sp, #8
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7fe fc88 	bl	80122e0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	687a      	ldr	r2, [r7, #4]
 80139dc:	6812      	ldr	r2, [r2, #0]
 80139de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80139e2:	f043 0301 	orr.w	r3, r3, #1
 80139e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	7adb      	ldrb	r3, [r3, #11]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d005      	beq.n	80139fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80139f0:	4b04      	ldr	r3, [pc, #16]	@ (8013a04 <HAL_PCD_SuspendCallback+0x48>)
 80139f2:	691b      	ldr	r3, [r3, #16]
 80139f4:	4a03      	ldr	r2, [pc, #12]	@ (8013a04 <HAL_PCD_SuspendCallback+0x48>)
 80139f6:	f043 0306 	orr.w	r3, r3, #6
 80139fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80139fc:	bf00      	nop
 80139fe:	3708      	adds	r7, #8
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}
 8013a04:	e000ed00 	.word	0xe000ed00

08013a08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b082      	sub	sp, #8
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7fe fc7e 	bl	8012318 <USBD_LL_Resume>
}
 8013a1c:	bf00      	nop
 8013a1e:	3708      	adds	r7, #8
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}

08013a24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b082      	sub	sp, #8
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
 8013a2c:	460b      	mov	r3, r1
 8013a2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013a36:	78fa      	ldrb	r2, [r7, #3]
 8013a38:	4611      	mov	r1, r2
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7fe fcd6 	bl	80123ec <USBD_LL_IsoOUTIncomplete>
}
 8013a40:	bf00      	nop
 8013a42:	3708      	adds	r7, #8
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	460b      	mov	r3, r1
 8013a52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013a5a:	78fa      	ldrb	r2, [r7, #3]
 8013a5c:	4611      	mov	r1, r2
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7fe fc92 	bl	8012388 <USBD_LL_IsoINIncomplete>
}
 8013a64:	bf00      	nop
 8013a66:	3708      	adds	r7, #8
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7fe fce8 	bl	8012450 <USBD_LL_DevConnected>
}
 8013a80:	bf00      	nop
 8013a82:	3708      	adds	r7, #8
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7fe fce5 	bl	8012466 <USBD_LL_DevDisconnected>
}
 8013a9c:	bf00      	nop
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d13e      	bne.n	8013b32 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013ab4:	4a21      	ldr	r2, [pc, #132]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	4a1f      	ldr	r2, [pc, #124]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013ac0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8013b40 <USBD_LL_Init+0x9c>)
 8013ac8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8013aca:	4b1c      	ldr	r3, [pc, #112]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013acc:	2209      	movs	r2, #9
 8013ace:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013ad2:	2202      	movs	r2, #2
 8013ad4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013ad6:	4b19      	ldr	r3, [pc, #100]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013ad8:	2200      	movs	r2, #0
 8013ada:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013adc:	4b17      	ldr	r3, [pc, #92]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013ade:	2202      	movs	r2, #2
 8013ae0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013ae2:	4b16      	ldr	r3, [pc, #88]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013ae8:	4b14      	ldr	r3, [pc, #80]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013aea:	2200      	movs	r2, #0
 8013aec:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013aee:	4b13      	ldr	r3, [pc, #76]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013af0:	2200      	movs	r2, #0
 8013af2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8013af4:	4b11      	ldr	r3, [pc, #68]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013af6:	2200      	movs	r2, #0
 8013af8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013afa:	4b10      	ldr	r3, [pc, #64]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013afc:	2200      	movs	r2, #0
 8013afe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013b00:	4b0e      	ldr	r3, [pc, #56]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013b02:	2200      	movs	r2, #0
 8013b04:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013b06:	480d      	ldr	r0, [pc, #52]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013b08:	f7f0 fbe9 	bl	80042de <HAL_PCD_Init>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d001      	beq.n	8013b16 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8013b12:	f7ee f9fd 	bl	8001f10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013b16:	2180      	movs	r1, #128	@ 0x80
 8013b18:	4808      	ldr	r0, [pc, #32]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013b1a:	f7f1 fe6a 	bl	80057f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013b1e:	2240      	movs	r2, #64	@ 0x40
 8013b20:	2100      	movs	r1, #0
 8013b22:	4806      	ldr	r0, [pc, #24]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013b24:	f7f1 fe1e 	bl	8005764 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013b28:	2280      	movs	r2, #128	@ 0x80
 8013b2a:	2101      	movs	r1, #1
 8013b2c:	4803      	ldr	r0, [pc, #12]	@ (8013b3c <USBD_LL_Init+0x98>)
 8013b2e:	f7f1 fe19 	bl	8005764 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8013b32:	2300      	movs	r3, #0
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3708      	adds	r7, #8
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	24000f14 	.word	0x24000f14
 8013b40:	40080000 	.word	0x40080000

08013b44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b50:	2300      	movs	r3, #0
 8013b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7f0 fccb 	bl	80044f6 <HAL_PCD_Start>
 8013b60:	4603      	mov	r3, r0
 8013b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b64:	7bfb      	ldrb	r3, [r7, #15]
 8013b66:	4618      	mov	r0, r3
 8013b68:	f000 f962 	bl	8013e30 <USBD_Get_USB_Status>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3710      	adds	r7, #16
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}

08013b7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013b7a:	b580      	push	{r7, lr}
 8013b7c:	b084      	sub	sp, #16
 8013b7e:	af00      	add	r7, sp, #0
 8013b80:	6078      	str	r0, [r7, #4]
 8013b82:	4608      	mov	r0, r1
 8013b84:	4611      	mov	r1, r2
 8013b86:	461a      	mov	r2, r3
 8013b88:	4603      	mov	r3, r0
 8013b8a:	70fb      	strb	r3, [r7, #3]
 8013b8c:	460b      	mov	r3, r1
 8013b8e:	70bb      	strb	r3, [r7, #2]
 8013b90:	4613      	mov	r3, r2
 8013b92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b94:	2300      	movs	r3, #0
 8013b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013ba2:	78bb      	ldrb	r3, [r7, #2]
 8013ba4:	883a      	ldrh	r2, [r7, #0]
 8013ba6:	78f9      	ldrb	r1, [r7, #3]
 8013ba8:	f7f1 f9cc 	bl	8004f44 <HAL_PCD_EP_Open>
 8013bac:	4603      	mov	r3, r0
 8013bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013bb0:	7bfb      	ldrb	r3, [r7, #15]
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f000 f93c 	bl	8013e30 <USBD_Get_USB_Status>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3710      	adds	r7, #16
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}

08013bc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013bc6:	b580      	push	{r7, lr}
 8013bc8:	b084      	sub	sp, #16
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	6078      	str	r0, [r7, #4]
 8013bce:	460b      	mov	r3, r1
 8013bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013be0:	78fa      	ldrb	r2, [r7, #3]
 8013be2:	4611      	mov	r1, r2
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7f1 fa15 	bl	8005014 <HAL_PCD_EP_Close>
 8013bea:	4603      	mov	r3, r0
 8013bec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013bee:	7bfb      	ldrb	r3, [r7, #15]
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f000 f91d 	bl	8013e30 <USBD_Get_USB_Status>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3710      	adds	r7, #16
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}

08013c04 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b084      	sub	sp, #16
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c10:	2300      	movs	r3, #0
 8013c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c14:	2300      	movs	r3, #0
 8013c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013c1e:	78fa      	ldrb	r2, [r7, #3]
 8013c20:	4611      	mov	r1, r2
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7f1 fbb7 	bl	8005396 <HAL_PCD_EP_Flush>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c2c:	7bfb      	ldrb	r3, [r7, #15]
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f000 f8fe 	bl	8013e30 <USBD_Get_USB_Status>
 8013c34:	4603      	mov	r3, r0
 8013c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3710      	adds	r7, #16
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c42:	b580      	push	{r7, lr}
 8013c44:	b084      	sub	sp, #16
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	6078      	str	r0, [r7, #4]
 8013c4a:	460b      	mov	r3, r1
 8013c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c52:	2300      	movs	r3, #0
 8013c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013c5c:	78fa      	ldrb	r2, [r7, #3]
 8013c5e:	4611      	mov	r1, r2
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7f1 faae 	bl	80051c2 <HAL_PCD_EP_SetStall>
 8013c66:	4603      	mov	r3, r0
 8013c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c6a:	7bfb      	ldrb	r3, [r7, #15]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f000 f8df 	bl	8013e30 <USBD_Get_USB_Status>
 8013c72:	4603      	mov	r3, r0
 8013c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	460b      	mov	r3, r1
 8013c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c90:	2300      	movs	r3, #0
 8013c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013c9a:	78fa      	ldrb	r2, [r7, #3]
 8013c9c:	4611      	mov	r1, r2
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7f1 faf2 	bl	8005288 <HAL_PCD_EP_ClrStall>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ca8:	7bfb      	ldrb	r3, [r7, #15]
 8013caa:	4618      	mov	r0, r3
 8013cac:	f000 f8c0 	bl	8013e30 <USBD_Get_USB_Status>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3710      	adds	r7, #16
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}

08013cbe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013cbe:	b480      	push	{r7}
 8013cc0:	b085      	sub	sp, #20
 8013cc2:	af00      	add	r7, sp, #0
 8013cc4:	6078      	str	r0, [r7, #4]
 8013cc6:	460b      	mov	r3, r1
 8013cc8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013cd0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	da0b      	bge.n	8013cf2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013cda:	78fb      	ldrb	r3, [r7, #3]
 8013cdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013ce0:	68f9      	ldr	r1, [r7, #12]
 8013ce2:	4613      	mov	r3, r2
 8013ce4:	00db      	lsls	r3, r3, #3
 8013ce6:	4413      	add	r3, r2
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	440b      	add	r3, r1
 8013cec:	3316      	adds	r3, #22
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	e00b      	b.n	8013d0a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013cf2:	78fb      	ldrb	r3, [r7, #3]
 8013cf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013cf8:	68f9      	ldr	r1, [r7, #12]
 8013cfa:	4613      	mov	r3, r2
 8013cfc:	00db      	lsls	r3, r3, #3
 8013cfe:	4413      	add	r3, r2
 8013d00:	009b      	lsls	r3, r3, #2
 8013d02:	440b      	add	r3, r1
 8013d04:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8013d08:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	3714      	adds	r7, #20
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d14:	4770      	bx	lr

08013d16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013d16:	b580      	push	{r7, lr}
 8013d18:	b084      	sub	sp, #16
 8013d1a:	af00      	add	r7, sp, #0
 8013d1c:	6078      	str	r0, [r7, #4]
 8013d1e:	460b      	mov	r3, r1
 8013d20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d22:	2300      	movs	r3, #0
 8013d24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d26:	2300      	movs	r3, #0
 8013d28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013d30:	78fa      	ldrb	r2, [r7, #3]
 8013d32:	4611      	mov	r1, r2
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7f1 f8e1 	bl	8004efc <HAL_PCD_SetAddress>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d3e:	7bfb      	ldrb	r3, [r7, #15]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f000 f875 	bl	8013e30 <USBD_Get_USB_Status>
 8013d46:	4603      	mov	r3, r0
 8013d48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3710      	adds	r7, #16
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b086      	sub	sp, #24
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	60f8      	str	r0, [r7, #12]
 8013d5c:	607a      	str	r2, [r7, #4]
 8013d5e:	603b      	str	r3, [r7, #0]
 8013d60:	460b      	mov	r3, r1
 8013d62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d64:	2300      	movs	r3, #0
 8013d66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d68:	2300      	movs	r3, #0
 8013d6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013d72:	7af9      	ldrb	r1, [r7, #11]
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	687a      	ldr	r2, [r7, #4]
 8013d78:	f7f1 f9e9 	bl	800514e <HAL_PCD_EP_Transmit>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d80:	7dfb      	ldrb	r3, [r7, #23]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f000 f854 	bl	8013e30 <USBD_Get_USB_Status>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013d8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3718      	adds	r7, #24
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}

08013d96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013d96:	b580      	push	{r7, lr}
 8013d98:	b086      	sub	sp, #24
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	60f8      	str	r0, [r7, #12]
 8013d9e:	607a      	str	r2, [r7, #4]
 8013da0:	603b      	str	r3, [r7, #0]
 8013da2:	460b      	mov	r3, r1
 8013da4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013da6:	2300      	movs	r3, #0
 8013da8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013daa:	2300      	movs	r3, #0
 8013dac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013db4:	7af9      	ldrb	r1, [r7, #11]
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	f7f1 f975 	bl	80050a8 <HAL_PCD_EP_Receive>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013dc2:	7dfb      	ldrb	r3, [r7, #23]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f000 f833 	bl	8013e30 <USBD_Get_USB_Status>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013dce:	7dbb      	ldrb	r3, [r7, #22]
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3718      	adds	r7, #24
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
 8013de0:	460b      	mov	r3, r1
 8013de2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013dea:	78fa      	ldrb	r2, [r7, #3]
 8013dec:	4611      	mov	r1, r2
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7f1 f995 	bl	800511e <HAL_PCD_EP_GetRxCount>
 8013df4:	4603      	mov	r3, r0
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3708      	adds	r7, #8
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
	...

08013e00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013e00:	b480      	push	{r7}
 8013e02:	b083      	sub	sp, #12
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013e08:	4b03      	ldr	r3, [pc, #12]	@ (8013e18 <USBD_static_malloc+0x18>)
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	370c      	adds	r7, #12
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e14:	4770      	bx	lr
 8013e16:	bf00      	nop
 8013e18:	240013f8 	.word	0x240013f8

08013e1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b083      	sub	sp, #12
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013e24:	bf00      	nop
 8013e26:	370c      	adds	r7, #12
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013e30:	b480      	push	{r7}
 8013e32:	b085      	sub	sp, #20
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	4603      	mov	r3, r0
 8013e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013e3e:	79fb      	ldrb	r3, [r7, #7]
 8013e40:	2b03      	cmp	r3, #3
 8013e42:	d817      	bhi.n	8013e74 <USBD_Get_USB_Status+0x44>
 8013e44:	a201      	add	r2, pc, #4	@ (adr r2, 8013e4c <USBD_Get_USB_Status+0x1c>)
 8013e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e4a:	bf00      	nop
 8013e4c:	08013e5d 	.word	0x08013e5d
 8013e50:	08013e63 	.word	0x08013e63
 8013e54:	08013e69 	.word	0x08013e69
 8013e58:	08013e6f 	.word	0x08013e6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8013e60:	e00b      	b.n	8013e7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013e62:	2303      	movs	r3, #3
 8013e64:	73fb      	strb	r3, [r7, #15]
    break;
 8013e66:	e008      	b.n	8013e7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013e68:	2301      	movs	r3, #1
 8013e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8013e6c:	e005      	b.n	8013e7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013e6e:	2303      	movs	r3, #3
 8013e70:	73fb      	strb	r3, [r7, #15]
    break;
 8013e72:	e002      	b.n	8013e7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013e74:	2303      	movs	r3, #3
 8013e76:	73fb      	strb	r3, [r7, #15]
    break;
 8013e78:	bf00      	nop
  }
  return usb_status;
 8013e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3714      	adds	r7, #20
 8013e80:	46bd      	mov	sp, r7
 8013e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e86:	4770      	bx	lr

08013e88 <__cvt>:
 8013e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e8a:	ed2d 8b02 	vpush	{d8}
 8013e8e:	eeb0 8b40 	vmov.f64	d8, d0
 8013e92:	b085      	sub	sp, #20
 8013e94:	4617      	mov	r7, r2
 8013e96:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013e98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013e9a:	ee18 2a90 	vmov	r2, s17
 8013e9e:	f025 0520 	bic.w	r5, r5, #32
 8013ea2:	2a00      	cmp	r2, #0
 8013ea4:	bfb6      	itet	lt
 8013ea6:	222d      	movlt	r2, #45	@ 0x2d
 8013ea8:	2200      	movge	r2, #0
 8013eaa:	eeb1 8b40 	vneglt.f64	d8, d0
 8013eae:	2d46      	cmp	r5, #70	@ 0x46
 8013eb0:	460c      	mov	r4, r1
 8013eb2:	701a      	strb	r2, [r3, #0]
 8013eb4:	d004      	beq.n	8013ec0 <__cvt+0x38>
 8013eb6:	2d45      	cmp	r5, #69	@ 0x45
 8013eb8:	d100      	bne.n	8013ebc <__cvt+0x34>
 8013eba:	3401      	adds	r4, #1
 8013ebc:	2102      	movs	r1, #2
 8013ebe:	e000      	b.n	8013ec2 <__cvt+0x3a>
 8013ec0:	2103      	movs	r1, #3
 8013ec2:	ab03      	add	r3, sp, #12
 8013ec4:	9301      	str	r3, [sp, #4]
 8013ec6:	ab02      	add	r3, sp, #8
 8013ec8:	9300      	str	r3, [sp, #0]
 8013eca:	4622      	mov	r2, r4
 8013ecc:	4633      	mov	r3, r6
 8013ece:	eeb0 0b48 	vmov.f64	d0, d8
 8013ed2:	f000 ff31 	bl	8014d38 <_dtoa_r>
 8013ed6:	2d47      	cmp	r5, #71	@ 0x47
 8013ed8:	d114      	bne.n	8013f04 <__cvt+0x7c>
 8013eda:	07fb      	lsls	r3, r7, #31
 8013edc:	d50a      	bpl.n	8013ef4 <__cvt+0x6c>
 8013ede:	1902      	adds	r2, r0, r4
 8013ee0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee8:	bf08      	it	eq
 8013eea:	9203      	streq	r2, [sp, #12]
 8013eec:	2130      	movs	r1, #48	@ 0x30
 8013eee:	9b03      	ldr	r3, [sp, #12]
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d319      	bcc.n	8013f28 <__cvt+0xa0>
 8013ef4:	9b03      	ldr	r3, [sp, #12]
 8013ef6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ef8:	1a1b      	subs	r3, r3, r0
 8013efa:	6013      	str	r3, [r2, #0]
 8013efc:	b005      	add	sp, #20
 8013efe:	ecbd 8b02 	vpop	{d8}
 8013f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f04:	2d46      	cmp	r5, #70	@ 0x46
 8013f06:	eb00 0204 	add.w	r2, r0, r4
 8013f0a:	d1e9      	bne.n	8013ee0 <__cvt+0x58>
 8013f0c:	7803      	ldrb	r3, [r0, #0]
 8013f0e:	2b30      	cmp	r3, #48	@ 0x30
 8013f10:	d107      	bne.n	8013f22 <__cvt+0x9a>
 8013f12:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f1a:	bf1c      	itt	ne
 8013f1c:	f1c4 0401 	rsbne	r4, r4, #1
 8013f20:	6034      	strne	r4, [r6, #0]
 8013f22:	6833      	ldr	r3, [r6, #0]
 8013f24:	441a      	add	r2, r3
 8013f26:	e7db      	b.n	8013ee0 <__cvt+0x58>
 8013f28:	1c5c      	adds	r4, r3, #1
 8013f2a:	9403      	str	r4, [sp, #12]
 8013f2c:	7019      	strb	r1, [r3, #0]
 8013f2e:	e7de      	b.n	8013eee <__cvt+0x66>

08013f30 <__exponent>:
 8013f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f32:	2900      	cmp	r1, #0
 8013f34:	bfba      	itte	lt
 8013f36:	4249      	neglt	r1, r1
 8013f38:	232d      	movlt	r3, #45	@ 0x2d
 8013f3a:	232b      	movge	r3, #43	@ 0x2b
 8013f3c:	2909      	cmp	r1, #9
 8013f3e:	7002      	strb	r2, [r0, #0]
 8013f40:	7043      	strb	r3, [r0, #1]
 8013f42:	dd29      	ble.n	8013f98 <__exponent+0x68>
 8013f44:	f10d 0307 	add.w	r3, sp, #7
 8013f48:	461d      	mov	r5, r3
 8013f4a:	270a      	movs	r7, #10
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	fbb1 f6f7 	udiv	r6, r1, r7
 8013f52:	fb07 1416 	mls	r4, r7, r6, r1
 8013f56:	3430      	adds	r4, #48	@ 0x30
 8013f58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013f5c:	460c      	mov	r4, r1
 8013f5e:	2c63      	cmp	r4, #99	@ 0x63
 8013f60:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f64:	4631      	mov	r1, r6
 8013f66:	dcf1      	bgt.n	8013f4c <__exponent+0x1c>
 8013f68:	3130      	adds	r1, #48	@ 0x30
 8013f6a:	1e94      	subs	r4, r2, #2
 8013f6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013f70:	1c41      	adds	r1, r0, #1
 8013f72:	4623      	mov	r3, r4
 8013f74:	42ab      	cmp	r3, r5
 8013f76:	d30a      	bcc.n	8013f8e <__exponent+0x5e>
 8013f78:	f10d 0309 	add.w	r3, sp, #9
 8013f7c:	1a9b      	subs	r3, r3, r2
 8013f7e:	42ac      	cmp	r4, r5
 8013f80:	bf88      	it	hi
 8013f82:	2300      	movhi	r3, #0
 8013f84:	3302      	adds	r3, #2
 8013f86:	4403      	add	r3, r0
 8013f88:	1a18      	subs	r0, r3, r0
 8013f8a:	b003      	add	sp, #12
 8013f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013f92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013f96:	e7ed      	b.n	8013f74 <__exponent+0x44>
 8013f98:	2330      	movs	r3, #48	@ 0x30
 8013f9a:	3130      	adds	r1, #48	@ 0x30
 8013f9c:	7083      	strb	r3, [r0, #2]
 8013f9e:	70c1      	strb	r1, [r0, #3]
 8013fa0:	1d03      	adds	r3, r0, #4
 8013fa2:	e7f1      	b.n	8013f88 <__exponent+0x58>
 8013fa4:	0000      	movs	r0, r0
	...

08013fa8 <_printf_float>:
 8013fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fac:	b08d      	sub	sp, #52	@ 0x34
 8013fae:	460c      	mov	r4, r1
 8013fb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013fb4:	4616      	mov	r6, r2
 8013fb6:	461f      	mov	r7, r3
 8013fb8:	4605      	mov	r5, r0
 8013fba:	f000 fdaf 	bl	8014b1c <_localeconv_r>
 8013fbe:	f8d0 b000 	ldr.w	fp, [r0]
 8013fc2:	4658      	mov	r0, fp
 8013fc4:	f7ec f9dc 	bl	8000380 <strlen>
 8013fc8:	2300      	movs	r3, #0
 8013fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8013fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8013fd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013fd4:	6822      	ldr	r2, [r4, #0]
 8013fd6:	9005      	str	r0, [sp, #20]
 8013fd8:	3307      	adds	r3, #7
 8013fda:	f023 0307 	bic.w	r3, r3, #7
 8013fde:	f103 0108 	add.w	r1, r3, #8
 8013fe2:	f8c8 1000 	str.w	r1, [r8]
 8013fe6:	ed93 0b00 	vldr	d0, [r3]
 8013fea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8014248 <_printf_float+0x2a0>
 8013fee:	eeb0 7bc0 	vabs.f64	d7, d0
 8013ff2:	eeb4 7b46 	vcmp.f64	d7, d6
 8013ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8013ffe:	dd24      	ble.n	801404a <_printf_float+0xa2>
 8014000:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014008:	d502      	bpl.n	8014010 <_printf_float+0x68>
 801400a:	232d      	movs	r3, #45	@ 0x2d
 801400c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014010:	498f      	ldr	r1, [pc, #572]	@ (8014250 <_printf_float+0x2a8>)
 8014012:	4b90      	ldr	r3, [pc, #576]	@ (8014254 <_printf_float+0x2ac>)
 8014014:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8014018:	bf94      	ite	ls
 801401a:	4688      	movls	r8, r1
 801401c:	4698      	movhi	r8, r3
 801401e:	f022 0204 	bic.w	r2, r2, #4
 8014022:	2303      	movs	r3, #3
 8014024:	6123      	str	r3, [r4, #16]
 8014026:	6022      	str	r2, [r4, #0]
 8014028:	f04f 0a00 	mov.w	sl, #0
 801402c:	9700      	str	r7, [sp, #0]
 801402e:	4633      	mov	r3, r6
 8014030:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014032:	4621      	mov	r1, r4
 8014034:	4628      	mov	r0, r5
 8014036:	f000 f9d1 	bl	80143dc <_printf_common>
 801403a:	3001      	adds	r0, #1
 801403c:	f040 8089 	bne.w	8014152 <_printf_float+0x1aa>
 8014040:	f04f 30ff 	mov.w	r0, #4294967295
 8014044:	b00d      	add	sp, #52	@ 0x34
 8014046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801404a:	eeb4 0b40 	vcmp.f64	d0, d0
 801404e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014052:	d709      	bvc.n	8014068 <_printf_float+0xc0>
 8014054:	ee10 3a90 	vmov	r3, s1
 8014058:	2b00      	cmp	r3, #0
 801405a:	bfbc      	itt	lt
 801405c:	232d      	movlt	r3, #45	@ 0x2d
 801405e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014062:	497d      	ldr	r1, [pc, #500]	@ (8014258 <_printf_float+0x2b0>)
 8014064:	4b7d      	ldr	r3, [pc, #500]	@ (801425c <_printf_float+0x2b4>)
 8014066:	e7d5      	b.n	8014014 <_printf_float+0x6c>
 8014068:	6863      	ldr	r3, [r4, #4]
 801406a:	1c59      	adds	r1, r3, #1
 801406c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8014070:	d139      	bne.n	80140e6 <_printf_float+0x13e>
 8014072:	2306      	movs	r3, #6
 8014074:	6063      	str	r3, [r4, #4]
 8014076:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801407a:	2300      	movs	r3, #0
 801407c:	6022      	str	r2, [r4, #0]
 801407e:	9303      	str	r3, [sp, #12]
 8014080:	ab0a      	add	r3, sp, #40	@ 0x28
 8014082:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014086:	ab09      	add	r3, sp, #36	@ 0x24
 8014088:	9300      	str	r3, [sp, #0]
 801408a:	6861      	ldr	r1, [r4, #4]
 801408c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014090:	4628      	mov	r0, r5
 8014092:	f7ff fef9 	bl	8013e88 <__cvt>
 8014096:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801409a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801409c:	4680      	mov	r8, r0
 801409e:	d129      	bne.n	80140f4 <_printf_float+0x14c>
 80140a0:	1cc8      	adds	r0, r1, #3
 80140a2:	db02      	blt.n	80140aa <_printf_float+0x102>
 80140a4:	6863      	ldr	r3, [r4, #4]
 80140a6:	4299      	cmp	r1, r3
 80140a8:	dd41      	ble.n	801412e <_printf_float+0x186>
 80140aa:	f1a9 0902 	sub.w	r9, r9, #2
 80140ae:	fa5f f989 	uxtb.w	r9, r9
 80140b2:	3901      	subs	r1, #1
 80140b4:	464a      	mov	r2, r9
 80140b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80140ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80140bc:	f7ff ff38 	bl	8013f30 <__exponent>
 80140c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80140c2:	1813      	adds	r3, r2, r0
 80140c4:	2a01      	cmp	r2, #1
 80140c6:	4682      	mov	sl, r0
 80140c8:	6123      	str	r3, [r4, #16]
 80140ca:	dc02      	bgt.n	80140d2 <_printf_float+0x12a>
 80140cc:	6822      	ldr	r2, [r4, #0]
 80140ce:	07d2      	lsls	r2, r2, #31
 80140d0:	d501      	bpl.n	80140d6 <_printf_float+0x12e>
 80140d2:	3301      	adds	r3, #1
 80140d4:	6123      	str	r3, [r4, #16]
 80140d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d0a6      	beq.n	801402c <_printf_float+0x84>
 80140de:	232d      	movs	r3, #45	@ 0x2d
 80140e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80140e4:	e7a2      	b.n	801402c <_printf_float+0x84>
 80140e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80140ea:	d1c4      	bne.n	8014076 <_printf_float+0xce>
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d1c2      	bne.n	8014076 <_printf_float+0xce>
 80140f0:	2301      	movs	r3, #1
 80140f2:	e7bf      	b.n	8014074 <_printf_float+0xcc>
 80140f4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80140f8:	d9db      	bls.n	80140b2 <_printf_float+0x10a>
 80140fa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80140fe:	d118      	bne.n	8014132 <_printf_float+0x18a>
 8014100:	2900      	cmp	r1, #0
 8014102:	6863      	ldr	r3, [r4, #4]
 8014104:	dd0b      	ble.n	801411e <_printf_float+0x176>
 8014106:	6121      	str	r1, [r4, #16]
 8014108:	b913      	cbnz	r3, 8014110 <_printf_float+0x168>
 801410a:	6822      	ldr	r2, [r4, #0]
 801410c:	07d0      	lsls	r0, r2, #31
 801410e:	d502      	bpl.n	8014116 <_printf_float+0x16e>
 8014110:	3301      	adds	r3, #1
 8014112:	440b      	add	r3, r1
 8014114:	6123      	str	r3, [r4, #16]
 8014116:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014118:	f04f 0a00 	mov.w	sl, #0
 801411c:	e7db      	b.n	80140d6 <_printf_float+0x12e>
 801411e:	b913      	cbnz	r3, 8014126 <_printf_float+0x17e>
 8014120:	6822      	ldr	r2, [r4, #0]
 8014122:	07d2      	lsls	r2, r2, #31
 8014124:	d501      	bpl.n	801412a <_printf_float+0x182>
 8014126:	3302      	adds	r3, #2
 8014128:	e7f4      	b.n	8014114 <_printf_float+0x16c>
 801412a:	2301      	movs	r3, #1
 801412c:	e7f2      	b.n	8014114 <_printf_float+0x16c>
 801412e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8014132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014134:	4299      	cmp	r1, r3
 8014136:	db05      	blt.n	8014144 <_printf_float+0x19c>
 8014138:	6823      	ldr	r3, [r4, #0]
 801413a:	6121      	str	r1, [r4, #16]
 801413c:	07d8      	lsls	r0, r3, #31
 801413e:	d5ea      	bpl.n	8014116 <_printf_float+0x16e>
 8014140:	1c4b      	adds	r3, r1, #1
 8014142:	e7e7      	b.n	8014114 <_printf_float+0x16c>
 8014144:	2900      	cmp	r1, #0
 8014146:	bfd4      	ite	le
 8014148:	f1c1 0202 	rsble	r2, r1, #2
 801414c:	2201      	movgt	r2, #1
 801414e:	4413      	add	r3, r2
 8014150:	e7e0      	b.n	8014114 <_printf_float+0x16c>
 8014152:	6823      	ldr	r3, [r4, #0]
 8014154:	055a      	lsls	r2, r3, #21
 8014156:	d407      	bmi.n	8014168 <_printf_float+0x1c0>
 8014158:	6923      	ldr	r3, [r4, #16]
 801415a:	4642      	mov	r2, r8
 801415c:	4631      	mov	r1, r6
 801415e:	4628      	mov	r0, r5
 8014160:	47b8      	blx	r7
 8014162:	3001      	adds	r0, #1
 8014164:	d12a      	bne.n	80141bc <_printf_float+0x214>
 8014166:	e76b      	b.n	8014040 <_printf_float+0x98>
 8014168:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801416c:	f240 80e0 	bls.w	8014330 <_printf_float+0x388>
 8014170:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014174:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801417c:	d133      	bne.n	80141e6 <_printf_float+0x23e>
 801417e:	4a38      	ldr	r2, [pc, #224]	@ (8014260 <_printf_float+0x2b8>)
 8014180:	2301      	movs	r3, #1
 8014182:	4631      	mov	r1, r6
 8014184:	4628      	mov	r0, r5
 8014186:	47b8      	blx	r7
 8014188:	3001      	adds	r0, #1
 801418a:	f43f af59 	beq.w	8014040 <_printf_float+0x98>
 801418e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014192:	4543      	cmp	r3, r8
 8014194:	db02      	blt.n	801419c <_printf_float+0x1f4>
 8014196:	6823      	ldr	r3, [r4, #0]
 8014198:	07d8      	lsls	r0, r3, #31
 801419a:	d50f      	bpl.n	80141bc <_printf_float+0x214>
 801419c:	9b05      	ldr	r3, [sp, #20]
 801419e:	465a      	mov	r2, fp
 80141a0:	4631      	mov	r1, r6
 80141a2:	4628      	mov	r0, r5
 80141a4:	47b8      	blx	r7
 80141a6:	3001      	adds	r0, #1
 80141a8:	f43f af4a 	beq.w	8014040 <_printf_float+0x98>
 80141ac:	f04f 0900 	mov.w	r9, #0
 80141b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80141b4:	f104 0a1a 	add.w	sl, r4, #26
 80141b8:	45c8      	cmp	r8, r9
 80141ba:	dc09      	bgt.n	80141d0 <_printf_float+0x228>
 80141bc:	6823      	ldr	r3, [r4, #0]
 80141be:	079b      	lsls	r3, r3, #30
 80141c0:	f100 8107 	bmi.w	80143d2 <_printf_float+0x42a>
 80141c4:	68e0      	ldr	r0, [r4, #12]
 80141c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80141c8:	4298      	cmp	r0, r3
 80141ca:	bfb8      	it	lt
 80141cc:	4618      	movlt	r0, r3
 80141ce:	e739      	b.n	8014044 <_printf_float+0x9c>
 80141d0:	2301      	movs	r3, #1
 80141d2:	4652      	mov	r2, sl
 80141d4:	4631      	mov	r1, r6
 80141d6:	4628      	mov	r0, r5
 80141d8:	47b8      	blx	r7
 80141da:	3001      	adds	r0, #1
 80141dc:	f43f af30 	beq.w	8014040 <_printf_float+0x98>
 80141e0:	f109 0901 	add.w	r9, r9, #1
 80141e4:	e7e8      	b.n	80141b8 <_printf_float+0x210>
 80141e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	dc3b      	bgt.n	8014264 <_printf_float+0x2bc>
 80141ec:	4a1c      	ldr	r2, [pc, #112]	@ (8014260 <_printf_float+0x2b8>)
 80141ee:	2301      	movs	r3, #1
 80141f0:	4631      	mov	r1, r6
 80141f2:	4628      	mov	r0, r5
 80141f4:	47b8      	blx	r7
 80141f6:	3001      	adds	r0, #1
 80141f8:	f43f af22 	beq.w	8014040 <_printf_float+0x98>
 80141fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014200:	ea59 0303 	orrs.w	r3, r9, r3
 8014204:	d102      	bne.n	801420c <_printf_float+0x264>
 8014206:	6823      	ldr	r3, [r4, #0]
 8014208:	07d9      	lsls	r1, r3, #31
 801420a:	d5d7      	bpl.n	80141bc <_printf_float+0x214>
 801420c:	9b05      	ldr	r3, [sp, #20]
 801420e:	465a      	mov	r2, fp
 8014210:	4631      	mov	r1, r6
 8014212:	4628      	mov	r0, r5
 8014214:	47b8      	blx	r7
 8014216:	3001      	adds	r0, #1
 8014218:	f43f af12 	beq.w	8014040 <_printf_float+0x98>
 801421c:	f04f 0a00 	mov.w	sl, #0
 8014220:	f104 0b1a 	add.w	fp, r4, #26
 8014224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014226:	425b      	negs	r3, r3
 8014228:	4553      	cmp	r3, sl
 801422a:	dc01      	bgt.n	8014230 <_printf_float+0x288>
 801422c:	464b      	mov	r3, r9
 801422e:	e794      	b.n	801415a <_printf_float+0x1b2>
 8014230:	2301      	movs	r3, #1
 8014232:	465a      	mov	r2, fp
 8014234:	4631      	mov	r1, r6
 8014236:	4628      	mov	r0, r5
 8014238:	47b8      	blx	r7
 801423a:	3001      	adds	r0, #1
 801423c:	f43f af00 	beq.w	8014040 <_printf_float+0x98>
 8014240:	f10a 0a01 	add.w	sl, sl, #1
 8014244:	e7ee      	b.n	8014224 <_printf_float+0x27c>
 8014246:	bf00      	nop
 8014248:	ffffffff 	.word	0xffffffff
 801424c:	7fefffff 	.word	0x7fefffff
 8014250:	08016b1c 	.word	0x08016b1c
 8014254:	08016b20 	.word	0x08016b20
 8014258:	08016b24 	.word	0x08016b24
 801425c:	08016b28 	.word	0x08016b28
 8014260:	08016b2c 	.word	0x08016b2c
 8014264:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014266:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801426a:	4553      	cmp	r3, sl
 801426c:	bfa8      	it	ge
 801426e:	4653      	movge	r3, sl
 8014270:	2b00      	cmp	r3, #0
 8014272:	4699      	mov	r9, r3
 8014274:	dc37      	bgt.n	80142e6 <_printf_float+0x33e>
 8014276:	2300      	movs	r3, #0
 8014278:	9307      	str	r3, [sp, #28]
 801427a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801427e:	f104 021a 	add.w	r2, r4, #26
 8014282:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014284:	9907      	ldr	r1, [sp, #28]
 8014286:	9306      	str	r3, [sp, #24]
 8014288:	eba3 0309 	sub.w	r3, r3, r9
 801428c:	428b      	cmp	r3, r1
 801428e:	dc31      	bgt.n	80142f4 <_printf_float+0x34c>
 8014290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014292:	459a      	cmp	sl, r3
 8014294:	dc3b      	bgt.n	801430e <_printf_float+0x366>
 8014296:	6823      	ldr	r3, [r4, #0]
 8014298:	07da      	lsls	r2, r3, #31
 801429a:	d438      	bmi.n	801430e <_printf_float+0x366>
 801429c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801429e:	ebaa 0903 	sub.w	r9, sl, r3
 80142a2:	9b06      	ldr	r3, [sp, #24]
 80142a4:	ebaa 0303 	sub.w	r3, sl, r3
 80142a8:	4599      	cmp	r9, r3
 80142aa:	bfa8      	it	ge
 80142ac:	4699      	movge	r9, r3
 80142ae:	f1b9 0f00 	cmp.w	r9, #0
 80142b2:	dc34      	bgt.n	801431e <_printf_float+0x376>
 80142b4:	f04f 0800 	mov.w	r8, #0
 80142b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80142bc:	f104 0b1a 	add.w	fp, r4, #26
 80142c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142c2:	ebaa 0303 	sub.w	r3, sl, r3
 80142c6:	eba3 0309 	sub.w	r3, r3, r9
 80142ca:	4543      	cmp	r3, r8
 80142cc:	f77f af76 	ble.w	80141bc <_printf_float+0x214>
 80142d0:	2301      	movs	r3, #1
 80142d2:	465a      	mov	r2, fp
 80142d4:	4631      	mov	r1, r6
 80142d6:	4628      	mov	r0, r5
 80142d8:	47b8      	blx	r7
 80142da:	3001      	adds	r0, #1
 80142dc:	f43f aeb0 	beq.w	8014040 <_printf_float+0x98>
 80142e0:	f108 0801 	add.w	r8, r8, #1
 80142e4:	e7ec      	b.n	80142c0 <_printf_float+0x318>
 80142e6:	4642      	mov	r2, r8
 80142e8:	4631      	mov	r1, r6
 80142ea:	4628      	mov	r0, r5
 80142ec:	47b8      	blx	r7
 80142ee:	3001      	adds	r0, #1
 80142f0:	d1c1      	bne.n	8014276 <_printf_float+0x2ce>
 80142f2:	e6a5      	b.n	8014040 <_printf_float+0x98>
 80142f4:	2301      	movs	r3, #1
 80142f6:	4631      	mov	r1, r6
 80142f8:	4628      	mov	r0, r5
 80142fa:	9206      	str	r2, [sp, #24]
 80142fc:	47b8      	blx	r7
 80142fe:	3001      	adds	r0, #1
 8014300:	f43f ae9e 	beq.w	8014040 <_printf_float+0x98>
 8014304:	9b07      	ldr	r3, [sp, #28]
 8014306:	9a06      	ldr	r2, [sp, #24]
 8014308:	3301      	adds	r3, #1
 801430a:	9307      	str	r3, [sp, #28]
 801430c:	e7b9      	b.n	8014282 <_printf_float+0x2da>
 801430e:	9b05      	ldr	r3, [sp, #20]
 8014310:	465a      	mov	r2, fp
 8014312:	4631      	mov	r1, r6
 8014314:	4628      	mov	r0, r5
 8014316:	47b8      	blx	r7
 8014318:	3001      	adds	r0, #1
 801431a:	d1bf      	bne.n	801429c <_printf_float+0x2f4>
 801431c:	e690      	b.n	8014040 <_printf_float+0x98>
 801431e:	9a06      	ldr	r2, [sp, #24]
 8014320:	464b      	mov	r3, r9
 8014322:	4442      	add	r2, r8
 8014324:	4631      	mov	r1, r6
 8014326:	4628      	mov	r0, r5
 8014328:	47b8      	blx	r7
 801432a:	3001      	adds	r0, #1
 801432c:	d1c2      	bne.n	80142b4 <_printf_float+0x30c>
 801432e:	e687      	b.n	8014040 <_printf_float+0x98>
 8014330:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8014334:	f1b9 0f01 	cmp.w	r9, #1
 8014338:	dc01      	bgt.n	801433e <_printf_float+0x396>
 801433a:	07db      	lsls	r3, r3, #31
 801433c:	d536      	bpl.n	80143ac <_printf_float+0x404>
 801433e:	2301      	movs	r3, #1
 8014340:	4642      	mov	r2, r8
 8014342:	4631      	mov	r1, r6
 8014344:	4628      	mov	r0, r5
 8014346:	47b8      	blx	r7
 8014348:	3001      	adds	r0, #1
 801434a:	f43f ae79 	beq.w	8014040 <_printf_float+0x98>
 801434e:	9b05      	ldr	r3, [sp, #20]
 8014350:	465a      	mov	r2, fp
 8014352:	4631      	mov	r1, r6
 8014354:	4628      	mov	r0, r5
 8014356:	47b8      	blx	r7
 8014358:	3001      	adds	r0, #1
 801435a:	f43f ae71 	beq.w	8014040 <_printf_float+0x98>
 801435e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014362:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801436a:	f109 39ff 	add.w	r9, r9, #4294967295
 801436e:	d018      	beq.n	80143a2 <_printf_float+0x3fa>
 8014370:	464b      	mov	r3, r9
 8014372:	f108 0201 	add.w	r2, r8, #1
 8014376:	4631      	mov	r1, r6
 8014378:	4628      	mov	r0, r5
 801437a:	47b8      	blx	r7
 801437c:	3001      	adds	r0, #1
 801437e:	d10c      	bne.n	801439a <_printf_float+0x3f2>
 8014380:	e65e      	b.n	8014040 <_printf_float+0x98>
 8014382:	2301      	movs	r3, #1
 8014384:	465a      	mov	r2, fp
 8014386:	4631      	mov	r1, r6
 8014388:	4628      	mov	r0, r5
 801438a:	47b8      	blx	r7
 801438c:	3001      	adds	r0, #1
 801438e:	f43f ae57 	beq.w	8014040 <_printf_float+0x98>
 8014392:	f108 0801 	add.w	r8, r8, #1
 8014396:	45c8      	cmp	r8, r9
 8014398:	dbf3      	blt.n	8014382 <_printf_float+0x3da>
 801439a:	4653      	mov	r3, sl
 801439c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80143a0:	e6dc      	b.n	801415c <_printf_float+0x1b4>
 80143a2:	f04f 0800 	mov.w	r8, #0
 80143a6:	f104 0b1a 	add.w	fp, r4, #26
 80143aa:	e7f4      	b.n	8014396 <_printf_float+0x3ee>
 80143ac:	2301      	movs	r3, #1
 80143ae:	4642      	mov	r2, r8
 80143b0:	e7e1      	b.n	8014376 <_printf_float+0x3ce>
 80143b2:	2301      	movs	r3, #1
 80143b4:	464a      	mov	r2, r9
 80143b6:	4631      	mov	r1, r6
 80143b8:	4628      	mov	r0, r5
 80143ba:	47b8      	blx	r7
 80143bc:	3001      	adds	r0, #1
 80143be:	f43f ae3f 	beq.w	8014040 <_printf_float+0x98>
 80143c2:	f108 0801 	add.w	r8, r8, #1
 80143c6:	68e3      	ldr	r3, [r4, #12]
 80143c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80143ca:	1a5b      	subs	r3, r3, r1
 80143cc:	4543      	cmp	r3, r8
 80143ce:	dcf0      	bgt.n	80143b2 <_printf_float+0x40a>
 80143d0:	e6f8      	b.n	80141c4 <_printf_float+0x21c>
 80143d2:	f04f 0800 	mov.w	r8, #0
 80143d6:	f104 0919 	add.w	r9, r4, #25
 80143da:	e7f4      	b.n	80143c6 <_printf_float+0x41e>

080143dc <_printf_common>:
 80143dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143e0:	4616      	mov	r6, r2
 80143e2:	4698      	mov	r8, r3
 80143e4:	688a      	ldr	r2, [r1, #8]
 80143e6:	690b      	ldr	r3, [r1, #16]
 80143e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80143ec:	4293      	cmp	r3, r2
 80143ee:	bfb8      	it	lt
 80143f0:	4613      	movlt	r3, r2
 80143f2:	6033      	str	r3, [r6, #0]
 80143f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80143f8:	4607      	mov	r7, r0
 80143fa:	460c      	mov	r4, r1
 80143fc:	b10a      	cbz	r2, 8014402 <_printf_common+0x26>
 80143fe:	3301      	adds	r3, #1
 8014400:	6033      	str	r3, [r6, #0]
 8014402:	6823      	ldr	r3, [r4, #0]
 8014404:	0699      	lsls	r1, r3, #26
 8014406:	bf42      	ittt	mi
 8014408:	6833      	ldrmi	r3, [r6, #0]
 801440a:	3302      	addmi	r3, #2
 801440c:	6033      	strmi	r3, [r6, #0]
 801440e:	6825      	ldr	r5, [r4, #0]
 8014410:	f015 0506 	ands.w	r5, r5, #6
 8014414:	d106      	bne.n	8014424 <_printf_common+0x48>
 8014416:	f104 0a19 	add.w	sl, r4, #25
 801441a:	68e3      	ldr	r3, [r4, #12]
 801441c:	6832      	ldr	r2, [r6, #0]
 801441e:	1a9b      	subs	r3, r3, r2
 8014420:	42ab      	cmp	r3, r5
 8014422:	dc26      	bgt.n	8014472 <_printf_common+0x96>
 8014424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014428:	6822      	ldr	r2, [r4, #0]
 801442a:	3b00      	subs	r3, #0
 801442c:	bf18      	it	ne
 801442e:	2301      	movne	r3, #1
 8014430:	0692      	lsls	r2, r2, #26
 8014432:	d42b      	bmi.n	801448c <_printf_common+0xb0>
 8014434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014438:	4641      	mov	r1, r8
 801443a:	4638      	mov	r0, r7
 801443c:	47c8      	blx	r9
 801443e:	3001      	adds	r0, #1
 8014440:	d01e      	beq.n	8014480 <_printf_common+0xa4>
 8014442:	6823      	ldr	r3, [r4, #0]
 8014444:	6922      	ldr	r2, [r4, #16]
 8014446:	f003 0306 	and.w	r3, r3, #6
 801444a:	2b04      	cmp	r3, #4
 801444c:	bf02      	ittt	eq
 801444e:	68e5      	ldreq	r5, [r4, #12]
 8014450:	6833      	ldreq	r3, [r6, #0]
 8014452:	1aed      	subeq	r5, r5, r3
 8014454:	68a3      	ldr	r3, [r4, #8]
 8014456:	bf0c      	ite	eq
 8014458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801445c:	2500      	movne	r5, #0
 801445e:	4293      	cmp	r3, r2
 8014460:	bfc4      	itt	gt
 8014462:	1a9b      	subgt	r3, r3, r2
 8014464:	18ed      	addgt	r5, r5, r3
 8014466:	2600      	movs	r6, #0
 8014468:	341a      	adds	r4, #26
 801446a:	42b5      	cmp	r5, r6
 801446c:	d11a      	bne.n	80144a4 <_printf_common+0xc8>
 801446e:	2000      	movs	r0, #0
 8014470:	e008      	b.n	8014484 <_printf_common+0xa8>
 8014472:	2301      	movs	r3, #1
 8014474:	4652      	mov	r2, sl
 8014476:	4641      	mov	r1, r8
 8014478:	4638      	mov	r0, r7
 801447a:	47c8      	blx	r9
 801447c:	3001      	adds	r0, #1
 801447e:	d103      	bne.n	8014488 <_printf_common+0xac>
 8014480:	f04f 30ff 	mov.w	r0, #4294967295
 8014484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014488:	3501      	adds	r5, #1
 801448a:	e7c6      	b.n	801441a <_printf_common+0x3e>
 801448c:	18e1      	adds	r1, r4, r3
 801448e:	1c5a      	adds	r2, r3, #1
 8014490:	2030      	movs	r0, #48	@ 0x30
 8014492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014496:	4422      	add	r2, r4
 8014498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801449c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80144a0:	3302      	adds	r3, #2
 80144a2:	e7c7      	b.n	8014434 <_printf_common+0x58>
 80144a4:	2301      	movs	r3, #1
 80144a6:	4622      	mov	r2, r4
 80144a8:	4641      	mov	r1, r8
 80144aa:	4638      	mov	r0, r7
 80144ac:	47c8      	blx	r9
 80144ae:	3001      	adds	r0, #1
 80144b0:	d0e6      	beq.n	8014480 <_printf_common+0xa4>
 80144b2:	3601      	adds	r6, #1
 80144b4:	e7d9      	b.n	801446a <_printf_common+0x8e>
	...

080144b8 <_printf_i>:
 80144b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144bc:	7e0f      	ldrb	r7, [r1, #24]
 80144be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80144c0:	2f78      	cmp	r7, #120	@ 0x78
 80144c2:	4691      	mov	r9, r2
 80144c4:	4680      	mov	r8, r0
 80144c6:	460c      	mov	r4, r1
 80144c8:	469a      	mov	sl, r3
 80144ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80144ce:	d807      	bhi.n	80144e0 <_printf_i+0x28>
 80144d0:	2f62      	cmp	r7, #98	@ 0x62
 80144d2:	d80a      	bhi.n	80144ea <_printf_i+0x32>
 80144d4:	2f00      	cmp	r7, #0
 80144d6:	f000 80d2 	beq.w	801467e <_printf_i+0x1c6>
 80144da:	2f58      	cmp	r7, #88	@ 0x58
 80144dc:	f000 80b9 	beq.w	8014652 <_printf_i+0x19a>
 80144e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80144e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80144e8:	e03a      	b.n	8014560 <_printf_i+0xa8>
 80144ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80144ee:	2b15      	cmp	r3, #21
 80144f0:	d8f6      	bhi.n	80144e0 <_printf_i+0x28>
 80144f2:	a101      	add	r1, pc, #4	@ (adr r1, 80144f8 <_printf_i+0x40>)
 80144f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80144f8:	08014551 	.word	0x08014551
 80144fc:	08014565 	.word	0x08014565
 8014500:	080144e1 	.word	0x080144e1
 8014504:	080144e1 	.word	0x080144e1
 8014508:	080144e1 	.word	0x080144e1
 801450c:	080144e1 	.word	0x080144e1
 8014510:	08014565 	.word	0x08014565
 8014514:	080144e1 	.word	0x080144e1
 8014518:	080144e1 	.word	0x080144e1
 801451c:	080144e1 	.word	0x080144e1
 8014520:	080144e1 	.word	0x080144e1
 8014524:	08014665 	.word	0x08014665
 8014528:	0801458f 	.word	0x0801458f
 801452c:	0801461f 	.word	0x0801461f
 8014530:	080144e1 	.word	0x080144e1
 8014534:	080144e1 	.word	0x080144e1
 8014538:	08014687 	.word	0x08014687
 801453c:	080144e1 	.word	0x080144e1
 8014540:	0801458f 	.word	0x0801458f
 8014544:	080144e1 	.word	0x080144e1
 8014548:	080144e1 	.word	0x080144e1
 801454c:	08014627 	.word	0x08014627
 8014550:	6833      	ldr	r3, [r6, #0]
 8014552:	1d1a      	adds	r2, r3, #4
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	6032      	str	r2, [r6, #0]
 8014558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801455c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014560:	2301      	movs	r3, #1
 8014562:	e09d      	b.n	80146a0 <_printf_i+0x1e8>
 8014564:	6833      	ldr	r3, [r6, #0]
 8014566:	6820      	ldr	r0, [r4, #0]
 8014568:	1d19      	adds	r1, r3, #4
 801456a:	6031      	str	r1, [r6, #0]
 801456c:	0606      	lsls	r6, r0, #24
 801456e:	d501      	bpl.n	8014574 <_printf_i+0xbc>
 8014570:	681d      	ldr	r5, [r3, #0]
 8014572:	e003      	b.n	801457c <_printf_i+0xc4>
 8014574:	0645      	lsls	r5, r0, #25
 8014576:	d5fb      	bpl.n	8014570 <_printf_i+0xb8>
 8014578:	f9b3 5000 	ldrsh.w	r5, [r3]
 801457c:	2d00      	cmp	r5, #0
 801457e:	da03      	bge.n	8014588 <_printf_i+0xd0>
 8014580:	232d      	movs	r3, #45	@ 0x2d
 8014582:	426d      	negs	r5, r5
 8014584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014588:	4859      	ldr	r0, [pc, #356]	@ (80146f0 <_printf_i+0x238>)
 801458a:	230a      	movs	r3, #10
 801458c:	e011      	b.n	80145b2 <_printf_i+0xfa>
 801458e:	6821      	ldr	r1, [r4, #0]
 8014590:	6833      	ldr	r3, [r6, #0]
 8014592:	0608      	lsls	r0, r1, #24
 8014594:	f853 5b04 	ldr.w	r5, [r3], #4
 8014598:	d402      	bmi.n	80145a0 <_printf_i+0xe8>
 801459a:	0649      	lsls	r1, r1, #25
 801459c:	bf48      	it	mi
 801459e:	b2ad      	uxthmi	r5, r5
 80145a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80145a2:	4853      	ldr	r0, [pc, #332]	@ (80146f0 <_printf_i+0x238>)
 80145a4:	6033      	str	r3, [r6, #0]
 80145a6:	bf14      	ite	ne
 80145a8:	230a      	movne	r3, #10
 80145aa:	2308      	moveq	r3, #8
 80145ac:	2100      	movs	r1, #0
 80145ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80145b2:	6866      	ldr	r6, [r4, #4]
 80145b4:	60a6      	str	r6, [r4, #8]
 80145b6:	2e00      	cmp	r6, #0
 80145b8:	bfa2      	ittt	ge
 80145ba:	6821      	ldrge	r1, [r4, #0]
 80145bc:	f021 0104 	bicge.w	r1, r1, #4
 80145c0:	6021      	strge	r1, [r4, #0]
 80145c2:	b90d      	cbnz	r5, 80145c8 <_printf_i+0x110>
 80145c4:	2e00      	cmp	r6, #0
 80145c6:	d04b      	beq.n	8014660 <_printf_i+0x1a8>
 80145c8:	4616      	mov	r6, r2
 80145ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80145ce:	fb03 5711 	mls	r7, r3, r1, r5
 80145d2:	5dc7      	ldrb	r7, [r0, r7]
 80145d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80145d8:	462f      	mov	r7, r5
 80145da:	42bb      	cmp	r3, r7
 80145dc:	460d      	mov	r5, r1
 80145de:	d9f4      	bls.n	80145ca <_printf_i+0x112>
 80145e0:	2b08      	cmp	r3, #8
 80145e2:	d10b      	bne.n	80145fc <_printf_i+0x144>
 80145e4:	6823      	ldr	r3, [r4, #0]
 80145e6:	07df      	lsls	r7, r3, #31
 80145e8:	d508      	bpl.n	80145fc <_printf_i+0x144>
 80145ea:	6923      	ldr	r3, [r4, #16]
 80145ec:	6861      	ldr	r1, [r4, #4]
 80145ee:	4299      	cmp	r1, r3
 80145f0:	bfde      	ittt	le
 80145f2:	2330      	movle	r3, #48	@ 0x30
 80145f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80145f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80145fc:	1b92      	subs	r2, r2, r6
 80145fe:	6122      	str	r2, [r4, #16]
 8014600:	f8cd a000 	str.w	sl, [sp]
 8014604:	464b      	mov	r3, r9
 8014606:	aa03      	add	r2, sp, #12
 8014608:	4621      	mov	r1, r4
 801460a:	4640      	mov	r0, r8
 801460c:	f7ff fee6 	bl	80143dc <_printf_common>
 8014610:	3001      	adds	r0, #1
 8014612:	d14a      	bne.n	80146aa <_printf_i+0x1f2>
 8014614:	f04f 30ff 	mov.w	r0, #4294967295
 8014618:	b004      	add	sp, #16
 801461a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801461e:	6823      	ldr	r3, [r4, #0]
 8014620:	f043 0320 	orr.w	r3, r3, #32
 8014624:	6023      	str	r3, [r4, #0]
 8014626:	4833      	ldr	r0, [pc, #204]	@ (80146f4 <_printf_i+0x23c>)
 8014628:	2778      	movs	r7, #120	@ 0x78
 801462a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801462e:	6823      	ldr	r3, [r4, #0]
 8014630:	6831      	ldr	r1, [r6, #0]
 8014632:	061f      	lsls	r7, r3, #24
 8014634:	f851 5b04 	ldr.w	r5, [r1], #4
 8014638:	d402      	bmi.n	8014640 <_printf_i+0x188>
 801463a:	065f      	lsls	r7, r3, #25
 801463c:	bf48      	it	mi
 801463e:	b2ad      	uxthmi	r5, r5
 8014640:	6031      	str	r1, [r6, #0]
 8014642:	07d9      	lsls	r1, r3, #31
 8014644:	bf44      	itt	mi
 8014646:	f043 0320 	orrmi.w	r3, r3, #32
 801464a:	6023      	strmi	r3, [r4, #0]
 801464c:	b11d      	cbz	r5, 8014656 <_printf_i+0x19e>
 801464e:	2310      	movs	r3, #16
 8014650:	e7ac      	b.n	80145ac <_printf_i+0xf4>
 8014652:	4827      	ldr	r0, [pc, #156]	@ (80146f0 <_printf_i+0x238>)
 8014654:	e7e9      	b.n	801462a <_printf_i+0x172>
 8014656:	6823      	ldr	r3, [r4, #0]
 8014658:	f023 0320 	bic.w	r3, r3, #32
 801465c:	6023      	str	r3, [r4, #0]
 801465e:	e7f6      	b.n	801464e <_printf_i+0x196>
 8014660:	4616      	mov	r6, r2
 8014662:	e7bd      	b.n	80145e0 <_printf_i+0x128>
 8014664:	6833      	ldr	r3, [r6, #0]
 8014666:	6825      	ldr	r5, [r4, #0]
 8014668:	6961      	ldr	r1, [r4, #20]
 801466a:	1d18      	adds	r0, r3, #4
 801466c:	6030      	str	r0, [r6, #0]
 801466e:	062e      	lsls	r6, r5, #24
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	d501      	bpl.n	8014678 <_printf_i+0x1c0>
 8014674:	6019      	str	r1, [r3, #0]
 8014676:	e002      	b.n	801467e <_printf_i+0x1c6>
 8014678:	0668      	lsls	r0, r5, #25
 801467a:	d5fb      	bpl.n	8014674 <_printf_i+0x1bc>
 801467c:	8019      	strh	r1, [r3, #0]
 801467e:	2300      	movs	r3, #0
 8014680:	6123      	str	r3, [r4, #16]
 8014682:	4616      	mov	r6, r2
 8014684:	e7bc      	b.n	8014600 <_printf_i+0x148>
 8014686:	6833      	ldr	r3, [r6, #0]
 8014688:	1d1a      	adds	r2, r3, #4
 801468a:	6032      	str	r2, [r6, #0]
 801468c:	681e      	ldr	r6, [r3, #0]
 801468e:	6862      	ldr	r2, [r4, #4]
 8014690:	2100      	movs	r1, #0
 8014692:	4630      	mov	r0, r6
 8014694:	f7eb fe24 	bl	80002e0 <memchr>
 8014698:	b108      	cbz	r0, 801469e <_printf_i+0x1e6>
 801469a:	1b80      	subs	r0, r0, r6
 801469c:	6060      	str	r0, [r4, #4]
 801469e:	6863      	ldr	r3, [r4, #4]
 80146a0:	6123      	str	r3, [r4, #16]
 80146a2:	2300      	movs	r3, #0
 80146a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80146a8:	e7aa      	b.n	8014600 <_printf_i+0x148>
 80146aa:	6923      	ldr	r3, [r4, #16]
 80146ac:	4632      	mov	r2, r6
 80146ae:	4649      	mov	r1, r9
 80146b0:	4640      	mov	r0, r8
 80146b2:	47d0      	blx	sl
 80146b4:	3001      	adds	r0, #1
 80146b6:	d0ad      	beq.n	8014614 <_printf_i+0x15c>
 80146b8:	6823      	ldr	r3, [r4, #0]
 80146ba:	079b      	lsls	r3, r3, #30
 80146bc:	d413      	bmi.n	80146e6 <_printf_i+0x22e>
 80146be:	68e0      	ldr	r0, [r4, #12]
 80146c0:	9b03      	ldr	r3, [sp, #12]
 80146c2:	4298      	cmp	r0, r3
 80146c4:	bfb8      	it	lt
 80146c6:	4618      	movlt	r0, r3
 80146c8:	e7a6      	b.n	8014618 <_printf_i+0x160>
 80146ca:	2301      	movs	r3, #1
 80146cc:	4632      	mov	r2, r6
 80146ce:	4649      	mov	r1, r9
 80146d0:	4640      	mov	r0, r8
 80146d2:	47d0      	blx	sl
 80146d4:	3001      	adds	r0, #1
 80146d6:	d09d      	beq.n	8014614 <_printf_i+0x15c>
 80146d8:	3501      	adds	r5, #1
 80146da:	68e3      	ldr	r3, [r4, #12]
 80146dc:	9903      	ldr	r1, [sp, #12]
 80146de:	1a5b      	subs	r3, r3, r1
 80146e0:	42ab      	cmp	r3, r5
 80146e2:	dcf2      	bgt.n	80146ca <_printf_i+0x212>
 80146e4:	e7eb      	b.n	80146be <_printf_i+0x206>
 80146e6:	2500      	movs	r5, #0
 80146e8:	f104 0619 	add.w	r6, r4, #25
 80146ec:	e7f5      	b.n	80146da <_printf_i+0x222>
 80146ee:	bf00      	nop
 80146f0:	08016b2e 	.word	0x08016b2e
 80146f4:	08016b3f 	.word	0x08016b3f

080146f8 <std>:
 80146f8:	2300      	movs	r3, #0
 80146fa:	b510      	push	{r4, lr}
 80146fc:	4604      	mov	r4, r0
 80146fe:	e9c0 3300 	strd	r3, r3, [r0]
 8014702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014706:	6083      	str	r3, [r0, #8]
 8014708:	8181      	strh	r1, [r0, #12]
 801470a:	6643      	str	r3, [r0, #100]	@ 0x64
 801470c:	81c2      	strh	r2, [r0, #14]
 801470e:	6183      	str	r3, [r0, #24]
 8014710:	4619      	mov	r1, r3
 8014712:	2208      	movs	r2, #8
 8014714:	305c      	adds	r0, #92	@ 0x5c
 8014716:	f000 f9f9 	bl	8014b0c <memset>
 801471a:	4b0d      	ldr	r3, [pc, #52]	@ (8014750 <std+0x58>)
 801471c:	6263      	str	r3, [r4, #36]	@ 0x24
 801471e:	4b0d      	ldr	r3, [pc, #52]	@ (8014754 <std+0x5c>)
 8014720:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014722:	4b0d      	ldr	r3, [pc, #52]	@ (8014758 <std+0x60>)
 8014724:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014726:	4b0d      	ldr	r3, [pc, #52]	@ (801475c <std+0x64>)
 8014728:	6323      	str	r3, [r4, #48]	@ 0x30
 801472a:	4b0d      	ldr	r3, [pc, #52]	@ (8014760 <std+0x68>)
 801472c:	6224      	str	r4, [r4, #32]
 801472e:	429c      	cmp	r4, r3
 8014730:	d006      	beq.n	8014740 <std+0x48>
 8014732:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014736:	4294      	cmp	r4, r2
 8014738:	d002      	beq.n	8014740 <std+0x48>
 801473a:	33d0      	adds	r3, #208	@ 0xd0
 801473c:	429c      	cmp	r4, r3
 801473e:	d105      	bne.n	801474c <std+0x54>
 8014740:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014748:	f000 ba5c 	b.w	8014c04 <__retarget_lock_init_recursive>
 801474c:	bd10      	pop	{r4, pc}
 801474e:	bf00      	nop
 8014750:	0801495d 	.word	0x0801495d
 8014754:	0801497f 	.word	0x0801497f
 8014758:	080149b7 	.word	0x080149b7
 801475c:	080149db 	.word	0x080149db
 8014760:	24001670 	.word	0x24001670

08014764 <stdio_exit_handler>:
 8014764:	4a02      	ldr	r2, [pc, #8]	@ (8014770 <stdio_exit_handler+0xc>)
 8014766:	4903      	ldr	r1, [pc, #12]	@ (8014774 <stdio_exit_handler+0x10>)
 8014768:	4803      	ldr	r0, [pc, #12]	@ (8014778 <stdio_exit_handler+0x14>)
 801476a:	f000 b869 	b.w	8014840 <_fwalk_sglue>
 801476e:	bf00      	nop
 8014770:	24000130 	.word	0x24000130
 8014774:	08016475 	.word	0x08016475
 8014778:	24000140 	.word	0x24000140

0801477c <cleanup_stdio>:
 801477c:	6841      	ldr	r1, [r0, #4]
 801477e:	4b0c      	ldr	r3, [pc, #48]	@ (80147b0 <cleanup_stdio+0x34>)
 8014780:	4299      	cmp	r1, r3
 8014782:	b510      	push	{r4, lr}
 8014784:	4604      	mov	r4, r0
 8014786:	d001      	beq.n	801478c <cleanup_stdio+0x10>
 8014788:	f001 fe74 	bl	8016474 <_fflush_r>
 801478c:	68a1      	ldr	r1, [r4, #8]
 801478e:	4b09      	ldr	r3, [pc, #36]	@ (80147b4 <cleanup_stdio+0x38>)
 8014790:	4299      	cmp	r1, r3
 8014792:	d002      	beq.n	801479a <cleanup_stdio+0x1e>
 8014794:	4620      	mov	r0, r4
 8014796:	f001 fe6d 	bl	8016474 <_fflush_r>
 801479a:	68e1      	ldr	r1, [r4, #12]
 801479c:	4b06      	ldr	r3, [pc, #24]	@ (80147b8 <cleanup_stdio+0x3c>)
 801479e:	4299      	cmp	r1, r3
 80147a0:	d004      	beq.n	80147ac <cleanup_stdio+0x30>
 80147a2:	4620      	mov	r0, r4
 80147a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147a8:	f001 be64 	b.w	8016474 <_fflush_r>
 80147ac:	bd10      	pop	{r4, pc}
 80147ae:	bf00      	nop
 80147b0:	24001670 	.word	0x24001670
 80147b4:	240016d8 	.word	0x240016d8
 80147b8:	24001740 	.word	0x24001740

080147bc <global_stdio_init.part.0>:
 80147bc:	b510      	push	{r4, lr}
 80147be:	4b0b      	ldr	r3, [pc, #44]	@ (80147ec <global_stdio_init.part.0+0x30>)
 80147c0:	4c0b      	ldr	r4, [pc, #44]	@ (80147f0 <global_stdio_init.part.0+0x34>)
 80147c2:	4a0c      	ldr	r2, [pc, #48]	@ (80147f4 <global_stdio_init.part.0+0x38>)
 80147c4:	601a      	str	r2, [r3, #0]
 80147c6:	4620      	mov	r0, r4
 80147c8:	2200      	movs	r2, #0
 80147ca:	2104      	movs	r1, #4
 80147cc:	f7ff ff94 	bl	80146f8 <std>
 80147d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80147d4:	2201      	movs	r2, #1
 80147d6:	2109      	movs	r1, #9
 80147d8:	f7ff ff8e 	bl	80146f8 <std>
 80147dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80147e0:	2202      	movs	r2, #2
 80147e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147e6:	2112      	movs	r1, #18
 80147e8:	f7ff bf86 	b.w	80146f8 <std>
 80147ec:	240017a8 	.word	0x240017a8
 80147f0:	24001670 	.word	0x24001670
 80147f4:	08014765 	.word	0x08014765

080147f8 <__sfp_lock_acquire>:
 80147f8:	4801      	ldr	r0, [pc, #4]	@ (8014800 <__sfp_lock_acquire+0x8>)
 80147fa:	f000 ba04 	b.w	8014c06 <__retarget_lock_acquire_recursive>
 80147fe:	bf00      	nop
 8014800:	240017b1 	.word	0x240017b1

08014804 <__sfp_lock_release>:
 8014804:	4801      	ldr	r0, [pc, #4]	@ (801480c <__sfp_lock_release+0x8>)
 8014806:	f000 b9ff 	b.w	8014c08 <__retarget_lock_release_recursive>
 801480a:	bf00      	nop
 801480c:	240017b1 	.word	0x240017b1

08014810 <__sinit>:
 8014810:	b510      	push	{r4, lr}
 8014812:	4604      	mov	r4, r0
 8014814:	f7ff fff0 	bl	80147f8 <__sfp_lock_acquire>
 8014818:	6a23      	ldr	r3, [r4, #32]
 801481a:	b11b      	cbz	r3, 8014824 <__sinit+0x14>
 801481c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014820:	f7ff bff0 	b.w	8014804 <__sfp_lock_release>
 8014824:	4b04      	ldr	r3, [pc, #16]	@ (8014838 <__sinit+0x28>)
 8014826:	6223      	str	r3, [r4, #32]
 8014828:	4b04      	ldr	r3, [pc, #16]	@ (801483c <__sinit+0x2c>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d1f5      	bne.n	801481c <__sinit+0xc>
 8014830:	f7ff ffc4 	bl	80147bc <global_stdio_init.part.0>
 8014834:	e7f2      	b.n	801481c <__sinit+0xc>
 8014836:	bf00      	nop
 8014838:	0801477d 	.word	0x0801477d
 801483c:	240017a8 	.word	0x240017a8

08014840 <_fwalk_sglue>:
 8014840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014844:	4607      	mov	r7, r0
 8014846:	4688      	mov	r8, r1
 8014848:	4614      	mov	r4, r2
 801484a:	2600      	movs	r6, #0
 801484c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014850:	f1b9 0901 	subs.w	r9, r9, #1
 8014854:	d505      	bpl.n	8014862 <_fwalk_sglue+0x22>
 8014856:	6824      	ldr	r4, [r4, #0]
 8014858:	2c00      	cmp	r4, #0
 801485a:	d1f7      	bne.n	801484c <_fwalk_sglue+0xc>
 801485c:	4630      	mov	r0, r6
 801485e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014862:	89ab      	ldrh	r3, [r5, #12]
 8014864:	2b01      	cmp	r3, #1
 8014866:	d907      	bls.n	8014878 <_fwalk_sglue+0x38>
 8014868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801486c:	3301      	adds	r3, #1
 801486e:	d003      	beq.n	8014878 <_fwalk_sglue+0x38>
 8014870:	4629      	mov	r1, r5
 8014872:	4638      	mov	r0, r7
 8014874:	47c0      	blx	r8
 8014876:	4306      	orrs	r6, r0
 8014878:	3568      	adds	r5, #104	@ 0x68
 801487a:	e7e9      	b.n	8014850 <_fwalk_sglue+0x10>

0801487c <iprintf>:
 801487c:	b40f      	push	{r0, r1, r2, r3}
 801487e:	b507      	push	{r0, r1, r2, lr}
 8014880:	4906      	ldr	r1, [pc, #24]	@ (801489c <iprintf+0x20>)
 8014882:	ab04      	add	r3, sp, #16
 8014884:	6808      	ldr	r0, [r1, #0]
 8014886:	f853 2b04 	ldr.w	r2, [r3], #4
 801488a:	6881      	ldr	r1, [r0, #8]
 801488c:	9301      	str	r3, [sp, #4]
 801488e:	f001 fc55 	bl	801613c <_vfiprintf_r>
 8014892:	b003      	add	sp, #12
 8014894:	f85d eb04 	ldr.w	lr, [sp], #4
 8014898:	b004      	add	sp, #16
 801489a:	4770      	bx	lr
 801489c:	2400013c 	.word	0x2400013c

080148a0 <_puts_r>:
 80148a0:	6a03      	ldr	r3, [r0, #32]
 80148a2:	b570      	push	{r4, r5, r6, lr}
 80148a4:	6884      	ldr	r4, [r0, #8]
 80148a6:	4605      	mov	r5, r0
 80148a8:	460e      	mov	r6, r1
 80148aa:	b90b      	cbnz	r3, 80148b0 <_puts_r+0x10>
 80148ac:	f7ff ffb0 	bl	8014810 <__sinit>
 80148b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80148b2:	07db      	lsls	r3, r3, #31
 80148b4:	d405      	bmi.n	80148c2 <_puts_r+0x22>
 80148b6:	89a3      	ldrh	r3, [r4, #12]
 80148b8:	0598      	lsls	r0, r3, #22
 80148ba:	d402      	bmi.n	80148c2 <_puts_r+0x22>
 80148bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148be:	f000 f9a2 	bl	8014c06 <__retarget_lock_acquire_recursive>
 80148c2:	89a3      	ldrh	r3, [r4, #12]
 80148c4:	0719      	lsls	r1, r3, #28
 80148c6:	d502      	bpl.n	80148ce <_puts_r+0x2e>
 80148c8:	6923      	ldr	r3, [r4, #16]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d135      	bne.n	801493a <_puts_r+0x9a>
 80148ce:	4621      	mov	r1, r4
 80148d0:	4628      	mov	r0, r5
 80148d2:	f000 f8c5 	bl	8014a60 <__swsetup_r>
 80148d6:	b380      	cbz	r0, 801493a <_puts_r+0x9a>
 80148d8:	f04f 35ff 	mov.w	r5, #4294967295
 80148dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80148de:	07da      	lsls	r2, r3, #31
 80148e0:	d405      	bmi.n	80148ee <_puts_r+0x4e>
 80148e2:	89a3      	ldrh	r3, [r4, #12]
 80148e4:	059b      	lsls	r3, r3, #22
 80148e6:	d402      	bmi.n	80148ee <_puts_r+0x4e>
 80148e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148ea:	f000 f98d 	bl	8014c08 <__retarget_lock_release_recursive>
 80148ee:	4628      	mov	r0, r5
 80148f0:	bd70      	pop	{r4, r5, r6, pc}
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	da04      	bge.n	8014900 <_puts_r+0x60>
 80148f6:	69a2      	ldr	r2, [r4, #24]
 80148f8:	429a      	cmp	r2, r3
 80148fa:	dc17      	bgt.n	801492c <_puts_r+0x8c>
 80148fc:	290a      	cmp	r1, #10
 80148fe:	d015      	beq.n	801492c <_puts_r+0x8c>
 8014900:	6823      	ldr	r3, [r4, #0]
 8014902:	1c5a      	adds	r2, r3, #1
 8014904:	6022      	str	r2, [r4, #0]
 8014906:	7019      	strb	r1, [r3, #0]
 8014908:	68a3      	ldr	r3, [r4, #8]
 801490a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801490e:	3b01      	subs	r3, #1
 8014910:	60a3      	str	r3, [r4, #8]
 8014912:	2900      	cmp	r1, #0
 8014914:	d1ed      	bne.n	80148f2 <_puts_r+0x52>
 8014916:	2b00      	cmp	r3, #0
 8014918:	da11      	bge.n	801493e <_puts_r+0x9e>
 801491a:	4622      	mov	r2, r4
 801491c:	210a      	movs	r1, #10
 801491e:	4628      	mov	r0, r5
 8014920:	f000 f85f 	bl	80149e2 <__swbuf_r>
 8014924:	3001      	adds	r0, #1
 8014926:	d0d7      	beq.n	80148d8 <_puts_r+0x38>
 8014928:	250a      	movs	r5, #10
 801492a:	e7d7      	b.n	80148dc <_puts_r+0x3c>
 801492c:	4622      	mov	r2, r4
 801492e:	4628      	mov	r0, r5
 8014930:	f000 f857 	bl	80149e2 <__swbuf_r>
 8014934:	3001      	adds	r0, #1
 8014936:	d1e7      	bne.n	8014908 <_puts_r+0x68>
 8014938:	e7ce      	b.n	80148d8 <_puts_r+0x38>
 801493a:	3e01      	subs	r6, #1
 801493c:	e7e4      	b.n	8014908 <_puts_r+0x68>
 801493e:	6823      	ldr	r3, [r4, #0]
 8014940:	1c5a      	adds	r2, r3, #1
 8014942:	6022      	str	r2, [r4, #0]
 8014944:	220a      	movs	r2, #10
 8014946:	701a      	strb	r2, [r3, #0]
 8014948:	e7ee      	b.n	8014928 <_puts_r+0x88>
	...

0801494c <puts>:
 801494c:	4b02      	ldr	r3, [pc, #8]	@ (8014958 <puts+0xc>)
 801494e:	4601      	mov	r1, r0
 8014950:	6818      	ldr	r0, [r3, #0]
 8014952:	f7ff bfa5 	b.w	80148a0 <_puts_r>
 8014956:	bf00      	nop
 8014958:	2400013c 	.word	0x2400013c

0801495c <__sread>:
 801495c:	b510      	push	{r4, lr}
 801495e:	460c      	mov	r4, r1
 8014960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014964:	f000 f900 	bl	8014b68 <_read_r>
 8014968:	2800      	cmp	r0, #0
 801496a:	bfab      	itete	ge
 801496c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801496e:	89a3      	ldrhlt	r3, [r4, #12]
 8014970:	181b      	addge	r3, r3, r0
 8014972:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014976:	bfac      	ite	ge
 8014978:	6563      	strge	r3, [r4, #84]	@ 0x54
 801497a:	81a3      	strhlt	r3, [r4, #12]
 801497c:	bd10      	pop	{r4, pc}

0801497e <__swrite>:
 801497e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014982:	461f      	mov	r7, r3
 8014984:	898b      	ldrh	r3, [r1, #12]
 8014986:	05db      	lsls	r3, r3, #23
 8014988:	4605      	mov	r5, r0
 801498a:	460c      	mov	r4, r1
 801498c:	4616      	mov	r6, r2
 801498e:	d505      	bpl.n	801499c <__swrite+0x1e>
 8014990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014994:	2302      	movs	r3, #2
 8014996:	2200      	movs	r2, #0
 8014998:	f000 f8d4 	bl	8014b44 <_lseek_r>
 801499c:	89a3      	ldrh	r3, [r4, #12]
 801499e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80149a6:	81a3      	strh	r3, [r4, #12]
 80149a8:	4632      	mov	r2, r6
 80149aa:	463b      	mov	r3, r7
 80149ac:	4628      	mov	r0, r5
 80149ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149b2:	f000 b8eb 	b.w	8014b8c <_write_r>

080149b6 <__sseek>:
 80149b6:	b510      	push	{r4, lr}
 80149b8:	460c      	mov	r4, r1
 80149ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149be:	f000 f8c1 	bl	8014b44 <_lseek_r>
 80149c2:	1c43      	adds	r3, r0, #1
 80149c4:	89a3      	ldrh	r3, [r4, #12]
 80149c6:	bf15      	itete	ne
 80149c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80149ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80149ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80149d2:	81a3      	strheq	r3, [r4, #12]
 80149d4:	bf18      	it	ne
 80149d6:	81a3      	strhne	r3, [r4, #12]
 80149d8:	bd10      	pop	{r4, pc}

080149da <__sclose>:
 80149da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149de:	f000 b8a1 	b.w	8014b24 <_close_r>

080149e2 <__swbuf_r>:
 80149e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149e4:	460e      	mov	r6, r1
 80149e6:	4614      	mov	r4, r2
 80149e8:	4605      	mov	r5, r0
 80149ea:	b118      	cbz	r0, 80149f4 <__swbuf_r+0x12>
 80149ec:	6a03      	ldr	r3, [r0, #32]
 80149ee:	b90b      	cbnz	r3, 80149f4 <__swbuf_r+0x12>
 80149f0:	f7ff ff0e 	bl	8014810 <__sinit>
 80149f4:	69a3      	ldr	r3, [r4, #24]
 80149f6:	60a3      	str	r3, [r4, #8]
 80149f8:	89a3      	ldrh	r3, [r4, #12]
 80149fa:	071a      	lsls	r2, r3, #28
 80149fc:	d501      	bpl.n	8014a02 <__swbuf_r+0x20>
 80149fe:	6923      	ldr	r3, [r4, #16]
 8014a00:	b943      	cbnz	r3, 8014a14 <__swbuf_r+0x32>
 8014a02:	4621      	mov	r1, r4
 8014a04:	4628      	mov	r0, r5
 8014a06:	f000 f82b 	bl	8014a60 <__swsetup_r>
 8014a0a:	b118      	cbz	r0, 8014a14 <__swbuf_r+0x32>
 8014a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8014a10:	4638      	mov	r0, r7
 8014a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a14:	6823      	ldr	r3, [r4, #0]
 8014a16:	6922      	ldr	r2, [r4, #16]
 8014a18:	1a98      	subs	r0, r3, r2
 8014a1a:	6963      	ldr	r3, [r4, #20]
 8014a1c:	b2f6      	uxtb	r6, r6
 8014a1e:	4283      	cmp	r3, r0
 8014a20:	4637      	mov	r7, r6
 8014a22:	dc05      	bgt.n	8014a30 <__swbuf_r+0x4e>
 8014a24:	4621      	mov	r1, r4
 8014a26:	4628      	mov	r0, r5
 8014a28:	f001 fd24 	bl	8016474 <_fflush_r>
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	d1ed      	bne.n	8014a0c <__swbuf_r+0x2a>
 8014a30:	68a3      	ldr	r3, [r4, #8]
 8014a32:	3b01      	subs	r3, #1
 8014a34:	60a3      	str	r3, [r4, #8]
 8014a36:	6823      	ldr	r3, [r4, #0]
 8014a38:	1c5a      	adds	r2, r3, #1
 8014a3a:	6022      	str	r2, [r4, #0]
 8014a3c:	701e      	strb	r6, [r3, #0]
 8014a3e:	6962      	ldr	r2, [r4, #20]
 8014a40:	1c43      	adds	r3, r0, #1
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d004      	beq.n	8014a50 <__swbuf_r+0x6e>
 8014a46:	89a3      	ldrh	r3, [r4, #12]
 8014a48:	07db      	lsls	r3, r3, #31
 8014a4a:	d5e1      	bpl.n	8014a10 <__swbuf_r+0x2e>
 8014a4c:	2e0a      	cmp	r6, #10
 8014a4e:	d1df      	bne.n	8014a10 <__swbuf_r+0x2e>
 8014a50:	4621      	mov	r1, r4
 8014a52:	4628      	mov	r0, r5
 8014a54:	f001 fd0e 	bl	8016474 <_fflush_r>
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d0d9      	beq.n	8014a10 <__swbuf_r+0x2e>
 8014a5c:	e7d6      	b.n	8014a0c <__swbuf_r+0x2a>
	...

08014a60 <__swsetup_r>:
 8014a60:	b538      	push	{r3, r4, r5, lr}
 8014a62:	4b29      	ldr	r3, [pc, #164]	@ (8014b08 <__swsetup_r+0xa8>)
 8014a64:	4605      	mov	r5, r0
 8014a66:	6818      	ldr	r0, [r3, #0]
 8014a68:	460c      	mov	r4, r1
 8014a6a:	b118      	cbz	r0, 8014a74 <__swsetup_r+0x14>
 8014a6c:	6a03      	ldr	r3, [r0, #32]
 8014a6e:	b90b      	cbnz	r3, 8014a74 <__swsetup_r+0x14>
 8014a70:	f7ff fece 	bl	8014810 <__sinit>
 8014a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a78:	0719      	lsls	r1, r3, #28
 8014a7a:	d422      	bmi.n	8014ac2 <__swsetup_r+0x62>
 8014a7c:	06da      	lsls	r2, r3, #27
 8014a7e:	d407      	bmi.n	8014a90 <__swsetup_r+0x30>
 8014a80:	2209      	movs	r2, #9
 8014a82:	602a      	str	r2, [r5, #0]
 8014a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a88:	81a3      	strh	r3, [r4, #12]
 8014a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a8e:	e033      	b.n	8014af8 <__swsetup_r+0x98>
 8014a90:	0758      	lsls	r0, r3, #29
 8014a92:	d512      	bpl.n	8014aba <__swsetup_r+0x5a>
 8014a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014a96:	b141      	cbz	r1, 8014aaa <__swsetup_r+0x4a>
 8014a98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014a9c:	4299      	cmp	r1, r3
 8014a9e:	d002      	beq.n	8014aa6 <__swsetup_r+0x46>
 8014aa0:	4628      	mov	r0, r5
 8014aa2:	f000 fe9f 	bl	80157e4 <_free_r>
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8014aaa:	89a3      	ldrh	r3, [r4, #12]
 8014aac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014ab0:	81a3      	strh	r3, [r4, #12]
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	6063      	str	r3, [r4, #4]
 8014ab6:	6923      	ldr	r3, [r4, #16]
 8014ab8:	6023      	str	r3, [r4, #0]
 8014aba:	89a3      	ldrh	r3, [r4, #12]
 8014abc:	f043 0308 	orr.w	r3, r3, #8
 8014ac0:	81a3      	strh	r3, [r4, #12]
 8014ac2:	6923      	ldr	r3, [r4, #16]
 8014ac4:	b94b      	cbnz	r3, 8014ada <__swsetup_r+0x7a>
 8014ac6:	89a3      	ldrh	r3, [r4, #12]
 8014ac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ad0:	d003      	beq.n	8014ada <__swsetup_r+0x7a>
 8014ad2:	4621      	mov	r1, r4
 8014ad4:	4628      	mov	r0, r5
 8014ad6:	f001 fd1b 	bl	8016510 <__smakebuf_r>
 8014ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ade:	f013 0201 	ands.w	r2, r3, #1
 8014ae2:	d00a      	beq.n	8014afa <__swsetup_r+0x9a>
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	60a2      	str	r2, [r4, #8]
 8014ae8:	6962      	ldr	r2, [r4, #20]
 8014aea:	4252      	negs	r2, r2
 8014aec:	61a2      	str	r2, [r4, #24]
 8014aee:	6922      	ldr	r2, [r4, #16]
 8014af0:	b942      	cbnz	r2, 8014b04 <__swsetup_r+0xa4>
 8014af2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014af6:	d1c5      	bne.n	8014a84 <__swsetup_r+0x24>
 8014af8:	bd38      	pop	{r3, r4, r5, pc}
 8014afa:	0799      	lsls	r1, r3, #30
 8014afc:	bf58      	it	pl
 8014afe:	6962      	ldrpl	r2, [r4, #20]
 8014b00:	60a2      	str	r2, [r4, #8]
 8014b02:	e7f4      	b.n	8014aee <__swsetup_r+0x8e>
 8014b04:	2000      	movs	r0, #0
 8014b06:	e7f7      	b.n	8014af8 <__swsetup_r+0x98>
 8014b08:	2400013c 	.word	0x2400013c

08014b0c <memset>:
 8014b0c:	4402      	add	r2, r0
 8014b0e:	4603      	mov	r3, r0
 8014b10:	4293      	cmp	r3, r2
 8014b12:	d100      	bne.n	8014b16 <memset+0xa>
 8014b14:	4770      	bx	lr
 8014b16:	f803 1b01 	strb.w	r1, [r3], #1
 8014b1a:	e7f9      	b.n	8014b10 <memset+0x4>

08014b1c <_localeconv_r>:
 8014b1c:	4800      	ldr	r0, [pc, #0]	@ (8014b20 <_localeconv_r+0x4>)
 8014b1e:	4770      	bx	lr
 8014b20:	2400027c 	.word	0x2400027c

08014b24 <_close_r>:
 8014b24:	b538      	push	{r3, r4, r5, lr}
 8014b26:	4d06      	ldr	r5, [pc, #24]	@ (8014b40 <_close_r+0x1c>)
 8014b28:	2300      	movs	r3, #0
 8014b2a:	4604      	mov	r4, r0
 8014b2c:	4608      	mov	r0, r1
 8014b2e:	602b      	str	r3, [r5, #0]
 8014b30:	f7ed fdd0 	bl	80026d4 <_close>
 8014b34:	1c43      	adds	r3, r0, #1
 8014b36:	d102      	bne.n	8014b3e <_close_r+0x1a>
 8014b38:	682b      	ldr	r3, [r5, #0]
 8014b3a:	b103      	cbz	r3, 8014b3e <_close_r+0x1a>
 8014b3c:	6023      	str	r3, [r4, #0]
 8014b3e:	bd38      	pop	{r3, r4, r5, pc}
 8014b40:	240017ac 	.word	0x240017ac

08014b44 <_lseek_r>:
 8014b44:	b538      	push	{r3, r4, r5, lr}
 8014b46:	4d07      	ldr	r5, [pc, #28]	@ (8014b64 <_lseek_r+0x20>)
 8014b48:	4604      	mov	r4, r0
 8014b4a:	4608      	mov	r0, r1
 8014b4c:	4611      	mov	r1, r2
 8014b4e:	2200      	movs	r2, #0
 8014b50:	602a      	str	r2, [r5, #0]
 8014b52:	461a      	mov	r2, r3
 8014b54:	f7ed fde5 	bl	8002722 <_lseek>
 8014b58:	1c43      	adds	r3, r0, #1
 8014b5a:	d102      	bne.n	8014b62 <_lseek_r+0x1e>
 8014b5c:	682b      	ldr	r3, [r5, #0]
 8014b5e:	b103      	cbz	r3, 8014b62 <_lseek_r+0x1e>
 8014b60:	6023      	str	r3, [r4, #0]
 8014b62:	bd38      	pop	{r3, r4, r5, pc}
 8014b64:	240017ac 	.word	0x240017ac

08014b68 <_read_r>:
 8014b68:	b538      	push	{r3, r4, r5, lr}
 8014b6a:	4d07      	ldr	r5, [pc, #28]	@ (8014b88 <_read_r+0x20>)
 8014b6c:	4604      	mov	r4, r0
 8014b6e:	4608      	mov	r0, r1
 8014b70:	4611      	mov	r1, r2
 8014b72:	2200      	movs	r2, #0
 8014b74:	602a      	str	r2, [r5, #0]
 8014b76:	461a      	mov	r2, r3
 8014b78:	f7ed fd8f 	bl	800269a <_read>
 8014b7c:	1c43      	adds	r3, r0, #1
 8014b7e:	d102      	bne.n	8014b86 <_read_r+0x1e>
 8014b80:	682b      	ldr	r3, [r5, #0]
 8014b82:	b103      	cbz	r3, 8014b86 <_read_r+0x1e>
 8014b84:	6023      	str	r3, [r4, #0]
 8014b86:	bd38      	pop	{r3, r4, r5, pc}
 8014b88:	240017ac 	.word	0x240017ac

08014b8c <_write_r>:
 8014b8c:	b538      	push	{r3, r4, r5, lr}
 8014b8e:	4d07      	ldr	r5, [pc, #28]	@ (8014bac <_write_r+0x20>)
 8014b90:	4604      	mov	r4, r0
 8014b92:	4608      	mov	r0, r1
 8014b94:	4611      	mov	r1, r2
 8014b96:	2200      	movs	r2, #0
 8014b98:	602a      	str	r2, [r5, #0]
 8014b9a:	461a      	mov	r2, r3
 8014b9c:	f7ec fd61 	bl	8001662 <_write>
 8014ba0:	1c43      	adds	r3, r0, #1
 8014ba2:	d102      	bne.n	8014baa <_write_r+0x1e>
 8014ba4:	682b      	ldr	r3, [r5, #0]
 8014ba6:	b103      	cbz	r3, 8014baa <_write_r+0x1e>
 8014ba8:	6023      	str	r3, [r4, #0]
 8014baa:	bd38      	pop	{r3, r4, r5, pc}
 8014bac:	240017ac 	.word	0x240017ac

08014bb0 <__errno>:
 8014bb0:	4b01      	ldr	r3, [pc, #4]	@ (8014bb8 <__errno+0x8>)
 8014bb2:	6818      	ldr	r0, [r3, #0]
 8014bb4:	4770      	bx	lr
 8014bb6:	bf00      	nop
 8014bb8:	2400013c 	.word	0x2400013c

08014bbc <__libc_init_array>:
 8014bbc:	b570      	push	{r4, r5, r6, lr}
 8014bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8014bf4 <__libc_init_array+0x38>)
 8014bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8014bf8 <__libc_init_array+0x3c>)
 8014bc2:	1b64      	subs	r4, r4, r5
 8014bc4:	10a4      	asrs	r4, r4, #2
 8014bc6:	2600      	movs	r6, #0
 8014bc8:	42a6      	cmp	r6, r4
 8014bca:	d109      	bne.n	8014be0 <__libc_init_array+0x24>
 8014bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8014bfc <__libc_init_array+0x40>)
 8014bce:	4c0c      	ldr	r4, [pc, #48]	@ (8014c00 <__libc_init_array+0x44>)
 8014bd0:	f001 fdbc 	bl	801674c <_init>
 8014bd4:	1b64      	subs	r4, r4, r5
 8014bd6:	10a4      	asrs	r4, r4, #2
 8014bd8:	2600      	movs	r6, #0
 8014bda:	42a6      	cmp	r6, r4
 8014bdc:	d105      	bne.n	8014bea <__libc_init_array+0x2e>
 8014bde:	bd70      	pop	{r4, r5, r6, pc}
 8014be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014be4:	4798      	blx	r3
 8014be6:	3601      	adds	r6, #1
 8014be8:	e7ee      	b.n	8014bc8 <__libc_init_array+0xc>
 8014bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bee:	4798      	blx	r3
 8014bf0:	3601      	adds	r6, #1
 8014bf2:	e7f2      	b.n	8014bda <__libc_init_array+0x1e>
 8014bf4:	08016e98 	.word	0x08016e98
 8014bf8:	08016e98 	.word	0x08016e98
 8014bfc:	08016e98 	.word	0x08016e98
 8014c00:	08016e9c 	.word	0x08016e9c

08014c04 <__retarget_lock_init_recursive>:
 8014c04:	4770      	bx	lr

08014c06 <__retarget_lock_acquire_recursive>:
 8014c06:	4770      	bx	lr

08014c08 <__retarget_lock_release_recursive>:
 8014c08:	4770      	bx	lr

08014c0a <memcpy>:
 8014c0a:	440a      	add	r2, r1
 8014c0c:	4291      	cmp	r1, r2
 8014c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014c12:	d100      	bne.n	8014c16 <memcpy+0xc>
 8014c14:	4770      	bx	lr
 8014c16:	b510      	push	{r4, lr}
 8014c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c20:	4291      	cmp	r1, r2
 8014c22:	d1f9      	bne.n	8014c18 <memcpy+0xe>
 8014c24:	bd10      	pop	{r4, pc}

08014c26 <quorem>:
 8014c26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c2a:	6903      	ldr	r3, [r0, #16]
 8014c2c:	690c      	ldr	r4, [r1, #16]
 8014c2e:	42a3      	cmp	r3, r4
 8014c30:	4607      	mov	r7, r0
 8014c32:	db7e      	blt.n	8014d32 <quorem+0x10c>
 8014c34:	3c01      	subs	r4, #1
 8014c36:	f101 0814 	add.w	r8, r1, #20
 8014c3a:	00a3      	lsls	r3, r4, #2
 8014c3c:	f100 0514 	add.w	r5, r0, #20
 8014c40:	9300      	str	r3, [sp, #0]
 8014c42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c46:	9301      	str	r3, [sp, #4]
 8014c48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c50:	3301      	adds	r3, #1
 8014c52:	429a      	cmp	r2, r3
 8014c54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014c58:	fbb2 f6f3 	udiv	r6, r2, r3
 8014c5c:	d32e      	bcc.n	8014cbc <quorem+0x96>
 8014c5e:	f04f 0a00 	mov.w	sl, #0
 8014c62:	46c4      	mov	ip, r8
 8014c64:	46ae      	mov	lr, r5
 8014c66:	46d3      	mov	fp, sl
 8014c68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014c6c:	b298      	uxth	r0, r3
 8014c6e:	fb06 a000 	mla	r0, r6, r0, sl
 8014c72:	0c02      	lsrs	r2, r0, #16
 8014c74:	0c1b      	lsrs	r3, r3, #16
 8014c76:	fb06 2303 	mla	r3, r6, r3, r2
 8014c7a:	f8de 2000 	ldr.w	r2, [lr]
 8014c7e:	b280      	uxth	r0, r0
 8014c80:	b292      	uxth	r2, r2
 8014c82:	1a12      	subs	r2, r2, r0
 8014c84:	445a      	add	r2, fp
 8014c86:	f8de 0000 	ldr.w	r0, [lr]
 8014c8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014c94:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014c98:	b292      	uxth	r2, r2
 8014c9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014c9e:	45e1      	cmp	r9, ip
 8014ca0:	f84e 2b04 	str.w	r2, [lr], #4
 8014ca4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014ca8:	d2de      	bcs.n	8014c68 <quorem+0x42>
 8014caa:	9b00      	ldr	r3, [sp, #0]
 8014cac:	58eb      	ldr	r3, [r5, r3]
 8014cae:	b92b      	cbnz	r3, 8014cbc <quorem+0x96>
 8014cb0:	9b01      	ldr	r3, [sp, #4]
 8014cb2:	3b04      	subs	r3, #4
 8014cb4:	429d      	cmp	r5, r3
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	d32f      	bcc.n	8014d1a <quorem+0xf4>
 8014cba:	613c      	str	r4, [r7, #16]
 8014cbc:	4638      	mov	r0, r7
 8014cbe:	f001 f90b 	bl	8015ed8 <__mcmp>
 8014cc2:	2800      	cmp	r0, #0
 8014cc4:	db25      	blt.n	8014d12 <quorem+0xec>
 8014cc6:	4629      	mov	r1, r5
 8014cc8:	2000      	movs	r0, #0
 8014cca:	f858 2b04 	ldr.w	r2, [r8], #4
 8014cce:	f8d1 c000 	ldr.w	ip, [r1]
 8014cd2:	fa1f fe82 	uxth.w	lr, r2
 8014cd6:	fa1f f38c 	uxth.w	r3, ip
 8014cda:	eba3 030e 	sub.w	r3, r3, lr
 8014cde:	4403      	add	r3, r0
 8014ce0:	0c12      	lsrs	r2, r2, #16
 8014ce2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014ce6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cf0:	45c1      	cmp	r9, r8
 8014cf2:	f841 3b04 	str.w	r3, [r1], #4
 8014cf6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014cfa:	d2e6      	bcs.n	8014cca <quorem+0xa4>
 8014cfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d04:	b922      	cbnz	r2, 8014d10 <quorem+0xea>
 8014d06:	3b04      	subs	r3, #4
 8014d08:	429d      	cmp	r5, r3
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	d30b      	bcc.n	8014d26 <quorem+0x100>
 8014d0e:	613c      	str	r4, [r7, #16]
 8014d10:	3601      	adds	r6, #1
 8014d12:	4630      	mov	r0, r6
 8014d14:	b003      	add	sp, #12
 8014d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d1a:	6812      	ldr	r2, [r2, #0]
 8014d1c:	3b04      	subs	r3, #4
 8014d1e:	2a00      	cmp	r2, #0
 8014d20:	d1cb      	bne.n	8014cba <quorem+0x94>
 8014d22:	3c01      	subs	r4, #1
 8014d24:	e7c6      	b.n	8014cb4 <quorem+0x8e>
 8014d26:	6812      	ldr	r2, [r2, #0]
 8014d28:	3b04      	subs	r3, #4
 8014d2a:	2a00      	cmp	r2, #0
 8014d2c:	d1ef      	bne.n	8014d0e <quorem+0xe8>
 8014d2e:	3c01      	subs	r4, #1
 8014d30:	e7ea      	b.n	8014d08 <quorem+0xe2>
 8014d32:	2000      	movs	r0, #0
 8014d34:	e7ee      	b.n	8014d14 <quorem+0xee>
	...

08014d38 <_dtoa_r>:
 8014d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d3c:	ed2d 8b02 	vpush	{d8}
 8014d40:	69c7      	ldr	r7, [r0, #28]
 8014d42:	b091      	sub	sp, #68	@ 0x44
 8014d44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014d48:	ec55 4b10 	vmov	r4, r5, d0
 8014d4c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014d4e:	9107      	str	r1, [sp, #28]
 8014d50:	4681      	mov	r9, r0
 8014d52:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d54:	930d      	str	r3, [sp, #52]	@ 0x34
 8014d56:	b97f      	cbnz	r7, 8014d78 <_dtoa_r+0x40>
 8014d58:	2010      	movs	r0, #16
 8014d5a:	f000 fd8d 	bl	8015878 <malloc>
 8014d5e:	4602      	mov	r2, r0
 8014d60:	f8c9 001c 	str.w	r0, [r9, #28]
 8014d64:	b920      	cbnz	r0, 8014d70 <_dtoa_r+0x38>
 8014d66:	4ba0      	ldr	r3, [pc, #640]	@ (8014fe8 <_dtoa_r+0x2b0>)
 8014d68:	21ef      	movs	r1, #239	@ 0xef
 8014d6a:	48a0      	ldr	r0, [pc, #640]	@ (8014fec <_dtoa_r+0x2b4>)
 8014d6c:	f001 fc3e 	bl	80165ec <__assert_func>
 8014d70:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014d74:	6007      	str	r7, [r0, #0]
 8014d76:	60c7      	str	r7, [r0, #12]
 8014d78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014d7c:	6819      	ldr	r1, [r3, #0]
 8014d7e:	b159      	cbz	r1, 8014d98 <_dtoa_r+0x60>
 8014d80:	685a      	ldr	r2, [r3, #4]
 8014d82:	604a      	str	r2, [r1, #4]
 8014d84:	2301      	movs	r3, #1
 8014d86:	4093      	lsls	r3, r2
 8014d88:	608b      	str	r3, [r1, #8]
 8014d8a:	4648      	mov	r0, r9
 8014d8c:	f000 fe6a 	bl	8015a64 <_Bfree>
 8014d90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014d94:	2200      	movs	r2, #0
 8014d96:	601a      	str	r2, [r3, #0]
 8014d98:	1e2b      	subs	r3, r5, #0
 8014d9a:	bfbb      	ittet	lt
 8014d9c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014da0:	9303      	strlt	r3, [sp, #12]
 8014da2:	2300      	movge	r3, #0
 8014da4:	2201      	movlt	r2, #1
 8014da6:	bfac      	ite	ge
 8014da8:	6033      	strge	r3, [r6, #0]
 8014daa:	6032      	strlt	r2, [r6, #0]
 8014dac:	4b90      	ldr	r3, [pc, #576]	@ (8014ff0 <_dtoa_r+0x2b8>)
 8014dae:	9e03      	ldr	r6, [sp, #12]
 8014db0:	43b3      	bics	r3, r6
 8014db2:	d110      	bne.n	8014dd6 <_dtoa_r+0x9e>
 8014db4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014db6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014dba:	6013      	str	r3, [r2, #0]
 8014dbc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014dc0:	4323      	orrs	r3, r4
 8014dc2:	f000 84de 	beq.w	8015782 <_dtoa_r+0xa4a>
 8014dc6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014dc8:	4f8a      	ldr	r7, [pc, #552]	@ (8014ff4 <_dtoa_r+0x2bc>)
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	f000 84e0 	beq.w	8015790 <_dtoa_r+0xa58>
 8014dd0:	1cfb      	adds	r3, r7, #3
 8014dd2:	f000 bcdb 	b.w	801578c <_dtoa_r+0xa54>
 8014dd6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014dda:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de2:	d10a      	bne.n	8014dfa <_dtoa_r+0xc2>
 8014de4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014de6:	2301      	movs	r3, #1
 8014de8:	6013      	str	r3, [r2, #0]
 8014dea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014dec:	b113      	cbz	r3, 8014df4 <_dtoa_r+0xbc>
 8014dee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014df0:	4b81      	ldr	r3, [pc, #516]	@ (8014ff8 <_dtoa_r+0x2c0>)
 8014df2:	6013      	str	r3, [r2, #0]
 8014df4:	4f81      	ldr	r7, [pc, #516]	@ (8014ffc <_dtoa_r+0x2c4>)
 8014df6:	f000 bccb 	b.w	8015790 <_dtoa_r+0xa58>
 8014dfa:	aa0e      	add	r2, sp, #56	@ 0x38
 8014dfc:	a90f      	add	r1, sp, #60	@ 0x3c
 8014dfe:	4648      	mov	r0, r9
 8014e00:	eeb0 0b48 	vmov.f64	d0, d8
 8014e04:	f001 f918 	bl	8016038 <__d2b>
 8014e08:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8014e0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014e0e:	9001      	str	r0, [sp, #4]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d045      	beq.n	8014ea0 <_dtoa_r+0x168>
 8014e14:	eeb0 7b48 	vmov.f64	d7, d8
 8014e18:	ee18 1a90 	vmov	r1, s17
 8014e1c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014e20:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014e24:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014e28:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014e2c:	2500      	movs	r5, #0
 8014e2e:	ee07 1a90 	vmov	s15, r1
 8014e32:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014e36:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014fd0 <_dtoa_r+0x298>
 8014e3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014e3e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8014fd8 <_dtoa_r+0x2a0>
 8014e42:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014e46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014fe0 <_dtoa_r+0x2a8>
 8014e4a:	ee07 3a90 	vmov	s15, r3
 8014e4e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014e52:	eeb0 7b46 	vmov.f64	d7, d6
 8014e56:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014e5a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014e5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e66:	ee16 8a90 	vmov	r8, s13
 8014e6a:	d508      	bpl.n	8014e7e <_dtoa_r+0x146>
 8014e6c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014e70:	eeb4 6b47 	vcmp.f64	d6, d7
 8014e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e78:	bf18      	it	ne
 8014e7a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8014e7e:	f1b8 0f16 	cmp.w	r8, #22
 8014e82:	d82b      	bhi.n	8014edc <_dtoa_r+0x1a4>
 8014e84:	495e      	ldr	r1, [pc, #376]	@ (8015000 <_dtoa_r+0x2c8>)
 8014e86:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8014e8a:	ed91 7b00 	vldr	d7, [r1]
 8014e8e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e96:	d501      	bpl.n	8014e9c <_dtoa_r+0x164>
 8014e98:	f108 38ff 	add.w	r8, r8, #4294967295
 8014e9c:	2100      	movs	r1, #0
 8014e9e:	e01e      	b.n	8014ede <_dtoa_r+0x1a6>
 8014ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ea2:	4413      	add	r3, r2
 8014ea4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8014ea8:	2920      	cmp	r1, #32
 8014eaa:	bfc1      	itttt	gt
 8014eac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8014eb0:	408e      	lslgt	r6, r1
 8014eb2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8014eb6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8014eba:	bfd6      	itet	le
 8014ebc:	f1c1 0120 	rsble	r1, r1, #32
 8014ec0:	4331      	orrgt	r1, r6
 8014ec2:	fa04 f101 	lslle.w	r1, r4, r1
 8014ec6:	ee07 1a90 	vmov	s15, r1
 8014eca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014ece:	3b01      	subs	r3, #1
 8014ed0:	ee17 1a90 	vmov	r1, s15
 8014ed4:	2501      	movs	r5, #1
 8014ed6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8014eda:	e7a8      	b.n	8014e2e <_dtoa_r+0xf6>
 8014edc:	2101      	movs	r1, #1
 8014ede:	1ad2      	subs	r2, r2, r3
 8014ee0:	1e53      	subs	r3, r2, #1
 8014ee2:	9306      	str	r3, [sp, #24]
 8014ee4:	bf45      	ittet	mi
 8014ee6:	f1c2 0301 	rsbmi	r3, r2, #1
 8014eea:	9305      	strmi	r3, [sp, #20]
 8014eec:	2300      	movpl	r3, #0
 8014eee:	2300      	movmi	r3, #0
 8014ef0:	bf4c      	ite	mi
 8014ef2:	9306      	strmi	r3, [sp, #24]
 8014ef4:	9305      	strpl	r3, [sp, #20]
 8014ef6:	f1b8 0f00 	cmp.w	r8, #0
 8014efa:	910c      	str	r1, [sp, #48]	@ 0x30
 8014efc:	db18      	blt.n	8014f30 <_dtoa_r+0x1f8>
 8014efe:	9b06      	ldr	r3, [sp, #24]
 8014f00:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8014f04:	4443      	add	r3, r8
 8014f06:	9306      	str	r3, [sp, #24]
 8014f08:	2300      	movs	r3, #0
 8014f0a:	9a07      	ldr	r2, [sp, #28]
 8014f0c:	2a09      	cmp	r2, #9
 8014f0e:	d849      	bhi.n	8014fa4 <_dtoa_r+0x26c>
 8014f10:	2a05      	cmp	r2, #5
 8014f12:	bfc4      	itt	gt
 8014f14:	3a04      	subgt	r2, #4
 8014f16:	9207      	strgt	r2, [sp, #28]
 8014f18:	9a07      	ldr	r2, [sp, #28]
 8014f1a:	f1a2 0202 	sub.w	r2, r2, #2
 8014f1e:	bfcc      	ite	gt
 8014f20:	2400      	movgt	r4, #0
 8014f22:	2401      	movle	r4, #1
 8014f24:	2a03      	cmp	r2, #3
 8014f26:	d848      	bhi.n	8014fba <_dtoa_r+0x282>
 8014f28:	e8df f002 	tbb	[pc, r2]
 8014f2c:	3a2c2e0b 	.word	0x3a2c2e0b
 8014f30:	9b05      	ldr	r3, [sp, #20]
 8014f32:	2200      	movs	r2, #0
 8014f34:	eba3 0308 	sub.w	r3, r3, r8
 8014f38:	9305      	str	r3, [sp, #20]
 8014f3a:	920a      	str	r2, [sp, #40]	@ 0x28
 8014f3c:	f1c8 0300 	rsb	r3, r8, #0
 8014f40:	e7e3      	b.n	8014f0a <_dtoa_r+0x1d2>
 8014f42:	2200      	movs	r2, #0
 8014f44:	9208      	str	r2, [sp, #32]
 8014f46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014f48:	2a00      	cmp	r2, #0
 8014f4a:	dc39      	bgt.n	8014fc0 <_dtoa_r+0x288>
 8014f4c:	f04f 0b01 	mov.w	fp, #1
 8014f50:	46da      	mov	sl, fp
 8014f52:	465a      	mov	r2, fp
 8014f54:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014f58:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8014f5c:	2100      	movs	r1, #0
 8014f5e:	2004      	movs	r0, #4
 8014f60:	f100 0614 	add.w	r6, r0, #20
 8014f64:	4296      	cmp	r6, r2
 8014f66:	d930      	bls.n	8014fca <_dtoa_r+0x292>
 8014f68:	6079      	str	r1, [r7, #4]
 8014f6a:	4648      	mov	r0, r9
 8014f6c:	9304      	str	r3, [sp, #16]
 8014f6e:	f000 fd39 	bl	80159e4 <_Balloc>
 8014f72:	9b04      	ldr	r3, [sp, #16]
 8014f74:	4607      	mov	r7, r0
 8014f76:	2800      	cmp	r0, #0
 8014f78:	d146      	bne.n	8015008 <_dtoa_r+0x2d0>
 8014f7a:	4b22      	ldr	r3, [pc, #136]	@ (8015004 <_dtoa_r+0x2cc>)
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8014f82:	e6f2      	b.n	8014d6a <_dtoa_r+0x32>
 8014f84:	2201      	movs	r2, #1
 8014f86:	e7dd      	b.n	8014f44 <_dtoa_r+0x20c>
 8014f88:	2200      	movs	r2, #0
 8014f8a:	9208      	str	r2, [sp, #32]
 8014f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014f8e:	eb08 0b02 	add.w	fp, r8, r2
 8014f92:	f10b 0a01 	add.w	sl, fp, #1
 8014f96:	4652      	mov	r2, sl
 8014f98:	2a01      	cmp	r2, #1
 8014f9a:	bfb8      	it	lt
 8014f9c:	2201      	movlt	r2, #1
 8014f9e:	e7db      	b.n	8014f58 <_dtoa_r+0x220>
 8014fa0:	2201      	movs	r2, #1
 8014fa2:	e7f2      	b.n	8014f8a <_dtoa_r+0x252>
 8014fa4:	2401      	movs	r4, #1
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8014fac:	f04f 3bff 	mov.w	fp, #4294967295
 8014fb0:	2100      	movs	r1, #0
 8014fb2:	46da      	mov	sl, fp
 8014fb4:	2212      	movs	r2, #18
 8014fb6:	9109      	str	r1, [sp, #36]	@ 0x24
 8014fb8:	e7ce      	b.n	8014f58 <_dtoa_r+0x220>
 8014fba:	2201      	movs	r2, #1
 8014fbc:	9208      	str	r2, [sp, #32]
 8014fbe:	e7f5      	b.n	8014fac <_dtoa_r+0x274>
 8014fc0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8014fc4:	46da      	mov	sl, fp
 8014fc6:	465a      	mov	r2, fp
 8014fc8:	e7c6      	b.n	8014f58 <_dtoa_r+0x220>
 8014fca:	3101      	adds	r1, #1
 8014fcc:	0040      	lsls	r0, r0, #1
 8014fce:	e7c7      	b.n	8014f60 <_dtoa_r+0x228>
 8014fd0:	636f4361 	.word	0x636f4361
 8014fd4:	3fd287a7 	.word	0x3fd287a7
 8014fd8:	8b60c8b3 	.word	0x8b60c8b3
 8014fdc:	3fc68a28 	.word	0x3fc68a28
 8014fe0:	509f79fb 	.word	0x509f79fb
 8014fe4:	3fd34413 	.word	0x3fd34413
 8014fe8:	08016b5d 	.word	0x08016b5d
 8014fec:	08016b74 	.word	0x08016b74
 8014ff0:	7ff00000 	.word	0x7ff00000
 8014ff4:	08016b59 	.word	0x08016b59
 8014ff8:	08016b2d 	.word	0x08016b2d
 8014ffc:	08016b2c 	.word	0x08016b2c
 8015000:	08016c70 	.word	0x08016c70
 8015004:	08016bcc 	.word	0x08016bcc
 8015008:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801500c:	f1ba 0f0e 	cmp.w	sl, #14
 8015010:	6010      	str	r0, [r2, #0]
 8015012:	d86f      	bhi.n	80150f4 <_dtoa_r+0x3bc>
 8015014:	2c00      	cmp	r4, #0
 8015016:	d06d      	beq.n	80150f4 <_dtoa_r+0x3bc>
 8015018:	f1b8 0f00 	cmp.w	r8, #0
 801501c:	f340 80c2 	ble.w	80151a4 <_dtoa_r+0x46c>
 8015020:	4aca      	ldr	r2, [pc, #808]	@ (801534c <_dtoa_r+0x614>)
 8015022:	f008 010f 	and.w	r1, r8, #15
 8015026:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801502a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801502e:	ed92 7b00 	vldr	d7, [r2]
 8015032:	ea4f 1128 	mov.w	r1, r8, asr #4
 8015036:	f000 80a9 	beq.w	801518c <_dtoa_r+0x454>
 801503a:	4ac5      	ldr	r2, [pc, #788]	@ (8015350 <_dtoa_r+0x618>)
 801503c:	ed92 6b08 	vldr	d6, [r2, #32]
 8015040:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015044:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015048:	f001 010f 	and.w	r1, r1, #15
 801504c:	2203      	movs	r2, #3
 801504e:	48c0      	ldr	r0, [pc, #768]	@ (8015350 <_dtoa_r+0x618>)
 8015050:	2900      	cmp	r1, #0
 8015052:	f040 809d 	bne.w	8015190 <_dtoa_r+0x458>
 8015056:	ed9d 6b02 	vldr	d6, [sp, #8]
 801505a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801505e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015062:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015064:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015068:	2900      	cmp	r1, #0
 801506a:	f000 80c1 	beq.w	80151f0 <_dtoa_r+0x4b8>
 801506e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8015072:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801507a:	f140 80b9 	bpl.w	80151f0 <_dtoa_r+0x4b8>
 801507e:	f1ba 0f00 	cmp.w	sl, #0
 8015082:	f000 80b5 	beq.w	80151f0 <_dtoa_r+0x4b8>
 8015086:	f1bb 0f00 	cmp.w	fp, #0
 801508a:	dd31      	ble.n	80150f0 <_dtoa_r+0x3b8>
 801508c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015090:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015094:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015098:	f108 31ff 	add.w	r1, r8, #4294967295
 801509c:	9104      	str	r1, [sp, #16]
 801509e:	3201      	adds	r2, #1
 80150a0:	465c      	mov	r4, fp
 80150a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80150a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80150aa:	ee07 2a90 	vmov	s15, r2
 80150ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80150b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80150b6:	ee15 2a90 	vmov	r2, s11
 80150ba:	ec51 0b15 	vmov	r0, r1, d5
 80150be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80150c2:	2c00      	cmp	r4, #0
 80150c4:	f040 8098 	bne.w	80151f8 <_dtoa_r+0x4c0>
 80150c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80150cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80150d0:	ec41 0b17 	vmov	d7, r0, r1
 80150d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80150d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150dc:	f300 8261 	bgt.w	80155a2 <_dtoa_r+0x86a>
 80150e0:	eeb1 7b47 	vneg.f64	d7, d7
 80150e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80150e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150ec:	f100 80f5 	bmi.w	80152da <_dtoa_r+0x5a2>
 80150f0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80150f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80150f6:	2a00      	cmp	r2, #0
 80150f8:	f2c0 812c 	blt.w	8015354 <_dtoa_r+0x61c>
 80150fc:	f1b8 0f0e 	cmp.w	r8, #14
 8015100:	f300 8128 	bgt.w	8015354 <_dtoa_r+0x61c>
 8015104:	4b91      	ldr	r3, [pc, #580]	@ (801534c <_dtoa_r+0x614>)
 8015106:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801510a:	ed93 6b00 	vldr	d6, [r3]
 801510e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015110:	2b00      	cmp	r3, #0
 8015112:	da03      	bge.n	801511c <_dtoa_r+0x3e4>
 8015114:	f1ba 0f00 	cmp.w	sl, #0
 8015118:	f340 80d2 	ble.w	80152c0 <_dtoa_r+0x588>
 801511c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8015120:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015124:	463e      	mov	r6, r7
 8015126:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801512a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801512e:	ee15 3a10 	vmov	r3, s10
 8015132:	3330      	adds	r3, #48	@ 0x30
 8015134:	f806 3b01 	strb.w	r3, [r6], #1
 8015138:	1bf3      	subs	r3, r6, r7
 801513a:	459a      	cmp	sl, r3
 801513c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015140:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015144:	f040 80f8 	bne.w	8015338 <_dtoa_r+0x600>
 8015148:	ee37 7b07 	vadd.f64	d7, d7, d7
 801514c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015154:	f300 80dd 	bgt.w	8015312 <_dtoa_r+0x5da>
 8015158:	eeb4 7b46 	vcmp.f64	d7, d6
 801515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015160:	d104      	bne.n	801516c <_dtoa_r+0x434>
 8015162:	ee15 3a10 	vmov	r3, s10
 8015166:	07db      	lsls	r3, r3, #31
 8015168:	f100 80d3 	bmi.w	8015312 <_dtoa_r+0x5da>
 801516c:	9901      	ldr	r1, [sp, #4]
 801516e:	4648      	mov	r0, r9
 8015170:	f000 fc78 	bl	8015a64 <_Bfree>
 8015174:	2300      	movs	r3, #0
 8015176:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015178:	7033      	strb	r3, [r6, #0]
 801517a:	f108 0301 	add.w	r3, r8, #1
 801517e:	6013      	str	r3, [r2, #0]
 8015180:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015182:	2b00      	cmp	r3, #0
 8015184:	f000 8304 	beq.w	8015790 <_dtoa_r+0xa58>
 8015188:	601e      	str	r6, [r3, #0]
 801518a:	e301      	b.n	8015790 <_dtoa_r+0xa58>
 801518c:	2202      	movs	r2, #2
 801518e:	e75e      	b.n	801504e <_dtoa_r+0x316>
 8015190:	07cc      	lsls	r4, r1, #31
 8015192:	d504      	bpl.n	801519e <_dtoa_r+0x466>
 8015194:	ed90 6b00 	vldr	d6, [r0]
 8015198:	3201      	adds	r2, #1
 801519a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801519e:	1049      	asrs	r1, r1, #1
 80151a0:	3008      	adds	r0, #8
 80151a2:	e755      	b.n	8015050 <_dtoa_r+0x318>
 80151a4:	d022      	beq.n	80151ec <_dtoa_r+0x4b4>
 80151a6:	f1c8 0100 	rsb	r1, r8, #0
 80151aa:	4a68      	ldr	r2, [pc, #416]	@ (801534c <_dtoa_r+0x614>)
 80151ac:	f001 000f 	and.w	r0, r1, #15
 80151b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80151b4:	ed92 7b00 	vldr	d7, [r2]
 80151b8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80151bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151c0:	4863      	ldr	r0, [pc, #396]	@ (8015350 <_dtoa_r+0x618>)
 80151c2:	1109      	asrs	r1, r1, #4
 80151c4:	2400      	movs	r4, #0
 80151c6:	2202      	movs	r2, #2
 80151c8:	b929      	cbnz	r1, 80151d6 <_dtoa_r+0x49e>
 80151ca:	2c00      	cmp	r4, #0
 80151cc:	f43f af49 	beq.w	8015062 <_dtoa_r+0x32a>
 80151d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151d4:	e745      	b.n	8015062 <_dtoa_r+0x32a>
 80151d6:	07ce      	lsls	r6, r1, #31
 80151d8:	d505      	bpl.n	80151e6 <_dtoa_r+0x4ae>
 80151da:	ed90 6b00 	vldr	d6, [r0]
 80151de:	3201      	adds	r2, #1
 80151e0:	2401      	movs	r4, #1
 80151e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151e6:	1049      	asrs	r1, r1, #1
 80151e8:	3008      	adds	r0, #8
 80151ea:	e7ed      	b.n	80151c8 <_dtoa_r+0x490>
 80151ec:	2202      	movs	r2, #2
 80151ee:	e738      	b.n	8015062 <_dtoa_r+0x32a>
 80151f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80151f4:	4654      	mov	r4, sl
 80151f6:	e754      	b.n	80150a2 <_dtoa_r+0x36a>
 80151f8:	4a54      	ldr	r2, [pc, #336]	@ (801534c <_dtoa_r+0x614>)
 80151fa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80151fe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015202:	9a08      	ldr	r2, [sp, #32]
 8015204:	ec41 0b17 	vmov	d7, r0, r1
 8015208:	443c      	add	r4, r7
 801520a:	b34a      	cbz	r2, 8015260 <_dtoa_r+0x528>
 801520c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8015210:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8015214:	463e      	mov	r6, r7
 8015216:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801521a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801521e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015222:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015226:	ee14 2a90 	vmov	r2, s9
 801522a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801522e:	3230      	adds	r2, #48	@ 0x30
 8015230:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015234:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801523c:	f806 2b01 	strb.w	r2, [r6], #1
 8015240:	d438      	bmi.n	80152b4 <_dtoa_r+0x57c>
 8015242:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015246:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801524a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801524e:	d462      	bmi.n	8015316 <_dtoa_r+0x5de>
 8015250:	42a6      	cmp	r6, r4
 8015252:	f43f af4d 	beq.w	80150f0 <_dtoa_r+0x3b8>
 8015256:	ee27 7b03 	vmul.f64	d7, d7, d3
 801525a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801525e:	e7e0      	b.n	8015222 <_dtoa_r+0x4ea>
 8015260:	4621      	mov	r1, r4
 8015262:	463e      	mov	r6, r7
 8015264:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015268:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801526c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015270:	ee14 2a90 	vmov	r2, s9
 8015274:	3230      	adds	r2, #48	@ 0x30
 8015276:	f806 2b01 	strb.w	r2, [r6], #1
 801527a:	42a6      	cmp	r6, r4
 801527c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015280:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015284:	d119      	bne.n	80152ba <_dtoa_r+0x582>
 8015286:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801528a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801528e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015296:	dc3e      	bgt.n	8015316 <_dtoa_r+0x5de>
 8015298:	ee35 5b47 	vsub.f64	d5, d5, d7
 801529c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80152a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152a4:	f57f af24 	bpl.w	80150f0 <_dtoa_r+0x3b8>
 80152a8:	460e      	mov	r6, r1
 80152aa:	3901      	subs	r1, #1
 80152ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80152b0:	2b30      	cmp	r3, #48	@ 0x30
 80152b2:	d0f9      	beq.n	80152a8 <_dtoa_r+0x570>
 80152b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80152b8:	e758      	b.n	801516c <_dtoa_r+0x434>
 80152ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 80152be:	e7d5      	b.n	801526c <_dtoa_r+0x534>
 80152c0:	d10b      	bne.n	80152da <_dtoa_r+0x5a2>
 80152c2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80152c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80152ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80152ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80152d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d6:	f2c0 8161 	blt.w	801559c <_dtoa_r+0x864>
 80152da:	2400      	movs	r4, #0
 80152dc:	4625      	mov	r5, r4
 80152de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152e0:	43db      	mvns	r3, r3
 80152e2:	9304      	str	r3, [sp, #16]
 80152e4:	463e      	mov	r6, r7
 80152e6:	f04f 0800 	mov.w	r8, #0
 80152ea:	4621      	mov	r1, r4
 80152ec:	4648      	mov	r0, r9
 80152ee:	f000 fbb9 	bl	8015a64 <_Bfree>
 80152f2:	2d00      	cmp	r5, #0
 80152f4:	d0de      	beq.n	80152b4 <_dtoa_r+0x57c>
 80152f6:	f1b8 0f00 	cmp.w	r8, #0
 80152fa:	d005      	beq.n	8015308 <_dtoa_r+0x5d0>
 80152fc:	45a8      	cmp	r8, r5
 80152fe:	d003      	beq.n	8015308 <_dtoa_r+0x5d0>
 8015300:	4641      	mov	r1, r8
 8015302:	4648      	mov	r0, r9
 8015304:	f000 fbae 	bl	8015a64 <_Bfree>
 8015308:	4629      	mov	r1, r5
 801530a:	4648      	mov	r0, r9
 801530c:	f000 fbaa 	bl	8015a64 <_Bfree>
 8015310:	e7d0      	b.n	80152b4 <_dtoa_r+0x57c>
 8015312:	f8cd 8010 	str.w	r8, [sp, #16]
 8015316:	4633      	mov	r3, r6
 8015318:	461e      	mov	r6, r3
 801531a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801531e:	2a39      	cmp	r2, #57	@ 0x39
 8015320:	d106      	bne.n	8015330 <_dtoa_r+0x5f8>
 8015322:	429f      	cmp	r7, r3
 8015324:	d1f8      	bne.n	8015318 <_dtoa_r+0x5e0>
 8015326:	9a04      	ldr	r2, [sp, #16]
 8015328:	3201      	adds	r2, #1
 801532a:	9204      	str	r2, [sp, #16]
 801532c:	2230      	movs	r2, #48	@ 0x30
 801532e:	703a      	strb	r2, [r7, #0]
 8015330:	781a      	ldrb	r2, [r3, #0]
 8015332:	3201      	adds	r2, #1
 8015334:	701a      	strb	r2, [r3, #0]
 8015336:	e7bd      	b.n	80152b4 <_dtoa_r+0x57c>
 8015338:	ee27 7b04 	vmul.f64	d7, d7, d4
 801533c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015344:	f47f aeef 	bne.w	8015126 <_dtoa_r+0x3ee>
 8015348:	e710      	b.n	801516c <_dtoa_r+0x434>
 801534a:	bf00      	nop
 801534c:	08016c70 	.word	0x08016c70
 8015350:	08016c48 	.word	0x08016c48
 8015354:	9908      	ldr	r1, [sp, #32]
 8015356:	2900      	cmp	r1, #0
 8015358:	f000 80e3 	beq.w	8015522 <_dtoa_r+0x7ea>
 801535c:	9907      	ldr	r1, [sp, #28]
 801535e:	2901      	cmp	r1, #1
 8015360:	f300 80c8 	bgt.w	80154f4 <_dtoa_r+0x7bc>
 8015364:	2d00      	cmp	r5, #0
 8015366:	f000 80c1 	beq.w	80154ec <_dtoa_r+0x7b4>
 801536a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801536e:	9e05      	ldr	r6, [sp, #20]
 8015370:	461c      	mov	r4, r3
 8015372:	9304      	str	r3, [sp, #16]
 8015374:	9b05      	ldr	r3, [sp, #20]
 8015376:	4413      	add	r3, r2
 8015378:	9305      	str	r3, [sp, #20]
 801537a:	9b06      	ldr	r3, [sp, #24]
 801537c:	2101      	movs	r1, #1
 801537e:	4413      	add	r3, r2
 8015380:	4648      	mov	r0, r9
 8015382:	9306      	str	r3, [sp, #24]
 8015384:	f000 fc22 	bl	8015bcc <__i2b>
 8015388:	9b04      	ldr	r3, [sp, #16]
 801538a:	4605      	mov	r5, r0
 801538c:	b166      	cbz	r6, 80153a8 <_dtoa_r+0x670>
 801538e:	9a06      	ldr	r2, [sp, #24]
 8015390:	2a00      	cmp	r2, #0
 8015392:	dd09      	ble.n	80153a8 <_dtoa_r+0x670>
 8015394:	42b2      	cmp	r2, r6
 8015396:	9905      	ldr	r1, [sp, #20]
 8015398:	bfa8      	it	ge
 801539a:	4632      	movge	r2, r6
 801539c:	1a89      	subs	r1, r1, r2
 801539e:	9105      	str	r1, [sp, #20]
 80153a0:	9906      	ldr	r1, [sp, #24]
 80153a2:	1ab6      	subs	r6, r6, r2
 80153a4:	1a8a      	subs	r2, r1, r2
 80153a6:	9206      	str	r2, [sp, #24]
 80153a8:	b1fb      	cbz	r3, 80153ea <_dtoa_r+0x6b2>
 80153aa:	9a08      	ldr	r2, [sp, #32]
 80153ac:	2a00      	cmp	r2, #0
 80153ae:	f000 80bc 	beq.w	801552a <_dtoa_r+0x7f2>
 80153b2:	b19c      	cbz	r4, 80153dc <_dtoa_r+0x6a4>
 80153b4:	4629      	mov	r1, r5
 80153b6:	4622      	mov	r2, r4
 80153b8:	4648      	mov	r0, r9
 80153ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80153bc:	f000 fcc6 	bl	8015d4c <__pow5mult>
 80153c0:	9a01      	ldr	r2, [sp, #4]
 80153c2:	4601      	mov	r1, r0
 80153c4:	4605      	mov	r5, r0
 80153c6:	4648      	mov	r0, r9
 80153c8:	f000 fc16 	bl	8015bf8 <__multiply>
 80153cc:	9901      	ldr	r1, [sp, #4]
 80153ce:	9004      	str	r0, [sp, #16]
 80153d0:	4648      	mov	r0, r9
 80153d2:	f000 fb47 	bl	8015a64 <_Bfree>
 80153d6:	9a04      	ldr	r2, [sp, #16]
 80153d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153da:	9201      	str	r2, [sp, #4]
 80153dc:	1b1a      	subs	r2, r3, r4
 80153de:	d004      	beq.n	80153ea <_dtoa_r+0x6b2>
 80153e0:	9901      	ldr	r1, [sp, #4]
 80153e2:	4648      	mov	r0, r9
 80153e4:	f000 fcb2 	bl	8015d4c <__pow5mult>
 80153e8:	9001      	str	r0, [sp, #4]
 80153ea:	2101      	movs	r1, #1
 80153ec:	4648      	mov	r0, r9
 80153ee:	f000 fbed 	bl	8015bcc <__i2b>
 80153f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80153f4:	4604      	mov	r4, r0
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	f000 81d0 	beq.w	801579c <_dtoa_r+0xa64>
 80153fc:	461a      	mov	r2, r3
 80153fe:	4601      	mov	r1, r0
 8015400:	4648      	mov	r0, r9
 8015402:	f000 fca3 	bl	8015d4c <__pow5mult>
 8015406:	9b07      	ldr	r3, [sp, #28]
 8015408:	2b01      	cmp	r3, #1
 801540a:	4604      	mov	r4, r0
 801540c:	f300 8095 	bgt.w	801553a <_dtoa_r+0x802>
 8015410:	9b02      	ldr	r3, [sp, #8]
 8015412:	2b00      	cmp	r3, #0
 8015414:	f040 808b 	bne.w	801552e <_dtoa_r+0x7f6>
 8015418:	9b03      	ldr	r3, [sp, #12]
 801541a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801541e:	2a00      	cmp	r2, #0
 8015420:	f040 8087 	bne.w	8015532 <_dtoa_r+0x7fa>
 8015424:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015428:	0d12      	lsrs	r2, r2, #20
 801542a:	0512      	lsls	r2, r2, #20
 801542c:	2a00      	cmp	r2, #0
 801542e:	f000 8082 	beq.w	8015536 <_dtoa_r+0x7fe>
 8015432:	9b05      	ldr	r3, [sp, #20]
 8015434:	3301      	adds	r3, #1
 8015436:	9305      	str	r3, [sp, #20]
 8015438:	9b06      	ldr	r3, [sp, #24]
 801543a:	3301      	adds	r3, #1
 801543c:	9306      	str	r3, [sp, #24]
 801543e:	2301      	movs	r3, #1
 8015440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015444:	2b00      	cmp	r3, #0
 8015446:	f000 81af 	beq.w	80157a8 <_dtoa_r+0xa70>
 801544a:	6922      	ldr	r2, [r4, #16]
 801544c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015450:	6910      	ldr	r0, [r2, #16]
 8015452:	f000 fb6f 	bl	8015b34 <__hi0bits>
 8015456:	f1c0 0020 	rsb	r0, r0, #32
 801545a:	9b06      	ldr	r3, [sp, #24]
 801545c:	4418      	add	r0, r3
 801545e:	f010 001f 	ands.w	r0, r0, #31
 8015462:	d076      	beq.n	8015552 <_dtoa_r+0x81a>
 8015464:	f1c0 0220 	rsb	r2, r0, #32
 8015468:	2a04      	cmp	r2, #4
 801546a:	dd69      	ble.n	8015540 <_dtoa_r+0x808>
 801546c:	9b05      	ldr	r3, [sp, #20]
 801546e:	f1c0 001c 	rsb	r0, r0, #28
 8015472:	4403      	add	r3, r0
 8015474:	9305      	str	r3, [sp, #20]
 8015476:	9b06      	ldr	r3, [sp, #24]
 8015478:	4406      	add	r6, r0
 801547a:	4403      	add	r3, r0
 801547c:	9306      	str	r3, [sp, #24]
 801547e:	9b05      	ldr	r3, [sp, #20]
 8015480:	2b00      	cmp	r3, #0
 8015482:	dd05      	ble.n	8015490 <_dtoa_r+0x758>
 8015484:	9901      	ldr	r1, [sp, #4]
 8015486:	461a      	mov	r2, r3
 8015488:	4648      	mov	r0, r9
 801548a:	f000 fcb9 	bl	8015e00 <__lshift>
 801548e:	9001      	str	r0, [sp, #4]
 8015490:	9b06      	ldr	r3, [sp, #24]
 8015492:	2b00      	cmp	r3, #0
 8015494:	dd05      	ble.n	80154a2 <_dtoa_r+0x76a>
 8015496:	4621      	mov	r1, r4
 8015498:	461a      	mov	r2, r3
 801549a:	4648      	mov	r0, r9
 801549c:	f000 fcb0 	bl	8015e00 <__lshift>
 80154a0:	4604      	mov	r4, r0
 80154a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d056      	beq.n	8015556 <_dtoa_r+0x81e>
 80154a8:	9801      	ldr	r0, [sp, #4]
 80154aa:	4621      	mov	r1, r4
 80154ac:	f000 fd14 	bl	8015ed8 <__mcmp>
 80154b0:	2800      	cmp	r0, #0
 80154b2:	da50      	bge.n	8015556 <_dtoa_r+0x81e>
 80154b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80154b8:	9304      	str	r3, [sp, #16]
 80154ba:	9901      	ldr	r1, [sp, #4]
 80154bc:	2300      	movs	r3, #0
 80154be:	220a      	movs	r2, #10
 80154c0:	4648      	mov	r0, r9
 80154c2:	f000 faf1 	bl	8015aa8 <__multadd>
 80154c6:	9b08      	ldr	r3, [sp, #32]
 80154c8:	9001      	str	r0, [sp, #4]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	f000 816e 	beq.w	80157ac <_dtoa_r+0xa74>
 80154d0:	4629      	mov	r1, r5
 80154d2:	2300      	movs	r3, #0
 80154d4:	220a      	movs	r2, #10
 80154d6:	4648      	mov	r0, r9
 80154d8:	f000 fae6 	bl	8015aa8 <__multadd>
 80154dc:	f1bb 0f00 	cmp.w	fp, #0
 80154e0:	4605      	mov	r5, r0
 80154e2:	dc64      	bgt.n	80155ae <_dtoa_r+0x876>
 80154e4:	9b07      	ldr	r3, [sp, #28]
 80154e6:	2b02      	cmp	r3, #2
 80154e8:	dc3e      	bgt.n	8015568 <_dtoa_r+0x830>
 80154ea:	e060      	b.n	80155ae <_dtoa_r+0x876>
 80154ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80154ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80154f2:	e73c      	b.n	801536e <_dtoa_r+0x636>
 80154f4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80154f8:	42a3      	cmp	r3, r4
 80154fa:	bfbf      	itttt	lt
 80154fc:	1ae2      	sublt	r2, r4, r3
 80154fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015500:	189b      	addlt	r3, r3, r2
 8015502:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8015504:	bfae      	itee	ge
 8015506:	1b1c      	subge	r4, r3, r4
 8015508:	4623      	movlt	r3, r4
 801550a:	2400      	movlt	r4, #0
 801550c:	f1ba 0f00 	cmp.w	sl, #0
 8015510:	bfb5      	itete	lt
 8015512:	9a05      	ldrlt	r2, [sp, #20]
 8015514:	9e05      	ldrge	r6, [sp, #20]
 8015516:	eba2 060a 	sublt.w	r6, r2, sl
 801551a:	4652      	movge	r2, sl
 801551c:	bfb8      	it	lt
 801551e:	2200      	movlt	r2, #0
 8015520:	e727      	b.n	8015372 <_dtoa_r+0x63a>
 8015522:	9e05      	ldr	r6, [sp, #20]
 8015524:	9d08      	ldr	r5, [sp, #32]
 8015526:	461c      	mov	r4, r3
 8015528:	e730      	b.n	801538c <_dtoa_r+0x654>
 801552a:	461a      	mov	r2, r3
 801552c:	e758      	b.n	80153e0 <_dtoa_r+0x6a8>
 801552e:	2300      	movs	r3, #0
 8015530:	e786      	b.n	8015440 <_dtoa_r+0x708>
 8015532:	9b02      	ldr	r3, [sp, #8]
 8015534:	e784      	b.n	8015440 <_dtoa_r+0x708>
 8015536:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015538:	e783      	b.n	8015442 <_dtoa_r+0x70a>
 801553a:	2300      	movs	r3, #0
 801553c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801553e:	e784      	b.n	801544a <_dtoa_r+0x712>
 8015540:	d09d      	beq.n	801547e <_dtoa_r+0x746>
 8015542:	9b05      	ldr	r3, [sp, #20]
 8015544:	321c      	adds	r2, #28
 8015546:	4413      	add	r3, r2
 8015548:	9305      	str	r3, [sp, #20]
 801554a:	9b06      	ldr	r3, [sp, #24]
 801554c:	4416      	add	r6, r2
 801554e:	4413      	add	r3, r2
 8015550:	e794      	b.n	801547c <_dtoa_r+0x744>
 8015552:	4602      	mov	r2, r0
 8015554:	e7f5      	b.n	8015542 <_dtoa_r+0x80a>
 8015556:	f1ba 0f00 	cmp.w	sl, #0
 801555a:	f8cd 8010 	str.w	r8, [sp, #16]
 801555e:	46d3      	mov	fp, sl
 8015560:	dc21      	bgt.n	80155a6 <_dtoa_r+0x86e>
 8015562:	9b07      	ldr	r3, [sp, #28]
 8015564:	2b02      	cmp	r3, #2
 8015566:	dd1e      	ble.n	80155a6 <_dtoa_r+0x86e>
 8015568:	f1bb 0f00 	cmp.w	fp, #0
 801556c:	f47f aeb7 	bne.w	80152de <_dtoa_r+0x5a6>
 8015570:	4621      	mov	r1, r4
 8015572:	465b      	mov	r3, fp
 8015574:	2205      	movs	r2, #5
 8015576:	4648      	mov	r0, r9
 8015578:	f000 fa96 	bl	8015aa8 <__multadd>
 801557c:	4601      	mov	r1, r0
 801557e:	4604      	mov	r4, r0
 8015580:	9801      	ldr	r0, [sp, #4]
 8015582:	f000 fca9 	bl	8015ed8 <__mcmp>
 8015586:	2800      	cmp	r0, #0
 8015588:	f77f aea9 	ble.w	80152de <_dtoa_r+0x5a6>
 801558c:	463e      	mov	r6, r7
 801558e:	2331      	movs	r3, #49	@ 0x31
 8015590:	f806 3b01 	strb.w	r3, [r6], #1
 8015594:	9b04      	ldr	r3, [sp, #16]
 8015596:	3301      	adds	r3, #1
 8015598:	9304      	str	r3, [sp, #16]
 801559a:	e6a4      	b.n	80152e6 <_dtoa_r+0x5ae>
 801559c:	f8cd 8010 	str.w	r8, [sp, #16]
 80155a0:	4654      	mov	r4, sl
 80155a2:	4625      	mov	r5, r4
 80155a4:	e7f2      	b.n	801558c <_dtoa_r+0x854>
 80155a6:	9b08      	ldr	r3, [sp, #32]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	f000 8103 	beq.w	80157b4 <_dtoa_r+0xa7c>
 80155ae:	2e00      	cmp	r6, #0
 80155b0:	dd05      	ble.n	80155be <_dtoa_r+0x886>
 80155b2:	4629      	mov	r1, r5
 80155b4:	4632      	mov	r2, r6
 80155b6:	4648      	mov	r0, r9
 80155b8:	f000 fc22 	bl	8015e00 <__lshift>
 80155bc:	4605      	mov	r5, r0
 80155be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d058      	beq.n	8015676 <_dtoa_r+0x93e>
 80155c4:	6869      	ldr	r1, [r5, #4]
 80155c6:	4648      	mov	r0, r9
 80155c8:	f000 fa0c 	bl	80159e4 <_Balloc>
 80155cc:	4606      	mov	r6, r0
 80155ce:	b928      	cbnz	r0, 80155dc <_dtoa_r+0x8a4>
 80155d0:	4b82      	ldr	r3, [pc, #520]	@ (80157dc <_dtoa_r+0xaa4>)
 80155d2:	4602      	mov	r2, r0
 80155d4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80155d8:	f7ff bbc7 	b.w	8014d6a <_dtoa_r+0x32>
 80155dc:	692a      	ldr	r2, [r5, #16]
 80155de:	3202      	adds	r2, #2
 80155e0:	0092      	lsls	r2, r2, #2
 80155e2:	f105 010c 	add.w	r1, r5, #12
 80155e6:	300c      	adds	r0, #12
 80155e8:	f7ff fb0f 	bl	8014c0a <memcpy>
 80155ec:	2201      	movs	r2, #1
 80155ee:	4631      	mov	r1, r6
 80155f0:	4648      	mov	r0, r9
 80155f2:	f000 fc05 	bl	8015e00 <__lshift>
 80155f6:	1c7b      	adds	r3, r7, #1
 80155f8:	9305      	str	r3, [sp, #20]
 80155fa:	eb07 030b 	add.w	r3, r7, fp
 80155fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8015600:	9b02      	ldr	r3, [sp, #8]
 8015602:	f003 0301 	and.w	r3, r3, #1
 8015606:	46a8      	mov	r8, r5
 8015608:	9308      	str	r3, [sp, #32]
 801560a:	4605      	mov	r5, r0
 801560c:	9b05      	ldr	r3, [sp, #20]
 801560e:	9801      	ldr	r0, [sp, #4]
 8015610:	4621      	mov	r1, r4
 8015612:	f103 3bff 	add.w	fp, r3, #4294967295
 8015616:	f7ff fb06 	bl	8014c26 <quorem>
 801561a:	4641      	mov	r1, r8
 801561c:	9002      	str	r0, [sp, #8]
 801561e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015622:	9801      	ldr	r0, [sp, #4]
 8015624:	f000 fc58 	bl	8015ed8 <__mcmp>
 8015628:	462a      	mov	r2, r5
 801562a:	9006      	str	r0, [sp, #24]
 801562c:	4621      	mov	r1, r4
 801562e:	4648      	mov	r0, r9
 8015630:	f000 fc6e 	bl	8015f10 <__mdiff>
 8015634:	68c2      	ldr	r2, [r0, #12]
 8015636:	4606      	mov	r6, r0
 8015638:	b9fa      	cbnz	r2, 801567a <_dtoa_r+0x942>
 801563a:	4601      	mov	r1, r0
 801563c:	9801      	ldr	r0, [sp, #4]
 801563e:	f000 fc4b 	bl	8015ed8 <__mcmp>
 8015642:	4602      	mov	r2, r0
 8015644:	4631      	mov	r1, r6
 8015646:	4648      	mov	r0, r9
 8015648:	920a      	str	r2, [sp, #40]	@ 0x28
 801564a:	f000 fa0b 	bl	8015a64 <_Bfree>
 801564e:	9b07      	ldr	r3, [sp, #28]
 8015650:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015652:	9e05      	ldr	r6, [sp, #20]
 8015654:	ea43 0102 	orr.w	r1, r3, r2
 8015658:	9b08      	ldr	r3, [sp, #32]
 801565a:	4319      	orrs	r1, r3
 801565c:	d10f      	bne.n	801567e <_dtoa_r+0x946>
 801565e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015662:	d028      	beq.n	80156b6 <_dtoa_r+0x97e>
 8015664:	9b06      	ldr	r3, [sp, #24]
 8015666:	2b00      	cmp	r3, #0
 8015668:	dd02      	ble.n	8015670 <_dtoa_r+0x938>
 801566a:	9b02      	ldr	r3, [sp, #8]
 801566c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8015670:	f88b a000 	strb.w	sl, [fp]
 8015674:	e639      	b.n	80152ea <_dtoa_r+0x5b2>
 8015676:	4628      	mov	r0, r5
 8015678:	e7bd      	b.n	80155f6 <_dtoa_r+0x8be>
 801567a:	2201      	movs	r2, #1
 801567c:	e7e2      	b.n	8015644 <_dtoa_r+0x90c>
 801567e:	9b06      	ldr	r3, [sp, #24]
 8015680:	2b00      	cmp	r3, #0
 8015682:	db04      	blt.n	801568e <_dtoa_r+0x956>
 8015684:	9907      	ldr	r1, [sp, #28]
 8015686:	430b      	orrs	r3, r1
 8015688:	9908      	ldr	r1, [sp, #32]
 801568a:	430b      	orrs	r3, r1
 801568c:	d120      	bne.n	80156d0 <_dtoa_r+0x998>
 801568e:	2a00      	cmp	r2, #0
 8015690:	ddee      	ble.n	8015670 <_dtoa_r+0x938>
 8015692:	9901      	ldr	r1, [sp, #4]
 8015694:	2201      	movs	r2, #1
 8015696:	4648      	mov	r0, r9
 8015698:	f000 fbb2 	bl	8015e00 <__lshift>
 801569c:	4621      	mov	r1, r4
 801569e:	9001      	str	r0, [sp, #4]
 80156a0:	f000 fc1a 	bl	8015ed8 <__mcmp>
 80156a4:	2800      	cmp	r0, #0
 80156a6:	dc03      	bgt.n	80156b0 <_dtoa_r+0x978>
 80156a8:	d1e2      	bne.n	8015670 <_dtoa_r+0x938>
 80156aa:	f01a 0f01 	tst.w	sl, #1
 80156ae:	d0df      	beq.n	8015670 <_dtoa_r+0x938>
 80156b0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80156b4:	d1d9      	bne.n	801566a <_dtoa_r+0x932>
 80156b6:	2339      	movs	r3, #57	@ 0x39
 80156b8:	f88b 3000 	strb.w	r3, [fp]
 80156bc:	4633      	mov	r3, r6
 80156be:	461e      	mov	r6, r3
 80156c0:	3b01      	subs	r3, #1
 80156c2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80156c6:	2a39      	cmp	r2, #57	@ 0x39
 80156c8:	d053      	beq.n	8015772 <_dtoa_r+0xa3a>
 80156ca:	3201      	adds	r2, #1
 80156cc:	701a      	strb	r2, [r3, #0]
 80156ce:	e60c      	b.n	80152ea <_dtoa_r+0x5b2>
 80156d0:	2a00      	cmp	r2, #0
 80156d2:	dd07      	ble.n	80156e4 <_dtoa_r+0x9ac>
 80156d4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80156d8:	d0ed      	beq.n	80156b6 <_dtoa_r+0x97e>
 80156da:	f10a 0301 	add.w	r3, sl, #1
 80156de:	f88b 3000 	strb.w	r3, [fp]
 80156e2:	e602      	b.n	80152ea <_dtoa_r+0x5b2>
 80156e4:	9b05      	ldr	r3, [sp, #20]
 80156e6:	9a05      	ldr	r2, [sp, #20]
 80156e8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80156ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156ee:	4293      	cmp	r3, r2
 80156f0:	d029      	beq.n	8015746 <_dtoa_r+0xa0e>
 80156f2:	9901      	ldr	r1, [sp, #4]
 80156f4:	2300      	movs	r3, #0
 80156f6:	220a      	movs	r2, #10
 80156f8:	4648      	mov	r0, r9
 80156fa:	f000 f9d5 	bl	8015aa8 <__multadd>
 80156fe:	45a8      	cmp	r8, r5
 8015700:	9001      	str	r0, [sp, #4]
 8015702:	f04f 0300 	mov.w	r3, #0
 8015706:	f04f 020a 	mov.w	r2, #10
 801570a:	4641      	mov	r1, r8
 801570c:	4648      	mov	r0, r9
 801570e:	d107      	bne.n	8015720 <_dtoa_r+0x9e8>
 8015710:	f000 f9ca 	bl	8015aa8 <__multadd>
 8015714:	4680      	mov	r8, r0
 8015716:	4605      	mov	r5, r0
 8015718:	9b05      	ldr	r3, [sp, #20]
 801571a:	3301      	adds	r3, #1
 801571c:	9305      	str	r3, [sp, #20]
 801571e:	e775      	b.n	801560c <_dtoa_r+0x8d4>
 8015720:	f000 f9c2 	bl	8015aa8 <__multadd>
 8015724:	4629      	mov	r1, r5
 8015726:	4680      	mov	r8, r0
 8015728:	2300      	movs	r3, #0
 801572a:	220a      	movs	r2, #10
 801572c:	4648      	mov	r0, r9
 801572e:	f000 f9bb 	bl	8015aa8 <__multadd>
 8015732:	4605      	mov	r5, r0
 8015734:	e7f0      	b.n	8015718 <_dtoa_r+0x9e0>
 8015736:	f1bb 0f00 	cmp.w	fp, #0
 801573a:	bfcc      	ite	gt
 801573c:	465e      	movgt	r6, fp
 801573e:	2601      	movle	r6, #1
 8015740:	443e      	add	r6, r7
 8015742:	f04f 0800 	mov.w	r8, #0
 8015746:	9901      	ldr	r1, [sp, #4]
 8015748:	2201      	movs	r2, #1
 801574a:	4648      	mov	r0, r9
 801574c:	f000 fb58 	bl	8015e00 <__lshift>
 8015750:	4621      	mov	r1, r4
 8015752:	9001      	str	r0, [sp, #4]
 8015754:	f000 fbc0 	bl	8015ed8 <__mcmp>
 8015758:	2800      	cmp	r0, #0
 801575a:	dcaf      	bgt.n	80156bc <_dtoa_r+0x984>
 801575c:	d102      	bne.n	8015764 <_dtoa_r+0xa2c>
 801575e:	f01a 0f01 	tst.w	sl, #1
 8015762:	d1ab      	bne.n	80156bc <_dtoa_r+0x984>
 8015764:	4633      	mov	r3, r6
 8015766:	461e      	mov	r6, r3
 8015768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801576c:	2a30      	cmp	r2, #48	@ 0x30
 801576e:	d0fa      	beq.n	8015766 <_dtoa_r+0xa2e>
 8015770:	e5bb      	b.n	80152ea <_dtoa_r+0x5b2>
 8015772:	429f      	cmp	r7, r3
 8015774:	d1a3      	bne.n	80156be <_dtoa_r+0x986>
 8015776:	9b04      	ldr	r3, [sp, #16]
 8015778:	3301      	adds	r3, #1
 801577a:	9304      	str	r3, [sp, #16]
 801577c:	2331      	movs	r3, #49	@ 0x31
 801577e:	703b      	strb	r3, [r7, #0]
 8015780:	e5b3      	b.n	80152ea <_dtoa_r+0x5b2>
 8015782:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015784:	4f16      	ldr	r7, [pc, #88]	@ (80157e0 <_dtoa_r+0xaa8>)
 8015786:	b11b      	cbz	r3, 8015790 <_dtoa_r+0xa58>
 8015788:	f107 0308 	add.w	r3, r7, #8
 801578c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801578e:	6013      	str	r3, [r2, #0]
 8015790:	4638      	mov	r0, r7
 8015792:	b011      	add	sp, #68	@ 0x44
 8015794:	ecbd 8b02 	vpop	{d8}
 8015798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801579c:	9b07      	ldr	r3, [sp, #28]
 801579e:	2b01      	cmp	r3, #1
 80157a0:	f77f ae36 	ble.w	8015410 <_dtoa_r+0x6d8>
 80157a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80157a8:	2001      	movs	r0, #1
 80157aa:	e656      	b.n	801545a <_dtoa_r+0x722>
 80157ac:	f1bb 0f00 	cmp.w	fp, #0
 80157b0:	f77f aed7 	ble.w	8015562 <_dtoa_r+0x82a>
 80157b4:	463e      	mov	r6, r7
 80157b6:	9801      	ldr	r0, [sp, #4]
 80157b8:	4621      	mov	r1, r4
 80157ba:	f7ff fa34 	bl	8014c26 <quorem>
 80157be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80157c2:	f806 ab01 	strb.w	sl, [r6], #1
 80157c6:	1bf2      	subs	r2, r6, r7
 80157c8:	4593      	cmp	fp, r2
 80157ca:	ddb4      	ble.n	8015736 <_dtoa_r+0x9fe>
 80157cc:	9901      	ldr	r1, [sp, #4]
 80157ce:	2300      	movs	r3, #0
 80157d0:	220a      	movs	r2, #10
 80157d2:	4648      	mov	r0, r9
 80157d4:	f000 f968 	bl	8015aa8 <__multadd>
 80157d8:	9001      	str	r0, [sp, #4]
 80157da:	e7ec      	b.n	80157b6 <_dtoa_r+0xa7e>
 80157dc:	08016bcc 	.word	0x08016bcc
 80157e0:	08016b50 	.word	0x08016b50

080157e4 <_free_r>:
 80157e4:	b538      	push	{r3, r4, r5, lr}
 80157e6:	4605      	mov	r5, r0
 80157e8:	2900      	cmp	r1, #0
 80157ea:	d041      	beq.n	8015870 <_free_r+0x8c>
 80157ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80157f0:	1f0c      	subs	r4, r1, #4
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	bfb8      	it	lt
 80157f6:	18e4      	addlt	r4, r4, r3
 80157f8:	f000 f8e8 	bl	80159cc <__malloc_lock>
 80157fc:	4a1d      	ldr	r2, [pc, #116]	@ (8015874 <_free_r+0x90>)
 80157fe:	6813      	ldr	r3, [r2, #0]
 8015800:	b933      	cbnz	r3, 8015810 <_free_r+0x2c>
 8015802:	6063      	str	r3, [r4, #4]
 8015804:	6014      	str	r4, [r2, #0]
 8015806:	4628      	mov	r0, r5
 8015808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801580c:	f000 b8e4 	b.w	80159d8 <__malloc_unlock>
 8015810:	42a3      	cmp	r3, r4
 8015812:	d908      	bls.n	8015826 <_free_r+0x42>
 8015814:	6820      	ldr	r0, [r4, #0]
 8015816:	1821      	adds	r1, r4, r0
 8015818:	428b      	cmp	r3, r1
 801581a:	bf01      	itttt	eq
 801581c:	6819      	ldreq	r1, [r3, #0]
 801581e:	685b      	ldreq	r3, [r3, #4]
 8015820:	1809      	addeq	r1, r1, r0
 8015822:	6021      	streq	r1, [r4, #0]
 8015824:	e7ed      	b.n	8015802 <_free_r+0x1e>
 8015826:	461a      	mov	r2, r3
 8015828:	685b      	ldr	r3, [r3, #4]
 801582a:	b10b      	cbz	r3, 8015830 <_free_r+0x4c>
 801582c:	42a3      	cmp	r3, r4
 801582e:	d9fa      	bls.n	8015826 <_free_r+0x42>
 8015830:	6811      	ldr	r1, [r2, #0]
 8015832:	1850      	adds	r0, r2, r1
 8015834:	42a0      	cmp	r0, r4
 8015836:	d10b      	bne.n	8015850 <_free_r+0x6c>
 8015838:	6820      	ldr	r0, [r4, #0]
 801583a:	4401      	add	r1, r0
 801583c:	1850      	adds	r0, r2, r1
 801583e:	4283      	cmp	r3, r0
 8015840:	6011      	str	r1, [r2, #0]
 8015842:	d1e0      	bne.n	8015806 <_free_r+0x22>
 8015844:	6818      	ldr	r0, [r3, #0]
 8015846:	685b      	ldr	r3, [r3, #4]
 8015848:	6053      	str	r3, [r2, #4]
 801584a:	4408      	add	r0, r1
 801584c:	6010      	str	r0, [r2, #0]
 801584e:	e7da      	b.n	8015806 <_free_r+0x22>
 8015850:	d902      	bls.n	8015858 <_free_r+0x74>
 8015852:	230c      	movs	r3, #12
 8015854:	602b      	str	r3, [r5, #0]
 8015856:	e7d6      	b.n	8015806 <_free_r+0x22>
 8015858:	6820      	ldr	r0, [r4, #0]
 801585a:	1821      	adds	r1, r4, r0
 801585c:	428b      	cmp	r3, r1
 801585e:	bf04      	itt	eq
 8015860:	6819      	ldreq	r1, [r3, #0]
 8015862:	685b      	ldreq	r3, [r3, #4]
 8015864:	6063      	str	r3, [r4, #4]
 8015866:	bf04      	itt	eq
 8015868:	1809      	addeq	r1, r1, r0
 801586a:	6021      	streq	r1, [r4, #0]
 801586c:	6054      	str	r4, [r2, #4]
 801586e:	e7ca      	b.n	8015806 <_free_r+0x22>
 8015870:	bd38      	pop	{r3, r4, r5, pc}
 8015872:	bf00      	nop
 8015874:	240017b8 	.word	0x240017b8

08015878 <malloc>:
 8015878:	4b02      	ldr	r3, [pc, #8]	@ (8015884 <malloc+0xc>)
 801587a:	4601      	mov	r1, r0
 801587c:	6818      	ldr	r0, [r3, #0]
 801587e:	f000 b825 	b.w	80158cc <_malloc_r>
 8015882:	bf00      	nop
 8015884:	2400013c 	.word	0x2400013c

08015888 <sbrk_aligned>:
 8015888:	b570      	push	{r4, r5, r6, lr}
 801588a:	4e0f      	ldr	r6, [pc, #60]	@ (80158c8 <sbrk_aligned+0x40>)
 801588c:	460c      	mov	r4, r1
 801588e:	6831      	ldr	r1, [r6, #0]
 8015890:	4605      	mov	r5, r0
 8015892:	b911      	cbnz	r1, 801589a <sbrk_aligned+0x12>
 8015894:	f000 fe9a 	bl	80165cc <_sbrk_r>
 8015898:	6030      	str	r0, [r6, #0]
 801589a:	4621      	mov	r1, r4
 801589c:	4628      	mov	r0, r5
 801589e:	f000 fe95 	bl	80165cc <_sbrk_r>
 80158a2:	1c43      	adds	r3, r0, #1
 80158a4:	d103      	bne.n	80158ae <sbrk_aligned+0x26>
 80158a6:	f04f 34ff 	mov.w	r4, #4294967295
 80158aa:	4620      	mov	r0, r4
 80158ac:	bd70      	pop	{r4, r5, r6, pc}
 80158ae:	1cc4      	adds	r4, r0, #3
 80158b0:	f024 0403 	bic.w	r4, r4, #3
 80158b4:	42a0      	cmp	r0, r4
 80158b6:	d0f8      	beq.n	80158aa <sbrk_aligned+0x22>
 80158b8:	1a21      	subs	r1, r4, r0
 80158ba:	4628      	mov	r0, r5
 80158bc:	f000 fe86 	bl	80165cc <_sbrk_r>
 80158c0:	3001      	adds	r0, #1
 80158c2:	d1f2      	bne.n	80158aa <sbrk_aligned+0x22>
 80158c4:	e7ef      	b.n	80158a6 <sbrk_aligned+0x1e>
 80158c6:	bf00      	nop
 80158c8:	240017b4 	.word	0x240017b4

080158cc <_malloc_r>:
 80158cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158d0:	1ccd      	adds	r5, r1, #3
 80158d2:	f025 0503 	bic.w	r5, r5, #3
 80158d6:	3508      	adds	r5, #8
 80158d8:	2d0c      	cmp	r5, #12
 80158da:	bf38      	it	cc
 80158dc:	250c      	movcc	r5, #12
 80158de:	2d00      	cmp	r5, #0
 80158e0:	4606      	mov	r6, r0
 80158e2:	db01      	blt.n	80158e8 <_malloc_r+0x1c>
 80158e4:	42a9      	cmp	r1, r5
 80158e6:	d904      	bls.n	80158f2 <_malloc_r+0x26>
 80158e8:	230c      	movs	r3, #12
 80158ea:	6033      	str	r3, [r6, #0]
 80158ec:	2000      	movs	r0, #0
 80158ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80159c8 <_malloc_r+0xfc>
 80158f6:	f000 f869 	bl	80159cc <__malloc_lock>
 80158fa:	f8d8 3000 	ldr.w	r3, [r8]
 80158fe:	461c      	mov	r4, r3
 8015900:	bb44      	cbnz	r4, 8015954 <_malloc_r+0x88>
 8015902:	4629      	mov	r1, r5
 8015904:	4630      	mov	r0, r6
 8015906:	f7ff ffbf 	bl	8015888 <sbrk_aligned>
 801590a:	1c43      	adds	r3, r0, #1
 801590c:	4604      	mov	r4, r0
 801590e:	d158      	bne.n	80159c2 <_malloc_r+0xf6>
 8015910:	f8d8 4000 	ldr.w	r4, [r8]
 8015914:	4627      	mov	r7, r4
 8015916:	2f00      	cmp	r7, #0
 8015918:	d143      	bne.n	80159a2 <_malloc_r+0xd6>
 801591a:	2c00      	cmp	r4, #0
 801591c:	d04b      	beq.n	80159b6 <_malloc_r+0xea>
 801591e:	6823      	ldr	r3, [r4, #0]
 8015920:	4639      	mov	r1, r7
 8015922:	4630      	mov	r0, r6
 8015924:	eb04 0903 	add.w	r9, r4, r3
 8015928:	f000 fe50 	bl	80165cc <_sbrk_r>
 801592c:	4581      	cmp	r9, r0
 801592e:	d142      	bne.n	80159b6 <_malloc_r+0xea>
 8015930:	6821      	ldr	r1, [r4, #0]
 8015932:	1a6d      	subs	r5, r5, r1
 8015934:	4629      	mov	r1, r5
 8015936:	4630      	mov	r0, r6
 8015938:	f7ff ffa6 	bl	8015888 <sbrk_aligned>
 801593c:	3001      	adds	r0, #1
 801593e:	d03a      	beq.n	80159b6 <_malloc_r+0xea>
 8015940:	6823      	ldr	r3, [r4, #0]
 8015942:	442b      	add	r3, r5
 8015944:	6023      	str	r3, [r4, #0]
 8015946:	f8d8 3000 	ldr.w	r3, [r8]
 801594a:	685a      	ldr	r2, [r3, #4]
 801594c:	bb62      	cbnz	r2, 80159a8 <_malloc_r+0xdc>
 801594e:	f8c8 7000 	str.w	r7, [r8]
 8015952:	e00f      	b.n	8015974 <_malloc_r+0xa8>
 8015954:	6822      	ldr	r2, [r4, #0]
 8015956:	1b52      	subs	r2, r2, r5
 8015958:	d420      	bmi.n	801599c <_malloc_r+0xd0>
 801595a:	2a0b      	cmp	r2, #11
 801595c:	d917      	bls.n	801598e <_malloc_r+0xc2>
 801595e:	1961      	adds	r1, r4, r5
 8015960:	42a3      	cmp	r3, r4
 8015962:	6025      	str	r5, [r4, #0]
 8015964:	bf18      	it	ne
 8015966:	6059      	strne	r1, [r3, #4]
 8015968:	6863      	ldr	r3, [r4, #4]
 801596a:	bf08      	it	eq
 801596c:	f8c8 1000 	streq.w	r1, [r8]
 8015970:	5162      	str	r2, [r4, r5]
 8015972:	604b      	str	r3, [r1, #4]
 8015974:	4630      	mov	r0, r6
 8015976:	f000 f82f 	bl	80159d8 <__malloc_unlock>
 801597a:	f104 000b 	add.w	r0, r4, #11
 801597e:	1d23      	adds	r3, r4, #4
 8015980:	f020 0007 	bic.w	r0, r0, #7
 8015984:	1ac2      	subs	r2, r0, r3
 8015986:	bf1c      	itt	ne
 8015988:	1a1b      	subne	r3, r3, r0
 801598a:	50a3      	strne	r3, [r4, r2]
 801598c:	e7af      	b.n	80158ee <_malloc_r+0x22>
 801598e:	6862      	ldr	r2, [r4, #4]
 8015990:	42a3      	cmp	r3, r4
 8015992:	bf0c      	ite	eq
 8015994:	f8c8 2000 	streq.w	r2, [r8]
 8015998:	605a      	strne	r2, [r3, #4]
 801599a:	e7eb      	b.n	8015974 <_malloc_r+0xa8>
 801599c:	4623      	mov	r3, r4
 801599e:	6864      	ldr	r4, [r4, #4]
 80159a0:	e7ae      	b.n	8015900 <_malloc_r+0x34>
 80159a2:	463c      	mov	r4, r7
 80159a4:	687f      	ldr	r7, [r7, #4]
 80159a6:	e7b6      	b.n	8015916 <_malloc_r+0x4a>
 80159a8:	461a      	mov	r2, r3
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	42a3      	cmp	r3, r4
 80159ae:	d1fb      	bne.n	80159a8 <_malloc_r+0xdc>
 80159b0:	2300      	movs	r3, #0
 80159b2:	6053      	str	r3, [r2, #4]
 80159b4:	e7de      	b.n	8015974 <_malloc_r+0xa8>
 80159b6:	230c      	movs	r3, #12
 80159b8:	6033      	str	r3, [r6, #0]
 80159ba:	4630      	mov	r0, r6
 80159bc:	f000 f80c 	bl	80159d8 <__malloc_unlock>
 80159c0:	e794      	b.n	80158ec <_malloc_r+0x20>
 80159c2:	6005      	str	r5, [r0, #0]
 80159c4:	e7d6      	b.n	8015974 <_malloc_r+0xa8>
 80159c6:	bf00      	nop
 80159c8:	240017b8 	.word	0x240017b8

080159cc <__malloc_lock>:
 80159cc:	4801      	ldr	r0, [pc, #4]	@ (80159d4 <__malloc_lock+0x8>)
 80159ce:	f7ff b91a 	b.w	8014c06 <__retarget_lock_acquire_recursive>
 80159d2:	bf00      	nop
 80159d4:	240017b0 	.word	0x240017b0

080159d8 <__malloc_unlock>:
 80159d8:	4801      	ldr	r0, [pc, #4]	@ (80159e0 <__malloc_unlock+0x8>)
 80159da:	f7ff b915 	b.w	8014c08 <__retarget_lock_release_recursive>
 80159de:	bf00      	nop
 80159e0:	240017b0 	.word	0x240017b0

080159e4 <_Balloc>:
 80159e4:	b570      	push	{r4, r5, r6, lr}
 80159e6:	69c6      	ldr	r6, [r0, #28]
 80159e8:	4604      	mov	r4, r0
 80159ea:	460d      	mov	r5, r1
 80159ec:	b976      	cbnz	r6, 8015a0c <_Balloc+0x28>
 80159ee:	2010      	movs	r0, #16
 80159f0:	f7ff ff42 	bl	8015878 <malloc>
 80159f4:	4602      	mov	r2, r0
 80159f6:	61e0      	str	r0, [r4, #28]
 80159f8:	b920      	cbnz	r0, 8015a04 <_Balloc+0x20>
 80159fa:	4b18      	ldr	r3, [pc, #96]	@ (8015a5c <_Balloc+0x78>)
 80159fc:	4818      	ldr	r0, [pc, #96]	@ (8015a60 <_Balloc+0x7c>)
 80159fe:	216b      	movs	r1, #107	@ 0x6b
 8015a00:	f000 fdf4 	bl	80165ec <__assert_func>
 8015a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a08:	6006      	str	r6, [r0, #0]
 8015a0a:	60c6      	str	r6, [r0, #12]
 8015a0c:	69e6      	ldr	r6, [r4, #28]
 8015a0e:	68f3      	ldr	r3, [r6, #12]
 8015a10:	b183      	cbz	r3, 8015a34 <_Balloc+0x50>
 8015a12:	69e3      	ldr	r3, [r4, #28]
 8015a14:	68db      	ldr	r3, [r3, #12]
 8015a16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015a1a:	b9b8      	cbnz	r0, 8015a4c <_Balloc+0x68>
 8015a1c:	2101      	movs	r1, #1
 8015a1e:	fa01 f605 	lsl.w	r6, r1, r5
 8015a22:	1d72      	adds	r2, r6, #5
 8015a24:	0092      	lsls	r2, r2, #2
 8015a26:	4620      	mov	r0, r4
 8015a28:	f000 fdfe 	bl	8016628 <_calloc_r>
 8015a2c:	b160      	cbz	r0, 8015a48 <_Balloc+0x64>
 8015a2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015a32:	e00e      	b.n	8015a52 <_Balloc+0x6e>
 8015a34:	2221      	movs	r2, #33	@ 0x21
 8015a36:	2104      	movs	r1, #4
 8015a38:	4620      	mov	r0, r4
 8015a3a:	f000 fdf5 	bl	8016628 <_calloc_r>
 8015a3e:	69e3      	ldr	r3, [r4, #28]
 8015a40:	60f0      	str	r0, [r6, #12]
 8015a42:	68db      	ldr	r3, [r3, #12]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d1e4      	bne.n	8015a12 <_Balloc+0x2e>
 8015a48:	2000      	movs	r0, #0
 8015a4a:	bd70      	pop	{r4, r5, r6, pc}
 8015a4c:	6802      	ldr	r2, [r0, #0]
 8015a4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a52:	2300      	movs	r3, #0
 8015a54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015a58:	e7f7      	b.n	8015a4a <_Balloc+0x66>
 8015a5a:	bf00      	nop
 8015a5c:	08016b5d 	.word	0x08016b5d
 8015a60:	08016bdd 	.word	0x08016bdd

08015a64 <_Bfree>:
 8015a64:	b570      	push	{r4, r5, r6, lr}
 8015a66:	69c6      	ldr	r6, [r0, #28]
 8015a68:	4605      	mov	r5, r0
 8015a6a:	460c      	mov	r4, r1
 8015a6c:	b976      	cbnz	r6, 8015a8c <_Bfree+0x28>
 8015a6e:	2010      	movs	r0, #16
 8015a70:	f7ff ff02 	bl	8015878 <malloc>
 8015a74:	4602      	mov	r2, r0
 8015a76:	61e8      	str	r0, [r5, #28]
 8015a78:	b920      	cbnz	r0, 8015a84 <_Bfree+0x20>
 8015a7a:	4b09      	ldr	r3, [pc, #36]	@ (8015aa0 <_Bfree+0x3c>)
 8015a7c:	4809      	ldr	r0, [pc, #36]	@ (8015aa4 <_Bfree+0x40>)
 8015a7e:	218f      	movs	r1, #143	@ 0x8f
 8015a80:	f000 fdb4 	bl	80165ec <__assert_func>
 8015a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a88:	6006      	str	r6, [r0, #0]
 8015a8a:	60c6      	str	r6, [r0, #12]
 8015a8c:	b13c      	cbz	r4, 8015a9e <_Bfree+0x3a>
 8015a8e:	69eb      	ldr	r3, [r5, #28]
 8015a90:	6862      	ldr	r2, [r4, #4]
 8015a92:	68db      	ldr	r3, [r3, #12]
 8015a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015a98:	6021      	str	r1, [r4, #0]
 8015a9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015a9e:	bd70      	pop	{r4, r5, r6, pc}
 8015aa0:	08016b5d 	.word	0x08016b5d
 8015aa4:	08016bdd 	.word	0x08016bdd

08015aa8 <__multadd>:
 8015aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aac:	690d      	ldr	r5, [r1, #16]
 8015aae:	4607      	mov	r7, r0
 8015ab0:	460c      	mov	r4, r1
 8015ab2:	461e      	mov	r6, r3
 8015ab4:	f101 0c14 	add.w	ip, r1, #20
 8015ab8:	2000      	movs	r0, #0
 8015aba:	f8dc 3000 	ldr.w	r3, [ip]
 8015abe:	b299      	uxth	r1, r3
 8015ac0:	fb02 6101 	mla	r1, r2, r1, r6
 8015ac4:	0c1e      	lsrs	r6, r3, #16
 8015ac6:	0c0b      	lsrs	r3, r1, #16
 8015ac8:	fb02 3306 	mla	r3, r2, r6, r3
 8015acc:	b289      	uxth	r1, r1
 8015ace:	3001      	adds	r0, #1
 8015ad0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015ad4:	4285      	cmp	r5, r0
 8015ad6:	f84c 1b04 	str.w	r1, [ip], #4
 8015ada:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015ade:	dcec      	bgt.n	8015aba <__multadd+0x12>
 8015ae0:	b30e      	cbz	r6, 8015b26 <__multadd+0x7e>
 8015ae2:	68a3      	ldr	r3, [r4, #8]
 8015ae4:	42ab      	cmp	r3, r5
 8015ae6:	dc19      	bgt.n	8015b1c <__multadd+0x74>
 8015ae8:	6861      	ldr	r1, [r4, #4]
 8015aea:	4638      	mov	r0, r7
 8015aec:	3101      	adds	r1, #1
 8015aee:	f7ff ff79 	bl	80159e4 <_Balloc>
 8015af2:	4680      	mov	r8, r0
 8015af4:	b928      	cbnz	r0, 8015b02 <__multadd+0x5a>
 8015af6:	4602      	mov	r2, r0
 8015af8:	4b0c      	ldr	r3, [pc, #48]	@ (8015b2c <__multadd+0x84>)
 8015afa:	480d      	ldr	r0, [pc, #52]	@ (8015b30 <__multadd+0x88>)
 8015afc:	21ba      	movs	r1, #186	@ 0xba
 8015afe:	f000 fd75 	bl	80165ec <__assert_func>
 8015b02:	6922      	ldr	r2, [r4, #16]
 8015b04:	3202      	adds	r2, #2
 8015b06:	f104 010c 	add.w	r1, r4, #12
 8015b0a:	0092      	lsls	r2, r2, #2
 8015b0c:	300c      	adds	r0, #12
 8015b0e:	f7ff f87c 	bl	8014c0a <memcpy>
 8015b12:	4621      	mov	r1, r4
 8015b14:	4638      	mov	r0, r7
 8015b16:	f7ff ffa5 	bl	8015a64 <_Bfree>
 8015b1a:	4644      	mov	r4, r8
 8015b1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015b20:	3501      	adds	r5, #1
 8015b22:	615e      	str	r6, [r3, #20]
 8015b24:	6125      	str	r5, [r4, #16]
 8015b26:	4620      	mov	r0, r4
 8015b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b2c:	08016bcc 	.word	0x08016bcc
 8015b30:	08016bdd 	.word	0x08016bdd

08015b34 <__hi0bits>:
 8015b34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015b38:	4603      	mov	r3, r0
 8015b3a:	bf36      	itet	cc
 8015b3c:	0403      	lslcc	r3, r0, #16
 8015b3e:	2000      	movcs	r0, #0
 8015b40:	2010      	movcc	r0, #16
 8015b42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015b46:	bf3c      	itt	cc
 8015b48:	021b      	lslcc	r3, r3, #8
 8015b4a:	3008      	addcc	r0, #8
 8015b4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015b50:	bf3c      	itt	cc
 8015b52:	011b      	lslcc	r3, r3, #4
 8015b54:	3004      	addcc	r0, #4
 8015b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b5a:	bf3c      	itt	cc
 8015b5c:	009b      	lslcc	r3, r3, #2
 8015b5e:	3002      	addcc	r0, #2
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	db05      	blt.n	8015b70 <__hi0bits+0x3c>
 8015b64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015b68:	f100 0001 	add.w	r0, r0, #1
 8015b6c:	bf08      	it	eq
 8015b6e:	2020      	moveq	r0, #32
 8015b70:	4770      	bx	lr

08015b72 <__lo0bits>:
 8015b72:	6803      	ldr	r3, [r0, #0]
 8015b74:	4602      	mov	r2, r0
 8015b76:	f013 0007 	ands.w	r0, r3, #7
 8015b7a:	d00b      	beq.n	8015b94 <__lo0bits+0x22>
 8015b7c:	07d9      	lsls	r1, r3, #31
 8015b7e:	d421      	bmi.n	8015bc4 <__lo0bits+0x52>
 8015b80:	0798      	lsls	r0, r3, #30
 8015b82:	bf49      	itett	mi
 8015b84:	085b      	lsrmi	r3, r3, #1
 8015b86:	089b      	lsrpl	r3, r3, #2
 8015b88:	2001      	movmi	r0, #1
 8015b8a:	6013      	strmi	r3, [r2, #0]
 8015b8c:	bf5c      	itt	pl
 8015b8e:	6013      	strpl	r3, [r2, #0]
 8015b90:	2002      	movpl	r0, #2
 8015b92:	4770      	bx	lr
 8015b94:	b299      	uxth	r1, r3
 8015b96:	b909      	cbnz	r1, 8015b9c <__lo0bits+0x2a>
 8015b98:	0c1b      	lsrs	r3, r3, #16
 8015b9a:	2010      	movs	r0, #16
 8015b9c:	b2d9      	uxtb	r1, r3
 8015b9e:	b909      	cbnz	r1, 8015ba4 <__lo0bits+0x32>
 8015ba0:	3008      	adds	r0, #8
 8015ba2:	0a1b      	lsrs	r3, r3, #8
 8015ba4:	0719      	lsls	r1, r3, #28
 8015ba6:	bf04      	itt	eq
 8015ba8:	091b      	lsreq	r3, r3, #4
 8015baa:	3004      	addeq	r0, #4
 8015bac:	0799      	lsls	r1, r3, #30
 8015bae:	bf04      	itt	eq
 8015bb0:	089b      	lsreq	r3, r3, #2
 8015bb2:	3002      	addeq	r0, #2
 8015bb4:	07d9      	lsls	r1, r3, #31
 8015bb6:	d403      	bmi.n	8015bc0 <__lo0bits+0x4e>
 8015bb8:	085b      	lsrs	r3, r3, #1
 8015bba:	f100 0001 	add.w	r0, r0, #1
 8015bbe:	d003      	beq.n	8015bc8 <__lo0bits+0x56>
 8015bc0:	6013      	str	r3, [r2, #0]
 8015bc2:	4770      	bx	lr
 8015bc4:	2000      	movs	r0, #0
 8015bc6:	4770      	bx	lr
 8015bc8:	2020      	movs	r0, #32
 8015bca:	4770      	bx	lr

08015bcc <__i2b>:
 8015bcc:	b510      	push	{r4, lr}
 8015bce:	460c      	mov	r4, r1
 8015bd0:	2101      	movs	r1, #1
 8015bd2:	f7ff ff07 	bl	80159e4 <_Balloc>
 8015bd6:	4602      	mov	r2, r0
 8015bd8:	b928      	cbnz	r0, 8015be6 <__i2b+0x1a>
 8015bda:	4b05      	ldr	r3, [pc, #20]	@ (8015bf0 <__i2b+0x24>)
 8015bdc:	4805      	ldr	r0, [pc, #20]	@ (8015bf4 <__i2b+0x28>)
 8015bde:	f240 1145 	movw	r1, #325	@ 0x145
 8015be2:	f000 fd03 	bl	80165ec <__assert_func>
 8015be6:	2301      	movs	r3, #1
 8015be8:	6144      	str	r4, [r0, #20]
 8015bea:	6103      	str	r3, [r0, #16]
 8015bec:	bd10      	pop	{r4, pc}
 8015bee:	bf00      	nop
 8015bf0:	08016bcc 	.word	0x08016bcc
 8015bf4:	08016bdd 	.word	0x08016bdd

08015bf8 <__multiply>:
 8015bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bfc:	4614      	mov	r4, r2
 8015bfe:	690a      	ldr	r2, [r1, #16]
 8015c00:	6923      	ldr	r3, [r4, #16]
 8015c02:	429a      	cmp	r2, r3
 8015c04:	bfa8      	it	ge
 8015c06:	4623      	movge	r3, r4
 8015c08:	460f      	mov	r7, r1
 8015c0a:	bfa4      	itt	ge
 8015c0c:	460c      	movge	r4, r1
 8015c0e:	461f      	movge	r7, r3
 8015c10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015c14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015c18:	68a3      	ldr	r3, [r4, #8]
 8015c1a:	6861      	ldr	r1, [r4, #4]
 8015c1c:	eb0a 0609 	add.w	r6, sl, r9
 8015c20:	42b3      	cmp	r3, r6
 8015c22:	b085      	sub	sp, #20
 8015c24:	bfb8      	it	lt
 8015c26:	3101      	addlt	r1, #1
 8015c28:	f7ff fedc 	bl	80159e4 <_Balloc>
 8015c2c:	b930      	cbnz	r0, 8015c3c <__multiply+0x44>
 8015c2e:	4602      	mov	r2, r0
 8015c30:	4b44      	ldr	r3, [pc, #272]	@ (8015d44 <__multiply+0x14c>)
 8015c32:	4845      	ldr	r0, [pc, #276]	@ (8015d48 <__multiply+0x150>)
 8015c34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015c38:	f000 fcd8 	bl	80165ec <__assert_func>
 8015c3c:	f100 0514 	add.w	r5, r0, #20
 8015c40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015c44:	462b      	mov	r3, r5
 8015c46:	2200      	movs	r2, #0
 8015c48:	4543      	cmp	r3, r8
 8015c4a:	d321      	bcc.n	8015c90 <__multiply+0x98>
 8015c4c:	f107 0114 	add.w	r1, r7, #20
 8015c50:	f104 0214 	add.w	r2, r4, #20
 8015c54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015c58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015c5c:	9302      	str	r3, [sp, #8]
 8015c5e:	1b13      	subs	r3, r2, r4
 8015c60:	3b15      	subs	r3, #21
 8015c62:	f023 0303 	bic.w	r3, r3, #3
 8015c66:	3304      	adds	r3, #4
 8015c68:	f104 0715 	add.w	r7, r4, #21
 8015c6c:	42ba      	cmp	r2, r7
 8015c6e:	bf38      	it	cc
 8015c70:	2304      	movcc	r3, #4
 8015c72:	9301      	str	r3, [sp, #4]
 8015c74:	9b02      	ldr	r3, [sp, #8]
 8015c76:	9103      	str	r1, [sp, #12]
 8015c78:	428b      	cmp	r3, r1
 8015c7a:	d80c      	bhi.n	8015c96 <__multiply+0x9e>
 8015c7c:	2e00      	cmp	r6, #0
 8015c7e:	dd03      	ble.n	8015c88 <__multiply+0x90>
 8015c80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d05b      	beq.n	8015d40 <__multiply+0x148>
 8015c88:	6106      	str	r6, [r0, #16]
 8015c8a:	b005      	add	sp, #20
 8015c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c90:	f843 2b04 	str.w	r2, [r3], #4
 8015c94:	e7d8      	b.n	8015c48 <__multiply+0x50>
 8015c96:	f8b1 a000 	ldrh.w	sl, [r1]
 8015c9a:	f1ba 0f00 	cmp.w	sl, #0
 8015c9e:	d024      	beq.n	8015cea <__multiply+0xf2>
 8015ca0:	f104 0e14 	add.w	lr, r4, #20
 8015ca4:	46a9      	mov	r9, r5
 8015ca6:	f04f 0c00 	mov.w	ip, #0
 8015caa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015cae:	f8d9 3000 	ldr.w	r3, [r9]
 8015cb2:	fa1f fb87 	uxth.w	fp, r7
 8015cb6:	b29b      	uxth	r3, r3
 8015cb8:	fb0a 330b 	mla	r3, sl, fp, r3
 8015cbc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015cc0:	f8d9 7000 	ldr.w	r7, [r9]
 8015cc4:	4463      	add	r3, ip
 8015cc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015cca:	fb0a c70b 	mla	r7, sl, fp, ip
 8015cce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015cd2:	b29b      	uxth	r3, r3
 8015cd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015cd8:	4572      	cmp	r2, lr
 8015cda:	f849 3b04 	str.w	r3, [r9], #4
 8015cde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015ce2:	d8e2      	bhi.n	8015caa <__multiply+0xb2>
 8015ce4:	9b01      	ldr	r3, [sp, #4]
 8015ce6:	f845 c003 	str.w	ip, [r5, r3]
 8015cea:	9b03      	ldr	r3, [sp, #12]
 8015cec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015cf0:	3104      	adds	r1, #4
 8015cf2:	f1b9 0f00 	cmp.w	r9, #0
 8015cf6:	d021      	beq.n	8015d3c <__multiply+0x144>
 8015cf8:	682b      	ldr	r3, [r5, #0]
 8015cfa:	f104 0c14 	add.w	ip, r4, #20
 8015cfe:	46ae      	mov	lr, r5
 8015d00:	f04f 0a00 	mov.w	sl, #0
 8015d04:	f8bc b000 	ldrh.w	fp, [ip]
 8015d08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015d0c:	fb09 770b 	mla	r7, r9, fp, r7
 8015d10:	4457      	add	r7, sl
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015d18:	f84e 3b04 	str.w	r3, [lr], #4
 8015d1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015d20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015d24:	f8be 3000 	ldrh.w	r3, [lr]
 8015d28:	fb09 330a 	mla	r3, r9, sl, r3
 8015d2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015d30:	4562      	cmp	r2, ip
 8015d32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015d36:	d8e5      	bhi.n	8015d04 <__multiply+0x10c>
 8015d38:	9f01      	ldr	r7, [sp, #4]
 8015d3a:	51eb      	str	r3, [r5, r7]
 8015d3c:	3504      	adds	r5, #4
 8015d3e:	e799      	b.n	8015c74 <__multiply+0x7c>
 8015d40:	3e01      	subs	r6, #1
 8015d42:	e79b      	b.n	8015c7c <__multiply+0x84>
 8015d44:	08016bcc 	.word	0x08016bcc
 8015d48:	08016bdd 	.word	0x08016bdd

08015d4c <__pow5mult>:
 8015d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d50:	4615      	mov	r5, r2
 8015d52:	f012 0203 	ands.w	r2, r2, #3
 8015d56:	4607      	mov	r7, r0
 8015d58:	460e      	mov	r6, r1
 8015d5a:	d007      	beq.n	8015d6c <__pow5mult+0x20>
 8015d5c:	4c25      	ldr	r4, [pc, #148]	@ (8015df4 <__pow5mult+0xa8>)
 8015d5e:	3a01      	subs	r2, #1
 8015d60:	2300      	movs	r3, #0
 8015d62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015d66:	f7ff fe9f 	bl	8015aa8 <__multadd>
 8015d6a:	4606      	mov	r6, r0
 8015d6c:	10ad      	asrs	r5, r5, #2
 8015d6e:	d03d      	beq.n	8015dec <__pow5mult+0xa0>
 8015d70:	69fc      	ldr	r4, [r7, #28]
 8015d72:	b97c      	cbnz	r4, 8015d94 <__pow5mult+0x48>
 8015d74:	2010      	movs	r0, #16
 8015d76:	f7ff fd7f 	bl	8015878 <malloc>
 8015d7a:	4602      	mov	r2, r0
 8015d7c:	61f8      	str	r0, [r7, #28]
 8015d7e:	b928      	cbnz	r0, 8015d8c <__pow5mult+0x40>
 8015d80:	4b1d      	ldr	r3, [pc, #116]	@ (8015df8 <__pow5mult+0xac>)
 8015d82:	481e      	ldr	r0, [pc, #120]	@ (8015dfc <__pow5mult+0xb0>)
 8015d84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015d88:	f000 fc30 	bl	80165ec <__assert_func>
 8015d8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015d90:	6004      	str	r4, [r0, #0]
 8015d92:	60c4      	str	r4, [r0, #12]
 8015d94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015d98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015d9c:	b94c      	cbnz	r4, 8015db2 <__pow5mult+0x66>
 8015d9e:	f240 2171 	movw	r1, #625	@ 0x271
 8015da2:	4638      	mov	r0, r7
 8015da4:	f7ff ff12 	bl	8015bcc <__i2b>
 8015da8:	2300      	movs	r3, #0
 8015daa:	f8c8 0008 	str.w	r0, [r8, #8]
 8015dae:	4604      	mov	r4, r0
 8015db0:	6003      	str	r3, [r0, #0]
 8015db2:	f04f 0900 	mov.w	r9, #0
 8015db6:	07eb      	lsls	r3, r5, #31
 8015db8:	d50a      	bpl.n	8015dd0 <__pow5mult+0x84>
 8015dba:	4631      	mov	r1, r6
 8015dbc:	4622      	mov	r2, r4
 8015dbe:	4638      	mov	r0, r7
 8015dc0:	f7ff ff1a 	bl	8015bf8 <__multiply>
 8015dc4:	4631      	mov	r1, r6
 8015dc6:	4680      	mov	r8, r0
 8015dc8:	4638      	mov	r0, r7
 8015dca:	f7ff fe4b 	bl	8015a64 <_Bfree>
 8015dce:	4646      	mov	r6, r8
 8015dd0:	106d      	asrs	r5, r5, #1
 8015dd2:	d00b      	beq.n	8015dec <__pow5mult+0xa0>
 8015dd4:	6820      	ldr	r0, [r4, #0]
 8015dd6:	b938      	cbnz	r0, 8015de8 <__pow5mult+0x9c>
 8015dd8:	4622      	mov	r2, r4
 8015dda:	4621      	mov	r1, r4
 8015ddc:	4638      	mov	r0, r7
 8015dde:	f7ff ff0b 	bl	8015bf8 <__multiply>
 8015de2:	6020      	str	r0, [r4, #0]
 8015de4:	f8c0 9000 	str.w	r9, [r0]
 8015de8:	4604      	mov	r4, r0
 8015dea:	e7e4      	b.n	8015db6 <__pow5mult+0x6a>
 8015dec:	4630      	mov	r0, r6
 8015dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015df2:	bf00      	nop
 8015df4:	08016c38 	.word	0x08016c38
 8015df8:	08016b5d 	.word	0x08016b5d
 8015dfc:	08016bdd 	.word	0x08016bdd

08015e00 <__lshift>:
 8015e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e04:	460c      	mov	r4, r1
 8015e06:	6849      	ldr	r1, [r1, #4]
 8015e08:	6923      	ldr	r3, [r4, #16]
 8015e0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015e0e:	68a3      	ldr	r3, [r4, #8]
 8015e10:	4607      	mov	r7, r0
 8015e12:	4691      	mov	r9, r2
 8015e14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015e18:	f108 0601 	add.w	r6, r8, #1
 8015e1c:	42b3      	cmp	r3, r6
 8015e1e:	db0b      	blt.n	8015e38 <__lshift+0x38>
 8015e20:	4638      	mov	r0, r7
 8015e22:	f7ff fddf 	bl	80159e4 <_Balloc>
 8015e26:	4605      	mov	r5, r0
 8015e28:	b948      	cbnz	r0, 8015e3e <__lshift+0x3e>
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	4b28      	ldr	r3, [pc, #160]	@ (8015ed0 <__lshift+0xd0>)
 8015e2e:	4829      	ldr	r0, [pc, #164]	@ (8015ed4 <__lshift+0xd4>)
 8015e30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015e34:	f000 fbda 	bl	80165ec <__assert_func>
 8015e38:	3101      	adds	r1, #1
 8015e3a:	005b      	lsls	r3, r3, #1
 8015e3c:	e7ee      	b.n	8015e1c <__lshift+0x1c>
 8015e3e:	2300      	movs	r3, #0
 8015e40:	f100 0114 	add.w	r1, r0, #20
 8015e44:	f100 0210 	add.w	r2, r0, #16
 8015e48:	4618      	mov	r0, r3
 8015e4a:	4553      	cmp	r3, sl
 8015e4c:	db33      	blt.n	8015eb6 <__lshift+0xb6>
 8015e4e:	6920      	ldr	r0, [r4, #16]
 8015e50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e54:	f104 0314 	add.w	r3, r4, #20
 8015e58:	f019 091f 	ands.w	r9, r9, #31
 8015e5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015e60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015e64:	d02b      	beq.n	8015ebe <__lshift+0xbe>
 8015e66:	f1c9 0e20 	rsb	lr, r9, #32
 8015e6a:	468a      	mov	sl, r1
 8015e6c:	2200      	movs	r2, #0
 8015e6e:	6818      	ldr	r0, [r3, #0]
 8015e70:	fa00 f009 	lsl.w	r0, r0, r9
 8015e74:	4310      	orrs	r0, r2
 8015e76:	f84a 0b04 	str.w	r0, [sl], #4
 8015e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e7e:	459c      	cmp	ip, r3
 8015e80:	fa22 f20e 	lsr.w	r2, r2, lr
 8015e84:	d8f3      	bhi.n	8015e6e <__lshift+0x6e>
 8015e86:	ebac 0304 	sub.w	r3, ip, r4
 8015e8a:	3b15      	subs	r3, #21
 8015e8c:	f023 0303 	bic.w	r3, r3, #3
 8015e90:	3304      	adds	r3, #4
 8015e92:	f104 0015 	add.w	r0, r4, #21
 8015e96:	4584      	cmp	ip, r0
 8015e98:	bf38      	it	cc
 8015e9a:	2304      	movcc	r3, #4
 8015e9c:	50ca      	str	r2, [r1, r3]
 8015e9e:	b10a      	cbz	r2, 8015ea4 <__lshift+0xa4>
 8015ea0:	f108 0602 	add.w	r6, r8, #2
 8015ea4:	3e01      	subs	r6, #1
 8015ea6:	4638      	mov	r0, r7
 8015ea8:	612e      	str	r6, [r5, #16]
 8015eaa:	4621      	mov	r1, r4
 8015eac:	f7ff fdda 	bl	8015a64 <_Bfree>
 8015eb0:	4628      	mov	r0, r5
 8015eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8015eba:	3301      	adds	r3, #1
 8015ebc:	e7c5      	b.n	8015e4a <__lshift+0x4a>
 8015ebe:	3904      	subs	r1, #4
 8015ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ec4:	f841 2f04 	str.w	r2, [r1, #4]!
 8015ec8:	459c      	cmp	ip, r3
 8015eca:	d8f9      	bhi.n	8015ec0 <__lshift+0xc0>
 8015ecc:	e7ea      	b.n	8015ea4 <__lshift+0xa4>
 8015ece:	bf00      	nop
 8015ed0:	08016bcc 	.word	0x08016bcc
 8015ed4:	08016bdd 	.word	0x08016bdd

08015ed8 <__mcmp>:
 8015ed8:	690a      	ldr	r2, [r1, #16]
 8015eda:	4603      	mov	r3, r0
 8015edc:	6900      	ldr	r0, [r0, #16]
 8015ede:	1a80      	subs	r0, r0, r2
 8015ee0:	b530      	push	{r4, r5, lr}
 8015ee2:	d10e      	bne.n	8015f02 <__mcmp+0x2a>
 8015ee4:	3314      	adds	r3, #20
 8015ee6:	3114      	adds	r1, #20
 8015ee8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015eec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015ef0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015ef4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015ef8:	4295      	cmp	r5, r2
 8015efa:	d003      	beq.n	8015f04 <__mcmp+0x2c>
 8015efc:	d205      	bcs.n	8015f0a <__mcmp+0x32>
 8015efe:	f04f 30ff 	mov.w	r0, #4294967295
 8015f02:	bd30      	pop	{r4, r5, pc}
 8015f04:	42a3      	cmp	r3, r4
 8015f06:	d3f3      	bcc.n	8015ef0 <__mcmp+0x18>
 8015f08:	e7fb      	b.n	8015f02 <__mcmp+0x2a>
 8015f0a:	2001      	movs	r0, #1
 8015f0c:	e7f9      	b.n	8015f02 <__mcmp+0x2a>
	...

08015f10 <__mdiff>:
 8015f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f14:	4689      	mov	r9, r1
 8015f16:	4606      	mov	r6, r0
 8015f18:	4611      	mov	r1, r2
 8015f1a:	4648      	mov	r0, r9
 8015f1c:	4614      	mov	r4, r2
 8015f1e:	f7ff ffdb 	bl	8015ed8 <__mcmp>
 8015f22:	1e05      	subs	r5, r0, #0
 8015f24:	d112      	bne.n	8015f4c <__mdiff+0x3c>
 8015f26:	4629      	mov	r1, r5
 8015f28:	4630      	mov	r0, r6
 8015f2a:	f7ff fd5b 	bl	80159e4 <_Balloc>
 8015f2e:	4602      	mov	r2, r0
 8015f30:	b928      	cbnz	r0, 8015f3e <__mdiff+0x2e>
 8015f32:	4b3f      	ldr	r3, [pc, #252]	@ (8016030 <__mdiff+0x120>)
 8015f34:	f240 2137 	movw	r1, #567	@ 0x237
 8015f38:	483e      	ldr	r0, [pc, #248]	@ (8016034 <__mdiff+0x124>)
 8015f3a:	f000 fb57 	bl	80165ec <__assert_func>
 8015f3e:	2301      	movs	r3, #1
 8015f40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015f44:	4610      	mov	r0, r2
 8015f46:	b003      	add	sp, #12
 8015f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f4c:	bfbc      	itt	lt
 8015f4e:	464b      	movlt	r3, r9
 8015f50:	46a1      	movlt	r9, r4
 8015f52:	4630      	mov	r0, r6
 8015f54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015f58:	bfba      	itte	lt
 8015f5a:	461c      	movlt	r4, r3
 8015f5c:	2501      	movlt	r5, #1
 8015f5e:	2500      	movge	r5, #0
 8015f60:	f7ff fd40 	bl	80159e4 <_Balloc>
 8015f64:	4602      	mov	r2, r0
 8015f66:	b918      	cbnz	r0, 8015f70 <__mdiff+0x60>
 8015f68:	4b31      	ldr	r3, [pc, #196]	@ (8016030 <__mdiff+0x120>)
 8015f6a:	f240 2145 	movw	r1, #581	@ 0x245
 8015f6e:	e7e3      	b.n	8015f38 <__mdiff+0x28>
 8015f70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015f74:	6926      	ldr	r6, [r4, #16]
 8015f76:	60c5      	str	r5, [r0, #12]
 8015f78:	f109 0310 	add.w	r3, r9, #16
 8015f7c:	f109 0514 	add.w	r5, r9, #20
 8015f80:	f104 0e14 	add.w	lr, r4, #20
 8015f84:	f100 0b14 	add.w	fp, r0, #20
 8015f88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015f8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015f90:	9301      	str	r3, [sp, #4]
 8015f92:	46d9      	mov	r9, fp
 8015f94:	f04f 0c00 	mov.w	ip, #0
 8015f98:	9b01      	ldr	r3, [sp, #4]
 8015f9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015f9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015fa2:	9301      	str	r3, [sp, #4]
 8015fa4:	fa1f f38a 	uxth.w	r3, sl
 8015fa8:	4619      	mov	r1, r3
 8015faa:	b283      	uxth	r3, r0
 8015fac:	1acb      	subs	r3, r1, r3
 8015fae:	0c00      	lsrs	r0, r0, #16
 8015fb0:	4463      	add	r3, ip
 8015fb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015fb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015fba:	b29b      	uxth	r3, r3
 8015fbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015fc0:	4576      	cmp	r6, lr
 8015fc2:	f849 3b04 	str.w	r3, [r9], #4
 8015fc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015fca:	d8e5      	bhi.n	8015f98 <__mdiff+0x88>
 8015fcc:	1b33      	subs	r3, r6, r4
 8015fce:	3b15      	subs	r3, #21
 8015fd0:	f023 0303 	bic.w	r3, r3, #3
 8015fd4:	3415      	adds	r4, #21
 8015fd6:	3304      	adds	r3, #4
 8015fd8:	42a6      	cmp	r6, r4
 8015fda:	bf38      	it	cc
 8015fdc:	2304      	movcc	r3, #4
 8015fde:	441d      	add	r5, r3
 8015fe0:	445b      	add	r3, fp
 8015fe2:	461e      	mov	r6, r3
 8015fe4:	462c      	mov	r4, r5
 8015fe6:	4544      	cmp	r4, r8
 8015fe8:	d30e      	bcc.n	8016008 <__mdiff+0xf8>
 8015fea:	f108 0103 	add.w	r1, r8, #3
 8015fee:	1b49      	subs	r1, r1, r5
 8015ff0:	f021 0103 	bic.w	r1, r1, #3
 8015ff4:	3d03      	subs	r5, #3
 8015ff6:	45a8      	cmp	r8, r5
 8015ff8:	bf38      	it	cc
 8015ffa:	2100      	movcc	r1, #0
 8015ffc:	440b      	add	r3, r1
 8015ffe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016002:	b191      	cbz	r1, 801602a <__mdiff+0x11a>
 8016004:	6117      	str	r7, [r2, #16]
 8016006:	e79d      	b.n	8015f44 <__mdiff+0x34>
 8016008:	f854 1b04 	ldr.w	r1, [r4], #4
 801600c:	46e6      	mov	lr, ip
 801600e:	0c08      	lsrs	r0, r1, #16
 8016010:	fa1c fc81 	uxtah	ip, ip, r1
 8016014:	4471      	add	r1, lr
 8016016:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801601a:	b289      	uxth	r1, r1
 801601c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016020:	f846 1b04 	str.w	r1, [r6], #4
 8016024:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016028:	e7dd      	b.n	8015fe6 <__mdiff+0xd6>
 801602a:	3f01      	subs	r7, #1
 801602c:	e7e7      	b.n	8015ffe <__mdiff+0xee>
 801602e:	bf00      	nop
 8016030:	08016bcc 	.word	0x08016bcc
 8016034:	08016bdd 	.word	0x08016bdd

08016038 <__d2b>:
 8016038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801603c:	460f      	mov	r7, r1
 801603e:	2101      	movs	r1, #1
 8016040:	ec59 8b10 	vmov	r8, r9, d0
 8016044:	4616      	mov	r6, r2
 8016046:	f7ff fccd 	bl	80159e4 <_Balloc>
 801604a:	4604      	mov	r4, r0
 801604c:	b930      	cbnz	r0, 801605c <__d2b+0x24>
 801604e:	4602      	mov	r2, r0
 8016050:	4b23      	ldr	r3, [pc, #140]	@ (80160e0 <__d2b+0xa8>)
 8016052:	4824      	ldr	r0, [pc, #144]	@ (80160e4 <__d2b+0xac>)
 8016054:	f240 310f 	movw	r1, #783	@ 0x30f
 8016058:	f000 fac8 	bl	80165ec <__assert_func>
 801605c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016060:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016064:	b10d      	cbz	r5, 801606a <__d2b+0x32>
 8016066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801606a:	9301      	str	r3, [sp, #4]
 801606c:	f1b8 0300 	subs.w	r3, r8, #0
 8016070:	d023      	beq.n	80160ba <__d2b+0x82>
 8016072:	4668      	mov	r0, sp
 8016074:	9300      	str	r3, [sp, #0]
 8016076:	f7ff fd7c 	bl	8015b72 <__lo0bits>
 801607a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801607e:	b1d0      	cbz	r0, 80160b6 <__d2b+0x7e>
 8016080:	f1c0 0320 	rsb	r3, r0, #32
 8016084:	fa02 f303 	lsl.w	r3, r2, r3
 8016088:	430b      	orrs	r3, r1
 801608a:	40c2      	lsrs	r2, r0
 801608c:	6163      	str	r3, [r4, #20]
 801608e:	9201      	str	r2, [sp, #4]
 8016090:	9b01      	ldr	r3, [sp, #4]
 8016092:	61a3      	str	r3, [r4, #24]
 8016094:	2b00      	cmp	r3, #0
 8016096:	bf0c      	ite	eq
 8016098:	2201      	moveq	r2, #1
 801609a:	2202      	movne	r2, #2
 801609c:	6122      	str	r2, [r4, #16]
 801609e:	b1a5      	cbz	r5, 80160ca <__d2b+0x92>
 80160a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80160a4:	4405      	add	r5, r0
 80160a6:	603d      	str	r5, [r7, #0]
 80160a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80160ac:	6030      	str	r0, [r6, #0]
 80160ae:	4620      	mov	r0, r4
 80160b0:	b003      	add	sp, #12
 80160b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160b6:	6161      	str	r1, [r4, #20]
 80160b8:	e7ea      	b.n	8016090 <__d2b+0x58>
 80160ba:	a801      	add	r0, sp, #4
 80160bc:	f7ff fd59 	bl	8015b72 <__lo0bits>
 80160c0:	9b01      	ldr	r3, [sp, #4]
 80160c2:	6163      	str	r3, [r4, #20]
 80160c4:	3020      	adds	r0, #32
 80160c6:	2201      	movs	r2, #1
 80160c8:	e7e8      	b.n	801609c <__d2b+0x64>
 80160ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80160ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80160d2:	6038      	str	r0, [r7, #0]
 80160d4:	6918      	ldr	r0, [r3, #16]
 80160d6:	f7ff fd2d 	bl	8015b34 <__hi0bits>
 80160da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80160de:	e7e5      	b.n	80160ac <__d2b+0x74>
 80160e0:	08016bcc 	.word	0x08016bcc
 80160e4:	08016bdd 	.word	0x08016bdd

080160e8 <__sfputc_r>:
 80160e8:	6893      	ldr	r3, [r2, #8]
 80160ea:	3b01      	subs	r3, #1
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	b410      	push	{r4}
 80160f0:	6093      	str	r3, [r2, #8]
 80160f2:	da08      	bge.n	8016106 <__sfputc_r+0x1e>
 80160f4:	6994      	ldr	r4, [r2, #24]
 80160f6:	42a3      	cmp	r3, r4
 80160f8:	db01      	blt.n	80160fe <__sfputc_r+0x16>
 80160fa:	290a      	cmp	r1, #10
 80160fc:	d103      	bne.n	8016106 <__sfputc_r+0x1e>
 80160fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016102:	f7fe bc6e 	b.w	80149e2 <__swbuf_r>
 8016106:	6813      	ldr	r3, [r2, #0]
 8016108:	1c58      	adds	r0, r3, #1
 801610a:	6010      	str	r0, [r2, #0]
 801610c:	7019      	strb	r1, [r3, #0]
 801610e:	4608      	mov	r0, r1
 8016110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016114:	4770      	bx	lr

08016116 <__sfputs_r>:
 8016116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016118:	4606      	mov	r6, r0
 801611a:	460f      	mov	r7, r1
 801611c:	4614      	mov	r4, r2
 801611e:	18d5      	adds	r5, r2, r3
 8016120:	42ac      	cmp	r4, r5
 8016122:	d101      	bne.n	8016128 <__sfputs_r+0x12>
 8016124:	2000      	movs	r0, #0
 8016126:	e007      	b.n	8016138 <__sfputs_r+0x22>
 8016128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801612c:	463a      	mov	r2, r7
 801612e:	4630      	mov	r0, r6
 8016130:	f7ff ffda 	bl	80160e8 <__sfputc_r>
 8016134:	1c43      	adds	r3, r0, #1
 8016136:	d1f3      	bne.n	8016120 <__sfputs_r+0xa>
 8016138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801613c <_vfiprintf_r>:
 801613c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016140:	460d      	mov	r5, r1
 8016142:	b09d      	sub	sp, #116	@ 0x74
 8016144:	4614      	mov	r4, r2
 8016146:	4698      	mov	r8, r3
 8016148:	4606      	mov	r6, r0
 801614a:	b118      	cbz	r0, 8016154 <_vfiprintf_r+0x18>
 801614c:	6a03      	ldr	r3, [r0, #32]
 801614e:	b90b      	cbnz	r3, 8016154 <_vfiprintf_r+0x18>
 8016150:	f7fe fb5e 	bl	8014810 <__sinit>
 8016154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016156:	07d9      	lsls	r1, r3, #31
 8016158:	d405      	bmi.n	8016166 <_vfiprintf_r+0x2a>
 801615a:	89ab      	ldrh	r3, [r5, #12]
 801615c:	059a      	lsls	r2, r3, #22
 801615e:	d402      	bmi.n	8016166 <_vfiprintf_r+0x2a>
 8016160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016162:	f7fe fd50 	bl	8014c06 <__retarget_lock_acquire_recursive>
 8016166:	89ab      	ldrh	r3, [r5, #12]
 8016168:	071b      	lsls	r3, r3, #28
 801616a:	d501      	bpl.n	8016170 <_vfiprintf_r+0x34>
 801616c:	692b      	ldr	r3, [r5, #16]
 801616e:	b99b      	cbnz	r3, 8016198 <_vfiprintf_r+0x5c>
 8016170:	4629      	mov	r1, r5
 8016172:	4630      	mov	r0, r6
 8016174:	f7fe fc74 	bl	8014a60 <__swsetup_r>
 8016178:	b170      	cbz	r0, 8016198 <_vfiprintf_r+0x5c>
 801617a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801617c:	07dc      	lsls	r4, r3, #31
 801617e:	d504      	bpl.n	801618a <_vfiprintf_r+0x4e>
 8016180:	f04f 30ff 	mov.w	r0, #4294967295
 8016184:	b01d      	add	sp, #116	@ 0x74
 8016186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801618a:	89ab      	ldrh	r3, [r5, #12]
 801618c:	0598      	lsls	r0, r3, #22
 801618e:	d4f7      	bmi.n	8016180 <_vfiprintf_r+0x44>
 8016190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016192:	f7fe fd39 	bl	8014c08 <__retarget_lock_release_recursive>
 8016196:	e7f3      	b.n	8016180 <_vfiprintf_r+0x44>
 8016198:	2300      	movs	r3, #0
 801619a:	9309      	str	r3, [sp, #36]	@ 0x24
 801619c:	2320      	movs	r3, #32
 801619e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80161a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80161a6:	2330      	movs	r3, #48	@ 0x30
 80161a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016358 <_vfiprintf_r+0x21c>
 80161ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80161b0:	f04f 0901 	mov.w	r9, #1
 80161b4:	4623      	mov	r3, r4
 80161b6:	469a      	mov	sl, r3
 80161b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161bc:	b10a      	cbz	r2, 80161c2 <_vfiprintf_r+0x86>
 80161be:	2a25      	cmp	r2, #37	@ 0x25
 80161c0:	d1f9      	bne.n	80161b6 <_vfiprintf_r+0x7a>
 80161c2:	ebba 0b04 	subs.w	fp, sl, r4
 80161c6:	d00b      	beq.n	80161e0 <_vfiprintf_r+0xa4>
 80161c8:	465b      	mov	r3, fp
 80161ca:	4622      	mov	r2, r4
 80161cc:	4629      	mov	r1, r5
 80161ce:	4630      	mov	r0, r6
 80161d0:	f7ff ffa1 	bl	8016116 <__sfputs_r>
 80161d4:	3001      	adds	r0, #1
 80161d6:	f000 80a7 	beq.w	8016328 <_vfiprintf_r+0x1ec>
 80161da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80161dc:	445a      	add	r2, fp
 80161de:	9209      	str	r2, [sp, #36]	@ 0x24
 80161e0:	f89a 3000 	ldrb.w	r3, [sl]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	f000 809f 	beq.w	8016328 <_vfiprintf_r+0x1ec>
 80161ea:	2300      	movs	r3, #0
 80161ec:	f04f 32ff 	mov.w	r2, #4294967295
 80161f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80161f4:	f10a 0a01 	add.w	sl, sl, #1
 80161f8:	9304      	str	r3, [sp, #16]
 80161fa:	9307      	str	r3, [sp, #28]
 80161fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016200:	931a      	str	r3, [sp, #104]	@ 0x68
 8016202:	4654      	mov	r4, sl
 8016204:	2205      	movs	r2, #5
 8016206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801620a:	4853      	ldr	r0, [pc, #332]	@ (8016358 <_vfiprintf_r+0x21c>)
 801620c:	f7ea f868 	bl	80002e0 <memchr>
 8016210:	9a04      	ldr	r2, [sp, #16]
 8016212:	b9d8      	cbnz	r0, 801624c <_vfiprintf_r+0x110>
 8016214:	06d1      	lsls	r1, r2, #27
 8016216:	bf44      	itt	mi
 8016218:	2320      	movmi	r3, #32
 801621a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801621e:	0713      	lsls	r3, r2, #28
 8016220:	bf44      	itt	mi
 8016222:	232b      	movmi	r3, #43	@ 0x2b
 8016224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016228:	f89a 3000 	ldrb.w	r3, [sl]
 801622c:	2b2a      	cmp	r3, #42	@ 0x2a
 801622e:	d015      	beq.n	801625c <_vfiprintf_r+0x120>
 8016230:	9a07      	ldr	r2, [sp, #28]
 8016232:	4654      	mov	r4, sl
 8016234:	2000      	movs	r0, #0
 8016236:	f04f 0c0a 	mov.w	ip, #10
 801623a:	4621      	mov	r1, r4
 801623c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016240:	3b30      	subs	r3, #48	@ 0x30
 8016242:	2b09      	cmp	r3, #9
 8016244:	d94b      	bls.n	80162de <_vfiprintf_r+0x1a2>
 8016246:	b1b0      	cbz	r0, 8016276 <_vfiprintf_r+0x13a>
 8016248:	9207      	str	r2, [sp, #28]
 801624a:	e014      	b.n	8016276 <_vfiprintf_r+0x13a>
 801624c:	eba0 0308 	sub.w	r3, r0, r8
 8016250:	fa09 f303 	lsl.w	r3, r9, r3
 8016254:	4313      	orrs	r3, r2
 8016256:	9304      	str	r3, [sp, #16]
 8016258:	46a2      	mov	sl, r4
 801625a:	e7d2      	b.n	8016202 <_vfiprintf_r+0xc6>
 801625c:	9b03      	ldr	r3, [sp, #12]
 801625e:	1d19      	adds	r1, r3, #4
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	9103      	str	r1, [sp, #12]
 8016264:	2b00      	cmp	r3, #0
 8016266:	bfbb      	ittet	lt
 8016268:	425b      	neglt	r3, r3
 801626a:	f042 0202 	orrlt.w	r2, r2, #2
 801626e:	9307      	strge	r3, [sp, #28]
 8016270:	9307      	strlt	r3, [sp, #28]
 8016272:	bfb8      	it	lt
 8016274:	9204      	strlt	r2, [sp, #16]
 8016276:	7823      	ldrb	r3, [r4, #0]
 8016278:	2b2e      	cmp	r3, #46	@ 0x2e
 801627a:	d10a      	bne.n	8016292 <_vfiprintf_r+0x156>
 801627c:	7863      	ldrb	r3, [r4, #1]
 801627e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016280:	d132      	bne.n	80162e8 <_vfiprintf_r+0x1ac>
 8016282:	9b03      	ldr	r3, [sp, #12]
 8016284:	1d1a      	adds	r2, r3, #4
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	9203      	str	r2, [sp, #12]
 801628a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801628e:	3402      	adds	r4, #2
 8016290:	9305      	str	r3, [sp, #20]
 8016292:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016368 <_vfiprintf_r+0x22c>
 8016296:	7821      	ldrb	r1, [r4, #0]
 8016298:	2203      	movs	r2, #3
 801629a:	4650      	mov	r0, sl
 801629c:	f7ea f820 	bl	80002e0 <memchr>
 80162a0:	b138      	cbz	r0, 80162b2 <_vfiprintf_r+0x176>
 80162a2:	9b04      	ldr	r3, [sp, #16]
 80162a4:	eba0 000a 	sub.w	r0, r0, sl
 80162a8:	2240      	movs	r2, #64	@ 0x40
 80162aa:	4082      	lsls	r2, r0
 80162ac:	4313      	orrs	r3, r2
 80162ae:	3401      	adds	r4, #1
 80162b0:	9304      	str	r3, [sp, #16]
 80162b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162b6:	4829      	ldr	r0, [pc, #164]	@ (801635c <_vfiprintf_r+0x220>)
 80162b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80162bc:	2206      	movs	r2, #6
 80162be:	f7ea f80f 	bl	80002e0 <memchr>
 80162c2:	2800      	cmp	r0, #0
 80162c4:	d03f      	beq.n	8016346 <_vfiprintf_r+0x20a>
 80162c6:	4b26      	ldr	r3, [pc, #152]	@ (8016360 <_vfiprintf_r+0x224>)
 80162c8:	bb1b      	cbnz	r3, 8016312 <_vfiprintf_r+0x1d6>
 80162ca:	9b03      	ldr	r3, [sp, #12]
 80162cc:	3307      	adds	r3, #7
 80162ce:	f023 0307 	bic.w	r3, r3, #7
 80162d2:	3308      	adds	r3, #8
 80162d4:	9303      	str	r3, [sp, #12]
 80162d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162d8:	443b      	add	r3, r7
 80162da:	9309      	str	r3, [sp, #36]	@ 0x24
 80162dc:	e76a      	b.n	80161b4 <_vfiprintf_r+0x78>
 80162de:	fb0c 3202 	mla	r2, ip, r2, r3
 80162e2:	460c      	mov	r4, r1
 80162e4:	2001      	movs	r0, #1
 80162e6:	e7a8      	b.n	801623a <_vfiprintf_r+0xfe>
 80162e8:	2300      	movs	r3, #0
 80162ea:	3401      	adds	r4, #1
 80162ec:	9305      	str	r3, [sp, #20]
 80162ee:	4619      	mov	r1, r3
 80162f0:	f04f 0c0a 	mov.w	ip, #10
 80162f4:	4620      	mov	r0, r4
 80162f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162fa:	3a30      	subs	r2, #48	@ 0x30
 80162fc:	2a09      	cmp	r2, #9
 80162fe:	d903      	bls.n	8016308 <_vfiprintf_r+0x1cc>
 8016300:	2b00      	cmp	r3, #0
 8016302:	d0c6      	beq.n	8016292 <_vfiprintf_r+0x156>
 8016304:	9105      	str	r1, [sp, #20]
 8016306:	e7c4      	b.n	8016292 <_vfiprintf_r+0x156>
 8016308:	fb0c 2101 	mla	r1, ip, r1, r2
 801630c:	4604      	mov	r4, r0
 801630e:	2301      	movs	r3, #1
 8016310:	e7f0      	b.n	80162f4 <_vfiprintf_r+0x1b8>
 8016312:	ab03      	add	r3, sp, #12
 8016314:	9300      	str	r3, [sp, #0]
 8016316:	462a      	mov	r2, r5
 8016318:	4b12      	ldr	r3, [pc, #72]	@ (8016364 <_vfiprintf_r+0x228>)
 801631a:	a904      	add	r1, sp, #16
 801631c:	4630      	mov	r0, r6
 801631e:	f7fd fe43 	bl	8013fa8 <_printf_float>
 8016322:	4607      	mov	r7, r0
 8016324:	1c78      	adds	r0, r7, #1
 8016326:	d1d6      	bne.n	80162d6 <_vfiprintf_r+0x19a>
 8016328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801632a:	07d9      	lsls	r1, r3, #31
 801632c:	d405      	bmi.n	801633a <_vfiprintf_r+0x1fe>
 801632e:	89ab      	ldrh	r3, [r5, #12]
 8016330:	059a      	lsls	r2, r3, #22
 8016332:	d402      	bmi.n	801633a <_vfiprintf_r+0x1fe>
 8016334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016336:	f7fe fc67 	bl	8014c08 <__retarget_lock_release_recursive>
 801633a:	89ab      	ldrh	r3, [r5, #12]
 801633c:	065b      	lsls	r3, r3, #25
 801633e:	f53f af1f 	bmi.w	8016180 <_vfiprintf_r+0x44>
 8016342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016344:	e71e      	b.n	8016184 <_vfiprintf_r+0x48>
 8016346:	ab03      	add	r3, sp, #12
 8016348:	9300      	str	r3, [sp, #0]
 801634a:	462a      	mov	r2, r5
 801634c:	4b05      	ldr	r3, [pc, #20]	@ (8016364 <_vfiprintf_r+0x228>)
 801634e:	a904      	add	r1, sp, #16
 8016350:	4630      	mov	r0, r6
 8016352:	f7fe f8b1 	bl	80144b8 <_printf_i>
 8016356:	e7e4      	b.n	8016322 <_vfiprintf_r+0x1e6>
 8016358:	08016d38 	.word	0x08016d38
 801635c:	08016d42 	.word	0x08016d42
 8016360:	08013fa9 	.word	0x08013fa9
 8016364:	08016117 	.word	0x08016117
 8016368:	08016d3e 	.word	0x08016d3e

0801636c <__sflush_r>:
 801636c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016374:	0716      	lsls	r6, r2, #28
 8016376:	4605      	mov	r5, r0
 8016378:	460c      	mov	r4, r1
 801637a:	d454      	bmi.n	8016426 <__sflush_r+0xba>
 801637c:	684b      	ldr	r3, [r1, #4]
 801637e:	2b00      	cmp	r3, #0
 8016380:	dc02      	bgt.n	8016388 <__sflush_r+0x1c>
 8016382:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016384:	2b00      	cmp	r3, #0
 8016386:	dd48      	ble.n	801641a <__sflush_r+0xae>
 8016388:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801638a:	2e00      	cmp	r6, #0
 801638c:	d045      	beq.n	801641a <__sflush_r+0xae>
 801638e:	2300      	movs	r3, #0
 8016390:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016394:	682f      	ldr	r7, [r5, #0]
 8016396:	6a21      	ldr	r1, [r4, #32]
 8016398:	602b      	str	r3, [r5, #0]
 801639a:	d030      	beq.n	80163fe <__sflush_r+0x92>
 801639c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801639e:	89a3      	ldrh	r3, [r4, #12]
 80163a0:	0759      	lsls	r1, r3, #29
 80163a2:	d505      	bpl.n	80163b0 <__sflush_r+0x44>
 80163a4:	6863      	ldr	r3, [r4, #4]
 80163a6:	1ad2      	subs	r2, r2, r3
 80163a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80163aa:	b10b      	cbz	r3, 80163b0 <__sflush_r+0x44>
 80163ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80163ae:	1ad2      	subs	r2, r2, r3
 80163b0:	2300      	movs	r3, #0
 80163b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80163b4:	6a21      	ldr	r1, [r4, #32]
 80163b6:	4628      	mov	r0, r5
 80163b8:	47b0      	blx	r6
 80163ba:	1c43      	adds	r3, r0, #1
 80163bc:	89a3      	ldrh	r3, [r4, #12]
 80163be:	d106      	bne.n	80163ce <__sflush_r+0x62>
 80163c0:	6829      	ldr	r1, [r5, #0]
 80163c2:	291d      	cmp	r1, #29
 80163c4:	d82b      	bhi.n	801641e <__sflush_r+0xb2>
 80163c6:	4a2a      	ldr	r2, [pc, #168]	@ (8016470 <__sflush_r+0x104>)
 80163c8:	410a      	asrs	r2, r1
 80163ca:	07d6      	lsls	r6, r2, #31
 80163cc:	d427      	bmi.n	801641e <__sflush_r+0xb2>
 80163ce:	2200      	movs	r2, #0
 80163d0:	6062      	str	r2, [r4, #4]
 80163d2:	04d9      	lsls	r1, r3, #19
 80163d4:	6922      	ldr	r2, [r4, #16]
 80163d6:	6022      	str	r2, [r4, #0]
 80163d8:	d504      	bpl.n	80163e4 <__sflush_r+0x78>
 80163da:	1c42      	adds	r2, r0, #1
 80163dc:	d101      	bne.n	80163e2 <__sflush_r+0x76>
 80163de:	682b      	ldr	r3, [r5, #0]
 80163e0:	b903      	cbnz	r3, 80163e4 <__sflush_r+0x78>
 80163e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80163e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80163e6:	602f      	str	r7, [r5, #0]
 80163e8:	b1b9      	cbz	r1, 801641a <__sflush_r+0xae>
 80163ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80163ee:	4299      	cmp	r1, r3
 80163f0:	d002      	beq.n	80163f8 <__sflush_r+0x8c>
 80163f2:	4628      	mov	r0, r5
 80163f4:	f7ff f9f6 	bl	80157e4 <_free_r>
 80163f8:	2300      	movs	r3, #0
 80163fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80163fc:	e00d      	b.n	801641a <__sflush_r+0xae>
 80163fe:	2301      	movs	r3, #1
 8016400:	4628      	mov	r0, r5
 8016402:	47b0      	blx	r6
 8016404:	4602      	mov	r2, r0
 8016406:	1c50      	adds	r0, r2, #1
 8016408:	d1c9      	bne.n	801639e <__sflush_r+0x32>
 801640a:	682b      	ldr	r3, [r5, #0]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d0c6      	beq.n	801639e <__sflush_r+0x32>
 8016410:	2b1d      	cmp	r3, #29
 8016412:	d001      	beq.n	8016418 <__sflush_r+0xac>
 8016414:	2b16      	cmp	r3, #22
 8016416:	d11e      	bne.n	8016456 <__sflush_r+0xea>
 8016418:	602f      	str	r7, [r5, #0]
 801641a:	2000      	movs	r0, #0
 801641c:	e022      	b.n	8016464 <__sflush_r+0xf8>
 801641e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016422:	b21b      	sxth	r3, r3
 8016424:	e01b      	b.n	801645e <__sflush_r+0xf2>
 8016426:	690f      	ldr	r7, [r1, #16]
 8016428:	2f00      	cmp	r7, #0
 801642a:	d0f6      	beq.n	801641a <__sflush_r+0xae>
 801642c:	0793      	lsls	r3, r2, #30
 801642e:	680e      	ldr	r6, [r1, #0]
 8016430:	bf08      	it	eq
 8016432:	694b      	ldreq	r3, [r1, #20]
 8016434:	600f      	str	r7, [r1, #0]
 8016436:	bf18      	it	ne
 8016438:	2300      	movne	r3, #0
 801643a:	eba6 0807 	sub.w	r8, r6, r7
 801643e:	608b      	str	r3, [r1, #8]
 8016440:	f1b8 0f00 	cmp.w	r8, #0
 8016444:	dde9      	ble.n	801641a <__sflush_r+0xae>
 8016446:	6a21      	ldr	r1, [r4, #32]
 8016448:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801644a:	4643      	mov	r3, r8
 801644c:	463a      	mov	r2, r7
 801644e:	4628      	mov	r0, r5
 8016450:	47b0      	blx	r6
 8016452:	2800      	cmp	r0, #0
 8016454:	dc08      	bgt.n	8016468 <__sflush_r+0xfc>
 8016456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801645a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801645e:	81a3      	strh	r3, [r4, #12]
 8016460:	f04f 30ff 	mov.w	r0, #4294967295
 8016464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016468:	4407      	add	r7, r0
 801646a:	eba8 0800 	sub.w	r8, r8, r0
 801646e:	e7e7      	b.n	8016440 <__sflush_r+0xd4>
 8016470:	dfbffffe 	.word	0xdfbffffe

08016474 <_fflush_r>:
 8016474:	b538      	push	{r3, r4, r5, lr}
 8016476:	690b      	ldr	r3, [r1, #16]
 8016478:	4605      	mov	r5, r0
 801647a:	460c      	mov	r4, r1
 801647c:	b913      	cbnz	r3, 8016484 <_fflush_r+0x10>
 801647e:	2500      	movs	r5, #0
 8016480:	4628      	mov	r0, r5
 8016482:	bd38      	pop	{r3, r4, r5, pc}
 8016484:	b118      	cbz	r0, 801648e <_fflush_r+0x1a>
 8016486:	6a03      	ldr	r3, [r0, #32]
 8016488:	b90b      	cbnz	r3, 801648e <_fflush_r+0x1a>
 801648a:	f7fe f9c1 	bl	8014810 <__sinit>
 801648e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d0f3      	beq.n	801647e <_fflush_r+0xa>
 8016496:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016498:	07d0      	lsls	r0, r2, #31
 801649a:	d404      	bmi.n	80164a6 <_fflush_r+0x32>
 801649c:	0599      	lsls	r1, r3, #22
 801649e:	d402      	bmi.n	80164a6 <_fflush_r+0x32>
 80164a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80164a2:	f7fe fbb0 	bl	8014c06 <__retarget_lock_acquire_recursive>
 80164a6:	4628      	mov	r0, r5
 80164a8:	4621      	mov	r1, r4
 80164aa:	f7ff ff5f 	bl	801636c <__sflush_r>
 80164ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80164b0:	07da      	lsls	r2, r3, #31
 80164b2:	4605      	mov	r5, r0
 80164b4:	d4e4      	bmi.n	8016480 <_fflush_r+0xc>
 80164b6:	89a3      	ldrh	r3, [r4, #12]
 80164b8:	059b      	lsls	r3, r3, #22
 80164ba:	d4e1      	bmi.n	8016480 <_fflush_r+0xc>
 80164bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80164be:	f7fe fba3 	bl	8014c08 <__retarget_lock_release_recursive>
 80164c2:	e7dd      	b.n	8016480 <_fflush_r+0xc>

080164c4 <__swhatbuf_r>:
 80164c4:	b570      	push	{r4, r5, r6, lr}
 80164c6:	460c      	mov	r4, r1
 80164c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164cc:	2900      	cmp	r1, #0
 80164ce:	b096      	sub	sp, #88	@ 0x58
 80164d0:	4615      	mov	r5, r2
 80164d2:	461e      	mov	r6, r3
 80164d4:	da0d      	bge.n	80164f2 <__swhatbuf_r+0x2e>
 80164d6:	89a3      	ldrh	r3, [r4, #12]
 80164d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80164dc:	f04f 0100 	mov.w	r1, #0
 80164e0:	bf14      	ite	ne
 80164e2:	2340      	movne	r3, #64	@ 0x40
 80164e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80164e8:	2000      	movs	r0, #0
 80164ea:	6031      	str	r1, [r6, #0]
 80164ec:	602b      	str	r3, [r5, #0]
 80164ee:	b016      	add	sp, #88	@ 0x58
 80164f0:	bd70      	pop	{r4, r5, r6, pc}
 80164f2:	466a      	mov	r2, sp
 80164f4:	f000 f848 	bl	8016588 <_fstat_r>
 80164f8:	2800      	cmp	r0, #0
 80164fa:	dbec      	blt.n	80164d6 <__swhatbuf_r+0x12>
 80164fc:	9901      	ldr	r1, [sp, #4]
 80164fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016502:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016506:	4259      	negs	r1, r3
 8016508:	4159      	adcs	r1, r3
 801650a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801650e:	e7eb      	b.n	80164e8 <__swhatbuf_r+0x24>

08016510 <__smakebuf_r>:
 8016510:	898b      	ldrh	r3, [r1, #12]
 8016512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016514:	079d      	lsls	r5, r3, #30
 8016516:	4606      	mov	r6, r0
 8016518:	460c      	mov	r4, r1
 801651a:	d507      	bpl.n	801652c <__smakebuf_r+0x1c>
 801651c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016520:	6023      	str	r3, [r4, #0]
 8016522:	6123      	str	r3, [r4, #16]
 8016524:	2301      	movs	r3, #1
 8016526:	6163      	str	r3, [r4, #20]
 8016528:	b003      	add	sp, #12
 801652a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801652c:	ab01      	add	r3, sp, #4
 801652e:	466a      	mov	r2, sp
 8016530:	f7ff ffc8 	bl	80164c4 <__swhatbuf_r>
 8016534:	9f00      	ldr	r7, [sp, #0]
 8016536:	4605      	mov	r5, r0
 8016538:	4639      	mov	r1, r7
 801653a:	4630      	mov	r0, r6
 801653c:	f7ff f9c6 	bl	80158cc <_malloc_r>
 8016540:	b948      	cbnz	r0, 8016556 <__smakebuf_r+0x46>
 8016542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016546:	059a      	lsls	r2, r3, #22
 8016548:	d4ee      	bmi.n	8016528 <__smakebuf_r+0x18>
 801654a:	f023 0303 	bic.w	r3, r3, #3
 801654e:	f043 0302 	orr.w	r3, r3, #2
 8016552:	81a3      	strh	r3, [r4, #12]
 8016554:	e7e2      	b.n	801651c <__smakebuf_r+0xc>
 8016556:	89a3      	ldrh	r3, [r4, #12]
 8016558:	6020      	str	r0, [r4, #0]
 801655a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801655e:	81a3      	strh	r3, [r4, #12]
 8016560:	9b01      	ldr	r3, [sp, #4]
 8016562:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016566:	b15b      	cbz	r3, 8016580 <__smakebuf_r+0x70>
 8016568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801656c:	4630      	mov	r0, r6
 801656e:	f000 f81d 	bl	80165ac <_isatty_r>
 8016572:	b128      	cbz	r0, 8016580 <__smakebuf_r+0x70>
 8016574:	89a3      	ldrh	r3, [r4, #12]
 8016576:	f023 0303 	bic.w	r3, r3, #3
 801657a:	f043 0301 	orr.w	r3, r3, #1
 801657e:	81a3      	strh	r3, [r4, #12]
 8016580:	89a3      	ldrh	r3, [r4, #12]
 8016582:	431d      	orrs	r5, r3
 8016584:	81a5      	strh	r5, [r4, #12]
 8016586:	e7cf      	b.n	8016528 <__smakebuf_r+0x18>

08016588 <_fstat_r>:
 8016588:	b538      	push	{r3, r4, r5, lr}
 801658a:	4d07      	ldr	r5, [pc, #28]	@ (80165a8 <_fstat_r+0x20>)
 801658c:	2300      	movs	r3, #0
 801658e:	4604      	mov	r4, r0
 8016590:	4608      	mov	r0, r1
 8016592:	4611      	mov	r1, r2
 8016594:	602b      	str	r3, [r5, #0]
 8016596:	f7ec f8a9 	bl	80026ec <_fstat>
 801659a:	1c43      	adds	r3, r0, #1
 801659c:	d102      	bne.n	80165a4 <_fstat_r+0x1c>
 801659e:	682b      	ldr	r3, [r5, #0]
 80165a0:	b103      	cbz	r3, 80165a4 <_fstat_r+0x1c>
 80165a2:	6023      	str	r3, [r4, #0]
 80165a4:	bd38      	pop	{r3, r4, r5, pc}
 80165a6:	bf00      	nop
 80165a8:	240017ac 	.word	0x240017ac

080165ac <_isatty_r>:
 80165ac:	b538      	push	{r3, r4, r5, lr}
 80165ae:	4d06      	ldr	r5, [pc, #24]	@ (80165c8 <_isatty_r+0x1c>)
 80165b0:	2300      	movs	r3, #0
 80165b2:	4604      	mov	r4, r0
 80165b4:	4608      	mov	r0, r1
 80165b6:	602b      	str	r3, [r5, #0]
 80165b8:	f7ec f8a8 	bl	800270c <_isatty>
 80165bc:	1c43      	adds	r3, r0, #1
 80165be:	d102      	bne.n	80165c6 <_isatty_r+0x1a>
 80165c0:	682b      	ldr	r3, [r5, #0]
 80165c2:	b103      	cbz	r3, 80165c6 <_isatty_r+0x1a>
 80165c4:	6023      	str	r3, [r4, #0]
 80165c6:	bd38      	pop	{r3, r4, r5, pc}
 80165c8:	240017ac 	.word	0x240017ac

080165cc <_sbrk_r>:
 80165cc:	b538      	push	{r3, r4, r5, lr}
 80165ce:	4d06      	ldr	r5, [pc, #24]	@ (80165e8 <_sbrk_r+0x1c>)
 80165d0:	2300      	movs	r3, #0
 80165d2:	4604      	mov	r4, r0
 80165d4:	4608      	mov	r0, r1
 80165d6:	602b      	str	r3, [r5, #0]
 80165d8:	f7ec f8b0 	bl	800273c <_sbrk>
 80165dc:	1c43      	adds	r3, r0, #1
 80165de:	d102      	bne.n	80165e6 <_sbrk_r+0x1a>
 80165e0:	682b      	ldr	r3, [r5, #0]
 80165e2:	b103      	cbz	r3, 80165e6 <_sbrk_r+0x1a>
 80165e4:	6023      	str	r3, [r4, #0]
 80165e6:	bd38      	pop	{r3, r4, r5, pc}
 80165e8:	240017ac 	.word	0x240017ac

080165ec <__assert_func>:
 80165ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80165ee:	4614      	mov	r4, r2
 80165f0:	461a      	mov	r2, r3
 80165f2:	4b09      	ldr	r3, [pc, #36]	@ (8016618 <__assert_func+0x2c>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	4605      	mov	r5, r0
 80165f8:	68d8      	ldr	r0, [r3, #12]
 80165fa:	b954      	cbnz	r4, 8016612 <__assert_func+0x26>
 80165fc:	4b07      	ldr	r3, [pc, #28]	@ (801661c <__assert_func+0x30>)
 80165fe:	461c      	mov	r4, r3
 8016600:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016604:	9100      	str	r1, [sp, #0]
 8016606:	462b      	mov	r3, r5
 8016608:	4905      	ldr	r1, [pc, #20]	@ (8016620 <__assert_func+0x34>)
 801660a:	f000 f841 	bl	8016690 <fiprintf>
 801660e:	f000 f851 	bl	80166b4 <abort>
 8016612:	4b04      	ldr	r3, [pc, #16]	@ (8016624 <__assert_func+0x38>)
 8016614:	e7f4      	b.n	8016600 <__assert_func+0x14>
 8016616:	bf00      	nop
 8016618:	2400013c 	.word	0x2400013c
 801661c:	08016d8e 	.word	0x08016d8e
 8016620:	08016d60 	.word	0x08016d60
 8016624:	08016d53 	.word	0x08016d53

08016628 <_calloc_r>:
 8016628:	b570      	push	{r4, r5, r6, lr}
 801662a:	fba1 5402 	umull	r5, r4, r1, r2
 801662e:	b93c      	cbnz	r4, 8016640 <_calloc_r+0x18>
 8016630:	4629      	mov	r1, r5
 8016632:	f7ff f94b 	bl	80158cc <_malloc_r>
 8016636:	4606      	mov	r6, r0
 8016638:	b928      	cbnz	r0, 8016646 <_calloc_r+0x1e>
 801663a:	2600      	movs	r6, #0
 801663c:	4630      	mov	r0, r6
 801663e:	bd70      	pop	{r4, r5, r6, pc}
 8016640:	220c      	movs	r2, #12
 8016642:	6002      	str	r2, [r0, #0]
 8016644:	e7f9      	b.n	801663a <_calloc_r+0x12>
 8016646:	462a      	mov	r2, r5
 8016648:	4621      	mov	r1, r4
 801664a:	f7fe fa5f 	bl	8014b0c <memset>
 801664e:	e7f5      	b.n	801663c <_calloc_r+0x14>

08016650 <__ascii_mbtowc>:
 8016650:	b082      	sub	sp, #8
 8016652:	b901      	cbnz	r1, 8016656 <__ascii_mbtowc+0x6>
 8016654:	a901      	add	r1, sp, #4
 8016656:	b142      	cbz	r2, 801666a <__ascii_mbtowc+0x1a>
 8016658:	b14b      	cbz	r3, 801666e <__ascii_mbtowc+0x1e>
 801665a:	7813      	ldrb	r3, [r2, #0]
 801665c:	600b      	str	r3, [r1, #0]
 801665e:	7812      	ldrb	r2, [r2, #0]
 8016660:	1e10      	subs	r0, r2, #0
 8016662:	bf18      	it	ne
 8016664:	2001      	movne	r0, #1
 8016666:	b002      	add	sp, #8
 8016668:	4770      	bx	lr
 801666a:	4610      	mov	r0, r2
 801666c:	e7fb      	b.n	8016666 <__ascii_mbtowc+0x16>
 801666e:	f06f 0001 	mvn.w	r0, #1
 8016672:	e7f8      	b.n	8016666 <__ascii_mbtowc+0x16>

08016674 <__ascii_wctomb>:
 8016674:	4603      	mov	r3, r0
 8016676:	4608      	mov	r0, r1
 8016678:	b141      	cbz	r1, 801668c <__ascii_wctomb+0x18>
 801667a:	2aff      	cmp	r2, #255	@ 0xff
 801667c:	d904      	bls.n	8016688 <__ascii_wctomb+0x14>
 801667e:	228a      	movs	r2, #138	@ 0x8a
 8016680:	601a      	str	r2, [r3, #0]
 8016682:	f04f 30ff 	mov.w	r0, #4294967295
 8016686:	4770      	bx	lr
 8016688:	700a      	strb	r2, [r1, #0]
 801668a:	2001      	movs	r0, #1
 801668c:	4770      	bx	lr
	...

08016690 <fiprintf>:
 8016690:	b40e      	push	{r1, r2, r3}
 8016692:	b503      	push	{r0, r1, lr}
 8016694:	4601      	mov	r1, r0
 8016696:	ab03      	add	r3, sp, #12
 8016698:	4805      	ldr	r0, [pc, #20]	@ (80166b0 <fiprintf+0x20>)
 801669a:	f853 2b04 	ldr.w	r2, [r3], #4
 801669e:	6800      	ldr	r0, [r0, #0]
 80166a0:	9301      	str	r3, [sp, #4]
 80166a2:	f7ff fd4b 	bl	801613c <_vfiprintf_r>
 80166a6:	b002      	add	sp, #8
 80166a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80166ac:	b003      	add	sp, #12
 80166ae:	4770      	bx	lr
 80166b0:	2400013c 	.word	0x2400013c

080166b4 <abort>:
 80166b4:	b508      	push	{r3, lr}
 80166b6:	2006      	movs	r0, #6
 80166b8:	f000 f82c 	bl	8016714 <raise>
 80166bc:	2001      	movs	r0, #1
 80166be:	f7eb ffe1 	bl	8002684 <_exit>

080166c2 <_raise_r>:
 80166c2:	291f      	cmp	r1, #31
 80166c4:	b538      	push	{r3, r4, r5, lr}
 80166c6:	4605      	mov	r5, r0
 80166c8:	460c      	mov	r4, r1
 80166ca:	d904      	bls.n	80166d6 <_raise_r+0x14>
 80166cc:	2316      	movs	r3, #22
 80166ce:	6003      	str	r3, [r0, #0]
 80166d0:	f04f 30ff 	mov.w	r0, #4294967295
 80166d4:	bd38      	pop	{r3, r4, r5, pc}
 80166d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80166d8:	b112      	cbz	r2, 80166e0 <_raise_r+0x1e>
 80166da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166de:	b94b      	cbnz	r3, 80166f4 <_raise_r+0x32>
 80166e0:	4628      	mov	r0, r5
 80166e2:	f000 f831 	bl	8016748 <_getpid_r>
 80166e6:	4622      	mov	r2, r4
 80166e8:	4601      	mov	r1, r0
 80166ea:	4628      	mov	r0, r5
 80166ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166f0:	f000 b818 	b.w	8016724 <_kill_r>
 80166f4:	2b01      	cmp	r3, #1
 80166f6:	d00a      	beq.n	801670e <_raise_r+0x4c>
 80166f8:	1c59      	adds	r1, r3, #1
 80166fa:	d103      	bne.n	8016704 <_raise_r+0x42>
 80166fc:	2316      	movs	r3, #22
 80166fe:	6003      	str	r3, [r0, #0]
 8016700:	2001      	movs	r0, #1
 8016702:	e7e7      	b.n	80166d4 <_raise_r+0x12>
 8016704:	2100      	movs	r1, #0
 8016706:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801670a:	4620      	mov	r0, r4
 801670c:	4798      	blx	r3
 801670e:	2000      	movs	r0, #0
 8016710:	e7e0      	b.n	80166d4 <_raise_r+0x12>
	...

08016714 <raise>:
 8016714:	4b02      	ldr	r3, [pc, #8]	@ (8016720 <raise+0xc>)
 8016716:	4601      	mov	r1, r0
 8016718:	6818      	ldr	r0, [r3, #0]
 801671a:	f7ff bfd2 	b.w	80166c2 <_raise_r>
 801671e:	bf00      	nop
 8016720:	2400013c 	.word	0x2400013c

08016724 <_kill_r>:
 8016724:	b538      	push	{r3, r4, r5, lr}
 8016726:	4d07      	ldr	r5, [pc, #28]	@ (8016744 <_kill_r+0x20>)
 8016728:	2300      	movs	r3, #0
 801672a:	4604      	mov	r4, r0
 801672c:	4608      	mov	r0, r1
 801672e:	4611      	mov	r1, r2
 8016730:	602b      	str	r3, [r5, #0]
 8016732:	f7eb ff97 	bl	8002664 <_kill>
 8016736:	1c43      	adds	r3, r0, #1
 8016738:	d102      	bne.n	8016740 <_kill_r+0x1c>
 801673a:	682b      	ldr	r3, [r5, #0]
 801673c:	b103      	cbz	r3, 8016740 <_kill_r+0x1c>
 801673e:	6023      	str	r3, [r4, #0]
 8016740:	bd38      	pop	{r3, r4, r5, pc}
 8016742:	bf00      	nop
 8016744:	240017ac 	.word	0x240017ac

08016748 <_getpid_r>:
 8016748:	f7eb bf84 	b.w	8002654 <_getpid>

0801674c <_init>:
 801674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801674e:	bf00      	nop
 8016750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016752:	bc08      	pop	{r3}
 8016754:	469e      	mov	lr, r3
 8016756:	4770      	bx	lr

08016758 <_fini>:
 8016758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801675a:	bf00      	nop
 801675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801675e:	bc08      	pop	{r3}
 8016760:	469e      	mov	lr, r3
 8016762:	4770      	bx	lr
